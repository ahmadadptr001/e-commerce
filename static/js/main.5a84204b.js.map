{"version":3,"file":"static/js/main.5a84204b.js","mappings":"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","sources":["../node_modules/bootstrap/js/src/dom/data.js","../node_modules/bootstrap/js/src/util/index.js","../node_modules/bootstrap/js/src/dom/event-handler.js","../node_modules/bootstrap/js/src/dom/manipulator.js","../node_modules/bootstrap/js/src/util/config.js","../node_modules/bootstrap/js/src/base-component.js","../node_modules/bootstrap/js/src/dom/selector-engine.js","../node_modules/bootstrap/js/src/util/component-functions.js","../node_modules/bootstrap/js/src/alert.js","../node_modules/bootstrap/js/src/button.js","../node_modules/bootstrap/js/src/util/swipe.js","../node_modules/bootstrap/js/src/carousel.js","../node_modules/bootstrap/js/src/collapse.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/enums.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getNodeName.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getWindow.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/instanceOf.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/applyStyles.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getBasePlacement.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/math.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/userAgent.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/contains.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/isTableElement.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getParentNode.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/within.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/mergePaddingObject.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getFreshSideObject.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/expandToHashMap.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/arrow.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getVariation.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/computeStyles.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/eventListeners.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getOppositePlacement.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/rectToClientRect.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/computeOffsets.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/detectOverflow.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/flip.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/hide.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/offset.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/popperOffsets.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/modifiers/preventOverflow.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/getAltAxis.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/orderModifiers.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/createPopper.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/debounce.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/utils/mergeByName.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/popper-lite.js","../node_modules/bootstrap/node_modules/@popperjs/core/lib/popper.js","../node_modules/bootstrap/js/src/dropdown.js","../node_modules/bootstrap/js/src/util/backdrop.js","../node_modules/bootstrap/js/src/util/focustrap.js","../node_modules/bootstrap/js/src/util/scrollbar.js","../node_modules/bootstrap/js/src/modal.js","../node_modules/bootstrap/js/src/offcanvas.js","../node_modules/bootstrap/js/src/util/sanitizer.js","../node_modules/bootstrap/js/src/util/template-factory.js","../node_modules/bootstrap/js/src/tooltip.js","../node_modules/bootstrap/js/src/popover.js","../node_modules/bootstrap/js/src/scrollspy.js","../node_modules/bootstrap/js/src/tab.js","../node_modules/bootstrap/js/src/toast.js","../node_modules/bootstrap/js/index.umd.js","../node_modules/react-dom/cjs/react-dom.production.min.js","../node_modules/react-dom/client.js","../node_modules/react-dom/index.js","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/cjs/react.production.min.js","../node_modules/react/index.js","../node_modules/react/jsx-runtime.js","../node_modules/scheduler/cjs/scheduler.production.min.js","../node_modules/scheduler/index.js","../webpack/bootstrap","../webpack/runtime/create fake namespace object","../webpack/runtime/define property getters","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/publicPath","../node_modules/@remix-run/router/history.ts","../node_modules/@remix-run/router/utils.ts","../node_modules/@remix-run/router/router.ts","../node_modules/react-router/lib/context.ts","../node_modules/react-router/lib/hooks.tsx","../node_modules/react-router/lib/components.tsx","../node_modules/react-router-dom/dom.ts","../node_modules/react-router-dom/index.tsx","components/navbar.js","assets/images/main.svg","../node_modules/is-dom-node/dist/is-dom-node.es.js","../node_modules/is-dom-node-list/dist/is-dom-node-list.es.js","../node_modules/tealight/dist/tealight.es.js","../node_modules/rematrix/dist/rematrix.es.js","../node_modules/miniraf/dist/miniraf.es.js","../node_modules/scrollreveal/dist/scrollreveal.es.js","components/hero.js","assets/images/project.svg","components/a_year.js","assets/images/notebook.svg","components/notepadPage.js","assets/images/sad-image1.svg","assets/images/sad-image2.svg","components/motivation.js","components/follow.js","components/footer.js","components/ShopPage/mainShop.js","components/mainPage/a_year_main.js","assets/images/about.svg","components/About/aboutMain.js","components/Contact/ContactMain.js","components-shop/navigation.js","components-shop/mainContent.js","components-shop/HeroSection.js","components-shop/electronics.js","components-shop/jewelery.js","components-shop/men's clothing.js","components-shop/women's clothing.js","components-shop/heroSectionSearch.js","components-shop/searching.js","App.js","index.js"],"sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/data.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n/**\n * Constants\n */\n\nconst elementMap = new Map()\n\nexport default {\n  set(element, key, instance) {\n    if (!elementMap.has(element)) {\n      elementMap.set(element, new Map())\n    }\n\n    const instanceMap = elementMap.get(element)\n\n    // make it clear we only want one instance per element\n    // can be removed later when multiple key/instances are fine to be used\n    if (!instanceMap.has(key) && instanceMap.size !== 0) {\n      // eslint-disable-next-line no-console\n      console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`)\n      return\n    }\n\n    instanceMap.set(key, instance)\n  },\n\n  get(element, key) {\n    if (elementMap.has(element)) {\n      return elementMap.get(element).get(key) || null\n    }\n\n    return null\n  },\n\n  remove(element, key) {\n    if (!elementMap.has(element)) {\n      return\n    }\n\n    const instanceMap = elementMap.get(element)\n\n    instanceMap.delete(key)\n\n    // free up element references if there are no instances left for an element\n    if (instanceMap.size === 0) {\n      elementMap.delete(element)\n    }\n  }\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/index.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nconst MAX_UID = 1_000_000\nconst MILLISECONDS_MULTIPLIER = 1000\nconst TRANSITION_END = 'transitionend'\n\n/**\n * Properly escape IDs selectors to handle weird IDs\n * @param {string} selector\n * @returns {string}\n */\nconst parseSelector = selector => {\n  if (selector && window.CSS && window.CSS.escape) {\n    // document.querySelector needs escaping to handle IDs (html5+) containing for instance /\n    selector = selector.replace(/#([^\\s\"#']+)/g, (match, id) => `#${CSS.escape(id)}`)\n  }\n\n  return selector\n}\n\n// Shout-out Angus Croll (https://goo.gl/pxwQGp)\nconst toType = object => {\n  if (object === null || object === undefined) {\n    return `${object}`\n  }\n\n  return Object.prototype.toString.call(object).match(/\\s([a-z]+)/i)[1].toLowerCase()\n}\n\n/**\n * Public Util API\n */\n\nconst getUID = prefix => {\n  do {\n    prefix += Math.floor(Math.random() * MAX_UID)\n  } while (document.getElementById(prefix))\n\n  return prefix\n}\n\nconst getTransitionDurationFromElement = element => {\n  if (!element) {\n    return 0\n  }\n\n  // Get transition-duration of the element\n  let { transitionDuration, transitionDelay } = window.getComputedStyle(element)\n\n  const floatTransitionDuration = Number.parseFloat(transitionDuration)\n  const floatTransitionDelay = Number.parseFloat(transitionDelay)\n\n  // Return 0 if element or transition duration is not found\n  if (!floatTransitionDuration && !floatTransitionDelay) {\n    return 0\n  }\n\n  // If multiple durations are defined, take the first\n  transitionDuration = transitionDuration.split(',')[0]\n  transitionDelay = transitionDelay.split(',')[0]\n\n  return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER\n}\n\nconst triggerTransitionEnd = element => {\n  element.dispatchEvent(new Event(TRANSITION_END))\n}\n\nconst isElement = object => {\n  if (!object || typeof object !== 'object') {\n    return false\n  }\n\n  if (typeof object.jquery !== 'undefined') {\n    object = object[0]\n  }\n\n  return typeof object.nodeType !== 'undefined'\n}\n\nconst getElement = object => {\n  // it's a jQuery object or a node element\n  if (isElement(object)) {\n    return object.jquery ? object[0] : object\n  }\n\n  if (typeof object === 'string' && object.length > 0) {\n    return document.querySelector(parseSelector(object))\n  }\n\n  return null\n}\n\nconst isVisible = element => {\n  if (!isElement(element) || element.getClientRects().length === 0) {\n    return false\n  }\n\n  const elementIsVisible = getComputedStyle(element).getPropertyValue('visibility') === 'visible'\n  // Handle `details` element as its content may falsie appear visible when it is closed\n  const closedDetails = element.closest('details:not([open])')\n\n  if (!closedDetails) {\n    return elementIsVisible\n  }\n\n  if (closedDetails !== element) {\n    const summary = element.closest('summary')\n    if (summary && summary.parentNode !== closedDetails) {\n      return false\n    }\n\n    if (summary === null) {\n      return false\n    }\n  }\n\n  return elementIsVisible\n}\n\nconst isDisabled = element => {\n  if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n    return true\n  }\n\n  if (element.classList.contains('disabled')) {\n    return true\n  }\n\n  if (typeof element.disabled !== 'undefined') {\n    return element.disabled\n  }\n\n  return element.hasAttribute('disabled') && element.getAttribute('disabled') !== 'false'\n}\n\nconst findShadowRoot = element => {\n  if (!document.documentElement.attachShadow) {\n    return null\n  }\n\n  // Can find the shadow root otherwise it'll return the document\n  if (typeof element.getRootNode === 'function') {\n    const root = element.getRootNode()\n    return root instanceof ShadowRoot ? root : null\n  }\n\n  if (element instanceof ShadowRoot) {\n    return element\n  }\n\n  // when we don't find a shadow root\n  if (!element.parentNode) {\n    return null\n  }\n\n  return findShadowRoot(element.parentNode)\n}\n\nconst noop = () => {}\n\n/**\n * Trick to restart an element's animation\n *\n * @param {HTMLElement} element\n * @return void\n *\n * @see https://www.charistheo.io/blog/2021/02/restart-a-css-animation-with-javascript/#restarting-a-css-animation\n */\nconst reflow = element => {\n  element.offsetHeight // eslint-disable-line no-unused-expressions\n}\n\nconst getjQuery = () => {\n  if (window.jQuery && !document.body.hasAttribute('data-bs-no-jquery')) {\n    return window.jQuery\n  }\n\n  return null\n}\n\nconst DOMContentLoadedCallbacks = []\n\nconst onDOMContentLoaded = callback => {\n  if (document.readyState === 'loading') {\n    // add listener on the first call when the document is in loading state\n    if (!DOMContentLoadedCallbacks.length) {\n      document.addEventListener('DOMContentLoaded', () => {\n        for (const callback of DOMContentLoadedCallbacks) {\n          callback()\n        }\n      })\n    }\n\n    DOMContentLoadedCallbacks.push(callback)\n  } else {\n    callback()\n  }\n}\n\nconst isRTL = () => document.documentElement.dir === 'rtl'\n\nconst defineJQueryPlugin = plugin => {\n  onDOMContentLoaded(() => {\n    const $ = getjQuery()\n    /* istanbul ignore if */\n    if ($) {\n      const name = plugin.NAME\n      const JQUERY_NO_CONFLICT = $.fn[name]\n      $.fn[name] = plugin.jQueryInterface\n      $.fn[name].Constructor = plugin\n      $.fn[name].noConflict = () => {\n        $.fn[name] = JQUERY_NO_CONFLICT\n        return plugin.jQueryInterface\n      }\n    }\n  })\n}\n\nconst execute = (possibleCallback, args = [], defaultValue = possibleCallback) => {\n  return typeof possibleCallback === 'function' ? possibleCallback(...args) : defaultValue\n}\n\nconst executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {\n  if (!waitForTransition) {\n    execute(callback)\n    return\n  }\n\n  const durationPadding = 5\n  const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding\n\n  let called = false\n\n  const handler = ({ target }) => {\n    if (target !== transitionElement) {\n      return\n    }\n\n    called = true\n    transitionElement.removeEventListener(TRANSITION_END, handler)\n    execute(callback)\n  }\n\n  transitionElement.addEventListener(TRANSITION_END, handler)\n  setTimeout(() => {\n    if (!called) {\n      triggerTransitionEnd(transitionElement)\n    }\n  }, emulatedDuration)\n}\n\n/**\n * Return the previous/next element of a list.\n *\n * @param {array} list    The list of elements\n * @param activeElement   The active element\n * @param shouldGetNext   Choose to get next or previous element\n * @param isCycleAllowed\n * @return {Element|elem} The proper element\n */\nconst getNextActiveElement = (list, activeElement, shouldGetNext, isCycleAllowed) => {\n  const listLength = list.length\n  let index = list.indexOf(activeElement)\n\n  // if the element does not exist in the list return an element\n  // depending on the direction and if cycle is allowed\n  if (index === -1) {\n    return !shouldGetNext && isCycleAllowed ? list[listLength - 1] : list[0]\n  }\n\n  index += shouldGetNext ? 1 : -1\n\n  if (isCycleAllowed) {\n    index = (index + listLength) % listLength\n  }\n\n  return list[Math.max(0, Math.min(index, listLength - 1))]\n}\n\nexport {\n  defineJQueryPlugin,\n  execute,\n  executeAfterTransition,\n  findShadowRoot,\n  getElement,\n  getjQuery,\n  getNextActiveElement,\n  getTransitionDurationFromElement,\n  getUID,\n  isDisabled,\n  isElement,\n  isRTL,\n  isVisible,\n  noop,\n  onDOMContentLoaded,\n  parseSelector,\n  reflow,\n  triggerTransitionEnd,\n  toType\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/event-handler.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { getjQuery } from '../util/index.js'\n\n/**\n * Constants\n */\n\nconst namespaceRegex = /[^.]*(?=\\..*)\\.|.*/\nconst stripNameRegex = /\\..*/\nconst stripUidRegex = /::\\d+$/\nconst eventRegistry = {} // Events storage\nlet uidEvent = 1\nconst customEvents = {\n  mouseenter: 'mouseover',\n  mouseleave: 'mouseout'\n}\n\nconst nativeEvents = new Set([\n  'click',\n  'dblclick',\n  'mouseup',\n  'mousedown',\n  'contextmenu',\n  'mousewheel',\n  'DOMMouseScroll',\n  'mouseover',\n  'mouseout',\n  'mousemove',\n  'selectstart',\n  'selectend',\n  'keydown',\n  'keypress',\n  'keyup',\n  'orientationchange',\n  'touchstart',\n  'touchmove',\n  'touchend',\n  'touchcancel',\n  'pointerdown',\n  'pointermove',\n  'pointerup',\n  'pointerleave',\n  'pointercancel',\n  'gesturestart',\n  'gesturechange',\n  'gestureend',\n  'focus',\n  'blur',\n  'change',\n  'reset',\n  'select',\n  'submit',\n  'focusin',\n  'focusout',\n  'load',\n  'unload',\n  'beforeunload',\n  'resize',\n  'move',\n  'DOMContentLoaded',\n  'readystatechange',\n  'error',\n  'abort',\n  'scroll'\n])\n\n/**\n * Private methods\n */\n\nfunction makeEventUid(element, uid) {\n  return (uid && `${uid}::${uidEvent++}`) || element.uidEvent || uidEvent++\n}\n\nfunction getElementEvents(element) {\n  const uid = makeEventUid(element)\n\n  element.uidEvent = uid\n  eventRegistry[uid] = eventRegistry[uid] || {}\n\n  return eventRegistry[uid]\n}\n\nfunction bootstrapHandler(element, fn) {\n  return function handler(event) {\n    hydrateObj(event, { delegateTarget: element })\n\n    if (handler.oneOff) {\n      EventHandler.off(element, event.type, fn)\n    }\n\n    return fn.apply(element, [event])\n  }\n}\n\nfunction bootstrapDelegationHandler(element, selector, fn) {\n  return function handler(event) {\n    const domElements = element.querySelectorAll(selector)\n\n    for (let { target } = event; target && target !== this; target = target.parentNode) {\n      for (const domElement of domElements) {\n        if (domElement !== target) {\n          continue\n        }\n\n        hydrateObj(event, { delegateTarget: target })\n\n        if (handler.oneOff) {\n          EventHandler.off(element, event.type, selector, fn)\n        }\n\n        return fn.apply(target, [event])\n      }\n    }\n  }\n}\n\nfunction findHandler(events, callable, delegationSelector = null) {\n  return Object.values(events)\n    .find(event => event.callable === callable && event.delegationSelector === delegationSelector)\n}\n\nfunction normalizeParameters(originalTypeEvent, handler, delegationFunction) {\n  const isDelegated = typeof handler === 'string'\n  // TODO: tooltip passes `false` instead of selector, so we need to check\n  const callable = isDelegated ? delegationFunction : (handler || delegationFunction)\n  let typeEvent = getTypeEvent(originalTypeEvent)\n\n  if (!nativeEvents.has(typeEvent)) {\n    typeEvent = originalTypeEvent\n  }\n\n  return [isDelegated, callable, typeEvent]\n}\n\nfunction addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {\n  if (typeof originalTypeEvent !== 'string' || !element) {\n    return\n  }\n\n  let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction)\n\n  // in case of mouseenter or mouseleave wrap the handler within a function that checks for its DOM position\n  // this prevents the handler from being dispatched the same way as mouseover or mouseout does\n  if (originalTypeEvent in customEvents) {\n    const wrapFunction = fn => {\n      return function (event) {\n        if (!event.relatedTarget || (event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget))) {\n          return fn.call(this, event)\n        }\n      }\n    }\n\n    callable = wrapFunction(callable)\n  }\n\n  const events = getElementEvents(element)\n  const handlers = events[typeEvent] || (events[typeEvent] = {})\n  const previousFunction = findHandler(handlers, callable, isDelegated ? handler : null)\n\n  if (previousFunction) {\n    previousFunction.oneOff = previousFunction.oneOff && oneOff\n\n    return\n  }\n\n  const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ''))\n  const fn = isDelegated ?\n    bootstrapDelegationHandler(element, handler, callable) :\n    bootstrapHandler(element, callable)\n\n  fn.delegationSelector = isDelegated ? handler : null\n  fn.callable = callable\n  fn.oneOff = oneOff\n  fn.uidEvent = uid\n  handlers[uid] = fn\n\n  element.addEventListener(typeEvent, fn, isDelegated)\n}\n\nfunction removeHandler(element, events, typeEvent, handler, delegationSelector) {\n  const fn = findHandler(events[typeEvent], handler, delegationSelector)\n\n  if (!fn) {\n    return\n  }\n\n  element.removeEventListener(typeEvent, fn, Boolean(delegationSelector))\n  delete events[typeEvent][fn.uidEvent]\n}\n\nfunction removeNamespacedHandlers(element, events, typeEvent, namespace) {\n  const storeElementEvent = events[typeEvent] || {}\n\n  for (const [handlerKey, event] of Object.entries(storeElementEvent)) {\n    if (handlerKey.includes(namespace)) {\n      removeHandler(element, events, typeEvent, event.callable, event.delegationSelector)\n    }\n  }\n}\n\nfunction getTypeEvent(event) {\n  // allow to get the native events from namespaced events ('click.bs.button' --> 'click')\n  event = event.replace(stripNameRegex, '')\n  return customEvents[event] || event\n}\n\nconst EventHandler = {\n  on(element, event, handler, delegationFunction) {\n    addHandler(element, event, handler, delegationFunction, false)\n  },\n\n  one(element, event, handler, delegationFunction) {\n    addHandler(element, event, handler, delegationFunction, true)\n  },\n\n  off(element, originalTypeEvent, handler, delegationFunction) {\n    if (typeof originalTypeEvent !== 'string' || !element) {\n      return\n    }\n\n    const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction)\n    const inNamespace = typeEvent !== originalTypeEvent\n    const events = getElementEvents(element)\n    const storeElementEvent = events[typeEvent] || {}\n    const isNamespace = originalTypeEvent.startsWith('.')\n\n    if (typeof callable !== 'undefined') {\n      // Simplest case: handler is passed, remove that listener ONLY.\n      if (!Object.keys(storeElementEvent).length) {\n        return\n      }\n\n      removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null)\n      return\n    }\n\n    if (isNamespace) {\n      for (const elementEvent of Object.keys(events)) {\n        removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1))\n      }\n    }\n\n    for (const [keyHandlers, event] of Object.entries(storeElementEvent)) {\n      const handlerKey = keyHandlers.replace(stripUidRegex, '')\n\n      if (!inNamespace || originalTypeEvent.includes(handlerKey)) {\n        removeHandler(element, events, typeEvent, event.callable, event.delegationSelector)\n      }\n    }\n  },\n\n  trigger(element, event, args) {\n    if (typeof event !== 'string' || !element) {\n      return null\n    }\n\n    const $ = getjQuery()\n    const typeEvent = getTypeEvent(event)\n    const inNamespace = event !== typeEvent\n\n    let jQueryEvent = null\n    let bubbles = true\n    let nativeDispatch = true\n    let defaultPrevented = false\n\n    if (inNamespace && $) {\n      jQueryEvent = $.Event(event, args)\n\n      $(element).trigger(jQueryEvent)\n      bubbles = !jQueryEvent.isPropagationStopped()\n      nativeDispatch = !jQueryEvent.isImmediatePropagationStopped()\n      defaultPrevented = jQueryEvent.isDefaultPrevented()\n    }\n\n    const evt = hydrateObj(new Event(event, { bubbles, cancelable: true }), args)\n\n    if (defaultPrevented) {\n      evt.preventDefault()\n    }\n\n    if (nativeDispatch) {\n      element.dispatchEvent(evt)\n    }\n\n    if (evt.defaultPrevented && jQueryEvent) {\n      jQueryEvent.preventDefault()\n    }\n\n    return evt\n  }\n}\n\nfunction hydrateObj(obj, meta = {}) {\n  for (const [key, value] of Object.entries(meta)) {\n    try {\n      obj[key] = value\n    } catch {\n      Object.defineProperty(obj, key, {\n        configurable: true,\n        get() {\n          return value\n        }\n      })\n    }\n  }\n\n  return obj\n}\n\nexport default EventHandler\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/manipulator.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nfunction normalizeData(value) {\n  if (value === 'true') {\n    return true\n  }\n\n  if (value === 'false') {\n    return false\n  }\n\n  if (value === Number(value).toString()) {\n    return Number(value)\n  }\n\n  if (value === '' || value === 'null') {\n    return null\n  }\n\n  if (typeof value !== 'string') {\n    return value\n  }\n\n  try {\n    return JSON.parse(decodeURIComponent(value))\n  } catch {\n    return value\n  }\n}\n\nfunction normalizeDataKey(key) {\n  return key.replace(/[A-Z]/g, chr => `-${chr.toLowerCase()}`)\n}\n\nconst Manipulator = {\n  setDataAttribute(element, key, value) {\n    element.setAttribute(`data-bs-${normalizeDataKey(key)}`, value)\n  },\n\n  removeDataAttribute(element, key) {\n    element.removeAttribute(`data-bs-${normalizeDataKey(key)}`)\n  },\n\n  getDataAttributes(element) {\n    if (!element) {\n      return {}\n    }\n\n    const attributes = {}\n    const bsKeys = Object.keys(element.dataset).filter(key => key.startsWith('bs') && !key.startsWith('bsConfig'))\n\n    for (const key of bsKeys) {\n      let pureKey = key.replace(/^bs/, '')\n      pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length)\n      attributes[pureKey] = normalizeData(element.dataset[key])\n    }\n\n    return attributes\n  },\n\n  getDataAttribute(element, key) {\n    return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key)}`))\n  }\n}\n\nexport default Manipulator\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/config.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Manipulator from '../dom/manipulator.js'\nimport { isElement, toType } from './index.js'\n\n/**\n * Class definition\n */\n\nclass Config {\n  // Getters\n  static get Default() {\n    return {}\n  }\n\n  static get DefaultType() {\n    return {}\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!')\n  }\n\n  _getConfig(config) {\n    config = this._mergeConfigObj(config)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  _configAfterMerge(config) {\n    return config\n  }\n\n  _mergeConfigObj(config, element) {\n    const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, 'config') : {} // try to parse\n\n    return {\n      ...this.constructor.Default,\n      ...(typeof jsonConfig === 'object' ? jsonConfig : {}),\n      ...(isElement(element) ? Manipulator.getDataAttributes(element) : {}),\n      ...(typeof config === 'object' ? config : {})\n    }\n  }\n\n  _typeCheckConfig(config, configTypes = this.constructor.DefaultType) {\n    for (const [property, expectedTypes] of Object.entries(configTypes)) {\n      const value = config[property]\n      const valueType = isElement(value) ? 'element' : toType(value)\n\n      if (!new RegExp(expectedTypes).test(valueType)) {\n        throw new TypeError(\n          `${this.constructor.NAME.toUpperCase()}: Option \"${property}\" provided type \"${valueType}\" but expected type \"${expectedTypes}\".`\n        )\n      }\n    }\n  }\n}\n\nexport default Config\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap base-component.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Data from './dom/data.js'\nimport EventHandler from './dom/event-handler.js'\nimport Config from './util/config.js'\nimport { executeAfterTransition, getElement } from './util/index.js'\n\n/**\n * Constants\n */\n\nconst VERSION = '5.3.3'\n\n/**\n * Class definition\n */\n\nclass BaseComponent extends Config {\n  constructor(element, config) {\n    super()\n\n    element = getElement(element)\n    if (!element) {\n      return\n    }\n\n    this._element = element\n    this._config = this._getConfig(config)\n\n    Data.set(this._element, this.constructor.DATA_KEY, this)\n  }\n\n  // Public\n  dispose() {\n    Data.remove(this._element, this.constructor.DATA_KEY)\n    EventHandler.off(this._element, this.constructor.EVENT_KEY)\n\n    for (const propertyName of Object.getOwnPropertyNames(this)) {\n      this[propertyName] = null\n    }\n  }\n\n  _queueCallback(callback, element, isAnimated = true) {\n    executeAfterTransition(callback, element, isAnimated)\n  }\n\n  _getConfig(config) {\n    config = this._mergeConfigObj(config, this._element)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  // Static\n  static getInstance(element) {\n    return Data.get(getElement(element), this.DATA_KEY)\n  }\n\n  static getOrCreateInstance(element, config = {}) {\n    return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null)\n  }\n\n  static get VERSION() {\n    return VERSION\n  }\n\n  static get DATA_KEY() {\n    return `bs.${this.NAME}`\n  }\n\n  static get EVENT_KEY() {\n    return `.${this.DATA_KEY}`\n  }\n\n  static eventName(name) {\n    return `${name}${this.EVENT_KEY}`\n  }\n}\n\nexport default BaseComponent\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap dom/selector-engine.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport { isDisabled, isVisible, parseSelector } from '../util/index.js'\n\nconst getSelector = element => {\n  let selector = element.getAttribute('data-bs-target')\n\n  if (!selector || selector === '#') {\n    let hrefAttribute = element.getAttribute('href')\n\n    // The only valid content that could double as a selector are IDs or classes,\n    // so everything starting with `#` or `.`. If a \"real\" URL is used as the selector,\n    // `document.querySelector` will rightfully complain it is invalid.\n    // See https://github.com/twbs/bootstrap/issues/32273\n    if (!hrefAttribute || (!hrefAttribute.includes('#') && !hrefAttribute.startsWith('.'))) {\n      return null\n    }\n\n    // Just in case some CMS puts out a full URL with the anchor appended\n    if (hrefAttribute.includes('#') && !hrefAttribute.startsWith('#')) {\n      hrefAttribute = `#${hrefAttribute.split('#')[1]}`\n    }\n\n    selector = hrefAttribute && hrefAttribute !== '#' ? hrefAttribute.trim() : null\n  }\n\n  return selector ? selector.split(',').map(sel => parseSelector(sel)).join(',') : null\n}\n\nconst SelectorEngine = {\n  find(selector, element = document.documentElement) {\n    return [].concat(...Element.prototype.querySelectorAll.call(element, selector))\n  },\n\n  findOne(selector, element = document.documentElement) {\n    return Element.prototype.querySelector.call(element, selector)\n  },\n\n  children(element, selector) {\n    return [].concat(...element.children).filter(child => child.matches(selector))\n  },\n\n  parents(element, selector) {\n    const parents = []\n    let ancestor = element.parentNode.closest(selector)\n\n    while (ancestor) {\n      parents.push(ancestor)\n      ancestor = ancestor.parentNode.closest(selector)\n    }\n\n    return parents\n  },\n\n  prev(element, selector) {\n    let previous = element.previousElementSibling\n\n    while (previous) {\n      if (previous.matches(selector)) {\n        return [previous]\n      }\n\n      previous = previous.previousElementSibling\n    }\n\n    return []\n  },\n  // TODO: this is now unused; remove later along with prev()\n  next(element, selector) {\n    let next = element.nextElementSibling\n\n    while (next) {\n      if (next.matches(selector)) {\n        return [next]\n      }\n\n      next = next.nextElementSibling\n    }\n\n    return []\n  },\n\n  focusableChildren(element) {\n    const focusables = [\n      'a',\n      'button',\n      'input',\n      'textarea',\n      'select',\n      'details',\n      '[tabindex]',\n      '[contenteditable=\"true\"]'\n    ].map(selector => `${selector}:not([tabindex^=\"-\"])`).join(',')\n\n    return this.find(focusables, element).filter(el => !isDisabled(el) && isVisible(el))\n  },\n\n  getSelectorFromElement(element) {\n    const selector = getSelector(element)\n\n    if (selector) {\n      return SelectorEngine.findOne(selector) ? selector : null\n    }\n\n    return null\n  },\n\n  getElementFromSelector(element) {\n    const selector = getSelector(element)\n\n    return selector ? SelectorEngine.findOne(selector) : null\n  },\n\n  getMultipleElementsFromSelector(element) {\n    const selector = getSelector(element)\n\n    return selector ? SelectorEngine.find(selector) : []\n  }\n}\n\nexport default SelectorEngine\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/component-functions.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler.js'\nimport SelectorEngine from '../dom/selector-engine.js'\nimport { isDisabled } from './index.js'\n\nconst enableDismissTrigger = (component, method = 'hide') => {\n  const clickEvent = `click.dismiss${component.EVENT_KEY}`\n  const name = component.NAME\n\n  EventHandler.on(document, clickEvent, `[data-bs-dismiss=\"${name}\"]`, function (event) {\n    if (['A', 'AREA'].includes(this.tagName)) {\n      event.preventDefault()\n    }\n\n    if (isDisabled(this)) {\n      return\n    }\n\n    const target = SelectorEngine.getElementFromSelector(this) || this.closest(`.${name}`)\n    const instance = component.getOrCreateInstance(target)\n\n    // Method argument is left, for Alert and only, as it doesn't implement the 'hide' method\n    instance[method]()\n  })\n}\n\nexport {\n  enableDismissTrigger\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap alert.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport { enableDismissTrigger } from './util/component-functions.js'\nimport { defineJQueryPlugin } from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'alert'\nconst DATA_KEY = 'bs.alert'\nconst EVENT_KEY = `.${DATA_KEY}`\n\nconst EVENT_CLOSE = `close${EVENT_KEY}`\nconst EVENT_CLOSED = `closed${EVENT_KEY}`\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_SHOW = 'show'\n\n/**\n * Class definition\n */\n\nclass Alert extends BaseComponent {\n  // Getters\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  close() {\n    const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE)\n\n    if (closeEvent.defaultPrevented) {\n      return\n    }\n\n    this._element.classList.remove(CLASS_NAME_SHOW)\n\n    const isAnimated = this._element.classList.contains(CLASS_NAME_FADE)\n    this._queueCallback(() => this._destroyElement(), this._element, isAnimated)\n  }\n\n  // Private\n  _destroyElement() {\n    this._element.remove()\n    EventHandler.trigger(this._element, EVENT_CLOSED)\n    this.dispose()\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Alert.getOrCreateInstance(this)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config](this)\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nenableDismissTrigger(Alert, 'close')\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Alert)\n\nexport default Alert\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport { defineJQueryPlugin } from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'button'\nconst DATA_KEY = 'bs.button'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst CLASS_NAME_ACTIVE = 'active'\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"button\"]'\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\n/**\n * Class definition\n */\n\nclass Button extends BaseComponent {\n  // Getters\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle() {\n    // Toggle class and sync the `aria-pressed` attribute with the return value of the `.toggle()` method\n    this._element.setAttribute('aria-pressed', this._element.classList.toggle(CLASS_NAME_ACTIVE))\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Button.getOrCreateInstance(this)\n\n      if (config === 'toggle') {\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, event => {\n  event.preventDefault()\n\n  const button = event.target.closest(SELECTOR_DATA_TOGGLE)\n  const data = Button.getOrCreateInstance(button)\n\n  data.toggle()\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Button)\n\nexport default Button\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/swipe.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler.js'\nimport Config from './config.js'\nimport { execute } from './index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'swipe'\nconst EVENT_KEY = '.bs.swipe'\nconst EVENT_TOUCHSTART = `touchstart${EVENT_KEY}`\nconst EVENT_TOUCHMOVE = `touchmove${EVENT_KEY}`\nconst EVENT_TOUCHEND = `touchend${EVENT_KEY}`\nconst EVENT_POINTERDOWN = `pointerdown${EVENT_KEY}`\nconst EVENT_POINTERUP = `pointerup${EVENT_KEY}`\nconst POINTER_TYPE_TOUCH = 'touch'\nconst POINTER_TYPE_PEN = 'pen'\nconst CLASS_NAME_POINTER_EVENT = 'pointer-event'\nconst SWIPE_THRESHOLD = 40\n\nconst Default = {\n  endCallback: null,\n  leftCallback: null,\n  rightCallback: null\n}\n\nconst DefaultType = {\n  endCallback: '(function|null)',\n  leftCallback: '(function|null)',\n  rightCallback: '(function|null)'\n}\n\n/**\n * Class definition\n */\n\nclass Swipe extends Config {\n  constructor(element, config) {\n    super()\n    this._element = element\n\n    if (!element || !Swipe.isSupported()) {\n      return\n    }\n\n    this._config = this._getConfig(config)\n    this._deltaX = 0\n    this._supportPointerEvents = Boolean(window.PointerEvent)\n    this._initEvents()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  dispose() {\n    EventHandler.off(this._element, EVENT_KEY)\n  }\n\n  // Private\n  _start(event) {\n    if (!this._supportPointerEvents) {\n      this._deltaX = event.touches[0].clientX\n\n      return\n    }\n\n    if (this._eventIsPointerPenTouch(event)) {\n      this._deltaX = event.clientX\n    }\n  }\n\n  _end(event) {\n    if (this._eventIsPointerPenTouch(event)) {\n      this._deltaX = event.clientX - this._deltaX\n    }\n\n    this._handleSwipe()\n    execute(this._config.endCallback)\n  }\n\n  _move(event) {\n    this._deltaX = event.touches && event.touches.length > 1 ?\n      0 :\n      event.touches[0].clientX - this._deltaX\n  }\n\n  _handleSwipe() {\n    const absDeltaX = Math.abs(this._deltaX)\n\n    if (absDeltaX <= SWIPE_THRESHOLD) {\n      return\n    }\n\n    const direction = absDeltaX / this._deltaX\n\n    this._deltaX = 0\n\n    if (!direction) {\n      return\n    }\n\n    execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback)\n  }\n\n  _initEvents() {\n    if (this._supportPointerEvents) {\n      EventHandler.on(this._element, EVENT_POINTERDOWN, event => this._start(event))\n      EventHandler.on(this._element, EVENT_POINTERUP, event => this._end(event))\n\n      this._element.classList.add(CLASS_NAME_POINTER_EVENT)\n    } else {\n      EventHandler.on(this._element, EVENT_TOUCHSTART, event => this._start(event))\n      EventHandler.on(this._element, EVENT_TOUCHMOVE, event => this._move(event))\n      EventHandler.on(this._element, EVENT_TOUCHEND, event => this._end(event))\n    }\n  }\n\n  _eventIsPointerPenTouch(event) {\n    return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH)\n  }\n\n  // Static\n  static isSupported() {\n    return 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0\n  }\n}\n\nexport default Swipe\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap carousel.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport Manipulator from './dom/manipulator.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport {\n  defineJQueryPlugin,\n  getNextActiveElement,\n  isRTL,\n  isVisible,\n  reflow,\n  triggerTransitionEnd\n} from './util/index.js'\nimport Swipe from './util/swipe.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'carousel'\nconst DATA_KEY = 'bs.carousel'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst ARROW_LEFT_KEY = 'ArrowLeft'\nconst ARROW_RIGHT_KEY = 'ArrowRight'\nconst TOUCHEVENT_COMPAT_WAIT = 500 // Time for mouse compat events to fire after touch\n\nconst ORDER_NEXT = 'next'\nconst ORDER_PREV = 'prev'\nconst DIRECTION_LEFT = 'left'\nconst DIRECTION_RIGHT = 'right'\n\nconst EVENT_SLIDE = `slide${EVENT_KEY}`\nconst EVENT_SLID = `slid${EVENT_KEY}`\nconst EVENT_KEYDOWN = `keydown${EVENT_KEY}`\nconst EVENT_MOUSEENTER = `mouseenter${EVENT_KEY}`\nconst EVENT_MOUSELEAVE = `mouseleave${EVENT_KEY}`\nconst EVENT_DRAG_START = `dragstart${EVENT_KEY}`\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_CAROUSEL = 'carousel'\nconst CLASS_NAME_ACTIVE = 'active'\nconst CLASS_NAME_SLIDE = 'slide'\nconst CLASS_NAME_END = 'carousel-item-end'\nconst CLASS_NAME_START = 'carousel-item-start'\nconst CLASS_NAME_NEXT = 'carousel-item-next'\nconst CLASS_NAME_PREV = 'carousel-item-prev'\n\nconst SELECTOR_ACTIVE = '.active'\nconst SELECTOR_ITEM = '.carousel-item'\nconst SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM\nconst SELECTOR_ITEM_IMG = '.carousel-item img'\nconst SELECTOR_INDICATORS = '.carousel-indicators'\nconst SELECTOR_DATA_SLIDE = '[data-bs-slide], [data-bs-slide-to]'\nconst SELECTOR_DATA_RIDE = '[data-bs-ride=\"carousel\"]'\n\nconst KEY_TO_DIRECTION = {\n  [ARROW_LEFT_KEY]: DIRECTION_RIGHT,\n  [ARROW_RIGHT_KEY]: DIRECTION_LEFT\n}\n\nconst Default = {\n  interval: 5000,\n  keyboard: true,\n  pause: 'hover',\n  ride: false,\n  touch: true,\n  wrap: true\n}\n\nconst DefaultType = {\n  interval: '(number|boolean)', // TODO:v6 remove boolean support\n  keyboard: 'boolean',\n  pause: '(string|boolean)',\n  ride: '(boolean|string)',\n  touch: 'boolean',\n  wrap: 'boolean'\n}\n\n/**\n * Class definition\n */\n\nclass Carousel extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._interval = null\n    this._activeElement = null\n    this._isSliding = false\n    this.touchTimeout = null\n    this._swipeHelper = null\n\n    this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element)\n    this._addEventListeners()\n\n    if (this._config.ride === CLASS_NAME_CAROUSEL) {\n      this.cycle()\n    }\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  next() {\n    this._slide(ORDER_NEXT)\n  }\n\n  nextWhenVisible() {\n    // FIXME TODO use `document.visibilityState`\n    // Don't call next when the page isn't visible\n    // or the carousel or its parent isn't visible\n    if (!document.hidden && isVisible(this._element)) {\n      this.next()\n    }\n  }\n\n  prev() {\n    this._slide(ORDER_PREV)\n  }\n\n  pause() {\n    if (this._isSliding) {\n      triggerTransitionEnd(this._element)\n    }\n\n    this._clearInterval()\n  }\n\n  cycle() {\n    this._clearInterval()\n    this._updateInterval()\n\n    this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval)\n  }\n\n  _maybeEnableCycle() {\n    if (!this._config.ride) {\n      return\n    }\n\n    if (this._isSliding) {\n      EventHandler.one(this._element, EVENT_SLID, () => this.cycle())\n      return\n    }\n\n    this.cycle()\n  }\n\n  to(index) {\n    const items = this._getItems()\n    if (index > items.length - 1 || index < 0) {\n      return\n    }\n\n    if (this._isSliding) {\n      EventHandler.one(this._element, EVENT_SLID, () => this.to(index))\n      return\n    }\n\n    const activeIndex = this._getItemIndex(this._getActive())\n    if (activeIndex === index) {\n      return\n    }\n\n    const order = index > activeIndex ? ORDER_NEXT : ORDER_PREV\n\n    this._slide(order, items[index])\n  }\n\n  dispose() {\n    if (this._swipeHelper) {\n      this._swipeHelper.dispose()\n    }\n\n    super.dispose()\n  }\n\n  // Private\n  _configAfterMerge(config) {\n    config.defaultInterval = config.interval\n    return config\n  }\n\n  _addEventListeners() {\n    if (this._config.keyboard) {\n      EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event))\n    }\n\n    if (this._config.pause === 'hover') {\n      EventHandler.on(this._element, EVENT_MOUSEENTER, () => this.pause())\n      EventHandler.on(this._element, EVENT_MOUSELEAVE, () => this._maybeEnableCycle())\n    }\n\n    if (this._config.touch && Swipe.isSupported()) {\n      this._addTouchEventListeners()\n    }\n  }\n\n  _addTouchEventListeners() {\n    for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)) {\n      EventHandler.on(img, EVENT_DRAG_START, event => event.preventDefault())\n    }\n\n    const endCallBack = () => {\n      if (this._config.pause !== 'hover') {\n        return\n      }\n\n      // If it's a touch-enabled device, mouseenter/leave are fired as\n      // part of the mouse compatibility events on first tap - the carousel\n      // would stop cycling until user tapped out of it;\n      // here, we listen for touchend, explicitly pause the carousel\n      // (as if it's the second time we tap on it, mouseenter compat event\n      // is NOT fired) and after a timeout (to allow for mouse compatibility\n      // events to fire) we explicitly restart cycling\n\n      this.pause()\n      if (this.touchTimeout) {\n        clearTimeout(this.touchTimeout)\n      }\n\n      this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval)\n    }\n\n    const swipeConfig = {\n      leftCallback: () => this._slide(this._directionToOrder(DIRECTION_LEFT)),\n      rightCallback: () => this._slide(this._directionToOrder(DIRECTION_RIGHT)),\n      endCallback: endCallBack\n    }\n\n    this._swipeHelper = new Swipe(this._element, swipeConfig)\n  }\n\n  _keydown(event) {\n    if (/input|textarea/i.test(event.target.tagName)) {\n      return\n    }\n\n    const direction = KEY_TO_DIRECTION[event.key]\n    if (direction) {\n      event.preventDefault()\n      this._slide(this._directionToOrder(direction))\n    }\n  }\n\n  _getItemIndex(element) {\n    return this._getItems().indexOf(element)\n  }\n\n  _setActiveIndicatorElement(index) {\n    if (!this._indicatorsElement) {\n      return\n    }\n\n    const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement)\n\n    activeIndicator.classList.remove(CLASS_NAME_ACTIVE)\n    activeIndicator.removeAttribute('aria-current')\n\n    const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to=\"${index}\"]`, this._indicatorsElement)\n\n    if (newActiveIndicator) {\n      newActiveIndicator.classList.add(CLASS_NAME_ACTIVE)\n      newActiveIndicator.setAttribute('aria-current', 'true')\n    }\n  }\n\n  _updateInterval() {\n    const element = this._activeElement || this._getActive()\n\n    if (!element) {\n      return\n    }\n\n    const elementInterval = Number.parseInt(element.getAttribute('data-bs-interval'), 10)\n\n    this._config.interval = elementInterval || this._config.defaultInterval\n  }\n\n  _slide(order, element = null) {\n    if (this._isSliding) {\n      return\n    }\n\n    const activeElement = this._getActive()\n    const isNext = order === ORDER_NEXT\n    const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap)\n\n    if (nextElement === activeElement) {\n      return\n    }\n\n    const nextElementIndex = this._getItemIndex(nextElement)\n\n    const triggerEvent = eventName => {\n      return EventHandler.trigger(this._element, eventName, {\n        relatedTarget: nextElement,\n        direction: this._orderToDirection(order),\n        from: this._getItemIndex(activeElement),\n        to: nextElementIndex\n      })\n    }\n\n    const slideEvent = triggerEvent(EVENT_SLIDE)\n\n    if (slideEvent.defaultPrevented) {\n      return\n    }\n\n    if (!activeElement || !nextElement) {\n      // Some weirdness is happening, so we bail\n      // TODO: change tests that use empty divs to avoid this check\n      return\n    }\n\n    const isCycling = Boolean(this._interval)\n    this.pause()\n\n    this._isSliding = true\n\n    this._setActiveIndicatorElement(nextElementIndex)\n    this._activeElement = nextElement\n\n    const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END\n    const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV\n\n    nextElement.classList.add(orderClassName)\n\n    reflow(nextElement)\n\n    activeElement.classList.add(directionalClassName)\n    nextElement.classList.add(directionalClassName)\n\n    const completeCallBack = () => {\n      nextElement.classList.remove(directionalClassName, orderClassName)\n      nextElement.classList.add(CLASS_NAME_ACTIVE)\n\n      activeElement.classList.remove(CLASS_NAME_ACTIVE, orderClassName, directionalClassName)\n\n      this._isSliding = false\n\n      triggerEvent(EVENT_SLID)\n    }\n\n    this._queueCallback(completeCallBack, activeElement, this._isAnimated())\n\n    if (isCycling) {\n      this.cycle()\n    }\n  }\n\n  _isAnimated() {\n    return this._element.classList.contains(CLASS_NAME_SLIDE)\n  }\n\n  _getActive() {\n    return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element)\n  }\n\n  _getItems() {\n    return SelectorEngine.find(SELECTOR_ITEM, this._element)\n  }\n\n  _clearInterval() {\n    if (this._interval) {\n      clearInterval(this._interval)\n      this._interval = null\n    }\n  }\n\n  _directionToOrder(direction) {\n    if (isRTL()) {\n      return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT\n    }\n\n    return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV\n  }\n\n  _orderToDirection(order) {\n    if (isRTL()) {\n      return order === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT\n    }\n\n    return order === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Carousel.getOrCreateInstance(this, config)\n\n      if (typeof config === 'number') {\n        data.to(config)\n        return\n      }\n\n      if (typeof config === 'string') {\n        if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n          throw new TypeError(`No method named \"${config}\"`)\n        }\n\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_SLIDE, function (event) {\n  const target = SelectorEngine.getElementFromSelector(this)\n\n  if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {\n    return\n  }\n\n  event.preventDefault()\n\n  const carousel = Carousel.getOrCreateInstance(target)\n  const slideIndex = this.getAttribute('data-bs-slide-to')\n\n  if (slideIndex) {\n    carousel.to(slideIndex)\n    carousel._maybeEnableCycle()\n    return\n  }\n\n  if (Manipulator.getDataAttribute(this, 'slide') === 'next') {\n    carousel.next()\n    carousel._maybeEnableCycle()\n    return\n  }\n\n  carousel.prev()\n  carousel._maybeEnableCycle()\n})\n\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE)\n\n  for (const carousel of carousels) {\n    Carousel.getOrCreateInstance(carousel)\n  }\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Carousel)\n\nexport default Carousel\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap collapse.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport {\n  defineJQueryPlugin,\n  getElement,\n  reflow\n} from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'collapse'\nconst DATA_KEY = 'bs.collapse'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_COLLAPSE = 'collapse'\nconst CLASS_NAME_COLLAPSING = 'collapsing'\nconst CLASS_NAME_COLLAPSED = 'collapsed'\nconst CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`\nconst CLASS_NAME_HORIZONTAL = 'collapse-horizontal'\n\nconst WIDTH = 'width'\nconst HEIGHT = 'height'\n\nconst SELECTOR_ACTIVES = '.collapse.show, .collapse.collapsing'\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"collapse\"]'\n\nconst Default = {\n  parent: null,\n  toggle: true\n}\n\nconst DefaultType = {\n  parent: '(null|element)',\n  toggle: 'boolean'\n}\n\n/**\n * Class definition\n */\n\nclass Collapse extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._isTransitioning = false\n    this._triggerArray = []\n\n    const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE)\n\n    for (const elem of toggleList) {\n      const selector = SelectorEngine.getSelectorFromElement(elem)\n      const filterElement = SelectorEngine.find(selector)\n        .filter(foundElement => foundElement === this._element)\n\n      if (selector !== null && filterElement.length) {\n        this._triggerArray.push(elem)\n      }\n    }\n\n    this._initializeChildren()\n\n    if (!this._config.parent) {\n      this._addAriaAndCollapsedClass(this._triggerArray, this._isShown())\n    }\n\n    if (this._config.toggle) {\n      this.toggle()\n    }\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle() {\n    if (this._isShown()) {\n      this.hide()\n    } else {\n      this.show()\n    }\n  }\n\n  show() {\n    if (this._isTransitioning || this._isShown()) {\n      return\n    }\n\n    let activeChildren = []\n\n    // find active children\n    if (this._config.parent) {\n      activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES)\n        .filter(element => element !== this._element)\n        .map(element => Collapse.getOrCreateInstance(element, { toggle: false }))\n    }\n\n    if (activeChildren.length && activeChildren[0]._isTransitioning) {\n      return\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_SHOW)\n    if (startEvent.defaultPrevented) {\n      return\n    }\n\n    for (const activeInstance of activeChildren) {\n      activeInstance.hide()\n    }\n\n    const dimension = this._getDimension()\n\n    this._element.classList.remove(CLASS_NAME_COLLAPSE)\n    this._element.classList.add(CLASS_NAME_COLLAPSING)\n\n    this._element.style[dimension] = 0\n\n    this._addAriaAndCollapsedClass(this._triggerArray, true)\n    this._isTransitioning = true\n\n    const complete = () => {\n      this._isTransitioning = false\n\n      this._element.classList.remove(CLASS_NAME_COLLAPSING)\n      this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW)\n\n      this._element.style[dimension] = ''\n\n      EventHandler.trigger(this._element, EVENT_SHOWN)\n    }\n\n    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1)\n    const scrollSize = `scroll${capitalizedDimension}`\n\n    this._queueCallback(complete, this._element, true)\n    this._element.style[dimension] = `${this._element[scrollSize]}px`\n  }\n\n  hide() {\n    if (this._isTransitioning || !this._isShown()) {\n      return\n    }\n\n    const startEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n    if (startEvent.defaultPrevented) {\n      return\n    }\n\n    const dimension = this._getDimension()\n\n    this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`\n\n    reflow(this._element)\n\n    this._element.classList.add(CLASS_NAME_COLLAPSING)\n    this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW)\n\n    for (const trigger of this._triggerArray) {\n      const element = SelectorEngine.getElementFromSelector(trigger)\n\n      if (element && !this._isShown(element)) {\n        this._addAriaAndCollapsedClass([trigger], false)\n      }\n    }\n\n    this._isTransitioning = true\n\n    const complete = () => {\n      this._isTransitioning = false\n      this._element.classList.remove(CLASS_NAME_COLLAPSING)\n      this._element.classList.add(CLASS_NAME_COLLAPSE)\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    }\n\n    this._element.style[dimension] = ''\n\n    this._queueCallback(complete, this._element, true)\n  }\n\n  _isShown(element = this._element) {\n    return element.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  // Private\n  _configAfterMerge(config) {\n    config.toggle = Boolean(config.toggle) // Coerce string values\n    config.parent = getElement(config.parent)\n    return config\n  }\n\n  _getDimension() {\n    return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT\n  }\n\n  _initializeChildren() {\n    if (!this._config.parent) {\n      return\n    }\n\n    const children = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE)\n\n    for (const element of children) {\n      const selected = SelectorEngine.getElementFromSelector(element)\n\n      if (selected) {\n        this._addAriaAndCollapsedClass([element], this._isShown(selected))\n      }\n    }\n  }\n\n  _getFirstLevelChildren(selector) {\n    const children = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent)\n    // remove children if greater depth\n    return SelectorEngine.find(selector, this._config.parent).filter(element => !children.includes(element))\n  }\n\n  _addAriaAndCollapsedClass(triggerArray, isOpen) {\n    if (!triggerArray.length) {\n      return\n    }\n\n    for (const element of triggerArray) {\n      element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen)\n      element.setAttribute('aria-expanded', isOpen)\n    }\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    const _config = {}\n    if (typeof config === 'string' && /show|hide/.test(config)) {\n      _config.toggle = false\n    }\n\n    return this.each(function () {\n      const data = Collapse.getOrCreateInstance(this, _config)\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`)\n        }\n\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n  if (event.target.tagName === 'A' || (event.delegateTarget && event.delegateTarget.tagName === 'A')) {\n    event.preventDefault()\n  }\n\n  for (const element of SelectorEngine.getMultipleElementsFromSelector(this)) {\n    Collapse.getOrCreateInstance(element, { toggle: false }).toggle()\n  }\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Collapse)\n\nexport default Collapse\n","export var top = 'top';\nexport var bottom = 'bottom';\nexport var right = 'right';\nexport var left = 'left';\nexport var auto = 'auto';\nexport var basePlacements = [top, bottom, right, left];\nexport var start = 'start';\nexport var end = 'end';\nexport var clippingParents = 'clippingParents';\nexport var viewport = 'viewport';\nexport var popper = 'popper';\nexport var reference = 'reference';\nexport var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {\n  return acc.concat([placement + \"-\" + start, placement + \"-\" + end]);\n}, []);\nexport var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {\n  return acc.concat([placement, placement + \"-\" + start, placement + \"-\" + end]);\n}, []); // modifiers that need to read the DOM\n\nexport var beforeRead = 'beforeRead';\nexport var read = 'read';\nexport var afterRead = 'afterRead'; // pure-logic modifiers\n\nexport var beforeMain = 'beforeMain';\nexport var main = 'main';\nexport var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)\n\nexport var beforeWrite = 'beforeWrite';\nexport var write = 'write';\nexport var afterWrite = 'afterWrite';\nexport var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];","export default function getNodeName(element) {\n  return element ? (element.nodeName || '').toLowerCase() : null;\n}","export default function getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n\n  if (node.toString() !== '[object Window]') {\n    var ownerDocument = node.ownerDocument;\n    return ownerDocument ? ownerDocument.defaultView || window : window;\n  }\n\n  return node;\n}","import getWindow from \"./getWindow.js\";\n\nfunction isElement(node) {\n  var OwnElement = getWindow(node).Element;\n  return node instanceof OwnElement || node instanceof Element;\n}\n\nfunction isHTMLElement(node) {\n  var OwnElement = getWindow(node).HTMLElement;\n  return node instanceof OwnElement || node instanceof HTMLElement;\n}\n\nfunction isShadowRoot(node) {\n  // IE 11 has no ShadowRoot\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n\n  var OwnElement = getWindow(node).ShadowRoot;\n  return node instanceof OwnElement || node instanceof ShadowRoot;\n}\n\nexport { isElement, isHTMLElement, isShadowRoot };","import getNodeName from \"../dom-utils/getNodeName.js\";\nimport { isHTMLElement } from \"../dom-utils/instanceOf.js\"; // This modifier takes the styles prepared by the `computeStyles` modifier\n// and applies them to the HTMLElements such as popper and arrow\n\nfunction applyStyles(_ref) {\n  var state = _ref.state;\n  Object.keys(state.elements).forEach(function (name) {\n    var style = state.styles[name] || {};\n    var attributes = state.attributes[name] || {};\n    var element = state.elements[name]; // arrow is optional + virtual elements\n\n    if (!isHTMLElement(element) || !getNodeName(element)) {\n      return;\n    } // Flow doesn't support to extend this property, but it's the most\n    // effective way to apply styles to an HTMLElement\n    // $FlowFixMe[cannot-write]\n\n\n    Object.assign(element.style, style);\n    Object.keys(attributes).forEach(function (name) {\n      var value = attributes[name];\n\n      if (value === false) {\n        element.removeAttribute(name);\n      } else {\n        element.setAttribute(name, value === true ? '' : value);\n      }\n    });\n  });\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state;\n  var initialStyles = {\n    popper: {\n      position: state.options.strategy,\n      left: '0',\n      top: '0',\n      margin: '0'\n    },\n    arrow: {\n      position: 'absolute'\n    },\n    reference: {}\n  };\n  Object.assign(state.elements.popper.style, initialStyles.popper);\n  state.styles = initialStyles;\n\n  if (state.elements.arrow) {\n    Object.assign(state.elements.arrow.style, initialStyles.arrow);\n  }\n\n  return function () {\n    Object.keys(state.elements).forEach(function (name) {\n      var element = state.elements[name];\n      var attributes = state.attributes[name] || {};\n      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them\n\n      var style = styleProperties.reduce(function (style, property) {\n        style[property] = '';\n        return style;\n      }, {}); // arrow is optional + virtual elements\n\n      if (!isHTMLElement(element) || !getNodeName(element)) {\n        return;\n      }\n\n      Object.assign(element.style, style);\n      Object.keys(attributes).forEach(function (attribute) {\n        element.removeAttribute(attribute);\n      });\n    });\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'applyStyles',\n  enabled: true,\n  phase: 'write',\n  fn: applyStyles,\n  effect: effect,\n  requires: ['computeStyles']\n};","import { auto } from \"../enums.js\";\nexport default function getBasePlacement(placement) {\n  return placement.split('-')[0];\n}","export var max = Math.max;\nexport var min = Math.min;\nexport var round = Math.round;","export default function getUAString() {\n  var uaData = navigator.userAgentData;\n\n  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {\n    return uaData.brands.map(function (item) {\n      return item.brand + \"/\" + item.version;\n    }).join(' ');\n  }\n\n  return navigator.userAgent;\n}","import getUAString from \"../utils/userAgent.js\";\nexport default function isLayoutViewport() {\n  return !/^((?!chrome|android).)*safari/i.test(getUAString());\n}","import { isElement, isHTMLElement } from \"./instanceOf.js\";\nimport { round } from \"../utils/math.js\";\nimport getWindow from \"./getWindow.js\";\nimport isLayoutViewport from \"./isLayoutViewport.js\";\nexport default function getBoundingClientRect(element, includeScale, isFixedStrategy) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n\n  var clientRect = element.getBoundingClientRect();\n  var scaleX = 1;\n  var scaleY = 1;\n\n  if (includeScale && isHTMLElement(element)) {\n    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;\n    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;\n  }\n\n  var _ref = isElement(element) ? getWindow(element) : window,\n      visualViewport = _ref.visualViewport;\n\n  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;\n  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;\n  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;\n  var width = clientRect.width / scaleX;\n  var height = clientRect.height / scaleY;\n  return {\n    width: width,\n    height: height,\n    top: y,\n    right: x + width,\n    bottom: y + height,\n    left: x,\n    x: x,\n    y: y\n  };\n}","import getBoundingClientRect from \"./getBoundingClientRect.js\"; // Returns the layout rect of an element relative to its offsetParent. Layout\n// means it doesn't take into account transforms.\n\nexport default function getLayoutRect(element) {\n  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.\n  // Fixes https://github.com/popperjs/popper-core/issues/1223\n\n  var width = element.offsetWidth;\n  var height = element.offsetHeight;\n\n  if (Math.abs(clientRect.width - width) <= 1) {\n    width = clientRect.width;\n  }\n\n  if (Math.abs(clientRect.height - height) <= 1) {\n    height = clientRect.height;\n  }\n\n  return {\n    x: element.offsetLeft,\n    y: element.offsetTop,\n    width: width,\n    height: height\n  };\n}","import { isShadowRoot } from \"./instanceOf.js\";\nexport default function contains(parent, child) {\n  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method\n\n  if (parent.contains(child)) {\n    return true;\n  } // then fallback to custom implementation with Shadow DOM support\n  else if (rootNode && isShadowRoot(rootNode)) {\n      var next = child;\n\n      do {\n        if (next && parent.isSameNode(next)) {\n          return true;\n        } // $FlowFixMe[prop-missing]: need a better way to handle this...\n\n\n        next = next.parentNode || next.host;\n      } while (next);\n    } // Give up, the result is false\n\n\n  return false;\n}","import getWindow from \"./getWindow.js\";\nexport default function getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}","import getNodeName from \"./getNodeName.js\";\nexport default function isTableElement(element) {\n  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;\n}","import { isElement } from \"./instanceOf.js\";\nexport default function getDocumentElement(element) {\n  // $FlowFixMe[incompatible-return]: assume body is always available\n  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]\n  element.document) || window.document).documentElement;\n}","import getNodeName from \"./getNodeName.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport { isShadowRoot } from \"./instanceOf.js\";\nexport default function getParentNode(element) {\n  if (getNodeName(element) === 'html') {\n    return element;\n  }\n\n  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle\n    // $FlowFixMe[incompatible-return]\n    // $FlowFixMe[prop-missing]\n    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node\n    element.parentNode || ( // DOM Element detected\n    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected\n    // $FlowFixMe[incompatible-call]: HTMLElement is a Node\n    getDocumentElement(element) // fallback\n\n  );\n}","import getWindow from \"./getWindow.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport getComputedStyle from \"./getComputedStyle.js\";\nimport { isHTMLElement, isShadowRoot } from \"./instanceOf.js\";\nimport isTableElement from \"./isTableElement.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport getUAString from \"../utils/userAgent.js\";\n\nfunction getTrueOffsetParent(element) {\n  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837\n  getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n\n  return element.offsetParent;\n} // `.offsetParent` reports `null` for fixed elements, while absolute elements\n// return the containing block\n\n\nfunction getContainingBlock(element) {\n  var isFirefox = /firefox/i.test(getUAString());\n  var isIE = /Trident/i.test(getUAString());\n\n  if (isIE && isHTMLElement(element)) {\n    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport\n    var elementCss = getComputedStyle(element);\n\n    if (elementCss.position === 'fixed') {\n      return null;\n    }\n  }\n\n  var currentNode = getParentNode(element);\n\n  if (isShadowRoot(currentNode)) {\n    currentNode = currentNode.host;\n  }\n\n  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {\n    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that\n    // create a containing block.\n    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n\n    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {\n      return currentNode;\n    } else {\n      currentNode = currentNode.parentNode;\n    }\n  }\n\n  return null;\n} // Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\n\n\nexport default function getOffsetParent(element) {\n  var window = getWindow(element);\n  var offsetParent = getTrueOffsetParent(element);\n\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent);\n  }\n\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {\n    return window;\n  }\n\n  return offsetParent || getContainingBlock(element) || window;\n}","export default function getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';\n}","import { max as mathMax, min as mathMin } from \"./math.js\";\nexport function within(min, value, max) {\n  return mathMax(min, mathMin(value, max));\n}\nexport function withinMaxClamp(min, value, max) {\n  var v = within(min, value, max);\n  return v > max ? max : v;\n}","import getFreshSideObject from \"./getFreshSideObject.js\";\nexport default function mergePaddingObject(paddingObject) {\n  return Object.assign({}, getFreshSideObject(), paddingObject);\n}","export default function getFreshSideObject() {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  };\n}","export default function expandToHashMap(value, keys) {\n  return keys.reduce(function (hashMap, key) {\n    hashMap[key] = value;\n    return hashMap;\n  }, {});\n}","import getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getLayoutRect from \"../dom-utils/getLayoutRect.js\";\nimport contains from \"../dom-utils/contains.js\";\nimport getOffsetParent from \"../dom-utils/getOffsetParent.js\";\nimport getMainAxisFromPlacement from \"../utils/getMainAxisFromPlacement.js\";\nimport { within } from \"../utils/within.js\";\nimport mergePaddingObject from \"../utils/mergePaddingObject.js\";\nimport expandToHashMap from \"../utils/expandToHashMap.js\";\nimport { left, right, basePlacements, top, bottom } from \"../enums.js\"; // eslint-disable-next-line import/no-unused-modules\n\nvar toPaddingObject = function toPaddingObject(padding, state) {\n  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : padding;\n  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n};\n\nfunction arrow(_ref) {\n  var _state$modifiersData$;\n\n  var state = _ref.state,\n      name = _ref.name,\n      options = _ref.options;\n  var arrowElement = state.elements.arrow;\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var basePlacement = getBasePlacement(state.placement);\n  var axis = getMainAxisFromPlacement(basePlacement);\n  var isVertical = [left, right].indexOf(basePlacement) >= 0;\n  var len = isVertical ? 'height' : 'width';\n\n  if (!arrowElement || !popperOffsets) {\n    return;\n  }\n\n  var paddingObject = toPaddingObject(options.padding, state);\n  var arrowRect = getLayoutRect(arrowElement);\n  var minProp = axis === 'y' ? top : left;\n  var maxProp = axis === 'y' ? bottom : right;\n  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];\n  var startDiff = popperOffsets[axis] - state.rects.reference[axis];\n  var arrowOffsetParent = getOffsetParent(arrowElement);\n  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is\n  // outside of the popper bounds\n\n  var min = paddingObject[minProp];\n  var max = clientSize - arrowRect[len] - paddingObject[maxProp];\n  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;\n  var offset = within(min, center, max); // Prevents breaking syntax highlighting...\n\n  var axisProp = axis;\n  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);\n}\n\nfunction effect(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options;\n  var _options$element = options.element,\n      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;\n\n  if (arrowElement == null) {\n    return;\n  } // CSS selector\n\n\n  if (typeof arrowElement === 'string') {\n    arrowElement = state.elements.popper.querySelector(arrowElement);\n\n    if (!arrowElement) {\n      return;\n    }\n  }\n\n  if (!contains(state.elements.popper, arrowElement)) {\n    return;\n  }\n\n  state.elements.arrow = arrowElement;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'arrow',\n  enabled: true,\n  phase: 'main',\n  fn: arrow,\n  effect: effect,\n  requires: ['popperOffsets'],\n  requiresIfExists: ['preventOverflow']\n};","export default function getVariation(placement) {\n  return placement.split('-')[1];\n}","import { top, left, right, bottom, end } from \"../enums.js\";\nimport getOffsetParent from \"../dom-utils/getOffsetParent.js\";\nimport getWindow from \"../dom-utils/getWindow.js\";\nimport getDocumentElement from \"../dom-utils/getDocumentElement.js\";\nimport getComputedStyle from \"../dom-utils/getComputedStyle.js\";\nimport getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getVariation from \"../utils/getVariation.js\";\nimport { round } from \"../utils/math.js\"; // eslint-disable-next-line import/no-unused-modules\n\nvar unsetSides = {\n  top: 'auto',\n  right: 'auto',\n  bottom: 'auto',\n  left: 'auto'\n}; // Round the offsets to the nearest suitable subpixel based on the DPR.\n// Zooming can change the DPR, but it seems to report a value that will\n// cleanly divide the values into the appropriate subpixels.\n\nfunction roundOffsetsByDPR(_ref, win) {\n  var x = _ref.x,\n      y = _ref.y;\n  var dpr = win.devicePixelRatio || 1;\n  return {\n    x: round(x * dpr) / dpr || 0,\n    y: round(y * dpr) / dpr || 0\n  };\n}\n\nexport function mapToStyles(_ref2) {\n  var _Object$assign2;\n\n  var popper = _ref2.popper,\n      popperRect = _ref2.popperRect,\n      placement = _ref2.placement,\n      variation = _ref2.variation,\n      offsets = _ref2.offsets,\n      position = _ref2.position,\n      gpuAcceleration = _ref2.gpuAcceleration,\n      adaptive = _ref2.adaptive,\n      roundOffsets = _ref2.roundOffsets,\n      isFixed = _ref2.isFixed;\n  var _offsets$x = offsets.x,\n      x = _offsets$x === void 0 ? 0 : _offsets$x,\n      _offsets$y = offsets.y,\n      y = _offsets$y === void 0 ? 0 : _offsets$y;\n\n  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({\n    x: x,\n    y: y\n  }) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref3.x;\n  y = _ref3.y;\n  var hasX = offsets.hasOwnProperty('x');\n  var hasY = offsets.hasOwnProperty('y');\n  var sideX = left;\n  var sideY = top;\n  var win = window;\n\n  if (adaptive) {\n    var offsetParent = getOffsetParent(popper);\n    var heightProp = 'clientHeight';\n    var widthProp = 'clientWidth';\n\n    if (offsetParent === getWindow(popper)) {\n      offsetParent = getDocumentElement(popper);\n\n      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {\n        heightProp = 'scrollHeight';\n        widthProp = 'scrollWidth';\n      }\n    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it\n\n\n    offsetParent = offsetParent;\n\n    if (placement === top || (placement === left || placement === right) && variation === end) {\n      sideY = bottom;\n      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]\n      offsetParent[heightProp];\n      y -= offsetY - popperRect.height;\n      y *= gpuAcceleration ? 1 : -1;\n    }\n\n    if (placement === left || (placement === top || placement === bottom) && variation === end) {\n      sideX = right;\n      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]\n      offsetParent[widthProp];\n      x -= offsetX - popperRect.width;\n      x *= gpuAcceleration ? 1 : -1;\n    }\n  }\n\n  var commonStyles = Object.assign({\n    position: position\n  }, adaptive && unsetSides);\n\n  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({\n    x: x,\n    y: y\n  }, getWindow(popper)) : {\n    x: x,\n    y: y\n  };\n\n  x = _ref4.x;\n  y = _ref4.y;\n\n  if (gpuAcceleration) {\n    var _Object$assign;\n\n    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? \"translate(\" + x + \"px, \" + y + \"px)\" : \"translate3d(\" + x + \"px, \" + y + \"px, 0)\", _Object$assign));\n  }\n\n  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + \"px\" : '', _Object$assign2[sideX] = hasX ? x + \"px\" : '', _Object$assign2.transform = '', _Object$assign2));\n}\n\nfunction computeStyles(_ref5) {\n  var state = _ref5.state,\n      options = _ref5.options;\n  var _options$gpuAccelerat = options.gpuAcceleration,\n      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,\n      _options$adaptive = options.adaptive,\n      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,\n      _options$roundOffsets = options.roundOffsets,\n      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;\n  var commonStyles = {\n    placement: getBasePlacement(state.placement),\n    variation: getVariation(state.placement),\n    popper: state.elements.popper,\n    popperRect: state.rects.popper,\n    gpuAcceleration: gpuAcceleration,\n    isFixed: state.options.strategy === 'fixed'\n  };\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.popperOffsets,\n      position: state.options.strategy,\n      adaptive: adaptive,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  if (state.modifiersData.arrow != null) {\n    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {\n      offsets: state.modifiersData.arrow,\n      position: 'absolute',\n      adaptive: false,\n      roundOffsets: roundOffsets\n    })));\n  }\n\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-placement': state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'computeStyles',\n  enabled: true,\n  phase: 'beforeWrite',\n  fn: computeStyles,\n  data: {}\n};","import getWindow from \"../dom-utils/getWindow.js\"; // eslint-disable-next-line import/no-unused-modules\n\nvar passive = {\n  passive: true\n};\n\nfunction effect(_ref) {\n  var state = _ref.state,\n      instance = _ref.instance,\n      options = _ref.options;\n  var _options$scroll = options.scroll,\n      scroll = _options$scroll === void 0 ? true : _options$scroll,\n      _options$resize = options.resize,\n      resize = _options$resize === void 0 ? true : _options$resize;\n  var window = getWindow(state.elements.popper);\n  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);\n\n  if (scroll) {\n    scrollParents.forEach(function (scrollParent) {\n      scrollParent.addEventListener('scroll', instance.update, passive);\n    });\n  }\n\n  if (resize) {\n    window.addEventListener('resize', instance.update, passive);\n  }\n\n  return function () {\n    if (scroll) {\n      scrollParents.forEach(function (scrollParent) {\n        scrollParent.removeEventListener('scroll', instance.update, passive);\n      });\n    }\n\n    if (resize) {\n      window.removeEventListener('resize', instance.update, passive);\n    }\n  };\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'eventListeners',\n  enabled: true,\n  phase: 'write',\n  fn: function fn() {},\n  effect: effect,\n  data: {}\n};","var hash = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nexport default function getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, function (matched) {\n    return hash[matched];\n  });\n}","var hash = {\n  start: 'end',\n  end: 'start'\n};\nexport default function getOppositeVariationPlacement(placement) {\n  return placement.replace(/start|end/g, function (matched) {\n    return hash[matched];\n  });\n}","import getWindow from \"./getWindow.js\";\nexport default function getWindowScroll(node) {\n  var win = getWindow(node);\n  var scrollLeft = win.pageXOffset;\n  var scrollTop = win.pageYOffset;\n  return {\n    scrollLeft: scrollLeft,\n    scrollTop: scrollTop\n  };\n}","import getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport getWindowScroll from \"./getWindowScroll.js\";\nexport default function getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  // Popper 1 is broken in this case and never had a bug report so let's assume\n  // it's not an issue. I don't think anyone ever specifies width on <html>\n  // anyway.\n  // Browsers where the left scrollbar doesn't cause an issue report `0` for\n  // this (e.g. Edge 2019, IE11, Safari)\n  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;\n}","import getComputedStyle from \"./getComputedStyle.js\";\nexport default function isScrollParent(element) {\n  // Firefox wants us to check `-x` and `-y` variations as well\n  var _getComputedStyle = getComputedStyle(element),\n      overflow = _getComputedStyle.overflow,\n      overflowX = _getComputedStyle.overflowX,\n      overflowY = _getComputedStyle.overflowY;\n\n  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);\n}","import getParentNode from \"./getParentNode.js\";\nimport isScrollParent from \"./isScrollParent.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport { isHTMLElement } from \"./instanceOf.js\";\nexport default function getScrollParent(node) {\n  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {\n    // $FlowFixMe[incompatible-return]: assume body is always available\n    return node.ownerDocument.body;\n  }\n\n  if (isHTMLElement(node) && isScrollParent(node)) {\n    return node;\n  }\n\n  return getScrollParent(getParentNode(node));\n}","import getScrollParent from \"./getScrollParent.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport getWindow from \"./getWindow.js\";\nimport isScrollParent from \"./isScrollParent.js\";\n/*\ngiven a DOM element, return the list of all scroll parents, up the list of ancesors\nuntil we get to the top window object. This list is what we attach scroll listeners\nto, because if any of these parent elements scroll, we'll need to re-calculate the\nreference element's position.\n*/\n\nexport default function listScrollParents(element, list) {\n  var _element$ownerDocumen;\n\n  if (list === void 0) {\n    list = [];\n  }\n\n  var scrollParent = getScrollParent(element);\n  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);\n  var win = getWindow(scrollParent);\n  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;\n  var updatedList = list.concat(target);\n  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here\n  updatedList.concat(listScrollParents(getParentNode(target)));\n}","export default function rectToClientRect(rect) {\n  return Object.assign({}, rect, {\n    left: rect.x,\n    top: rect.y,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  });\n}","import { viewport } from \"../enums.js\";\nimport getViewportRect from \"./getViewportRect.js\";\nimport getDocumentRect from \"./getDocumentRect.js\";\nimport listScrollParents from \"./listScrollParents.js\";\nimport getOffsetParent from \"./getOffsetParent.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport getComputedStyle from \"./getComputedStyle.js\";\nimport { isElement, isHTMLElement } from \"./instanceOf.js\";\nimport getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getParentNode from \"./getParentNode.js\";\nimport contains from \"./contains.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport rectToClientRect from \"../utils/rectToClientRect.js\";\nimport { max, min } from \"../utils/math.js\";\n\nfunction getInnerBoundingClientRect(element, strategy) {\n  var rect = getBoundingClientRect(element, false, strategy === 'fixed');\n  rect.top = rect.top + element.clientTop;\n  rect.left = rect.left + element.clientLeft;\n  rect.bottom = rect.top + element.clientHeight;\n  rect.right = rect.left + element.clientWidth;\n  rect.width = element.clientWidth;\n  rect.height = element.clientHeight;\n  rect.x = rect.left;\n  rect.y = rect.top;\n  return rect;\n}\n\nfunction getClientRectFromMixedType(element, clippingParent, strategy) {\n  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));\n} // A \"clipping parent\" is an overflowable container with the characteristic of\n// clipping (or hiding) overflowing elements with a position different from\n// `initial`\n\n\nfunction getClippingParents(element) {\n  var clippingParents = listScrollParents(getParentNode(element));\n  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;\n  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;\n\n  if (!isElement(clipperElement)) {\n    return [];\n  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414\n\n\n  return clippingParents.filter(function (clippingParent) {\n    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';\n  });\n} // Gets the maximum area that the element is visible in due to any number of\n// clipping parents\n\n\nexport default function getClippingRect(element, boundary, rootBoundary, strategy) {\n  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);\n  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);\n  var firstClippingParent = clippingParents[0];\n  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {\n    var rect = getClientRectFromMixedType(element, clippingParent, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromMixedType(element, firstClippingParent, strategy));\n  clippingRect.width = clippingRect.right - clippingRect.left;\n  clippingRect.height = clippingRect.bottom - clippingRect.top;\n  clippingRect.x = clippingRect.left;\n  clippingRect.y = clippingRect.top;\n  return clippingRect;\n}","import getWindow from \"./getWindow.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport getWindowScrollBarX from \"./getWindowScrollBarX.js\";\nimport isLayoutViewport from \"./isLayoutViewport.js\";\nexport default function getViewportRect(element, strategy) {\n  var win = getWindow(element);\n  var html = getDocumentElement(element);\n  var visualViewport = win.visualViewport;\n  var width = html.clientWidth;\n  var height = html.clientHeight;\n  var x = 0;\n  var y = 0;\n\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    var layoutViewport = isLayoutViewport();\n\n    if (layoutViewport || !layoutViewport && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x + getWindowScrollBarX(element),\n    y: y\n  };\n}","import getDocumentElement from \"./getDocumentElement.js\";\nimport getComputedStyle from \"./getComputedStyle.js\";\nimport getWindowScrollBarX from \"./getWindowScrollBarX.js\";\nimport getWindowScroll from \"./getWindowScroll.js\";\nimport { max } from \"../utils/math.js\"; // Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable\n\nexport default function getDocumentRect(element) {\n  var _element$ownerDocumen;\n\n  var html = getDocumentElement(element);\n  var winScroll = getWindowScroll(element);\n  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;\n  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);\n  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);\n  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);\n  var y = -winScroll.scrollTop;\n\n  if (getComputedStyle(body || html).direction === 'rtl') {\n    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;\n  }\n\n  return {\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n}","import getBasePlacement from \"./getBasePlacement.js\";\nimport getVariation from \"./getVariation.js\";\nimport getMainAxisFromPlacement from \"./getMainAxisFromPlacement.js\";\nimport { top, right, bottom, left, start, end } from \"../enums.js\";\nexport default function computeOffsets(_ref) {\n  var reference = _ref.reference,\n      element = _ref.element,\n      placement = _ref.placement;\n  var basePlacement = placement ? getBasePlacement(placement) : null;\n  var variation = placement ? getVariation(placement) : null;\n  var commonX = reference.x + reference.width / 2 - element.width / 2;\n  var commonY = reference.y + reference.height / 2 - element.height / 2;\n  var offsets;\n\n  switch (basePlacement) {\n    case top:\n      offsets = {\n        x: commonX,\n        y: reference.y - element.height\n      };\n      break;\n\n    case bottom:\n      offsets = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n\n    case right:\n      offsets = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n\n    case left:\n      offsets = {\n        x: reference.x - element.width,\n        y: commonY\n      };\n      break;\n\n    default:\n      offsets = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n\n  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;\n\n  if (mainAxis != null) {\n    var len = mainAxis === 'y' ? 'height' : 'width';\n\n    switch (variation) {\n      case start:\n        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);\n        break;\n\n      case end:\n        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);\n        break;\n\n      default:\n    }\n  }\n\n  return offsets;\n}","import getClippingRect from \"../dom-utils/getClippingRect.js\";\nimport getDocumentElement from \"../dom-utils/getDocumentElement.js\";\nimport getBoundingClientRect from \"../dom-utils/getBoundingClientRect.js\";\nimport computeOffsets from \"./computeOffsets.js\";\nimport rectToClientRect from \"./rectToClientRect.js\";\nimport { clippingParents, reference, popper, bottom, top, right, basePlacements, viewport } from \"../enums.js\";\nimport { isElement } from \"../dom-utils/instanceOf.js\";\nimport mergePaddingObject from \"./mergePaddingObject.js\";\nimport expandToHashMap from \"./expandToHashMap.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport default function detectOverflow(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$placement = _options.placement,\n      placement = _options$placement === void 0 ? state.placement : _options$placement,\n      _options$strategy = _options.strategy,\n      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,\n      _options$boundary = _options.boundary,\n      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,\n      _options$rootBoundary = _options.rootBoundary,\n      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,\n      _options$elementConte = _options.elementContext,\n      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,\n      _options$altBoundary = _options.altBoundary,\n      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,\n      _options$padding = _options.padding,\n      padding = _options$padding === void 0 ? 0 : _options$padding;\n  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));\n  var altContext = elementContext === popper ? reference : popper;\n  var popperRect = state.rects.popper;\n  var element = state.elements[altBoundary ? altContext : elementContext];\n  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);\n  var referenceClientRect = getBoundingClientRect(state.elements.reference);\n  var popperOffsets = computeOffsets({\n    reference: referenceClientRect,\n    element: popperRect,\n    strategy: 'absolute',\n    placement: placement\n  });\n  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));\n  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect\n  // 0 or negative = within the clipping rect\n\n  var overflowOffsets = {\n    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,\n    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,\n    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,\n    right: elementClientRect.right - clippingClientRect.right + paddingObject.right\n  };\n  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element\n\n  if (elementContext === popper && offsetData) {\n    var offset = offsetData[placement];\n    Object.keys(overflowOffsets).forEach(function (key) {\n      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;\n      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';\n      overflowOffsets[key] += offset[axis] * multiply;\n    });\n  }\n\n  return overflowOffsets;\n}","import getVariation from \"./getVariation.js\";\nimport { variationPlacements, basePlacements, placements as allPlacements } from \"../enums.js\";\nimport detectOverflow from \"./detectOverflow.js\";\nimport getBasePlacement from \"./getBasePlacement.js\";\nexport default function computeAutoPlacement(state, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      placement = _options.placement,\n      boundary = _options.boundary,\n      rootBoundary = _options.rootBoundary,\n      padding = _options.padding,\n      flipVariations = _options.flipVariations,\n      _options$allowedAutoP = _options.allowedAutoPlacements,\n      allowedAutoPlacements = _options$allowedAutoP === void 0 ? allPlacements : _options$allowedAutoP;\n  var variation = getVariation(placement);\n  var placements = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {\n    return getVariation(placement) === variation;\n  }) : basePlacements;\n  var allowedPlacements = placements.filter(function (placement) {\n    return allowedAutoPlacements.indexOf(placement) >= 0;\n  });\n\n  if (allowedPlacements.length === 0) {\n    allowedPlacements = placements;\n  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...\n\n\n  var overflows = allowedPlacements.reduce(function (acc, placement) {\n    acc[placement] = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding\n    })[getBasePlacement(placement)];\n    return acc;\n  }, {});\n  return Object.keys(overflows).sort(function (a, b) {\n    return overflows[a] - overflows[b];\n  });\n}","import getOppositePlacement from \"../utils/getOppositePlacement.js\";\nimport getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getOppositeVariationPlacement from \"../utils/getOppositeVariationPlacement.js\";\nimport detectOverflow from \"../utils/detectOverflow.js\";\nimport computeAutoPlacement from \"../utils/computeAutoPlacement.js\";\nimport { bottom, top, start, right, left, auto } from \"../enums.js\";\nimport getVariation from \"../utils/getVariation.js\"; // eslint-disable-next-line import/no-unused-modules\n\nfunction getExpandedFallbackPlacements(placement) {\n  if (getBasePlacement(placement) === auto) {\n    return [];\n  }\n\n  var oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];\n}\n\nfunction flip(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n\n  if (state.modifiersData[name]._skip) {\n    return;\n  }\n\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,\n      specifiedFallbackPlacements = options.fallbackPlacements,\n      padding = options.padding,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      _options$flipVariatio = options.flipVariations,\n      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,\n      allowedAutoPlacements = options.allowedAutoPlacements;\n  var preferredPlacement = state.options.placement;\n  var basePlacement = getBasePlacement(preferredPlacement);\n  var isBasePlacement = basePlacement === preferredPlacement;\n  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));\n  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {\n    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      padding: padding,\n      flipVariations: flipVariations,\n      allowedAutoPlacements: allowedAutoPlacements\n    }) : placement);\n  }, []);\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var checksMap = new Map();\n  var makeFallbackChecks = true;\n  var firstFittingPlacement = placements[0];\n\n  for (var i = 0; i < placements.length; i++) {\n    var placement = placements[i];\n\n    var _basePlacement = getBasePlacement(placement);\n\n    var isStartVariation = getVariation(placement) === start;\n    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;\n    var len = isVertical ? 'width' : 'height';\n    var overflow = detectOverflow(state, {\n      placement: placement,\n      boundary: boundary,\n      rootBoundary: rootBoundary,\n      altBoundary: altBoundary,\n      padding: padding\n    });\n    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;\n\n    if (referenceRect[len] > popperRect[len]) {\n      mainVariationSide = getOppositePlacement(mainVariationSide);\n    }\n\n    var altVariationSide = getOppositePlacement(mainVariationSide);\n    var checks = [];\n\n    if (checkMainAxis) {\n      checks.push(overflow[_basePlacement] <= 0);\n    }\n\n    if (checkAltAxis) {\n      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);\n    }\n\n    if (checks.every(function (check) {\n      return check;\n    })) {\n      firstFittingPlacement = placement;\n      makeFallbackChecks = false;\n      break;\n    }\n\n    checksMap.set(placement, checks);\n  }\n\n  if (makeFallbackChecks) {\n    // `2` may be desired in some cases – research later\n    var numberOfChecks = flipVariations ? 3 : 1;\n\n    var _loop = function _loop(_i) {\n      var fittingPlacement = placements.find(function (placement) {\n        var checks = checksMap.get(placement);\n\n        if (checks) {\n          return checks.slice(0, _i).every(function (check) {\n            return check;\n          });\n        }\n      });\n\n      if (fittingPlacement) {\n        firstFittingPlacement = fittingPlacement;\n        return \"break\";\n      }\n    };\n\n    for (var _i = numberOfChecks; _i > 0; _i--) {\n      var _ret = _loop(_i);\n\n      if (_ret === \"break\") break;\n    }\n  }\n\n  if (state.placement !== firstFittingPlacement) {\n    state.modifiersData[name]._skip = true;\n    state.placement = firstFittingPlacement;\n    state.reset = true;\n  }\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'flip',\n  enabled: true,\n  phase: 'main',\n  fn: flip,\n  requiresIfExists: ['offset'],\n  data: {\n    _skip: false\n  }\n};","import { top, bottom, left, right } from \"../enums.js\";\nimport detectOverflow from \"../utils/detectOverflow.js\";\n\nfunction getSideOffsets(overflow, rect, preventedOffsets) {\n  if (preventedOffsets === void 0) {\n    preventedOffsets = {\n      x: 0,\n      y: 0\n    };\n  }\n\n  return {\n    top: overflow.top - rect.height - preventedOffsets.y,\n    right: overflow.right - rect.width + preventedOffsets.x,\n    bottom: overflow.bottom - rect.height + preventedOffsets.y,\n    left: overflow.left - rect.width - preventedOffsets.x\n  };\n}\n\nfunction isAnySideFullyClipped(overflow) {\n  return [top, right, bottom, left].some(function (side) {\n    return overflow[side] >= 0;\n  });\n}\n\nfunction hide(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var preventedOffsets = state.modifiersData.preventOverflow;\n  var referenceOverflow = detectOverflow(state, {\n    elementContext: 'reference'\n  });\n  var popperAltOverflow = detectOverflow(state, {\n    altBoundary: true\n  });\n  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);\n  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);\n  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);\n  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);\n  state.modifiersData[name] = {\n    referenceClippingOffsets: referenceClippingOffsets,\n    popperEscapeOffsets: popperEscapeOffsets,\n    isReferenceHidden: isReferenceHidden,\n    hasPopperEscaped: hasPopperEscaped\n  };\n  state.attributes.popper = Object.assign({}, state.attributes.popper, {\n    'data-popper-reference-hidden': isReferenceHidden,\n    'data-popper-escaped': hasPopperEscaped\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'hide',\n  enabled: true,\n  phase: 'main',\n  requiresIfExists: ['preventOverflow'],\n  fn: hide\n};","import getBasePlacement from \"../utils/getBasePlacement.js\";\nimport { top, left, right, placements } from \"../enums.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport function distanceAndSkiddingToXY(placement, rects, offset) {\n  var basePlacement = getBasePlacement(placement);\n  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;\n\n  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {\n    placement: placement\n  })) : offset,\n      skidding = _ref[0],\n      distance = _ref[1];\n\n  skidding = skidding || 0;\n  distance = (distance || 0) * invertDistance;\n  return [left, right].indexOf(basePlacement) >= 0 ? {\n    x: distance,\n    y: skidding\n  } : {\n    x: skidding,\n    y: distance\n  };\n}\n\nfunction offset(_ref2) {\n  var state = _ref2.state,\n      options = _ref2.options,\n      name = _ref2.name;\n  var _options$offset = options.offset,\n      offset = _options$offset === void 0 ? [0, 0] : _options$offset;\n  var data = placements.reduce(function (acc, placement) {\n    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);\n    return acc;\n  }, {});\n  var _data$state$placement = data[state.placement],\n      x = _data$state$placement.x,\n      y = _data$state$placement.y;\n\n  if (state.modifiersData.popperOffsets != null) {\n    state.modifiersData.popperOffsets.x += x;\n    state.modifiersData.popperOffsets.y += y;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'offset',\n  enabled: true,\n  phase: 'main',\n  requires: ['popperOffsets'],\n  fn: offset\n};","import computeOffsets from \"../utils/computeOffsets.js\";\n\nfunction popperOffsets(_ref) {\n  var state = _ref.state,\n      name = _ref.name;\n  // Offsets are the actual position the popper needs to have to be\n  // properly positioned near its reference element\n  // This is the most basic placement, and will be adjusted by\n  // the modifiers in the next step\n  state.modifiersData[name] = computeOffsets({\n    reference: state.rects.reference,\n    element: state.rects.popper,\n    strategy: 'absolute',\n    placement: state.placement\n  });\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'popperOffsets',\n  enabled: true,\n  phase: 'read',\n  fn: popperOffsets,\n  data: {}\n};","import { top, left, right, bottom, start } from \"../enums.js\";\nimport getBasePlacement from \"../utils/getBasePlacement.js\";\nimport getMainAxisFromPlacement from \"../utils/getMainAxisFromPlacement.js\";\nimport getAltAxis from \"../utils/getAltAxis.js\";\nimport { within, withinMaxClamp } from \"../utils/within.js\";\nimport getLayoutRect from \"../dom-utils/getLayoutRect.js\";\nimport getOffsetParent from \"../dom-utils/getOffsetParent.js\";\nimport detectOverflow from \"../utils/detectOverflow.js\";\nimport getVariation from \"../utils/getVariation.js\";\nimport getFreshSideObject from \"../utils/getFreshSideObject.js\";\nimport { min as mathMin, max as mathMax } from \"../utils/math.js\";\n\nfunction preventOverflow(_ref) {\n  var state = _ref.state,\n      options = _ref.options,\n      name = _ref.name;\n  var _options$mainAxis = options.mainAxis,\n      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,\n      _options$altAxis = options.altAxis,\n      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,\n      boundary = options.boundary,\n      rootBoundary = options.rootBoundary,\n      altBoundary = options.altBoundary,\n      padding = options.padding,\n      _options$tether = options.tether,\n      tether = _options$tether === void 0 ? true : _options$tether,\n      _options$tetherOffset = options.tetherOffset,\n      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;\n  var overflow = detectOverflow(state, {\n    boundary: boundary,\n    rootBoundary: rootBoundary,\n    padding: padding,\n    altBoundary: altBoundary\n  });\n  var basePlacement = getBasePlacement(state.placement);\n  var variation = getVariation(state.placement);\n  var isBasePlacement = !variation;\n  var mainAxis = getMainAxisFromPlacement(basePlacement);\n  var altAxis = getAltAxis(mainAxis);\n  var popperOffsets = state.modifiersData.popperOffsets;\n  var referenceRect = state.rects.reference;\n  var popperRect = state.rects.popper;\n  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {\n    placement: state.placement\n  })) : tetherOffset;\n  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {\n    mainAxis: tetherOffsetValue,\n    altAxis: tetherOffsetValue\n  } : Object.assign({\n    mainAxis: 0,\n    altAxis: 0\n  }, tetherOffsetValue);\n  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;\n  var data = {\n    x: 0,\n    y: 0\n  };\n\n  if (!popperOffsets) {\n    return;\n  }\n\n  if (checkMainAxis) {\n    var _offsetModifierState$;\n\n    var mainSide = mainAxis === 'y' ? top : left;\n    var altSide = mainAxis === 'y' ? bottom : right;\n    var len = mainAxis === 'y' ? 'height' : 'width';\n    var offset = popperOffsets[mainAxis];\n    var min = offset + overflow[mainSide];\n    var max = offset - overflow[altSide];\n    var additive = tether ? -popperRect[len] / 2 : 0;\n    var minLen = variation === start ? referenceRect[len] : popperRect[len];\n    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go\n    // outside the reference bounds\n\n    var arrowElement = state.elements.arrow;\n    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {\n      width: 0,\n      height: 0\n    };\n    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();\n    var arrowPaddingMin = arrowPaddingObject[mainSide];\n    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want\n    // to include its full size in the calculation. If the reference is small\n    // and near the edge of a boundary, the popper can overflow even if the\n    // reference is not overflowing as well (e.g. virtual elements with no\n    // width or height)\n\n    var arrowLen = within(0, referenceRect[len], arrowRect[len]);\n    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;\n    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;\n    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);\n    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;\n    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;\n    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;\n    var tetherMax = offset + maxOffset - offsetModifierValue;\n    var preventedOffset = within(tether ? mathMin(min, tetherMin) : min, offset, tether ? mathMax(max, tetherMax) : max);\n    popperOffsets[mainAxis] = preventedOffset;\n    data[mainAxis] = preventedOffset - offset;\n  }\n\n  if (checkAltAxis) {\n    var _offsetModifierState$2;\n\n    var _mainSide = mainAxis === 'x' ? top : left;\n\n    var _altSide = mainAxis === 'x' ? bottom : right;\n\n    var _offset = popperOffsets[altAxis];\n\n    var _len = altAxis === 'y' ? 'height' : 'width';\n\n    var _min = _offset + overflow[_mainSide];\n\n    var _max = _offset - overflow[_altSide];\n\n    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;\n\n    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;\n\n    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;\n\n    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;\n\n    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);\n\n    popperOffsets[altAxis] = _preventedOffset;\n    data[altAxis] = _preventedOffset - _offset;\n  }\n\n  state.modifiersData[name] = data;\n} // eslint-disable-next-line import/no-unused-modules\n\n\nexport default {\n  name: 'preventOverflow',\n  enabled: true,\n  phase: 'main',\n  fn: preventOverflow,\n  requiresIfExists: ['offset']\n};","export default function getAltAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}","import getBoundingClientRect from \"./getBoundingClientRect.js\";\nimport getNodeScroll from \"./getNodeScroll.js\";\nimport getNodeName from \"./getNodeName.js\";\nimport { isHTMLElement } from \"./instanceOf.js\";\nimport getWindowScrollBarX from \"./getWindowScrollBarX.js\";\nimport getDocumentElement from \"./getDocumentElement.js\";\nimport isScrollParent from \"./isScrollParent.js\";\nimport { round } from \"../utils/math.js\";\n\nfunction isElementScaled(element) {\n  var rect = element.getBoundingClientRect();\n  var scaleX = round(rect.width) / element.offsetWidth || 1;\n  var scaleY = round(rect.height) / element.offsetHeight || 1;\n  return scaleX !== 1 || scaleY !== 1;\n} // Returns the composite rect of an element relative to its offsetParent.\n// Composite means it takes into account transforms as well as layout.\n\n\nexport default function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n\n  var isOffsetParentAnElement = isHTMLElement(offsetParent);\n  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);\n  var documentElement = getDocumentElement(offsetParent);\n  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);\n  var scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  var offsets = {\n    x: 0,\n    y: 0\n  };\n\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078\n    isScrollParent(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n\n    if (isHTMLElement(offsetParent)) {\n      offsets = getBoundingClientRect(offsetParent, true);\n      offsets.x += offsetParent.clientLeft;\n      offsets.y += offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}","import getWindowScroll from \"./getWindowScroll.js\";\nimport getWindow from \"./getWindow.js\";\nimport { isHTMLElement } from \"./instanceOf.js\";\nimport getHTMLElementScroll from \"./getHTMLElementScroll.js\";\nexport default function getNodeScroll(node) {\n  if (node === getWindow(node) || !isHTMLElement(node)) {\n    return getWindowScroll(node);\n  } else {\n    return getHTMLElementScroll(node);\n  }\n}","export default function getHTMLElementScroll(element) {\n  return {\n    scrollLeft: element.scrollLeft,\n    scrollTop: element.scrollTop\n  };\n}","import { modifierPhases } from \"../enums.js\"; // source: https://stackoverflow.com/questions/49875255\n\nfunction order(modifiers) {\n  var map = new Map();\n  var visited = new Set();\n  var result = [];\n  modifiers.forEach(function (modifier) {\n    map.set(modifier.name, modifier);\n  }); // On visiting object, check for its dependencies and visit them recursively\n\n  function sort(modifier) {\n    visited.add(modifier.name);\n    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);\n    requires.forEach(function (dep) {\n      if (!visited.has(dep)) {\n        var depModifier = map.get(dep);\n\n        if (depModifier) {\n          sort(depModifier);\n        }\n      }\n    });\n    result.push(modifier);\n  }\n\n  modifiers.forEach(function (modifier) {\n    if (!visited.has(modifier.name)) {\n      // check for visited object\n      sort(modifier);\n    }\n  });\n  return result;\n}\n\nexport default function orderModifiers(modifiers) {\n  // order based on dependencies\n  var orderedModifiers = order(modifiers); // order based on phase\n\n  return modifierPhases.reduce(function (acc, phase) {\n    return acc.concat(orderedModifiers.filter(function (modifier) {\n      return modifier.phase === phase;\n    }));\n  }, []);\n}","import getCompositeRect from \"./dom-utils/getCompositeRect.js\";\nimport getLayoutRect from \"./dom-utils/getLayoutRect.js\";\nimport listScrollParents from \"./dom-utils/listScrollParents.js\";\nimport getOffsetParent from \"./dom-utils/getOffsetParent.js\";\nimport orderModifiers from \"./utils/orderModifiers.js\";\nimport debounce from \"./utils/debounce.js\";\nimport mergeByName from \"./utils/mergeByName.js\";\nimport detectOverflow from \"./utils/detectOverflow.js\";\nimport { isElement } from \"./dom-utils/instanceOf.js\";\nvar DEFAULT_OPTIONS = {\n  placement: 'bottom',\n  modifiers: [],\n  strategy: 'absolute'\n};\n\nfunction areValidElements() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return !args.some(function (element) {\n    return !(element && typeof element.getBoundingClientRect === 'function');\n  });\n}\n\nexport function popperGenerator(generatorOptions) {\n  if (generatorOptions === void 0) {\n    generatorOptions = {};\n  }\n\n  var _generatorOptions = generatorOptions,\n      _generatorOptions$def = _generatorOptions.defaultModifiers,\n      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,\n      _generatorOptions$def2 = _generatorOptions.defaultOptions,\n      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;\n  return function createPopper(reference, popper, options) {\n    if (options === void 0) {\n      options = defaultOptions;\n    }\n\n    var state = {\n      placement: 'bottom',\n      orderedModifiers: [],\n      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),\n      modifiersData: {},\n      elements: {\n        reference: reference,\n        popper: popper\n      },\n      attributes: {},\n      styles: {}\n    };\n    var effectCleanupFns = [];\n    var isDestroyed = false;\n    var instance = {\n      state: state,\n      setOptions: function setOptions(setOptionsAction) {\n        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;\n        cleanupModifierEffects();\n        state.options = Object.assign({}, defaultOptions, state.options, options);\n        state.scrollParents = {\n          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],\n          popper: listScrollParents(popper)\n        }; // Orders the modifiers based on their dependencies and `phase`\n        // properties\n\n        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers\n\n        state.orderedModifiers = orderedModifiers.filter(function (m) {\n          return m.enabled;\n        });\n        runModifierEffects();\n        return instance.update();\n      },\n      // Sync update – it will always be executed, even if not necessary. This\n      // is useful for low frequency updates where sync behavior simplifies the\n      // logic.\n      // For high frequency updates (e.g. `resize` and `scroll` events), always\n      // prefer the async Popper#update method\n      forceUpdate: function forceUpdate() {\n        if (isDestroyed) {\n          return;\n        }\n\n        var _state$elements = state.elements,\n            reference = _state$elements.reference,\n            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements\n        // anymore\n\n        if (!areValidElements(reference, popper)) {\n          return;\n        } // Store the reference and popper rects to be read by modifiers\n\n\n        state.rects = {\n          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),\n          popper: getLayoutRect(popper)\n        }; // Modifiers have the ability to reset the current update cycle. The\n        // most common use case for this is the `flip` modifier changing the\n        // placement, which then needs to re-run all the modifiers, because the\n        // logic was previously ran for the previous placement and is therefore\n        // stale/incorrect\n\n        state.reset = false;\n        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier\n        // is filled with the initial data specified by the modifier. This means\n        // it doesn't persist and is fresh on each update.\n        // To ensure persistent data, use `${name}#persistent`\n\n        state.orderedModifiers.forEach(function (modifier) {\n          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);\n        });\n\n        for (var index = 0; index < state.orderedModifiers.length; index++) {\n          if (state.reset === true) {\n            state.reset = false;\n            index = -1;\n            continue;\n          }\n\n          var _state$orderedModifie = state.orderedModifiers[index],\n              fn = _state$orderedModifie.fn,\n              _state$orderedModifie2 = _state$orderedModifie.options,\n              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,\n              name = _state$orderedModifie.name;\n\n          if (typeof fn === 'function') {\n            state = fn({\n              state: state,\n              options: _options,\n              name: name,\n              instance: instance\n            }) || state;\n          }\n        }\n      },\n      // Async and optimistically optimized update – it will not be executed if\n      // not necessary (debounced to run at most once-per-tick)\n      update: debounce(function () {\n        return new Promise(function (resolve) {\n          instance.forceUpdate();\n          resolve(state);\n        });\n      }),\n      destroy: function destroy() {\n        cleanupModifierEffects();\n        isDestroyed = true;\n      }\n    };\n\n    if (!areValidElements(reference, popper)) {\n      return instance;\n    }\n\n    instance.setOptions(options).then(function (state) {\n      if (!isDestroyed && options.onFirstUpdate) {\n        options.onFirstUpdate(state);\n      }\n    }); // Modifiers have the ability to execute arbitrary code before the first\n    // update cycle runs. They will be executed in the same order as the update\n    // cycle. This is useful when a modifier adds some persistent data that\n    // other modifiers need to use, but the modifier is run after the dependent\n    // one.\n\n    function runModifierEffects() {\n      state.orderedModifiers.forEach(function (_ref) {\n        var name = _ref.name,\n            _ref$options = _ref.options,\n            options = _ref$options === void 0 ? {} : _ref$options,\n            effect = _ref.effect;\n\n        if (typeof effect === 'function') {\n          var cleanupFn = effect({\n            state: state,\n            name: name,\n            instance: instance,\n            options: options\n          });\n\n          var noopFn = function noopFn() {};\n\n          effectCleanupFns.push(cleanupFn || noopFn);\n        }\n      });\n    }\n\n    function cleanupModifierEffects() {\n      effectCleanupFns.forEach(function (fn) {\n        return fn();\n      });\n      effectCleanupFns = [];\n    }\n\n    return instance;\n  };\n}\nexport var createPopper = /*#__PURE__*/popperGenerator(); // eslint-disable-next-line import/no-unused-modules\n\nexport { detectOverflow };","export default function debounce(fn) {\n  var pending;\n  return function () {\n    if (!pending) {\n      pending = new Promise(function (resolve) {\n        Promise.resolve().then(function () {\n          pending = undefined;\n          resolve(fn());\n        });\n      });\n    }\n\n    return pending;\n  };\n}","export default function mergeByName(modifiers) {\n  var merged = modifiers.reduce(function (merged, current) {\n    var existing = merged[current.name];\n    merged[current.name] = existing ? Object.assign({}, existing, current, {\n      options: Object.assign({}, existing.options, current.options),\n      data: Object.assign({}, existing.data, current.data)\n    }) : current;\n    return merged;\n  }, {}); // IE11 does not support Object.values\n\n  return Object.keys(merged).map(function (key) {\n    return merged[key];\n  });\n}","import { popperGenerator, detectOverflow } from \"./createPopper.js\";\nimport eventListeners from \"./modifiers/eventListeners.js\";\nimport popperOffsets from \"./modifiers/popperOffsets.js\";\nimport computeStyles from \"./modifiers/computeStyles.js\";\nimport applyStyles from \"./modifiers/applyStyles.js\";\nvar defaultModifiers = [eventListeners, popperOffsets, computeStyles, applyStyles];\nvar createPopper = /*#__PURE__*/popperGenerator({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\nexport { createPopper, popperGenerator, defaultModifiers, detectOverflow };","import { popperGenerator, detectOverflow } from \"./createPopper.js\";\nimport eventListeners from \"./modifiers/eventListeners.js\";\nimport popperOffsets from \"./modifiers/popperOffsets.js\";\nimport computeStyles from \"./modifiers/computeStyles.js\";\nimport applyStyles from \"./modifiers/applyStyles.js\";\nimport offset from \"./modifiers/offset.js\";\nimport flip from \"./modifiers/flip.js\";\nimport preventOverflow from \"./modifiers/preventOverflow.js\";\nimport arrow from \"./modifiers/arrow.js\";\nimport hide from \"./modifiers/hide.js\";\nvar defaultModifiers = [eventListeners, popperOffsets, computeStyles, applyStyles, offset, flip, preventOverflow, arrow, hide];\nvar createPopper = /*#__PURE__*/popperGenerator({\n  defaultModifiers: defaultModifiers\n}); // eslint-disable-next-line import/no-unused-modules\n\nexport { createPopper, popperGenerator, defaultModifiers, detectOverflow }; // eslint-disable-next-line import/no-unused-modules\n\nexport { createPopper as createPopperLite } from \"./popper-lite.js\"; // eslint-disable-next-line import/no-unused-modules\n\nexport * from \"./modifiers/index.js\";","/**\n * --------------------------------------------------------------------------\n * Bootstrap dropdown.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport * as Popper from '@popperjs/core'\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport Manipulator from './dom/manipulator.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport {\n  defineJQueryPlugin,\n  execute,\n  getElement,\n  getNextActiveElement,\n  isDisabled,\n  isElement,\n  isRTL,\n  isVisible,\n  noop\n} from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'dropdown'\nconst DATA_KEY = 'bs.dropdown'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst ESCAPE_KEY = 'Escape'\nconst TAB_KEY = 'Tab'\nconst ARROW_UP_KEY = 'ArrowUp'\nconst ARROW_DOWN_KEY = 'ArrowDown'\nconst RIGHT_MOUSE_BUTTON = 2 // MouseEvent.button value for the secondary button, usually the right button\n\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_DROPUP = 'dropup'\nconst CLASS_NAME_DROPEND = 'dropend'\nconst CLASS_NAME_DROPSTART = 'dropstart'\nconst CLASS_NAME_DROPUP_CENTER = 'dropup-center'\nconst CLASS_NAME_DROPDOWN_CENTER = 'dropdown-center'\n\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"dropdown\"]:not(.disabled):not(:disabled)'\nconst SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE}.${CLASS_NAME_SHOW}`\nconst SELECTOR_MENU = '.dropdown-menu'\nconst SELECTOR_NAVBAR = '.navbar'\nconst SELECTOR_NAVBAR_NAV = '.navbar-nav'\nconst SELECTOR_VISIBLE_ITEMS = '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'\n\nconst PLACEMENT_TOP = isRTL() ? 'top-end' : 'top-start'\nconst PLACEMENT_TOPEND = isRTL() ? 'top-start' : 'top-end'\nconst PLACEMENT_BOTTOM = isRTL() ? 'bottom-end' : 'bottom-start'\nconst PLACEMENT_BOTTOMEND = isRTL() ? 'bottom-start' : 'bottom-end'\nconst PLACEMENT_RIGHT = isRTL() ? 'left-start' : 'right-start'\nconst PLACEMENT_LEFT = isRTL() ? 'right-start' : 'left-start'\nconst PLACEMENT_TOPCENTER = 'top'\nconst PLACEMENT_BOTTOMCENTER = 'bottom'\n\nconst Default = {\n  autoClose: true,\n  boundary: 'clippingParents',\n  display: 'dynamic',\n  offset: [0, 2],\n  popperConfig: null,\n  reference: 'toggle'\n}\n\nconst DefaultType = {\n  autoClose: '(boolean|string)',\n  boundary: '(string|element)',\n  display: 'string',\n  offset: '(array|string|function)',\n  popperConfig: '(null|object|function)',\n  reference: '(string|element|object)'\n}\n\n/**\n * Class definition\n */\n\nclass Dropdown extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._popper = null\n    this._parent = this._element.parentNode // dropdown wrapper\n    // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/\n    this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] ||\n      SelectorEngine.prev(this._element, SELECTOR_MENU)[0] ||\n      SelectorEngine.findOne(SELECTOR_MENU, this._parent)\n    this._inNavbar = this._detectNavbar()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle() {\n    return this._isShown() ? this.hide() : this.show()\n  }\n\n  show() {\n    if (isDisabled(this._element) || this._isShown()) {\n      return\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    }\n\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW, relatedTarget)\n\n    if (showEvent.defaultPrevented) {\n      return\n    }\n\n    this._createPopper()\n\n    // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children;\n    // only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n    if ('ontouchstart' in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.on(element, 'mouseover', noop)\n      }\n    }\n\n    this._element.focus()\n    this._element.setAttribute('aria-expanded', true)\n\n    this._menu.classList.add(CLASS_NAME_SHOW)\n    this._element.classList.add(CLASS_NAME_SHOW)\n    EventHandler.trigger(this._element, EVENT_SHOWN, relatedTarget)\n  }\n\n  hide() {\n    if (isDisabled(this._element) || !this._isShown()) {\n      return\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    }\n\n    this._completeHide(relatedTarget)\n  }\n\n  dispose() {\n    if (this._popper) {\n      this._popper.destroy()\n    }\n\n    super.dispose()\n  }\n\n  update() {\n    this._inNavbar = this._detectNavbar()\n    if (this._popper) {\n      this._popper.update()\n    }\n  }\n\n  // Private\n  _completeHide(relatedTarget) {\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE, relatedTarget)\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    // If this is a touch-enabled device we remove the extra\n    // empty mouseover listeners we added for iOS support\n    if ('ontouchstart' in document.documentElement) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.off(element, 'mouseover', noop)\n      }\n    }\n\n    if (this._popper) {\n      this._popper.destroy()\n    }\n\n    this._menu.classList.remove(CLASS_NAME_SHOW)\n    this._element.classList.remove(CLASS_NAME_SHOW)\n    this._element.setAttribute('aria-expanded', 'false')\n    Manipulator.removeDataAttribute(this._menu, 'popper')\n    EventHandler.trigger(this._element, EVENT_HIDDEN, relatedTarget)\n  }\n\n  _getConfig(config) {\n    config = super._getConfig(config)\n\n    if (typeof config.reference === 'object' && !isElement(config.reference) &&\n      typeof config.reference.getBoundingClientRect !== 'function'\n    ) {\n      // Popper virtual elements require a getBoundingClientRect method\n      throw new TypeError(`${NAME.toUpperCase()}: Option \"reference\" provided type \"object\" without a required \"getBoundingClientRect\" method.`)\n    }\n\n    return config\n  }\n\n  _createPopper() {\n    if (typeof Popper === 'undefined') {\n      throw new TypeError('Bootstrap\\'s dropdowns require Popper (https://popper.js.org)')\n    }\n\n    let referenceElement = this._element\n\n    if (this._config.reference === 'parent') {\n      referenceElement = this._parent\n    } else if (isElement(this._config.reference)) {\n      referenceElement = getElement(this._config.reference)\n    } else if (typeof this._config.reference === 'object') {\n      referenceElement = this._config.reference\n    }\n\n    const popperConfig = this._getPopperConfig()\n    this._popper = Popper.createPopper(referenceElement, this._menu, popperConfig)\n  }\n\n  _isShown() {\n    return this._menu.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  _getPlacement() {\n    const parentDropdown = this._parent\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {\n      return PLACEMENT_RIGHT\n    }\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {\n      return PLACEMENT_LEFT\n    }\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {\n      return PLACEMENT_TOPCENTER\n    }\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {\n      return PLACEMENT_BOTTOMCENTER\n    }\n\n    // We need to trim the value because custom properties can also include spaces\n    const isEnd = getComputedStyle(this._menu).getPropertyValue('--bs-position').trim() === 'end'\n\n    if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {\n      return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP\n    }\n\n    return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM\n  }\n\n  _detectNavbar() {\n    return this._element.closest(SELECTOR_NAVBAR) !== null\n  }\n\n  _getOffset() {\n    const { offset } = this._config\n\n    if (typeof offset === 'string') {\n      return offset.split(',').map(value => Number.parseInt(value, 10))\n    }\n\n    if (typeof offset === 'function') {\n      return popperData => offset(popperData, this._element)\n    }\n\n    return offset\n  }\n\n  _getPopperConfig() {\n    const defaultBsPopperConfig = {\n      placement: this._getPlacement(),\n      modifiers: [{\n        name: 'preventOverflow',\n        options: {\n          boundary: this._config.boundary\n        }\n      },\n      {\n        name: 'offset',\n        options: {\n          offset: this._getOffset()\n        }\n      }]\n    }\n\n    // Disable Popper if we have a static display or Dropdown is in Navbar\n    if (this._inNavbar || this._config.display === 'static') {\n      Manipulator.setDataAttribute(this._menu, 'popper', 'static') // TODO: v6 remove\n      defaultBsPopperConfig.modifiers = [{\n        name: 'applyStyles',\n        enabled: false\n      }]\n    }\n\n    return {\n      ...defaultBsPopperConfig,\n      ...execute(this._config.popperConfig, [defaultBsPopperConfig])\n    }\n  }\n\n  _selectMenuItem({ key, target }) {\n    const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter(element => isVisible(element))\n\n    if (!items.length) {\n      return\n    }\n\n    // if target isn't included in items (e.g. when expanding the dropdown)\n    // allow cycling to get the last item in case key equals ARROW_UP_KEY\n    getNextActiveElement(items, target, key === ARROW_DOWN_KEY, !items.includes(target)).focus()\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Dropdown.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n\n  static clearMenus(event) {\n    if (event.button === RIGHT_MOUSE_BUTTON || (event.type === 'keyup' && event.key !== TAB_KEY)) {\n      return\n    }\n\n    const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN)\n\n    for (const toggle of openToggles) {\n      const context = Dropdown.getInstance(toggle)\n      if (!context || context._config.autoClose === false) {\n        continue\n      }\n\n      const composedPath = event.composedPath()\n      const isMenuTarget = composedPath.includes(context._menu)\n      if (\n        composedPath.includes(context._element) ||\n        (context._config.autoClose === 'inside' && !isMenuTarget) ||\n        (context._config.autoClose === 'outside' && isMenuTarget)\n      ) {\n        continue\n      }\n\n      // Tab navigation through the dropdown menu or events from contained inputs shouldn't close the menu\n      if (context._menu.contains(event.target) && ((event.type === 'keyup' && event.key === TAB_KEY) || /input|select|option|textarea|form/i.test(event.target.tagName))) {\n        continue\n      }\n\n      const relatedTarget = { relatedTarget: context._element }\n\n      if (event.type === 'click') {\n        relatedTarget.clickEvent = event\n      }\n\n      context._completeHide(relatedTarget)\n    }\n  }\n\n  static dataApiKeydownHandler(event) {\n    // If not an UP | DOWN | ESCAPE key => not a dropdown command\n    // If input/textarea && if key is other than ESCAPE => not a dropdown command\n\n    const isInput = /input|textarea/i.test(event.target.tagName)\n    const isEscapeEvent = event.key === ESCAPE_KEY\n    const isUpOrDownEvent = [ARROW_UP_KEY, ARROW_DOWN_KEY].includes(event.key)\n\n    if (!isUpOrDownEvent && !isEscapeEvent) {\n      return\n    }\n\n    if (isInput && !isEscapeEvent) {\n      return\n    }\n\n    event.preventDefault()\n\n    // TODO: v6 revert #37011 & change markup https://getbootstrap.com/docs/5.3/forms/input-group/\n    const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE) ?\n      this :\n      (SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE)[0] ||\n        SelectorEngine.next(this, SELECTOR_DATA_TOGGLE)[0] ||\n        SelectorEngine.findOne(SELECTOR_DATA_TOGGLE, event.delegateTarget.parentNode))\n\n    const instance = Dropdown.getOrCreateInstance(getToggleButton)\n\n    if (isUpOrDownEvent) {\n      event.stopPropagation()\n      instance.show()\n      instance._selectMenuItem(event)\n      return\n    }\n\n    if (instance._isShown()) { // else is escape and we check if it is shown\n      event.stopPropagation()\n      instance.hide()\n      getToggleButton.focus()\n    }\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE, Dropdown.dataApiKeydownHandler)\nEventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler)\nEventHandler.on(document, EVENT_CLICK_DATA_API, Dropdown.clearMenus)\nEventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus)\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  event.preventDefault()\n  Dropdown.getOrCreateInstance(this).toggle()\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Dropdown)\n\nexport default Dropdown\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/backdrop.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler.js'\nimport Config from './config.js'\nimport {\n  execute, executeAfterTransition, getElement, reflow\n} from './index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'backdrop'\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_SHOW = 'show'\nconst EVENT_MOUSEDOWN = `mousedown.bs.${NAME}`\n\nconst Default = {\n  className: 'modal-backdrop',\n  clickCallback: null,\n  isAnimated: false,\n  isVisible: true, // if false, we use the backdrop helper without adding any element to the dom\n  rootElement: 'body' // give the choice to place backdrop under different elements\n}\n\nconst DefaultType = {\n  className: 'string',\n  clickCallback: '(function|null)',\n  isAnimated: 'boolean',\n  isVisible: 'boolean',\n  rootElement: '(element|string)'\n}\n\n/**\n * Class definition\n */\n\nclass Backdrop extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n    this._isAppended = false\n    this._element = null\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  show(callback) {\n    if (!this._config.isVisible) {\n      execute(callback)\n      return\n    }\n\n    this._append()\n\n    const element = this._getElement()\n    if (this._config.isAnimated) {\n      reflow(element)\n    }\n\n    element.classList.add(CLASS_NAME_SHOW)\n\n    this._emulateAnimation(() => {\n      execute(callback)\n    })\n  }\n\n  hide(callback) {\n    if (!this._config.isVisible) {\n      execute(callback)\n      return\n    }\n\n    this._getElement().classList.remove(CLASS_NAME_SHOW)\n\n    this._emulateAnimation(() => {\n      this.dispose()\n      execute(callback)\n    })\n  }\n\n  dispose() {\n    if (!this._isAppended) {\n      return\n    }\n\n    EventHandler.off(this._element, EVENT_MOUSEDOWN)\n\n    this._element.remove()\n    this._isAppended = false\n  }\n\n  // Private\n  _getElement() {\n    if (!this._element) {\n      const backdrop = document.createElement('div')\n      backdrop.className = this._config.className\n      if (this._config.isAnimated) {\n        backdrop.classList.add(CLASS_NAME_FADE)\n      }\n\n      this._element = backdrop\n    }\n\n    return this._element\n  }\n\n  _configAfterMerge(config) {\n    // use getElement() with the default \"body\" to get a fresh Element on each instantiation\n    config.rootElement = getElement(config.rootElement)\n    return config\n  }\n\n  _append() {\n    if (this._isAppended) {\n      return\n    }\n\n    const element = this._getElement()\n    this._config.rootElement.append(element)\n\n    EventHandler.on(element, EVENT_MOUSEDOWN, () => {\n      execute(this._config.clickCallback)\n    })\n\n    this._isAppended = true\n  }\n\n  _emulateAnimation(callback) {\n    executeAfterTransition(callback, this._getElement(), this._config.isAnimated)\n  }\n}\n\nexport default Backdrop\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/focustrap.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport EventHandler from '../dom/event-handler.js'\nimport SelectorEngine from '../dom/selector-engine.js'\nimport Config from './config.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'focustrap'\nconst DATA_KEY = 'bs.focustrap'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst EVENT_FOCUSIN = `focusin${EVENT_KEY}`\nconst EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY}`\n\nconst TAB_KEY = 'Tab'\nconst TAB_NAV_FORWARD = 'forward'\nconst TAB_NAV_BACKWARD = 'backward'\n\nconst Default = {\n  autofocus: true,\n  trapElement: null // The element to trap focus inside of\n}\n\nconst DefaultType = {\n  autofocus: 'boolean',\n  trapElement: 'element'\n}\n\n/**\n * Class definition\n */\n\nclass FocusTrap extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n    this._isActive = false\n    this._lastTabNavDirection = null\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  activate() {\n    if (this._isActive) {\n      return\n    }\n\n    if (this._config.autofocus) {\n      this._config.trapElement.focus()\n    }\n\n    EventHandler.off(document, EVENT_KEY) // guard against infinite focus loop\n    EventHandler.on(document, EVENT_FOCUSIN, event => this._handleFocusin(event))\n    EventHandler.on(document, EVENT_KEYDOWN_TAB, event => this._handleKeydown(event))\n\n    this._isActive = true\n  }\n\n  deactivate() {\n    if (!this._isActive) {\n      return\n    }\n\n    this._isActive = false\n    EventHandler.off(document, EVENT_KEY)\n  }\n\n  // Private\n  _handleFocusin(event) {\n    const { trapElement } = this._config\n\n    if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {\n      return\n    }\n\n    const elements = SelectorEngine.focusableChildren(trapElement)\n\n    if (elements.length === 0) {\n      trapElement.focus()\n    } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {\n      elements[elements.length - 1].focus()\n    } else {\n      elements[0].focus()\n    }\n  }\n\n  _handleKeydown(event) {\n    if (event.key !== TAB_KEY) {\n      return\n    }\n\n    this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD\n  }\n}\n\nexport default FocusTrap\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/scrollBar.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Manipulator from '../dom/manipulator.js'\nimport SelectorEngine from '../dom/selector-engine.js'\nimport { isElement } from './index.js'\n\n/**\n * Constants\n */\n\nconst SELECTOR_FIXED_CONTENT = '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top'\nconst SELECTOR_STICKY_CONTENT = '.sticky-top'\nconst PROPERTY_PADDING = 'padding-right'\nconst PROPERTY_MARGIN = 'margin-right'\n\n/**\n * Class definition\n */\n\nclass ScrollBarHelper {\n  constructor() {\n    this._element = document.body\n  }\n\n  // Public\n  getWidth() {\n    // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes\n    const documentWidth = document.documentElement.clientWidth\n    return Math.abs(window.innerWidth - documentWidth)\n  }\n\n  hide() {\n    const width = this.getWidth()\n    this._disableOverFlow()\n    // give padding to element to balance the hidden scrollbar width\n    this._setElementAttributes(this._element, PROPERTY_PADDING, calculatedValue => calculatedValue + width)\n    // trick: We adjust positive paddingRight and negative marginRight to sticky-top elements to keep showing fullwidth\n    this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, calculatedValue => calculatedValue + width)\n    this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, calculatedValue => calculatedValue - width)\n  }\n\n  reset() {\n    this._resetElementAttributes(this._element, 'overflow')\n    this._resetElementAttributes(this._element, PROPERTY_PADDING)\n    this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING)\n    this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN)\n  }\n\n  isOverflowing() {\n    return this.getWidth() > 0\n  }\n\n  // Private\n  _disableOverFlow() {\n    this._saveInitialAttribute(this._element, 'overflow')\n    this._element.style.overflow = 'hidden'\n  }\n\n  _setElementAttributes(selector, styleProperty, callback) {\n    const scrollbarWidth = this.getWidth()\n    const manipulationCallBack = element => {\n      if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {\n        return\n      }\n\n      this._saveInitialAttribute(element, styleProperty)\n      const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty)\n      element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`)\n    }\n\n    this._applyManipulationCallback(selector, manipulationCallBack)\n  }\n\n  _saveInitialAttribute(element, styleProperty) {\n    const actualValue = element.style.getPropertyValue(styleProperty)\n    if (actualValue) {\n      Manipulator.setDataAttribute(element, styleProperty, actualValue)\n    }\n  }\n\n  _resetElementAttributes(selector, styleProperty) {\n    const manipulationCallBack = element => {\n      const value = Manipulator.getDataAttribute(element, styleProperty)\n      // We only want to remove the property if the value is `null`; the value can also be zero\n      if (value === null) {\n        element.style.removeProperty(styleProperty)\n        return\n      }\n\n      Manipulator.removeDataAttribute(element, styleProperty)\n      element.style.setProperty(styleProperty, value)\n    }\n\n    this._applyManipulationCallback(selector, manipulationCallBack)\n  }\n\n  _applyManipulationCallback(selector, callBack) {\n    if (isElement(selector)) {\n      callBack(selector)\n      return\n    }\n\n    for (const sel of SelectorEngine.find(selector, this._element)) {\n      callBack(sel)\n    }\n  }\n}\n\nexport default ScrollBarHelper\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap modal.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport Backdrop from './util/backdrop.js'\nimport { enableDismissTrigger } from './util/component-functions.js'\nimport FocusTrap from './util/focustrap.js'\nimport {\n  defineJQueryPlugin, isRTL, isVisible, reflow\n} from './util/index.js'\nimport ScrollBarHelper from './util/scrollbar.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'modal'\nconst DATA_KEY = 'bs.modal'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\nconst ESCAPE_KEY = 'Escape'\n\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_RESIZE = `resize${EVENT_KEY}`\nconst EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY}`\nconst EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY}`\nconst EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_OPEN = 'modal-open'\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_STATIC = 'modal-static'\n\nconst OPEN_SELECTOR = '.modal.show'\nconst SELECTOR_DIALOG = '.modal-dialog'\nconst SELECTOR_MODAL_BODY = '.modal-body'\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"modal\"]'\n\nconst Default = {\n  backdrop: true,\n  focus: true,\n  keyboard: true\n}\n\nconst DefaultType = {\n  backdrop: '(boolean|string)',\n  focus: 'boolean',\n  keyboard: 'boolean'\n}\n\n/**\n * Class definition\n */\n\nclass Modal extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element)\n    this._backdrop = this._initializeBackDrop()\n    this._focustrap = this._initializeFocusTrap()\n    this._isShown = false\n    this._isTransitioning = false\n    this._scrollBar = new ScrollBarHelper()\n\n    this._addEventListeners()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle(relatedTarget) {\n    return this._isShown ? this.hide() : this.show(relatedTarget)\n  }\n\n  show(relatedTarget) {\n    if (this._isShown || this._isTransitioning) {\n      return\n    }\n\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW, {\n      relatedTarget\n    })\n\n    if (showEvent.defaultPrevented) {\n      return\n    }\n\n    this._isShown = true\n    this._isTransitioning = true\n\n    this._scrollBar.hide()\n\n    document.body.classList.add(CLASS_NAME_OPEN)\n\n    this._adjustDialog()\n\n    this._backdrop.show(() => this._showElement(relatedTarget))\n  }\n\n  hide() {\n    if (!this._isShown || this._isTransitioning) {\n      return\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    this._isShown = false\n    this._isTransitioning = true\n    this._focustrap.deactivate()\n\n    this._element.classList.remove(CLASS_NAME_SHOW)\n\n    this._queueCallback(() => this._hideModal(), this._element, this._isAnimated())\n  }\n\n  dispose() {\n    EventHandler.off(window, EVENT_KEY)\n    EventHandler.off(this._dialog, EVENT_KEY)\n\n    this._backdrop.dispose()\n    this._focustrap.deactivate()\n\n    super.dispose()\n  }\n\n  handleUpdate() {\n    this._adjustDialog()\n  }\n\n  // Private\n  _initializeBackDrop() {\n    return new Backdrop({\n      isVisible: Boolean(this._config.backdrop), // 'static' option will be translated to true, and booleans will keep their value,\n      isAnimated: this._isAnimated()\n    })\n  }\n\n  _initializeFocusTrap() {\n    return new FocusTrap({\n      trapElement: this._element\n    })\n  }\n\n  _showElement(relatedTarget) {\n    // try to append dynamic modal\n    if (!document.body.contains(this._element)) {\n      document.body.append(this._element)\n    }\n\n    this._element.style.display = 'block'\n    this._element.removeAttribute('aria-hidden')\n    this._element.setAttribute('aria-modal', true)\n    this._element.setAttribute('role', 'dialog')\n    this._element.scrollTop = 0\n\n    const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog)\n    if (modalBody) {\n      modalBody.scrollTop = 0\n    }\n\n    reflow(this._element)\n\n    this._element.classList.add(CLASS_NAME_SHOW)\n\n    const transitionComplete = () => {\n      if (this._config.focus) {\n        this._focustrap.activate()\n      }\n\n      this._isTransitioning = false\n      EventHandler.trigger(this._element, EVENT_SHOWN, {\n        relatedTarget\n      })\n    }\n\n    this._queueCallback(transitionComplete, this._dialog, this._isAnimated())\n  }\n\n  _addEventListeners() {\n    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {\n      if (event.key !== ESCAPE_KEY) {\n        return\n      }\n\n      if (this._config.keyboard) {\n        this.hide()\n        return\n      }\n\n      this._triggerBackdropTransition()\n    })\n\n    EventHandler.on(window, EVENT_RESIZE, () => {\n      if (this._isShown && !this._isTransitioning) {\n        this._adjustDialog()\n      }\n    })\n\n    EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, event => {\n      // a bad trick to segregate clicks that may start inside dialog but end outside, and avoid listen to scrollbar clicks\n      EventHandler.one(this._element, EVENT_CLICK_DISMISS, event2 => {\n        if (this._element !== event.target || this._element !== event2.target) {\n          return\n        }\n\n        if (this._config.backdrop === 'static') {\n          this._triggerBackdropTransition()\n          return\n        }\n\n        if (this._config.backdrop) {\n          this.hide()\n        }\n      })\n    })\n  }\n\n  _hideModal() {\n    this._element.style.display = 'none'\n    this._element.setAttribute('aria-hidden', true)\n    this._element.removeAttribute('aria-modal')\n    this._element.removeAttribute('role')\n    this._isTransitioning = false\n\n    this._backdrop.hide(() => {\n      document.body.classList.remove(CLASS_NAME_OPEN)\n      this._resetAdjustments()\n      this._scrollBar.reset()\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    })\n  }\n\n  _isAnimated() {\n    return this._element.classList.contains(CLASS_NAME_FADE)\n  }\n\n  _triggerBackdropTransition() {\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED)\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight\n    const initialOverflowY = this._element.style.overflowY\n    // return if the following background transition hasn't yet completed\n    if (initialOverflowY === 'hidden' || this._element.classList.contains(CLASS_NAME_STATIC)) {\n      return\n    }\n\n    if (!isModalOverflowing) {\n      this._element.style.overflowY = 'hidden'\n    }\n\n    this._element.classList.add(CLASS_NAME_STATIC)\n    this._queueCallback(() => {\n      this._element.classList.remove(CLASS_NAME_STATIC)\n      this._queueCallback(() => {\n        this._element.style.overflowY = initialOverflowY\n      }, this._dialog)\n    }, this._dialog)\n\n    this._element.focus()\n  }\n\n  /**\n   * The following methods are used to handle overflowing modals\n   */\n\n  _adjustDialog() {\n    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight\n    const scrollbarWidth = this._scrollBar.getWidth()\n    const isBodyOverflowing = scrollbarWidth > 0\n\n    if (isBodyOverflowing && !isModalOverflowing) {\n      const property = isRTL() ? 'paddingLeft' : 'paddingRight'\n      this._element.style[property] = `${scrollbarWidth}px`\n    }\n\n    if (!isBodyOverflowing && isModalOverflowing) {\n      const property = isRTL() ? 'paddingRight' : 'paddingLeft'\n      this._element.style[property] = `${scrollbarWidth}px`\n    }\n  }\n\n  _resetAdjustments() {\n    this._element.style.paddingLeft = ''\n    this._element.style.paddingRight = ''\n  }\n\n  // Static\n  static jQueryInterface(config, relatedTarget) {\n    return this.each(function () {\n      const data = Modal.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config](relatedTarget)\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  const target = SelectorEngine.getElementFromSelector(this)\n\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault()\n  }\n\n  EventHandler.one(target, EVENT_SHOW, showEvent => {\n    if (showEvent.defaultPrevented) {\n      // only register focus restorer if modal will actually get shown\n      return\n    }\n\n    EventHandler.one(target, EVENT_HIDDEN, () => {\n      if (isVisible(this)) {\n        this.focus()\n      }\n    })\n  })\n\n  // avoid conflict when clicking modal toggler while another one is open\n  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR)\n  if (alreadyOpen) {\n    Modal.getInstance(alreadyOpen).hide()\n  }\n\n  const data = Modal.getOrCreateInstance(target)\n\n  data.toggle(this)\n})\n\nenableDismissTrigger(Modal)\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Modal)\n\nexport default Modal\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap offcanvas.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport Backdrop from './util/backdrop.js'\nimport { enableDismissTrigger } from './util/component-functions.js'\nimport FocusTrap from './util/focustrap.js'\nimport {\n  defineJQueryPlugin,\n  isDisabled,\n  isVisible\n} from './util/index.js'\nimport ScrollBarHelper from './util/scrollbar.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'offcanvas'\nconst DATA_KEY = 'bs.offcanvas'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`\nconst ESCAPE_KEY = 'Escape'\n\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_SHOWING = 'showing'\nconst CLASS_NAME_HIDING = 'hiding'\nconst CLASS_NAME_BACKDROP = 'offcanvas-backdrop'\nconst OPEN_SELECTOR = '.offcanvas.show'\n\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_RESIZE = `resize${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY}`\n\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"offcanvas\"]'\n\nconst Default = {\n  backdrop: true,\n  keyboard: true,\n  scroll: false\n}\n\nconst DefaultType = {\n  backdrop: '(boolean|string)',\n  keyboard: 'boolean',\n  scroll: 'boolean'\n}\n\n/**\n * Class definition\n */\n\nclass Offcanvas extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._isShown = false\n    this._backdrop = this._initializeBackDrop()\n    this._focustrap = this._initializeFocusTrap()\n    this._addEventListeners()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  toggle(relatedTarget) {\n    return this._isShown ? this.hide() : this.show(relatedTarget)\n  }\n\n  show(relatedTarget) {\n    if (this._isShown) {\n      return\n    }\n\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW, { relatedTarget })\n\n    if (showEvent.defaultPrevented) {\n      return\n    }\n\n    this._isShown = true\n    this._backdrop.show()\n\n    if (!this._config.scroll) {\n      new ScrollBarHelper().hide()\n    }\n\n    this._element.setAttribute('aria-modal', true)\n    this._element.setAttribute('role', 'dialog')\n    this._element.classList.add(CLASS_NAME_SHOWING)\n\n    const completeCallBack = () => {\n      if (!this._config.scroll || this._config.backdrop) {\n        this._focustrap.activate()\n      }\n\n      this._element.classList.add(CLASS_NAME_SHOW)\n      this._element.classList.remove(CLASS_NAME_SHOWING)\n      EventHandler.trigger(this._element, EVENT_SHOWN, { relatedTarget })\n    }\n\n    this._queueCallback(completeCallBack, this._element, true)\n  }\n\n  hide() {\n    if (!this._isShown) {\n      return\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    this._focustrap.deactivate()\n    this._element.blur()\n    this._isShown = false\n    this._element.classList.add(CLASS_NAME_HIDING)\n    this._backdrop.hide()\n\n    const completeCallback = () => {\n      this._element.classList.remove(CLASS_NAME_SHOW, CLASS_NAME_HIDING)\n      this._element.removeAttribute('aria-modal')\n      this._element.removeAttribute('role')\n\n      if (!this._config.scroll) {\n        new ScrollBarHelper().reset()\n      }\n\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    }\n\n    this._queueCallback(completeCallback, this._element, true)\n  }\n\n  dispose() {\n    this._backdrop.dispose()\n    this._focustrap.deactivate()\n    super.dispose()\n  }\n\n  // Private\n  _initializeBackDrop() {\n    const clickCallback = () => {\n      if (this._config.backdrop === 'static') {\n        EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED)\n        return\n      }\n\n      this.hide()\n    }\n\n    // 'static' option will be translated to true, and booleans will keep their value\n    const isVisible = Boolean(this._config.backdrop)\n\n    return new Backdrop({\n      className: CLASS_NAME_BACKDROP,\n      isVisible,\n      isAnimated: true,\n      rootElement: this._element.parentNode,\n      clickCallback: isVisible ? clickCallback : null\n    })\n  }\n\n  _initializeFocusTrap() {\n    return new FocusTrap({\n      trapElement: this._element\n    })\n  }\n\n  _addEventListeners() {\n    EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, event => {\n      if (event.key !== ESCAPE_KEY) {\n        return\n      }\n\n      if (this._config.keyboard) {\n        this.hide()\n        return\n      }\n\n      EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED)\n    })\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Offcanvas.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config](this)\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  const target = SelectorEngine.getElementFromSelector(this)\n\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault()\n  }\n\n  if (isDisabled(this)) {\n    return\n  }\n\n  EventHandler.one(target, EVENT_HIDDEN, () => {\n    // focus on trigger when it is closed\n    if (isVisible(this)) {\n      this.focus()\n    }\n  })\n\n  // avoid conflict when clicking a toggler of an offcanvas, while another is open\n  const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR)\n  if (alreadyOpen && alreadyOpen !== target) {\n    Offcanvas.getInstance(alreadyOpen).hide()\n  }\n\n  const data = Offcanvas.getOrCreateInstance(target)\n  data.toggle(this)\n})\n\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  for (const selector of SelectorEngine.find(OPEN_SELECTOR)) {\n    Offcanvas.getOrCreateInstance(selector).show()\n  }\n})\n\nEventHandler.on(window, EVENT_RESIZE, () => {\n  for (const element of SelectorEngine.find('[aria-modal][class*=show][class*=offcanvas-]')) {\n    if (getComputedStyle(element).position !== 'fixed') {\n      Offcanvas.getOrCreateInstance(element).hide()\n    }\n  }\n})\n\nenableDismissTrigger(Offcanvas)\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Offcanvas)\n\nexport default Offcanvas\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/sanitizer.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\n// js-docs-start allow-list\nconst ARIA_ATTRIBUTE_PATTERN = /^aria-[\\w-]*$/i\n\nexport const DefaultAllowlist = {\n  // Global attributes allowed on any supplied element below.\n  '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],\n  a: ['target', 'href', 'title', 'rel'],\n  area: [],\n  b: [],\n  br: [],\n  col: [],\n  code: [],\n  dd: [],\n  div: [],\n  dl: [],\n  dt: [],\n  em: [],\n  hr: [],\n  h1: [],\n  h2: [],\n  h3: [],\n  h4: [],\n  h5: [],\n  h6: [],\n  i: [],\n  img: ['src', 'srcset', 'alt', 'title', 'width', 'height'],\n  li: [],\n  ol: [],\n  p: [],\n  pre: [],\n  s: [],\n  small: [],\n  span: [],\n  sub: [],\n  sup: [],\n  strong: [],\n  u: [],\n  ul: []\n}\n// js-docs-end allow-list\n\nconst uriAttributes = new Set([\n  'background',\n  'cite',\n  'href',\n  'itemtype',\n  'longdesc',\n  'poster',\n  'src',\n  'xlink:href'\n])\n\n/**\n * A pattern that recognizes URLs that are safe wrt. XSS in URL navigation\n * contexts.\n *\n * Shout-out to Angular https://github.com/angular/angular/blob/15.2.8/packages/core/src/sanitization/url_sanitizer.ts#L38\n */\n// eslint-disable-next-line unicorn/better-regex\nconst SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i\n\nconst allowedAttribute = (attribute, allowedAttributeList) => {\n  const attributeName = attribute.nodeName.toLowerCase()\n\n  if (allowedAttributeList.includes(attributeName)) {\n    if (uriAttributes.has(attributeName)) {\n      return Boolean(SAFE_URL_PATTERN.test(attribute.nodeValue))\n    }\n\n    return true\n  }\n\n  // Check if a regular expression validates the attribute.\n  return allowedAttributeList.filter(attributeRegex => attributeRegex instanceof RegExp)\n    .some(regex => regex.test(attributeName))\n}\n\nexport function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {\n  if (!unsafeHtml.length) {\n    return unsafeHtml\n  }\n\n  if (sanitizeFunction && typeof sanitizeFunction === 'function') {\n    return sanitizeFunction(unsafeHtml)\n  }\n\n  const domParser = new window.DOMParser()\n  const createdDocument = domParser.parseFromString(unsafeHtml, 'text/html')\n  const elements = [].concat(...createdDocument.body.querySelectorAll('*'))\n\n  for (const element of elements) {\n    const elementName = element.nodeName.toLowerCase()\n\n    if (!Object.keys(allowList).includes(elementName)) {\n      element.remove()\n      continue\n    }\n\n    const attributeList = [].concat(...element.attributes)\n    const allowedAttributes = [].concat(allowList['*'] || [], allowList[elementName] || [])\n\n    for (const attribute of attributeList) {\n      if (!allowedAttribute(attribute, allowedAttributes)) {\n        element.removeAttribute(attribute.nodeName)\n      }\n    }\n  }\n\n  return createdDocument.body.innerHTML\n}\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap util/template-factory.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport SelectorEngine from '../dom/selector-engine.js'\nimport Config from './config.js'\nimport { DefaultAllowlist, sanitizeHtml } from './sanitizer.js'\nimport { execute, getElement, isElement } from './index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'TemplateFactory'\n\nconst Default = {\n  allowList: DefaultAllowlist,\n  content: {}, // { selector : text ,  selector2 : text2 , }\n  extraClass: '',\n  html: false,\n  sanitize: true,\n  sanitizeFn: null,\n  template: '<div></div>'\n}\n\nconst DefaultType = {\n  allowList: 'object',\n  content: 'object',\n  extraClass: '(string|function)',\n  html: 'boolean',\n  sanitize: 'boolean',\n  sanitizeFn: '(null|function)',\n  template: 'string'\n}\n\nconst DefaultContentType = {\n  entry: '(string|element|function|null)',\n  selector: '(string|element)'\n}\n\n/**\n * Class definition\n */\n\nclass TemplateFactory extends Config {\n  constructor(config) {\n    super()\n    this._config = this._getConfig(config)\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  getContent() {\n    return Object.values(this._config.content)\n      .map(config => this._resolvePossibleFunction(config))\n      .filter(Boolean)\n  }\n\n  hasContent() {\n    return this.getContent().length > 0\n  }\n\n  changeContent(content) {\n    this._checkContent(content)\n    this._config.content = { ...this._config.content, ...content }\n    return this\n  }\n\n  toHtml() {\n    const templateWrapper = document.createElement('div')\n    templateWrapper.innerHTML = this._maybeSanitize(this._config.template)\n\n    for (const [selector, text] of Object.entries(this._config.content)) {\n      this._setContent(templateWrapper, text, selector)\n    }\n\n    const template = templateWrapper.children[0]\n    const extraClass = this._resolvePossibleFunction(this._config.extraClass)\n\n    if (extraClass) {\n      template.classList.add(...extraClass.split(' '))\n    }\n\n    return template\n  }\n\n  // Private\n  _typeCheckConfig(config) {\n    super._typeCheckConfig(config)\n    this._checkContent(config.content)\n  }\n\n  _checkContent(arg) {\n    for (const [selector, content] of Object.entries(arg)) {\n      super._typeCheckConfig({ selector, entry: content }, DefaultContentType)\n    }\n  }\n\n  _setContent(template, content, selector) {\n    const templateElement = SelectorEngine.findOne(selector, template)\n\n    if (!templateElement) {\n      return\n    }\n\n    content = this._resolvePossibleFunction(content)\n\n    if (!content) {\n      templateElement.remove()\n      return\n    }\n\n    if (isElement(content)) {\n      this._putElementInTemplate(getElement(content), templateElement)\n      return\n    }\n\n    if (this._config.html) {\n      templateElement.innerHTML = this._maybeSanitize(content)\n      return\n    }\n\n    templateElement.textContent = content\n  }\n\n  _maybeSanitize(arg) {\n    return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg\n  }\n\n  _resolvePossibleFunction(arg) {\n    return execute(arg, [this])\n  }\n\n  _putElementInTemplate(element, templateElement) {\n    if (this._config.html) {\n      templateElement.innerHTML = ''\n      templateElement.append(element)\n      return\n    }\n\n    templateElement.textContent = element.textContent\n  }\n}\n\nexport default TemplateFactory\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap tooltip.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport * as Popper from '@popperjs/core'\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport Manipulator from './dom/manipulator.js'\nimport {\n  defineJQueryPlugin, execute, findShadowRoot, getElement, getUID, isRTL, noop\n} from './util/index.js'\nimport { DefaultAllowlist } from './util/sanitizer.js'\nimport TemplateFactory from './util/template-factory.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'tooltip'\nconst DISALLOWED_ATTRIBUTES = new Set(['sanitize', 'allowList', 'sanitizeFn'])\n\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_MODAL = 'modal'\nconst CLASS_NAME_SHOW = 'show'\n\nconst SELECTOR_TOOLTIP_INNER = '.tooltip-inner'\nconst SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`\n\nconst EVENT_MODAL_HIDE = 'hide.bs.modal'\n\nconst TRIGGER_HOVER = 'hover'\nconst TRIGGER_FOCUS = 'focus'\nconst TRIGGER_CLICK = 'click'\nconst TRIGGER_MANUAL = 'manual'\n\nconst EVENT_HIDE = 'hide'\nconst EVENT_HIDDEN = 'hidden'\nconst EVENT_SHOW = 'show'\nconst EVENT_SHOWN = 'shown'\nconst EVENT_INSERTED = 'inserted'\nconst EVENT_CLICK = 'click'\nconst EVENT_FOCUSIN = 'focusin'\nconst EVENT_FOCUSOUT = 'focusout'\nconst EVENT_MOUSEENTER = 'mouseenter'\nconst EVENT_MOUSELEAVE = 'mouseleave'\n\nconst AttachmentMap = {\n  AUTO: 'auto',\n  TOP: 'top',\n  RIGHT: isRTL() ? 'left' : 'right',\n  BOTTOM: 'bottom',\n  LEFT: isRTL() ? 'right' : 'left'\n}\n\nconst Default = {\n  allowList: DefaultAllowlist,\n  animation: true,\n  boundary: 'clippingParents',\n  container: false,\n  customClass: '',\n  delay: 0,\n  fallbackPlacements: ['top', 'right', 'bottom', 'left'],\n  html: false,\n  offset: [0, 6],\n  placement: 'top',\n  popperConfig: null,\n  sanitize: true,\n  sanitizeFn: null,\n  selector: false,\n  template: '<div class=\"tooltip\" role=\"tooltip\">' +\n            '<div class=\"tooltip-arrow\"></div>' +\n            '<div class=\"tooltip-inner\"></div>' +\n            '</div>',\n  title: '',\n  trigger: 'hover focus'\n}\n\nconst DefaultType = {\n  allowList: 'object',\n  animation: 'boolean',\n  boundary: '(string|element)',\n  container: '(string|element|boolean)',\n  customClass: '(string|function)',\n  delay: '(number|object)',\n  fallbackPlacements: 'array',\n  html: 'boolean',\n  offset: '(array|string|function)',\n  placement: '(string|function)',\n  popperConfig: '(null|object|function)',\n  sanitize: 'boolean',\n  sanitizeFn: '(null|function)',\n  selector: '(string|boolean)',\n  template: 'string',\n  title: '(string|element|function)',\n  trigger: 'string'\n}\n\n/**\n * Class definition\n */\n\nclass Tooltip extends BaseComponent {\n  constructor(element, config) {\n    if (typeof Popper === 'undefined') {\n      throw new TypeError('Bootstrap\\'s tooltips require Popper (https://popper.js.org)')\n    }\n\n    super(element, config)\n\n    // Private\n    this._isEnabled = true\n    this._timeout = 0\n    this._isHovered = null\n    this._activeTrigger = {}\n    this._popper = null\n    this._templateFactory = null\n    this._newContent = null\n\n    // Protected\n    this.tip = null\n\n    this._setListeners()\n\n    if (!this._config.selector) {\n      this._fixTitle()\n    }\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  enable() {\n    this._isEnabled = true\n  }\n\n  disable() {\n    this._isEnabled = false\n  }\n\n  toggleEnabled() {\n    this._isEnabled = !this._isEnabled\n  }\n\n  toggle() {\n    if (!this._isEnabled) {\n      return\n    }\n\n    this._activeTrigger.click = !this._activeTrigger.click\n    if (this._isShown()) {\n      this._leave()\n      return\n    }\n\n    this._enter()\n  }\n\n  dispose() {\n    clearTimeout(this._timeout)\n\n    EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler)\n\n    if (this._element.getAttribute('data-bs-original-title')) {\n      this._element.setAttribute('title', this._element.getAttribute('data-bs-original-title'))\n    }\n\n    this._disposePopper()\n    super.dispose()\n  }\n\n  show() {\n    if (this._element.style.display === 'none') {\n      throw new Error('Please use show on visible elements')\n    }\n\n    if (!(this._isWithContent() && this._isEnabled)) {\n      return\n    }\n\n    const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW))\n    const shadowRoot = findShadowRoot(this._element)\n    const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element)\n\n    if (showEvent.defaultPrevented || !isInTheDom) {\n      return\n    }\n\n    // TODO: v6 remove this or make it optional\n    this._disposePopper()\n\n    const tip = this._getTipElement()\n\n    this._element.setAttribute('aria-describedby', tip.getAttribute('id'))\n\n    const { container } = this._config\n\n    if (!this._element.ownerDocument.documentElement.contains(this.tip)) {\n      container.append(tip)\n      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED))\n    }\n\n    this._popper = this._createPopper(tip)\n\n    tip.classList.add(CLASS_NAME_SHOW)\n\n    // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children;\n    // only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n    if ('ontouchstart' in document.documentElement) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.on(element, 'mouseover', noop)\n      }\n    }\n\n    const complete = () => {\n      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN))\n\n      if (this._isHovered === false) {\n        this._leave()\n      }\n\n      this._isHovered = false\n    }\n\n    this._queueCallback(complete, this.tip, this._isAnimated())\n  }\n\n  hide() {\n    if (!this._isShown()) {\n      return\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE))\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    const tip = this._getTipElement()\n    tip.classList.remove(CLASS_NAME_SHOW)\n\n    // If this is a touch-enabled device we remove the extra\n    // empty mouseover listeners we added for iOS support\n    if ('ontouchstart' in document.documentElement) {\n      for (const element of [].concat(...document.body.children)) {\n        EventHandler.off(element, 'mouseover', noop)\n      }\n    }\n\n    this._activeTrigger[TRIGGER_CLICK] = false\n    this._activeTrigger[TRIGGER_FOCUS] = false\n    this._activeTrigger[TRIGGER_HOVER] = false\n    this._isHovered = null // it is a trick to support manual triggering\n\n    const complete = () => {\n      if (this._isWithActiveTrigger()) {\n        return\n      }\n\n      if (!this._isHovered) {\n        this._disposePopper()\n      }\n\n      this._element.removeAttribute('aria-describedby')\n      EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN))\n    }\n\n    this._queueCallback(complete, this.tip, this._isAnimated())\n  }\n\n  update() {\n    if (this._popper) {\n      this._popper.update()\n    }\n  }\n\n  // Protected\n  _isWithContent() {\n    return Boolean(this._getTitle())\n  }\n\n  _getTipElement() {\n    if (!this.tip) {\n      this.tip = this._createTipElement(this._newContent || this._getContentForTemplate())\n    }\n\n    return this.tip\n  }\n\n  _createTipElement(content) {\n    const tip = this._getTemplateFactory(content).toHtml()\n\n    // TODO: remove this check in v6\n    if (!tip) {\n      return null\n    }\n\n    tip.classList.remove(CLASS_NAME_FADE, CLASS_NAME_SHOW)\n    // TODO: v6 the following can be achieved with CSS only\n    tip.classList.add(`bs-${this.constructor.NAME}-auto`)\n\n    const tipId = getUID(this.constructor.NAME).toString()\n\n    tip.setAttribute('id', tipId)\n\n    if (this._isAnimated()) {\n      tip.classList.add(CLASS_NAME_FADE)\n    }\n\n    return tip\n  }\n\n  setContent(content) {\n    this._newContent = content\n    if (this._isShown()) {\n      this._disposePopper()\n      this.show()\n    }\n  }\n\n  _getTemplateFactory(content) {\n    if (this._templateFactory) {\n      this._templateFactory.changeContent(content)\n    } else {\n      this._templateFactory = new TemplateFactory({\n        ...this._config,\n        // the `content` var has to be after `this._config`\n        // to override config.content in case of popover\n        content,\n        extraClass: this._resolvePossibleFunction(this._config.customClass)\n      })\n    }\n\n    return this._templateFactory\n  }\n\n  _getContentForTemplate() {\n    return {\n      [SELECTOR_TOOLTIP_INNER]: this._getTitle()\n    }\n  }\n\n  _getTitle() {\n    return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute('data-bs-original-title')\n  }\n\n  // Private\n  _initializeOnDelegatedTarget(event) {\n    return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig())\n  }\n\n  _isAnimated() {\n    return this._config.animation || (this.tip && this.tip.classList.contains(CLASS_NAME_FADE))\n  }\n\n  _isShown() {\n    return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  _createPopper(tip) {\n    const placement = execute(this._config.placement, [this, tip, this._element])\n    const attachment = AttachmentMap[placement.toUpperCase()]\n    return Popper.createPopper(this._element, tip, this._getPopperConfig(attachment))\n  }\n\n  _getOffset() {\n    const { offset } = this._config\n\n    if (typeof offset === 'string') {\n      return offset.split(',').map(value => Number.parseInt(value, 10))\n    }\n\n    if (typeof offset === 'function') {\n      return popperData => offset(popperData, this._element)\n    }\n\n    return offset\n  }\n\n  _resolvePossibleFunction(arg) {\n    return execute(arg, [this._element])\n  }\n\n  _getPopperConfig(attachment) {\n    const defaultBsPopperConfig = {\n      placement: attachment,\n      modifiers: [\n        {\n          name: 'flip',\n          options: {\n            fallbackPlacements: this._config.fallbackPlacements\n          }\n        },\n        {\n          name: 'offset',\n          options: {\n            offset: this._getOffset()\n          }\n        },\n        {\n          name: 'preventOverflow',\n          options: {\n            boundary: this._config.boundary\n          }\n        },\n        {\n          name: 'arrow',\n          options: {\n            element: `.${this.constructor.NAME}-arrow`\n          }\n        },\n        {\n          name: 'preSetPlacement',\n          enabled: true,\n          phase: 'beforeMain',\n          fn: data => {\n            // Pre-set Popper's placement attribute in order to read the arrow sizes properly.\n            // Otherwise, Popper mixes up the width and height dimensions since the initial arrow style is for top placement\n            this._getTipElement().setAttribute('data-popper-placement', data.state.placement)\n          }\n        }\n      ]\n    }\n\n    return {\n      ...defaultBsPopperConfig,\n      ...execute(this._config.popperConfig, [defaultBsPopperConfig])\n    }\n  }\n\n  _setListeners() {\n    const triggers = this._config.trigger.split(' ')\n\n    for (const trigger of triggers) {\n      if (trigger === 'click') {\n        EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK), this._config.selector, event => {\n          const context = this._initializeOnDelegatedTarget(event)\n          context.toggle()\n        })\n      } else if (trigger !== TRIGGER_MANUAL) {\n        const eventIn = trigger === TRIGGER_HOVER ?\n          this.constructor.eventName(EVENT_MOUSEENTER) :\n          this.constructor.eventName(EVENT_FOCUSIN)\n        const eventOut = trigger === TRIGGER_HOVER ?\n          this.constructor.eventName(EVENT_MOUSELEAVE) :\n          this.constructor.eventName(EVENT_FOCUSOUT)\n\n        EventHandler.on(this._element, eventIn, this._config.selector, event => {\n          const context = this._initializeOnDelegatedTarget(event)\n          context._activeTrigger[event.type === 'focusin' ? TRIGGER_FOCUS : TRIGGER_HOVER] = true\n          context._enter()\n        })\n        EventHandler.on(this._element, eventOut, this._config.selector, event => {\n          const context = this._initializeOnDelegatedTarget(event)\n          context._activeTrigger[event.type === 'focusout' ? TRIGGER_FOCUS : TRIGGER_HOVER] =\n            context._element.contains(event.relatedTarget)\n\n          context._leave()\n        })\n      }\n    }\n\n    this._hideModalHandler = () => {\n      if (this._element) {\n        this.hide()\n      }\n    }\n\n    EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler)\n  }\n\n  _fixTitle() {\n    const title = this._element.getAttribute('title')\n\n    if (!title) {\n      return\n    }\n\n    if (!this._element.getAttribute('aria-label') && !this._element.textContent.trim()) {\n      this._element.setAttribute('aria-label', title)\n    }\n\n    this._element.setAttribute('data-bs-original-title', title) // DO NOT USE IT. Is only for backwards compatibility\n    this._element.removeAttribute('title')\n  }\n\n  _enter() {\n    if (this._isShown() || this._isHovered) {\n      this._isHovered = true\n      return\n    }\n\n    this._isHovered = true\n\n    this._setTimeout(() => {\n      if (this._isHovered) {\n        this.show()\n      }\n    }, this._config.delay.show)\n  }\n\n  _leave() {\n    if (this._isWithActiveTrigger()) {\n      return\n    }\n\n    this._isHovered = false\n\n    this._setTimeout(() => {\n      if (!this._isHovered) {\n        this.hide()\n      }\n    }, this._config.delay.hide)\n  }\n\n  _setTimeout(handler, timeout) {\n    clearTimeout(this._timeout)\n    this._timeout = setTimeout(handler, timeout)\n  }\n\n  _isWithActiveTrigger() {\n    return Object.values(this._activeTrigger).includes(true)\n  }\n\n  _getConfig(config) {\n    const dataAttributes = Manipulator.getDataAttributes(this._element)\n\n    for (const dataAttribute of Object.keys(dataAttributes)) {\n      if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {\n        delete dataAttributes[dataAttribute]\n      }\n    }\n\n    config = {\n      ...dataAttributes,\n      ...(typeof config === 'object' && config ? config : {})\n    }\n    config = this._mergeConfigObj(config)\n    config = this._configAfterMerge(config)\n    this._typeCheckConfig(config)\n    return config\n  }\n\n  _configAfterMerge(config) {\n    config.container = config.container === false ? document.body : getElement(config.container)\n\n    if (typeof config.delay === 'number') {\n      config.delay = {\n        show: config.delay,\n        hide: config.delay\n      }\n    }\n\n    if (typeof config.title === 'number') {\n      config.title = config.title.toString()\n    }\n\n    if (typeof config.content === 'number') {\n      config.content = config.content.toString()\n    }\n\n    return config\n  }\n\n  _getDelegateConfig() {\n    const config = {}\n\n    for (const [key, value] of Object.entries(this._config)) {\n      if (this.constructor.Default[key] !== value) {\n        config[key] = value\n      }\n    }\n\n    config.selector = false\n    config.trigger = 'manual'\n\n    // In the future can be replaced with:\n    // const keysWithDifferentValues = Object.entries(this._config).filter(entry => this.constructor.Default[entry[0]] !== this._config[entry[0]])\n    // `Object.fromEntries(keysWithDifferentValues)`\n    return config\n  }\n\n  _disposePopper() {\n    if (this._popper) {\n      this._popper.destroy()\n      this._popper = null\n    }\n\n    if (this.tip) {\n      this.tip.remove()\n      this.tip = null\n    }\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Tooltip.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n}\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Tooltip)\n\nexport default Tooltip\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap popover.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Tooltip from './tooltip.js'\nimport { defineJQueryPlugin } from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'popover'\n\nconst SELECTOR_TITLE = '.popover-header'\nconst SELECTOR_CONTENT = '.popover-body'\n\nconst Default = {\n  ...Tooltip.Default,\n  content: '',\n  offset: [0, 8],\n  placement: 'right',\n  template: '<div class=\"popover\" role=\"tooltip\">' +\n    '<div class=\"popover-arrow\"></div>' +\n    '<h3 class=\"popover-header\"></h3>' +\n    '<div class=\"popover-body\"></div>' +\n    '</div>',\n  trigger: 'click'\n}\n\nconst DefaultType = {\n  ...Tooltip.DefaultType,\n  content: '(null|string|element|function)'\n}\n\n/**\n * Class definition\n */\n\nclass Popover extends Tooltip {\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Overrides\n  _isWithContent() {\n    return this._getTitle() || this._getContent()\n  }\n\n  // Private\n  _getContentForTemplate() {\n    return {\n      [SELECTOR_TITLE]: this._getTitle(),\n      [SELECTOR_CONTENT]: this._getContent()\n    }\n  }\n\n  _getContent() {\n    return this._resolvePossibleFunction(this._config.content)\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Popover.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (typeof data[config] === 'undefined') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n}\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Popover)\n\nexport default Popover\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap scrollspy.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport {\n  defineJQueryPlugin, getElement, isDisabled, isVisible\n} from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'scrollspy'\nconst DATA_KEY = 'bs.scrollspy'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\n\nconst EVENT_ACTIVATE = `activate${EVENT_KEY}`\nconst EVENT_CLICK = `click${EVENT_KEY}`\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`\n\nconst CLASS_NAME_DROPDOWN_ITEM = 'dropdown-item'\nconst CLASS_NAME_ACTIVE = 'active'\n\nconst SELECTOR_DATA_SPY = '[data-bs-spy=\"scroll\"]'\nconst SELECTOR_TARGET_LINKS = '[href]'\nconst SELECTOR_NAV_LIST_GROUP = '.nav, .list-group'\nconst SELECTOR_NAV_LINKS = '.nav-link'\nconst SELECTOR_NAV_ITEMS = '.nav-item'\nconst SELECTOR_LIST_ITEMS = '.list-group-item'\nconst SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`\nconst SELECTOR_DROPDOWN = '.dropdown'\nconst SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle'\n\nconst Default = {\n  offset: null, // TODO: v6 @deprecated, keep it for backwards compatibility reasons\n  rootMargin: '0px 0px -25%',\n  smoothScroll: false,\n  target: null,\n  threshold: [0.1, 0.5, 1]\n}\n\nconst DefaultType = {\n  offset: '(number|null)', // TODO v6 @deprecated, keep it for backwards compatibility reasons\n  rootMargin: 'string',\n  smoothScroll: 'boolean',\n  target: 'element',\n  threshold: 'array'\n}\n\n/**\n * Class definition\n */\n\nclass ScrollSpy extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    // this._element is the observablesContainer and config.target the menu links wrapper\n    this._targetLinks = new Map()\n    this._observableSections = new Map()\n    this._rootElement = getComputedStyle(this._element).overflowY === 'visible' ? null : this._element\n    this._activeTarget = null\n    this._observer = null\n    this._previousScrollData = {\n      visibleEntryTop: 0,\n      parentScrollTop: 0\n    }\n    this.refresh() // initialize\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  refresh() {\n    this._initializeTargetsAndObservables()\n    this._maybeEnableSmoothScroll()\n\n    if (this._observer) {\n      this._observer.disconnect()\n    } else {\n      this._observer = this._getNewObserver()\n    }\n\n    for (const section of this._observableSections.values()) {\n      this._observer.observe(section)\n    }\n  }\n\n  dispose() {\n    this._observer.disconnect()\n    super.dispose()\n  }\n\n  // Private\n  _configAfterMerge(config) {\n    // TODO: on v6 target should be given explicitly & remove the {target: 'ss-target'} case\n    config.target = getElement(config.target) || document.body\n\n    // TODO: v6 Only for backwards compatibility reasons. Use rootMargin only\n    config.rootMargin = config.offset ? `${config.offset}px 0px -30%` : config.rootMargin\n\n    if (typeof config.threshold === 'string') {\n      config.threshold = config.threshold.split(',').map(value => Number.parseFloat(value))\n    }\n\n    return config\n  }\n\n  _maybeEnableSmoothScroll() {\n    if (!this._config.smoothScroll) {\n      return\n    }\n\n    // unregister any previous listeners\n    EventHandler.off(this._config.target, EVENT_CLICK)\n\n    EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, event => {\n      const observableSection = this._observableSections.get(event.target.hash)\n      if (observableSection) {\n        event.preventDefault()\n        const root = this._rootElement || window\n        const height = observableSection.offsetTop - this._element.offsetTop\n        if (root.scrollTo) {\n          root.scrollTo({ top: height, behavior: 'smooth' })\n          return\n        }\n\n        // Chrome 60 doesn't support `scrollTo`\n        root.scrollTop = height\n      }\n    })\n  }\n\n  _getNewObserver() {\n    const options = {\n      root: this._rootElement,\n      threshold: this._config.threshold,\n      rootMargin: this._config.rootMargin\n    }\n\n    return new IntersectionObserver(entries => this._observerCallback(entries), options)\n  }\n\n  // The logic of selection\n  _observerCallback(entries) {\n    const targetElement = entry => this._targetLinks.get(`#${entry.target.id}`)\n    const activate = entry => {\n      this._previousScrollData.visibleEntryTop = entry.target.offsetTop\n      this._process(targetElement(entry))\n    }\n\n    const parentScrollTop = (this._rootElement || document.documentElement).scrollTop\n    const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop\n    this._previousScrollData.parentScrollTop = parentScrollTop\n\n    for (const entry of entries) {\n      if (!entry.isIntersecting) {\n        this._activeTarget = null\n        this._clearActiveClass(targetElement(entry))\n\n        continue\n      }\n\n      const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop\n      // if we are scrolling down, pick the bigger offsetTop\n      if (userScrollsDown && entryIsLowerThanPrevious) {\n        activate(entry)\n        // if parent isn't scrolled, let's keep the first visible item, breaking the iteration\n        if (!parentScrollTop) {\n          return\n        }\n\n        continue\n      }\n\n      // if we are scrolling up, pick the smallest offsetTop\n      if (!userScrollsDown && !entryIsLowerThanPrevious) {\n        activate(entry)\n      }\n    }\n  }\n\n  _initializeTargetsAndObservables() {\n    this._targetLinks = new Map()\n    this._observableSections = new Map()\n\n    const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target)\n\n    for (const anchor of targetLinks) {\n      // ensure that the anchor has an id and is not disabled\n      if (!anchor.hash || isDisabled(anchor)) {\n        continue\n      }\n\n      const observableSection = SelectorEngine.findOne(decodeURI(anchor.hash), this._element)\n\n      // ensure that the observableSection exists & is visible\n      if (isVisible(observableSection)) {\n        this._targetLinks.set(decodeURI(anchor.hash), anchor)\n        this._observableSections.set(anchor.hash, observableSection)\n      }\n    }\n  }\n\n  _process(target) {\n    if (this._activeTarget === target) {\n      return\n    }\n\n    this._clearActiveClass(this._config.target)\n    this._activeTarget = target\n    target.classList.add(CLASS_NAME_ACTIVE)\n    this._activateParents(target)\n\n    EventHandler.trigger(this._element, EVENT_ACTIVATE, { relatedTarget: target })\n  }\n\n  _activateParents(target) {\n    // Activate dropdown parents\n    if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {\n      SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE, target.closest(SELECTOR_DROPDOWN))\n        .classList.add(CLASS_NAME_ACTIVE)\n      return\n    }\n\n    for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)) {\n      // Set triggered links parents as active\n      // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor\n      for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)) {\n        item.classList.add(CLASS_NAME_ACTIVE)\n      }\n    }\n  }\n\n  _clearActiveClass(parent) {\n    parent.classList.remove(CLASS_NAME_ACTIVE)\n\n    const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE}`, parent)\n    for (const node of activeNodes) {\n      node.classList.remove(CLASS_NAME_ACTIVE)\n    }\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = ScrollSpy.getOrCreateInstance(this, config)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)) {\n    ScrollSpy.getOrCreateInstance(spy)\n  }\n})\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(ScrollSpy)\n\nexport default ScrollSpy\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap tab.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport SelectorEngine from './dom/selector-engine.js'\nimport { defineJQueryPlugin, getNextActiveElement, isDisabled } from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'tab'\nconst DATA_KEY = 'bs.tab'\nconst EVENT_KEY = `.${DATA_KEY}`\n\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}`\nconst EVENT_KEYDOWN = `keydown${EVENT_KEY}`\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}`\n\nconst ARROW_LEFT_KEY = 'ArrowLeft'\nconst ARROW_RIGHT_KEY = 'ArrowRight'\nconst ARROW_UP_KEY = 'ArrowUp'\nconst ARROW_DOWN_KEY = 'ArrowDown'\nconst HOME_KEY = 'Home'\nconst END_KEY = 'End'\n\nconst CLASS_NAME_ACTIVE = 'active'\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_DROPDOWN = 'dropdown'\n\nconst SELECTOR_DROPDOWN_TOGGLE = '.dropdown-toggle'\nconst SELECTOR_DROPDOWN_MENU = '.dropdown-menu'\nconst NOT_SELECTOR_DROPDOWN_TOGGLE = `:not(${SELECTOR_DROPDOWN_TOGGLE})`\n\nconst SELECTOR_TAB_PANEL = '.list-group, .nav, [role=\"tablist\"]'\nconst SELECTOR_OUTER = '.nav-item, .list-group-item'\nconst SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role=\"tab\"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`\nconst SELECTOR_DATA_TOGGLE = '[data-bs-toggle=\"tab\"], [data-bs-toggle=\"pill\"], [data-bs-toggle=\"list\"]' // TODO: could only be `tab` in v6\nconst SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`\n\nconst SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle=\"tab\"], .${CLASS_NAME_ACTIVE}[data-bs-toggle=\"pill\"], .${CLASS_NAME_ACTIVE}[data-bs-toggle=\"list\"]`\n\n/**\n * Class definition\n */\n\nclass Tab extends BaseComponent {\n  constructor(element) {\n    super(element)\n    this._parent = this._element.closest(SELECTOR_TAB_PANEL)\n\n    if (!this._parent) {\n      return\n      // TODO: should throw exception in v6\n      // throw new TypeError(`${element.outerHTML} has not a valid parent ${SELECTOR_INNER_ELEM}`)\n    }\n\n    // Set up initial aria attributes\n    this._setInitialAttributes(this._parent, this._getChildren())\n\n    EventHandler.on(this._element, EVENT_KEYDOWN, event => this._keydown(event))\n  }\n\n  // Getters\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  show() { // Shows this elem and deactivate the active sibling if exists\n    const innerElem = this._element\n    if (this._elemIsActive(innerElem)) {\n      return\n    }\n\n    // Search for active tab on same parent to deactivate it\n    const active = this._getActiveElem()\n\n    const hideEvent = active ?\n      EventHandler.trigger(active, EVENT_HIDE, { relatedTarget: innerElem }) :\n      null\n\n    const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW, { relatedTarget: active })\n\n    if (showEvent.defaultPrevented || (hideEvent && hideEvent.defaultPrevented)) {\n      return\n    }\n\n    this._deactivate(active, innerElem)\n    this._activate(innerElem, active)\n  }\n\n  // Private\n  _activate(element, relatedElem) {\n    if (!element) {\n      return\n    }\n\n    element.classList.add(CLASS_NAME_ACTIVE)\n\n    this._activate(SelectorEngine.getElementFromSelector(element)) // Search and activate/show the proper section\n\n    const complete = () => {\n      if (element.getAttribute('role') !== 'tab') {\n        element.classList.add(CLASS_NAME_SHOW)\n        return\n      }\n\n      element.removeAttribute('tabindex')\n      element.setAttribute('aria-selected', true)\n      this._toggleDropDown(element, true)\n      EventHandler.trigger(element, EVENT_SHOWN, {\n        relatedTarget: relatedElem\n      })\n    }\n\n    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE))\n  }\n\n  _deactivate(element, relatedElem) {\n    if (!element) {\n      return\n    }\n\n    element.classList.remove(CLASS_NAME_ACTIVE)\n    element.blur()\n\n    this._deactivate(SelectorEngine.getElementFromSelector(element)) // Search and deactivate the shown section too\n\n    const complete = () => {\n      if (element.getAttribute('role') !== 'tab') {\n        element.classList.remove(CLASS_NAME_SHOW)\n        return\n      }\n\n      element.setAttribute('aria-selected', false)\n      element.setAttribute('tabindex', '-1')\n      this._toggleDropDown(element, false)\n      EventHandler.trigger(element, EVENT_HIDDEN, { relatedTarget: relatedElem })\n    }\n\n    this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE))\n  }\n\n  _keydown(event) {\n    if (!([ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY, HOME_KEY, END_KEY].includes(event.key))) {\n      return\n    }\n\n    event.stopPropagation()// stopPropagation/preventDefault both added to support up/down keys without scrolling the page\n    event.preventDefault()\n\n    const children = this._getChildren().filter(element => !isDisabled(element))\n    let nextActiveElement\n\n    if ([HOME_KEY, END_KEY].includes(event.key)) {\n      nextActiveElement = children[event.key === HOME_KEY ? 0 : children.length - 1]\n    } else {\n      const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key)\n      nextActiveElement = getNextActiveElement(children, event.target, isNext, true)\n    }\n\n    if (nextActiveElement) {\n      nextActiveElement.focus({ preventScroll: true })\n      Tab.getOrCreateInstance(nextActiveElement).show()\n    }\n  }\n\n  _getChildren() { // collection of inner elements\n    return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent)\n  }\n\n  _getActiveElem() {\n    return this._getChildren().find(child => this._elemIsActive(child)) || null\n  }\n\n  _setInitialAttributes(parent, children) {\n    this._setAttributeIfNotExists(parent, 'role', 'tablist')\n\n    for (const child of children) {\n      this._setInitialAttributesOnChild(child)\n    }\n  }\n\n  _setInitialAttributesOnChild(child) {\n    child = this._getInnerElement(child)\n    const isActive = this._elemIsActive(child)\n    const outerElem = this._getOuterElement(child)\n    child.setAttribute('aria-selected', isActive)\n\n    if (outerElem !== child) {\n      this._setAttributeIfNotExists(outerElem, 'role', 'presentation')\n    }\n\n    if (!isActive) {\n      child.setAttribute('tabindex', '-1')\n    }\n\n    this._setAttributeIfNotExists(child, 'role', 'tab')\n\n    // set attributes to the related panel too\n    this._setInitialAttributesOnTargetPanel(child)\n  }\n\n  _setInitialAttributesOnTargetPanel(child) {\n    const target = SelectorEngine.getElementFromSelector(child)\n\n    if (!target) {\n      return\n    }\n\n    this._setAttributeIfNotExists(target, 'role', 'tabpanel')\n\n    if (child.id) {\n      this._setAttributeIfNotExists(target, 'aria-labelledby', `${child.id}`)\n    }\n  }\n\n  _toggleDropDown(element, open) {\n    const outerElem = this._getOuterElement(element)\n    if (!outerElem.classList.contains(CLASS_DROPDOWN)) {\n      return\n    }\n\n    const toggle = (selector, className) => {\n      const element = SelectorEngine.findOne(selector, outerElem)\n      if (element) {\n        element.classList.toggle(className, open)\n      }\n    }\n\n    toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE)\n    toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW)\n    outerElem.setAttribute('aria-expanded', open)\n  }\n\n  _setAttributeIfNotExists(element, attribute, value) {\n    if (!element.hasAttribute(attribute)) {\n      element.setAttribute(attribute, value)\n    }\n  }\n\n  _elemIsActive(elem) {\n    return elem.classList.contains(CLASS_NAME_ACTIVE)\n  }\n\n  // Try to get the inner element (usually the .nav-link)\n  _getInnerElement(elem) {\n    return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem)\n  }\n\n  // Try to get the outer element (usually the .nav-item)\n  _getOuterElement(elem) {\n    return elem.closest(SELECTOR_OUTER) || elem\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Tab.getOrCreateInstance(this)\n\n      if (typeof config !== 'string') {\n        return\n      }\n\n      if (data[config] === undefined || config.startsWith('_') || config === 'constructor') {\n        throw new TypeError(`No method named \"${config}\"`)\n      }\n\n      data[config]()\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nEventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function (event) {\n  if (['A', 'AREA'].includes(this.tagName)) {\n    event.preventDefault()\n  }\n\n  if (isDisabled(this)) {\n    return\n  }\n\n  Tab.getOrCreateInstance(this).show()\n})\n\n/**\n * Initialize on focus\n */\nEventHandler.on(window, EVENT_LOAD_DATA_API, () => {\n  for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)) {\n    Tab.getOrCreateInstance(element)\n  }\n})\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Tab)\n\nexport default Tab\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap toast.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport BaseComponent from './base-component.js'\nimport EventHandler from './dom/event-handler.js'\nimport { enableDismissTrigger } from './util/component-functions.js'\nimport { defineJQueryPlugin, reflow } from './util/index.js'\n\n/**\n * Constants\n */\n\nconst NAME = 'toast'\nconst DATA_KEY = 'bs.toast'\nconst EVENT_KEY = `.${DATA_KEY}`\n\nconst EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`\nconst EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`\nconst EVENT_FOCUSIN = `focusin${EVENT_KEY}`\nconst EVENT_FOCUSOUT = `focusout${EVENT_KEY}`\nconst EVENT_HIDE = `hide${EVENT_KEY}`\nconst EVENT_HIDDEN = `hidden${EVENT_KEY}`\nconst EVENT_SHOW = `show${EVENT_KEY}`\nconst EVENT_SHOWN = `shown${EVENT_KEY}`\n\nconst CLASS_NAME_FADE = 'fade'\nconst CLASS_NAME_HIDE = 'hide' // @deprecated - kept here only for backwards compatibility\nconst CLASS_NAME_SHOW = 'show'\nconst CLASS_NAME_SHOWING = 'showing'\n\nconst DefaultType = {\n  animation: 'boolean',\n  autohide: 'boolean',\n  delay: 'number'\n}\n\nconst Default = {\n  animation: true,\n  autohide: true,\n  delay: 5000\n}\n\n/**\n * Class definition\n */\n\nclass Toast extends BaseComponent {\n  constructor(element, config) {\n    super(element, config)\n\n    this._timeout = null\n    this._hasMouseInteraction = false\n    this._hasKeyboardInteraction = false\n    this._setListeners()\n  }\n\n  // Getters\n  static get Default() {\n    return Default\n  }\n\n  static get DefaultType() {\n    return DefaultType\n  }\n\n  static get NAME() {\n    return NAME\n  }\n\n  // Public\n  show() {\n    const showEvent = EventHandler.trigger(this._element, EVENT_SHOW)\n\n    if (showEvent.defaultPrevented) {\n      return\n    }\n\n    this._clearTimeout()\n\n    if (this._config.animation) {\n      this._element.classList.add(CLASS_NAME_FADE)\n    }\n\n    const complete = () => {\n      this._element.classList.remove(CLASS_NAME_SHOWING)\n      EventHandler.trigger(this._element, EVENT_SHOWN)\n\n      this._maybeScheduleHide()\n    }\n\n    this._element.classList.remove(CLASS_NAME_HIDE) // @deprecated\n    reflow(this._element)\n    this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING)\n\n    this._queueCallback(complete, this._element, this._config.animation)\n  }\n\n  hide() {\n    if (!this.isShown()) {\n      return\n    }\n\n    const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE)\n\n    if (hideEvent.defaultPrevented) {\n      return\n    }\n\n    const complete = () => {\n      this._element.classList.add(CLASS_NAME_HIDE) // @deprecated\n      this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW)\n      EventHandler.trigger(this._element, EVENT_HIDDEN)\n    }\n\n    this._element.classList.add(CLASS_NAME_SHOWING)\n    this._queueCallback(complete, this._element, this._config.animation)\n  }\n\n  dispose() {\n    this._clearTimeout()\n\n    if (this.isShown()) {\n      this._element.classList.remove(CLASS_NAME_SHOW)\n    }\n\n    super.dispose()\n  }\n\n  isShown() {\n    return this._element.classList.contains(CLASS_NAME_SHOW)\n  }\n\n  // Private\n\n  _maybeScheduleHide() {\n    if (!this._config.autohide) {\n      return\n    }\n\n    if (this._hasMouseInteraction || this._hasKeyboardInteraction) {\n      return\n    }\n\n    this._timeout = setTimeout(() => {\n      this.hide()\n    }, this._config.delay)\n  }\n\n  _onInteraction(event, isInteracting) {\n    switch (event.type) {\n      case 'mouseover':\n      case 'mouseout': {\n        this._hasMouseInteraction = isInteracting\n        break\n      }\n\n      case 'focusin':\n      case 'focusout': {\n        this._hasKeyboardInteraction = isInteracting\n        break\n      }\n\n      default: {\n        break\n      }\n    }\n\n    if (isInteracting) {\n      this._clearTimeout()\n      return\n    }\n\n    const nextElement = event.relatedTarget\n    if (this._element === nextElement || this._element.contains(nextElement)) {\n      return\n    }\n\n    this._maybeScheduleHide()\n  }\n\n  _setListeners() {\n    EventHandler.on(this._element, EVENT_MOUSEOVER, event => this._onInteraction(event, true))\n    EventHandler.on(this._element, EVENT_MOUSEOUT, event => this._onInteraction(event, false))\n    EventHandler.on(this._element, EVENT_FOCUSIN, event => this._onInteraction(event, true))\n    EventHandler.on(this._element, EVENT_FOCUSOUT, event => this._onInteraction(event, false))\n  }\n\n  _clearTimeout() {\n    clearTimeout(this._timeout)\n    this._timeout = null\n  }\n\n  // Static\n  static jQueryInterface(config) {\n    return this.each(function () {\n      const data = Toast.getOrCreateInstance(this, config)\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`)\n        }\n\n        data[config](this)\n      }\n    })\n  }\n}\n\n/**\n * Data API implementation\n */\n\nenableDismissTrigger(Toast)\n\n/**\n * jQuery\n */\n\ndefineJQueryPlugin(Toast)\n\nexport default Toast\n","/**\n * --------------------------------------------------------------------------\n * Bootstrap index.umd.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Alert from './src/alert.js'\nimport Button from './src/button.js'\nimport Carousel from './src/carousel.js'\nimport Collapse from './src/collapse.js'\nimport Dropdown from './src/dropdown.js'\nimport Modal from './src/modal.js'\nimport Offcanvas from './src/offcanvas.js'\nimport Popover from './src/popover.js'\nimport ScrollSpy from './src/scrollspy.js'\nimport Tab from './src/tab.js'\nimport Toast from './src/toast.js'\nimport Tooltip from './src/tooltip.js'\n\nexport default {\n  Alert,\n  Button,\n  Carousel,\n  Collapse,\n  Dropdown,\n  Modal,\n  Offcanvas,\n  Popover,\n  ScrollSpy,\n  Tab,\n  Toast,\n  Tooltip\n}\n","/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),ca=require(\"scheduler\");function p(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+\"Capture\",b)}\nfunction ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a])}\nvar ia=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,la=\n{},ma={};function oa(a){if(ja.call(ma,a))return!0;if(ja.call(la,a))return!1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return!1}function pa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction qa(a,b,c,d){if(null===b||\"undefined\"===typeof b||pa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var z={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1)});var ra=/[\\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(ra,\nsa);z[b]=new v(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1)});\nz.xlinkHref=new v(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)))}\nvar ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for(\"react.element\"),wa=Symbol.for(\"react.portal\"),ya=Symbol.for(\"react.fragment\"),za=Symbol.for(\"react.strict_mode\"),Aa=Symbol.for(\"react.profiler\"),Ba=Symbol.for(\"react.provider\"),Ca=Symbol.for(\"react.context\"),Da=Symbol.for(\"react.forward_ref\"),Ea=Symbol.for(\"react.suspense\"),Fa=Symbol.for(\"react.suspense_list\"),Ga=Symbol.for(\"react.memo\"),Ha=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\");Symbol.for(\"react.debug_trace_mode\");\nvar Ia=Symbol.for(\"react.offscreen\");Symbol.for(\"react.legacy_hidden\");Symbol.for(\"react.cache\");Symbol.for(\"react.tracing_marker\");var Ja=Symbol.iterator;function Ka(a){if(null===a||\"object\"!==typeof a)return null;a=Ja&&a[Ja]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);La=b&&b[1]||\"\"}return\"\\n\"+La+a}var Na=!1;\nfunction Oa(a,b){if(!a||Na)return\"\";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(l){var d=l}Reflect.construct(a,[],b)}else{try{b.call()}catch(l){d=l}a.call(b.prototype)}else{try{throw Error();}catch(l){d=l}a()}}catch(l){if(l&&d&&\"string\"===typeof l.stack){for(var e=l.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k=\"\\n\"+e[g].replace(\" at new \",\" at \");a.displayName&&k.includes(\"<anonymous>\")&&(k=k.replace(\"<anonymous>\",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?Ma(a):\"\"}\nfunction Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma(\"Lazy\");case 13:return Ma(\"Suspense\");case 19:return Ma(\"SuspenseList\");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return\"\"}}\nfunction Qa(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ya:return\"Fragment\";case wa:return\"Portal\";case Aa:return\"Profiler\";case za:return\"StrictMode\";case Ea:return\"Suspense\";case Fa:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case Ca:return(a.displayName||\"Context\")+\".Consumer\";case Ba:return(a._context.displayName||\"Context\")+\".Provider\";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||\nb.name||\"\",a=\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||\"Memo\";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}\nfunction Ra(a){var b=a.type;switch(a.tag){case 24:return\"Cache\";case 9:return(b.displayName||\"Context\")+\".Consumer\";case 10:return(b._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return a=b.render,a=a.displayName||a.name||\"\",b.displayName||(\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return b;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return Qa(b);case 8:return b===za?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";\ncase 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(\"function\"===typeof b)return b.displayName||b.name||null;if(\"string\"===typeof b)return b}return null}function Sa(a){switch(typeof a){case \"boolean\":case \"number\":case \"string\":case \"undefined\":return a;case \"object\":return a;default:return\"\"}}\nfunction Ta(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ua(a){var b=Ta(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=Ta(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function ab(a,b){b=b.checked;null!=b&&ta(a,\"checked\",b,!1)}\nfunction bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?cb(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction db(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction cb(a,b,c){if(\"number\"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}var eb=Array.isArray;\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}function kb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nfunction lb(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?kb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar mb,nb=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(\"http://www.w3.org/2000/svg\"!==a.namespaceURI||\"innerHTML\"in a)a.innerHTML=b;else{mb=mb||document.createElement(\"div\");mb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,\nzoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a]})});function rb(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(\"\"+b).trim():b+\"px\"}\nfunction sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=rb(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if(\"object\"!==typeof b.dangerouslySetInnerHTML||!(\"__html\"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(p(62));}}\nfunction vb(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if(\"function\"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb()}}\nfunction Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==\ntypeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,\"passive\",{get:function(){Lb=!0}});window.addEventListener(\"test\",Mb,Mb);window.removeEventListener(\"test\",Mb,Mb)}catch(a){Lb=!1}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments)}\nfunction Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null}else throw Error(p(198));Qb||(Qb=!0,Rb=l)}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}\nfunction Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling}return null}\nvar ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&\"function\"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128))}catch(b){}}\nvar oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;\nfunction tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;\ndefault:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)))}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}\nfunction wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b)}else k<=b&&(a.expiredLanes|=h);f&=~h}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f}}\nfunction Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");\nfunction Sc(a,b){switch(a){case \"focusin\":case \"focusout\":Lc=null;break;case \"dragenter\":case \"dragleave\":Mc=null;break;case \"mouseover\":case \"mouseout\":Nc=null;break;case \"pointerover\":case \"pointerout\":Oc.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":Pc.delete(b.pointerId)}}\nfunction Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction Uc(a,b,c,d,e){switch(b){case \"focusin\":return Lc=Tc(Lc,a,b,c,d,e),!0;case \"dragenter\":return Mc=Tc(Mc,a,b,c,d,e),!0;case \"mouseover\":return Nc=Tc(Nc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c)});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction Xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift()}return!0}function Zc(a,b,c){Xc(a)&&c.delete(b)}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc)}\nfunction ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)))}\nfunction bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift()}var cd=ua.ReactCurrentBatchConfig,dd=!0;\nfunction ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d)}finally{C=e,cd.transition=f}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d)}finally{C=e,cd.transition=f}}\nfunction fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f}null!==e&&d.stopPropagation()}else hd(a,b,d,null,c)}}var id=null;\nfunction Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null}else b!==a&&(a=null);id=a;return null}\nfunction jd(a){switch(a){case \"cancel\":case \"click\":case \"close\":case \"contextmenu\":case \"copy\":case \"cut\":case \"auxclick\":case \"dblclick\":case \"dragend\":case \"dragstart\":case \"drop\":case \"focusin\":case \"focusout\":case \"input\":case \"invalid\":case \"keydown\":case \"keypress\":case \"keyup\":case \"mousedown\":case \"mouseup\":case \"paste\":case \"pause\":case \"play\":case \"pointercancel\":case \"pointerdown\":case \"pointerup\":case \"ratechange\":case \"reset\":case \"resize\":case \"seeked\":case \"submit\":case \"touchcancel\":case \"touchend\":case \"touchstart\":case \"volumechange\":case \"change\":case \"selectionchange\":case \"textInput\":case \"compositionstart\":case \"compositionend\":case \"compositionupdate\":case \"beforeblur\":case \"afterblur\":case \"beforeinput\":case \"blur\":case \"fullscreenchange\":case \"focus\":case \"hashchange\":case \"popstate\":case \"select\":case \"selectstart\":return 1;case \"drag\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"mousemove\":case \"mouseout\":case \"mouseover\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"scroll\":case \"toggle\":case \"touchmove\":case \"wheel\":case \"mouseenter\":case \"mouseleave\":case \"pointerenter\":case \"pointerleave\":return 4;\ncase \"message\":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e=\"value\"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}\nfunction od(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if(\"movementX\"in\na)return a.movementX;a!==yd&&(yd&&\"mousemove\"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return\"movementY\"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:\"Escape\",\nSpacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Nd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",\n119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Od={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=od(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Nd[a.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return\"keypress\"===a.type?od(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?od(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&\"CompositionEvent\"in window,be=null;ia&&\"documentMode\"in document&&(be=document.documentMode);var ce=ia&&\"TextEvent\"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case \"keyup\":return-1!==$d.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"focusout\":return!0;default:return!1}}function he(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case \"compositionend\":return he(b);case \"keypress\":if(32!==b.which)return null;fe=!0;return ee;case \"textInput\":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return\"compositionend\"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return de&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!le[a.type]:\"textarea\"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,\"onChange\");0<b.length&&(c=new td(\"onChange\",\"change\",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if(\"change\"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye=\"oninput\"in document;if(!ye){var ze=document.createElement(\"div\");ze.setAttribute(\"oninput\",\"return;\");ye=\"function\"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent(\"onpropertychange\",Be),qe=pe=null)}function Be(a){if(\"value\"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b)}}\nfunction Ce(a,b,c){\"focusin\"===a?(Ae(),pe=b,qe=c,pe.attachEvent(\"onpropertychange\",Be)):\"focusout\"===a&&Ae()}function De(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return te(qe)}function Ee(a,b){if(\"click\"===a)return te(b)}function Fe(a,b){if(\"input\"===a||\"change\"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He=\"function\"===typeof Object.is?Object.is:Ge;\nfunction Ie(a,b){if(He(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return!1}return!0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Je(c)}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}\nfunction Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),\"selectionStart\"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,\nd);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)))}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});\"function\"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}}\nvar Pe=ia&&\"documentMode\"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,\"selectionStart\"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,\"onSelect\"),0<d.length&&(b=new td(\"onSelect\",\"select\",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nfunction Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var We={animationend:Ve(\"Animation\",\"AnimationEnd\"),animationiteration:Ve(\"Animation\",\"AnimationIteration\"),animationstart:Ve(\"Animation\",\"AnimationStart\"),transitionend:Ve(\"Transition\",\"TransitionEnd\")},Xe={},Ye={};\nia&&(Ye=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),\"TransitionEvent\"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze(\"animationend\"),af=Ze(\"animationiteration\"),bf=Ze(\"animationstart\"),cf=Ze(\"transitionend\"),df=new Map,ef=\"abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");\nfunction ff(a,b){df.set(a,b);fa(b,[a])}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,\"on\"+kf)}ff($e,\"onAnimationEnd\");ff(af,\"onAnimationIteration\");ff(bf,\"onAnimationStart\");ff(\"dblclick\",\"onDoubleClick\");ff(\"focusin\",\"onFocus\");ff(\"focusout\",\"onBlur\");ff(cf,\"onTransitionEnd\");ha(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);ha(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);ha(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);\nha(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);fa(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));fa(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));fa(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);fa(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));fa(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));\nfa(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var lf=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),mf=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(lf));\nfunction nf(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}\nfunction D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+\"__bubble\";c.has(d)||(pf(b,a,2,!1),c.add(d))}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b)}var rf=\"_reactListening\"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){\"selectionchange\"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a))});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf(\"selectionchange\",!1,b))}}\nfunction pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd}c=e.bind(null,b,c,a);e=void 0;!Lb||\"touchstart\"!==b&&\"touchmove\"!==b&&\"wheel\"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Jb(function(){var d=f,e=xb(c),g=[];\na:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case \"keypress\":if(0===od(c))break a;case \"keydown\":case \"keyup\":k=Rd;break;case \"focusin\":n=\"focus\";k=Fd;break;case \"focusout\":n=\"blur\";k=Fd;break;case \"beforeblur\":case \"afterblur\":k=Fd;break;case \"click\":if(2===c.button)break a;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":k=Bd;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":k=\nDd;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case \"scroll\":k=vd;break;case \"wheel\":k=Zd;break;case \"copy\":case \"cut\":case \"paste\":k=Jd;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":k=Td}var t=0!==(b&4),J=!t&&\"scroll\"===a,x=t?null!==h?h+\"Capture\":null:h;t=[];for(var w=d,u;null!==\nw;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}))}}if(0===(b&7)){a:{h=\"mouseover\"===a||\"pointerover\"===a;k=\"mouseout\"===a||\"pointerout\"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==\nn&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null}else k=null,n=d;if(k!==n){t=Bd;F=\"onMouseLeave\";x=\"onMouseEnter\";w=\"mouse\";if(\"pointerout\"===a||\"pointerover\"===a)t=Td,F=\"onPointerLeave\",x=\"onPointerEnter\",w=\"pointer\";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+\"leave\",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+\"enter\",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=\nvf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x)}t=null}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if(\"select\"===k||\"input\"===k&&\"file\"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else{na=De;var xa=Ce}else(k=h.nodeName)&&\"input\"===k.toLowerCase()&&(\"checkbox\"===h.type||\"radio\"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);\"focusout\"===a&&(xa=h._wrapperState)&&\nxa.controlled&&\"number\"===h.type&&cb(h,\"number\",h.value)}xa=d?ue(d):window;switch(a){case \"focusin\":if(me(xa)||\"true\"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case \"focusout\":Se=Re=Qe=null;break;case \"mousedown\":Te=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":Te=!1;Ue(g,c,e);break;case \"selectionchange\":if(Pe)break;case \"keydown\":case \"keyup\":Ue(g,c,e)}var $a;if(ae)b:{switch(a){case \"compositionstart\":var ba=\"onCompositionStart\";break b;case \"compositionend\":ba=\"onCompositionEnd\";\nbreak b;case \"compositionupdate\":ba=\"onCompositionUpdate\";break b}ba=void 0}else ie?ge(a,c)&&(ba=\"onCompositionEnd\"):\"keydown\"===a&&229===c.keyCode&&(ba=\"onCompositionStart\");ba&&(de&&\"ko\"!==c.locale&&(ie||\"onCompositionStart\"!==ba?\"onCompositionEnd\"===ba&&ie&&($a=nd()):(kd=e,ld=\"value\"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,\"onBeforeInput\"),\n0<d.length&&(e=new Ld(\"onBeforeInput\",\"beforeinput\",null,c,e),g.push({event:e,listeners:d}),e.data=$a)}se(g,b)})}function tf(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+\"Capture\",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}var xf=/\\r\\n?/g,yf=/\\u0000|\\uFFFD/g;function zf(a){return(\"string\"===typeof a?a:\"\"+a).replace(xf,\"\\n\").replace(yf,\"\")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}\nvar Cf=null,Df=null;function Ef(a,b){return\"textarea\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}\nvar Ff=\"function\"===typeof setTimeout?setTimeout:void 0,Gf=\"function\"===typeof clearTimeout?clearTimeout:void 0,Hf=\"function\"===typeof Promise?Promise:void 0,Jf=\"function\"===typeof queueMicrotask?queueMicrotask:\"undefined\"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;})}\nfunction Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,\"/$\"===c){if(0===d){a.removeChild(e);bd(b);return}d--}else\"$\"!==c&&\"$?\"!==c&&\"$!\"!==c||d++;c=e}while(c);bd(b)}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if(\"$\"===b||\"$!\"===b||\"$?\"===b)break;if(\"/$\"===b)return null}}return a}\nfunction Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(\"$\"===c||\"$!\"===c||\"$?\"===c){if(0===b)return a;b--}else\"/$\"===c&&b++}a=a.previousSibling}return null}var Nf=Math.random().toString(36).slice(2),Of=\"__reactFiber$\"+Nf,Pf=\"__reactProps$\"+Nf,uf=\"__reactContainer$\"+Nf,of=\"__reactEvents$\"+Nf,Qf=\"__reactListeners$\"+Nf,Rf=\"__reactHandles$\"+Nf;\nfunction Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[Of]||a[uf];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return{current:a}}\nfunction E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--)}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}\nfunction Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H)}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c)}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||\"Unknown\",e));return A({},c,d)}\nfunction cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return!0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c)}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a)}function ig(a){fg=!0;hg(a)}\nfunction jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg=\"\";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b}\nfunction ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a}else rg=1<<f|c<<e|d,sg=a}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0))}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null}var xg=null,yg=null,I=!1,zg=null;\nfunction Ag(a,b){var c=Bg(5,null,null,0);c.elementType=\"DELETED\";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c)}\nfunction Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=\nnull,!0):!1;default:return!1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a)}}else{if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a}\nfunction Gg(a){if(a!==xg)return!1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b=\"head\"!==b&&\"body\"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling)}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(\"/$\"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--}else\"$\"!==c&&\"$!\"!==c&&\"$?\"!==c||b++}a=a.nextSibling}yg=\nnull}}else yg=xg?Lf(a.stateNode.nextSibling):null;return!0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling)}function Ig(){yg=xg=null;I=!1}function Jg(a){null===zg?zg=[a]:zg.push(a)}var Kg=ua.ReactCurrentBatchConfig;\nfunction Lg(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode}if(!d)throw Error(p(147,a));var e=d,f=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;null===a?delete b[f]:b[f]=a};b._stringRef=f;return b}if(\"string\"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}\nfunction Mg(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,\"[object Object]\"===a?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":a));}function Ng(a){var b=a._init;return b(a._payload)}\nfunction Og(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c)}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Pg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&\nnull===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Qg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||\"object\"===typeof f&&null!==f&&f.$$typeof===Ha&&Ng(f)===b.type))return d=e(b,c.props),d.ref=Lg(a,b,c),d.return=a,d;d=Rg(c.type,c.key,c.props,null,a.mode,d);d.ref=Lg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||\nb.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=Sg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Tg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if(\"string\"===typeof b&&\"\"!==b||\"number\"===typeof b)return b=Qg(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=Rg(b.type,b.key,b.props,null,a.mode,c),\nc.ref=Lg(a,null,b),c.return=a,c;case wa:return b=Sg(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Tg(b,a.mode,c,null),b.return=a,b;Mg(a,b)}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c&&\"\"!==c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,\nb,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);Mg(a,c)}return null}function y(a,b,c,d,e){if(\"string\"===typeof d&&\"\"!==d||\"number\"===typeof d)return a=a.get(c)||null,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);Mg(b,d)}return null}\nfunction n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===\nx.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if(\"function\"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x}if(n.done)return c(e,\nm),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){\"object\"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if(\"object\"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=\nf.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||\"object\"===typeof k&&null!==k&&k.$$typeof===Ha&&Ng(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=Lg(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling}f.type===ya?(d=Tg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Rg(f.type,f.key,f.props,null,a.mode,h),h.ref=Lg(a,d,f),h.return=a,a=h)}return g(a);case wa:a:{for(l=f.key;null!==\nd;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=Sg(f,a.mode,h);d.return=a;a=d}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);Mg(a,f)}return\"string\"===typeof f&&\"\"!==f||\"number\"===typeof f?(f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):\n(c(a,d),d=Qg(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Ug=Og(!0),Vg=Og(!1),Wg=Uf(null),Xg=null,Yg=null,Zg=null;function $g(){Zg=Yg=Xg=null}function ah(a){var b=Wg.current;E(Wg);a._currentValue=b}function bh(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return}}\nfunction ch(a,b){Xg=a;Zg=Yg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(dh=!0),a.firstContext=null)}function eh(a){var b=a._currentValue;if(Zg!==a)if(a={context:a,memoizedValue:b,next:null},null===Yg){if(null===Xg)throw Error(p(308));Yg=a;Xg.dependencies={lanes:0,firstContext:a}}else Yg=Yg.next=a;return b}var fh=null;function gh(a){null===fh?fh=[a]:fh.push(a)}\nfunction hh(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,gh(b)):(c.next=e.next,e.next=c);b.interleaved=c;return ih(a,d)}function ih(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var jh=!1;function kh(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}\nfunction lh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function mh(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}\nfunction nh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return ih(a,c)}e=d.interleaved;null===e?(b.next=b,gh(d)):(b.next=e.next,e.next=b);d.interleaved=b;return ih(a,c)}function oh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nfunction ph(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction qh(a,b,c,d){var e=a.updateQueue;jh=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k))}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,\nnext:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if(\"function\"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r=\"function\"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:jh=!0}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h))}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;\nh=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);rh|=g;a.lanes=g;a.memoizedState=q}}\nfunction sh(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(p(191,e));e.call(d)}}}var th={},uh=Uf(th),vh=Uf(th),wh=Uf(th);function xh(a){if(a===th)throw Error(p(174));return a}\nfunction yh(a,b){G(wh,b);G(vh,a);G(uh,th);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a)}E(uh);G(uh,b)}function zh(){E(uh);E(vh);E(wh)}function Ah(a){xh(wh.current);var b=xh(uh.current);var c=lb(b,a.type);b!==c&&(G(vh,a),G(uh,c))}function Bh(a){vh.current===a&&(E(uh),E(vh))}var L=Uf(0);\nfunction Ch(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||\"$?\"===c.data||\"$!\"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var Dh=[];\nfunction Eh(){for(var a=0;a<Dh.length;a++)Dh[a]._workInProgressVersionPrimary=null;Dh.length=0}var Fh=ua.ReactCurrentDispatcher,Gh=ua.ReactCurrentBatchConfig,Hh=0,M=null,N=null,O=null,Ih=!1,Jh=!1,Kh=0,Lh=0;function P(){throw Error(p(321));}function Mh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Nh(a,b,c,d,e,f){Hh=f;M=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Fh.current=null===a||null===a.memoizedState?Oh:Ph;a=c(d,e);if(Jh){f=0;do{Jh=!1;Kh=0;if(25<=f)throw Error(p(301));f+=1;O=N=null;b.updateQueue=null;Fh.current=Qh;a=c(d,e)}while(Jh)}Fh.current=Rh;b=null!==N&&null!==N.next;Hh=0;O=N=M=null;Ih=!1;if(b)throw Error(p(300));return a}function Sh(){var a=0!==Kh;Kh=0;return a}\nfunction Th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===O?M.memoizedState=O=a:O=O.next=a;return O}function Uh(){if(null===N){var a=M.alternate;a=null!==a?a.memoizedState:null}else a=N.next;var b=null===O?M.memoizedState:O.next;if(null!==b)O=b,N=a;else{if(null===a)throw Error(p(310));N=a;a={memoizedState:N.memoizedState,baseState:N.baseState,baseQueue:N.baseQueue,queue:N.queue,next:null};null===O?M.memoizedState=O=a:O=O.next=a}return O}\nfunction Vh(a,b){return\"function\"===typeof b?b(a):b}\nfunction Wh(a){var b=Uh(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=N,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Hh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else{var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,\neagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;M.lanes|=m;rh|=m}l=l.next}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(dh=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d}a=c.interleaved;if(null!==a){e=a;do f=e.lane,M.lanes|=f,rh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return[b.memoizedState,c.dispatch]}\nfunction Xh(a){var b=Uh(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(dh=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}function Yh(){}\nfunction Zh(a,b){var c=M,d=Uh(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,dh=!0);d=d.queue;$h(ai.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==O&&O.memoizedState.tag&1){c.flags|=2048;bi(9,ci.bind(null,c,d,e,b),void 0,null);if(null===Q)throw Error(p(349));0!==(Hh&30)||di(c,b,e)}return e}function di(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=M.updateQueue;null===b?(b={lastEffect:null,stores:null},M.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a))}\nfunction ci(a,b,c,d){b.value=c;b.getSnapshot=d;ei(b)&&fi(a)}function ai(a,b,c){return c(function(){ei(b)&&fi(a)})}function ei(a){var b=a.getSnapshot;a=a.value;try{var c=b();return!He(a,c)}catch(d){return!0}}function fi(a){var b=ih(a,1);null!==b&&gi(b,a,1,-1)}\nfunction hi(a){var b=Th();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Vh,lastRenderedState:a};b.queue=a;a=a.dispatch=ii.bind(null,M,a);return[b.memoizedState,a]}\nfunction bi(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=M.updateQueue;null===b?(b={lastEffect:null,stores:null},M.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function ji(){return Uh().memoizedState}function ki(a,b,c,d){var e=Th();M.flags|=a;e.memoizedState=bi(1|b,c,void 0,void 0===d?null:d)}\nfunction li(a,b,c,d){var e=Uh();d=void 0===d?null:d;var f=void 0;if(null!==N){var g=N.memoizedState;f=g.destroy;if(null!==d&&Mh(d,g.deps)){e.memoizedState=bi(b,c,f,d);return}}M.flags|=a;e.memoizedState=bi(1|b,c,f,d)}function mi(a,b){return ki(8390656,8,a,b)}function $h(a,b){return li(2048,8,a,b)}function ni(a,b){return li(4,2,a,b)}function oi(a,b){return li(4,4,a,b)}\nfunction pi(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function qi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return li(4,4,pi.bind(null,b,a),c)}function ri(){}function si(a,b){var c=Uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Mh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction ti(a,b){var c=Uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Mh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function ui(a,b,c){if(0===(Hh&21))return a.baseState&&(a.baseState=!1,dh=!0),a.memoizedState=c;He(c,b)||(c=yc(),M.lanes|=c,rh|=c,a.baseState=!0);return b}function vi(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Gh.transition;Gh.transition={};try{a(!1),b()}finally{C=c,Gh.transition=d}}function wi(){return Uh().memoizedState}\nfunction xi(a,b,c){var d=yi(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(zi(a))Ai(b,c);else if(c=hh(a,b,c,d),null!==c){var e=R();gi(c,a,d,e);Bi(c,b,d)}}\nfunction ii(a,b,c){var d=yi(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(zi(a))Ai(b,e);else{var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,gh(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=hh(a,b,e,d);null!==c&&(e=R(),gi(c,a,d,e),Bi(c,b,d))}}\nfunction zi(a){var b=a.alternate;return a===M||null!==b&&b===M}function Ai(a,b){Jh=Ih=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}function Bi(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nvar Rh={readContext:eh,useCallback:P,useContext:P,useEffect:P,useImperativeHandle:P,useInsertionEffect:P,useLayoutEffect:P,useMemo:P,useReducer:P,useRef:P,useState:P,useDebugValue:P,useDeferredValue:P,useTransition:P,useMutableSource:P,useSyncExternalStore:P,useId:P,unstable_isNewReconciler:!1},Oh={readContext:eh,useCallback:function(a,b){Th().memoizedState=[a,void 0===b?null:b];return a},useContext:eh,useEffect:mi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ki(4194308,\n4,pi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ki(4194308,4,a,b)},useInsertionEffect:function(a,b){return ki(4,2,a,b)},useMemo:function(a,b){var c=Th();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=xi.bind(null,M,a);return[d.memoizedState,a]},useRef:function(a){var b=\nTh();a={current:a};return b.memoizedState=a},useState:hi,useDebugValue:ri,useDeferredValue:function(a){return Th().memoizedState=a},useTransition:function(){var a=hi(!1),b=a[0];a=vi.bind(null,a[1]);Th().memoizedState=a;return[b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=M,e=Th();if(I){if(void 0===c)throw Error(p(407));c=c()}else{c=b();if(null===Q)throw Error(p(349));0!==(Hh&30)||di(d,b,c)}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;mi(ai.bind(null,d,\nf,a),[a]);d.flags|=2048;bi(9,ci.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=Th(),b=Q.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=\":\"+b+\"R\"+c;c=Kh++;0<c&&(b+=\"H\"+c.toString(32));b+=\":\"}else c=Lh++,b=\":\"+b+\"r\"+c.toString(32)+\":\";return a.memoizedState=b},unstable_isNewReconciler:!1},Ph={readContext:eh,useCallback:si,useContext:eh,useEffect:$h,useImperativeHandle:qi,useInsertionEffect:ni,useLayoutEffect:oi,useMemo:ti,useReducer:Wh,useRef:ji,useState:function(){return Wh(Vh)},\nuseDebugValue:ri,useDeferredValue:function(a){var b=Uh();return ui(b,N.memoizedState,a)},useTransition:function(){var a=Wh(Vh)[0],b=Uh().memoizedState;return[a,b]},useMutableSource:Yh,useSyncExternalStore:Zh,useId:wi,unstable_isNewReconciler:!1},Qh={readContext:eh,useCallback:si,useContext:eh,useEffect:$h,useImperativeHandle:qi,useInsertionEffect:ni,useLayoutEffect:oi,useMemo:ti,useReducer:Xh,useRef:ji,useState:function(){return Xh(Vh)},useDebugValue:ri,useDeferredValue:function(a){var b=Uh();return null===\nN?b.memoizedState=a:ui(b,N.memoizedState,a)},useTransition:function(){var a=Xh(Vh)[0],b=Uh().memoizedState;return[a,b]},useMutableSource:Yh,useSyncExternalStore:Zh,useId:wi,unstable_isNewReconciler:!1};function Ci(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}function Di(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar Ei={isMounted:function(a){return(a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=R(),e=yi(a),f=mh(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=nh(a,f,e);null!==b&&(gi(b,a,e,d),oh(b,a,e))},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=R(),e=yi(a),f=mh(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=nh(a,f,e);null!==b&&(gi(b,a,e,d),oh(b,a,e))},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=R(),d=\nyi(a),e=mh(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=nh(a,e,d);null!==b&&(gi(b,a,d,c),oh(b,a,d))}};function Fi(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}\nfunction Gi(a,b,c){var d=!1,e=Vf;var f=b.contextType;\"object\"===typeof f&&null!==f?f=eh(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Ei;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction Hi(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Ei.enqueueReplaceState(b,b.state,null)}\nfunction Ii(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs={};kh(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=eh(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(Di(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||(b=e.state,\n\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Ei.enqueueReplaceState(e,e.state,null),qh(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4194308)}function Ji(a,b){try{var c=\"\",d=b;do c+=Pa(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e,digest:null}}\nfunction Ki(a,b,c){return{value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}function Li(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Mi=\"function\"===typeof WeakMap?WeakMap:Map;function Ni(a,b,c){c=mh(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Oi||(Oi=!0,Pi=d);Li(a,b)};return c}\nfunction Qi(a,b,c){c=mh(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Li(a,b)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){Li(a,b);\"function\"!==typeof d&&(null===Ri?Ri=new Set([this]):Ri.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}\nfunction Si(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Mi;var e=new Set;d.set(b,e)}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ti.bind(null,a,b,c),b.then(a,a))}function Ui(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return}while(null!==a);return null}\nfunction Vi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=mh(-1,1),b.tag=2,nh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Wi=ua.ReactCurrentOwner,dh=!1;function Xi(a,b,c,d){b.child=null===a?Vg(b,null,c,d):Ug(b,a.child,c,d)}\nfunction Yi(a,b,c,d,e){c=c.render;var f=b.ref;ch(b,e);d=Nh(a,b,c,d,f,e);c=Sh();if(null!==a&&!dh)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Zi(a,b,e);I&&c&&vg(b);b.flags|=1;Xi(a,b,d,e);return b.child}\nfunction $i(a,b,c,d,e){if(null===a){var f=c.type;if(\"function\"===typeof f&&!aj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,bj(a,b,f,d,e);a=Rg(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return Zi(a,b,e)}b.flags|=1;a=Pg(f,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction bj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(dh=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(dh=!0);else return b.lanes=a.lanes,Zi(a,b,e)}return cj(a,b,c,d,e)}\nfunction dj(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(ej,fj),fj|=c;else{if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(ej,fj),fj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(ej,fj);fj|=d}else null!==\nf?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(ej,fj),fj|=d;Xi(a,b,e,c);return b.child}function gj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152}function cj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);ch(b,e);c=Nh(a,b,c,d,f,e);d=Sh();if(null!==a&&!dh)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Zi(a,b,e);I&&d&&vg(b);b.flags|=1;Xi(a,b,c,e);return b.child}\nfunction hj(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b)}else f=!1;ch(b,e);if(null===b.stateNode)ij(a,b),Gi(b,c,d),Ii(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=eh(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q=\"function\"===typeof m||\"function\"===typeof g.getSnapshotBeforeUpdate;q||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||\n(h!==d||k!==l)&&Hi(b,g,d,l);jh=!1;var r=b.memoizedState;g.state=r;qh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||jh?(\"function\"===typeof m&&(Di(b,c,m,d),k=b.memoizedState),(h=jh||Fi(b,c,h,d,r,k,l))?(q||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===typeof g.componentDidMount&&(b.flags|=4194308)):\n(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1)}else{g=b.stateNode;lh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Ci(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=eh(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m=\"function\"===typeof y||\"function\"===typeof g.getSnapshotBeforeUpdate)||\n\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&Hi(b,g,d,k);jh=!1;r=b.memoizedState;g.state=r;qh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||jh?(\"function\"===typeof y&&(Di(b,c,y,d),n=b.memoizedState),(l=jh||Fi(b,c,l,d,r,n,k)||!1)?(m||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&\ng.UNSAFE_componentWillUpdate(d,n,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===\na.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1)}return jj(a,b,c,d,f,e)}\nfunction jj(a,b,c,d,e,f){gj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),Zi(a,b,f);d=b.stateNode;Wi.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Ug(b,a.child,null,f),b.child=Ug(b,null,h,f)):Xi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function kj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);yh(a,b.containerInfo)}\nfunction lj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Xi(a,b,c,d);return b.child}var mj={dehydrated:null,treeContext:null,retryLane:0};function nj(a){return{baseLanes:a,cachePool:null,transitions:null}}\nfunction oj(a,b,c){var d=b.pendingProps,e=L.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(L,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:\"$!\"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:\"hidden\",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=\ng):f=pj(g,d,0,null),a=Tg(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=nj(c),b.memoizedState=mj,a):qj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return rj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:\"hidden\",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=Pg(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=Pg(h,f):(f=Tg(f,g,c,null),f.flags|=2);f.return=\nb;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?nj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=mj;return d}f=a.child;a=f.sibling;d=Pg(f,{mode:\"visible\",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}\nfunction qj(a,b){b=pj({mode:\"visible\",children:b},a.mode,0,null);b.return=a;return a.child=b}function sj(a,b,c,d){null!==d&&Jg(d);Ug(b,a.child,null,c);a=qj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}\nfunction rj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Ki(Error(p(422))),sj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=pj({mode:\"visible\",children:d.children},e,0,null);f=Tg(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Ug(b,a.child,null,g);b.child.memoizedState=nj(g);b.memoizedState=mj;return f}if(0===(b.mode&1))return sj(a,b,g,null);if(\"$!\"===e.data){d=e.nextSibling&&e.nextSibling.dataset;\nif(d)var h=d.dgst;d=h;f=Error(p(419));d=Ki(f,d,void 0);return sj(a,b,g,d)}h=0!==(g&a.childLanes);if(dh||h){d=Q;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0}e=0!==(e&(d.suspendedLanes|g))?0:e;\n0!==e&&e!==f.retryLane&&(f.retryLane=e,ih(a,e),gi(d,a,e,-1))}tj();d=Ki(Error(p(421)));return sj(a,b,g,d)}if(\"$?\"===e.data)return b.flags|=128,b.child=a.child,b=uj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=qj(b,d.children);b.flags|=4096;return b}function vj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);bh(a.return,b,c)}\nfunction wj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e)}\nfunction xj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Xi(a,b,d.children,c);d=L.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else{if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&vj(a,c,b);else if(19===a.tag)vj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}G(L,d);if(0===(b.mode&1))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Ch(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);wj(b,!1,e,c,f);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Ch(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}wj(b,!0,c,null,f);break;case \"together\":wj(b,!1,null,null,void 0);break;default:b.memoizedState=null}return b.child}\nfunction ij(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2)}function Zi(a,b,c){null!==a&&(b.dependencies=a.dependencies);rh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=Pg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Pg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}\nfunction yj(a,b,c){switch(b.tag){case 3:kj(b);Ig();break;case 5:Ah(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:yh(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Wg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(L,L.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return oj(a,b,c);G(L,L.current&1);a=Zi(a,b,c);return null!==a?a.sibling:null}G(L,L.current&1);break;case 19:d=0!==(c&\nb.childLanes);if(0!==(a.flags&128)){if(d)return xj(a,b,c);b.flags|=128}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(L,L.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,dj(a,b,c)}return Zi(a,b,c)}var zj,Aj,Bj,Cj;\nzj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Aj=function(){};\nBj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;xh(uh.current);var f=null;switch(c){case \"input\":e=Ya(a,e);d=Ya(a,d);f=[];break;case \"select\":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case \"textarea\":e=gb(a,e);d=gb(a,d);f=[];break;default:\"function\"!==typeof e.onClick&&\"function\"===typeof d.onClick&&(a.onclick=Bf)}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if(\"style\"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&\n(c||(c={}),c[g]=\"\")}else\"dangerouslySetInnerHTML\"!==l&&\"children\"!==l&&\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&\"autoFocus\"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if(\"style\"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]=\"\");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,\nc)),c=k;else\"dangerouslySetInnerHTML\"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):\"children\"===l?\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(l,\"\"+k):\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&(ea.hasOwnProperty(l)?(null!=k&&\"onScroll\"===l&&D(\"scroll\",a),f||h===k||(f=[])):(f=f||[]).push(l,k))}c&&(f=f||[]).push(\"style\",c);var l=f;if(b.updateQueue=l)b.flags|=4}};Cj=function(a,b,c,d){c!==d&&(b.flags|=4)};\nfunction Dj(a,b){if(!I)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}\nfunction Ej(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;zh();E(Wf);E(H);Eh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Fj(zg),zg=null));Aj(a,b);S(b);return null;case 5:Bh(b);var e=xh(wh.current);\nc=b.type;if(null!==a&&null!=b.stateNode)Bj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else{if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=xh(uh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case \"dialog\":D(\"cancel\",d);D(\"close\",d);break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",d);break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],d);break;case \"source\":D(\"error\",d);break;case \"img\":case \"image\":case \"link\":D(\"error\",\nd);D(\"load\",d);break;case \"details\":D(\"toggle\",d);break;case \"input\":Za(d,f);D(\"invalid\",d);break;case \"select\":d._wrapperState={wasMultiple:!!f.multiple};D(\"invalid\",d);break;case \"textarea\":hb(d,f),D(\"invalid\",d)}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];\"children\"===g?\"string\"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=[\"children\",h]):\"number\"===typeof h&&d.textContent!==\"\"+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,\nh,a),e=[\"children\",\"\"+h]):ea.hasOwnProperty(g)&&null!=h&&\"onScroll\"===g&&D(\"scroll\",d)}switch(c){case \"input\":Va(d);db(d,f,!0);break;case \"textarea\":Va(d);jb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&(d.onclick=Bf)}d=e;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;\"http://www.w3.org/1999/xhtml\"===a&&(a=kb(c));\"http://www.w3.org/1999/xhtml\"===a?\"script\"===c?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\n\"string\"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),\"select\"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;zj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case \"dialog\":D(\"cancel\",a);D(\"close\",a);e=d;break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",a);e=d;break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case \"source\":D(\"error\",a);e=d;break;case \"img\":case \"image\":case \"link\":D(\"error\",\na);D(\"load\",a);e=d;break;case \"details\":D(\"toggle\",a);e=d;break;case \"input\":Za(a,d);e=Ya(a,d);D(\"invalid\",a);break;case \"option\":e=d;break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D(\"invalid\",a);break;case \"textarea\":hb(a,d);e=gb(a,d);D(\"invalid\",a);break;default:e=d}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];\"style\"===f?sb(a,k):\"dangerouslySetInnerHTML\"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):\"children\"===f?\"string\"===typeof k?(\"textarea\"!==\nc||\"\"!==k)&&ob(a,k):\"number\"===typeof k&&ob(a,\"\"+k):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(ea.hasOwnProperty(f)?null!=k&&\"onScroll\"===f&&D(\"scroll\",a):null!=k&&ta(a,f,k,g))}switch(c){case \"input\":Va(a);db(a,d,!1);break;case \"textarea\":Va(a);jb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+Sa(d.value));break;case \"select\":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,\n!0);break;default:\"function\"===typeof e.onClick&&(a.onclick=Bf)}switch(c){case \"button\":case \"input\":case \"select\":case \"textarea\":d=!!d.autoFocus;break a;case \"img\":d=!0;break a;default:d=!1}}d&&(b.flags|=4)}null!==b.ref&&(b.flags|=512,b.flags|=2097152)}S(b);return null;case 6:if(a&&null!=b.stateNode)Cj(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(p(166));c=xh(wh.current);xh(uh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=\nxg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1))}f&&(b.flags|=4)}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d}S(b);return null;case 13:E(L);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===\na){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1}else null!==zg&&(Fj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(L.current&1)?0===T&&(T=3):tj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return zh(),\nAj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return ah(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(L);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Dj(f,!1);else{if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Ch(a);if(null!==g){b.flags|=128;Dj(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,\ng=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(L,L.current&1|2);return b.child}a=\na.sibling}null!==f.tail&&B()>Gj&&(b.flags|=128,d=!0,Dj(f,!1),b.lanes=4194304)}else{if(!d)if(a=Ch(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Dj(f,!0),null===f.tail&&\"hidden\"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Gj&&1073741824!==c&&(b.flags|=128,d=!0,Dj(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g)}if(null!==f.tail)return b=f.tail,f.rendering=\nb,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=L.current,G(L,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Hj(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(fj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}\nfunction Ij(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return zh(),E(Wf),E(H),Eh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Bh(b),null;case 13:E(L);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig()}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(L),null;case 4:return zh(),null;case 10:return ah(b.type._context),null;case 22:case 23:return Hj(),\nnull;case 24:return null;default:return null}}var Jj=!1,U=!1,Kj=\"function\"===typeof WeakSet?WeakSet:Set,V=null;function Lj(a,b){var c=a.ref;if(null!==c)if(\"function\"===typeof c)try{c(null)}catch(d){W(a,b,d)}else c.current=null}function Mj(a,b,c){try{c()}catch(d){W(a,b,d)}}var Nj=!1;\nfunction Oj(a,b){Cf=dd;a=Me();if(Ne(a)){if(\"selectionStart\"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=\nq.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode}q=y}c=-1===h||-1===k?null:{start:h,end:k}}else c=null}c=c||{start:0,end:0}}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;\ncase 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Ci(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent=\"\":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F)}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return}n=Nj;Nj=!1;return n}\nfunction Pj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Mj(b,c,f)}e=e.next}while(e!==d)}}function Qj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}function Rj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c}\"function\"===typeof b?b(a):b.current=a}}\nfunction Sj(a){var b=a.alternate;null!==b&&(a.alternate=null,Sj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null}function Tj(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction Uj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Tj(a.return))return null;a=a.return}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child}if(!(a.flags&2))return a.stateNode}}\nfunction Vj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Vj(a,b,c),a=a.sibling;null!==a;)Vj(a,b,c),a=a.sibling}\nfunction Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling}var X=null,Xj=!1;function Yj(a,b,c){for(c=c.child;null!==c;)Zj(a,b,c),c=c.sibling}\nfunction Zj(a,b,c){if(lc&&\"function\"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c)}catch(h){}switch(c.tag){case 5:U||Lj(c,b);case 6:var d=X,e=Xj;X=null;Yj(a,b,c);X=d;Xj=e;null!==X&&(Xj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Xj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Xj;X=c.stateNode.containerInfo;Xj=!0;\nYj(a,b,c);X=d;Xj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Mj(c,b,g):0!==(f&4)&&Mj(c,b,g));e=e.next}while(e!==d)}Yj(a,b,c);break;case 1:if(!U&&(Lj(c,b),d=c.stateNode,\"function\"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount()}catch(h){W(c,b,h)}Yj(a,b,c);break;case 21:Yj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==\nc.memoizedState,Yj(a,b,c),U=d):Yj(a,b,c);break;default:Yj(a,b,c)}}function ak(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Kj);b.forEach(function(b){var d=bk.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction ck(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Xj=!1;break a;case 3:X=h.stateNode.containerInfo;Xj=!0;break a;case 4:X=h.stateNode.containerInfo;Xj=!0;break a}h=h.return}if(null===X)throw Error(p(160));Zj(f,g,e);X=null;Xj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null}catch(l){W(e,b,l)}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)dk(b,a),b=b.sibling}\nfunction dk(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:ck(b,a);ek(a);if(d&4){try{Pj(3,a,a.return),Qj(3,a)}catch(t){W(a,a.return,t)}try{Pj(5,a,a.return)}catch(t){W(a,a.return,t)}}break;case 1:ck(b,a);ek(a);d&512&&null!==c&&Lj(c,c.return);break;case 5:ck(b,a);ek(a);d&512&&null!==c&&Lj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,\"\")}catch(t){W(a,a.return,t)}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;\na.updateQueue=null;if(null!==k)try{\"input\"===h&&\"radio\"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];\"style\"===m?sb(e,q):\"dangerouslySetInnerHTML\"===m?nb(e,q):\"children\"===m?ob(e,q):ta(e,m,q,l)}switch(h){case \"input\":bb(e,f);break;case \"textarea\":ib(e,f);break;case \"select\":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,\nf.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:\"\",!1))}e[Pf]=f}catch(t){W(a,a.return,t)}}break;case 6:ck(b,a);ek(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f}catch(t){W(a,a.return,t)}}break;case 3:ck(b,a);ek(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo)}catch(t){W(a,a.return,t)}break;case 4:ck(b,a);ek(a);break;case 13:ck(b,a);ek(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||\nnull!==e.alternate&&null!==e.alternate.memoizedState||(fk=B()));d&4&&ak(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,ck(b,a),U=l):ck(b,a);ek(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Pj(4,r,r.return);break;case 1:Lj(r,r.return);var n=r.stateNode;if(\"function\"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=\nb.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount()}catch(t){W(d,c,t)}}break;case 5:Lj(r,r.return);break;case 22:if(null!==r.memoizedState){gk(q);continue}}null!==y?(y.return=r,V=y):gk(q)}m=m.sibling}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,\"function\"===typeof f.setProperty?f.setProperty(\"display\",\"none\",\"important\"):f.display=\"none\"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty(\"display\")?k.display:null,h.style.display=\nrb(\"display\",g))}catch(t){W(a,a.return,t)}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?\"\":q.memoizedProps}catch(t){W(a,a.return,t)}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling}}break;case 19:ck(b,a);ek(a);d&4&&ak(a);break;case 21:break;default:ck(b,\na),ek(a)}}function ek(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Tj(c)){var d=c;break a}c=c.return}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,\"\"),d.flags&=-33);var f=Uj(a);Wj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Uj(a);Vj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k)}a.flags&=-3}b&4096&&(a.flags&=-4097)}function hk(a,b,c){V=a;ik(a,b,c)}\nfunction ik(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Jj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Jj;var l=U;Jj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?jk(e):null!==k?(k.return=g,V=k):jk(e);for(;null!==f;)V=f,ik(f,b,c),f=f.sibling;V=e;Jj=h;U=l}kk(a,b,c)}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):kk(a,b,c)}}\nfunction kk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Qj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else{var e=b.elementType===b.type?c.memoizedProps:Ci(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate)}var f=b.updateQueue;null!==f&&sh(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=\nb.child.stateNode;break;case 1:c=b.child.stateNode}sh(b,g,c)}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case \"button\":case \"input\":case \"select\":case \"textarea\":k.autoFocus&&c.focus();break;case \"img\":k.src&&(c.src=k.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;\ndefault:throw Error(p(163));}U||b.flags&512&&Rj(b)}catch(r){W(b,b.return,r)}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}function gk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}\nfunction jk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Qj(4,b)}catch(k){W(b,c,k)}break;case 1:var d=b.stateNode;if(\"function\"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount()}catch(k){W(b,e,k)}}var f=b.return;try{Rj(b)}catch(k){W(b,f,k)}break;case 5:var g=b.return;try{Rj(b)}catch(k){W(b,g,k)}}}catch(k){W(b,b.return,k)}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return}}\nvar lk=Math.ceil,mk=ua.ReactCurrentDispatcher,nk=ua.ReactCurrentOwner,ok=ua.ReactCurrentBatchConfig,K=0,Q=null,Y=null,Z=0,fj=0,ej=Uf(0),T=0,pk=null,rh=0,qk=0,rk=0,sk=null,tk=null,fk=0,Gj=Infinity,uk=null,Oi=!1,Pi=null,Ri=null,vk=!1,wk=null,xk=0,yk=0,zk=null,Ak=-1,Bk=0;function R(){return 0!==(K&6)?B():-1!==Ak?Ak:Ak=B()}\nfunction yi(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Bk&&(Bk=yc()),Bk;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function gi(a,b,c,d){if(50<yk)throw yk=0,zk=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==Q)a===Q&&(0===(K&2)&&(qk|=c),4===T&&Ck(a,Z)),Dk(a,d),1===c&&0===K&&0===(b.mode&1)&&(Gj=B()+500,fg&&jg())}\nfunction Dk(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===Q?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Ek.bind(null,a)):hg(Ek.bind(null,a)),Jf(function(){0===(K&6)&&jg()}),c=null;else{switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc}c=Fk(c,Gk.bind(null,a))}a.callbackPriority=b;a.callbackNode=c}}\nfunction Gk(a,b){Ak=-1;Bk=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Hk()&&a.callbackNode!==c)return null;var d=uc(a,a===Q?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Ik(a,d);else{b=d;var e=K;K|=2;var f=Jk();if(Q!==a||Z!==b)uk=null,Gj=B()+500,Kk(a,b);do try{Lk();break}catch(h){Mk(a,h)}while(1);$g();mk.current=f;K=e;null!==Y?b=0:(Q=null,Z=0,b=T)}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Nk(a,e)));if(1===b)throw c=pk,Kk(a,0),Ck(a,d),Dk(a,B()),c;if(6===b)Ck(a,d);\nelse{e=a.current.alternate;if(0===(d&30)&&!Ok(e)&&(b=Ik(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Nk(a,f))),1===b))throw c=pk,Kk(a,0),Ck(a,d),Dk(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Pk(a,tk,uk);break;case 3:Ck(a,d);if((d&130023424)===d&&(b=fk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){R();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Pk.bind(null,a,tk,uk),b);break}Pk(a,tk,uk);break;case 4:Ck(a,d);if((d&4194240)===\nd)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*lk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Pk.bind(null,a,tk,uk),d);break}Pk(a,tk,uk);break;case 5:Pk(a,tk,uk);break;default:throw Error(p(329));}}}Dk(a,B());return a.callbackNode===c?Gk.bind(null,a):null}\nfunction Nk(a,b){var c=sk;a.current.memoizedState.isDehydrated&&(Kk(a,b).flags|=256);a=Ik(a,b);2!==a&&(b=tk,tk=c,null!==b&&Fj(b));return a}function Fj(a){null===tk?tk=a:tk.push.apply(tk,a)}\nfunction Ok(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return!1}catch(g){return!1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else{if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return!0;b=b.return}b.sibling.return=b.return;b=b.sibling}}return!0}\nfunction Ck(a,b){b&=~rk;b&=~qk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d}}function Ek(a){if(0!==(K&6))throw Error(p(327));Hk();var b=uc(a,0);if(0===(b&1))return Dk(a,B()),null;var c=Ik(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Nk(a,d))}if(1===c)throw c=pk,Kk(a,0),Ck(a,b),Dk(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Pk(a,tk,uk);Dk(a,B());return null}\nfunction Qk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Gj=B()+500,fg&&jg())}}function Rk(a){null!==wk&&0===wk.tag&&0===(K&6)&&Hk();var b=K;K|=1;var c=ok.transition,d=C;try{if(ok.transition=null,C=1,a)return a()}finally{C=d,ok.transition=c,K=b,0===(K&6)&&jg()}}function Hj(){fj=ej.current;E(ej)}\nfunction Kk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:zh();E(Wf);E(H);Eh();break;case 5:Bh(d);break;case 4:zh();break;case 13:E(L);break;case 19:E(L);break;case 10:ah(d.type._context);break;case 22:case 23:Hj()}c=c.return}Q=a;Y=a=Pg(a.current,null);Z=fj=b;T=0;pk=null;rk=qk=rh=0;tk=sk=null;if(null!==fh){for(b=\n0;b<fh.length;b++)if(c=fh[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g}c.pending=d}fh=null}return a}\nfunction Mk(a,b){do{var c=Y;try{$g();Fh.current=Rh;if(Ih){for(var d=M.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}Ih=!1}Hh=0;O=N=M=null;Jh=!1;Kh=0;nk.current=null;if(null===c||null===c.return){T=1;pk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,\nm.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null)}var y=Ui(g);if(null!==y){y.flags&=-257;Vi(y,g,h,f,b);y.mode&1&&Si(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t}else n.add(k);break a}else{if(0===(b&1)){Si(f,l,b);tj();break a}k=Error(p(426))}}else if(I&&h.mode&1){var J=Ui(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Vi(J,g,h,f,b);Jg(Ji(k,h));break a}}f=k=Ji(k,h);4!==T&&(T=2);null===sk?sk=[f]:sk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;\nb&=-b;f.lanes|=b;var x=Ni(f,k,b);ph(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&(\"function\"===typeof w.getDerivedStateFromError||null!==u&&\"function\"===typeof u.componentDidCatch&&(null===Ri||!Ri.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Qi(f,h,b);ph(f,F);break a}}f=f.return}while(null!==f)}Sk(c)}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Jk(){var a=mk.current;mk.current=Rh;return null===a?Rh:a}\nfunction tj(){if(0===T||3===T||2===T)T=4;null===Q||0===(rh&268435455)&&0===(qk&268435455)||Ck(Q,Z)}function Ik(a,b){var c=K;K|=2;var d=Jk();if(Q!==a||Z!==b)uk=null,Kk(a,b);do try{Tk();break}catch(e){Mk(a,e)}while(1);$g();K=c;mk.current=d;if(null!==Y)throw Error(p(261));Q=null;Z=0;return T}function Tk(){for(;null!==Y;)Uk(Y)}function Lk(){for(;null!==Y&&!cc();)Uk(Y)}function Uk(a){var b=Vk(a.alternate,a,fj);a.memoizedProps=a.pendingProps;null===b?Sk(a):Y=b;nk.current=null}\nfunction Sk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Ej(c,b,fj),null!==c){Y=c;return}}else{c=Ij(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else{T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===T&&(T=5)}function Pk(a,b,c){var d=C,e=ok.transition;try{ok.transition=null,C=1,Wk(a,b,c,d)}finally{ok.transition=e,C=d}return null}\nfunction Wk(a,b,c,d){do Hk();while(null!==wk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===Q&&(Y=Q=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||vk||(vk=!0,Fk(hc,function(){Hk();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=ok.transition;ok.transition=null;\nvar g=C;C=1;var h=K;K|=4;nk.current=null;Oj(a,c);dk(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;hk(c,a,e);dc();K=h;C=g;ok.transition=f}else a.current=c;vk&&(vk=!1,wk=a,xk=e);f=a.pendingLanes;0===f&&(Ri=null);mc(c.stateNode,d);Dk(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Oi)throw Oi=!1,a=Pi,Pi=null,a;0!==(xk&1)&&0!==a.tag&&Hk();f=a.pendingLanes;0!==(f&1)?a===zk?yk++:(yk=0,zk=a):yk=0;jg();return null}\nfunction Hk(){if(null!==wk){var a=Dc(xk),b=ok.transition,c=C;try{ok.transition=null;C=16>a?16:a;if(null===wk)var d=!1;else{a=wk;wk=null;xk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Pj(8,m,f)}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Sj(m);if(m===\nl){V=null;break}if(null!==r){r.return=y;V=r;break}V=y}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J}while(null!==t)}}V=f}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Pj(9,f,f.return)}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==\nu)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Qj(9,h)}}catch(na){W(h,h.return,na)}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return}}K=e;jg();if(lc&&\"function\"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a)}catch(na){}d=!0}return d}finally{C=c,ok.transition=b}}return!1}function Xk(a,b,c){b=Ji(c,b);b=Ni(a,b,1);a=nh(a,b,1);b=R();null!==a&&(Ac(a,1,b),Dk(a,b))}\nfunction W(a,b,c){if(3===a.tag)Xk(a,a,c);else for(;null!==b;){if(3===b.tag){Xk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if(\"function\"===typeof b.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Ri||!Ri.has(d))){a=Ji(c,a);a=Qi(b,a,1);b=nh(b,a,1);a=R();null!==b&&(Ac(b,1,a),Dk(b,a));break}}b=b.return}}\nfunction Ti(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=R();a.pingedLanes|=a.suspendedLanes&c;Q===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-fk?Kk(a,0):rk|=c);Dk(a,b)}function Yk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=R();a=ih(a,b);null!==a&&(Ac(a,b,c),Dk(a,c))}function uj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Yk(a,c)}\nfunction bk(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Yk(a,c)}var Vk;\nVk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)dh=!0;else{if(0===(a.lanes&c)&&0===(b.flags&128))return dh=!1,yj(a,b,c);dh=0!==(a.flags&131072)?!0:!1}else dh=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;ij(a,b);a=b.pendingProps;var e=Yf(b,H.current);ch(b,c);e=Nh(null,b,d,a,e,c);var f=Sh();b.flags|=1;\"object\"===typeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=\nnull,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,kh(b),e.updater=Ei,b.stateNode=e,e._reactInternals=b,Ii(b,d,a,c),b=jj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Xi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{ij(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=Zk(d);a=Ci(d,a);switch(e){case 0:b=cj(null,b,d,a,c);break a;case 1:b=hj(null,b,d,a,c);break a;case 11:b=Yi(null,b,d,a,c);break a;case 14:b=$i(null,b,d,Ci(d.type,a),c);break a}throw Error(p(306,\nd,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),cj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),hj(a,b,d,e,c);case 3:a:{kj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;lh(a,b);qh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=\nf,b.memoizedState=f,b.flags&256){e=Ji(Error(p(423)),b);b=lj(a,b,d,c,e);break a}else if(d!==e){e=Ji(Error(p(424)),b);b=lj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Vg(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else{Ig();if(d===e){b=Zi(a,b,c);break a}Xi(a,b,d,c)}b=b.child}return b;case 5:return Ah(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),\ngj(a,b),Xi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return oj(a,b,c);case 4:return yh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Ug(b,null,d,c):Xi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),Yi(a,b,d,e,c);case 7:return Xi(a,b,b.pendingProps,c),b.child;case 8:return Xi(a,b,b.pendingProps.children,c),b.child;case 12:return Xi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;\ng=e.value;G(Wg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=Zi(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=mh(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);bh(f.return,\nc,b);h.lanes|=c;break}k=k.next}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);bh(g,c,b);g=f.sibling}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return}f=g}Xi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,d=b.pendingProps.children,ch(b,c),e=eh(e),d=d(e),b.flags|=1,Xi(a,b,d,c),\nb.child;case 14:return d=b.type,e=Ci(d,b.pendingProps),e=Ci(d.type,e),$i(a,b,d,e,c);case 15:return bj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Ci(d,e),ij(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,ch(b,c),Gi(b,d,e),Ii(b,d,e,c),jj(null,b,d,!0,a,c);case 19:return xj(a,b,c);case 22:return dj(a,b,c)}throw Error(p(156,b.tag));};function Fk(a,b){return ac(a,b)}\nfunction $k(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null}function Bg(a,b,c,d){return new $k(a,b,c,d)}function aj(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction Zk(a){if(\"function\"===typeof a)return aj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}\nfunction Pg(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction Rg(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)aj(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ya:return Tg(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return pj(c,e,f,b);default:if(\"object\"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;\nbreak a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,\"\"));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Tg(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function pj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function Qg(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}\nfunction Sg(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction al(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=\nnull}function bl(a,b,c,d,e,f,g,h,k){a=new al(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};kh(f);return a}function cl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wa,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nfunction dl(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}\nfunction el(a,b,c,d,e,f,g,h,k){a=bl(c,d,!0,a,e,f,g,h,k);a.context=dl(null);c=a.current;d=R();e=yi(c);f=mh(d,e);f.callback=void 0!==b&&null!==b?b:null;nh(c,f,e);a.current.lanes=e;Ac(a,e,d);Dk(a,d);return a}function fl(a,b,c,d){var e=b.current,f=R(),g=yi(e);c=dl(c);null===b.context?b.context=c:b.pendingContext=c;b=mh(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=nh(e,b,g);null!==a&&(gi(a,e,g,f),oh(a,e,g));return g}\nfunction gl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function hl(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function il(a,b){hl(a,b);(a=a.alternate)&&hl(a,b)}function jl(){return null}var kl=\"function\"===typeof reportError?reportError:function(a){console.error(a)};function ll(a){this._internalRoot=a}\nml.prototype.render=ll.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));fl(a,b,null,null)};ml.prototype.unmount=ll.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Rk(function(){fl(null,a,null,null)});b[uf]=null}};function ml(a){this._internalRoot=a}\nml.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a)}};function nl(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function ol(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}function pl(){}\nfunction ql(a,b,c,d,e){if(e){if(\"function\"===typeof d){var f=d;d=function(){var a=gl(g);f.call(a)}}var g=el(b,d,a,0,null,!1,!1,\"\",pl);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Rk();return g}for(;e=a.lastChild;)a.removeChild(e);if(\"function\"===typeof d){var h=d;d=function(){var a=gl(k);h.call(a)}}var k=bl(a,0,!1,null,null,!1,!1,\"\",pl);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Rk(function(){fl(b,k,c,d)});return k}\nfunction rl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if(\"function\"===typeof e){var h=e;e=function(){var a=gl(g);h.call(a)}}fl(b,g,a,e)}else g=ql(c,b,a,e,d);return gl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Dk(b,B()),0===(K&6)&&(Gj=B()+500,jg()))}break;case 13:Rk(function(){var b=ih(a,1);if(null!==b){var c=R();gi(b,a,1,c)}}),il(a,1)}};\nFc=function(a){if(13===a.tag){var b=ih(a,134217728);if(null!==b){var c=R();gi(b,a,134217728,c)}il(a,134217728)}};Gc=function(a){if(13===a.tag){var b=yi(a),c=ih(a,b);if(null!==c){var d=R();gi(c,a,b,d)}il(a,b)}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c}};\nyb=function(a,b,c){switch(b){case \"input\":bb(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e)}}}break;case \"textarea\":ib(a,c);break;case \"select\":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Qk;Hb=Rk;\nvar sl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Qk]},tl={findFiberByHostInstance:Wc,bundleType:0,version:\"18.3.1\",rendererPackageName:\"react-dom\"};\nvar ul={bundleType:tl.bundleType,version:tl.version,rendererPackageName:tl.rendererPackageName,rendererConfig:tl.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:tl.findFiberByHostInstance||\njl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.3.1-next-f1338f8080-20240426\"};if(\"undefined\"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var vl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!vl.isDisabled&&vl.supportsFiber)try{kc=vl.inject(ul),lc=vl}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=sl;\nexports.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nl(b))throw Error(p(200));return cl(a,b,null,c)};exports.createRoot=function(a,b){if(!nl(a))throw Error(p(299));var c=!1,d=\"\",e=kl;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=bl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ll(b)};\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(\",\");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a){return Rk(a)};exports.hydrate=function(a,b,c){if(!ol(b))throw Error(p(200));return rl(null,a,b,!0,c)};\nexports.hydrateRoot=function(a,b,c){if(!nl(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f=\"\",g=kl;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=el(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,\ne);return new ml(b)};exports.render=function(a,b,c){if(!ol(b))throw Error(p(200));return rl(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!ol(a))throw Error(p(40));return a._reactRootContainer?(Rk(function(){rl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null})}),!0):!1};exports.unstable_batchedUpdates=Qk;\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!ol(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return rl(a,b,c,!1,d)};exports.version=\"18.3.1-next-f1338f8080-20240426\";\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};function X(){throw Error(\"act(...) is not supported in production builds of React.\");}\nexports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;exports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;\nexports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;exports.act=X;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=X;exports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};\nexports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};exports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};\nexports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};exports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.3.1\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/e-commerce/\";","////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport type AgnosticPatchRoutesOnNavigationFunctionArgs<\n  O extends AgnosticRouteObject = AgnosticRouteObject,\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> = {\n  path: string;\n  matches: M[];\n  patch: (routeId: string | null, children: O[]) => void;\n};\n\nexport type AgnosticPatchRoutesOnNavigationFunction<\n  O extends AgnosticRouteObject = AgnosticRouteObject,\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> = (\n  opts: AgnosticPatchRoutesOnNavigationFunctionArgs<O, M>\n) => void | Promise<void>;\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  dataStrategy?: DataStrategyFunction;\n  patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      viewTransitionOpts?: ViewTransitionOpts;\n      flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches\n        .slice(0, idx + 1)\n        .every((m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(\n        (m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors)\n      );\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        viewTransitionOpts: opts.viewTransitionOpts,\n        flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches)\n          .route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error: discoverResult.error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches)\n          .route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = { ...state.errors, ...errors };\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    abortFetcher(key);\n\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        preventScrollReset,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      preventScrollReset,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    preventScrollReset: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        abortFetcher(staleKey);\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    preventScrollReset: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset,\n        });\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    if (!patchRoutesOnNavigationImpl) {\n      return { type: \"success\", matches };\n    }\n\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          path: pathname,\n          matches: partialMatches,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(\n              routeId,\n              children,\n              routesToUse,\n              localManifest,\n              mapRouteProperties\n            );\n          },\n        });\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search\n        ? path.search.replace(/^\\?/, \"?index&\")\n        : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter((v) => v).forEach((v) => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? `?${qs}` : \"\";\n    }\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string,\n  includeBoundary = false\n) {\n  let index = matches.findIndex((m) => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  initialHydration: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(\n      matches,\n      Object.keys(state.errors)[0],\n      true\n    );\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(\n      matches,\n      pendingActionResult[0]\n    );\n  }\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      initialHydration ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction shouldLoadRouteOnHydration(\n  route: AgnosticDataRouteObject,\n  loaderData: RouteData | null | undefined,\n  errors: RouteData | null | undefined\n) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  let childrenToPatch: AgnosticDataRouteObject[];\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(\n    (newRoute) =>\n      !childrenToPatch.some((existingRoute) =>\n        isSameRoute(newRoute, existingRoute)\n      )\n  );\n\n  let newRoutes = convertRoutesToDataRoutes(\n    uniqueChildren,\n    mapRouteProperties,\n    [routeId || \"_\", \"patch\", String(childrenToPatch?.length || \"0\")],\n    manifest\n  );\n\n  childrenToPatch.push(...newRoutes);\n}\n\nfunction isSameRoute(\n  newRoute: AgnosticRouteObject,\n  existingRoute: AgnosticRouteObject\n): boolean {\n  // Most optimal check is by id\n  if (\n    \"id\" in newRoute &&\n    \"id\" in existingRoute &&\n    newRoute.id === existingRoute.id\n  ) {\n    return true;\n  }\n\n  // Second is by pathing differences\n  if (\n    !(\n      newRoute.index === existingRoute.index &&\n      newRoute.path === existingRoute.path &&\n      newRoute.caseSensitive === existingRoute.caseSensitive\n    )\n  ) {\n    return false;\n  }\n\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if (\n    (!newRoute.children || newRoute.children.length === 0) &&\n    (!existingRoute.children || existingRoute.children.length === 0)\n  ) {\n    return true;\n  }\n\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children!.every((aChild, i) =>\n    existingRoute.children?.some((bChild) => isSameRoute(aChild, bChild))\n  );\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n","import * as React from \"react\";\nimport type {\n  AgnosticIndexRouteObject,\n  AgnosticNonIndexRouteObject,\n  AgnosticRouteMatch,\n  History,\n  LazyRouteFunction,\n  Location,\n  Action as NavigationType,\n  RelativeRoutingType,\n  Router,\n  StaticHandlerContext,\n  To,\n  TrackedPromise,\n} from \"@remix-run/router\";\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nexport interface IndexRouteObject {\n  caseSensitive?: AgnosticIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticIndexRouteObject[\"path\"];\n  id?: AgnosticIndexRouteObject[\"id\"];\n  loader?: AgnosticIndexRouteObject[\"loader\"];\n  action?: AgnosticIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticIndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<RouteObject>;\n}\n\nexport interface NonIndexRouteObject {\n  caseSensitive?: AgnosticNonIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticNonIndexRouteObject[\"path\"];\n  id?: AgnosticNonIndexRouteObject[\"id\"];\n  loader?: AgnosticNonIndexRouteObject[\"loader\"];\n  action?: AgnosticNonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticNonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticNonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticNonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: RouteObject[];\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n  lazy?: LazyRouteFunction<RouteObject>;\n}\n\nexport type RouteObject = IndexRouteObject | NonIndexRouteObject;\n\nexport type DataRouteObject = RouteObject & {\n  children?: DataRouteObject[];\n  id: string;\n};\n\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> extends AgnosticRouteMatch<ParamKey, RouteObjectType> {}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\nexport interface DataRouterContextObject\n  // Omit `future` since those can be pulled from the `router`\n  // `NavigationContext` needs future since it doesn't have a `router` in all cases\n  extends Omit<NavigationContextObject, \"future\"> {\n  router: Router;\n  staticContext?: StaticHandlerContext;\n}\n\nexport const DataRouterContext =\n  React.createContext<DataRouterContextObject | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nexport const AwaitContext = React.createContext<TrackedPromise | null>(null);\nif (__DEV__) {\n  AwaitContext.displayName = \"Await\";\n}\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  flushSync?: boolean;\n  viewTransition?: boolean;\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level `<Router>` API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport interface Navigator {\n  createHref: History[\"createHref\"];\n  // Optional for backwards-compat with Router/HistoryRouter usage (edge case)\n  encodeLocation?: History[\"encodeLocation\"];\n  go: History[\"go\"];\n  push(to: To, state?: any, opts?: NavigateOptions): void;\n  replace(to: To, state?: any, opts?: NavigateOptions): void;\n}\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n  future: {\n    v7_relativeSplatPath: boolean;\n  };\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\nexport interface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n  isDataRoute: boolean;\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n  isDataRoute: false,\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n","import * as React from \"react\";\nimport type {\n  Blocker,\n  BlockerFunction,\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  RelativeRoutingType,\n  Router as RemixRouter,\n  RevalidationState,\n  To,\n  UIMatch,\n} from \"@remix-run/router\";\nimport {\n  IDLE_BLOCKER,\n  Action as NavigationType,\n  UNSAFE_convertRouteMatchToUiMatch as convertRouteMatchToUiMatch,\n  UNSAFE_decodePath as decodePath,\n  UNSAFE_getResolveToMatches as getResolveToMatches,\n  UNSAFE_invariant as invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  stripBasename,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  DataRouteMatch,\n  NavigateOptions,\n  RouteContextObject,\n  RouteMatch,\n  RouteObject,\n} from \"./context\";\nimport {\n  AwaitContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nexport function useHref(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname =\n      pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a `<Router>`.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * `<NavLink>`.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, decodePath(pathname)),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\nconst navigateEffectWarning =\n  `You should call navigate() in a React.useEffect(), not when ` +\n  `your component is first rendered.`;\n\n// Mute warnings for calls to useNavigate in SSR environments\nfunction useIsomorphicLayoutEffect(\n  cb: Parameters<typeof React.useLayoutEffect>[0]\n) {\n  let isStatic = React.useContext(NavigationContext).static;\n  if (!isStatic) {\n    // We should be able to get rid of this once react 18.3 is released\n    // See: https://github.com/facebook/react/pull/26395\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(cb);\n  }\n}\n\n/**\n * Returns an imperative method for changing the location. Used by `<Link>`s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  let { isDataRoute } = React.useContext(RouteContext);\n  // Conditional usage is OK here because the usage of a data router is static\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return isDataRoute ? useNavigateStable() : useNavigateUnstable();\n}\n\nfunction useNavigateUnstable(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let dataRouterContext = React.useContext(DataRouterContext);\n  let { basename, future, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getResolveToMatches(matches, future.v7_relativeSplatPath)\n  );\n\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our history listener yet\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history (but only if we're not in a data router,\n      // otherwise it'll prepend the basename inside of the router).\n      // If this is a root navigation, then we navigate to the raw basename\n      // which allows the basename to have full control over the presence of a\n      // trailing slash on root links\n      if (dataRouterContext == null && basename !== \"/\") {\n        path.pathname =\n          path.pathname === \"/\"\n            ? basename\n            : joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [\n      basename,\n      navigator,\n      routePathnamesJson,\n      locationPathname,\n      dataRouterContext,\n    ]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by `<Outlet>` to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  let { future } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let routePathnamesJson = JSON.stringify(\n    getResolveToMatches(matches, future.v7_relativeSplatPath)\n  );\n\n  return React.useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === \"path\"\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an `<Outlet>` to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  return useRoutesImpl(routes, locationArg);\n}\n\n// Internal implementation with accept optional param for RouterProvider usage\nexport function useRoutesImpl(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string,\n  dataRouterState?: RemixRouter[\"state\"],\n  future?: RemixRouter[\"future\"]\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { navigator } = React.useContext(NavigationContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n\n  let remainingPathname = pathname;\n  if (parentPathnameBase !== \"/\") {\n    // Determine the remaining pathname by removing the # of URL segments the\n    // parentPathnameBase has, instead of removing based on character count.\n    // This is because we can't guarantee that incoming/outgoing encodings/\n    // decodings will match exactly.\n    // We decode paths before matching on a per-segment basis with\n    // decodeURIComponent(), but we re-encode pathnames via `new URL()` so they\n    // match what `window.location.pathname` would reflect.  Those don't 100%\n    // align when it comes to encoded URI characters such as % and &.\n    //\n    // So we may end up with:\n    //   pathname:           \"/descendant/a%25b/match\"\n    //   parentPathnameBase: \"/descendant/a%b\"\n    //\n    // And the direct substring removal approach won't work :/\n    let parentSegments = parentPathnameBase.replace(/^\\//, \"\").split(\"/\");\n    let segments = pathname.replace(/^\\//, \"\").split(\"/\");\n    remainingPathname = \"/\" + segments.slice(parentSegments.length).join(\"/\");\n  }\n\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined ||\n        matches[matches.length - 1].route.Component !== undefined ||\n        matches[matches.length - 1].route.lazy !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" ` +\n        `does not have an element or Component. This means it will render an <Outlet /> with a ` +\n        `null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  let renderedMatches = _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([\n            parentPathnameBase,\n            // Re-encode pathnames that were decoded inside matchRoutes\n            navigator.encodeLocation\n              ? navigator.encodeLocation(match.pathname).pathname\n              : match.pathname,\n          ]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([\n                  parentPathnameBase,\n                  // Re-encode pathnames that were decoded inside matchRoutes\n                  navigator.encodeLocation\n                    ? navigator.encodeLocation(match.pathnameBase).pathname\n                    : match.pathnameBase,\n                ]),\n        })\n      ),\n    parentMatches,\n    dataRouterState,\n    future\n  );\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return (\n      <LocationContext.Provider\n        value={{\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location,\n          },\n          navigationType: NavigationType.Pop,\n        }}\n      >\n        {renderedMatches}\n      </LocationContext.Provider>\n    );\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorComponent() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error)\n    ? `${error.status} ${error.statusText}`\n    : error instanceof Error\n    ? error.message\n    : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n\n  let devInfo = null;\n  if (__DEV__) {\n    console.error(\n      \"Error handled by React Router default ErrorBoundary:\",\n      error\n    );\n\n    devInfo = (\n      <>\n        <p>💿 Hey developer 👋</p>\n        <p>\n          You can provide a way better UX than this when your app throws errors\n          by providing your own <code style={codeStyles}>ErrorBoundary</code> or{\" \"}\n          <code style={codeStyles}>errorElement</code> prop on your route.\n        </p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <h2>Unexpected Application Error!</h2>\n      <h3 style={{ fontStyle: \"italic\" }}>{message}</h3>\n      {stack ? <pre style={preStyles}>{stack}</pre> : null}\n      {devInfo}\n    </>\n  );\n}\n\nconst defaultErrorElement = <DefaultErrorComponent />;\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  revalidation: RevalidationState;\n  error: any;\n  component: React.ReactNode;\n  routeContext: RouteContextObject;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  revalidation: RevalidationState;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      revalidation: props.revalidation,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (\n      state.location !== props.location ||\n      (state.revalidation !== \"idle\" && props.revalidation === \"idle\")\n    ) {\n      return {\n        error: props.error,\n        location: props.location,\n        revalidation: props.revalidation,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error !== undefined ? props.error : state.error,\n      location: state.location,\n      revalidation: props.revalidation || state.revalidation,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error !== undefined ? (\n      <RouteContext.Provider value={this.props.routeContext}>\n        <RouteErrorContext.Provider\n          value={this.state.error}\n          children={this.props.component}\n        />\n      </RouteContext.Provider>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\ninterface RenderedRouteProps {\n  routeContext: RouteContextObject;\n  match: RouteMatch<string, RouteObject>;\n  children: React.ReactNode | null;\n}\n\nfunction RenderedRoute({ routeContext, match, children }: RenderedRouteProps) {\n  let dataRouterContext = React.useContext(DataRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (\n    dataRouterContext &&\n    dataRouterContext.static &&\n    dataRouterContext.staticContext &&\n    (match.route.errorElement || match.route.ErrorBoundary)\n  ) {\n    dataRouterContext.staticContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return (\n    <RouteContext.Provider value={routeContext}>\n      {children}\n    </RouteContext.Provider>\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState: RemixRouter[\"state\"] | null = null,\n  future: RemixRouter[\"future\"] | null = null\n): React.ReactElement | null {\n  if (matches == null) {\n    if (!dataRouterState) {\n      return null;\n    }\n\n    if (dataRouterState.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else if (\n      future?.v7_partialHydration &&\n      parentMatches.length === 0 &&\n      !dataRouterState.initialized &&\n      dataRouterState.matches.length > 0\n    ) {\n      // Don't bail if we're initializing with partial hydration and we have\n      // router matches.  That means we're actively running `patchRoutesOnNavigation`\n      // so we should render down the partial matches to the appropriate\n      // `HydrateFallback`.  We only do this if `parentMatches` is empty so it\n      // only impacts the root matches for `RouterProvider` and no descendant\n      // `<Routes>`\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id] !== undefined\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for errors on route IDs: ${Object.keys(\n        errors\n      ).join(\",\")}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  // If we're in a partial hydration mode, detect if we need to render down to\n  // a given HydrateFallback while we load the rest of the hydration data\n  let renderFallback = false;\n  let fallbackIndex = -1;\n  if (dataRouterState && future && future.v7_partialHydration) {\n    for (let i = 0; i < renderedMatches.length; i++) {\n      let match = renderedMatches[i];\n      // Track the deepest fallback up until the first route without data\n      if (match.route.HydrateFallback || match.route.hydrateFallbackElement) {\n        fallbackIndex = i;\n      }\n\n      if (match.route.id) {\n        let { loaderData, errors } = dataRouterState;\n        let needsToRunLoader =\n          match.route.loader &&\n          loaderData[match.route.id] === undefined &&\n          (!errors || errors[match.route.id] === undefined);\n        if (match.route.lazy || needsToRunLoader) {\n          // We found the first route that's not ready to render (waiting on\n          // lazy, or has a loader that hasn't run yet).  Flag that we need to\n          // render a fallback and render up until the appropriate fallback\n          renderFallback = true;\n          if (fallbackIndex >= 0) {\n            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);\n          } else {\n            renderedMatches = [renderedMatches[0]];\n          }\n          break;\n        }\n      }\n    }\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    // Only data routers handle errors/fallbacks\n    let error: any;\n    let shouldRenderHydrateFallback = false;\n    let errorElement: React.ReactNode | null = null;\n    let hydrateFallbackElement: React.ReactNode | null = null;\n    if (dataRouterState) {\n      error = errors && match.route.id ? errors[match.route.id] : undefined;\n      errorElement = match.route.errorElement || defaultErrorElement;\n\n      if (renderFallback) {\n        if (fallbackIndex < 0 && index === 0) {\n          warningOnce(\n            \"route-fallback\",\n            false,\n            \"No `HydrateFallback` element provided to render during initial hydration\"\n          );\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = null;\n        } else if (fallbackIndex === index) {\n          shouldRenderHydrateFallback = true;\n          hydrateFallbackElement = match.route.hydrateFallbackElement || null;\n        }\n      }\n    }\n\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => {\n      let children: React.ReactNode;\n      if (error) {\n        children = errorElement;\n      } else if (shouldRenderHydrateFallback) {\n        children = hydrateFallbackElement;\n      } else if (match.route.Component) {\n        // Note: This is a de-optimized path since React won't re-use the\n        // ReactElement since it's identity changes with each new\n        // React.createElement call.  We keep this so folks can use\n        // `<Route Component={...}>` in `<Routes>` but generally `Component`\n        // usage is only advised in `RouterProvider` when we can convert it to\n        // `element` ahead of time.\n        children = <match.route.Component />;\n      } else if (match.route.element) {\n        children = match.route.element;\n      } else {\n        children = outlet;\n      }\n      return (\n        <RenderedRoute\n          match={match}\n          routeContext={{\n            outlet,\n            matches,\n            isDataRoute: dataRouterState != null,\n          }}\n          children={children}\n        />\n      );\n    };\n    // Only wrap in an error boundary within data router usages when we have an\n    // ErrorBoundary/errorElement on this route.  Otherwise let it bubble up to\n    // an ancestor ErrorBoundary/errorElement\n    return dataRouterState &&\n      (match.route.ErrorBoundary || match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        revalidation={dataRouterState.revalidation}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n        routeContext={{ outlet: null, matches, isDataRoute: true }}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseBlocker = \"useBlocker\",\n  UseRevalidator = \"useRevalidator\",\n  UseNavigateStable = \"useNavigate\",\n}\n\nenum DataRouterStateHook {\n  UseBlocker = \"useBlocker\",\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n  UseNavigateStable = \"useNavigate\",\n  UseRouteId = \"useRouteId\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\nfunction useRouteContext(hookName: DataRouterStateHook) {\n  let route = React.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\n\n// Internal version with hookName-aware debugging\nfunction useCurrentRouteId(hookName: DataRouterStateHook) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the ID for the nearest contextual route\n */\nexport function useRouteId() {\n  return useCurrentRouteId(DataRouterStateHook.UseRouteId);\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return React.useMemo(\n    () => ({\n      revalidate: dataRouterContext.router.revalidate,\n      state: state.revalidation,\n    }),\n    [dataRouterContext.router.revalidate, state.revalidation]\n  );\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches(): UIMatch[] {\n  let { matches, loaderData } = useDataRouterState(\n    DataRouterStateHook.UseMatches\n  );\n  return React.useMemo(\n    () => matches.map((m) => convertRouteMatchToUiMatch(m, loaderData)),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\n      `You cannot \\`useLoaderData\\` in an errorElement (routeId: ${routeId})`\n    );\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n  return state.actionData ? state.actionData[routeId] : undefined;\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * ErrorBoundary/errorElement to display a proper error message.\n */\nexport function useRouteError(): unknown {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error !== undefined) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor `<Await />` value\n */\nexport function useAsyncValue(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._data;\n}\n\n/**\n * Returns the error from the nearest ancestor `<Await />` value\n */\nexport function useAsyncError(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._error;\n}\n\nlet blockerId = 0;\n\n/**\n * Allow the application to block navigations within the SPA and present the\n * user a confirmation dialog to confirm the navigation.  Mostly used to avoid\n * using half-filled form data.  This does not handle hard-reloads or\n * cross-origin navigations.\n */\nexport function useBlocker(shouldBlock: boolean | BlockerFunction): Blocker {\n  let { router, basename } = useDataRouterContext(DataRouterHook.UseBlocker);\n  let state = useDataRouterState(DataRouterStateHook.UseBlocker);\n\n  let [blockerKey, setBlockerKey] = React.useState(\"\");\n  let blockerFunction = React.useCallback<BlockerFunction>(\n    (arg) => {\n      if (typeof shouldBlock !== \"function\") {\n        return !!shouldBlock;\n      }\n      if (basename === \"/\") {\n        return shouldBlock(arg);\n      }\n\n      // If they provided us a function and we've got an active basename, strip\n      // it from the locations we expose to the user to match the behavior of\n      // useLocation\n      let { currentLocation, nextLocation, historyAction } = arg;\n      return shouldBlock({\n        currentLocation: {\n          ...currentLocation,\n          pathname:\n            stripBasename(currentLocation.pathname, basename) ||\n            currentLocation.pathname,\n        },\n        nextLocation: {\n          ...nextLocation,\n          pathname:\n            stripBasename(nextLocation.pathname, basename) ||\n            nextLocation.pathname,\n        },\n        historyAction,\n      });\n    },\n    [basename, shouldBlock]\n  );\n\n  // This effect is in charge of blocker key assignment and deletion (which is\n  // tightly coupled to the key)\n  React.useEffect(() => {\n    let key = String(++blockerId);\n    setBlockerKey(key);\n    return () => router.deleteBlocker(key);\n  }, [router]);\n\n  // This effect handles assigning the blockerFunction.  This is to handle\n  // unstable blocker function identities, and happens only after the prior\n  // effect so we don't get an orphaned blockerFunction in the router with a\n  // key of \"\".  Until then we just have the IDLE_BLOCKER.\n  React.useEffect(() => {\n    if (blockerKey !== \"\") {\n      router.getBlocker(blockerKey, blockerFunction);\n    }\n  }, [router, blockerKey, blockerFunction]);\n\n  // Prefer the blocker from `state` not `router.state` since DataRouterContext\n  // is memoized so this ensures we update on blocker state updates\n  return blockerKey && state.blockers.has(blockerKey)\n    ? state.blockers.get(blockerKey)!\n    : IDLE_BLOCKER;\n}\n\n/**\n * Stable version of useNavigate that is used when we are in the context of\n * a RouterProvider.\n */\nfunction useNavigateStable(): NavigateFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseNavigateStable);\n  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);\n\n  let activeRef = React.useRef(false);\n  useIsomorphicLayoutEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(activeRef.current, navigateEffectWarning);\n\n      // Short circuit here since if this happens on first render the navigate\n      // is useless because we haven't wired up our router subscriber yet\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        router.navigate(to);\n      } else {\n        router.navigate(to, { fromRouteId: id, ...options });\n      }\n    },\n    [router, id]\n  );\n\n  return navigate;\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n","import type {\n  InitialEntry,\n  LazyRouteFunction,\n  Location,\n  MemoryHistory,\n  RelativeRoutingType,\n  Router as RemixRouter,\n  RouterState,\n  RouterSubscriber,\n  To,\n  TrackedPromise,\n} from \"@remix-run/router\";\nimport {\n  AbortedDeferredError,\n  Action as NavigationType,\n  createMemoryHistory,\n  UNSAFE_getResolveToMatches as getResolveToMatches,\n  UNSAFE_invariant as invariant,\n  parsePath,\n  resolveTo,\n  stripBasename,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\nimport * as React from \"react\";\n\nimport type {\n  DataRouteObject,\n  IndexRouteObject,\n  Navigator,\n  NonIndexRouteObject,\n  RouteMatch,\n  RouteObject,\n} from \"./context\";\nimport {\n  AwaitContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n} from \"./context\";\nimport {\n  _renderMatches,\n  useAsyncValue,\n  useInRouterContext,\n  useLocation,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  useRoutesImpl,\n} from \"./hooks\";\n\nexport interface FutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_startTransition: boolean;\n}\n\nexport interface RouterProviderProps {\n  fallbackElement?: React.ReactNode;\n  router: RemixRouter;\n  // Only accept future flags relevant to rendering behavior\n  // routing flags should be accessed via router.future\n  future?: Partial<Pick<FutureConfig, \"v7_startTransition\">>;\n}\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n  future,\n}: RouterProviderProps): React.ReactElement {\n  let [state, setStateImpl] = React.useState(router.state);\n  let { v7_startTransition } = future || {};\n\n  let setState = React.useCallback<RouterSubscriber>(\n    (newState: RouterState) => {\n      if (v7_startTransition && startTransitionImpl) {\n        startTransitionImpl(() => setStateImpl(newState));\n      } else {\n        setStateImpl(newState);\n      }\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n\n  React.useEffect(() => {\n    warning(\n      fallbackElement == null || !router.future.v7_partialHydration,\n      \"`<RouterProvider fallbackElement>` is deprecated when using \" +\n        \"`v7_partialHydration`, use a `HydrateFallback` component instead\"\n    );\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <Router\n            basename={basename}\n            location={state.location}\n            navigationType={state.historyAction}\n            navigator={navigator}\n            future={{\n              v7_relativeSplatPath: router.future.v7_relativeSplatPath,\n            }}\n          >\n            {state.initialized || router.future.v7_partialHydration ? (\n              <DataRoutes\n                routes={router.routes}\n                future={router.future}\n                state={state}\n              />\n            ) : (\n              fallbackElement\n            )}\n          </Router>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nfunction DataRoutes({\n  routes,\n  future,\n  state,\n}: {\n  routes: DataRouteObject[];\n  future: RemixRouter[\"future\"];\n  state: RouterState;\n}): React.ReactElement | null {\n  return useRoutesImpl(routes, undefined, state, future);\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  future?: Partial<FutureConfig>;\n}\n\n/**\n * A `<Router>` that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n  future,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nexport function Navigate({\n  to,\n  replace,\n  state,\n  relative,\n}: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  let { future, static: isStatic } = React.useContext(NavigationContext);\n\n  warning(\n    !isStatic,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n  let navigate = useNavigate();\n\n  // Resolve the path outside of the effect so that when effects run twice in\n  // StrictMode they navigate to the same place\n  let path = resolveTo(\n    to,\n    getResolveToMatches(matches, future.v7_relativeSplatPath),\n    locationPathname,\n    relative === \"path\"\n  );\n  let jsonPath = JSON.stringify(path);\n\n  React.useEffect(\n    () => navigate(JSON.parse(jsonPath), { replace, state, relative }),\n    [navigate, jsonPath, relative, replace, state]\n  );\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: NonIndexRouteObject[\"caseSensitive\"];\n  path?: NonIndexRouteObject[\"path\"];\n  id?: NonIndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<NonIndexRouteObject>;\n  loader?: NonIndexRouteObject[\"loader\"];\n  action?: NonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: NonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: NonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: NonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport interface LayoutRouteProps extends PathRouteProps {}\n\nexport interface IndexRouteProps {\n  caseSensitive?: IndexRouteObject[\"caseSensitive\"];\n  path?: IndexRouteObject[\"path\"];\n  id?: IndexRouteObject[\"id\"];\n  lazy?: LazyRouteFunction<IndexRouteObject>;\n  loader?: IndexRouteObject[\"loader\"];\n  action?: IndexRouteObject[\"action\"];\n  hasErrorBoundary?: IndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: IndexRouteObject[\"shouldRevalidate\"];\n  handle?: IndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  hydrateFallbackElement?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n  Component?: React.ComponentType | null;\n  HydrateFallback?: React.ComponentType | null;\n  ErrorBoundary?: React.ComponentType | null;\n}\n\nexport type RouteProps = PathRouteProps | LayoutRouteProps | IndexRouteProps;\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nexport function Route(_props: RouteProps): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n  future?: Partial<Pick<FutureConfig, \"v7_relativeSplatPath\">>;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a `<Router>` directly. Instead, you'll render a\n * router that is more specific to your environment such as a `<BrowserRouter>`\n * in web browsers or a `<StaticRouter>` for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n  future,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(\n    () => ({\n      basename,\n      navigator,\n      static: staticProp,\n      future: {\n        v7_relativeSplatPath: false,\n        ...future,\n      },\n    }),\n    [basename, future, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let locationContext = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      location: {\n        pathname: trailingPathname,\n        search,\n        hash,\n        state,\n        key,\n      },\n      navigationType,\n    };\n  }, [basename, pathname, search, hash, state, key, navigationType]);\n\n  warning(\n    locationContext != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (locationContext == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider children={children} value={locationContext} />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of `<Route>` elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  return useRoutes(createRoutesFromChildren(children), location);\n}\n\nexport interface AwaitResolveRenderFunction {\n  (data: Awaited<any>): React.ReactNode;\n}\n\nexport interface AwaitProps {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nexport function Await({ children, errorElement, resolve }: AwaitProps) {\n  return (\n    <AwaitErrorBoundary resolve={resolve} errorElement={errorElement}>\n      <ResolveAwait>{children}</ResolveAwait>\n    </AwaitErrorBoundary>\n  );\n}\n\ntype AwaitErrorBoundaryProps = React.PropsWithChildren<{\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}>;\n\ntype AwaitErrorBoundaryState = {\n  error: any;\n};\n\nenum AwaitRenderStatus {\n  pending,\n  success,\n  error,\n}\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component<\n  AwaitErrorBoundaryProps,\n  AwaitErrorBoundaryState\n> {\n  constructor(props: AwaitErrorBoundaryProps) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    let { children, errorElement, resolve } = this.props;\n\n    let promise: TrackedPromise | null = null;\n    let status: AwaitRenderStatus = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if ((resolve as TrackedPromise)._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status =\n        \"_error\" in promise\n          ? AwaitRenderStatus.error\n          : \"_data\" in promise\n          ? AwaitRenderStatus.success\n          : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data: any) =>\n          Object.defineProperty(resolve, \"_data\", { get: () => data }),\n        (error: any) =>\n          Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n\n    if (\n      status === AwaitRenderStatus.error &&\n      promise._error instanceof AbortedDeferredError\n    ) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return <AwaitContext.Provider value={promise} children={errorElement} />;\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return <AwaitContext.Provider value={promise} children={children} />;\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on `<Await>`\n */\nfunction ResolveAwait({\n  children,\n}: {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n}) {\n  let data = useAsyncValue();\n  let toRender = typeof children === \"function\" ? children(data) : children;\n  return <>{toRender}</>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    let treePath = [...parentPath, index];\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, treePath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      Component: element.props.Component,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      ErrorBoundary: element.props.ErrorBoundary,\n      hasErrorBoundary:\n        element.props.ErrorBoundary != null ||\n        element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n      lazy: element.props.lazy,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n","import type {\n  FormEncType,\n  HTMLFormMethod,\n  RelativeRoutingType,\n} from \"@remix-run/router\";\nimport { stripBasename, UNSAFE_warning as warning } from \"@remix-run/router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n\n  return searchParams;\n}\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\nexport type SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | JsonValue\n  | null;\n\n// One-time check for submitter support\nlet _formDataSupportsSubmitter: boolean | null = null;\n\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(\n        document.createElement(\"form\"),\n        // @ts-expect-error if FormData supports the submitter parameter, this will throw\n        0\n      );\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\n\n/**\n * Submit options shared by both navigations and fetchers\n */\ninterface SharedSubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   */\n  action?: string;\n\n  /**\n   * The encoding used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * Enable flushSync for this submission's state updates\n   */\n  flushSync?: boolean;\n}\n\n/**\n * Submit options available to fetchers\n */\nexport interface FetcherSubmitOptions extends SharedSubmitOptions {}\n\n/**\n * Submit options available to navigations\n */\nexport interface SubmitOptions extends FetcherSubmitOptions {\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Enable view transitions on this submission navigation\n   */\n  viewTransition?: boolean;\n}\n\nconst supportedFormEncTypes: Set<FormEncType> = new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\",\n]);\n\nfunction getFormEncType(encType: string | null) {\n  if (encType != null && !supportedFormEncTypes.has(encType as FormEncType)) {\n    warning(\n      false,\n      `\"${encType}\" is not a valid \\`encType\\` for \\`<Form>\\`/\\`<fetcher.Form>\\` ` +\n        `and will default to \"${defaultEncType}\"`\n    );\n\n    return null;\n  }\n  return encType;\n}\n\nexport function getFormSubmissionInfo(\n  target: SubmitTarget,\n  basename: string\n): {\n  action: string | null;\n  method: string;\n  encType: string;\n  formData: FormData | undefined;\n  body: any;\n} {\n  let method: string;\n  let action: string | null;\n  let encType: string;\n  let formData: FormData | undefined;\n  let body: any;\n\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n\n    formData = new FormData(target);\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n\n    method =\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    encType =\n      getFormEncType(target.getAttribute(\"formenctype\")) ||\n      getFormEncType(form.getAttribute(\"enctype\")) ||\n      defaultEncType;\n\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let { name, type, value } = target;\n      if (type === \"image\") {\n        let prefix = name ? `${name}.` : \"\";\n        formData.append(`${prefix}x`, \"0\");\n        formData.append(`${prefix}y`, \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n\n  return { action, method: method.toLowerCase(), encType, formData, body };\n}\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport type {\n  DataRouteObject,\n  FutureConfig,\n  Location,\n  NavigateOptions,\n  NavigationType,\n  Navigator,\n  RelativeRoutingType,\n  RouteObject,\n  RouterProps,\n  RouterProviderProps,\n  To,\n  DataStrategyFunction,\n  PatchRoutesOnNavigationFunction,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_mapRouteProperties as mapRouteProperties,\n  UNSAFE_useRouteId as useRouteId,\n  UNSAFE_useRoutesImpl as useRoutesImpl,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig as RouterFutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n  RouterState,\n  RouterSubscriber,\n  BlockerFunction,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  UNSAFE_ErrorResponseImpl as ErrorResponseImpl,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n  matchPath,\n  IDLE_FETCHER,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n  SubmitTarget,\n  FetcherSubmitOptions,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams, ErrorResponseImpl as UNSAFE_ErrorResponseImpl };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  Blocker,\n  BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DataStrategyMatch,\n  DataStrategyResult,\n  ErrorResponse,\n  Fetcher,\n  FutureConfig,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  PatchRoutesOnNavigationFunction,\n  PatchRoutesOnNavigationFunctionArgs,\n  Path,\n  PathMatch,\n  Pathname,\n  PathParam,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  ShouldRevalidateFunctionArgs,\n  To,\n  UIMatch,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  redirectDocument,\n  replace,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_useRouteId,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n  var __reactRouterVersion: string;\n  interface Document {\n    startViewTransition(cb: () => Promise<void> | void): ViewTransition;\n  }\n}\n\n// HEY YOU! DON'T TOUCH THIS VARIABLE!\n//\n// It is replaced with the proper version at build time via a babel plugin in\n// the rollup config.\n//\n// Export a global property onto the window for React Router detection by the\n// Core Web Vitals Technology Report.  This way they can configure the `wappalyzer`\n// to detect and properly classify live websites as being built with React Router:\n// https://github.com/HTTPArchive/wappalyzer/blob/main/src/technologies/r.json\nconst REACT_ROUTER_VERSION = \"0\";\ntry {\n  window.__reactRouterVersion = REACT_ROUTER_VERSION;\n} catch (e) {\n  // no-op\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: Partial<Omit<RouterFutureConfig, \"v7_prependBasename\">>;\n  hydrationData?: HydrationState;\n  dataStrategy?: DataStrategyFunction;\n  patchRoutesOnNavigation?: PatchRoutesOnNavigationFunction;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    dataStrategy: opts?.dataStrategy,\n    patchRoutesOnNavigation: opts?.patchRoutesOnNavigation,\n    window: opts?.window,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    dataStrategy: opts?.dataStrategy,\n    patchRoutesOnNavigation: opts?.patchRoutesOnNavigation,\n    window: opts?.window,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponseImpl(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Contexts\n////////////////////////////////////////////////////////////////////////////////\n\ntype ViewTransitionContextObject =\n  | {\n      isTransitioning: false;\n    }\n  | {\n      isTransitioning: true;\n      flushSync: boolean;\n      currentLocation: Location;\n      nextLocation: Location;\n    };\n\nconst ViewTransitionContext = React.createContext<ViewTransitionContextObject>({\n  isTransitioning: false,\n});\nif (__DEV__) {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\n\nexport { ViewTransitionContext as UNSAFE_ViewTransitionContext };\n\n// TODO: (v7) Change the useFetcher data from `any` to `unknown`\ntype FetchersContextObject = Map<string, any>;\n\nconst FetchersContext = React.createContext<FetchersContextObject>(new Map());\nif (__DEV__) {\n  FetchersContext.displayName = \"Fetchers\";\n}\n\nexport { FetchersContext as UNSAFE_FetchersContext };\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\nconst USE_ID = \"useId\";\nconst useIdImpl = React[USE_ID];\n\nfunction startTransitionSafe(cb: () => void) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\n\nfunction flushSyncSafe(cb: () => void) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\n\ninterface ViewTransition {\n  finished: Promise<void>;\n  ready: Promise<void>;\n  updateCallbackDone: Promise<void>;\n  skipTransition(): void;\n}\n\nclass Deferred<T> {\n  status: \"pending\" | \"resolved\" | \"rejected\" = \"pending\";\n  promise: Promise<T>;\n  // @ts-expect-error - no initializer\n  resolve: (value: T) => void;\n  // @ts-expect-error - no initializer\n  reject: (reason?: unknown) => void;\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = (value) => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = (reason) => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n  future,\n}: RouterProviderProps): React.ReactElement {\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState<RouterState>();\n  let [vtContext, setVtContext] = React.useState<ViewTransitionContextObject>({\n    isTransitioning: false,\n  });\n  let [renderDfd, setRenderDfd] = React.useState<Deferred<void>>();\n  let [transition, setTransition] = React.useState<ViewTransition>();\n  let [interruption, setInterruption] = React.useState<{\n    state: RouterState;\n    currentLocation: Location;\n    nextLocation: Location;\n  }>();\n  let fetcherData = React.useRef<Map<string, any>>(new Map());\n  let { v7_startTransition } = future || {};\n\n  let optInStartTransition = React.useCallback(\n    (cb: () => void) => {\n      if (v7_startTransition) {\n        startTransitionSafe(cb);\n      } else {\n        cb();\n      }\n    },\n    [v7_startTransition]\n  );\n\n  let setState = React.useCallback<RouterSubscriber>(\n    (\n      newState: RouterState,\n      {\n        deletedFetchers,\n        flushSync: flushSync,\n        viewTransitionOpts: viewTransitionOpts,\n      }\n    ) => {\n      deletedFetchers.forEach((key) => fetcherData.current.delete(key));\n      newState.fetchers.forEach((fetcher, key) => {\n        if (fetcher.data !== undefined) {\n          fetcherData.current.set(key, fetcher.data);\n        }\n      });\n\n      let isViewTransitionUnavailable =\n        router.window == null ||\n        router.window.document == null ||\n        typeof router.window.document.startViewTransition !== \"function\";\n\n      // If this isn't a view transition or it's not available in this browser,\n      // just update and be done with it\n      if (!viewTransitionOpts || isViewTransitionUnavailable) {\n        if (flushSync) {\n          flushSyncSafe(() => setStateImpl(newState));\n        } else {\n          optInStartTransition(() => setStateImpl(newState));\n        }\n        return;\n      }\n\n      // flushSync + startViewTransition\n      if (flushSync) {\n        // Flush through the context to mark DOM elements as transition=ing\n        flushSyncSafe(() => {\n          // Cancel any pending transitions\n          if (transition) {\n            renderDfd && renderDfd.resolve();\n            transition.skipTransition();\n          }\n          setVtContext({\n            isTransitioning: true,\n            flushSync: true,\n            currentLocation: viewTransitionOpts.currentLocation,\n            nextLocation: viewTransitionOpts.nextLocation,\n          });\n        });\n\n        // Update the DOM\n        let t = router.window!.document.startViewTransition(() => {\n          flushSyncSafe(() => setStateImpl(newState));\n        });\n\n        // Clean up after the animation completes\n        t.finished.finally(() => {\n          flushSyncSafe(() => {\n            setRenderDfd(undefined);\n            setTransition(undefined);\n            setPendingState(undefined);\n            setVtContext({ isTransitioning: false });\n          });\n        });\n\n        flushSyncSafe(() => setTransition(t));\n        return;\n      }\n\n      // startTransition + startViewTransition\n      if (transition) {\n        // Interrupting an in-progress transition, cancel and let everything flush\n        // out, and then kick off a new transition from the interruption state\n        renderDfd && renderDfd.resolve();\n        transition.skipTransition();\n        setInterruption({\n          state: newState,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      } else {\n        // Completed navigation update with opted-in view transitions, let 'er rip\n        setPendingState(newState);\n        setVtContext({\n          isTransitioning: true,\n          flushSync: false,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      }\n    },\n    [router.window, transition, renderDfd, fetcherData, optInStartTransition]\n  );\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred<void>());\n    }\n  }, [vtContext]);\n\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({ isTransitioning: false });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (\n      renderDfd &&\n      pendingState &&\n      state.location.key === pendingState.location.key\n    ) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation,\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n\n  React.useEffect(() => {\n    warning(\n      fallbackElement == null || !router.future.v7_partialHydration,\n      \"`<RouterProvider fallbackElement>` is deprecated when using \" +\n        \"`v7_partialHydration`, use a `HydrateFallback` component instead\"\n    );\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  let routerFuture = React.useMemo<RouterProps[\"future\"]>(\n    () => ({\n      v7_relativeSplatPath: router.future.v7_relativeSplatPath,\n    }),\n    [router.future.v7_relativeSplatPath]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <FetchersContext.Provider value={fetcherData.current}>\n            <ViewTransitionContext.Provider value={vtContext}>\n              <Router\n                basename={basename}\n                location={state.location}\n                navigationType={state.historyAction}\n                navigator={navigator}\n                future={routerFuture}\n              >\n                {state.initialized || router.future.v7_partialHydration ? (\n                  <MemoizedDataRoutes\n                    routes={router.routes}\n                    future={router.future}\n                    state={state}\n                  />\n                ) : (\n                  fallbackElement\n                )}\n              </Router>\n            </ViewTransitionContext.Provider>\n          </FetchersContext.Provider>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\n// Memoize to avoid re-renders when updating `ViewTransitionContext`\nconst MemoizedDataRoutes = React.memo(DataRoutes);\n\nfunction DataRoutes({\n  routes,\n  future,\n  state,\n}: {\n  routes: DataRouteObject[];\n  future: RemixRouter[\"future\"];\n  state: RouterState;\n}): React.ReactElement | null {\n  return useRoutesImpl(routes, undefined, state, future);\n}\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  future,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({\n  basename,\n  children,\n  future,\n  window,\n}: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: FutureConfig;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({\n  basename,\n  children,\n  future,\n  history,\n}: HistoryRouterProps) {\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n  viewTransition?: boolean;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      viewTransition,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\")\n            ? new URL(currentUrl.protocol + to)\n            : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break ` +\n              `when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n      viewTransition,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport type NavLinkRenderProps = {\n  isActive: boolean;\n  isPending: boolean;\n  isTransitioning: boolean;\n};\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?: React.ReactNode | ((props: NavLinkRenderProps) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?: string | ((props: NavLinkRenderProps) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: NavLinkRenderProps) => React.CSSProperties | undefined);\n}\n\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      viewTransition,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator, basename } = React.useContext(NavigationContext);\n    let isTransitioning =\n      routerState != null &&\n      // Conditional usage is OK here because the usage of a data router is static\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useViewTransitionState(path) &&\n      viewTransition === true;\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    if (nextLocationPathname && basename) {\n      nextLocationPathname =\n        stripBasename(nextLocationPathname, basename) || nextLocationPathname;\n    }\n\n    // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n    // we're looking for a slash _after_ what's in `to`.  For example:\n    //\n    // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n    // both want to look for a / at index 6 to match URL `/users/matt`\n    const endSlashPosition =\n      toPathname !== \"/\" && toPathname.endsWith(\"/\")\n        ? toPathname.length - 1\n        : toPathname.length;\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(endSlashPosition) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let renderProps = {\n      isActive,\n      isPending,\n      isTransitioning,\n    };\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp(renderProps);\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n        isTransitioning ? \"transitioning\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n        viewTransition={viewTransition}\n      >\n        {typeof children === \"function\" ? children(renderProps) : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\n/**\n * Form props shared by navigations and fetchers\n */\ninterface SharedFormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * `<form encType>` - enhancing beyond the normal string type and limiting\n   * to the built-in browser supported values\n   */\n  encType?:\n    | \"application/x-www-form-urlencoded\"\n    | \"multipart/form-data\"\n    | \"text/plain\";\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * Form props available to fetchers\n */\nexport interface FetcherFormProps extends SharedFormProps {}\n\n/**\n * Form props available to navigations\n */\nexport interface FormProps extends SharedFormProps {\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Enable view transitions on this Form navigation\n   */\n  viewTransition?: boolean;\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (\n    {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      viewTransition,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmit();\n    let formAction = useFormAction(action, { relative });\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        fetcherKey,\n        method: submitMethod,\n        navigate,\n        replace,\n        state,\n        relative,\n        preventScrollReset,\n        viewTransition,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmit = \"useSubmit\",\n  UseSubmitFetcher = \"useSubmitFetcher\",\n  UseFetcher = \"useFetcher\",\n  useViewTransitionState = \"useViewTransitionState\",\n}\n\nenum DataRouterStateHook {\n  UseFetcher = \"useFetcher\",\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\n// Internal hooks\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n// External hooks\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    viewTransition,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n    viewTransition?: boolean;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, {\n          replace,\n          state,\n          preventScrollReset,\n          relative,\n          viewTransition,\n        });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n      viewTransition,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\nexport type SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Submits a fetcher `<form>` to the server without reloading the page.\n */\nexport interface FetcherSubmitFunction {\n  (\n    target: SubmitTarget,\n    // Fetchers cannot replace or set state because they are not navigation events\n    options?: FetcherSubmitOptions\n  ): void;\n}\n\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\n      \"You are calling submit during the server render. \" +\n        \"Try calling submit within a `useEffect` or callback instead.\"\n    );\n  }\n}\n\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => `__${String(++fetcherId)}__`;\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let { basename } = React.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n\n  return React.useCallback<SubmitFunction>(\n    (target, options = {}) => {\n      validateClientSideSubmission();\n\n      let { action, method, encType, formData, body } = getFormSubmissionInfo(\n        target,\n        basename\n      );\n\n      if (options.navigate === false) {\n        let key = options.fetcherKey || getUniqueFetcherId();\n        router.fetch(key, currentRouteId, options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          flushSync: options.flushSync,\n        });\n      } else {\n        router.navigate(options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          replace: options.replace,\n          state: options.state,\n          fromRouteId: currentRouteId,\n          flushSync: options.flushSync,\n          viewTransition: options.viewTransition,\n        });\n      }\n    },\n    [router, basename, currentRouteId]\n  );\n}\n\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    let indexValues = params.getAll(\"index\");\n    let hasNakedIndexParam = indexValues.some((v) => v === \"\");\n    if (hasNakedIndexParam) {\n      params.delete(\"index\");\n      indexValues.filter((v) => v).forEach((v) => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? `?${qs}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: React.ForwardRefExoticComponent<\n    FetcherFormProps & React.RefAttributes<HTMLFormElement>\n  >;\n  submit: FetcherSubmitFunction;\n  load: (href: string, opts?: { flushSync?: boolean }) => void;\n};\n\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>({\n  key,\n}: { key?: string } = {}): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(RouteContext);\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n\n  invariant(fetcherData, `useFetcher must be used inside a FetchersContext`);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  // Fetcher key handling\n  // OK to call conditionally to feature detect `useId`\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  let defaultKey = useIdImpl ? useIdImpl() : \"\";\n  let [fetcherKey, setFetcherKey] = React.useState<string>(key || defaultKey);\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    // We will only fall through here when `useId` is not available\n    setFetcherKey(getUniqueFetcherId());\n  }\n\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  // Fetcher additions\n  let load = React.useCallback(\n    (href: string, opts?: { flushSync?: boolean }) => {\n      invariant(routeId, \"No routeId available for fetcher.load()\");\n      router.fetch(fetcherKey, routeId, href, opts);\n    },\n    [fetcherKey, routeId, router]\n  );\n\n  let submitImpl = useSubmit();\n  let submit = React.useCallback<FetcherSubmitFunction>(\n    (target, opts) => {\n      submitImpl(target, {\n        ...opts,\n        navigate: false,\n        fetcherKey,\n      });\n    },\n    [fetcherKey, submitImpl]\n  );\n\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = React.forwardRef<HTMLFormElement, FetcherFormProps>(\n      (props, ref) => {\n        return (\n          <Form {...props} navigate={false} fetcherKey={fetcherKey} ref={ref} />\n        );\n      }\n    );\n    if (__DEV__) {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form: FetcherForm,\n      submit,\n      load,\n      ...fetcher,\n      data,\n    }),\n    [FetcherForm, submit, load, fetcher, data]\n  );\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): (Fetcher & { key: string })[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(([key, fetcher]) => ({\n    ...fetcher,\n    key,\n  }));\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let { basename } = React.useContext(NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      try {\n        sessionStorage.setItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n          JSON.stringify(savedScrollPositions)\n        );\n      } catch (error) {\n        warning(\n          false,\n          `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`\n        );\n      }\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename: GetScrollRestorationKeyFunction | undefined =\n        getKey && basename !== \"/\"\n          ? (location, matches) =>\n              getKey(\n                // Strip the basename to match useLocation()\n                {\n                  ...location,\n                  pathname:\n                    stripBasename(location.pathname, basename) ||\n                    location.pathname,\n                },\n                matches\n              )\n          : getKey;\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKeyWithoutBasename\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(\n          decodeURIComponent(location.hash.slice(1))\n        );\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({\n  when,\n  message,\n}: {\n  when: boolean | BlockerFunction;\n  message: string;\n}) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(\n  to: To,\n  opts: { relative?: RelativeRoutingType } = {}\n) {\n  let vtContext = React.useContext(ViewTransitionContext);\n\n  invariant(\n    vtContext != null,\n    \"`useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" +\n      \"Did you accidentally import `RouterProvider` from `react-router`?\"\n  );\n\n  let { basename } = useDataRouterContext(\n    DataRouterHook.useViewTransitionState\n  );\n  let path = useResolvedPath(to, { relative: opts.relative });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n\n  let currentPath =\n    stripBasename(vtContext.currentLocation.pathname, basename) ||\n    vtContext.currentLocation.pathname;\n  let nextPath =\n    stripBasename(vtContext.nextLocation.pathname, basename) ||\n    vtContext.nextLocation.pathname;\n\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return (\n    matchPath(path.pathname, nextPath) != null ||\n    matchPath(path.pathname, currentPath) != null\n  );\n}\n\nexport { useViewTransitionState as useViewTransitionState };\n\n//#endregion\n","export default function Navbar(props) {\r\n\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg p-3 shadow-sm`}>\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand align-items-center d-flex text-danger fs-4 fw-normal\">Ahmad Adptr</a>\r\n                <button className=\"navbar-toggler\" data-bs-toggle=\"collapse\" data-bs-target=\".navbar-collapse\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"navbar-collapse collapse\">\r\n                    <ul className=\"navbar-nav d-flex me-auto align-items-center\">\r\n                        <li className=\"nav-item\">\r\n                            <a href=\"/a_year_in_indonesia\" className={`nav-link ${props.a_year}`}>\r\n                                A year in Indonesia\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a href=\"/shop\" className={`nav-link ${props.shopMain}`}>\r\n                                Shop\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a href=\"/about\" className={`nav-link ${props.about}`}>\r\n                                About\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a href=\"/contact\" className={`nav-link ${props.contact}`}>\r\n                                Contact\r\n                            </a>\r\n                        </li>\r\n                        <li className=\"nav-item dropdown d-lg-flex align-items-center text-center\">\r\n                            <button className=\"btn dropdown-toggle\"\r\n                            data-bs-toggle=\"dropdown\"\r\n                            data-bs-target=\"menu-dropdown\"> more... </button>\r\n                            <ul className=\"dropdown-menu text-center m-auto mt-2 mt-lg-0\">\r\n                            <li><a class=\"dropdown-item\" href=\"/shop-more\">Shop More</a></li>\r\n                            <li><a class=\"dropdown-item\" href=\"/anime\">Search Anime</a></li>\r\n                            </ul>\r\n                        </li>\r\n                    </ul>\r\n                    <div className=\"sosmed-link d-flex justify-content-center\">\r\n                        <ul className=\"d-flex align-items-center gap-2 justify-content-center mt-4 mt-lg-0 p-0\">\r\n                            <li className=\"nav-item\">\r\n                                    <a href=\"#\" className=\"nav-link\">\r\n                                        <i className=\"bx bxl-youtube\"></i>\r\n                                    </a>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <a href=\"#\" className=\"nav-link\">\r\n                                        <i className=\"bx bxl-instagram\"></i>\r\n                                    </a>\r\n                                </li>\r\n                                <li className=\"nav-item\">\r\n                                    <a href=\"#\" className=\"nav-link\">\r\n                                        <i className=\"bx bxl-github\"></i>\r\n                                    </a>\r\n                                </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgMain(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    width: \"1000px\",\n    height: \"1356px\",\n    viewBox: \"0 0 1000 1355\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", {\n    id: \"surface1\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(47.058824%,40.000001%,32.549021%)\",\n      fillOpacity: 1\n    },\n    d: \"M 31.78125 -2.117188 C 76.976562 -2.117188 122.175781 -2.117188 167.371094 -2.117188 C 167.371094 43.050781 167.371094 88.214844 167.371094 133.382812 C 165.960938 133.382812 164.546875 133.382812 163.136719 133.382812 C 148.144531 132.175781 140.375 139.234375 139.832031 154.554688 C 137.800781 137.222656 132.855469 120.988281 125 105.859375 C 125.203125 86.222656 120.257812 67.167969 110.167969 48.695312 C 103.347656 57.574219 98.402344 67.453125 95.339844 78.335938 C 68.441406 72.796875 58.554688 84.085938 65.679688 112.210938 C 57.667969 111.347656 51.3125 114.171875 46.609375 120.679688 C 31.574219 147.222656 28.042969 175.453125 36.015625 205.367188 C 34.550781 210.429688 32.433594 210.429688 29.660156 205.367188 C 27.546875 225.078125 26.839844 244.839844 27.542969 264.648438 C 28.246094 311.246094 27.542969 357.824219 25.421875 404.382812 C 24.65625 415.925781 22.535156 427.21875 19.066406 438.257812 C 12.53125 377.777344 9 317.085938 8.472656 256.179688 C 7.0625 249.121094 5.648438 242.066406 4.238281 235.007812 C 3.347656 241.605469 1.230469 247.25 -2.117188 251.945312 C -2.117188 220.894531 -2.117188 189.839844 -2.117188 158.789062 C 0.640625 161.289062 3.464844 164.113281 6.355469 167.257812 C 10.167969 212.398438 13.699219 257.566406 16.949219 302.757812 C 27.066406 201.222656 32.011719 99.597656 31.78125 -2.117188 Z M 31.78125 -2.117188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(13.725491%,12.941177%,10.588235%)\",\n      fillOpacity: 1\n    },\n    d: \"M 188.558594 -2.117188 C 295.902344 -2.117188 403.25 -2.117188 510.59375 -2.117188 C 510.8125 97.085938 505.164062 195.886719 493.644531 294.289062 C 488.179688 287.34375 481.113281 285.226562 472.457031 287.9375 C 469.050781 295.4375 464.105469 301.789062 457.628906 306.992188 C 450.398438 303.570312 446.867188 297.925781 447.035156 290.054688 C 431.632812 290.714844 430.21875 295.652344 442.796875 304.875 C 441.386719 305.582031 439.96875 306.285156 438.558594 306.992188 C 433.621094 302.796875 428.679688 298.5625 423.730469 294.289062 C 414.953125 299.230469 408.597656 296.410156 404.660156 285.820312 C 411.210938 280.808594 418.273438 276.574219 425.847656 273.117188 C 403.421875 268.90625 380.824219 267.492188 358.050781 268.882812 C 356.550781 256.515625 360.789062 246.636719 370.761719 239.242188 C 366.832031 233.875 366.125 228.226562 368.644531 222.304688 C 381.445312 206.257812 386.386719 187.90625 383.472656 167.257812 C 390.535156 167.257812 397.597656 167.257812 404.660156 167.257812 C 404.660156 155.964844 404.660156 144.675781 404.660156 133.382812 C 388.359375 133.886719 372.824219 131.066406 358.050781 124.914062 C 357.332031 119.316406 358.742188 114.375 362.289062 110.09375 C 372.675781 108.867188 382.5625 106.042969 391.949219 101.625 C 386.300781 100.214844 380.648438 98.800781 375 97.390625 C 382.535156 88.347656 385.359375 77.761719 383.472656 65.632812 C 373.585938 65.632812 363.699219 65.632812 353.8125 65.632812 C 353.8125 54.339844 353.8125 43.050781 353.8125 31.757812 C 348.164062 31.757812 342.515625 31.757812 336.863281 31.757812 C 336.863281 43.050781 336.863281 54.339844 336.863281 65.632812 C 331.214844 65.632812 325.566406 65.632812 319.914062 65.632812 C 319.898438 155.789062 317.074219 155.789062 311.441406 65.632812 C 307.910156 99.507812 304.378906 133.382812 300.847656 167.257812 C 298.738281 156.054688 298.035156 144.761719 298.730469 133.382812 C 294.492188 133.382812 290.253906 133.382812 286.015625 133.382812 C 285.320312 146.164062 286.027344 158.867188 288.136719 171.492188 C 291.316406 174.140625 294.847656 176.257812 298.730469 177.84375 C 287.949219 184.460938 287.949219 190.8125 298.730469 196.898438 C 289.226562 201.023438 279.339844 202.433594 269.066406 201.132812 C 269.773438 147.480469 269.066406 93.84375 266.949219 40.226562 C 262.664062 36.683594 257.722656 35.273438 252.117188 35.992188 C 253.328125 43.5625 251.914062 50.621094 247.882812 57.164062 C 240.128906 64.175781 234.480469 72.644531 230.933594 82.570312 C 229.292969 66.816406 220.820312 58.347656 205.507812 57.164062 C 209.328125 41.324219 203.679688 32.855469 188.558594 31.757812 C 188.558594 20.464844 188.558594 9.175781 188.558594 -2.117188 Z M 188.558594 -2.117188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(18.82353%,16.078432%,11.764706%)\",\n      fillOpacity: 1\n    },\n    d: \"M 510.59375 -2.117188 C 533.191406 -2.117188 555.792969 -2.117188 578.390625 -2.117188 C 578.390625 20.464844 578.390625 43.050781 578.390625 65.632812 C 574.152344 65.632812 569.914062 65.632812 565.679688 65.632812 C 561.789062 130.535156 562.496094 195.460938 567.796875 260.414062 C 581.851562 265.800781 595.269531 271.445312 608.050781 277.351562 C 584.703125 275.953125 562.105469 278.777344 540.253906 285.820312 C 541.210938 300.140625 545.449219 312.84375 552.964844 323.929688 C 548.730469 323.929688 544.492188 323.929688 540.253906 323.929688 C 540.253906 335.222656 540.253906 346.511719 540.253906 357.804688 C 544.710938 357.171875 548.949219 357.878906 552.964844 359.921875 C 541.066406 360 531.183594 364.234375 523.304688 372.625 C 529.90625 373.515625 535.554688 375.632812 540.253906 378.976562 C 534.785156 377.972656 530.546875 379.382812 527.542969 383.210938 C 523.511719 389.21875 522.101562 396.273438 523.304688 404.382812 C 516.800781 410.074219 511.152344 417.128906 506.355469 425.554688 C 514.367188 440.214844 516.488281 455.738281 512.710938 472.132812 C 509.886719 477.777344 507.0625 477.777344 504.238281 472.132812 C 503.53125 474.25 502.828125 476.367188 502.117188 478.484375 C 509.046875 491.53125 514.695312 504.9375 519.066406 518.710938 C 498.066406 520.183594 479.707031 527.238281 463.984375 539.882812 C 458.335938 539.882812 452.683594 539.882812 447.035156 539.882812 C 446.667969 535.664062 448.085938 532.136719 451.269531 529.296875 C 462.367188 528.65625 472.257812 525.125 480.933594 518.710938 C 478.707031 515.78125 475.882812 513.664062 472.457031 512.359375 C 477.9375 510.285156 483.589844 509.578125 489.40625 510.242188 C 494.667969 475.195312 497.496094 439.910156 497.882812 404.382812 C 493.644531 404.382812 489.40625 404.382812 485.167969 404.382812 C 484.136719 367.289062 486.957031 330.589844 493.644531 294.289062 C 505.164062 195.886719 510.8125 97.085938 510.59375 -2.117188 Z M 510.59375 -2.117188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(26.666668%,21.568628%,15.686275%)\",\n      fillOpacity: 1\n    },\n    d: \"M 582.628906 -2.117188 C 671.609375 -2.117188 760.59375 -2.117188 849.578125 -2.117188 C 849.578125 9.175781 849.578125 20.464844 849.578125 31.757812 C 842.511719 31.757812 835.453125 31.757812 828.390625 31.757812 C 829.09375 65.660156 828.390625 99.535156 826.269531 133.382812 C 821.710938 144.972656 816.765625 156.265625 811.441406 167.257812 C 808.613281 167.257812 805.792969 167.257812 802.964844 167.257812 C 792.039062 169.023438 782.855469 166.199219 775.421875 158.789062 C 774.011719 160.199219 772.597656 161.613281 771.1875 163.023438 C 766.949219 155.964844 762.710938 148.910156 758.472656 141.851562 C 748.511719 152.621094 743.570312 149.796875 743.644531 133.382812 C 706.636719 130.695312 671.328125 133.515625 637.710938 141.851562 C 636.300781 144.675781 634.886719 147.496094 633.472656 150.320312 C 627.992188 153.664062 623.046875 157.898438 618.644531 163.023438 C 616.851562 156.859375 613.320312 154.742188 608.050781 156.671875 C 603.105469 161.613281 598.164062 166.550781 593.21875 171.492188 C 591.808594 165.847656 590.394531 160.199219 588.984375 154.554688 C 579.632812 172.699219 574.6875 171.289062 574.152344 150.320312 C 582.75 99.6875 585.578125 48.875 582.628906 -2.117188 Z M 582.628906 -2.117188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(15.686275%,13.725491%,10.196079%)\",\n      fillOpacity: 1\n    },\n    d: \"M 188.558594 31.757812 C 203.679688 32.855469 209.328125 41.324219 205.507812 57.164062 C 220.820312 58.347656 229.292969 66.816406 230.933594 82.570312 C 234.480469 72.644531 240.128906 64.175781 247.882812 57.164062 C 251.914062 50.621094 253.328125 43.5625 252.117188 35.992188 C 257.722656 35.273438 262.664062 36.683594 266.949219 40.226562 C 269.066406 93.84375 269.773438 147.480469 269.066406 201.132812 C 279.339844 202.433594 289.226562 201.023438 298.730469 196.898438 C 287.949219 190.8125 287.949219 184.460938 298.730469 177.84375 C 294.847656 176.257812 291.316406 174.140625 288.136719 171.492188 C 286.027344 158.867188 285.320312 146.164062 286.015625 133.382812 C 290.253906 133.382812 294.492188 133.382812 298.730469 133.382812 C 298.035156 144.761719 298.738281 156.054688 300.847656 167.257812 C 304.378906 133.382812 307.910156 99.507812 311.441406 65.632812 C 317.074219 155.789062 319.898438 155.789062 319.914062 65.632812 C 325.566406 65.632812 331.214844 65.632812 336.863281 65.632812 C 336.863281 54.339844 336.863281 43.050781 336.863281 31.757812 C 342.515625 31.757812 348.164062 31.757812 353.8125 31.757812 C 353.8125 43.050781 353.8125 54.339844 353.8125 65.632812 C 363.699219 65.632812 373.585938 65.632812 383.472656 65.632812 C 385.359375 77.761719 382.535156 88.347656 375 97.390625 C 380.648438 98.800781 386.300781 100.214844 391.949219 101.625 C 382.5625 106.042969 372.675781 108.867188 362.289062 110.09375 C 358.742188 114.375 357.332031 119.316406 358.050781 124.914062 C 372.824219 131.066406 388.359375 133.886719 404.660156 133.382812 C 404.660156 144.675781 404.660156 155.964844 404.660156 167.257812 C 397.597656 167.257812 390.535156 167.257812 383.472656 167.257812 C 386.386719 187.90625 381.445312 206.257812 368.644531 222.304688 C 366.125 228.226562 366.832031 233.875 370.761719 239.242188 C 360.789062 246.636719 356.550781 256.515625 358.050781 268.882812 C 380.824219 267.492188 403.421875 268.90625 425.847656 273.117188 C 418.273438 276.574219 411.210938 280.808594 404.660156 285.820312 C 408.597656 296.410156 414.953125 299.230469 423.730469 294.289062 C 428.679688 298.5625 433.621094 302.796875 438.558594 306.992188 C 439.96875 306.285156 441.386719 305.582031 442.796875 304.875 C 430.21875 295.652344 431.632812 290.714844 447.035156 290.054688 C 446.867188 297.925781 450.398438 303.570312 457.628906 306.992188 C 464.105469 301.789062 469.050781 295.4375 472.457031 287.9375 C 481.113281 285.226562 488.179688 287.34375 493.644531 294.289062 C 486.957031 330.589844 484.136719 367.289062 485.167969 404.382812 C 489.40625 404.382812 493.644531 404.382812 497.882812 404.382812 C 497.496094 439.910156 494.667969 475.195312 489.40625 510.242188 C 483.589844 509.578125 477.9375 510.285156 472.457031 512.359375 C 475.882812 513.664062 478.707031 515.78125 480.933594 518.710938 C 472.257812 525.125 462.367188 528.65625 451.269531 529.296875 C 448.085938 532.136719 446.667969 535.664062 447.035156 539.882812 C 438.445312 539.195312 429.96875 539.902344 421.609375 542 C 416.675781 550.433594 411.027344 558.195312 404.660156 565.289062 C 396.1875 565.289062 387.710938 565.289062 379.238281 565.289062 C 382.402344 579.0625 382.402344 593.175781 379.238281 607.632812 C 370.761719 607.632812 362.289062 607.632812 353.8125 607.632812 C 353.8125 590.695312 353.8125 573.757812 353.8125 556.820312 C 371.175781 555.257812 380.355469 545.378906 381.355469 527.179688 C 386.710938 518.257812 394.476562 514.023438 404.660156 514.476562 C 405.4375 499.320312 402.613281 485.203125 396.1875 472.132812 C 382.0625 472.132812 367.9375 472.132812 353.8125 472.132812 C 352.394531 445.667969 351.6875 418.851562 351.695312 391.679688 C 340.433594 386.625 335.488281 390.859375 336.863281 404.382812 C 331.214844 404.382812 325.566406 404.382812 319.914062 404.382812 C 319.914062 415.675781 319.914062 426.964844 319.914062 438.257812 C 315.679688 438.257812 311.441406 438.257812 307.203125 438.257812 C 307.203125 426.964844 307.203125 415.675781 307.203125 404.382812 C 294.492188 404.382812 281.78125 404.382812 269.066406 404.382812 C 269.066406 411.441406 269.066406 418.496094 269.066406 425.554688 C 256.578125 424.382812 244.574219 425.792969 233.050781 429.789062 C 226.007812 422.769531 222.476562 414.300781 222.457031 404.382812 C 213.121094 402.542969 204.648438 402.542969 197.035156 404.382812 C 189.746094 413.519531 186.214844 424.8125 186.441406 438.257812 C 182.910156 562.433594 180.792969 562.433594 180.085938 438.257812 C 180.085938 393.089844 180.085938 347.925781 180.085938 302.757812 C 183.308594 213.09375 186.132812 122.761719 188.558594 31.757812 Z M 188.558594 31.757812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(34.901962%,30.588236%,24.313726%)\",\n      fillOpacity: 1\n    },\n    d: \"M 167.371094 -2.117188 C 174.433594 -2.117188 181.496094 -2.117188 188.558594 -2.117188 C 188.558594 9.175781 188.558594 20.464844 188.558594 31.757812 C 186.132812 122.761719 183.308594 213.09375 180.085938 302.757812 C 180.789062 246.28125 180.085938 189.824219 177.964844 133.382812 C 176.554688 139.027344 175.140625 144.675781 173.730469 150.320312 C 172.839844 143.722656 170.71875 138.078125 167.371094 133.382812 C 167.371094 88.214844 167.371094 43.050781 167.371094 -2.117188 Z M 167.371094 -2.117188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(43.137255%,36.862746%,29.411766%)\",\n      fillOpacity: 1\n    },\n    d: \"M -2.117188 -2.117188 C 9.179688 -2.117188 20.480469 -2.117188 31.78125 -2.117188 C 32.011719 99.597656 27.066406 201.222656 16.949219 302.757812 C 13.699219 257.566406 10.167969 212.398438 6.355469 167.257812 C 3.464844 164.113281 0.640625 161.289062 -2.117188 158.789062 C -2.117188 105.152344 -2.117188 51.519531 -2.117188 -2.117188 Z M -2.117188 -2.117188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(49.019608%,42.352942%,34.901962%)\",\n      fillOpacity: 1\n    },\n    d: \"M 163.136719 133.382812 C 164.515625 168.039062 163.101562 201.914062 158.898438 235.007812 C 159.59375 223.628906 158.886719 212.335938 156.78125 201.132812 C 153.6875 220.277344 148.039062 238.625 139.832031 256.179688 C 138.417969 249.121094 137.003906 242.066406 135.59375 235.007812 C 130.191406 251.820312 124.539062 268.757812 118.644531 285.820312 C 105.289062 303.144531 93.28125 303.851562 82.628906 287.9375 C 78.183594 285.851562 73.945312 286.558594 69.914062 290.054688 C 65.710938 271.917969 64.296875 253.570312 65.679688 235.007812 C 58.617188 235.007812 51.554688 235.007812 44.492188 235.007812 C 44.492188 239.242188 44.492188 243.476562 44.492188 247.710938 C 40.253906 247.710938 36.015625 247.710938 31.78125 247.710938 C 32.914062 254.480469 31.503906 260.128906 27.542969 264.648438 C 26.839844 244.839844 27.546875 225.078125 29.660156 205.367188 C 32.433594 210.429688 34.550781 210.429688 36.015625 205.367188 C 28.042969 175.453125 31.574219 147.222656 46.609375 120.679688 C 51.3125 114.171875 57.667969 111.347656 65.679688 112.210938 C 58.554688 84.085938 68.441406 72.796875 95.339844 78.335938 C 98.402344 67.453125 103.347656 57.574219 110.167969 48.695312 C 120.257812 67.167969 125.203125 86.222656 125 105.859375 C 132.855469 120.988281 137.800781 137.222656 139.832031 154.554688 C 140.375 139.234375 148.144531 132.175781 163.136719 133.382812 Z M 163.136719 133.382812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(29.019609%,23.137255%,16.862746%)\",\n      fillOpacity: 1\n    },\n    d: \"M 849.578125 -2.117188 C 899.011719 -2.117188 948.445312 -2.117188 997.882812 -2.117188 C 997.882812 177.136719 997.882812 356.394531 997.882812 535.648438 C 985.632812 531.824219 972.917969 530.414062 959.746094 531.414062 C 959.746094 527.179688 959.746094 522.945312 959.746094 518.710938 C 967.566406 519.886719 973.21875 517.0625 976.695312 510.242188 C 942.679688 487.617188 927.140625 455.152344 930.085938 412.851562 C 931.429688 399.84375 930.015625 387.140625 925.847656 374.742188 C 908.707031 373.867188 893.878906 368.222656 881.355469 357.804688 C 880.101562 344.230469 877.984375 330.820312 875 317.578125 C 878.671875 304.429688 880.089844 291.019531 879.238281 277.351562 C 872.269531 278.253906 865.914062 276.84375 860.167969 273.117188 C 850.957031 250.589844 844.601562 226.597656 841.101562 201.132812 C 833.835938 187.066406 823.945312 175.773438 811.441406 167.257812 C 816.765625 156.265625 821.710938 144.972656 826.269531 133.382812 C 828.390625 99.535156 829.09375 65.660156 828.390625 31.757812 C 835.453125 31.757812 842.511719 31.757812 849.578125 31.757812 C 849.578125 20.464844 849.578125 9.175781 849.578125 -2.117188 Z M 849.578125 -2.117188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(21.960784%,19.215687%,14.901961%)\",\n      fillOpacity: 1\n    },\n    d: \"M 802.964844 167.257812 C 798.3125 171.054688 798.3125 174.585938 802.964844 177.84375 C 783.414062 180.679688 783.414062 187.738281 802.964844 199.015625 C 793.710938 207.183594 795.128906 214.949219 807.203125 222.304688 C 811.40625 240.441406 812.820312 258.789062 811.441406 277.351562 C 799.644531 287.917969 788.34375 285.800781 777.542969 271 C 764.90625 268.890625 752.195312 268.1875 739.40625 268.882812 C 746.242188 257.085938 754.007812 245.792969 762.710938 235.007812 C 763.964844 221.433594 766.085938 208.023438 769.066406 194.78125 C 757.914062 176.589844 745.203125 159.652344 730.933594 143.96875 C 699.890625 141.851562 668.816406 141.148438 637.710938 141.851562 C 671.328125 133.515625 706.636719 130.695312 743.644531 133.382812 C 743.570312 149.796875 748.511719 152.621094 758.472656 141.851562 C 762.710938 148.910156 766.949219 155.964844 771.1875 163.023438 C 772.597656 161.613281 774.011719 160.199219 775.421875 158.789062 C 782.855469 166.199219 792.039062 169.023438 802.964844 167.257812 Z M 802.964844 167.257812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(15.294118%,13.333334%,10.196079%)\",\n      fillOpacity: 1\n    },\n    d: \"M 637.710938 141.851562 C 668.816406 141.148438 699.890625 141.851562 730.933594 143.96875 C 745.203125 159.652344 757.914062 176.589844 769.066406 194.78125 C 766.085938 208.023438 763.964844 221.433594 762.710938 235.007812 C 754.007812 245.792969 746.242188 257.085938 739.40625 268.882812 C 706.972656 271.296875 674.488281 272.710938 641.949219 273.117188 C 628.921875 265.0625 617.621094 254.476562 608.050781 241.359375 C 608.289062 225.71875 608.996094 209.488281 610.167969 192.664062 C 622.292969 181.082031 630.0625 166.964844 633.472656 150.320312 C 634.886719 147.496094 636.300781 144.675781 637.710938 141.851562 Z M 637.710938 141.851562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(22.352941%,19.607843%,13.725491%)\",\n      fillOpacity: 1\n    },\n    d: \"M 578.390625 -2.117188 C 579.800781 -2.117188 581.214844 -2.117188 582.628906 -2.117188 C 585.578125 48.875 582.75 99.6875 574.152344 150.320312 C 574.6875 171.289062 579.632812 172.699219 588.984375 154.554688 C 590.394531 160.199219 591.808594 165.847656 593.21875 171.492188 C 598.164062 166.550781 603.105469 161.613281 608.050781 156.671875 C 613.320312 154.742188 616.851562 156.859375 618.644531 163.023438 C 623.046875 157.898438 627.992188 153.664062 633.472656 150.320312 C 630.0625 166.964844 622.292969 181.082031 610.167969 192.664062 C 608.996094 209.488281 608.289062 225.71875 608.050781 241.359375 C 617.621094 254.476562 628.921875 265.0625 641.949219 273.117188 C 641.949219 274.527344 641.949219 275.941406 641.949219 277.351562 C 630.648438 277.351562 619.351562 277.351562 608.050781 277.351562 C 595.269531 271.445312 581.851562 265.800781 567.796875 260.414062 C 562.496094 195.460938 561.789062 130.535156 565.679688 65.632812 C 569.914062 65.632812 574.152344 65.632812 578.390625 65.632812 C 578.390625 43.050781 578.390625 20.464844 578.390625 -2.117188 Z M 578.390625 -2.117188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(41.176471%,35.294119%,28.235295%)\",\n      fillOpacity: 1\n    },\n    d: \"M 163.136719 133.382812 C 164.546875 133.382812 165.960938 133.382812 167.371094 133.382812 C 170.71875 138.078125 172.839844 143.722656 173.730469 150.320312 C 175.140625 144.675781 176.554688 139.027344 177.964844 133.382812 C 180.085938 189.824219 180.789062 246.28125 180.085938 302.757812 C 180.085938 347.925781 180.085938 393.089844 180.085938 438.257812 C 178.671875 438.257812 177.257812 438.257812 175.847656 438.257812 C 176.554688 381.78125 175.847656 325.324219 173.730469 268.882812 C 170.410156 291.773438 166.171875 314.355469 161.015625 336.632812 C 158.898438 302.785156 158.191406 268.910156 158.898438 235.007812 C 163.101562 201.914062 164.515625 168.039062 163.136719 133.382812 Z M 163.136719 133.382812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(52.549022%,41.960785%,31.764707%)\",\n      fillOpacity: 1\n    },\n    d: \"M 769.066406 281.585938 C 769.066406 290.054688 769.066406 298.523438 769.066406 306.992188 C 699.859375 306.992188 630.648438 306.992188 561.441406 306.992188 C 557.367188 299.519531 555.953125 291.050781 557.203125 281.585938 C 627.828125 281.585938 698.445312 281.585938 769.066406 281.585938 Z M 769.066406 281.585938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(29.019609%,21.176471%,13.333334%)\",\n      fillOpacity: 1\n    },\n    d: \"M 769.066406 281.585938 C 772.101562 290.292969 774.929688 299.46875 777.542969 309.109375 C 789.09375 309.878906 800.394531 311.996094 811.441406 315.460938 C 805.792969 326.753906 805.792969 338.042969 811.441406 349.335938 C 777.660156 353.5625 743.761719 354.972656 709.746094 353.570312 C 709.746094 352.160156 709.746094 350.746094 709.746094 349.335938 C 740.816406 349.335938 771.894531 349.335938 802.964844 349.335938 C 802.964844 338.042969 802.964844 326.753906 802.964844 315.460938 C 762.003906 315.460938 721.046875 315.460938 680.085938 315.460938 C 643.359375 315.460938 606.640625 315.460938 569.914062 315.460938 C 567.089844 312.636719 564.265625 309.816406 561.441406 306.992188 C 630.648438 306.992188 699.859375 306.992188 769.066406 306.992188 C 769.066406 298.523438 769.066406 290.054688 769.066406 281.585938 Z M 769.066406 281.585938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(57.647061%,48.627451%,39.215687%)\",\n      fillOpacity: 1\n    },\n    d: \"M 569.914062 315.460938 C 606.640625 315.460938 643.359375 315.460938 680.085938 315.460938 C 743.296875 326.671875 741.886719 335.847656 675.847656 342.984375 C 638.378906 346.472656 601.652344 345.765625 565.679688 340.867188 C 558.5625 330.230469 559.980469 321.761719 569.914062 315.460938 Z M 569.914062 315.460938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(52.156866%,44.705883%,35.686275%)\",\n      fillOpacity: 1\n    },\n    d: \"M 680.085938 315.460938 C 721.046875 315.460938 762.003906 315.460938 802.964844 315.460938 C 802.964844 326.753906 802.964844 338.042969 802.964844 349.335938 C 771.894531 349.335938 740.816406 349.335938 709.746094 349.335938 C 657.410156 350.742188 605.148438 349.332031 552.964844 345.101562 C 556.460938 341.351562 560.699219 339.941406 565.679688 340.867188 C 601.652344 345.765625 638.378906 346.472656 675.847656 342.984375 C 741.886719 335.847656 743.296875 326.671875 680.085938 315.460938 Z M 680.085938 315.460938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(23.137255%,19.607843%,13.725491%)\",\n      fillOpacity: 1\n    },\n    d: \"M 802.964844 167.257812 C 805.792969 167.257812 808.613281 167.257812 811.441406 167.257812 C 823.945312 175.773438 833.835938 187.066406 841.101562 201.132812 C 844.601562 226.597656 850.957031 250.589844 860.167969 273.117188 C 865.914062 276.84375 872.269531 278.253906 879.238281 277.351562 C 880.089844 291.019531 878.671875 304.429688 875 317.578125 C 877.984375 330.820312 880.101562 344.230469 881.355469 357.804688 C 893.878906 368.222656 908.707031 373.867188 925.847656 374.742188 C 930.015625 387.140625 931.429688 399.84375 930.085938 412.851562 C 918.617188 401.722656 906.613281 401.722656 894.066406 412.851562 C 890.796875 412.238281 887.96875 410.828125 885.59375 408.617188 C 858.347656 435.277344 833.632812 433.867188 811.441406 404.382812 C 814.613281 400.015625 817.4375 395.078125 819.914062 389.5625 C 828.390625 388.152344 836.863281 386.738281 845.339844 385.328125 C 833.527344 375.277344 834.941406 369.632812 849.578125 368.390625 C 844.320312 356.058594 837.261719 344.769531 828.390625 334.515625 C 830.757812 331.445312 832.167969 327.917969 832.628906 323.929688 C 830.492188 309.683594 827.664062 295.566406 824.152344 281.585938 C 820.265625 278.929688 816.03125 277.519531 811.441406 277.351562 C 812.820312 258.789062 811.40625 240.441406 807.203125 222.304688 C 795.128906 214.949219 793.710938 207.183594 802.964844 199.015625 C 783.414062 187.738281 783.414062 180.679688 802.964844 177.84375 C 798.3125 174.585938 798.3125 171.054688 802.964844 167.257812 Z M 802.964844 167.257812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(23.137255%,17.647059%,10.588235%)\",\n      fillOpacity: 1\n    },\n    d: \"M 608.050781 277.351562 C 619.351562 277.351562 630.648438 277.351562 641.949219 277.351562 C 685.089844 275.964844 727.460938 277.378906 769.066406 281.585938 C 698.445312 281.585938 627.828125 281.585938 557.203125 281.585938 C 555.953125 291.050781 557.367188 299.519531 561.441406 306.992188 C 564.265625 309.816406 567.089844 312.636719 569.914062 315.460938 C 559.980469 321.761719 558.5625 330.230469 565.679688 340.867188 C 560.699219 339.941406 556.460938 341.351562 552.964844 345.101562 C 605.148438 349.332031 657.410156 350.742188 709.746094 349.335938 C 709.746094 350.746094 709.746094 352.160156 709.746094 353.570312 C 658.878906 352.867188 608.03125 353.570312 557.203125 355.6875 C 637.027344 356.398438 716.117188 358.515625 794.492188 362.039062 C 715.382812 361.332031 636.289062 362.039062 557.203125 364.15625 C 626.285156 370.5 695.492188 374.027344 764.832031 374.742188 C 763.382812 378.292969 760.558594 379.703125 756.355469 378.976562 C 684.320312 378.976562 612.289062 378.976562 540.253906 378.976562 C 535.554688 375.632812 529.90625 373.515625 523.304688 372.625 C 531.183594 364.234375 541.066406 360 552.964844 359.921875 C 548.949219 357.878906 544.710938 357.171875 540.253906 357.804688 C 540.253906 346.511719 540.253906 335.222656 540.253906 323.929688 C 544.492188 323.929688 548.730469 323.929688 552.964844 323.929688 C 545.449219 312.84375 541.210938 300.140625 540.253906 285.820312 C 562.105469 278.777344 584.703125 275.953125 608.050781 277.351562 Z M 608.050781 277.351562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(45.09804%,38.431373%,31.37255%)\",\n      fillOpacity: 1\n    },\n    d: \"M 794.492188 362.039062 C 803.171875 362.910156 804.589844 366.4375 798.730469 372.625 C 787.515625 374.730469 776.214844 375.4375 764.832031 374.742188 C 695.492188 374.027344 626.285156 370.5 557.203125 364.15625 C 636.289062 362.039062 715.382812 361.332031 794.492188 362.039062 Z M 794.492188 362.039062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(49.803922%,41.176471%,30.588236%)\",\n      fillOpacity: 1\n    },\n    d: \"M 540.253906 378.976562 C 612.289062 378.976562 684.320312 378.976562 756.355469 378.976562 C 757.804688 382.527344 760.628906 383.9375 764.832031 383.210938 C 767.835938 387.039062 772.070312 388.449219 777.542969 387.445312 C 777.542969 391.679688 777.542969 395.914062 777.542969 400.148438 C 694.207031 400.148438 610.878906 400.148438 527.542969 400.148438 C 527.542969 394.503906 527.542969 388.855469 527.542969 383.210938 C 530.546875 379.382812 534.785156 377.972656 540.253906 378.976562 Z M 540.253906 378.976562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(47.058824%,40.784314%,32.941177%)\",\n      fillOpacity: 1\n    },\n    d: \"M 158.898438 235.007812 C 158.191406 268.910156 158.898438 302.785156 161.015625 336.632812 C 166.171875 314.355469 170.410156 291.773438 173.730469 268.882812 C 175.847656 325.324219 176.554688 381.78125 175.847656 438.257812 C 175.378906 483.503906 176.792969 528.671875 180.085938 573.757812 C 176.515625 563.921875 172.277344 554.039062 167.371094 544.117188 C 171.640625 528.558594 170.933594 513.03125 165.253906 497.539062 C 163.878906 506.300781 160.347656 507.710938 154.660156 501.773438 C 151.589844 518.847656 148.058594 535.785156 144.066406 552.585938 C 141.242188 507.417969 141.242188 462.253906 144.066406 417.085938 C 151.871094 356.082031 156.8125 295.390625 158.898438 235.007812 Z M 158.898438 235.007812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(39.607844%,32.941177%,24.705882%)\",\n      fillOpacity: 1\n    },\n    d: \"M 527.542969 383.210938 C 527.542969 388.855469 527.542969 394.503906 527.542969 400.148438 C 610.878906 400.148438 694.207031 400.148438 777.542969 400.148438 C 777.542969 395.914062 777.542969 391.679688 777.542969 387.445312 C 772.070312 388.449219 767.835938 387.039062 764.832031 383.210938 C 774.714844 383.210938 784.605469 383.210938 794.492188 383.210938 C 793.082031 391.679688 791.664062 400.148438 790.253906 408.617188 C 781.730469 406.441406 773.253906 405.734375 764.832031 406.5 C 767.042969 408.875 768.453125 411.699219 769.066406 414.96875 C 764.644531 419.941406 760.40625 424.882812 756.355469 429.789062 C 684.378906 426.332031 612.34375 424.917969 540.253906 425.554688 C 536.222656 419.546875 534.8125 412.492188 536.015625 404.382812 C 531.78125 404.382812 527.542969 404.382812 523.304688 404.382812 C 522.101562 396.273438 523.511719 389.21875 527.542969 383.210938 Z M 527.542969 383.210938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(54.11765%,47.058824%,39.215687%)\",\n      fillOpacity: 1\n    },\n    d: \"M 133.472656 573.757812 C 126.015625 560.203125 122.484375 544.679688 122.882812 527.179688 C 120.765625 553.960938 120.058594 580.777344 120.761719 607.632812 C 109.464844 607.632812 98.164062 607.632812 86.863281 607.632812 C 80.515625 647.066406 74.160156 686.585938 67.796875 726.195312 C 66.042969 724.261719 63.921875 722.847656 61.441406 721.960938 C 56.527344 738.726562 55.820312 755.664062 59.320312 772.773438 C 64.378906 763.785156 67.203125 753.902344 67.796875 743.132812 C 74.6875 753.367188 81.042969 763.953125 86.863281 774.890625 C 82.628906 776.300781 78.390625 777.714844 74.152344 779.125 C 85.375 786.835938 92.4375 797.421875 95.339844 810.882812 C 101.296875 817.027344 107.652344 822.671875 114.40625 827.820312 C 118.019531 820.9375 122.257812 819.53125 127.117188 823.585938 C 128.65625 836.476562 130.773438 849.179688 133.472656 861.695312 C 129.238281 861.695312 125 861.695312 120.761719 861.695312 C 120.023438 851.699219 118.613281 841.820312 116.527344 832.054688 C 112.289062 832.054688 108.050781 832.054688 103.8125 832.054688 C 102.886719 848.925781 102.886719 865.160156 103.8125 880.75 C 99.9375 891.746094 92.878906 893.15625 82.628906 884.984375 C 87.691406 882.214844 87.691406 880.097656 82.628906 878.632812 C 77.390625 881.792969 71.738281 883.203125 65.679688 882.867188 C 65.679688 894.160156 65.679688 905.449219 65.679688 916.742188 C 61.441406 916.742188 57.203125 916.742188 52.964844 916.742188 C 55.386719 848.429688 52.5625 780.679688 44.492188 713.492188 C 39.019531 712.488281 34.785156 713.898438 31.78125 717.726562 C 27.882812 732.160156 22.234375 746.277344 14.832031 760.070312 C 15.59375 764.535156 17.003906 768.769531 19.066406 772.773438 C 12.53125 808.6875 5.46875 843.972656 -2.117188 878.632812 C -2.117188 761.480469 -2.117188 644.332031 -2.117188 527.179688 C 3.910156 535.839844 12.382812 540.074219 23.304688 539.882812 C 24.367188 524.351562 24.367188 509.53125 23.304688 495.421875 C 25.546875 488.820312 28.375 482.46875 31.78125 476.367188 C 29.390625 470.273438 27.980469 463.921875 27.542969 457.3125 C 36.628906 441.4375 40.867188 423.792969 40.253906 404.382812 C 45.902344 404.382812 51.554688 404.382812 57.203125 404.382812 C 57.203125 415.675781 57.203125 426.964844 57.203125 438.257812 C 68.261719 436.859375 75.324219 430.507812 78.390625 419.203125 C 82.410156 416.589844 85.941406 417.296875 88.984375 421.320312 C 96.121094 451.03125 101.769531 480.671875 105.933594 510.242188 C 108.757812 507.417969 111.582031 504.597656 114.40625 501.773438 C 118.339844 466.0625 123.988281 430.777344 131.355469 395.914062 C 136.035156 413.785156 138.152344 432.128906 137.710938 450.960938 C 135.203125 491.859375 133.789062 532.792969 133.472656 573.757812 Z M 133.472656 573.757812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(16.862746%,14.901961%,11.764706%)\",\n      fillOpacity: 1\n    },\n    d: \"M 404.660156 565.289062 C 404.660156 569.523438 404.660156 573.757812 404.660156 577.992188 C 404.660156 580.816406 404.660156 583.636719 404.660156 586.460938 C 395.796875 586.71875 389.441406 590.953125 385.59375 599.164062 C 378.992188 618.4375 370.515625 636.785156 360.167969 654.210938 C 355.933594 657.035156 351.695312 659.855469 347.457031 662.679688 C 349.992188 673.949219 349.285156 685.234375 345.339844 696.554688 C 342.855469 697.441406 340.738281 698.855469 338.984375 700.789062 C 336.867188 681.078125 336.160156 661.320312 336.863281 641.507812 C 331.214844 641.507812 325.566406 641.507812 319.914062 641.507812 C 319.914062 634.449219 319.914062 627.394531 319.914062 620.335938 C 307.203125 620.335938 294.492188 620.335938 281.78125 620.335938 C 281.78125 627.394531 281.78125 634.449219 281.78125 641.507812 C 277.542969 641.507812 273.304688 641.507812 269.066406 641.507812 C 269.066406 652.800781 269.066406 664.089844 269.066406 675.382812 C 263.417969 675.382812 257.769531 675.382812 252.117188 675.382812 C 251.4375 661.054688 252.851562 646.941406 256.355469 633.039062 C 253.132812 624.835938 248.898438 617.074219 243.644531 609.75 C 271.894531 608.339844 300.140625 606.925781 328.390625 605.515625 C 323.410156 589.886719 315.644531 587.769531 305.085938 599.164062 C 294.679688 591.453125 282.671875 588.628906 269.066406 590.695312 C 269.066406 573.757812 269.066406 556.820312 269.066406 539.882812 C 252.117188 539.882812 235.167969 539.882812 218.21875 539.882812 C 218.917969 525.699219 218.214844 511.585938 216.101562 497.539062 C 211.816406 493.996094 206.875 492.585938 201.269531 493.304688 C 202.496094 517.632812 200.375 541.628906 194.914062 565.289062 C 189.546875 511.695312 190.253906 458.058594 197.035156 404.382812 C 204.648438 402.542969 213.121094 402.542969 222.457031 404.382812 C 222.476562 414.300781 226.007812 422.769531 233.050781 429.789062 C 244.574219 425.792969 256.578125 424.382812 269.066406 425.554688 C 269.066406 418.496094 269.066406 411.441406 269.066406 404.382812 C 281.78125 404.382812 294.492188 404.382812 307.203125 404.382812 C 307.203125 415.675781 307.203125 426.964844 307.203125 438.257812 C 311.441406 438.257812 315.679688 438.257812 319.914062 438.257812 C 319.914062 426.964844 319.914062 415.675781 319.914062 404.382812 C 325.566406 404.382812 331.214844 404.382812 336.863281 404.382812 C 335.488281 390.859375 340.433594 386.625 351.695312 391.679688 C 351.6875 418.851562 352.394531 445.667969 353.8125 472.132812 C 367.9375 472.132812 382.0625 472.132812 396.1875 472.132812 C 402.613281 485.203125 405.4375 499.320312 404.660156 514.476562 C 394.476562 514.023438 386.710938 518.257812 381.355469 527.179688 C 380.355469 545.378906 371.175781 555.257812 353.8125 556.820312 C 353.8125 573.757812 353.8125 590.695312 353.8125 607.632812 C 362.289062 607.632812 370.761719 607.632812 379.238281 607.632812 C 382.402344 593.175781 382.402344 579.0625 379.238281 565.289062 C 387.710938 565.289062 396.1875 565.289062 404.660156 565.289062 Z M 404.660156 565.289062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(34.509805%,29.019609%,21.960784%)\",\n      fillOpacity: 1\n    },\n    d: \"M 786.015625 472.132812 C 789.972656 476.65625 791.390625 482.300781 790.253906 489.070312 C 774.714844 489.070312 759.183594 489.070312 743.644531 489.070312 C 682.910156 489.070312 622.171875 489.070312 561.441406 489.070312 C 587.621094 486.246094 614.457031 483.425781 641.949219 480.601562 C 608.140625 475.667969 574.242188 474.960938 540.253906 478.484375 C 537.066406 481.324219 535.652344 484.851562 536.015625 489.070312 C 529.148438 487.855469 524.910156 483.621094 523.304688 476.367188 C 531.453125 472.945312 539.929688 470.828125 548.730469 470.015625 C 627.8125 469.503906 706.910156 470.210938 786.015625 472.132812 Z M 786.015625 472.132812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(45.09804%,38.431373%,30.19608%)\",\n      fillOpacity: 1\n    },\n    d: \"M 561.441406 489.070312 C 552.964844 489.070312 544.492188 489.070312 536.015625 489.070312 C 535.652344 484.851562 537.066406 481.324219 540.253906 478.484375 C 574.242188 474.960938 608.140625 475.667969 641.949219 480.601562 C 614.457031 483.425781 587.621094 486.246094 561.441406 489.070312 Z M 561.441406 489.070312 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(18.431373%,15.686275%,11.764706%)\",\n      fillOpacity: 1\n    },\n    d: \"M 197.035156 404.382812 C 190.253906 458.058594 189.546875 511.695312 194.914062 565.289062 C 200.375 541.628906 202.496094 517.632812 201.269531 493.304688 C 206.875 492.585938 211.816406 493.996094 216.101562 497.539062 C 218.214844 511.585938 218.917969 525.699219 218.21875 539.882812 C 235.167969 539.882812 252.117188 539.882812 269.066406 539.882812 C 269.066406 556.820312 269.066406 573.757812 269.066406 590.695312 C 282.671875 588.628906 294.679688 591.453125 305.085938 599.164062 C 315.644531 587.769531 323.410156 589.886719 328.390625 605.515625 C 300.140625 606.925781 271.894531 608.339844 243.644531 609.75 C 248.898438 617.074219 253.132812 624.835938 256.355469 633.039062 C 252.851562 646.941406 251.4375 661.054688 252.117188 675.382812 C 257.769531 675.382812 263.417969 675.382812 269.066406 675.382812 C 269.066406 664.089844 269.066406 652.800781 269.066406 641.507812 C 273.304688 641.507812 277.542969 641.507812 281.78125 641.507812 C 281.78125 634.449219 281.78125 627.394531 281.78125 620.335938 C 294.492188 620.335938 307.203125 620.335938 319.914062 620.335938 C 319.914062 627.394531 319.914062 634.449219 319.914062 641.507812 C 325.566406 641.507812 331.214844 641.507812 336.863281 641.507812 C 336.160156 661.320312 336.867188 681.078125 338.984375 700.789062 C 340.738281 698.855469 342.855469 697.441406 345.339844 696.554688 C 349.285156 685.234375 349.992188 673.949219 347.457031 662.679688 C 351.695312 659.855469 355.933594 657.035156 360.167969 654.210938 C 370.515625 636.785156 378.992188 618.4375 385.59375 599.164062 C 389.441406 590.953125 395.796875 586.71875 404.660156 586.460938 C 404.660156 590.695312 404.660156 594.929688 404.660156 599.164062 C 404.660156 601.988281 404.660156 604.808594 404.660156 607.632812 C 386.144531 614.941406 378.378906 629.054688 381.355469 649.976562 C 375.351562 652.425781 371.820312 656.660156 370.761719 662.679688 C 360.957031 665.554688 359.546875 671.199219 366.527344 679.617188 C 363.046875 689.285156 360.222656 699.164062 358.050781 709.257812 C 361.566406 719.117188 365.097656 729 368.644531 738.898438 C 374.390625 742.625 380.746094 744.039062 387.710938 743.132812 C 387.710938 745.957031 389.125 747.367188 391.949219 747.367188 C 391.730469 757.542969 393.140625 767.421875 396.1875 777.007812 C 402.972656 803.308594 405.796875 830.125 404.660156 857.460938 C 411.722656 857.460938 418.785156 857.460938 425.847656 857.460938 C 425.511719 863.515625 426.921875 869.164062 430.085938 874.398438 C 425.847656 875.808594 421.609375 877.222656 417.371094 878.632812 C 402.222656 871.984375 388.101562 863.515625 375 853.226562 C 368.34375 856.652344 361.28125 858.066406 353.8125 857.460938 C 353.8125 864.519531 353.8125 871.574219 353.8125 878.632812 C 336.765625 877.625 321.226562 873.390625 307.203125 865.929688 C 307.203125 861.695312 307.203125 857.460938 307.203125 853.226562 C 315.679688 853.226562 324.152344 853.226562 332.628906 853.226562 C 331.992188 857.679688 332.699219 861.914062 334.746094 865.929688 C 336.835938 859.011719 337.542969 851.953125 336.863281 844.757812 C 311.886719 842.410156 287.875 845.230469 264.832031 853.226562 C 262.347656 852.339844 260.230469 850.925781 258.472656 848.992188 C 254.957031 798.257812 252.839844 798.257812 252.117188 848.992188 C 245.152344 849.898438 238.796875 848.484375 233.050781 844.757812 C 231.160156 832.71875 229.042969 820.722656 226.695312 808.765625 C 226.816406 779.8125 228.230469 750.878906 230.933594 721.960938 C 224.664062 712.371094 219.015625 702.488281 213.984375 692.320312 C 210.671875 697.523438 208.554688 703.167969 207.628906 709.257812 C 203 698.484375 200.175781 687.191406 199.152344 675.382812 C 197.183594 677.898438 196.480469 680.722656 197.035156 683.851562 C 189.742188 647.980469 184.09375 611.285156 180.085938 573.757812 C 176.792969 528.671875 175.378906 483.503906 175.847656 438.257812 C 177.257812 438.257812 178.671875 438.257812 180.085938 438.257812 C 180.792969 562.433594 182.910156 562.433594 186.441406 438.257812 C 186.214844 424.8125 189.746094 413.519531 197.035156 404.382812 Z M 197.035156 404.382812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(18.82353%,15.294118%,9.411765%)\",\n      fillOpacity: 1\n    },\n    d: \"M 739.40625 268.882812 C 752.195312 268.1875 764.90625 268.890625 777.542969 271 C 788.34375 285.800781 799.644531 287.917969 811.441406 277.351562 C 816.03125 277.519531 820.265625 278.929688 824.152344 281.585938 C 827.664062 295.566406 830.492188 309.683594 832.628906 323.929688 C 832.167969 327.917969 830.757812 331.445312 828.390625 334.515625 C 837.261719 344.769531 844.320312 356.058594 849.578125 368.390625 C 834.941406 369.632812 833.527344 375.277344 845.339844 385.328125 C 836.863281 386.738281 828.390625 388.152344 819.914062 389.5625 C 817.4375 395.078125 814.613281 400.015625 811.441406 404.382812 C 805.179688 403.273438 799.53125 404.683594 794.492188 408.617188 C 798.605469 414.808594 797.195312 420.453125 790.253906 425.554688 C 791.140625 428.035156 792.554688 430.152344 794.492188 431.90625 C 786.679688 443.78125 783.851562 457.183594 786.015625 472.132812 C 706.910156 470.210938 627.8125 469.503906 548.730469 470.015625 C 539.929688 470.828125 531.453125 472.945312 523.304688 476.367188 C 524.910156 483.621094 529.148438 487.855469 536.015625 489.070312 C 544.492188 489.070312 552.964844 489.070312 561.441406 489.070312 C 622.171875 489.070312 682.910156 489.070312 743.644531 489.070312 C 769.945312 493.554688 796.78125 494.257812 824.152344 491.1875 C 826.269531 493.304688 828.390625 495.421875 830.507812 497.539062 C 832.617188 511.585938 833.328125 525.699219 832.628906 539.882812 C 793.082031 539.882812 753.53125 539.882812 713.984375 539.882812 C 749.957031 536.367188 786.683594 534.25 824.152344 533.53125 C 828.113281 523.449219 829.527344 512.863281 828.390625 501.773438 C 732.152344 503.140625 636.105469 501.726562 540.253906 497.539062 C 535.636719 501.3125 535.636719 505.546875 540.253906 510.242188 C 546.394531 513.085938 552.042969 515.910156 557.203125 518.710938 C 544.492188 518.710938 531.78125 518.710938 519.066406 518.710938 C 514.695312 504.9375 509.046875 491.53125 502.117188 478.484375 C 502.828125 476.367188 503.53125 474.25 504.238281 472.132812 C 507.0625 477.777344 509.886719 477.777344 512.710938 472.132812 C 516.488281 455.738281 514.367188 440.214844 506.355469 425.554688 C 511.152344 417.128906 516.800781 410.074219 523.304688 404.382812 C 527.542969 404.382812 531.78125 404.382812 536.015625 404.382812 C 534.8125 412.492188 536.222656 419.546875 540.253906 425.554688 C 536.449219 428.339844 532.210938 431.160156 527.542969 434.023438 C 528.066406 436.59375 529.480469 438.003906 531.78125 438.257812 C 533.191406 438.257812 534.605469 438.257812 536.015625 438.257812 C 533.011719 442.085938 528.777344 443.496094 523.304688 442.492188 C 523.304688 448.136719 523.304688 453.785156 523.304688 459.429688 C 536.015625 459.429688 548.730469 459.429688 561.441406 459.429688 C 632.050781 461.257812 702.671875 462.667969 773.304688 463.664062 C 773.304688 459.429688 773.304688 455.195312 773.304688 450.960938 C 774.308594 445.496094 772.898438 441.261719 769.066406 438.257812 C 769.066406 436.847656 769.066406 435.433594 769.066406 434.023438 C 766.0625 430.195312 761.828125 428.785156 756.355469 429.789062 C 760.40625 424.882812 764.644531 419.941406 769.066406 414.96875 C 768.453125 411.699219 767.042969 408.875 764.832031 406.5 C 773.253906 405.734375 781.730469 406.441406 790.253906 408.617188 C 791.664062 400.148438 793.082031 391.679688 794.492188 383.210938 C 784.605469 383.210938 774.714844 383.210938 764.832031 383.210938 C 760.628906 383.9375 757.804688 382.527344 756.355469 378.976562 C 760.558594 379.703125 763.382812 378.292969 764.832031 374.742188 C 776.214844 375.4375 787.515625 374.730469 798.730469 372.625 C 804.589844 366.4375 803.171875 362.910156 794.492188 362.039062 C 716.117188 358.515625 637.027344 356.398438 557.203125 355.6875 C 608.03125 353.570312 658.878906 352.867188 709.746094 353.570312 C 743.761719 354.972656 777.660156 353.5625 811.441406 349.335938 C 805.792969 338.042969 805.792969 326.753906 811.441406 315.460938 C 800.394531 311.996094 789.09375 309.878906 777.542969 309.109375 C 774.929688 299.46875 772.101562 290.292969 769.066406 281.585938 C 727.460938 277.378906 685.089844 275.964844 641.949219 277.351562 C 641.949219 275.941406 641.949219 274.527344 641.949219 273.117188 C 674.488281 272.710938 706.972656 271.296875 739.40625 268.882812 Z M 739.40625 268.882812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(43.137255%,37.254903%,30.588236%)\",\n      fillOpacity: 1\n    },\n    d: \"M 773.304688 450.960938 C 773.304688 455.195312 773.304688 459.429688 773.304688 463.664062 C 702.671875 462.667969 632.050781 461.257812 561.441406 459.429688 C 550.730469 456.609375 539.433594 453.789062 527.542969 450.960938 C 543.785156 449.550781 560.03125 448.136719 576.269531 446.726562 C 641.910156 450.035156 707.589844 451.445312 773.304688 450.960938 Z M 773.304688 450.960938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(29.803923%,23.921569%,16.862746%)\",\n      fillOpacity: 1\n    },\n    d: \"M 536.015625 438.257812 C 614.394531 442.679688 692.078125 442.679688 769.066406 438.257812 C 772.898438 441.261719 774.308594 445.496094 773.304688 450.960938 C 707.589844 451.445312 641.910156 450.035156 576.269531 446.726562 C 560.03125 448.136719 543.785156 449.550781 527.542969 450.960938 C 539.433594 453.789062 550.730469 456.609375 561.441406 459.429688 C 548.730469 459.429688 536.015625 459.429688 523.304688 459.429688 C 523.304688 453.785156 523.304688 448.136719 523.304688 442.492188 C 528.777344 443.496094 533.011719 442.085938 536.015625 438.257812 Z M 536.015625 438.257812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(42.745098%,36.470589%,29.411766%)\",\n      fillOpacity: 1\n    },\n    d: \"M 531.78125 438.257812 C 610.140625 434.035156 689.234375 432.625 769.066406 434.023438 C 769.066406 435.433594 769.066406 436.847656 769.066406 438.257812 C 692.078125 442.679688 614.394531 442.679688 536.015625 438.257812 C 534.605469 438.257812 533.191406 438.257812 531.78125 438.257812 Z M 531.78125 438.257812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(25.098041%,18.431373%,10.980392%)\",\n      fillOpacity: 1\n    },\n    d: \"M 540.253906 425.554688 C 612.34375 424.917969 684.378906 426.332031 756.355469 429.789062 C 761.828125 428.785156 766.0625 430.195312 769.066406 434.023438 C 689.234375 432.625 610.140625 434.035156 531.78125 438.257812 C 529.480469 438.003906 528.066406 436.59375 527.542969 434.023438 C 532.210938 431.160156 536.449219 428.339844 540.253906 425.554688 Z M 540.253906 425.554688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(40.784314%,33.725491%,25.098041%)\",\n      fillOpacity: 1\n    },\n    d: \"M 713.984375 539.882812 C 705.867188 538.679688 698.808594 540.089844 692.796875 544.117188 C 684.867188 545.636719 678.511719 549.871094 673.730469 556.820312 C 675.796875 541.027344 670.148438 539.613281 656.78125 552.585938 C 655.027344 550.652344 652.90625 549.238281 650.421875 548.351562 C 643.359375 552.585938 637.710938 558.230469 633.472656 565.289062 C 630.097656 552.96875 634.335938 543.089844 646.1875 535.648438 C 633.699219 532.171875 620.988281 530.054688 608.050781 529.296875 C 592.664062 519.800781 575.714844 516.269531 557.203125 518.710938 C 552.042969 515.910156 546.394531 513.085938 540.253906 510.242188 C 535.636719 505.546875 535.636719 501.3125 540.253906 497.539062 C 636.105469 501.726562 732.152344 503.140625 828.390625 501.773438 C 829.527344 512.863281 828.113281 523.449219 824.152344 533.53125 C 786.683594 534.25 749.957031 536.367188 713.984375 539.882812 Z M 713.984375 539.882812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(16.078432%,14.117648%,10.196079%)\",\n      fillOpacity: 1\n    },\n    d: \"M 519.066406 518.710938 C 531.78125 518.710938 544.492188 518.710938 557.203125 518.710938 C 575.714844 516.269531 592.664062 519.800781 608.050781 529.296875 C 620.988281 530.054688 633.699219 532.171875 646.1875 535.648438 C 634.335938 543.089844 630.097656 552.96875 633.472656 565.289062 C 637.710938 558.230469 643.359375 552.585938 650.421875 548.351562 C 652.90625 549.238281 655.027344 550.652344 656.78125 552.585938 C 670.148438 539.613281 675.796875 541.027344 673.730469 556.820312 C 678.511719 549.871094 684.867188 545.636719 692.796875 544.117188 C 699.871094 545.179688 706.230469 548.003906 711.863281 552.585938 C 713.277344 551.175781 714.691406 549.761719 716.101562 548.351562 C 717.085938 553.589844 719.203125 557.824219 722.457031 561.054688 C 730.347656 599.746094 714.8125 622.332031 675.847656 628.804688 C 675.847656 631.628906 677.257812 633.039062 680.085938 633.039062 C 677.5 636.8125 676.089844 641.046875 675.847656 645.742188 C 675.847656 648.566406 675.847656 651.386719 675.847656 654.210938 C 669.746094 657.863281 664.09375 657.863281 658.898438 654.210938 C 656.070312 658.445312 653.25 662.679688 650.421875 666.914062 C 647.492188 664.691406 645.371094 661.867188 644.066406 658.445312 C 641.867188 662.746094 638.335938 665.566406 633.472656 666.914062 C 615.621094 653.335938 595.847656 643.457031 574.152344 637.273438 C 566.171875 638.867188 559.816406 643.101562 555.085938 649.976562 C 550.308594 675.414062 542.542969 676.824219 531.78125 654.210938 C 511.941406 651.171875 492.164062 648.351562 472.457031 645.742188 C 461.742188 652.359375 457.503906 662.238281 459.746094 675.382812 C 450.832031 676.648438 442.355469 675.238281 434.320312 671.148438 C 443.503906 658.578125 449.15625 644.460938 451.269531 628.804688 C 457.929688 625.378906 464.992188 623.964844 472.457031 624.570312 C 475.109375 594.574219 472.285156 566.347656 463.984375 539.882812 C 479.707031 527.238281 498.066406 520.183594 519.066406 518.710938 Z M 519.066406 518.710938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(18.431373%,15.294118%,11.372549%)\",\n      fillOpacity: 1\n    },\n    d: \"M 811.441406 404.382812 C 833.632812 433.867188 858.347656 435.277344 885.59375 408.617188 C 887.96875 410.828125 890.796875 412.238281 894.066406 412.851562 C 906.613281 401.722656 918.617188 401.722656 930.085938 412.851562 C 927.140625 455.152344 942.679688 487.617188 976.695312 510.242188 C 973.21875 517.0625 967.566406 519.886719 959.746094 518.710938 C 959.746094 522.945312 959.746094 527.179688 959.746094 531.414062 C 972.917969 530.414062 985.632812 531.824219 997.882812 535.648438 C 997.882812 546.941406 997.882812 558.230469 997.882812 569.523438 C 980.871094 570.226562 963.921875 569.519531 947.035156 567.40625 C 941.386719 564.582031 941.386719 561.761719 947.035156 558.9375 C 926.496094 551.71875 906.015625 552.425781 885.59375 561.054688 C 851 552.972656 815.691406 548.738281 779.660156 548.351562 C 769.066406 549.058594 758.472656 549.761719 747.882812 550.46875 C 744.386719 557.617188 740.148438 558.324219 735.167969 552.585938 C 730.855469 555.519531 726.617188 558.339844 722.457031 561.054688 C 719.203125 557.824219 717.085938 553.589844 716.101562 548.351562 C 714.691406 549.761719 713.277344 551.175781 711.863281 552.585938 C 706.230469 548.003906 699.871094 545.179688 692.796875 544.117188 C 698.808594 540.089844 705.867188 538.679688 713.984375 539.882812 C 753.53125 539.882812 793.082031 539.882812 832.628906 539.882812 C 833.328125 525.699219 832.617188 511.585938 830.507812 497.539062 C 828.390625 495.421875 826.269531 493.304688 824.152344 491.1875 C 796.78125 494.257812 769.945312 493.554688 743.644531 489.070312 C 759.183594 489.070312 774.714844 489.070312 790.253906 489.070312 C 791.390625 482.300781 789.972656 476.65625 786.015625 472.132812 C 783.851562 457.183594 786.679688 443.78125 794.492188 431.90625 C 792.554688 430.152344 791.140625 428.035156 790.253906 425.554688 C 797.195312 420.453125 798.605469 414.808594 794.492188 408.617188 C 799.53125 404.683594 805.179688 403.273438 811.441406 404.382812 Z M 811.441406 404.382812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(21.176471%,16.470589%,10.980392%)\",\n      fillOpacity: 1\n    },\n    d: \"M 997.882812 569.523438 C 997.882812 572.347656 997.882812 575.167969 997.882812 577.992188 C 958.335938 577.992188 918.785156 577.992188 879.238281 577.992188 C 830.164062 579.351562 781.4375 577.941406 733.050781 573.757812 C 730.941406 582.339844 731.648438 590.808594 735.167969 599.164062 C 722.53125 621.804688 702.757812 631.6875 675.847656 628.804688 C 714.8125 622.332031 730.347656 599.746094 722.457031 561.054688 C 726.617188 558.339844 730.855469 555.519531 735.167969 552.585938 C 740.148438 558.324219 744.386719 557.617188 747.882812 550.46875 C 758.472656 549.761719 769.066406 549.058594 779.660156 548.351562 C 815.691406 548.738281 851 552.972656 885.59375 561.054688 C 906.015625 552.425781 926.496094 551.71875 947.035156 558.9375 C 941.386719 561.761719 941.386719 564.582031 947.035156 567.40625 C 963.921875 569.519531 980.871094 570.226562 997.882812 569.523438 Z M 997.882812 569.523438 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(37.254903%,30.19608%,23.137255%)\",\n      fillOpacity: 1\n    },\n    d: \"M 879.238281 577.992188 C 918.785156 577.992188 958.335938 577.992188 997.882812 577.992188 C 997.882812 601.988281 997.882812 625.980469 997.882812 649.976562 C 954.957031 647.351562 912.585938 644.53125 870.761719 641.507812 C 896.1875 641.507812 921.609375 641.507812 947.035156 641.507812 C 947.035156 627.394531 947.035156 613.277344 947.035156 599.164062 C 931.433594 599.863281 915.898438 599.160156 900.421875 597.046875 C 913.085938 596.128906 924.386719 591.894531 934.320312 584.34375 C 915.171875 583.601562 896.808594 581.484375 879.238281 577.992188 Z M 879.238281 577.992188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(23.137255%,17.647059%,11.372549%)\",\n      fillOpacity: 1\n    },\n    d: \"M 447.035156 539.882812 C 452.683594 539.882812 458.335938 539.882812 463.984375 539.882812 C 472.285156 566.347656 475.109375 594.574219 472.457031 624.570312 C 464.992188 623.964844 457.929688 625.378906 451.269531 628.804688 C 449.15625 644.460938 443.503906 658.578125 434.320312 671.148438 C 442.355469 675.238281 450.832031 676.648438 459.746094 675.382812 C 457.503906 662.238281 461.742188 652.359375 472.457031 645.742188 C 492.164062 648.351562 511.941406 651.171875 531.78125 654.210938 C 542.542969 676.824219 550.308594 675.414062 555.085938 649.976562 C 559.816406 643.101562 566.171875 638.867188 574.152344 637.273438 C 595.847656 643.457031 615.621094 653.335938 633.472656 666.914062 C 638.335938 665.566406 641.867188 662.746094 644.066406 658.445312 C 645.371094 661.867188 647.492188 664.691406 650.421875 666.914062 C 653.25 662.679688 656.070312 658.445312 658.898438 654.210938 C 664.09375 657.863281 669.746094 657.863281 675.847656 654.210938 C 674.128906 660.203125 676.953125 665.140625 684.320312 669.03125 C 743.964844 669.703125 800.460938 671.820312 853.8125 675.382812 C 810.03125 675.382812 766.242188 675.382812 722.457031 675.382812 C 721.445312 689.375 717.207031 702.078125 709.746094 713.492188 C 694.691406 709.1875 680.566406 702.835938 667.371094 694.4375 C 660.542969 691.390625 654.1875 692.089844 648.304688 696.554688 C 636.828125 684.015625 623.410156 679.78125 608.050781 683.851562 C 606.386719 676.296875 603.5625 669.242188 599.578125 662.679688 C 590.988281 655.957031 581.097656 653.839844 569.914062 656.328125 C 563.261719 668.421875 554.789062 679.007812 544.492188 688.085938 C 540.738281 684.59375 539.328125 680.359375 540.253906 675.382812 C 503.136719 675.058594 466.414062 677.175781 430.085938 681.734375 C 424.339844 671.511719 425.753906 662.335938 434.320312 654.210938 C 441.164062 643.734375 442.578125 632.445312 438.558594 620.335938 C 447.328125 607.207031 457.210938 594.503906 468.21875 582.226562 C 463.363281 577.066406 459.128906 571.421875 455.507812 565.289062 C 444.441406 567.34375 444.441406 563.8125 455.507812 554.703125 C 453.398438 549.800781 449.867188 546.273438 444.914062 544.117188 C 433.539062 557.585938 420.121094 568.875 404.660156 577.992188 C 404.660156 573.757812 404.660156 569.523438 404.660156 565.289062 C 411.027344 558.195312 416.675781 550.433594 421.609375 542 C 429.96875 539.902344 438.445312 539.195312 447.035156 539.882812 Z M 447.035156 539.882812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(42.745098%,35.686275%,28.235295%)\",\n      fillOpacity: 1\n    },\n    d: \"M 879.238281 577.992188 C 896.808594 581.484375 915.171875 583.601562 934.320312 584.34375 C 924.386719 591.894531 913.085938 596.128906 900.421875 597.046875 C 915.898438 599.160156 931.433594 599.863281 947.035156 599.164062 C 947.035156 613.277344 947.035156 627.394531 947.035156 641.507812 C 921.609375 641.507812 896.1875 641.507812 870.761719 641.507812 C 807.117188 638.828125 743.558594 636.007812 680.085938 633.039062 C 677.257812 633.039062 675.847656 631.628906 675.847656 628.804688 C 702.757812 631.6875 722.53125 621.804688 735.167969 599.164062 C 731.648438 590.808594 730.941406 582.339844 733.050781 573.757812 C 781.4375 577.941406 830.164062 579.351562 879.238281 577.992188 Z M 879.238281 577.992188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(56.470591%,49.019608%,40.784314%)\",\n      fillOpacity: 1\n    },\n    d: \"M 133.472656 573.757812 C 132.769531 635.875 133.476562 697.980469 135.59375 760.070312 C 141.0625 791.621094 147.417969 822.671875 154.660156 853.226562 C 151.425781 858.386719 147.1875 862.621094 141.949219 865.929688 C 150.761719 872.945312 151.464844 881.414062 144.066406 891.335938 C 137.613281 882.574219 134.082031 872.691406 133.472656 861.695312 C 130.773438 849.179688 128.65625 836.476562 127.117188 823.585938 C 122.257812 819.53125 118.019531 820.9375 114.40625 827.820312 C 107.652344 822.671875 101.296875 817.027344 95.339844 810.882812 C 92.4375 797.421875 85.375 786.835938 74.152344 779.125 C 78.390625 777.714844 82.628906 776.300781 86.863281 774.890625 C 81.042969 763.953125 74.6875 753.367188 67.796875 743.132812 C 67.203125 753.902344 64.378906 763.785156 59.320312 772.773438 C 55.820312 755.664062 56.527344 738.726562 61.441406 721.960938 C 63.921875 722.847656 66.042969 724.261719 67.796875 726.195312 C 74.160156 686.585938 80.515625 647.066406 86.863281 607.632812 C 98.164062 607.632812 109.464844 607.632812 120.761719 607.632812 C 120.058594 580.777344 120.765625 553.960938 122.882812 527.179688 C 122.484375 544.679688 126.015625 560.203125 133.472656 573.757812 Z M 133.472656 573.757812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(48.235294%,36.862746%,27.843139%)\",\n      fillOpacity: 1\n    },\n    d: \"M 434.320312 654.210938 C 423.375 656.53125 419.136719 663.589844 421.609375 675.382812 C 417.371094 675.382812 413.136719 675.382812 408.898438 675.382812 C 408.898438 671.148438 408.898438 666.914062 408.898438 662.679688 C 419.046875 636.722656 428.933594 610.609375 438.558594 584.34375 C 438.007812 579.859375 435.890625 576.332031 432.203125 573.757812 C 415 578.332031 411.46875 586.800781 421.609375 599.164062 C 416.066406 603.933594 410.417969 603.933594 404.660156 599.164062 C 404.660156 594.929688 404.660156 590.695312 404.660156 586.460938 C 404.660156 583.636719 404.660156 580.816406 404.660156 577.992188 C 420.121094 568.875 433.539062 557.585938 444.914062 544.117188 C 449.867188 546.273438 453.398438 549.800781 455.507812 554.703125 C 444.441406 563.8125 444.441406 567.34375 455.507812 565.289062 C 459.128906 571.421875 463.363281 577.066406 468.21875 582.226562 C 457.210938 594.503906 447.328125 607.207031 438.558594 620.335938 C 442.578125 632.445312 441.164062 643.734375 434.320312 654.210938 Z M 434.320312 654.210938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(47.450981%,40.392157%,33.333334%)\",\n      fillOpacity: 1\n    },\n    d: \"M 684.320312 645.742188 C 743.660156 645.035156 802.984375 645.742188 862.289062 647.859375 C 867.894531 651.316406 870.714844 656.257812 870.761719 662.679688 C 871.765625 668.144531 870.355469 672.378906 866.527344 675.382812 C 813.015625 667.683594 757.933594 664.152344 701.269531 664.796875 C 690.230469 662.890625 684.582031 656.539062 684.320312 645.742188 Z M 684.320312 645.742188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(41.960785%,34.117648%,26.274511%)\",\n      fillOpacity: 1\n    },\n    d: \"M 404.660156 607.632812 C 401.507812 624.683594 395.859375 640.917969 387.710938 656.328125 C 389.429688 660.328125 392.253906 663.152344 396.1875 664.796875 C 391.304688 673.898438 384.949219 681.65625 377.117188 688.085938 C 373.3125 680.089844 371.195312 671.621094 370.761719 662.679688 C 371.820312 656.660156 375.351562 652.425781 381.355469 649.976562 C 378.378906 629.054688 386.144531 614.941406 404.660156 607.632812 Z M 404.660156 607.632812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(22.352941%,18.82353%,14.117648%)\",\n      fillOpacity: 1\n    },\n    d: \"M 853.8125 675.382812 C 859.78125 710.398438 864.015625 745.683594 866.527344 781.242188 C 862.695312 778.238281 861.285156 774.003906 862.289062 768.539062 C 856.027344 769.648438 850.378906 768.238281 845.339844 764.304688 C 836.058594 755.734375 826.171875 747.972656 815.679688 741.015625 C 806.449219 723.976562 795.148438 708.449219 781.78125 694.4375 C 760.664062 692.535156 740.890625 696.769531 722.457031 707.140625 C 732.34375 708.550781 742.234375 709.964844 752.117188 711.375 C 742.152344 712.390625 733.679688 715.917969 726.695312 721.960938 C 720.359375 719.890625 714.707031 717.070312 709.746094 713.492188 C 717.207031 702.078125 721.445312 689.375 722.457031 675.382812 C 766.242188 675.382812 810.03125 675.382812 853.8125 675.382812 Z M 853.8125 675.382812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(86.666667%,80.000001%,69.803923%)\",\n      fillOpacity: 1\n    },\n    d: \"M 36.015625 675.382812 C 40.886719 676.613281 43.710938 680.140625 44.492188 685.96875 C 43.078125 689.496094 41.667969 693.027344 40.253906 696.554688 C 36.222656 690.011719 34.808594 682.953125 36.015625 675.382812 Z M 36.015625 675.382812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(52.156866%,45.09804%,37.64706%)\",\n      fillOpacity: 1\n    },\n    d: \"M 158.898438 235.007812 C 156.8125 295.390625 151.871094 356.082031 144.066406 417.085938 C 141.242188 462.253906 141.242188 507.417969 144.066406 552.585938 C 148.058594 535.785156 151.589844 518.847656 154.660156 501.773438 C 160.347656 507.710938 163.878906 506.300781 165.253906 497.539062 C 170.933594 513.03125 171.640625 528.558594 167.371094 544.117188 C 172.277344 554.039062 176.515625 563.921875 180.085938 573.757812 C 184.09375 611.285156 189.742188 647.980469 197.035156 683.851562 C 194.039062 703.261719 200.394531 718.785156 216.101562 730.429688 C 224.785156 779.972656 224.078125 829.375 213.984375 878.632812 C 202.683594 881.457031 191.382812 884.277344 180.085938 887.101562 C 176.683594 864.152344 168.207031 861.328125 154.660156 878.632812 C 159.539062 886.359375 162.363281 894.828125 163.136719 904.039062 C 155.710938 902.972656 148.648438 906.5 141.949219 914.625 C 144.605469 924.546875 148.84375 933.722656 154.660156 942.148438 C 143.691406 945.132812 132.390625 945.132812 120.761719 942.148438 C 98.285156 939.210938 75.683594 937.796875 52.964844 937.914062 C 52.964844 932.269531 52.964844 926.621094 52.964844 920.976562 C 58.4375 921.980469 62.671875 920.570312 65.679688 916.742188 C 65.679688 905.449219 65.679688 894.160156 65.679688 882.867188 C 71.738281 883.203125 77.390625 881.792969 82.628906 878.632812 C 87.691406 880.097656 87.691406 882.214844 82.628906 884.984375 C 92.878906 893.15625 99.9375 891.746094 103.8125 880.75 C 102.886719 865.160156 102.886719 848.925781 103.8125 832.054688 C 108.050781 832.054688 112.289062 832.054688 116.527344 832.054688 C 118.613281 841.820312 120.023438 851.699219 120.761719 861.695312 C 125 861.695312 129.238281 861.695312 133.472656 861.695312 C 134.082031 872.691406 137.613281 882.574219 144.066406 891.335938 C 151.464844 881.414062 150.761719 872.945312 141.949219 865.929688 C 147.1875 862.621094 151.425781 858.386719 154.660156 853.226562 C 147.417969 822.671875 141.0625 791.621094 135.59375 760.070312 C 133.476562 697.980469 132.769531 635.875 133.472656 573.757812 C 133.789062 532.792969 135.203125 491.859375 137.710938 450.960938 C 138.152344 432.128906 136.035156 413.785156 131.355469 395.914062 C 123.988281 430.777344 118.339844 466.0625 114.40625 501.773438 C 111.582031 504.597656 108.757812 507.417969 105.933594 510.242188 C 101.769531 480.671875 96.121094 451.03125 88.984375 421.320312 C 85.941406 417.296875 82.410156 416.589844 78.390625 419.203125 C 75.324219 430.507812 68.261719 436.859375 57.203125 438.257812 C 57.203125 426.964844 57.203125 415.675781 57.203125 404.382812 C 51.554688 404.382812 45.902344 404.382812 40.253906 404.382812 C 40.867188 423.792969 36.628906 441.4375 27.542969 457.3125 C 27.980469 463.921875 29.390625 470.273438 31.78125 476.367188 C 28.375 482.46875 25.546875 488.820312 23.304688 495.421875 C 24.367188 509.53125 24.367188 524.351562 23.304688 539.882812 C 12.382812 540.074219 3.910156 535.839844 -2.117188 527.179688 C -2.117188 435.433594 -2.117188 343.691406 -2.117188 251.945312 C 1.230469 247.25 3.347656 241.605469 4.238281 235.007812 C 5.648438 242.066406 7.0625 249.121094 8.472656 256.179688 C 9 317.085938 12.53125 377.777344 19.066406 438.257812 C 22.535156 427.21875 24.65625 415.925781 25.421875 404.382812 C 27.542969 357.824219 28.246094 311.246094 27.542969 264.648438 C 31.503906 260.128906 32.914062 254.480469 31.78125 247.710938 C 36.015625 247.710938 40.253906 247.710938 44.492188 247.710938 C 44.492188 243.476562 44.492188 239.242188 44.492188 235.007812 C 51.554688 235.007812 58.617188 235.007812 65.679688 235.007812 C 64.296875 253.570312 65.710938 271.917969 69.914062 290.054688 C 73.945312 286.558594 78.183594 285.851562 82.628906 287.9375 C 93.28125 303.851562 105.289062 303.144531 118.644531 285.820312 C 124.539062 268.757812 130.191406 251.820312 135.59375 235.007812 C 137.003906 242.066406 138.417969 249.121094 139.832031 256.179688 C 148.039062 238.625 153.6875 220.277344 156.78125 201.132812 C 158.886719 212.335938 159.59375 223.628906 158.898438 235.007812 Z M 158.898438 235.007812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(27.450982%,19.607843%,12.156863%)\",\n      fillOpacity: 1\n    },\n    d: \"M 408.898438 662.679688 C 403.644531 673.367188 398.699219 684.660156 394.066406 696.554688 C 392.65625 692.320312 391.242188 688.085938 389.832031 683.851562 C 376.773438 703.1875 376.066406 722.949219 387.710938 743.132812 C 380.746094 744.039062 374.390625 742.625 368.644531 738.898438 C 365.097656 729 361.566406 719.117188 358.050781 709.257812 C 360.222656 699.164062 363.046875 689.285156 366.527344 679.617188 C 359.546875 671.199219 360.957031 665.554688 370.761719 662.679688 C 371.195312 671.621094 373.3125 680.089844 377.117188 688.085938 C 384.949219 681.65625 391.304688 673.898438 396.1875 664.796875 C 392.253906 663.152344 389.429688 660.328125 387.710938 656.328125 C 395.859375 640.917969 401.507812 624.683594 404.660156 607.632812 C 404.660156 604.808594 404.660156 601.988281 404.660156 599.164062 C 410.417969 603.933594 416.066406 603.933594 421.609375 599.164062 C 411.46875 586.800781 415 578.332031 432.203125 573.757812 C 435.890625 576.332031 438.007812 579.859375 438.558594 584.34375 C 428.933594 610.609375 419.046875 636.722656 408.898438 662.679688 Z M 408.898438 662.679688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(43.529412%,34.901962%,27.843139%)\",\n      fillOpacity: 1\n    },\n    d: \"M 680.085938 679.617188 C 688.558594 679.617188 697.035156 679.617188 705.507812 679.617188 C 708.539062 707.269531 700.765625 711.503906 682.203125 692.320312 C 680.15625 688.304688 679.453125 684.070312 680.085938 679.617188 Z M 680.085938 679.617188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(34.901962%,24.313726%,15.686275%)\",\n      fillOpacity: 1\n    },\n    d: \"M 434.320312 654.210938 C 425.753906 662.335938 424.339844 671.511719 430.085938 681.734375 C 466.414062 677.175781 503.136719 675.058594 540.253906 675.382812 C 539.328125 680.359375 540.738281 684.59375 544.492188 688.085938 C 554.789062 679.007812 563.261719 668.421875 569.914062 656.328125 C 581.097656 653.839844 590.988281 655.957031 599.578125 662.679688 C 582.027344 666.835938 572.84375 678.132812 572.035156 696.554688 C 569.191406 699.738281 565.660156 701.152344 561.441406 700.789062 C 550.820312 706.082031 539.519531 708.902344 527.542969 709.257812 C 527.542969 705.023438 527.542969 700.789062 527.542969 696.554688 C 512.296875 696.101562 497.464844 693.277344 483.050781 688.085938 C 477.542969 693.195312 471.1875 696.019531 463.984375 696.554688 C 457.640625 693.140625 450.578125 690.320312 442.796875 688.085938 C 437.664062 691.363281 437.664062 694.890625 442.796875 698.671875 C 439.644531 703.070312 435.40625 705.1875 430.085938 705.023438 C 426.601562 695.589844 420.953125 692.765625 413.136719 696.554688 C 416.015625 702.3125 418.839844 707.957031 421.609375 713.492188 C 420.675781 724.488281 418.554688 724.488281 415.253906 713.492188 C 410.042969 716.773438 408.632812 721.007812 411.015625 726.195312 C 417.699219 739.0625 428.292969 744.707031 442.796875 743.132812 C 445.621094 743.132812 448.445312 743.132812 451.269531 743.132812 C 456.917969 748.777344 462.570312 754.425781 468.21875 760.070312 C 464.980469 761.863281 461.449219 763.277344 457.628906 764.304688 C 451.71875 759.59375 446.777344 753.941406 442.796875 747.367188 C 434.558594 754.6875 426.085938 756.097656 417.371094 751.601562 C 408.75 742.425781 400.980469 729.722656 394.066406 713.492188 C 390.863281 723.269531 392.980469 731.738281 400.421875 738.898438 C 397.277344 741.785156 394.453125 744.609375 391.949219 747.367188 C 389.125 747.367188 387.710938 745.957031 387.710938 743.132812 C 376.066406 722.949219 376.773438 703.1875 389.832031 683.851562 C 391.242188 688.085938 392.65625 692.320312 394.066406 696.554688 C 398.699219 684.660156 403.644531 673.367188 408.898438 662.679688 C 408.898438 666.914062 408.898438 671.148438 408.898438 675.382812 C 413.136719 675.382812 417.371094 675.382812 421.609375 675.382812 C 419.136719 663.589844 423.375 656.53125 434.320312 654.210938 Z M 434.320312 654.210938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(55.29412%,40.784314%,28.627452%)\",\n      fillOpacity: 1\n    },\n    d: \"M 709.746094 713.492188 C 714.707031 717.070312 720.359375 719.890625 726.695312 721.960938 C 723.867188 724.785156 721.046875 727.605469 718.21875 730.429688 C 711.738281 733.441406 706.089844 737.675781 701.269531 743.132812 C 700.5 720.714844 698.382812 720.714844 694.914062 743.132812 C 692.359375 727.167969 683.183594 717.289062 667.371094 713.492188 C 663.0625 724.195312 658.117188 724.195312 652.542969 713.492188 C 651.683594 726.878906 658.039062 736.054688 671.609375 741.015625 C 665.683594 743.535156 660.035156 742.828125 654.660156 738.898438 C 648.828125 731.324219 644.589844 722.855469 641.949219 713.492188 C 636.746094 705.78125 629.6875 701.546875 620.761719 700.789062 C 615.464844 701.113281 611.9375 703.9375 610.167969 709.257812 C 608.070312 700.902344 607.363281 692.433594 608.050781 683.851562 C 623.410156 679.78125 636.828125 684.015625 648.304688 696.554688 C 654.1875 692.089844 660.542969 691.390625 667.371094 694.4375 C 680.566406 702.835938 694.691406 709.1875 709.746094 713.492188 Z M 709.746094 713.492188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(52.156866%,36.862746%,24.313726%)\",\n      fillOpacity: 1\n    },\n    d: \"M 463.984375 696.554688 C 471.1875 696.019531 477.542969 693.195312 483.050781 688.085938 C 497.464844 693.277344 512.296875 696.101562 527.542969 696.554688 C 527.542969 700.789062 527.542969 705.023438 527.542969 709.257812 C 539.519531 708.902344 550.820312 706.082031 561.441406 700.789062 C 557.882812 709.742188 560.707031 717.503906 569.914062 724.078125 C 562.472656 724.671875 555.414062 722.554688 548.730469 717.726562 C 545.835938 719.261719 543.007812 720.671875 540.253906 721.960938 C 530.917969 722.402344 522.445312 725.222656 514.832031 730.429688 C 502.042969 729.730469 489.332031 730.4375 476.695312 732.546875 C 469.417969 739.148438 460.945312 742.675781 451.269531 743.132812 C 454.617188 737.652344 458.855469 732.710938 463.984375 728.3125 C 451.664062 721.5 440.367188 713.738281 430.085938 705.023438 C 435.40625 705.1875 439.644531 703.070312 442.796875 698.671875 C 437.664062 694.890625 437.664062 691.363281 442.796875 688.085938 C 450.578125 690.320312 457.640625 693.140625 463.984375 696.554688 Z M 463.984375 696.554688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(67.450982%,53.333336%,39.607844%)\",\n      fillOpacity: 1\n    },\n    d: \"M 463.984375 696.554688 C 476.46875 707.058594 490.597656 715.527344 506.355469 721.960938 C 494.730469 726.15625 483.429688 724.742188 472.457031 717.726562 C 466.335938 711.109375 459.277344 705.464844 451.269531 700.789062 C 454.765625 697.039062 459.003906 695.628906 463.984375 696.554688 Z M 463.984375 696.554688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(76.47059%,60.392159%,47.450981%)\",\n      fillOpacity: 1\n    },\n    d: \"M 430.085938 705.023438 C 440.367188 713.738281 451.664062 721.5 463.984375 728.3125 C 458.855469 732.710938 454.617188 737.652344 451.269531 743.132812 C 448.445312 743.132812 445.621094 743.132812 442.796875 743.132812 C 437.347656 732.050781 430.285156 722.171875 421.609375 713.492188 C 418.839844 707.957031 416.015625 702.3125 413.136719 696.554688 C 420.953125 692.765625 426.601562 695.589844 430.085938 705.023438 Z M 430.085938 705.023438 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(57.254905%,41.568628%,30.19608%)\",\n      fillOpacity: 1\n    },\n    d: \"M 421.609375 713.492188 C 430.285156 722.171875 437.347656 732.050781 442.796875 743.132812 C 428.292969 744.707031 417.699219 739.0625 411.015625 726.195312 C 408.632812 721.007812 410.042969 716.773438 415.253906 713.492188 C 418.554688 724.488281 420.675781 724.488281 421.609375 713.492188 Z M 421.609375 713.492188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(69.803923%,51.372552%,36.862746%)\",\n      fillOpacity: 1\n    },\n    d: \"M 599.578125 662.679688 C 603.5625 669.242188 606.386719 676.296875 608.050781 683.851562 C 607.363281 692.433594 608.070312 700.902344 610.167969 709.257812 C 611.9375 703.9375 615.464844 701.113281 620.761719 700.789062 C 623.378906 717.707031 618.4375 731.820312 605.933594 743.132812 C 603.828125 754.335938 603.117188 765.628906 603.8125 777.007812 C 610.589844 775.871094 616.238281 777.289062 620.761719 781.242188 C 611.847656 779.976562 603.371094 781.386719 595.339844 785.476562 C 591.011719 791.410156 586.777344 797.058594 582.628906 802.414062 C 581.46875 794.152344 584.292969 787.800781 591.101562 783.359375 C 590.238281 772.261719 590.238281 760.261719 591.101562 747.367188 C 571.667969 743.300781 554.71875 734.832031 540.253906 721.960938 C 543.007812 720.671875 545.835938 719.261719 548.730469 717.726562 C 555.414062 722.554688 562.472656 724.671875 569.914062 724.078125 C 560.707031 717.503906 557.882812 709.742188 561.441406 700.789062 C 565.660156 701.152344 569.191406 699.738281 572.035156 696.554688 C 572.84375 678.132812 582.027344 666.835938 599.578125 662.679688 Z M 599.578125 662.679688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(18.039216%,15.294118%,11.372549%)\",\n      fillOpacity: 1\n    },\n    d: \"M 866.527344 781.242188 C 872.765625 793.722656 879.121094 806.425781 885.59375 819.351562 C 900.164062 835.953125 913.585938 852.890625 925.847656 870.164062 C 935.640625 886.425781 944.816406 903.363281 953.390625 920.976562 C 956.835938 929.175781 958.953125 937.644531 959.746094 946.382812 C 955.507812 946.382812 951.269531 946.382812 947.035156 946.382812 C 947.035156 940.738281 947.035156 935.089844 947.035156 929.445312 C 941.433594 930.164062 936.488281 928.753906 932.203125 925.210938 C 927.8125 937.046875 922.164062 948.339844 915.253906 959.085938 C 913.207031 955.070312 912.503906 950.835938 913.136719 946.382812 C 907.488281 946.382812 901.835938 946.382812 896.1875 946.382812 C 892.859375 928.851562 897.800781 914.738281 911.015625 904.039062 C 914.460938 895.839844 916.582031 887.371094 917.371094 878.632812 C 910.308594 878.632812 903.25 878.632812 896.1875 878.632812 C 892.457031 869.695312 892.457031 861.226562 896.1875 853.226562 C 893.621094 846.765625 888.683594 842.53125 881.355469 840.523438 C 859.335938 848.652344 836.03125 851.476562 811.441406 848.992188 C 811.441406 858.871094 811.441406 868.753906 811.441406 878.632812 C 805.792969 878.632812 800.140625 878.632812 794.492188 878.632812 C 800.140625 946.382812 800.140625 1014.132812 794.492188 1081.882812 C 800.140625 1081.882812 805.792969 1081.882812 811.441406 1081.882812 C 811.441406 1104.464844 811.441406 1127.050781 811.441406 1149.632812 C 788.664062 1151.023438 766.066406 1149.613281 743.644531 1145.398438 C 739.34375 1134.101562 732.28125 1131.28125 722.457031 1136.929688 C 724.480469 1141.070312 727.300781 1144.597656 730.933594 1147.515625 C 724.21875 1159.476562 727.042969 1168.652344 739.40625 1175.039062 C 743.5 1183.066406 744.910156 1191.535156 743.644531 1200.445312 C 737.996094 1200.445312 732.34375 1200.445312 726.695312 1200.445312 C 726.695312 1206.089844 726.695312 1211.738281 726.695312 1217.382812 C 709.746094 1217.382812 692.796875 1217.382812 675.847656 1217.382812 C 675.847656 1228.675781 675.847656 1239.964844 675.847656 1251.257812 C 653.25 1251.257812 630.648438 1251.257812 608.050781 1251.257812 C 609.40625 1236.871094 607.996094 1222.753906 603.8125 1208.914062 C 589.511719 1202.972656 575.386719 1196.621094 561.441406 1189.859375 C 567.65625 1185.210938 571.191406 1178.859375 572.035156 1170.804688 C 580.183594 1167.347656 588.65625 1164.523438 597.457031 1162.335938 C 616.019531 1164.910156 634.386719 1167.734375 652.542969 1170.804688 C 658.191406 1159.511719 663.84375 1159.511719 669.492188 1170.804688 C 674.867188 1164.855469 676.988281 1157.800781 675.847656 1149.632812 C 663.707031 1147.75 653.113281 1150.574219 644.066406 1158.101562 C 641.492188 1151.097656 639.371094 1144.039062 637.710938 1136.929688 C 640.035156 1128.910156 644.269531 1121.855469 650.421875 1115.757812 C 649.714844 1114.347656 649.011719 1112.933594 648.304688 1111.523438 C 645.304688 1115.253906 641.769531 1118.074219 637.710938 1119.992188 C 624.558594 1109.261719 609.019531 1104.320312 591.101562 1105.171875 C 596.75 1103.761719 602.402344 1102.347656 608.050781 1100.9375 C 582.761719 1088.566406 582.761719 1082.214844 608.050781 1081.882812 C 606.867188 1070.796875 604.042969 1060.210938 599.578125 1050.125 C 606.867188 1046.996094 613.929688 1043.464844 620.761719 1039.539062 C 618.644531 1038.128906 616.527344 1036.714844 614.40625 1035.304688 C 597.382812 1043.089844 581.84375 1052.96875 567.796875 1064.945312 C 552.347656 1059.636719 537.515625 1059.636719 523.304688 1064.945312 C 520.480469 1064.945312 517.65625 1064.945312 514.832031 1064.945312 C 501.863281 1064.136719 488.445312 1062.722656 474.578125 1060.710938 C 472.460938 1045.246094 471.757812 1029.722656 472.457031 1014.132812 C 457.207031 1015.140625 455.792969 1010.90625 468.21875 1001.429688 C 470.171875 980.855469 474.410156 961.09375 480.933594 942.148438 C 475.484375 929.136719 468.421875 917.136719 459.746094 906.15625 C 456.410156 897.269531 455 888.09375 455.507812 878.632812 C 451.269531 878.632812 447.035156 878.632812 442.796875 878.632812 C 445.144531 860.554688 445.144531 844.324219 442.796875 829.9375 C 439.742188 819.191406 432.679688 812.839844 421.609375 810.882812 C 421.609375 809.472656 421.609375 808.058594 421.609375 806.648438 C 432.105469 804.023438 432.105469 799.789062 421.609375 793.945312 C 426.894531 787.414062 426.894531 781.0625 421.609375 774.890625 C 425.492188 773.308594 429.027344 771.191406 432.203125 768.539062 C 438.117188 777.121094 445.179688 778.53125 453.390625 772.773438 C 457.835938 779.578125 464.191406 782.398438 472.457031 781.242188 C 472.457031 791.121094 472.457031 801.003906 472.457031 810.882812 C 483.757812 810.882812 495.054688 810.882812 506.355469 810.882812 C 504.859375 819.921875 508.390625 825.566406 516.949219 827.820312 C 532.59375 831.636719 548.839844 831.636719 565.679688 827.820312 C 565.679688 824.996094 567.089844 823.585938 569.914062 823.585938 C 583.359375 824.003906 596.070312 821.179688 608.050781 815.117188 C 587.640625 811.824219 586.9375 804.765625 605.933594 793.945312 C 608.851562 797.574219 612.382812 800.394531 616.527344 802.414062 C 619.363281 833.355469 623.601562 862.996094 629.238281 891.335938 C 623.390625 915.199219 616.328125 938.488281 608.050781 961.203125 C 606.46875 972.285156 610.707031 980.046875 620.761719 984.492188 C 627.144531 989.773438 633.5 989.773438 639.832031 984.492188 C 652.859375 932.417969 669.808594 881.605469 690.679688 832.054688 C 703.339844 812.433594 716.050781 792.675781 728.8125 772.773438 C 733.917969 770.355469 738.863281 767.53125 743.644531 764.304688 C 734.441406 757.226562 725.964844 750.167969 718.21875 743.132812 C 721.351562 743.6875 724.179688 742.980469 726.695312 741.015625 C 721.046875 738.191406 721.046875 735.371094 726.695312 732.546875 C 724.179688 730.582031 721.351562 729.875 718.21875 730.429688 C 721.046875 727.605469 723.867188 724.785156 726.695312 721.960938 C 733.679688 715.917969 742.152344 712.390625 752.117188 711.375 C 742.234375 709.964844 732.34375 708.550781 722.457031 707.140625 C 740.890625 696.769531 760.664062 692.535156 781.78125 694.4375 C 795.148438 708.449219 806.449219 723.976562 815.679688 741.015625 C 826.171875 747.972656 836.058594 755.734375 845.339844 764.304688 C 850.378906 768.238281 856.027344 769.648438 862.289062 768.539062 C 861.285156 774.003906 862.695312 778.238281 866.527344 781.242188 Z M 866.527344 781.242188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(49.019608%,42.745098%,36.078432%)\",\n      fillOpacity: 1\n    },\n    d: \"M 31.78125 717.726562 C 35.074219 720.503906 37.898438 724.03125 40.253906 728.3125 C 39.957031 731.550781 38.546875 733.667969 36.015625 734.664062 C 31.796875 793.195312 30.386719 852.476562 31.78125 912.507812 C 21.894531 912.507812 12.003906 912.507812 2.117188 912.507812 C 2.117188 908.273438 2.117188 904.039062 2.117188 899.804688 C 7.097656 900.730469 11.335938 899.320312 14.832031 895.570312 C 9.792969 891.636719 4.144531 890.226562 -2.117188 891.335938 C -2.117188 887.101562 -2.117188 882.867188 -2.117188 878.632812 C 5.46875 843.972656 12.53125 808.6875 19.066406 772.773438 C 17.003906 768.769531 15.59375 764.535156 14.832031 760.070312 C 22.234375 746.277344 27.882812 732.160156 31.78125 717.726562 Z M 31.78125 717.726562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(75.294119%,57.647061%,42.352942%)\",\n      fillOpacity: 1\n    },\n    d: \"M 620.761719 700.789062 C 629.6875 701.546875 636.746094 705.78125 641.949219 713.492188 C 644.589844 722.855469 648.828125 731.324219 654.660156 738.898438 C 660.035156 742.828125 665.683594 743.535156 671.609375 741.015625 C 658.039062 736.054688 651.683594 726.878906 652.542969 713.492188 C 658.117188 724.195312 663.0625 724.195312 667.371094 713.492188 C 683.183594 717.289062 692.359375 727.167969 694.914062 743.132812 C 698.382812 720.714844 700.5 720.714844 701.269531 743.132812 C 691.792969 763.273438 681.199219 783.027344 669.492188 802.414062 C 665.351562 807.808594 661.816406 807.808594 658.898438 802.414062 C 651.917969 794.683594 643.445312 789.035156 633.472656 785.476562 C 628.777344 785.234375 624.539062 783.824219 620.761719 781.242188 C 616.238281 777.289062 610.589844 775.871094 603.8125 777.007812 C 603.117188 765.628906 603.828125 754.335938 605.933594 743.132812 C 618.4375 731.820312 623.378906 717.707031 620.761719 700.789062 Z M 620.761719 700.789062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(49.411765%,39.215687%,29.411766%)\",\n      fillOpacity: 1\n    },\n    d: \"M 417.371094 751.601562 C 418.046875 764.960938 416.632812 779.074219 413.136719 793.945312 C 415.011719 799.191406 417.835938 803.425781 421.609375 806.648438 C 421.609375 808.058594 421.609375 809.472656 421.609375 810.882812 C 420.296875 816.125 418.179688 816.125 415.253906 810.882812 C 409.855469 798.640625 403.5 787.347656 396.1875 777.007812 C 393.140625 767.421875 391.730469 757.542969 391.949219 747.367188 C 394.453125 744.609375 397.277344 741.785156 400.421875 738.898438 C 392.980469 731.738281 390.863281 723.269531 394.066406 713.492188 C 400.980469 729.722656 408.75 742.425781 417.371094 751.601562 Z M 417.371094 751.601562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(76.078433%,55.29412%,40.000001%)\",\n      fillOpacity: 1\n    },\n    d: \"M 514.832031 730.429688 C 521.382812 731.378906 528.445312 732.789062 536.015625 734.664062 C 538.121094 747.6875 539.535156 761.800781 540.253906 777.007812 C 534.195312 776.671875 528.542969 778.082031 523.304688 781.242188 C 507.429688 774.738281 491.890625 771.914062 476.695312 772.773438 C 477.003906 766.308594 474.179688 762.074219 468.21875 760.070312 C 462.570312 754.425781 456.917969 748.777344 451.269531 743.132812 C 460.945312 742.675781 469.417969 739.148438 476.695312 732.546875 C 489.332031 730.4375 502.042969 729.730469 514.832031 730.429688 Z M 514.832031 730.429688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(21.176471%,16.862746%,11.764706%)\",\n      fillOpacity: 1\n    },\n    d: \"M 917.371094 743.132812 C 918.457031 752.839844 917.046875 762.015625 913.136719 770.65625 C 901.921875 772.761719 890.621094 773.46875 879.238281 772.773438 C 880.609375 743.75 879.199219 715.519531 875 688.085938 C 875 683.851562 875 679.617188 875 675.382812 C 889.121094 675.382812 903.25 675.382812 917.371094 675.382812 C 917.371094 697.964844 917.371094 720.550781 917.371094 743.132812 Z M 917.371094 743.132812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(28.627452%,23.137255%,16.862746%)\",\n      fillOpacity: 1\n    },\n    d: \"M 675.847656 645.742188 C 678.671875 645.742188 681.496094 645.742188 684.320312 645.742188 C 684.582031 656.539062 690.230469 662.890625 701.269531 664.796875 C 757.933594 664.152344 813.015625 667.683594 866.527344 675.382812 C 868.359375 686.671875 870.480469 697.960938 872.882812 709.257812 C 874.972656 702.339844 875.679688 695.28125 875 688.085938 C 879.199219 715.519531 880.609375 743.75 879.238281 772.773438 C 890.621094 773.46875 901.921875 772.761719 913.136719 770.65625 C 917.046875 762.015625 918.457031 752.839844 917.371094 743.132812 C 924.792969 784.523438 927.613281 826.867188 925.847656 870.164062 C 913.585938 852.890625 900.164062 835.953125 885.59375 819.351562 C 879.121094 806.425781 872.765625 793.722656 866.527344 781.242188 C 864.015625 745.683594 859.78125 710.398438 853.8125 675.382812 C 800.460938 671.820312 743.964844 669.703125 684.320312 669.03125 C 676.953125 665.140625 674.128906 660.203125 675.847656 654.210938 C 675.847656 651.386719 675.847656 648.566406 675.847656 645.742188 Z M 675.847656 645.742188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(79.215688%,60.784316%,45.490196%)\",\n      fillOpacity: 1\n    },\n    d: \"M 540.253906 721.960938 C 554.71875 734.832031 571.667969 743.300781 591.101562 747.367188 C 590.238281 760.261719 590.238281 772.261719 591.101562 783.359375 C 584.292969 787.800781 581.46875 794.152344 582.628906 802.414062 C 579.457031 810.171875 575.21875 817.230469 569.914062 823.585938 C 567.089844 823.585938 565.679688 824.996094 565.679688 827.820312 C 559.859375 828.484375 554.207031 827.777344 548.730469 825.703125 C 533.449219 816.613281 517.910156 808.144531 502.117188 800.296875 C 493.757812 798.199219 485.285156 797.492188 476.695312 798.179688 C 476.695312 789.710938 476.695312 781.242188 476.695312 772.773438 C 491.890625 771.914062 507.429688 774.738281 523.304688 781.242188 C 528.542969 778.082031 534.195312 776.671875 540.253906 777.007812 C 539.535156 761.800781 538.121094 747.6875 536.015625 734.664062 C 528.445312 732.789062 521.382812 731.378906 514.832031 730.429688 C 522.445312 725.222656 530.917969 722.402344 540.253906 721.960938 Z M 540.253906 721.960938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(20.784314%,16.470589%,10.196079%)\",\n      fillOpacity: 1\n    },\n    d: \"M 680.085938 633.039062 C 743.558594 636.007812 807.117188 638.828125 870.761719 641.507812 C 912.585938 644.53125 954.957031 647.351562 997.882812 649.976562 C 997.882812 726.195312 997.882812 802.414062 997.882812 878.632812 C 990.246094 807.34375 983.1875 735.359375 976.695312 662.679688 C 941.386719 657.164062 906.078125 657.164062 870.761719 662.679688 C 870.714844 656.257812 867.894531 651.316406 862.289062 647.859375 C 802.984375 645.742188 743.660156 645.035156 684.320312 645.742188 C 681.496094 645.742188 678.671875 645.742188 675.847656 645.742188 C 676.089844 641.046875 677.5 636.8125 680.085938 633.039062 Z M 680.085938 633.039062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(38.431373%,32.156864%,24.705882%)\",\n      fillOpacity: 1\n    },\n    d: \"M 997.882812 878.632812 C 997.882812 923.800781 997.882812 968.964844 997.882812 1014.132812 C 985.191406 991.703125 972.480469 969.121094 959.746094 946.382812 C 958.953125 937.644531 956.835938 929.175781 953.390625 920.976562 C 944.816406 903.363281 935.640625 886.425781 925.847656 870.164062 C 927.613281 826.867188 924.792969 784.523438 917.371094 743.132812 C 917.371094 720.550781 917.371094 697.964844 917.371094 675.382812 C 903.25 675.382812 889.121094 675.382812 875 675.382812 C 875 679.617188 875 683.851562 875 688.085938 C 875.679688 695.28125 874.972656 702.339844 872.882812 709.257812 C 870.480469 697.960938 868.359375 686.671875 866.527344 675.382812 C 870.355469 672.378906 871.765625 668.144531 870.761719 662.679688 C 906.078125 657.164062 941.386719 657.164062 976.695312 662.679688 C 983.1875 735.359375 990.246094 807.34375 997.882812 878.632812 Z M 997.882812 878.632812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(23.921569%,17.647059%,11.764706%)\",\n      fillOpacity: 1\n    },\n    d: \"M 468.21875 760.070312 C 474.179688 762.074219 477.003906 766.308594 476.695312 772.773438 C 476.695312 781.242188 476.695312 789.710938 476.695312 798.179688 C 485.285156 797.492188 493.757812 798.199219 502.117188 800.296875 C 517.910156 808.144531 533.449219 816.613281 548.730469 825.703125 C 554.207031 827.777344 559.859375 828.484375 565.679688 827.820312 C 548.839844 831.636719 532.59375 831.636719 516.949219 827.820312 C 508.390625 825.566406 504.859375 819.921875 506.355469 810.882812 C 495.054688 810.882812 483.757812 810.882812 472.457031 810.882812 C 472.457031 801.003906 472.457031 791.121094 472.457031 781.242188 C 464.191406 782.398438 457.835938 779.578125 453.390625 772.773438 C 445.179688 778.53125 438.117188 777.121094 432.203125 768.539062 C 429.027344 771.191406 425.492188 773.308594 421.609375 774.890625 C 426.894531 781.0625 426.894531 787.414062 421.609375 793.945312 C 432.105469 799.789062 432.105469 804.023438 421.609375 806.648438 C 417.835938 803.425781 415.011719 799.191406 413.136719 793.945312 C 416.632812 779.074219 418.046875 764.960938 417.371094 751.601562 C 426.085938 756.097656 434.558594 754.6875 442.796875 747.367188 C 446.777344 753.941406 451.71875 759.59375 457.628906 764.304688 C 461.449219 763.277344 464.980469 761.863281 468.21875 760.070312 Z M 468.21875 760.070312 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(20.392157%,16.470589%,9.019608%)\",\n      fillOpacity: 1\n    },\n    d: \"M 65.679688 916.742188 C 62.671875 920.570312 58.4375 921.980469 52.964844 920.976562 C 47.671875 920.652344 44.140625 917.828125 42.371094 912.507812 C 40.960938 916.742188 39.546875 920.976562 38.136719 925.210938 C 36.015625 861.710938 35.3125 798.195312 36.015625 734.664062 C 38.546875 733.667969 39.957031 731.550781 40.253906 728.3125 C 37.898438 724.03125 35.074219 720.503906 31.78125 717.726562 C 34.785156 713.898438 39.019531 712.488281 44.492188 713.492188 C 52.5625 780.679688 55.386719 848.429688 52.964844 916.742188 C 57.203125 916.742188 61.441406 916.742188 65.679688 916.742188 Z M 65.679688 916.742188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(20.392157%,16.862746%,12.54902%)\",\n      fillOpacity: 1\n    },\n    d: \"M 705.507812 1115.757812 C 701.289062 1116.121094 697.757812 1114.707031 694.914062 1111.523438 C 688.964844 1103.503906 684.027344 1095.035156 680.085938 1086.117188 C 683.929688 1071.085938 689.582031 1056.96875 697.035156 1043.773438 C 685.964844 1047.0625 678.199219 1054.121094 673.730469 1064.945312 C 671.535156 1082.097656 672.949219 1099.035156 677.964844 1115.757812 C 679.878906 1105.472656 683.410156 1104.765625 688.558594 1113.640625 C 685.050781 1117.515625 680.8125 1120.335938 675.847656 1122.109375 C 679.730469 1123.285156 682.550781 1125.402344 684.320312 1128.460938 C 680.085938 1128.460938 675.847656 1128.460938 671.609375 1128.460938 C 671.609375 1124.226562 671.609375 1119.992188 671.609375 1115.757812 C 657.445312 1111.4375 648.96875 1101.554688 646.1875 1086.117188 C 626.972656 1074.886719 624.148438 1060.066406 637.710938 1041.65625 C 634.164062 1037.375 632.753906 1032.433594 633.472656 1026.835938 C 627.828125 1026.835938 622.171875 1026.835938 616.527344 1026.835938 C 615.511719 1018.507812 616.921875 1010.742188 620.761719 1003.546875 C 631.820312 1002.925781 641.710938 999.394531 650.421875 992.960938 C 653.355469 995.183594 655.472656 998.007812 656.78125 1001.429688 C 657.238281 983.460938 659.355469 965.105469 663.136719 946.382812 C 670.199219 946.382812 677.257812 946.382812 684.320312 946.382812 C 683.644531 953.578125 684.347656 960.636719 686.441406 967.554688 C 688.707031 942.085938 691.53125 916.679688 694.914062 891.335938 C 697.988281 880.964844 702.222656 871.082031 707.628906 861.695312 C 709.039062 867.339844 710.453125 872.988281 711.863281 878.632812 C 713.785156 864.800781 717.316406 851.390625 722.457031 838.40625 C 722.253906 834.03125 720.84375 832.621094 718.21875 834.171875 C 715.113281 848.132812 707.347656 858.71875 694.914062 865.929688 C 691.433594 875.617188 688.605469 885.5 686.441406 895.570312 C 683.019531 879.960938 685.140625 865.140625 692.796875 851.109375 C 704.878906 825.402344 720.414062 802.113281 739.40625 781.242188 C 749.070312 777.953125 758.253906 773.71875 766.949219 768.539062 C 771.855469 770.648438 775.386719 774.175781 777.542969 779.125 C 773.402344 785.464844 769.164062 791.816406 764.832031 798.179688 C 768.246094 815.71875 771.070312 833.363281 773.304688 851.109375 C 773.5625 860.683594 770.738281 869.152344 764.832031 876.515625 C 772.230469 886.566406 773.644531 897.152344 769.066406 908.273438 C 766.941406 912.597656 764.117188 913.304688 760.59375 910.390625 C 767.066406 899.726562 765.652344 890.550781 756.355469 882.867188 C 749.582031 896.082031 748.167969 909.492188 752.117188 923.09375 C 750.789062 934.84375 746.550781 945.429688 739.40625 954.851562 C 743.15625 974.421875 744.566406 994.183594 743.644531 1014.132812 C 739.40625 1014.132812 735.167969 1014.132812 730.933594 1014.132812 C 728.855469 1035.335938 732.386719 1038.160156 741.527344 1022.601562 C 742.117188 1030.039062 740 1037.089844 735.167969 1043.773438 C 738.257812 1054.257812 741.085938 1064.84375 743.644531 1075.53125 C 737.433594 1091.332031 729.660156 1106.152344 720.339844 1119.992188 C 716.429688 1114.660156 712.894531 1109.015625 709.746094 1103.054688 C 705.992188 1106.546875 704.582031 1110.78125 705.507812 1115.757812 Z M 705.507812 1115.757812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(16.862746%,15.294118%,10.980392%)\",\n      fillOpacity: 1\n    },\n    d: \"M 896.1875 853.226562 C 892.128906 855.144531 888.59375 857.964844 885.59375 861.695312 C 884.183594 860.285156 882.765625 858.871094 881.355469 857.460938 C 879.261719 864.378906 878.558594 871.4375 879.238281 878.632812 C 875 878.632812 870.761719 878.632812 866.527344 878.632812 C 867.214844 888.613281 866.511719 898.492188 864.40625 908.273438 C 852.816406 917.722656 843.636719 929.019531 836.863281 942.148438 C 850.710938 946.328125 864.839844 947.738281 879.238281 946.382812 C 879.238281 968.964844 879.238281 991.550781 879.238281 1014.132812 C 887.710938 1014.132812 896.1875 1014.132812 904.660156 1014.132812 C 909.171875 1050.214844 909.171875 1086.207031 904.660156 1122.109375 C 907.496094 1129.929688 913.148438 1134.871094 921.609375 1136.929688 C 925.363281 1140.421875 926.777344 1144.65625 925.847656 1149.632812 C 950.734375 1150.046875 952.144531 1154.28125 930.085938 1162.335938 C 927.855469 1169.660156 923.617188 1175.308594 917.371094 1179.273438 C 911.996094 1169.980469 911.996094 1160.808594 917.371094 1151.75 C 910.589844 1150.59375 904.234375 1148.476562 898.304688 1145.398438 C 892.558594 1149.125 886.203125 1150.539062 879.238281 1149.632812 C 879.238281 1172.214844 879.238281 1194.800781 879.238281 1217.382812 C 842.40625 1215.980469 805.683594 1217.390625 769.066406 1221.617188 C 777.542969 1238.554688 790.253906 1251.257812 807.203125 1259.726562 C 811.296875 1267.753906 812.707031 1276.222656 811.441406 1285.132812 C 788.84375 1286.542969 766.242188 1287.957031 743.644531 1289.367188 C 743.644531 1280.898438 743.644531 1272.429688 743.644531 1263.960938 C 710.917969 1265.230469 678.433594 1263.820312 646.1875 1259.726562 C 633.714844 1262.875 621.003906 1264.992188 608.050781 1266.078125 C 602.402344 1270.3125 602.402344 1274.546875 608.050781 1278.78125 C 597.757812 1280.691406 597.050781 1284.222656 605.933594 1289.367188 C 608.757812 1297.835938 608.757812 1306.304688 605.933594 1314.773438 C 598.460938 1327.910156 590.695312 1340.613281 582.628906 1352.882812 C 387.710938 1352.882812 192.796875 1352.882812 -2.117188 1352.882812 C -2.117188 1328.886719 -2.117188 1304.894531 -2.117188 1280.898438 C 1.765625 1278.859375 6 1277.449219 10.59375 1276.664062 C 142.609375 1285.742188 273.964844 1285.742188 404.660156 1276.664062 C 421.609375 1276.664062 438.558594 1276.664062 455.507812 1276.664062 C 500.707031 1276.664062 545.902344 1276.664062 591.101562 1276.664062 C 597.660156 1275.304688 600.488281 1271.070312 599.578125 1263.960938 C 600.769531 1258.550781 603.597656 1254.316406 608.050781 1251.257812 C 630.648438 1251.257812 653.25 1251.257812 675.847656 1251.257812 C 675.847656 1239.964844 675.847656 1228.675781 675.847656 1217.382812 C 692.796875 1217.382812 709.746094 1217.382812 726.695312 1217.382812 C 726.695312 1211.738281 726.695312 1206.089844 726.695312 1200.445312 C 732.34375 1200.445312 737.996094 1200.445312 743.644531 1200.445312 C 744.910156 1191.535156 743.5 1183.066406 739.40625 1175.039062 C 727.042969 1168.652344 724.21875 1159.476562 730.933594 1147.515625 C 727.300781 1144.597656 724.480469 1141.070312 722.457031 1136.929688 C 732.28125 1131.28125 739.34375 1134.101562 743.644531 1145.398438 C 766.066406 1149.613281 788.664062 1151.023438 811.441406 1149.632812 C 811.441406 1127.050781 811.441406 1104.464844 811.441406 1081.882812 C 805.792969 1081.882812 800.140625 1081.882812 794.492188 1081.882812 C 800.140625 1014.132812 800.140625 946.382812 794.492188 878.632812 C 800.140625 878.632812 805.792969 878.632812 811.441406 878.632812 C 811.441406 868.753906 811.441406 858.871094 811.441406 848.992188 C 836.03125 851.476562 859.335938 848.652344 881.355469 840.523438 C 888.683594 842.53125 893.621094 846.765625 896.1875 853.226562 Z M 896.1875 853.226562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(20%,16.862746%,12.156863%)\",\n      fillOpacity: 1\n    },\n    d: \"M 396.1875 777.007812 C 403.5 787.347656 409.855469 798.640625 415.253906 810.882812 C 418.179688 816.125 420.296875 816.125 421.609375 810.882812 C 432.679688 812.839844 439.742188 819.191406 442.796875 829.9375 C 445.144531 844.324219 445.144531 860.554688 442.796875 878.632812 C 447.035156 878.632812 451.269531 878.632812 455.507812 878.632812 C 455 888.09375 456.410156 897.269531 459.746094 906.15625 C 468.421875 917.136719 475.484375 929.136719 480.933594 942.148438 C 474.410156 961.09375 470.171875 980.855469 468.21875 1001.429688 C 455.792969 1010.90625 457.207031 1015.140625 472.457031 1014.132812 C 471.757812 1029.722656 472.460938 1045.246094 474.578125 1060.710938 C 488.445312 1062.722656 501.863281 1064.136719 514.832031 1064.945312 C 499.464844 1074.769531 482.515625 1080.414062 463.984375 1081.882812 C 463.984375 1076.238281 463.984375 1070.589844 463.984375 1064.945312 C 434.320312 1064.945312 404.660156 1064.945312 375 1064.945312 C 370.761719 1062.121094 366.527344 1059.300781 362.289062 1056.476562 C 368.847656 1055.117188 371.671875 1050.882812 370.761719 1043.773438 C 348.164062 1043.773438 325.566406 1043.773438 302.964844 1043.773438 C 304.214844 1025.152344 307.039062 1006.804688 311.441406 988.726562 C 304.894531 984.695312 297.832031 983.285156 290.253906 984.492188 C 297.566406 951.277344 307.453125 918.8125 319.914062 887.101562 C 319.992188 879.171875 317.871094 877.761719 313.558594 882.867188 C 307.9375 905.292969 300.167969 926.464844 290.253906 946.382812 C 293.8125 928.046875 295.929688 909.699219 296.609375 891.335938 C 289.410156 887.5 281.640625 886.089844 273.304688 887.101562 C 273.984375 894.296875 273.277344 901.355469 271.1875 908.273438 C 269.082031 898.492188 268.375 888.613281 269.066406 878.632812 C 255.183594 877.429688 241.765625 878.839844 228.8125 882.867188 C 226.90625 898.484375 227.613281 914.007812 230.933594 929.445312 C 227.460938 939.234375 223.929688 949.117188 220.339844 959.085938 C 218.925781 942.148438 217.515625 925.210938 216.101562 908.273438 C 214.347656 906.339844 212.230469 904.925781 209.746094 904.039062 C 205.664062 919.402344 205.664062 934.929688 209.746094 950.617188 C 209.382812 958.378906 206.558594 964.023438 201.269531 967.554688 C 194.15625 968.464844 189.921875 965.640625 188.558594 959.085938 C 188.558594 956.261719 187.148438 954.851562 184.320312 954.851562 C 184.792969 952.238281 186.203125 950.121094 188.558594 948.5 C 183.796875 947.445312 179.558594 945.328125 175.847656 942.148438 C 172.183594 928.757812 167.945312 916.054688 163.136719 904.039062 C 162.363281 894.828125 159.539062 886.359375 154.660156 878.632812 C 168.207031 861.328125 176.683594 864.152344 180.085938 887.101562 C 191.382812 884.277344 202.683594 881.457031 213.984375 878.632812 C 224.078125 829.375 224.785156 779.972656 216.101562 730.429688 C 200.394531 718.785156 194.039062 703.261719 197.035156 683.851562 C 196.480469 680.722656 197.183594 677.898438 199.152344 675.382812 C 200.175781 687.191406 203 698.484375 207.628906 709.257812 C 208.554688 703.167969 210.671875 697.523438 213.984375 692.320312 C 219.015625 702.488281 224.664062 712.371094 230.933594 721.960938 C 228.230469 750.878906 226.816406 779.8125 226.695312 808.765625 C 229.042969 820.722656 231.160156 832.71875 233.050781 844.757812 C 238.796875 848.484375 245.152344 849.898438 252.117188 848.992188 C 252.839844 798.257812 254.957031 798.257812 258.472656 848.992188 C 260.230469 850.925781 262.347656 852.339844 264.832031 853.226562 C 287.875 845.230469 311.886719 842.410156 336.863281 844.757812 C 337.542969 851.953125 336.835938 859.011719 334.746094 865.929688 C 332.699219 861.914062 331.992188 857.679688 332.628906 853.226562 C 324.152344 853.226562 315.679688 853.226562 307.203125 853.226562 C 307.203125 857.460938 307.203125 861.695312 307.203125 865.929688 C 321.226562 873.390625 336.765625 877.625 353.8125 878.632812 C 353.8125 871.574219 353.8125 864.519531 353.8125 857.460938 C 361.28125 858.066406 368.34375 856.652344 375 853.226562 C 388.101562 863.515625 402.222656 871.984375 417.371094 878.632812 C 421.609375 877.222656 425.847656 875.808594 430.085938 874.398438 C 426.921875 869.164062 425.511719 863.515625 425.847656 857.460938 C 418.785156 857.460938 411.722656 857.460938 404.660156 857.460938 C 405.796875 830.125 402.972656 803.308594 396.1875 777.007812 Z M 396.1875 777.007812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(23.137255%,17.647059%,10.196079%)\",\n      fillOpacity: 1\n    },\n    d: \"M 718.21875 730.429688 C 721.351562 729.875 724.179688 730.582031 726.695312 732.546875 C 721.046875 735.371094 721.046875 738.191406 726.695312 741.015625 C 724.179688 742.980469 721.351562 743.6875 718.21875 743.132812 C 714 742.769531 710.46875 744.183594 707.628906 747.367188 C 707.269531 764.03125 703.035156 779.558594 694.914062 793.945312 C 689.167969 797.671875 682.8125 799.085938 675.847656 798.179688 C 662.820312 830.453125 647.289062 861.503906 629.238281 891.335938 C 623.601562 862.996094 619.363281 833.355469 616.527344 802.414062 C 612.382812 800.394531 608.851562 797.574219 605.933594 793.945312 C 586.9375 804.765625 587.640625 811.824219 608.050781 815.117188 C 596.070312 821.179688 583.359375 824.003906 569.914062 823.585938 C 575.21875 817.230469 579.457031 810.171875 582.628906 802.414062 C 586.777344 797.058594 591.011719 791.410156 595.339844 785.476562 C 603.371094 781.386719 611.847656 779.976562 620.761719 781.242188 C 624.539062 783.824219 628.777344 785.234375 633.472656 785.476562 C 632.769531 812.332031 633.472656 839.148438 635.59375 865.929688 C 646.070312 845.128906 653.839844 823.957031 658.898438 802.414062 C 661.816406 807.808594 665.351562 807.808594 669.492188 802.414062 C 681.199219 783.027344 691.792969 763.273438 701.269531 743.132812 C 706.089844 737.675781 711.738281 733.441406 718.21875 730.429688 Z M 718.21875 730.429688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(44.313726%,37.254903%,26.666668%)\",\n      fillOpacity: 1\n    },\n    d: \"M 633.472656 785.476562 C 643.445312 789.035156 651.917969 794.683594 658.898438 802.414062 C 653.839844 823.957031 646.070312 845.128906 635.59375 865.929688 C 633.472656 839.148438 632.769531 812.332031 633.472656 785.476562 Z M 633.472656 785.476562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(23.921569%,20.784314%,14.901961%)\",\n      fillOpacity: 1\n    },\n    d: \"M 718.21875 743.132812 C 725.964844 750.167969 734.441406 757.226562 743.644531 764.304688 C 738.863281 767.53125 733.917969 770.355469 728.8125 772.773438 C 716.050781 792.675781 703.339844 812.433594 690.679688 832.054688 C 669.808594 881.605469 652.859375 932.417969 639.832031 984.492188 C 633.5 989.773438 627.144531 989.773438 620.761719 984.492188 C 610.707031 980.046875 606.46875 972.285156 608.050781 961.203125 C 616.328125 938.488281 623.390625 915.199219 629.238281 891.335938 C 647.289062 861.503906 662.820312 830.453125 675.847656 798.179688 C 682.8125 799.085938 689.167969 797.671875 694.914062 793.945312 C 703.035156 779.558594 707.269531 764.03125 707.628906 747.367188 C 710.46875 744.183594 714 742.769531 718.21875 743.132812 Z M 718.21875 743.132812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(25.490198%,21.176471%,15.294118%)\",\n      fillOpacity: 1\n    },\n    d: \"M 290.253906 946.382812 C 285.425781 956.984375 282.601562 968.273438 281.78125 980.257812 C 272.59375 979.558594 262.707031 980.96875 252.117188 984.492188 C 251.441406 968.671875 247.910156 968.671875 241.527344 984.492188 C 240.894531 965.011719 237.363281 946.664062 230.933594 929.445312 C 227.613281 914.007812 226.90625 898.484375 228.8125 882.867188 C 241.765625 878.839844 255.183594 877.429688 269.066406 878.632812 C 268.375 888.613281 269.082031 898.492188 271.1875 908.273438 C 273.277344 901.355469 273.984375 894.296875 273.304688 887.101562 C 281.640625 886.089844 289.410156 887.5 296.609375 891.335938 C 295.929688 909.699219 293.8125 928.046875 290.253906 946.382812 Z M 290.253906 946.382812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(27.450982%,21.176471%,14.901961%)\",\n      fillOpacity: 1\n    },\n    d: \"M 36.015625 734.664062 C 35.3125 798.195312 36.015625 861.710938 38.136719 925.210938 C 39.546875 920.976562 40.960938 916.742188 42.371094 912.507812 C 44.140625 917.828125 47.671875 920.652344 52.964844 920.976562 C 52.964844 926.621094 52.964844 932.269531 52.964844 937.914062 C 75.683594 937.796875 98.285156 939.210938 120.761719 942.148438 C 139.957031 953.128906 161.144531 957.363281 184.320312 954.851562 C 187.148438 954.851562 188.558594 956.261719 188.558594 959.085938 C 165.445312 966.601562 141.433594 970.835938 116.527344 971.789062 C 94.742188 967.605469 72.144531 966.195312 48.730469 967.554688 C 48.730469 973.199219 48.730469 978.847656 48.730469 984.492188 C 47.671875 990.511719 44.140625 994.746094 38.136719 997.195312 C 36.203125 991.929688 38.320312 988.402344 44.492188 986.609375 C 32.941406 985.839844 21.640625 983.722656 10.59375 980.257812 C 25.902344 969.238281 26.609375 957.945312 12.710938 946.382812 C 7.886719 948.453125 2.945312 949.863281 -2.117188 950.617188 C -2.117188 930.855469 -2.117188 911.097656 -2.117188 891.335938 C 4.144531 890.226562 9.792969 891.636719 14.832031 895.570312 C 11.335938 899.320312 7.097656 900.730469 2.117188 899.804688 C 2.117188 904.039062 2.117188 908.273438 2.117188 912.507812 C 12.003906 912.507812 21.894531 912.507812 31.78125 912.507812 C 30.386719 852.476562 31.796875 793.195312 36.015625 734.664062 Z M 36.015625 734.664062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(32.156864%,28.235295%,21.176471%)\",\n      fillOpacity: 1\n    },\n    d: \"M 163.136719 904.039062 C 167.945312 916.054688 172.183594 928.757812 175.847656 942.148438 C 179.558594 945.328125 183.796875 947.445312 188.558594 948.5 C 186.203125 950.121094 184.792969 952.238281 184.320312 954.851562 C 161.144531 957.363281 139.957031 953.128906 120.761719 942.148438 C 132.390625 945.132812 143.691406 945.132812 154.660156 942.148438 C 148.84375 933.722656 144.605469 924.546875 141.949219 914.625 C 148.648438 906.5 155.710938 902.972656 163.136719 904.039062 Z M 163.136719 904.039062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(47.843137%,41.568628%,34.509805%)\",\n      fillOpacity: 1\n    },\n    d: \"M 188.558594 959.085938 C 189.921875 965.640625 194.15625 968.464844 201.269531 967.554688 C 206.429688 970.355469 212.078125 973.179688 218.21875 976.023438 C 217.695312 978.59375 216.285156 980.003906 213.984375 980.257812 C 196.734375 979.132812 179.785156 980.542969 163.136719 984.492188 C 159.007812 993.988281 157.59375 1003.867188 158.898438 1014.132812 C 154.660156 1014.132812 150.421875 1014.132812 146.1875 1014.132812 C 146.1875 1009.898438 146.1875 1005.664062 146.1875 1001.429688 C 150.789062 1000.921875 153.613281 998.097656 154.660156 992.960938 C 153.613281 987.824219 150.789062 985 146.1875 984.492188 C 126.515625 981.433594 106.742188 977.902344 86.863281 973.90625 C 96.652344 971.800781 106.539062 971.097656 116.527344 971.789062 C 141.433594 970.835938 165.445312 966.601562 188.558594 959.085938 Z M 188.558594 959.085938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(36.862746%,30.19608%,23.137255%)\",\n      fillOpacity: 1\n    },\n    d: \"M 48.730469 984.492188 C 60.027344 984.492188 71.328125 984.492188 82.628906 984.492188 C 82.628906 992.960938 82.628906 1001.429688 82.628906 1009.898438 C 66.519531 1010.464844 50.980469 1007.640625 36.015625 1001.429688 C 29.089844 1003.03125 22.734375 1005.851562 16.949219 1009.898438 C 10.847656 1007.15625 4.492188 1005.746094 -2.117188 1005.664062 C -2.117188 987.316406 -2.117188 968.964844 -2.117188 950.617188 C 2.945312 949.863281 7.886719 948.453125 12.710938 946.382812 C 26.609375 957.945312 25.902344 969.238281 10.59375 980.257812 C 21.640625 983.722656 32.941406 985.839844 44.492188 986.609375 C 38.320312 988.402344 36.203125 991.929688 38.136719 997.195312 C 44.140625 994.746094 47.671875 990.511719 48.730469 984.492188 Z M 48.730469 984.492188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(36.862746%,31.37255%,25.490198%)\",\n      fillOpacity: 1\n    },\n    d: \"M 362.289062 1056.476562 C 359.671875 1056.945312 357.554688 1058.355469 355.933594 1060.710938 C 323.875 1053.15625 290.683594 1049.625 256.355469 1050.125 C 265.066406 1048.808594 273.542969 1046.691406 281.78125 1043.773438 C 291.789062 1022.21875 291.789062 1001.046875 281.78125 980.257812 C 282.601562 968.273438 285.425781 956.984375 290.253906 946.382812 C 300.167969 926.464844 307.9375 905.292969 313.558594 882.867188 C 317.871094 877.761719 319.992188 879.171875 319.914062 887.101562 C 307.453125 918.8125 297.566406 951.277344 290.253906 984.492188 C 297.832031 983.285156 304.894531 984.695312 311.441406 988.726562 C 307.039062 1006.804688 304.214844 1025.152344 302.964844 1043.773438 C 325.566406 1043.773438 348.164062 1043.773438 370.761719 1043.773438 C 371.671875 1050.882812 368.847656 1055.117188 362.289062 1056.476562 Z M 362.289062 1056.476562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(27.450982%,20.784314%,13.725491%)\",\n      fillOpacity: 1\n    },\n    d: \"M 82.628906 1009.898438 C 88.917969 1025.140625 94.566406 1040.664062 99.578125 1056.476562 C 94.664062 1052.429688 89.71875 1048.195312 84.746094 1043.773438 C 80.921875 1044.800781 77.390625 1046.214844 74.152344 1048.007812 C 77.371094 1042.109375 80.195312 1035.757812 82.628906 1028.953125 C 82.265625 1024.265625 80.851562 1020.03125 78.390625 1016.25 C 50.769531 1013.621094 23.929688 1017.148438 -2.117188 1026.835938 C -2.117188 1019.777344 -2.117188 1012.722656 -2.117188 1005.664062 C 4.492188 1005.746094 10.847656 1007.15625 16.949219 1009.898438 C 22.734375 1005.851562 29.089844 1003.03125 36.015625 1001.429688 C 50.980469 1007.640625 66.519531 1010.464844 82.628906 1009.898438 Z M 82.628906 1009.898438 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(18.431373%,15.294118%,10.980392%)\",\n      fillOpacity: 1\n    },\n    d: \"M 116.527344 971.789062 C 106.539062 971.097656 96.652344 971.800781 86.863281 973.90625 C 106.742188 977.902344 126.515625 981.433594 146.1875 984.492188 C 146.1875 990.136719 146.1875 995.785156 146.1875 1001.429688 C 146.1875 1005.664062 146.1875 1009.898438 146.1875 1014.132812 C 150.421875 1014.132812 154.660156 1014.132812 158.898438 1014.132812 C 157.59375 1003.867188 159.007812 993.988281 163.136719 984.492188 C 179.785156 980.542969 196.734375 979.132812 213.984375 980.257812 C 221.964844 1025.773438 207.84375 1062.46875 171.609375 1090.351562 C 158.820312 1091.050781 146.109375 1090.34375 133.472656 1088.234375 C 121.449219 1078.335938 110.152344 1067.75 99.578125 1056.476562 C 94.566406 1040.664062 88.917969 1025.140625 82.628906 1009.898438 C 82.628906 1001.429688 82.628906 992.960938 82.628906 984.492188 C 71.328125 984.492188 60.027344 984.492188 48.730469 984.492188 C 48.730469 978.847656 48.730469 973.199219 48.730469 967.554688 C 72.144531 966.195312 94.742188 967.605469 116.527344 971.789062 Z M 116.527344 971.789062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(67.058825%,63.921571%,54.901963%)\",\n      fillOpacity: 1\n    },\n    d: \"M 146.1875 984.492188 C 150.789062 985 153.613281 987.824219 154.660156 992.960938 C 153.613281 998.097656 150.789062 1000.921875 146.1875 1001.429688 C 146.1875 995.785156 146.1875 990.136719 146.1875 984.492188 Z M 146.1875 984.492188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(29.803923%,23.137255%,16.078432%)\",\n      fillOpacity: 1\n    },\n    d: \"M 230.933594 929.445312 C 237.363281 946.664062 240.894531 965.011719 241.527344 984.492188 C 247.910156 968.671875 251.441406 968.671875 252.117188 984.492188 C 262.707031 980.96875 272.59375 979.558594 281.78125 980.257812 C 291.789062 1001.046875 291.789062 1022.21875 281.78125 1043.773438 C 273.542969 1046.691406 265.066406 1048.808594 256.355469 1050.125 C 290.683594 1049.625 323.875 1053.15625 355.933594 1060.710938 C 357.554688 1058.355469 359.671875 1056.945312 362.289062 1056.476562 C 366.527344 1059.300781 370.761719 1062.121094 375 1064.945312 C 360.34375 1078.636719 344.808594 1091.339844 328.390625 1103.054688 C 326.976562 1103.054688 325.566406 1103.054688 324.152344 1103.054688 C 326.757812 1093.640625 332.40625 1086.585938 341.101562 1081.882812 C 344.261719 1076.648438 345.675781 1071 345.339844 1064.945312 C 319.914062 1064.945312 294.492188 1064.945312 269.066406 1064.945312 C 255.828125 1060.800781 241.703125 1059.386719 226.695312 1060.710938 C 234.019531 1076.75 242.492188 1092.277344 252.117188 1107.289062 C 241.484375 1105.402344 233.007812 1108.21875 226.695312 1115.757812 C 222.863281 1118.761719 221.453125 1122.996094 222.457031 1128.460938 C 214.355469 1133.960938 205.878906 1138.195312 197.035156 1141.164062 C 181.496094 1146.808594 165.960938 1146.808594 150.421875 1141.164062 C 168.8125 1137.402344 187.175781 1131.757812 205.507812 1124.226562 C 215.484375 1116.832031 219.722656 1106.953125 218.21875 1094.585938 C 212.570312 1094.585938 206.921875 1094.585938 201.269531 1094.585938 C 201.269531 1100.230469 201.269531 1105.878906 201.269531 1111.523438 C 192.796875 1111.523438 184.320312 1111.523438 175.847656 1111.523438 C 175.300781 1104.257812 173.890625 1097.199219 171.609375 1090.351562 C 207.84375 1062.46875 221.964844 1025.773438 213.984375 980.257812 C 216.285156 980.003906 217.695312 978.59375 218.21875 976.023438 C 212.078125 973.179688 206.429688 970.355469 201.269531 967.554688 C 206.558594 964.023438 209.382812 958.378906 209.746094 950.617188 C 205.664062 934.929688 205.664062 919.402344 209.746094 904.039062 C 212.230469 904.925781 214.347656 906.339844 216.101562 908.273438 C 217.515625 925.210938 218.925781 942.148438 220.339844 959.085938 C 223.929688 949.117188 227.460938 939.234375 230.933594 929.445312 Z M 230.933594 929.445312 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(40.392157%,34.901962%,29.019609%)\",\n      fillOpacity: 1\n    },\n    d: \"M 697.035156 1043.773438 C 698.632812 1036.328125 701.457031 1029.269531 705.507812 1022.601562 C 700.882812 1010.097656 698.761719 997.394531 699.152344 984.492188 C 703.390625 994.371094 707.628906 1004.253906 711.863281 1014.132812 C 719.753906 997.539062 726.816406 980.601562 733.050781 963.320312 C 732.535156 995.398438 720.527344 1022.214844 697.035156 1043.773438 Z M 697.035156 1043.773438 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(48.235294%,37.254903%,26.274511%)\",\n      fillOpacity: 1\n    },\n    d: \"M 74.152344 1048.007812 C 70.808594 1049.207031 67.984375 1051.324219 65.679688 1054.359375 C 42.777344 1056.59375 20.175781 1060.121094 -2.117188 1064.945312 C -2.117188 1060.710938 -2.117188 1056.476562 -2.117188 1052.242188 C 20.394531 1049.710938 42.992188 1048.300781 65.679688 1048.007812 C 65.679688 1040.949219 65.679688 1033.894531 65.679688 1026.835938 C 42.992188 1027.128906 20.394531 1028.539062 -2.117188 1031.070312 C -2.117188 1029.660156 -2.117188 1028.246094 -2.117188 1026.835938 C 23.929688 1017.148438 50.769531 1013.621094 78.390625 1016.25 C 80.851562 1020.03125 82.265625 1024.265625 82.628906 1028.953125 C 80.195312 1035.757812 77.371094 1042.109375 74.152344 1048.007812 Z M 74.152344 1048.007812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(43.529412%,39.607844%,34.509805%)\",\n      fillOpacity: 1\n    },\n    d: \"M 680.085938 980.257812 C 682.730469 982.023438 684.140625 984.847656 684.320312 988.726562 C 680.664062 1006.039062 675.71875 1022.976562 669.492188 1039.539062 C 668.929688 1019.167969 672.460938 999.410156 680.085938 980.257812 Z M 680.085938 980.257812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(58.039218%,41.960785%,26.274511%)\",\n      fillOpacity: 1\n    },\n    d: \"M -2.117188 1052.242188 C -2.117188 1045.183594 -2.117188 1038.128906 -2.117188 1031.070312 C 20.394531 1028.539062 42.992188 1027.128906 65.679688 1026.835938 C 65.679688 1033.894531 65.679688 1040.949219 65.679688 1048.007812 C 42.992188 1048.300781 20.394531 1049.710938 -2.117188 1052.242188 Z M -2.117188 1052.242188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(20.784314%,16.078432%,10.980392%)\",\n      fillOpacity: 1\n    },\n    d: \"M 99.578125 1056.476562 C 114.078125 1077.710938 123.964844 1100.296875 129.238281 1124.226562 C 125.761719 1131.046875 120.113281 1133.871094 112.289062 1132.695312 C 109.464844 1132.695312 106.636719 1132.695312 103.8125 1132.695312 C 99.214844 1117.683594 89.328125 1109.214844 74.152344 1107.289062 C 75.449219 1095.074219 74.039062 1083.78125 69.914062 1073.414062 C 46.253906 1077.617188 22.242188 1080.4375 -2.117188 1081.882812 C -2.117188 1076.238281 -2.117188 1070.589844 -2.117188 1064.945312 C 20.175781 1060.121094 42.777344 1056.59375 65.679688 1054.359375 C 67.984375 1051.324219 70.808594 1049.207031 74.152344 1048.007812 C 77.390625 1046.214844 80.921875 1044.800781 84.746094 1043.773438 C 89.71875 1048.195312 94.664062 1052.429688 99.578125 1056.476562 Z M 99.578125 1056.476562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(59.607846%,47.450981%,36.078432%)\",\n      fillOpacity: 1\n    },\n    d: \"M 269.066406 1064.945312 C 294.492188 1064.945312 319.914062 1064.945312 345.339844 1064.945312 C 345.675781 1071 344.261719 1076.648438 341.101562 1081.882812 C 332.40625 1086.585938 326.757812 1093.640625 324.152344 1103.054688 C 313.46875 1097.761719 303.582031 1099.171875 294.492188 1107.289062 C 286.863281 1100.726562 277.683594 1096.492188 266.949219 1094.585938 C 265.535156 1095.996094 264.125 1097.410156 262.710938 1098.820312 C 251.070312 1090.382812 241.890625 1079.796875 235.167969 1067.0625 C 246.382812 1064.957031 257.679688 1064.25 269.066406 1064.945312 Z M 269.066406 1064.945312 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(40.784314%,33.333334%,25.882354%)\",\n      fillOpacity: 1\n    },\n    d: \"M 375 1064.945312 C 404.660156 1064.945312 434.320312 1064.945312 463.984375 1064.945312 C 463.984375 1070.589844 463.984375 1076.238281 463.984375 1081.882812 C 482.515625 1080.414062 499.464844 1074.769531 514.832031 1064.945312 C 517.65625 1064.945312 520.480469 1064.945312 523.304688 1064.945312 C 504.921875 1080.257812 489.390625 1098.605469 476.695312 1119.992188 C 473.636719 1121.761719 471.515625 1124.582031 470.339844 1128.460938 C 469.160156 1124.582031 467.042969 1121.761719 463.984375 1119.992188 C 458.953125 1115.613281 455.421875 1109.96875 453.390625 1103.054688 C 451.980469 1104.464844 450.5625 1105.878906 449.152344 1107.289062 C 446.21875 1103.320312 446.929688 1100.5 451.269531 1098.820312 C 453.886719 1098.351562 456.003906 1096.941406 457.628906 1094.585938 C 458.664062 1103.746094 462.902344 1110.804688 470.339844 1115.757812 C 477.203125 1108.386719 483.558594 1100.621094 489.40625 1092.46875 C 481.046875 1090.371094 472.570312 1089.664062 463.984375 1090.351562 C 462.210938 1087.292969 459.390625 1085.175781 455.507812 1084 C 457.445312 1082.246094 458.859375 1080.128906 459.746094 1077.648438 C 430.21875 1073.425781 400.558594 1072.015625 370.761719 1073.414062 C 371.097656 1079.46875 369.6875 1085.117188 366.527344 1090.351562 C 381.097656 1092.070312 393.808594 1096.304688 404.660156 1103.054688 C 384.605469 1104.226562 364.832031 1102.8125 345.339844 1098.820312 C 341.960938 1100.753906 340.546875 1103.578125 341.101562 1107.289062 C 335.632812 1108.292969 331.394531 1106.882812 328.390625 1103.054688 C 344.808594 1091.339844 360.34375 1078.636719 375 1064.945312 Z M 375 1064.945312 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(52.941179%,43.529412%,34.509805%)\",\n      fillOpacity: 1\n    },\n    d: \"M 69.914062 1073.414062 C 71.214844 1085.628906 69.800781 1096.921875 65.679688 1107.289062 C 51.007812 1103.132812 35.472656 1101.722656 19.066406 1103.054688 C 34.125 1099.882812 49.664062 1096.355469 65.679688 1092.46875 C 55.792969 1091.761719 45.902344 1091.058594 36.015625 1090.351562 C 24.28125 1090.472656 14.394531 1093.292969 6.355469 1098.820312 C 3.53125 1095.996094 0.707031 1093.175781 -2.117188 1090.351562 C -2.117188 1087.527344 -2.117188 1084.707031 -2.117188 1081.882812 C 22.242188 1080.4375 46.253906 1077.617188 69.914062 1073.414062 Z M 69.914062 1073.414062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(20%,17.254902%,11.764706%)\",\n      fillOpacity: 1\n    },\n    d: \"M 637.710938 1119.992188 C 633.578125 1125.558594 629.339844 1131.203125 625 1136.929688 C 628.917969 1141.425781 633.15625 1141.425781 637.710938 1136.929688 C 639.371094 1144.039062 641.492188 1151.097656 644.066406 1158.101562 C 653.113281 1150.574219 663.707031 1147.75 675.847656 1149.632812 C 676.988281 1157.800781 674.867188 1164.855469 669.492188 1170.804688 C 663.84375 1159.511719 658.191406 1159.511719 652.542969 1170.804688 C 634.386719 1167.734375 616.019531 1164.910156 597.457031 1162.335938 C 588.65625 1164.523438 580.183594 1167.347656 572.035156 1170.804688 C 571.191406 1178.859375 567.65625 1185.210938 561.441406 1189.859375 C 575.386719 1196.621094 589.511719 1202.972656 603.8125 1208.914062 C 607.996094 1222.753906 609.40625 1236.871094 608.050781 1251.257812 C 603.597656 1254.316406 600.769531 1258.550781 599.578125 1263.960938 C 595.996094 1259.003906 593.171875 1253.355469 591.101562 1247.023438 C 590.632812 1244.410156 589.21875 1242.292969 586.863281 1240.671875 C 593.722656 1239.671875 597.960938 1236.144531 599.578125 1230.085938 C 600.304688 1225.886719 598.890625 1223.066406 595.339844 1221.617188 C 572.40625 1221.179688 551.21875 1214.828125 531.78125 1202.5625 C 512.054688 1200.449219 492.285156 1199.742188 472.457031 1200.445312 C 473.460938 1194.980469 472.050781 1190.746094 468.21875 1187.742188 C 462.121094 1178.902344 459.296875 1169.023438 459.746094 1158.101562 C 463.984375 1158.101562 468.21875 1158.101562 472.457031 1158.101562 C 481.753906 1147.5625 491.640625 1136.976562 502.117188 1126.34375 C 491.097656 1128.042969 482.621094 1134.394531 476.695312 1145.398438 C 473.199219 1149.148438 468.960938 1150.558594 463.984375 1149.632812 C 462.179688 1145.28125 462.179688 1139.636719 463.984375 1132.695312 C 468.960938 1133.621094 473.199219 1132.210938 476.695312 1128.460938 C 481.144531 1124.527344 481.144531 1121.707031 476.695312 1119.992188 C 489.390625 1098.605469 504.921875 1080.257812 523.304688 1064.945312 C 537.515625 1059.636719 552.347656 1059.636719 567.796875 1064.945312 C 581.84375 1052.96875 597.382812 1043.089844 614.40625 1035.304688 C 616.527344 1036.714844 618.644531 1038.128906 620.761719 1039.539062 C 613.929688 1043.464844 606.867188 1046.996094 599.578125 1050.125 C 604.042969 1060.210938 606.867188 1070.796875 608.050781 1081.882812 C 582.761719 1082.214844 582.761719 1088.566406 608.050781 1100.9375 C 602.402344 1102.347656 596.75 1103.761719 591.101562 1105.171875 C 609.019531 1104.320312 624.558594 1109.261719 637.710938 1119.992188 Z M 637.710938 1119.992188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(41.568628%,30.19608%,19.215687%)\",\n      fillOpacity: 1\n    },\n    d: \"M 19.066406 1103.054688 C 14.367188 1102.8125 10.132812 1101.402344 6.355469 1098.820312 C 14.394531 1093.292969 24.28125 1090.472656 36.015625 1090.351562 C 45.902344 1091.058594 55.792969 1091.761719 65.679688 1092.46875 C 49.664062 1096.355469 34.125 1099.882812 19.066406 1103.054688 Z M 19.066406 1103.054688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(50.980395%,41.568628%,32.156864%)\",\n      fillOpacity: 1\n    },\n    d: \"M 463.984375 1090.351562 C 456.867188 1089.441406 452.632812 1092.265625 451.269531 1098.820312 C 446.929688 1100.5 446.21875 1103.320312 449.152344 1107.289062 C 450.5625 1105.878906 451.980469 1104.464844 453.390625 1103.054688 C 455.421875 1109.96875 458.953125 1115.613281 463.984375 1119.992188 C 449.402344 1120.835938 435.28125 1118.71875 421.609375 1113.640625 C 428.671875 1112.230469 435.734375 1110.816406 442.796875 1109.40625 C 429.257812 1108.640625 416.546875 1106.523438 404.660156 1103.054688 C 393.808594 1096.304688 381.097656 1092.070312 366.527344 1090.351562 C 369.6875 1085.117188 371.097656 1079.46875 370.761719 1073.414062 C 400.558594 1072.015625 430.21875 1073.425781 459.746094 1077.648438 C 458.859375 1080.128906 457.445312 1082.246094 455.507812 1084 C 459.390625 1085.175781 462.210938 1087.292969 463.984375 1090.351562 Z M 463.984375 1090.351562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(50.588238%,38.431373%,26.666668%)\",\n      fillOpacity: 1\n    },\n    d: \"M 269.066406 1064.945312 C 257.679688 1064.25 246.382812 1064.957031 235.167969 1067.0625 C 241.890625 1079.796875 251.070312 1090.382812 262.710938 1098.820312 C 264.125 1097.410156 265.535156 1095.996094 266.949219 1094.585938 C 277.683594 1096.492188 286.863281 1100.726562 294.492188 1107.289062 C 284.125 1107.777344 275.648438 1112.011719 269.066406 1119.992188 C 269.066406 1117.167969 267.65625 1115.757812 264.832031 1115.757812 C 262.824219 1109.804688 258.589844 1106.980469 252.117188 1107.289062 C 242.492188 1092.277344 234.019531 1076.75 226.695312 1060.710938 C 241.703125 1059.386719 255.828125 1060.800781 269.066406 1064.945312 Z M 269.066406 1064.945312 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(23.137255%,16.862746%,10.588235%)\",\n      fillOpacity: 1\n    },\n    d: \"M 463.984375 1090.351562 C 472.570312 1089.664062 481.046875 1090.371094 489.40625 1092.46875 C 483.558594 1100.621094 477.203125 1108.386719 470.339844 1115.757812 C 462.902344 1110.804688 458.664062 1103.746094 457.628906 1094.585938 C 456.003906 1096.941406 453.886719 1098.351562 451.269531 1098.820312 C 452.632812 1092.265625 456.867188 1089.441406 463.984375 1090.351562 Z M 463.984375 1090.351562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(37.64706%,32.941177%,26.666668%)\",\n      fillOpacity: 1\n    },\n    d: \"M 697.035156 1043.773438 C 689.582031 1056.96875 683.929688 1071.085938 680.085938 1086.117188 C 684.027344 1095.035156 688.964844 1103.503906 694.914062 1111.523438 C 697.757812 1114.707031 701.289062 1116.121094 705.507812 1115.757812 C 706.796875 1118.511719 708.207031 1121.335938 709.746094 1124.226562 C 701.710938 1128.316406 693.238281 1129.726562 684.320312 1128.460938 C 682.550781 1125.402344 679.730469 1123.285156 675.847656 1122.109375 C 680.8125 1120.335938 685.050781 1117.515625 688.558594 1113.640625 C 683.410156 1104.765625 679.878906 1105.472656 677.964844 1115.757812 C 672.949219 1099.035156 671.535156 1082.097656 673.730469 1064.945312 C 678.199219 1054.121094 685.964844 1047.0625 697.035156 1043.773438 Z M 697.035156 1043.773438 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(24.313726%,20.392157%,14.901961%)\",\n      fillOpacity: 1\n    },\n    d: \"M 99.578125 1056.476562 C 110.152344 1067.75 121.449219 1078.335938 133.472656 1088.234375 C 146.109375 1090.34375 158.820312 1091.050781 171.609375 1090.351562 C 173.890625 1097.199219 175.300781 1104.257812 175.847656 1111.523438 C 184.320312 1111.523438 192.796875 1111.523438 201.269531 1111.523438 C 201.269531 1105.878906 201.269531 1100.230469 201.269531 1094.585938 C 206.921875 1094.585938 212.570312 1094.585938 218.21875 1094.585938 C 219.722656 1106.953125 215.484375 1116.832031 205.507812 1124.226562 C 187.175781 1131.757812 168.8125 1137.402344 150.421875 1141.164062 C 136.75 1140.417969 124.035156 1137.59375 112.289062 1132.695312 C 120.113281 1133.871094 125.761719 1131.046875 129.238281 1124.226562 C 123.964844 1100.296875 114.078125 1077.710938 99.578125 1056.476562 Z M 99.578125 1056.476562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(84.313726%,67.843139%,49.411765%)\",\n      fillOpacity: 1\n    },\n    d: \"M 252.117188 1107.289062 C 258.589844 1106.980469 262.824219 1109.804688 264.832031 1115.757812 C 251.226562 1113.691406 239.21875 1116.515625 228.8125 1124.226562 C 226.847656 1121.710938 226.140625 1118.886719 226.695312 1115.757812 C 233.007812 1108.21875 241.484375 1105.402344 252.117188 1107.289062 Z M 252.117188 1107.289062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(65.098041%,47.843137%,28.235295%)\",\n      fillOpacity: 1\n    },\n    d: \"M -2.117188 1090.351562 C 0.707031 1093.175781 3.53125 1095.996094 6.355469 1098.820312 C 10.132812 1101.402344 14.367188 1102.8125 19.066406 1103.054688 C 35.472656 1101.722656 51.007812 1103.132812 65.679688 1107.289062 C 65.679688 1108.699219 65.679688 1110.113281 65.679688 1111.523438 C 65.957031 1113.378906 65.25 1114.792969 63.558594 1115.757812 C 46.214844 1111.03125 28.5625 1108.914062 10.59375 1109.40625 C 22.984375 1113.589844 35.695312 1116.410156 48.730469 1117.875 C 31.839844 1119.988281 14.890625 1120.695312 -2.117188 1119.992188 C -2.117188 1110.113281 -2.117188 1100.230469 -2.117188 1090.351562 Z M -2.117188 1090.351562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(83.92157%,65.098041%,44.313726%)\",\n      fillOpacity: 1\n    },\n    d: \"M 65.679688 1111.523438 C 72.453125 1110.386719 78.101562 1111.804688 82.628906 1115.757812 C 64.371094 1120.617188 46.011719 1125.554688 27.542969 1130.578125 C 25.1875 1132.199219 23.773438 1134.316406 23.304688 1136.929688 C 14.832031 1136.929688 6.355469 1136.929688 -2.117188 1136.929688 C -2.117188 1131.285156 -2.117188 1125.636719 -2.117188 1119.992188 C 14.890625 1120.695312 31.839844 1119.988281 48.730469 1117.875 C 35.695312 1116.410156 22.984375 1113.589844 10.59375 1109.40625 C 28.5625 1108.914062 46.214844 1111.03125 63.558594 1115.757812 C 65.25 1114.792969 65.957031 1113.378906 65.679688 1111.523438 Z M 65.679688 1111.523438 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(40.000001%,33.333334%,25.490198%)\",\n      fillOpacity: 1\n    },\n    d: \"M 540.253906 1090.351562 C 549.167969 1089.085938 557.644531 1090.496094 565.679688 1094.585938 C 562.851562 1097.410156 560.03125 1100.230469 557.203125 1103.054688 C 561.777344 1111.707031 568.839844 1117.351562 578.390625 1119.992188 C 587.859375 1114.691406 597.75 1112.574219 608.050781 1113.640625 C 597.082031 1118.710938 585.78125 1122.945312 574.152344 1126.34375 C 564.917969 1136.976562 554.328125 1146.152344 542.371094 1153.867188 C 538.1875 1141.484375 535.363281 1128.78125 533.898438 1115.757812 C 525.152344 1120.378906 515.96875 1121.085938 506.355469 1117.875 C 518.453125 1109.273438 529.753906 1100.101562 540.253906 1090.351562 Z M 540.253906 1090.351562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(44.313726%,27.450982%,12.941177%)\",\n      fillOpacity: 1\n    },\n    d: \"M 307.203125 1136.929688 C 297.808594 1133.25 287.921875 1131.839844 277.542969 1132.695312 C 283.351562 1127.246094 291.121094 1124.425781 300.847656 1124.226562 C 308.617188 1125.636719 316.382812 1127.050781 324.152344 1128.460938 C 319.589844 1133.5625 313.941406 1136.386719 307.203125 1136.929688 Z M 307.203125 1136.929688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(25.490198%,18.431373%,10.588235%)\",\n      fillOpacity: 1\n    },\n    d: \"M 404.660156 1103.054688 C 416.546875 1106.523438 429.257812 1108.640625 442.796875 1109.40625 C 435.734375 1110.816406 428.671875 1112.230469 421.609375 1113.640625 C 435.28125 1118.71875 449.402344 1120.835938 463.984375 1119.992188 C 467.042969 1121.761719 469.160156 1124.582031 470.339844 1128.460938 C 471.515625 1124.582031 473.636719 1121.761719 476.695312 1119.992188 C 481.144531 1121.707031 481.144531 1124.527344 476.695312 1128.460938 C 473.199219 1132.210938 468.960938 1133.621094 463.984375 1132.695312 C 462.179688 1139.636719 462.179688 1145.28125 463.984375 1149.632812 C 463.984375 1151.042969 463.984375 1152.457031 463.984375 1153.867188 C 454.390625 1150.824219 444.503906 1149.414062 434.320312 1149.632812 C 432.550781 1146.574219 429.730469 1144.457031 425.847656 1143.28125 C 437.148438 1136.222656 437.148438 1129.167969 425.847656 1122.109375 C 396.671875 1121.84375 368.421875 1116.902344 341.101562 1107.289062 C 340.546875 1103.578125 341.960938 1100.753906 345.339844 1098.820312 C 364.832031 1102.8125 384.605469 1104.226562 404.660156 1103.054688 Z M 404.660156 1103.054688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(37.254903%,34.901962%,29.803923%)\",\n      fillOpacity: 1\n    },\n    d: \"M 637.710938 1136.929688 C 633.15625 1141.425781 628.917969 1141.425781 625 1136.929688 C 629.339844 1131.203125 633.578125 1125.558594 637.710938 1119.992188 C 641.769531 1118.074219 645.304688 1115.253906 648.304688 1111.523438 C 649.011719 1112.933594 649.714844 1114.347656 650.421875 1115.757812 C 644.269531 1121.855469 640.035156 1128.910156 637.710938 1136.929688 Z M 637.710938 1136.929688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(65.098041%,45.490196%,28.235295%)\",\n      fillOpacity: 1\n    },\n    d: \"M 82.628906 1115.757812 C 84.039062 1118.582031 85.453125 1121.402344 86.863281 1124.226562 C 75.0625 1121.753906 68 1125.988281 65.679688 1136.929688 C 51.554688 1136.929688 37.429688 1136.929688 23.304688 1136.929688 C 23.773438 1134.316406 25.1875 1132.199219 27.542969 1130.578125 C 46.011719 1125.554688 64.371094 1120.617188 82.628906 1115.757812 Z M 82.628906 1115.757812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(86.274511%,68.627453%,51.372552%)\",\n      fillOpacity: 1\n    },\n    d: \"M 86.863281 1124.226562 C 90.695312 1127.230469 92.105469 1131.464844 91.101562 1136.929688 C 82.628906 1136.929688 74.152344 1136.929688 65.679688 1136.929688 C 68 1125.988281 75.0625 1121.753906 86.863281 1124.226562 Z M 86.863281 1124.226562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(72.549021%,48.235294%,25.098041%)\",\n      fillOpacity: 1\n    },\n    d: \"M 226.695312 1115.757812 C 226.140625 1118.886719 226.847656 1121.710938 228.8125 1124.226562 C 239.21875 1116.515625 251.226562 1113.691406 264.832031 1115.757812 C 267.65625 1115.757812 269.066406 1117.167969 269.066406 1119.992188 C 268.757812 1126.457031 271.582031 1130.691406 277.542969 1132.695312 C 259.164062 1138.511719 240.800781 1137.101562 222.457031 1128.460938 C 221.453125 1122.996094 222.863281 1118.761719 226.695312 1115.757812 Z M 226.695312 1115.757812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(35.294119%,25.882354%,15.294118%)\",\n      fillOpacity: 1\n    },\n    d: \"M 69.914062 1073.414062 C 74.039062 1083.78125 75.449219 1095.074219 74.152344 1107.289062 C 89.328125 1109.214844 99.214844 1117.683594 103.8125 1132.695312 C 101.957031 1132.421875 100.542969 1133.121094 99.578125 1134.8125 C 103.085938 1138.6875 107.320312 1141.507812 112.289062 1143.28125 C 74.179688 1145.398438 36.042969 1146.101562 -2.117188 1145.398438 C -2.117188 1142.574219 -2.117188 1139.753906 -2.117188 1136.929688 C 6.355469 1136.929688 14.832031 1136.929688 23.304688 1136.929688 C 37.429688 1136.929688 51.554688 1136.929688 65.679688 1136.929688 C 74.152344 1136.929688 82.628906 1136.929688 91.101562 1136.929688 C 92.105469 1131.464844 90.695312 1127.230469 86.863281 1124.226562 C 85.453125 1121.402344 84.039062 1118.582031 82.628906 1115.757812 C 78.101562 1111.804688 72.453125 1110.386719 65.679688 1111.523438 C 65.679688 1110.113281 65.679688 1108.699219 65.679688 1107.289062 C 69.800781 1096.921875 71.214844 1085.628906 69.914062 1073.414062 Z M 69.914062 1073.414062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(82.352942%,65.098041%,43.921569%)\",\n      fillOpacity: 1\n    },\n    d: \"M 222.457031 1128.460938 C 240.800781 1137.101562 259.164062 1138.511719 277.542969 1132.695312 C 287.921875 1131.839844 297.808594 1133.25 307.203125 1136.929688 C 299.917969 1139.140625 294.269531 1143.375 290.253906 1149.632812 C 263.269531 1148.234375 236.433594 1149.648438 209.746094 1153.867188 C 211.683594 1157.246094 214.507812 1158.65625 218.21875 1158.101562 C 218.21875 1159.511719 218.21875 1160.925781 218.21875 1162.335938 C 203.617188 1161.007812 189.492188 1157.476562 175.847656 1151.75 C 182.910156 1150.339844 189.972656 1148.925781 197.035156 1147.515625 C 202.28125 1144.59375 202.28125 1142.476562 197.035156 1141.164062 C 205.878906 1138.195312 214.355469 1133.960938 222.457031 1128.460938 Z M 222.457031 1128.460938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(47.450981%,43.137255%,36.078432%)\",\n      fillOpacity: 1\n    },\n    d: \"M 472.457031 1158.101562 C 471.007812 1154.554688 468.1875 1153.140625 463.984375 1153.867188 C 463.984375 1152.457031 463.984375 1151.042969 463.984375 1149.632812 C 468.960938 1150.558594 473.199219 1149.148438 476.695312 1145.398438 C 482.621094 1134.394531 491.097656 1128.042969 502.117188 1126.34375 C 491.640625 1136.976562 481.753906 1147.5625 472.457031 1158.101562 Z M 472.457031 1158.101562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(77.64706%,52.941179%,31.764707%)\",\n      fillOpacity: 1\n    },\n    d: \"M 290.253906 1149.632812 C 289.785156 1152.246094 288.371094 1154.363281 286.015625 1155.984375 C 263.460938 1158.097656 240.863281 1158.804688 218.21875 1158.101562 C 214.507812 1158.65625 211.683594 1157.246094 209.746094 1153.867188 C 236.433594 1149.648438 263.269531 1148.234375 290.253906 1149.632812 Z M 290.253906 1149.632812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(71.764708%,56.470591%,43.921569%)\",\n      fillOpacity: 1\n    },\n    d: \"M 434.320312 1149.632812 C 444.503906 1149.414062 454.390625 1150.824219 463.984375 1153.867188 C 468.1875 1153.140625 471.007812 1154.554688 472.457031 1158.101562 C 468.21875 1158.101562 463.984375 1158.101562 459.746094 1158.101562 C 459.296875 1169.023438 462.121094 1178.902344 468.21875 1187.742188 C 459.292969 1191.839844 449.402344 1193.253906 438.558594 1191.976562 C 418.855469 1192.78125 399.789062 1189.957031 381.355469 1183.507812 C 369.660156 1184.125 359.070312 1186.949219 349.578125 1191.976562 C 343.925781 1193.386719 338.277344 1194.800781 332.628906 1196.210938 C 340.679688 1186.488281 350.566406 1178.726562 362.289062 1172.921875 C 354.65625 1171.578125 353.246094 1168.753906 358.050781 1164.453125 C 367.601562 1158.621094 376.78125 1152.269531 385.59375 1145.398438 C 388.417969 1148.222656 388.417969 1151.042969 385.59375 1153.867188 C 378.085938 1157.273438 371.730469 1162.214844 366.527344 1168.6875 C 380.035156 1176.457031 392.746094 1175.046875 404.660156 1164.453125 C 399.011719 1163.042969 393.363281 1161.628906 387.710938 1160.21875 C 389.125 1158.808594 390.535156 1157.394531 391.949219 1155.984375 C 406.886719 1155.226562 421.011719 1153.109375 434.320312 1149.632812 Z M 434.320312 1149.632812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(44.313726%,38.82353%,28.627452%)\",\n      fillOpacity: 1\n    },\n    d: \"M -2.117188 1166.570312 C -2.117188 1165.160156 -2.117188 1163.746094 -2.117188 1162.335938 C 13.507812 1163.527344 29.042969 1165.644531 44.492188 1168.6875 C 28.722656 1171.558594 13.1875 1170.851562 -2.117188 1166.570312 Z M -2.117188 1166.570312 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(38.431373%,30.980393%,20.392157%)\",\n      fillOpacity: 1\n    },\n    d: \"M 319.914062 1175.039062 C 302.964844 1169.394531 286.015625 1169.394531 269.066406 1175.039062 C 257.539062 1173.078125 246.238281 1170.257812 235.167969 1166.570312 C 235.167969 1165.160156 235.167969 1163.746094 235.167969 1162.335938 C 257.941406 1163.726562 280.542969 1162.316406 302.964844 1158.101562 C 304.269531 1154.679688 306.386719 1151.855469 309.320312 1149.632812 C 323.773438 1152.992188 338.605469 1155.109375 353.8125 1155.984375 C 343.085938 1163.457031 331.785156 1169.808594 319.914062 1175.039062 Z M 319.914062 1175.039062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(67.058825%,50.980395%,37.64706%)\",\n      fillOpacity: 1\n    },\n    d: \"M 324.152344 1103.054688 C 325.566406 1103.054688 326.976562 1103.054688 328.390625 1103.054688 C 331.394531 1106.882812 335.632812 1108.292969 341.101562 1107.289062 C 368.421875 1116.902344 396.671875 1121.84375 425.847656 1122.109375 C 437.148438 1129.167969 437.148438 1136.222656 425.847656 1143.28125 C 429.730469 1144.457031 432.550781 1146.574219 434.320312 1149.632812 C 421.011719 1153.109375 406.886719 1155.226562 391.949219 1155.984375 C 390.535156 1157.394531 389.125 1158.808594 387.710938 1160.21875 C 393.363281 1161.628906 399.011719 1163.042969 404.660156 1164.453125 C 392.746094 1175.046875 380.035156 1176.457031 366.527344 1168.6875 C 371.730469 1162.214844 378.085938 1157.273438 385.59375 1153.867188 C 388.417969 1151.042969 388.417969 1148.222656 385.59375 1145.398438 C 376.78125 1152.269531 367.601562 1158.621094 358.050781 1164.453125 C 353.246094 1168.753906 354.65625 1171.578125 362.289062 1172.921875 C 350.566406 1178.726562 340.679688 1186.488281 332.628906 1196.210938 C 324.152344 1194.800781 315.679688 1193.386719 307.203125 1191.976562 C 304.074219 1192.53125 301.246094 1191.824219 298.730469 1189.859375 C 305.914062 1184.878906 312.976562 1179.9375 319.914062 1175.039062 C 331.785156 1169.808594 343.085938 1163.457031 353.8125 1155.984375 C 338.605469 1155.109375 323.773438 1152.992188 309.320312 1149.632812 C 306.386719 1151.855469 304.269531 1154.679688 302.964844 1158.101562 C 280.542969 1162.316406 257.941406 1163.726562 235.167969 1162.335938 C 229.519531 1162.335938 223.871094 1162.335938 218.21875 1162.335938 C 218.21875 1160.925781 218.21875 1159.511719 218.21875 1158.101562 C 240.863281 1158.804688 263.460938 1158.097656 286.015625 1155.984375 C 288.371094 1154.363281 289.785156 1152.246094 290.253906 1149.632812 C 294.269531 1143.375 299.917969 1139.140625 307.203125 1136.929688 C 313.941406 1136.386719 319.589844 1133.5625 324.152344 1128.460938 C 316.382812 1127.050781 308.617188 1125.636719 300.847656 1124.226562 C 291.121094 1124.425781 283.351562 1127.246094 277.542969 1132.695312 C 271.582031 1130.691406 268.757812 1126.457031 269.066406 1119.992188 C 275.648438 1112.011719 284.125 1107.777344 294.492188 1107.289062 C 303.582031 1099.171875 313.46875 1097.761719 324.152344 1103.054688 Z M 324.152344 1103.054688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(92.156863%,86.274511%,76.078433%)\",\n      fillOpacity: 1\n    },\n    d: \"M 103.8125 1132.695312 C 106.636719 1132.695312 109.464844 1132.695312 112.289062 1132.695312 C 124.035156 1137.59375 136.75 1140.417969 150.421875 1141.164062 C 165.960938 1146.808594 181.496094 1146.808594 197.035156 1141.164062 C 202.28125 1142.476562 202.28125 1144.59375 197.035156 1147.515625 C 189.972656 1148.925781 182.910156 1150.339844 175.847656 1151.75 C 189.492188 1157.476562 203.617188 1161.007812 218.21875 1162.335938 C 223.871094 1162.335938 229.519531 1162.335938 235.167969 1162.335938 C 235.167969 1163.746094 235.167969 1165.160156 235.167969 1166.570312 C 218.21875 1169.394531 201.269531 1172.214844 184.320312 1175.039062 C 122.324219 1180.113281 60.175781 1182.9375 -2.117188 1183.507812 C -2.117188 1177.863281 -2.117188 1172.214844 -2.117188 1166.570312 C 13.1875 1170.851562 28.722656 1171.558594 44.492188 1168.6875 C 29.042969 1165.644531 13.507812 1163.527344 -2.117188 1162.335938 C -2.117188 1156.691406 -2.117188 1151.042969 -2.117188 1145.398438 C 36.042969 1146.101562 74.179688 1145.398438 112.289062 1143.28125 C 107.320312 1141.507812 103.085938 1138.6875 99.578125 1134.8125 C 100.542969 1133.121094 101.957031 1132.421875 103.8125 1132.695312 Z M 103.8125 1132.695312 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(47.843137%,41.176471%,31.37255%)\",\n      fillOpacity: 1\n    },\n    d: \"M 112.289062 1153.867188 C 125.9375 1152.207031 138.652344 1154.324219 150.421875 1160.21875 C 117.890625 1165.863281 85.40625 1170.097656 52.964844 1172.921875 C 73.300781 1166.792969 93.074219 1160.441406 112.289062 1153.867188 Z M 112.289062 1153.867188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(84.705883%,76.47059%,66.666669%)\",\n      fillOpacity: 1\n    },\n    d: \"M 235.167969 1166.570312 C 246.238281 1170.257812 257.539062 1173.078125 269.066406 1175.039062 C 273.148438 1178.691406 273.148438 1181.519531 269.066406 1183.507812 C 241.261719 1176.957031 213.015625 1174.132812 184.320312 1175.039062 C 201.269531 1172.214844 218.21875 1169.394531 235.167969 1166.570312 Z M 235.167969 1166.570312 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(53.725493%,44.313726%,33.333334%)\",\n      fillOpacity: 1\n    },\n    d: \"M 184.320312 1175.039062 C 213.015625 1174.132812 241.261719 1176.957031 269.066406 1183.507812 C 273.148438 1181.519531 273.148438 1178.691406 269.066406 1175.039062 C 281.371094 1179.757812 289.847656 1188.226562 294.492188 1200.445312 C 293.042969 1203.992188 290.21875 1205.40625 286.015625 1204.679688 C 278.589844 1197.382812 270.117188 1191.03125 260.59375 1185.625 C 215.875 1182.554688 171.382812 1184.671875 127.117188 1191.976562 C 108.273438 1190.703125 108.980469 1188.585938 129.238281 1185.625 C 110.359375 1183.175781 92 1185.292969 74.152344 1191.976562 C 48.765625 1190.003906 23.34375 1188.59375 -2.117188 1187.742188 C -2.117188 1186.332031 -2.117188 1184.917969 -2.117188 1183.507812 C 60.175781 1182.9375 122.324219 1180.113281 184.320312 1175.039062 Z M 184.320312 1175.039062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(27.450982%,17.647059%,10.196079%)\",\n      fillOpacity: 1\n    },\n    d: \"M 269.066406 1175.039062 C 286.015625 1169.394531 302.964844 1169.394531 319.914062 1175.039062 C 312.976562 1179.9375 305.914062 1184.878906 298.730469 1189.859375 C 301.246094 1191.824219 304.074219 1192.53125 307.203125 1191.976562 C 304.378906 1194.800781 301.554688 1197.621094 298.730469 1200.445312 C 297.316406 1200.445312 295.902344 1200.445312 294.492188 1200.445312 C 289.847656 1188.226562 281.371094 1179.757812 269.066406 1175.039062 Z M 269.066406 1175.039062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(13.725491%,12.941177%,10.588235%)\",\n      fillOpacity: 1\n    },\n    d: \"M 997.882812 1183.507812 C 997.882812 1239.964844 997.882812 1296.425781 997.882812 1352.882812 C 951.269531 1352.882812 904.660156 1352.882812 858.050781 1352.882812 C 860.46875 1346.644531 860.46875 1339.585938 858.050781 1331.710938 C 862.289062 1331.710938 866.527344 1331.710938 870.761719 1331.710938 C 869.394531 1315.933594 870.808594 1300.40625 875 1285.132812 C 879.167969 1297.53125 880.582031 1310.234375 879.238281 1323.242188 C 884.886719 1323.242188 890.539062 1323.242188 896.1875 1323.242188 C 895.105469 1308.464844 900.753906 1297.171875 913.136719 1289.367188 C 909.421875 1286.1875 905.1875 1284.070312 900.421875 1283.015625 C 908.136719 1278.871094 913.082031 1272.519531 915.253906 1263.960938 C 917.367188 1248.496094 918.070312 1232.972656 917.371094 1217.382812 C 937.148438 1217.382812 956.917969 1217.382812 976.695312 1217.382812 C 978.105469 1206.089844 979.519531 1194.800781 980.933594 1183.507812 C 986.582031 1183.507812 992.234375 1183.507812 997.882812 1183.507812 Z M 997.882812 1183.507812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(32.941177%,25.882354%,17.647059%)\",\n      fillOpacity: 1\n    },\n    d: \"M -2.117188 1187.742188 C 23.34375 1188.59375 48.765625 1190.003906 74.152344 1191.976562 C 88.886719 1195.460938 104.421875 1197.578125 120.761719 1198.328125 C 106.113281 1200.78125 94.8125 1204.3125 86.863281 1208.914062 C 78.507812 1211.722656 69.324219 1213.132812 59.320312 1213.148438 C 38.914062 1209.277344 18.433594 1206.453125 -2.117188 1204.679688 C -2.117188 1199.035156 -2.117188 1193.386719 -2.117188 1187.742188 Z M -2.117188 1187.742188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(40.784314%,30.980393%,20.784314%)\",\n      fillOpacity: 1\n    },\n    d: \"M 286.015625 1204.679688 C 283.191406 1204.679688 281.78125 1206.089844 281.78125 1208.914062 C 277.542969 1208.914062 273.304688 1208.914062 269.066406 1208.914062 C 269.066406 1204.679688 269.066406 1200.445312 269.066406 1196.210938 C 213.960938 1188.804688 160.289062 1193.039062 108.050781 1208.914062 C 100.988281 1208.914062 93.925781 1208.914062 86.863281 1208.914062 C 94.8125 1204.3125 106.113281 1200.78125 120.761719 1198.328125 C 104.421875 1197.578125 88.886719 1195.460938 74.152344 1191.976562 C 92 1185.292969 110.359375 1183.175781 129.238281 1185.625 C 108.980469 1188.585938 108.273438 1190.703125 127.117188 1191.976562 C 171.382812 1184.671875 215.875 1182.554688 260.59375 1185.625 C 270.117188 1191.03125 278.589844 1197.382812 286.015625 1204.679688 Z M 286.015625 1204.679688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(24.705882%,16.862746%,7.843138%)\",\n      fillOpacity: 1\n    },\n    d: \"M 438.558594 1191.976562 C 408.898438 1197.621094 379.238281 1197.621094 349.578125 1191.976562 C 359.070312 1186.949219 369.660156 1184.125 381.355469 1183.507812 C 399.789062 1189.957031 418.855469 1192.78125 438.558594 1191.976562 Z M 438.558594 1191.976562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(41.568628%,36.470589%,27.450982%)\",\n      fillOpacity: 1\n    },\n    d: \"M 468.21875 1187.742188 C 472.050781 1190.746094 473.460938 1194.980469 472.457031 1200.445312 C 414.546875 1200.445312 356.636719 1200.445312 298.730469 1200.445312 C 301.554688 1197.621094 304.378906 1194.800781 307.203125 1191.976562 C 315.679688 1193.386719 324.152344 1194.800781 332.628906 1196.210938 C 338.277344 1194.800781 343.925781 1193.386719 349.578125 1191.976562 C 379.238281 1197.621094 408.898438 1197.621094 438.558594 1191.976562 C 449.402344 1193.253906 459.292969 1191.839844 468.21875 1187.742188 Z M 468.21875 1187.742188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(95.686275%,92.54902%,83.137256%)\",\n      fillOpacity: 1\n    },\n    d: \"M 294.492188 1200.445312 C 295.902344 1200.445312 297.316406 1200.445312 298.730469 1200.445312 C 356.636719 1200.445312 414.546875 1200.445312 472.457031 1200.445312 C 492.285156 1199.742188 512.054688 1200.449219 531.78125 1202.5625 C 551.21875 1214.828125 572.40625 1221.179688 595.339844 1221.617188 C 558.613281 1224.441406 521.894531 1227.261719 485.167969 1230.085938 C 449.832031 1230.894531 414.519531 1232.304688 379.238281 1234.320312 C 345.636719 1224.480469 311.742188 1220.246094 277.542969 1221.617188 C 287.269531 1220.328125 288.683594 1216.09375 281.78125 1208.914062 C 281.78125 1206.089844 283.191406 1204.679688 286.015625 1204.679688 C 290.21875 1205.40625 293.042969 1203.992188 294.492188 1200.445312 Z M 294.492188 1200.445312 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(26.274511%,20.392157%,14.117648%)\",\n      fillOpacity: 1\n    },\n    d: \"M -2.117188 1204.679688 C 18.433594 1206.453125 38.914062 1209.277344 59.320312 1213.148438 C 69.324219 1213.132812 78.507812 1211.722656 86.863281 1208.914062 C 93.925781 1208.914062 100.988281 1208.914062 108.050781 1208.914062 C 99.800781 1211.667969 92.738281 1216.609375 86.863281 1223.734375 C 62.628906 1227.070312 38.617188 1226.363281 14.832031 1221.617188 C 10.152344 1226.40625 11.566406 1229.9375 19.066406 1232.203125 C 48.730469 1235.027344 78.390625 1235.027344 108.050781 1232.203125 C 138.308594 1221.71875 169.382812 1217.484375 201.269531 1219.5 C 197.035156 1220.910156 192.796875 1222.324219 188.558594 1223.734375 C 208.332031 1225.144531 228.105469 1226.558594 247.882812 1227.96875 C 220.902344 1230.144531 194.066406 1231.554688 167.371094 1232.203125 C 177.691406 1227.957031 176.277344 1225.839844 163.136719 1225.851562 C 108.867188 1238.386719 53.785156 1244.035156 -2.117188 1242.789062 C -2.117188 1230.085938 -2.117188 1217.382812 -2.117188 1204.679688 Z M -2.117188 1204.679688 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(70.588237%,64.705884%,54.901963%)\",\n      fillOpacity: 1\n    },\n    d: \"M 595.339844 1221.617188 C 598.890625 1223.066406 600.304688 1225.886719 599.578125 1230.085938 C 576.980469 1230.085938 554.378906 1230.085938 531.78125 1230.085938 C 516.242188 1230.085938 500.707031 1230.085938 485.167969 1230.085938 C 521.894531 1227.261719 558.613281 1224.441406 595.339844 1221.617188 Z M 595.339844 1221.617188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(33.333334%,26.666668%,20%)\",\n      fillOpacity: 1\n    },\n    d: \"M 281.78125 1208.914062 C 288.683594 1216.09375 287.269531 1220.328125 277.542969 1221.617188 C 273.304688 1221.617188 269.066406 1221.617188 264.832031 1221.617188 C 264.832031 1230.085938 264.832031 1238.554688 264.832031 1247.023438 C 261 1244.019531 259.585938 1239.785156 260.59375 1234.320312 C 178.484375 1240.148438 96.5625 1245.792969 14.832031 1251.257812 C 9.179688 1251.257812 3.53125 1251.257812 -2.117188 1251.257812 C -2.117188 1248.433594 -2.117188 1245.613281 -2.117188 1242.789062 C 53.785156 1244.035156 108.867188 1238.386719 163.136719 1225.851562 C 176.277344 1225.839844 177.691406 1227.957031 167.371094 1232.203125 C 194.066406 1231.554688 220.902344 1230.144531 247.882812 1227.96875 C 228.105469 1226.558594 208.332031 1225.144531 188.558594 1223.734375 C 192.796875 1222.324219 197.035156 1220.910156 201.269531 1219.5 C 169.382812 1217.484375 138.308594 1221.71875 108.050781 1232.203125 C 78.390625 1235.027344 48.730469 1235.027344 19.066406 1232.203125 C 11.566406 1229.9375 10.152344 1226.40625 14.832031 1221.617188 C 38.617188 1226.363281 62.628906 1227.070312 86.863281 1223.734375 C 92.738281 1216.609375 99.800781 1211.667969 108.050781 1208.914062 C 160.289062 1193.039062 213.960938 1188.804688 269.066406 1196.210938 C 269.066406 1200.445312 269.066406 1204.679688 269.066406 1208.914062 C 273.304688 1208.914062 277.542969 1208.914062 281.78125 1208.914062 Z M 281.78125 1208.914062 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(57.647061%,43.529412%,34.509805%)\",\n      fillOpacity: 1\n    },\n    d: \"M 277.542969 1221.617188 C 311.742188 1220.246094 345.636719 1224.480469 379.238281 1234.320312 C 368.019531 1239.925781 356.71875 1239.925781 345.339844 1234.320312 C 338.261719 1235.03125 332.609375 1237.855469 328.390625 1242.789062 C 314.773438 1241.476562 302.0625 1242.886719 290.253906 1247.023438 C 281.78125 1247.023438 273.304688 1247.023438 264.832031 1247.023438 C 264.832031 1238.554688 264.832031 1230.085938 264.832031 1221.617188 C 269.066406 1221.617188 273.304688 1221.617188 277.542969 1221.617188 Z M 277.542969 1221.617188 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(46.27451%,38.82353%,30.19608%)\",\n      fillOpacity: 1\n    },\n    d: \"M 485.167969 1230.085938 C 500.707031 1230.085938 516.242188 1230.085938 531.78125 1230.085938 C 500.652344 1233.855469 469.582031 1238.089844 438.558594 1242.789062 C 401.835938 1242.789062 365.113281 1242.789062 328.390625 1242.789062 C 332.609375 1237.855469 338.261719 1235.03125 345.339844 1234.320312 C 356.71875 1239.925781 368.019531 1239.925781 379.238281 1234.320312 C 414.519531 1232.304688 449.832031 1230.894531 485.167969 1230.085938 Z M 485.167969 1230.085938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(37.254903%,30.980393%,20.784314%)\",\n      fillOpacity: 1\n    },\n    d: \"M 531.78125 1230.085938 C 554.378906 1230.085938 576.980469 1230.085938 599.578125 1230.085938 C 597.960938 1236.144531 593.722656 1239.671875 586.863281 1240.671875 C 589.21875 1242.292969 590.632812 1244.410156 591.101562 1247.023438 C 559.882812 1246.25 528.808594 1247.660156 497.882812 1251.257812 C 480.019531 1243.058594 460.25 1240.234375 438.558594 1242.789062 C 469.582031 1238.089844 500.652344 1233.855469 531.78125 1230.085938 Z M 531.78125 1230.085938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(31.37255%,23.529412%,14.509805%)\",\n      fillOpacity: 1\n    },\n    d: \"M 290.253906 1247.023438 C 302.0625 1242.886719 314.773438 1241.476562 328.390625 1242.789062 C 365.113281 1242.789062 401.835938 1242.789062 438.558594 1242.789062 C 460.25 1240.234375 480.019531 1243.058594 497.882812 1251.257812 C 485.167969 1251.257812 472.457031 1251.257812 459.746094 1251.257812 C 404 1247.039062 347.503906 1245.628906 290.253906 1247.023438 Z M 290.253906 1247.023438 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(21.568628%,18.039216%,12.156863%)\",\n      fillOpacity: 1\n    },\n    d: \"M 264.832031 1247.023438 C 273.304688 1247.023438 281.78125 1247.023438 290.253906 1247.023438 C 347.503906 1245.628906 404 1247.039062 459.746094 1251.257812 C 456.917969 1251.257812 454.097656 1251.257812 451.269531 1251.257812 C 359.296875 1253.480469 267.492188 1258.421875 175.847656 1266.078125 C 177.785156 1267.832031 179.199219 1269.949219 180.085938 1272.429688 C 254.890625 1276.664062 329.75 1278.074219 404.660156 1276.664062 C 273.964844 1285.742188 142.609375 1285.742188 10.59375 1276.664062 C 6 1277.449219 1.765625 1278.859375 -2.117188 1280.898438 C -2.117188 1275.253906 -2.117188 1269.605469 -2.117188 1263.960938 C 7.710938 1266.785156 17.597656 1267.492188 27.542969 1266.078125 C 20.917969 1262.863281 16.683594 1257.921875 14.832031 1251.257812 C 96.5625 1245.792969 178.484375 1240.148438 260.59375 1234.320312 C 259.585938 1239.785156 261 1244.019531 264.832031 1247.023438 Z M 264.832031 1247.023438 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(93.725491%,88.627452%,78.823531%)\",\n      fillOpacity: 1\n    },\n    d: \"M 591.101562 1247.023438 C 593.171875 1253.355469 595.996094 1259.003906 599.578125 1263.960938 C 600.488281 1271.070312 597.660156 1275.304688 591.101562 1276.664062 C 576.820312 1269.722656 561.285156 1265.488281 544.492188 1263.960938 C 517.589844 1262.964844 490.75 1260.847656 463.984375 1257.609375 C 458.742188 1256.628906 454.503906 1254.511719 451.269531 1251.257812 C 454.097656 1251.257812 456.917969 1251.257812 459.746094 1251.257812 C 472.457031 1251.257812 485.167969 1251.257812 497.882812 1251.257812 C 528.808594 1247.660156 559.882812 1246.25 591.101562 1247.023438 Z M 591.101562 1247.023438 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(70.588237%,64.705884%,58.039218%)\",\n      fillOpacity: 1\n    },\n    d: \"M -2.117188 1251.257812 C 3.53125 1251.257812 9.179688 1251.257812 14.832031 1251.257812 C 16.683594 1257.921875 20.917969 1262.863281 27.542969 1266.078125 C 17.597656 1267.492188 7.710938 1266.785156 -2.117188 1263.960938 C -2.117188 1259.726562 -2.117188 1255.492188 -2.117188 1251.257812 Z M -2.117188 1251.257812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(15.686275%,13.725491%,10.980392%)\",\n      fillOpacity: 1\n    },\n    d: \"M 896.1875 853.226562 C 892.457031 861.226562 892.457031 869.695312 896.1875 878.632812 C 903.25 878.632812 910.308594 878.632812 917.371094 878.632812 C 916.582031 887.371094 914.460938 895.839844 911.015625 904.039062 C 897.800781 914.738281 892.859375 928.851562 896.1875 946.382812 C 901.835938 946.382812 907.488281 946.382812 913.136719 946.382812 C 912.503906 950.835938 913.207031 955.070312 915.253906 959.085938 C 922.164062 948.339844 927.8125 937.046875 932.203125 925.210938 C 936.488281 928.753906 941.433594 930.164062 947.035156 929.445312 C 947.035156 935.089844 947.035156 940.738281 947.035156 946.382812 C 951.269531 946.382812 955.507812 946.382812 959.746094 946.382812 C 972.480469 969.121094 985.191406 991.703125 997.882812 1014.132812 C 997.882812 1070.589844 997.882812 1127.050781 997.882812 1183.507812 C 992.234375 1183.507812 986.582031 1183.507812 980.933594 1183.507812 C 979.519531 1194.800781 978.105469 1206.089844 976.695312 1217.382812 C 956.917969 1217.382812 937.148438 1217.382812 917.371094 1217.382812 C 918.070312 1232.972656 917.367188 1248.496094 915.253906 1263.960938 C 913.082031 1272.519531 908.136719 1278.871094 900.421875 1283.015625 C 905.1875 1284.070312 909.421875 1286.1875 913.136719 1289.367188 C 900.753906 1297.171875 895.105469 1308.464844 896.1875 1323.242188 C 890.539062 1323.242188 884.886719 1323.242188 879.238281 1323.242188 C 880.582031 1310.234375 879.167969 1297.53125 875 1285.132812 C 870.808594 1300.40625 869.394531 1315.933594 870.761719 1331.710938 C 866.527344 1331.710938 862.289062 1331.710938 858.050781 1331.710938 C 860.46875 1339.585938 860.46875 1346.644531 858.050781 1352.882812 C 766.242188 1352.882812 674.4375 1352.882812 582.628906 1352.882812 C 590.695312 1340.613281 598.460938 1327.910156 605.933594 1314.773438 C 608.757812 1306.304688 608.757812 1297.835938 605.933594 1289.367188 C 597.050781 1284.222656 597.757812 1280.691406 608.050781 1278.78125 C 602.402344 1274.546875 602.402344 1270.3125 608.050781 1266.078125 C 621.003906 1264.992188 633.714844 1262.875 646.1875 1259.726562 C 678.433594 1263.820312 710.917969 1265.230469 743.644531 1263.960938 C 743.644531 1272.429688 743.644531 1280.898438 743.644531 1289.367188 C 766.242188 1287.957031 788.84375 1286.542969 811.441406 1285.132812 C 812.707031 1276.222656 811.296875 1267.753906 807.203125 1259.726562 C 790.253906 1251.257812 777.542969 1238.554688 769.066406 1221.617188 C 805.683594 1217.390625 842.40625 1215.980469 879.238281 1217.382812 C 879.238281 1194.800781 879.238281 1172.214844 879.238281 1149.632812 C 886.203125 1150.539062 892.558594 1149.125 898.304688 1145.398438 C 904.234375 1148.476562 910.589844 1150.59375 917.371094 1151.75 C 911.996094 1160.808594 911.996094 1169.980469 917.371094 1179.273438 C 923.617188 1175.308594 927.855469 1169.660156 930.085938 1162.335938 C 952.144531 1154.28125 950.734375 1150.046875 925.847656 1149.632812 C 926.777344 1144.65625 925.363281 1140.421875 921.609375 1136.929688 C 913.148438 1134.871094 907.496094 1129.929688 904.660156 1122.109375 C 909.171875 1086.207031 909.171875 1050.214844 904.660156 1014.132812 C 896.1875 1014.132812 887.710938 1014.132812 879.238281 1014.132812 C 879.238281 991.550781 879.238281 968.964844 879.238281 946.382812 C 864.839844 947.738281 850.710938 946.328125 836.863281 942.148438 C 843.636719 929.019531 852.816406 917.722656 864.40625 908.273438 C 866.511719 898.492188 867.214844 888.613281 866.527344 878.632812 C 870.761719 878.632812 875 878.632812 879.238281 878.632812 C 878.558594 871.4375 879.261719 864.378906 881.355469 857.460938 C 882.765625 858.871094 884.183594 860.285156 885.59375 861.695312 C 888.59375 857.964844 892.128906 855.144531 896.1875 853.226562 Z M 896.1875 853.226562 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(32.941177%,27.843139%,21.960784%)\",\n      fillOpacity: 1\n    },\n    d: \"M 451.269531 1251.257812 C 454.503906 1254.511719 458.742188 1256.628906 463.984375 1257.609375 C 490.75 1260.847656 517.589844 1262.964844 544.492188 1263.960938 C 515.09375 1270.117188 485.433594 1274.351562 455.507812 1276.664062 C 438.558594 1276.664062 421.609375 1276.664062 404.660156 1276.664062 C 329.75 1278.074219 254.890625 1276.664062 180.085938 1272.429688 C 179.199219 1269.949219 177.785156 1267.832031 175.847656 1266.078125 C 267.492188 1258.421875 359.296875 1253.480469 451.269531 1251.257812 Z M 451.269531 1251.257812 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(71.372551%,66.666669%,59.215689%)\",\n      fillOpacity: 1\n    },\n    d: \"M 544.492188 1263.960938 C 561.285156 1265.488281 576.820312 1269.722656 591.101562 1276.664062 C 545.902344 1276.664062 500.707031 1276.664062 455.507812 1276.664062 C 485.433594 1274.351562 515.09375 1270.117188 544.492188 1263.960938 Z M 544.492188 1263.960938 \"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      stroke: \"none\",\n      fillRule: \"evenodd\",\n      fill: \"rgb(20%,18.039216%,13.333334%)\",\n      fillOpacity: 1\n    },\n    d: \"M 476.695312 1289.367188 C 501.351562 1284.484375 526.777344 1283.78125 552.964844 1287.25 C 537.429688 1288.660156 521.894531 1290.074219 506.355469 1291.484375 C 535.914062 1295.261719 565.578125 1297.378906 595.339844 1297.835938 C 596.496094 1306.097656 593.671875 1312.449219 586.863281 1316.890625 C 413.140625 1319.007812 239.414062 1319.714844 65.679688 1319.007812 C 65.679688 1314.773438 65.679688 1310.539062 65.679688 1306.304688 C 82.410156 1305.488281 82.410156 1303.371094 65.679688 1299.953125 C 128.546875 1298.261719 191.398438 1296.144531 254.238281 1293.601562 C 333.207031 1299.003906 411.597656 1299.003906 489.40625 1293.601562 C 485.910156 1289.851562 481.671875 1288.441406 476.695312 1289.367188 Z M 476.695312 1289.367188 \"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgMain);\nexport default __webpack_public_path__ + \"static/media/main.65900eabdbc99fd3dac5ae1608e1d762.svg\";\nexport { ForwardRef as ReactComponent };","/*! @license is-dom-node v1.0.4\n\n\tCopyright 2018 Fisssion LLC.\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n\n*/\nfunction isDomNode(x) {\n\treturn typeof window.Node === 'object'\n\t\t? x instanceof window.Node\n\t\t: x !== null &&\n\t\t\t\ttypeof x === 'object' &&\n\t\t\t\ttypeof x.nodeType === 'number' &&\n\t\t\t\ttypeof x.nodeName === 'string'\n}\n\nexport default isDomNode;\n","/*! @license is-dom-node-list v1.2.1\n\n\tCopyright 2018 Fisssion LLC.\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n\n*/\nimport isDomNode from 'is-dom-node';\n\nfunction isDomNodeList(x) {\n\tvar prototypeToString = Object.prototype.toString.call(x);\n\tvar regex = /^\\[object (HTMLCollection|NodeList|Object)\\]$/;\n\n\treturn typeof window.NodeList === 'object'\n\t\t? x instanceof window.NodeList\n\t\t: x !== null &&\n\t\t\t\ttypeof x === 'object' &&\n\t\t\t\ttypeof x.length === 'number' &&\n\t\t\t\tregex.test(prototypeToString) &&\n\t\t\t\t(x.length === 0 || isDomNode(x[0]))\n}\n\nexport default isDomNodeList;\n","/*! @license Tealight v0.3.6\n\n\tCopyright 2018 Fisssion LLC.\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n\n*/\nimport isDomNode from 'is-dom-node';\nimport isDomNodeList from 'is-dom-node-list';\n\nfunction tealight(target, context) {\n  if ( context === void 0 ) context = document;\n\n  if (target instanceof Array) { return target.filter(isDomNode); }\n  if (isDomNode(target)) { return [target]; }\n  if (isDomNodeList(target)) { return Array.prototype.slice.call(target); }\n  if (typeof target === \"string\") {\n    try {\n      var query = context.querySelectorAll(target);\n      return Array.prototype.slice.call(query);\n    } catch (err) {\n      return [];\n    }\n  }\n  return [];\n}\n\nexport default tealight;\n","/*! @license Rematrix v0.3.0\n\n\tCopyright 2018 Julian Lloyd.\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE.\n*/\n/**\n * @module Rematrix\n */\n\n/**\n * Transformation matrices in the browser come in two flavors:\n *\n *  - `matrix` using 6 values (short)\n *  - `matrix3d` using 16 values (long)\n *\n * This utility follows this [conversion guide](https://goo.gl/EJlUQ1)\n * to expand short form matrices to their equivalent long form.\n *\n * @param  {array} source - Accepts both short and long form matrices.\n * @return {array}\n */\nfunction format(source) {\n\tif (source.constructor !== Array) {\n\t\tthrow new TypeError('Expected array.')\n\t}\n\tif (source.length === 16) {\n\t\treturn source\n\t}\n\tif (source.length === 6) {\n\t\tvar matrix = identity();\n\t\tmatrix[0] = source[0];\n\t\tmatrix[1] = source[1];\n\t\tmatrix[4] = source[2];\n\t\tmatrix[5] = source[3];\n\t\tmatrix[12] = source[4];\n\t\tmatrix[13] = source[5];\n\t\treturn matrix\n\t}\n\tthrow new RangeError('Expected array with either 6 or 16 values.')\n}\n\n/**\n * Returns a matrix representing no transformation. The product of any matrix\n * multiplied by the identity matrix will be the original matrix.\n *\n * > **Tip:** Similar to how `5 * 1 === 5`, where `1` is the identity.\n *\n * @return {array}\n */\nfunction identity() {\n\tvar matrix = [];\n\tfor (var i = 0; i < 16; i++) {\n\t\ti % 5 == 0 ? matrix.push(1) : matrix.push(0);\n\t}\n\treturn matrix\n}\n\n/**\n * Returns a matrix describing the inverse transformation of the source\n * matrix. The product of any matrix multiplied by its inverse will be the\n * identity matrix.\n *\n * > **Tip:** Similar to how `5 * (1/5) === 1`, where `1/5` is the inverse.\n *\n * @param  {array} source - Accepts both short and long form matrices.\n * @return {array}\n */\nfunction inverse(source) {\n\tvar m = format(source);\n\n\tvar s0 = m[0] * m[5] - m[4] * m[1];\n\tvar s1 = m[0] * m[6] - m[4] * m[2];\n\tvar s2 = m[0] * m[7] - m[4] * m[3];\n\tvar s3 = m[1] * m[6] - m[5] * m[2];\n\tvar s4 = m[1] * m[7] - m[5] * m[3];\n\tvar s5 = m[2] * m[7] - m[6] * m[3];\n\n\tvar c5 = m[10] * m[15] - m[14] * m[11];\n\tvar c4 = m[9] * m[15] - m[13] * m[11];\n\tvar c3 = m[9] * m[14] - m[13] * m[10];\n\tvar c2 = m[8] * m[15] - m[12] * m[11];\n\tvar c1 = m[8] * m[14] - m[12] * m[10];\n\tvar c0 = m[8] * m[13] - m[12] * m[9];\n\n\tvar determinant = 1 / (s0 * c5 - s1 * c4 + s2 * c3 + s3 * c2 - s4 * c1 + s5 * c0);\n\n\tif (isNaN(determinant) || determinant === Infinity) {\n\t\tthrow new Error('Inverse determinant attempted to divide by zero.')\n\t}\n\n\treturn [\n\t\t(m[5] * c5 - m[6] * c4 + m[7] * c3) * determinant,\n\t\t(-m[1] * c5 + m[2] * c4 - m[3] * c3) * determinant,\n\t\t(m[13] * s5 - m[14] * s4 + m[15] * s3) * determinant,\n\t\t(-m[9] * s5 + m[10] * s4 - m[11] * s3) * determinant,\n\n\t\t(-m[4] * c5 + m[6] * c2 - m[7] * c1) * determinant,\n\t\t(m[0] * c5 - m[2] * c2 + m[3] * c1) * determinant,\n\t\t(-m[12] * s5 + m[14] * s2 - m[15] * s1) * determinant,\n\t\t(m[8] * s5 - m[10] * s2 + m[11] * s1) * determinant,\n\n\t\t(m[4] * c4 - m[5] * c2 + m[7] * c0) * determinant,\n\t\t(-m[0] * c4 + m[1] * c2 - m[3] * c0) * determinant,\n\t\t(m[12] * s4 - m[13] * s2 + m[15] * s0) * determinant,\n\t\t(-m[8] * s4 + m[9] * s2 - m[11] * s0) * determinant,\n\n\t\t(-m[4] * c3 + m[5] * c1 - m[6] * c0) * determinant,\n\t\t(m[0] * c3 - m[1] * c1 + m[2] * c0) * determinant,\n\t\t(-m[12] * s3 + m[13] * s1 - m[14] * s0) * determinant,\n\t\t(m[8] * s3 - m[9] * s1 + m[10] * s0) * determinant\n\t]\n}\n\n/**\n * Returns a 4x4 matrix describing the combined transformations\n * of both arguments.\n *\n * > **Note:** Order is very important. For example, rotating 45°\n * along the Z-axis, followed by translating 500 pixels along the\n * Y-axis... is not the same as translating 500 pixels along the\n * Y-axis, followed by rotating 45° along on the Z-axis.\n *\n * @param  {array} m - Accepts both short and long form matrices.\n * @param  {array} x - Accepts both short and long form matrices.\n * @return {array}\n */\nfunction multiply(m, x) {\n\tvar fm = format(m);\n\tvar fx = format(x);\n\tvar product = [];\n\n\tfor (var i = 0; i < 4; i++) {\n\t\tvar row = [fm[i], fm[i + 4], fm[i + 8], fm[i + 12]];\n\t\tfor (var j = 0; j < 4; j++) {\n\t\t\tvar k = j * 4;\n\t\t\tvar col = [fx[k], fx[k + 1], fx[k + 2], fx[k + 3]];\n\t\t\tvar result =\n\t\t\t\trow[0] * col[0] + row[1] * col[1] + row[2] * col[2] + row[3] * col[3];\n\n\t\t\tproduct[i + k] = result;\n\t\t}\n\t}\n\n\treturn product\n}\n\n/**\n * Attempts to return a 4x4 matrix describing the CSS transform\n * matrix passed in, but will return the identity matrix as a\n * fallback.\n *\n * > **Tip:** This method is used to convert a CSS matrix (retrieved as a\n * `string` from computed styles) to its equivalent array format.\n *\n * @param  {string} source - `matrix` or `matrix3d` CSS Transform value.\n * @return {array}\n */\nfunction parse(source) {\n\tif (typeof source === 'string') {\n\t\tvar match = source.match(/matrix(3d)?\\(([^)]+)\\)/);\n\t\tif (match) {\n\t\t\tvar raw = match[2].split(', ').map(parseFloat);\n\t\t\treturn format(raw)\n\t\t}\n\t}\n\treturn identity()\n}\n\n/**\n * Returns a 4x4 matrix describing Z-axis rotation.\n *\n * > **Tip:** This is just an alias for `Rematrix.rotateZ` for parity with CSS\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\nfunction rotate(angle) {\n\treturn rotateZ(angle)\n}\n\n/**\n * Returns a 4x4 matrix describing X-axis rotation.\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\nfunction rotateX(angle) {\n\tvar theta = Math.PI / 180 * angle;\n\tvar matrix = identity();\n\n\tmatrix[5] = matrix[10] = Math.cos(theta);\n\tmatrix[6] = matrix[9] = Math.sin(theta);\n\tmatrix[9] *= -1;\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Y-axis rotation.\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\nfunction rotateY(angle) {\n\tvar theta = Math.PI / 180 * angle;\n\tvar matrix = identity();\n\n\tmatrix[0] = matrix[10] = Math.cos(theta);\n\tmatrix[2] = matrix[8] = Math.sin(theta);\n\tmatrix[2] *= -1;\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Z-axis rotation.\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\nfunction rotateZ(angle) {\n\tvar theta = Math.PI / 180 * angle;\n\tvar matrix = identity();\n\n\tmatrix[0] = matrix[5] = Math.cos(theta);\n\tmatrix[1] = matrix[4] = Math.sin(theta);\n\tmatrix[4] *= -1;\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing 2D scaling. The first argument\n * is used for both X and Y-axis scaling, unless an optional\n * second argument is provided to explicitly define Y-axis scaling.\n *\n * @param  {number} scalar    - Decimal multiplier.\n * @param  {number} [scalarY] - Decimal multiplier.\n * @return {array}\n */\nfunction scale(scalar, scalarY) {\n\tvar matrix = identity();\n\n\tmatrix[0] = scalar;\n\tmatrix[5] = typeof scalarY === 'number' ? scalarY : scalar;\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing X-axis scaling.\n *\n * @param  {number} scalar - Decimal multiplier.\n * @return {array}\n */\nfunction scaleX(scalar) {\n\tvar matrix = identity();\n\tmatrix[0] = scalar;\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Y-axis scaling.\n *\n * @param  {number} scalar - Decimal multiplier.\n * @return {array}\n */\nfunction scaleY(scalar) {\n\tvar matrix = identity();\n\tmatrix[5] = scalar;\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Z-axis scaling.\n *\n * @param  {number} scalar - Decimal multiplier.\n * @return {array}\n */\nfunction scaleZ(scalar) {\n\tvar matrix = identity();\n\tmatrix[10] = scalar;\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing shear. The first argument\n * defines X-axis shearing, and an optional second argument\n * defines Y-axis shearing.\n *\n * @param  {number} angleX   - Measured in degrees.\n * @param  {number} [angleY] - Measured in degrees.\n * @return {array}\n */\nfunction skew(angleX, angleY) {\n\tvar thetaX = Math.PI / 180 * angleX;\n\tvar matrix = identity();\n\n\tmatrix[4] = Math.tan(thetaX);\n\n\tif (angleY) {\n\t\tvar thetaY = Math.PI / 180 * angleY;\n\t\tmatrix[1] = Math.tan(thetaY);\n\t}\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing X-axis shear.\n *\n * @param  {number} angle - Measured in degrees.\n * @return {array}\n */\nfunction skewX(angle) {\n\tvar theta = Math.PI / 180 * angle;\n\tvar matrix = identity();\n\n\tmatrix[4] = Math.tan(theta);\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Y-axis shear.\n *\n * @param  {number} angle - Measured in degrees\n * @return {array}\n */\nfunction skewY(angle) {\n\tvar theta = Math.PI / 180 * angle;\n\tvar matrix = identity();\n\n\tmatrix[1] = Math.tan(theta);\n\n\treturn matrix\n}\n\n/**\n * Returns a CSS Transform property value equivalent to the source matrix.\n *\n * @param  {array} source - Accepts both short and long form matrices.\n * @return {string}\n */\nfunction toString(source) {\n\treturn (\"matrix3d(\" + (format(source).join(', ')) + \")\")\n}\n\n/**\n * Returns a 4x4 matrix describing 2D translation. The first\n * argument defines X-axis translation, and an optional second\n * argument defines Y-axis translation.\n *\n * @param  {number} distanceX   - Measured in pixels.\n * @param  {number} [distanceY] - Measured in pixels.\n * @return {array}\n */\nfunction translate(distanceX, distanceY) {\n\tvar matrix = identity();\n\tmatrix[12] = distanceX;\n\n\tif (distanceY) {\n\t\tmatrix[13] = distanceY;\n\t}\n\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing X-axis translation.\n *\n * @param  {number} distance - Measured in pixels.\n * @return {array}\n */\nfunction translateX(distance) {\n\tvar matrix = identity();\n\tmatrix[12] = distance;\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Y-axis translation.\n *\n * @param  {number} distance - Measured in pixels.\n * @return {array}\n */\nfunction translateY(distance) {\n\tvar matrix = identity();\n\tmatrix[13] = distance;\n\treturn matrix\n}\n\n/**\n * Returns a 4x4 matrix describing Z-axis translation.\n *\n * @param  {number} distance - Measured in pixels.\n * @return {array}\n */\nfunction translateZ(distance) {\n\tvar matrix = identity();\n\tmatrix[14] = distance;\n\treturn matrix\n}\n\nexport { format, identity, inverse, multiply, parse, rotate, rotateX, rotateY, rotateZ, scale, scaleX, scaleY, scaleZ, skew, skewX, skewY, toString, translate, translateX, translateY, translateZ };\n","/*! @license miniraf v1.0.0\n\n\tCopyright 2018 Fisssion LLC.\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\n\tThe above copyright notice and this permission notice shall be included in all\n\tcopies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\tSOFTWARE.\n\n*/\nvar polyfill = (function () {\n\tvar clock = Date.now();\n\n\treturn function (callback) {\n\t\tvar currentTime = Date.now();\n\t\tif (currentTime - clock > 16) {\n\t\t\tclock = currentTime;\n\t\t\tcallback(currentTime);\n\t\t} else {\n\t\t\tsetTimeout(function () { return polyfill(callback); }, 0);\n\t\t}\n\t}\n})();\n\nvar index = window.requestAnimationFrame ||\n\twindow.webkitRequestAnimationFrame ||\n\twindow.mozRequestAnimationFrame ||\n\tpolyfill;\n\nexport default index;\n","/*! @license ScrollReveal v4.0.9\n\n\tCopyright 2021 Fisssion LLC.\n\n\tLicensed under the GNU General Public License 3.0 for\n\tcompatible open source projects and non-commercial use.\n\n\tFor commercial sites, themes, projects, and applications,\n\tkeep your source code private/proprietary by purchasing\n\ta commercial license from https://scrollrevealjs.org/\n*/\nimport $ from 'tealight';\nimport { translateY, translateX, rotateX, rotateY, rotateZ, scale, parse, multiply } from 'rematrix';\nimport raf from 'miniraf';\n\nvar defaults = {\n\tdelay: 0,\n\tdistance: '0',\n\tduration: 600,\n\teasing: 'cubic-bezier(0.5, 0, 0, 1)',\n\tinterval: 0,\n\topacity: 0,\n\torigin: 'bottom',\n\trotate: {\n\t\tx: 0,\n\t\ty: 0,\n\t\tz: 0\n\t},\n\tscale: 1,\n\tcleanup: false,\n\tcontainer: document.documentElement,\n\tdesktop: true,\n\tmobile: true,\n\treset: false,\n\tuseDelay: 'always',\n\tviewFactor: 0.0,\n\tviewOffset: {\n\t\ttop: 0,\n\t\tright: 0,\n\t\tbottom: 0,\n\t\tleft: 0\n\t},\n\tafterReset: function afterReset() {},\n\tafterReveal: function afterReveal() {},\n\tbeforeReset: function beforeReset() {},\n\tbeforeReveal: function beforeReveal() {}\n};\n\nfunction failure() {\n\tdocument.documentElement.classList.remove('sr');\n\n\treturn {\n\t\tclean: function clean() {},\n\t\tdestroy: function destroy() {},\n\t\treveal: function reveal() {},\n\t\tsync: function sync() {},\n\t\tget noop() {\n\t\t\treturn true\n\t\t}\n\t}\n}\n\nfunction success() {\n\tdocument.documentElement.classList.add('sr');\n\n\tif (document.body) {\n\t\tdocument.body.style.height = '100%';\n\t} else {\n\t\tdocument.addEventListener('DOMContentLoaded', function () {\n\t\t\tdocument.body.style.height = '100%';\n\t\t});\n\t}\n}\n\nvar mount = { success: success, failure: failure };\n\nfunction isObject(x) {\n\treturn (\n\t\tx !== null &&\n\t\tx instanceof Object &&\n\t\t(x.constructor === Object ||\n\t\t\tObject.prototype.toString.call(x) === '[object Object]')\n\t)\n}\n\nfunction each(collection, callback) {\n\tif (isObject(collection)) {\n\t\tvar keys = Object.keys(collection);\n\t\treturn keys.forEach(function (key) { return callback(collection[key], key, collection); })\n\t}\n\tif (collection instanceof Array) {\n\t\treturn collection.forEach(function (item, i) { return callback(item, i, collection); })\n\t}\n\tthrow new TypeError('Expected either an array or object literal.')\n}\n\nfunction logger(message) {\n\tvar details = [], len = arguments.length - 1;\n\twhile ( len-- > 0 ) details[ len ] = arguments[ len + 1 ];\n\n\tif (this.constructor.debug && console) {\n\t\tvar report = \"%cScrollReveal: \" + message;\n\t\tdetails.forEach(function (detail) { return (report += \"\\n — \" + detail); });\n\t\tconsole.log(report, 'color: #ea654b;'); // eslint-disable-line no-console\n\t}\n}\n\nfunction rinse() {\n\tvar this$1 = this;\n\n\tvar struct = function () { return ({\n\t\tactive: [],\n\t\tstale: []\n\t}); };\n\n\tvar elementIds = struct();\n\tvar sequenceIds = struct();\n\tvar containerIds = struct();\n\n\t/**\n\t * Take stock of active element IDs.\n\t */\n\ttry {\n\t\teach($('[data-sr-id]'), function (node) {\n\t\t\tvar id = parseInt(node.getAttribute('data-sr-id'));\n\t\t\telementIds.active.push(id);\n\t\t});\n\t} catch (e) {\n\t\tthrow e\n\t}\n\t/**\n\t * Destroy stale elements.\n\t */\n\teach(this.store.elements, function (element) {\n\t\tif (elementIds.active.indexOf(element.id) === -1) {\n\t\t\telementIds.stale.push(element.id);\n\t\t}\n\t});\n\n\teach(elementIds.stale, function (staleId) { return delete this$1.store.elements[staleId]; });\n\n\t/**\n\t * Take stock of active container and sequence IDs.\n\t */\n\teach(this.store.elements, function (element) {\n\t\tif (containerIds.active.indexOf(element.containerId) === -1) {\n\t\t\tcontainerIds.active.push(element.containerId);\n\t\t}\n\t\tif (element.hasOwnProperty('sequence')) {\n\t\t\tif (sequenceIds.active.indexOf(element.sequence.id) === -1) {\n\t\t\t\tsequenceIds.active.push(element.sequence.id);\n\t\t\t}\n\t\t}\n\t});\n\n\t/**\n\t * Destroy stale containers.\n\t */\n\teach(this.store.containers, function (container) {\n\t\tif (containerIds.active.indexOf(container.id) === -1) {\n\t\t\tcontainerIds.stale.push(container.id);\n\t\t}\n\t});\n\n\teach(containerIds.stale, function (staleId) {\n\t\tvar stale = this$1.store.containers[staleId].node;\n\t\tstale.removeEventListener('scroll', this$1.delegate);\n\t\tstale.removeEventListener('resize', this$1.delegate);\n\t\tdelete this$1.store.containers[staleId];\n\t});\n\n\t/**\n\t * Destroy stale sequences.\n\t */\n\teach(this.store.sequences, function (sequence) {\n\t\tif (sequenceIds.active.indexOf(sequence.id) === -1) {\n\t\t\tsequenceIds.stale.push(sequence.id);\n\t\t}\n\t});\n\n\teach(sequenceIds.stale, function (staleId) { return delete this$1.store.sequences[staleId]; });\n}\n\nvar getPrefixedCssProp = (function () {\n\tvar properties = {};\n\tvar style = document.documentElement.style;\n\n\tfunction getPrefixedCssProperty(name, source) {\n\t\tif ( source === void 0 ) source = style;\n\n\t\tif (name && typeof name === 'string') {\n\t\t\tif (properties[name]) {\n\t\t\t\treturn properties[name]\n\t\t\t}\n\t\t\tif (typeof source[name] === 'string') {\n\t\t\t\treturn (properties[name] = name)\n\t\t\t}\n\t\t\tif (typeof source[(\"-webkit-\" + name)] === 'string') {\n\t\t\t\treturn (properties[name] = \"-webkit-\" + name)\n\t\t\t}\n\t\t\tthrow new RangeError((\"Unable to find \\\"\" + name + \"\\\" style property.\"))\n\t\t}\n\t\tthrow new TypeError('Expected a string.')\n\t}\n\n\tgetPrefixedCssProperty.clearCache = function () { return (properties = {}); };\n\n\treturn getPrefixedCssProperty\n})();\n\nfunction style(element) {\n\tvar computed = window.getComputedStyle(element.node);\n\tvar position = computed.position;\n\tvar config = element.config;\n\n\t/**\n\t * Generate inline styles\n\t */\n\tvar inline = {};\n\tvar inlineStyle = element.node.getAttribute('style') || '';\n\tvar inlineMatch = inlineStyle.match(/[\\w-]+\\s*:\\s*[^;]+\\s*/gi) || [];\n\n\tinline.computed = inlineMatch ? inlineMatch.map(function (m) { return m.trim(); }).join('; ') + ';' : '';\n\n\tinline.generated = inlineMatch.some(function (m) { return m.match(/visibility\\s?:\\s?visible/i); })\n\t\t? inline.computed\n\t\t: inlineMatch.concat( ['visibility: visible']).map(function (m) { return m.trim(); }).join('; ') + ';';\n\n\t/**\n\t * Generate opacity styles\n\t */\n\tvar computedOpacity = parseFloat(computed.opacity);\n\tvar configOpacity = !isNaN(parseFloat(config.opacity))\n\t\t? parseFloat(config.opacity)\n\t\t: parseFloat(computed.opacity);\n\n\tvar opacity = {\n\t\tcomputed: computedOpacity !== configOpacity ? (\"opacity: \" + computedOpacity + \";\") : '',\n\t\tgenerated: computedOpacity !== configOpacity ? (\"opacity: \" + configOpacity + \";\") : ''\n\t};\n\n\t/**\n\t * Generate transformation styles\n\t */\n\tvar transformations = [];\n\n\tif (parseFloat(config.distance)) {\n\t\tvar axis = config.origin === 'top' || config.origin === 'bottom' ? 'Y' : 'X';\n\n\t\t/**\n\t\t * Let’s make sure our our pixel distances are negative for top and left.\n\t\t * e.g. { origin: 'top', distance: '25px' } starts at `top: -25px` in CSS.\n\t\t */\n\t\tvar distance = config.distance;\n\t\tif (config.origin === 'top' || config.origin === 'left') {\n\t\t\tdistance = /^-/.test(distance) ? distance.substr(1) : (\"-\" + distance);\n\t\t}\n\n\t\tvar ref = distance.match(/(^-?\\d+\\.?\\d?)|(em$|px$|%$)/g);\n\t\tvar value = ref[0];\n\t\tvar unit = ref[1];\n\n\t\tswitch (unit) {\n\t\t\tcase 'em':\n\t\t\t\tdistance = parseInt(computed.fontSize) * value;\n\t\t\t\tbreak\n\t\t\tcase 'px':\n\t\t\t\tdistance = value;\n\t\t\t\tbreak\n\t\t\tcase '%':\n\t\t\t\t/**\n\t\t\t\t * Here we use `getBoundingClientRect` instead of\n\t\t\t\t * the existing data attached to `element.geometry`\n\t\t\t\t * because only the former includes any transformations\n\t\t\t\t * current applied to the element.\n\t\t\t\t *\n\t\t\t\t * If that behavior ends up being unintuitive, this\n\t\t\t\t * logic could instead utilize `element.geometry.height`\n\t\t\t\t * and `element.geoemetry.width` for the distance calculation\n\t\t\t\t */\n\t\t\t\tdistance =\n\t\t\t\t\taxis === 'Y'\n\t\t\t\t\t\t? (element.node.getBoundingClientRect().height * value) / 100\n\t\t\t\t\t\t: (element.node.getBoundingClientRect().width * value) / 100;\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tthrow new RangeError('Unrecognized or missing distance unit.')\n\t\t}\n\n\t\tif (axis === 'Y') {\n\t\t\ttransformations.push(translateY(distance));\n\t\t} else {\n\t\t\ttransformations.push(translateX(distance));\n\t\t}\n\t}\n\n\tif (config.rotate.x) { transformations.push(rotateX(config.rotate.x)); }\n\tif (config.rotate.y) { transformations.push(rotateY(config.rotate.y)); }\n\tif (config.rotate.z) { transformations.push(rotateZ(config.rotate.z)); }\n\tif (config.scale !== 1) {\n\t\tif (config.scale === 0) {\n\t\t\t/**\n\t\t\t * The CSS Transforms matrix interpolation specification\n\t\t\t * basically disallows transitions of non-invertible\n\t\t\t * matrixes, which means browsers won't transition\n\t\t\t * elements with zero scale.\n\t\t\t *\n\t\t\t * That’s inconvenient for the API and developer\n\t\t\t * experience, so we simply nudge their value\n\t\t\t * slightly above zero; this allows browsers\n\t\t\t * to transition our element as expected.\n\t\t\t *\n\t\t\t * `0.0002` was the smallest number\n\t\t\t * that performed across browsers.\n\t\t\t */\n\t\t\ttransformations.push(scale(0.0002));\n\t\t} else {\n\t\t\ttransformations.push(scale(config.scale));\n\t\t}\n\t}\n\n\tvar transform = {};\n\tif (transformations.length) {\n\t\ttransform.property = getPrefixedCssProp('transform');\n\t\t/**\n\t\t * The default computed transform value should be one of:\n\t\t * undefined || 'none' || 'matrix()' || 'matrix3d()'\n\t\t */\n\t\ttransform.computed = {\n\t\t\traw: computed[transform.property],\n\t\t\tmatrix: parse(computed[transform.property])\n\t\t};\n\n\t\ttransformations.unshift(transform.computed.matrix);\n\t\tvar product = transformations.reduce(multiply);\n\n\t\ttransform.generated = {\n\t\t\tinitial: ((transform.property) + \": matrix3d(\" + (product.join(', ')) + \");\"),\n\t\t\tfinal: ((transform.property) + \": matrix3d(\" + (transform.computed.matrix.join(', ')) + \");\")\n\t\t};\n\t} else {\n\t\ttransform.generated = {\n\t\t\tinitial: '',\n\t\t\tfinal: ''\n\t\t};\n\t}\n\n\t/**\n\t * Generate transition styles\n\t */\n\tvar transition = {};\n\tif (opacity.generated || transform.generated.initial) {\n\t\ttransition.property = getPrefixedCssProp('transition');\n\t\ttransition.computed = computed[transition.property];\n\t\ttransition.fragments = [];\n\n\t\tvar delay = config.delay;\n\t\tvar duration = config.duration;\n\t\tvar easing = config.easing;\n\n\t\tif (opacity.generated) {\n\t\t\ttransition.fragments.push({\n\t\t\t\tdelayed: (\"opacity \" + (duration / 1000) + \"s \" + easing + \" \" + (delay / 1000) + \"s\"),\n\t\t\t\tinstant: (\"opacity \" + (duration / 1000) + \"s \" + easing + \" 0s\")\n\t\t\t});\n\t\t}\n\n\t\tif (transform.generated.initial) {\n\t\t\ttransition.fragments.push({\n\t\t\t\tdelayed: ((transform.property) + \" \" + (duration / 1000) + \"s \" + easing + \" \" + (delay / 1000) + \"s\"),\n\t\t\t\tinstant: ((transform.property) + \" \" + (duration / 1000) + \"s \" + easing + \" 0s\")\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * The default computed transition property should be undefined, or one of:\n\t\t * '' || 'none 0s ease 0s' || 'all 0s ease 0s' || 'all 0s 0s cubic-bezier()'\n\t\t */\n\t\tvar hasCustomTransition =\n\t\t\ttransition.computed && !transition.computed.match(/all 0s|none 0s/);\n\n\t\tif (hasCustomTransition) {\n\t\t\ttransition.fragments.unshift({\n\t\t\t\tdelayed: transition.computed,\n\t\t\t\tinstant: transition.computed\n\t\t\t});\n\t\t}\n\n\t\tvar composed = transition.fragments.reduce(\n\t\t\tfunction (composition, fragment, i) {\n\t\t\t\tcomposition.delayed += i === 0 ? fragment.delayed : (\", \" + (fragment.delayed));\n\t\t\t\tcomposition.instant += i === 0 ? fragment.instant : (\", \" + (fragment.instant));\n\t\t\t\treturn composition\n\t\t\t},\n\t\t\t{\n\t\t\t\tdelayed: '',\n\t\t\t\tinstant: ''\n\t\t\t}\n\t\t);\n\n\t\ttransition.generated = {\n\t\t\tdelayed: ((transition.property) + \": \" + (composed.delayed) + \";\"),\n\t\t\tinstant: ((transition.property) + \": \" + (composed.instant) + \";\")\n\t\t};\n\t} else {\n\t\ttransition.generated = {\n\t\t\tdelayed: '',\n\t\t\tinstant: ''\n\t\t};\n\t}\n\n\treturn {\n\t\tinline: inline,\n\t\topacity: opacity,\n\t\tposition: position,\n\t\ttransform: transform,\n\t\ttransition: transition\n\t}\n}\n\n/**\n * apply a CSS string to an element using the CSSOM (element.style) rather\n * than setAttribute, which may violate the content security policy.\n *\n * @param {Node}   [el]  Element to receive styles.\n * @param {string} [declaration] Styles to apply.\n */\nfunction applyStyle (el, declaration) {\n\tdeclaration.split(';').forEach(function (pair) {\n\t\tvar ref = pair.split(':');\n\t\tvar property = ref[0];\n\t\tvar value = ref.slice(1);\n\t\tif (property && value) {\n\t\t\tel.style[property.trim()] = value.join(':');\n\t\t}\n\t});\n}\n\nfunction clean(target) {\n\tvar this$1 = this;\n\n\tvar dirty;\n\ttry {\n\t\teach($(target), function (node) {\n\t\t\tvar id = node.getAttribute('data-sr-id');\n\t\t\tif (id !== null) {\n\t\t\t\tdirty = true;\n\t\t\t\tvar element = this$1.store.elements[id];\n\t\t\t\tif (element.callbackTimer) {\n\t\t\t\t\twindow.clearTimeout(element.callbackTimer.clock);\n\t\t\t\t}\n\t\t\t\tapplyStyle(element.node, element.styles.inline.generated);\n\t\t\t\tnode.removeAttribute('data-sr-id');\n\t\t\t\tdelete this$1.store.elements[id];\n\t\t\t}\n\t\t});\n\t} catch (e) {\n\t\treturn logger.call(this, 'Clean failed.', e.message)\n\t}\n\n\tif (dirty) {\n\t\ttry {\n\t\t\trinse.call(this);\n\t\t} catch (e) {\n\t\t\treturn logger.call(this, 'Clean failed.', e.message)\n\t\t}\n\t}\n}\n\nfunction destroy() {\n\tvar this$1 = this;\n\n\t/**\n\t * Remove all generated styles and element ids\n\t */\n\teach(this.store.elements, function (element) {\n\t\tapplyStyle(element.node, element.styles.inline.generated);\n\t\telement.node.removeAttribute('data-sr-id');\n\t});\n\n\t/**\n\t * Remove all event listeners.\n\t */\n\teach(this.store.containers, function (container) {\n\t\tvar target =\n\t\t\tcontainer.node === document.documentElement ? window : container.node;\n\t\ttarget.removeEventListener('scroll', this$1.delegate);\n\t\ttarget.removeEventListener('resize', this$1.delegate);\n\t});\n\n\t/**\n\t * Clear all data from the store\n\t */\n\tthis.store = {\n\t\tcontainers: {},\n\t\telements: {},\n\t\thistory: [],\n\t\tsequences: {}\n\t};\n}\n\nfunction deepAssign(target) {\n\tvar sources = [], len = arguments.length - 1;\n\twhile ( len-- > 0 ) sources[ len ] = arguments[ len + 1 ];\n\n\tif (isObject(target)) {\n\t\teach(sources, function (source) {\n\t\t\teach(source, function (data, key) {\n\t\t\t\tif (isObject(data)) {\n\t\t\t\t\tif (!target[key] || !isObject(target[key])) {\n\t\t\t\t\t\ttarget[key] = {};\n\t\t\t\t\t}\n\t\t\t\t\tdeepAssign(target[key], data);\n\t\t\t\t} else {\n\t\t\t\t\ttarget[key] = data;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn target\n\t} else {\n\t\tthrow new TypeError('Target must be an object literal.')\n\t}\n}\n\nfunction isMobile(agent) {\n\tif ( agent === void 0 ) agent = navigator.userAgent;\n\n\treturn /Android|iPhone|iPad|iPod/i.test(agent)\n}\n\nvar nextUniqueId = (function () {\n\tvar uid = 0;\n\treturn function () { return uid++; }\n})();\n\nfunction initialize() {\n\tvar this$1 = this;\n\n\trinse.call(this);\n\n\teach(this.store.elements, function (element) {\n\t\tvar styles = [element.styles.inline.generated];\n\n\t\tif (element.visible) {\n\t\t\tstyles.push(element.styles.opacity.computed);\n\t\t\tstyles.push(element.styles.transform.generated.final);\n\t\t\telement.revealed = true;\n\t\t} else {\n\t\t\tstyles.push(element.styles.opacity.generated);\n\t\t\tstyles.push(element.styles.transform.generated.initial);\n\t\t\telement.revealed = false;\n\t\t}\n\n\t\tapplyStyle(element.node, styles.filter(function (s) { return s !== ''; }).join(' '));\n\t});\n\n\teach(this.store.containers, function (container) {\n\t\tvar target =\n\t\t\tcontainer.node === document.documentElement ? window : container.node;\n\t\ttarget.addEventListener('scroll', this$1.delegate);\n\t\ttarget.addEventListener('resize', this$1.delegate);\n\t});\n\n\t/**\n\t * Manually invoke delegate once to capture\n\t * element and container dimensions, container\n\t * scroll position, and trigger any valid reveals\n\t */\n\tthis.delegate();\n\n\t/**\n\t * Wipe any existing `setTimeout` now\n\t * that initialization has completed.\n\t */\n\tthis.initTimeout = null;\n}\n\nfunction animate(element, force) {\n\tif ( force === void 0 ) force = {};\n\n\tvar pristine = force.pristine || this.pristine;\n\tvar delayed =\n\t\telement.config.useDelay === 'always' ||\n\t\t(element.config.useDelay === 'onload' && pristine) ||\n\t\t(element.config.useDelay === 'once' && !element.seen);\n\n\tvar shouldReveal = element.visible && !element.revealed;\n\tvar shouldReset = !element.visible && element.revealed && element.config.reset;\n\n\tif (force.reveal || shouldReveal) {\n\t\treturn triggerReveal.call(this, element, delayed)\n\t}\n\n\tif (force.reset || shouldReset) {\n\t\treturn triggerReset.call(this, element)\n\t}\n}\n\nfunction triggerReveal(element, delayed) {\n\tvar styles = [\n\t\telement.styles.inline.generated,\n\t\telement.styles.opacity.computed,\n\t\telement.styles.transform.generated.final\n\t];\n\tif (delayed) {\n\t\tstyles.push(element.styles.transition.generated.delayed);\n\t} else {\n\t\tstyles.push(element.styles.transition.generated.instant);\n\t}\n\telement.revealed = element.seen = true;\n\tapplyStyle(element.node, styles.filter(function (s) { return s !== ''; }).join(' '));\n\tregisterCallbacks.call(this, element, delayed);\n}\n\nfunction triggerReset(element) {\n\tvar styles = [\n\t\telement.styles.inline.generated,\n\t\telement.styles.opacity.generated,\n\t\telement.styles.transform.generated.initial,\n\t\telement.styles.transition.generated.instant\n\t];\n\telement.revealed = false;\n\tapplyStyle(element.node, styles.filter(function (s) { return s !== ''; }).join(' '));\n\tregisterCallbacks.call(this, element);\n}\n\nfunction registerCallbacks(element, isDelayed) {\n\tvar this$1 = this;\n\n\tvar duration = isDelayed\n\t\t? element.config.duration + element.config.delay\n\t\t: element.config.duration;\n\n\tvar beforeCallback = element.revealed\n\t\t? element.config.beforeReveal\n\t\t: element.config.beforeReset;\n\n\tvar afterCallback = element.revealed\n\t\t? element.config.afterReveal\n\t\t: element.config.afterReset;\n\n\tvar elapsed = 0;\n\tif (element.callbackTimer) {\n\t\telapsed = Date.now() - element.callbackTimer.start;\n\t\twindow.clearTimeout(element.callbackTimer.clock);\n\t}\n\n\tbeforeCallback(element.node);\n\n\telement.callbackTimer = {\n\t\tstart: Date.now(),\n\t\tclock: window.setTimeout(function () {\n\t\t\tafterCallback(element.node);\n\t\t\telement.callbackTimer = null;\n\t\t\tif (element.revealed && !element.config.reset && element.config.cleanup) {\n\t\t\t\tclean.call(this$1, element.node);\n\t\t\t}\n\t\t}, duration - elapsed)\n\t};\n}\n\nfunction sequence(element, pristine) {\n\tif ( pristine === void 0 ) pristine = this.pristine;\n\n\t/**\n\t * We first check if the element should reset.\n\t */\n\tif (!element.visible && element.revealed && element.config.reset) {\n\t\treturn animate.call(this, element, { reset: true })\n\t}\n\n\tvar seq = this.store.sequences[element.sequence.id];\n\tvar i = element.sequence.index;\n\n\tif (seq) {\n\t\tvar visible = new SequenceModel(seq, 'visible', this.store);\n\t\tvar revealed = new SequenceModel(seq, 'revealed', this.store);\n\n\t\tseq.models = { visible: visible, revealed: revealed };\n\n\t\t/**\n\t\t * If the sequence has no revealed members,\n\t\t * then we reveal the first visible element\n\t\t * within that sequence.\n\t\t *\n\t\t * The sequence then cues a recursive call\n\t\t * in both directions.\n\t\t */\n\t\tif (!revealed.body.length) {\n\t\t\tvar nextId = seq.members[visible.body[0]];\n\t\t\tvar nextElement = this.store.elements[nextId];\n\n\t\t\tif (nextElement) {\n\t\t\t\tcue.call(this, seq, visible.body[0], -1, pristine);\n\t\t\t\tcue.call(this, seq, visible.body[0], +1, pristine);\n\t\t\t\treturn animate.call(this, nextElement, { reveal: true, pristine: pristine })\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * If our element isn’t resetting, we check the\n\t\t * element sequence index against the head, and\n\t\t * then the foot of the sequence.\n\t\t */\n\t\tif (\n\t\t\t!seq.blocked.head &&\n\t\t\ti === [].concat( revealed.head ).pop() &&\n\t\t\ti >= [].concat( visible.body ).shift()\n\t\t) {\n\t\t\tcue.call(this, seq, i, -1, pristine);\n\t\t\treturn animate.call(this, element, { reveal: true, pristine: pristine })\n\t\t}\n\n\t\tif (\n\t\t\t!seq.blocked.foot &&\n\t\t\ti === [].concat( revealed.foot ).shift() &&\n\t\t\ti <= [].concat( visible.body ).pop()\n\t\t) {\n\t\t\tcue.call(this, seq, i, +1, pristine);\n\t\t\treturn animate.call(this, element, { reveal: true, pristine: pristine })\n\t\t}\n\t}\n}\n\nfunction Sequence(interval) {\n\tvar i = Math.abs(interval);\n\tif (!isNaN(i)) {\n\t\tthis.id = nextUniqueId();\n\t\tthis.interval = Math.max(i, 16);\n\t\tthis.members = [];\n\t\tthis.models = {};\n\t\tthis.blocked = {\n\t\t\thead: false,\n\t\t\tfoot: false\n\t\t};\n\t} else {\n\t\tthrow new RangeError('Invalid sequence interval.')\n\t}\n}\n\nfunction SequenceModel(seq, prop, store) {\n\tvar this$1 = this;\n\n\tthis.head = [];\n\tthis.body = [];\n\tthis.foot = [];\n\n\teach(seq.members, function (id, index) {\n\t\tvar element = store.elements[id];\n\t\tif (element && element[prop]) {\n\t\t\tthis$1.body.push(index);\n\t\t}\n\t});\n\n\tif (this.body.length) {\n\t\teach(seq.members, function (id, index) {\n\t\t\tvar element = store.elements[id];\n\t\t\tif (element && !element[prop]) {\n\t\t\t\tif (index < this$1.body[0]) {\n\t\t\t\t\tthis$1.head.push(index);\n\t\t\t\t} else {\n\t\t\t\t\tthis$1.foot.push(index);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction cue(seq, i, direction, pristine) {\n\tvar this$1 = this;\n\n\tvar blocked = ['head', null, 'foot'][1 + direction];\n\tvar nextId = seq.members[i + direction];\n\tvar nextElement = this.store.elements[nextId];\n\n\tseq.blocked[blocked] = true;\n\n\tsetTimeout(function () {\n\t\tseq.blocked[blocked] = false;\n\t\tif (nextElement) {\n\t\t\tsequence.call(this$1, nextElement, pristine);\n\t\t}\n\t}, seq.interval);\n}\n\nfunction reveal(target, options, syncing) {\n\tvar this$1 = this;\n\tif ( options === void 0 ) options = {};\n\tif ( syncing === void 0 ) syncing = false;\n\n\tvar containerBuffer = [];\n\tvar sequence$$1;\n\tvar interval = options.interval || defaults.interval;\n\n\ttry {\n\t\tif (interval) {\n\t\t\tsequence$$1 = new Sequence(interval);\n\t\t}\n\n\t\tvar nodes = $(target);\n\t\tif (!nodes.length) {\n\t\t\tthrow new Error('Invalid reveal target.')\n\t\t}\n\n\t\tvar elements = nodes.reduce(function (elementBuffer, elementNode) {\n\t\t\tvar element = {};\n\t\t\tvar existingId = elementNode.getAttribute('data-sr-id');\n\n\t\t\tif (existingId) {\n\t\t\t\tdeepAssign(element, this$1.store.elements[existingId]);\n\n\t\t\t\t/**\n\t\t\t\t * In order to prevent previously generated styles\n\t\t\t\t * from throwing off the new styles, the style tag\n\t\t\t\t * has to be reverted to its pre-reveal state.\n\t\t\t\t */\n\t\t\t\tapplyStyle(element.node, element.styles.inline.computed);\n\t\t\t} else {\n\t\t\t\telement.id = nextUniqueId();\n\t\t\t\telement.node = elementNode;\n\t\t\t\telement.seen = false;\n\t\t\t\telement.revealed = false;\n\t\t\t\telement.visible = false;\n\t\t\t}\n\n\t\t\tvar config = deepAssign({}, element.config || this$1.defaults, options);\n\n\t\t\tif ((!config.mobile && isMobile()) || (!config.desktop && !isMobile())) {\n\t\t\t\tif (existingId) {\n\t\t\t\t\tclean.call(this$1, element);\n\t\t\t\t}\n\t\t\t\treturn elementBuffer // skip elements that are disabled\n\t\t\t}\n\n\t\t\tvar containerNode = $(config.container)[0];\n\t\t\tif (!containerNode) {\n\t\t\t\tthrow new Error('Invalid container.')\n\t\t\t}\n\t\t\tif (!containerNode.contains(elementNode)) {\n\t\t\t\treturn elementBuffer // skip elements found outside the container\n\t\t\t}\n\n\t\t\tvar containerId;\n\t\t\t{\n\t\t\t\tcontainerId = getContainerId(\n\t\t\t\t\tcontainerNode,\n\t\t\t\t\tcontainerBuffer,\n\t\t\t\t\tthis$1.store.containers\n\t\t\t\t);\n\t\t\t\tif (containerId === null) {\n\t\t\t\t\tcontainerId = nextUniqueId();\n\t\t\t\t\tcontainerBuffer.push({ id: containerId, node: containerNode });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telement.config = config;\n\t\t\telement.containerId = containerId;\n\t\t\telement.styles = style(element);\n\n\t\t\tif (sequence$$1) {\n\t\t\t\telement.sequence = {\n\t\t\t\t\tid: sequence$$1.id,\n\t\t\t\t\tindex: sequence$$1.members.length\n\t\t\t\t};\n\t\t\t\tsequence$$1.members.push(element.id);\n\t\t\t}\n\n\t\t\telementBuffer.push(element);\n\t\t\treturn elementBuffer\n\t\t}, []);\n\n\t\t/**\n\t\t * Modifying the DOM via setAttribute needs to be handled\n\t\t * separately from reading computed styles in the map above\n\t\t * for the browser to batch DOM changes (limiting reflows)\n\t\t */\n\t\teach(elements, function (element) {\n\t\t\tthis$1.store.elements[element.id] = element;\n\t\t\telement.node.setAttribute('data-sr-id', element.id);\n\t\t});\n\t} catch (e) {\n\t\treturn logger.call(this, 'Reveal failed.', e.message)\n\t}\n\n\t/**\n\t * Now that element set-up is complete...\n\t * Let’s commit any container and sequence data we have to the store.\n\t */\n\teach(containerBuffer, function (container) {\n\t\tthis$1.store.containers[container.id] = {\n\t\t\tid: container.id,\n\t\t\tnode: container.node\n\t\t};\n\t});\n\tif (sequence$$1) {\n\t\tthis.store.sequences[sequence$$1.id] = sequence$$1;\n\t}\n\n\t/**\n\t * If reveal wasn't invoked by sync, we want to\n\t * make sure to add this call to the history.\n\t */\n\tif (syncing !== true) {\n\t\tthis.store.history.push({ target: target, options: options });\n\n\t\t/**\n\t\t * Push initialization to the event queue, giving\n\t\t * multiple reveal calls time to be interpreted.\n\t\t */\n\t\tif (this.initTimeout) {\n\t\t\twindow.clearTimeout(this.initTimeout);\n\t\t}\n\t\tthis.initTimeout = window.setTimeout(initialize.bind(this), 0);\n\t}\n}\n\nfunction getContainerId(node) {\n\tvar collections = [], len = arguments.length - 1;\n\twhile ( len-- > 0 ) collections[ len ] = arguments[ len + 1 ];\n\n\tvar id = null;\n\teach(collections, function (collection) {\n\t\teach(collection, function (container) {\n\t\t\tif (id === null && container.node === node) {\n\t\t\t\tid = container.id;\n\t\t\t}\n\t\t});\n\t});\n\treturn id\n}\n\n/**\n * Re-runs the reveal method for each record stored in history,\n * for capturing new content asynchronously loaded into the DOM.\n */\nfunction sync() {\n\tvar this$1 = this;\n\n\teach(this.store.history, function (record) {\n\t\treveal.call(this$1, record.target, record.options, true);\n\t});\n\n\tinitialize.call(this);\n}\n\nvar polyfill = function (x) { return (x > 0) - (x < 0) || +x; };\nvar mathSign = Math.sign || polyfill;\n\nfunction getGeometry(target, isContainer) {\n\t/**\n\t * We want to ignore padding and scrollbars for container elements.\n\t * More information here: https://goo.gl/vOZpbz\n\t */\n\tvar height = isContainer ? target.node.clientHeight : target.node.offsetHeight;\n\tvar width = isContainer ? target.node.clientWidth : target.node.offsetWidth;\n\n\tvar offsetTop = 0;\n\tvar offsetLeft = 0;\n\tvar node = target.node;\n\n\tdo {\n\t\tif (!isNaN(node.offsetTop)) {\n\t\t\toffsetTop += node.offsetTop;\n\t\t}\n\t\tif (!isNaN(node.offsetLeft)) {\n\t\t\toffsetLeft += node.offsetLeft;\n\t\t}\n\t\tnode = node.offsetParent;\n\t} while (node)\n\n\treturn {\n\t\tbounds: {\n\t\t\ttop: offsetTop,\n\t\t\tright: offsetLeft + width,\n\t\t\tbottom: offsetTop + height,\n\t\t\tleft: offsetLeft\n\t\t},\n\t\theight: height,\n\t\twidth: width\n\t}\n}\n\nfunction getScrolled(container) {\n\tvar top, left;\n\tif (container.node === document.documentElement) {\n\t\ttop = window.pageYOffset;\n\t\tleft = window.pageXOffset;\n\t} else {\n\t\ttop = container.node.scrollTop;\n\t\tleft = container.node.scrollLeft;\n\t}\n\treturn { top: top, left: left }\n}\n\nfunction isElementVisible(element) {\n\tif ( element === void 0 ) element = {};\n\n\tvar container = this.store.containers[element.containerId];\n\tif (!container) { return }\n\n\tvar viewFactor = Math.max(0, Math.min(1, element.config.viewFactor));\n\tvar viewOffset = element.config.viewOffset;\n\n\tvar elementBounds = {\n\t\ttop: element.geometry.bounds.top + element.geometry.height * viewFactor,\n\t\tright: element.geometry.bounds.right - element.geometry.width * viewFactor,\n\t\tbottom: element.geometry.bounds.bottom - element.geometry.height * viewFactor,\n\t\tleft: element.geometry.bounds.left + element.geometry.width * viewFactor\n\t};\n\n\tvar containerBounds = {\n\t\ttop: container.geometry.bounds.top + container.scroll.top + viewOffset.top,\n\t\tright: container.geometry.bounds.right + container.scroll.left - viewOffset.right,\n\t\tbottom:\n\t\t\tcontainer.geometry.bounds.bottom + container.scroll.top - viewOffset.bottom,\n\t\tleft: container.geometry.bounds.left + container.scroll.left + viewOffset.left\n\t};\n\n\treturn (\n\t\t(elementBounds.top < containerBounds.bottom &&\n\t\t\telementBounds.right > containerBounds.left &&\n\t\t\telementBounds.bottom > containerBounds.top &&\n\t\t\telementBounds.left < containerBounds.right) ||\n\t\telement.styles.position === 'fixed'\n\t)\n}\n\nfunction delegate(\n\tevent,\n\telements\n) {\n\tvar this$1 = this;\n\tif ( event === void 0 ) event = { type: 'init' };\n\tif ( elements === void 0 ) elements = this.store.elements;\n\n\traf(function () {\n\t\tvar stale = event.type === 'init' || event.type === 'resize';\n\n\t\teach(this$1.store.containers, function (container) {\n\t\t\tif (stale) {\n\t\t\t\tcontainer.geometry = getGeometry.call(this$1, container, true);\n\t\t\t}\n\t\t\tvar scroll = getScrolled.call(this$1, container);\n\t\t\tif (container.scroll) {\n\t\t\t\tcontainer.direction = {\n\t\t\t\t\tx: mathSign(scroll.left - container.scroll.left),\n\t\t\t\t\ty: mathSign(scroll.top - container.scroll.top)\n\t\t\t\t};\n\t\t\t}\n\t\t\tcontainer.scroll = scroll;\n\t\t});\n\n\t\t/**\n\t\t * Due to how the sequencer is implemented, it’s\n\t\t * important that we update the state of all\n\t\t * elements, before any animation logic is\n\t\t * evaluated (in the second loop below).\n\t\t */\n\t\teach(elements, function (element) {\n\t\t\tif (stale || element.geometry === undefined) {\n\t\t\t\telement.geometry = getGeometry.call(this$1, element);\n\t\t\t}\n\t\t\telement.visible = isElementVisible.call(this$1, element);\n\t\t});\n\n\t\teach(elements, function (element) {\n\t\t\tif (element.sequence) {\n\t\t\t\tsequence.call(this$1, element);\n\t\t\t} else {\n\t\t\t\tanimate.call(this$1, element);\n\t\t\t}\n\t\t});\n\n\t\tthis$1.pristine = false;\n\t});\n}\n\nfunction isTransformSupported() {\n\tvar style = document.documentElement.style;\n\treturn 'transform' in style || 'WebkitTransform' in style\n}\n\nfunction isTransitionSupported() {\n\tvar style = document.documentElement.style;\n\treturn 'transition' in style || 'WebkitTransition' in style\n}\n\nvar version = \"4.0.9\";\n\nvar boundDelegate;\nvar boundDestroy;\nvar boundReveal;\nvar boundClean;\nvar boundSync;\nvar config;\nvar debug;\nvar instance;\n\nfunction ScrollReveal(options) {\n\tif ( options === void 0 ) options = {};\n\n\tvar invokedWithoutNew =\n\t\ttypeof this === 'undefined' ||\n\t\tObject.getPrototypeOf(this) !== ScrollReveal.prototype;\n\n\tif (invokedWithoutNew) {\n\t\treturn new ScrollReveal(options)\n\t}\n\n\tif (!ScrollReveal.isSupported()) {\n\t\tlogger.call(this, 'Instantiation failed.', 'This browser is not supported.');\n\t\treturn mount.failure()\n\t}\n\n\tvar buffer;\n\ttry {\n\t\tbuffer = config\n\t\t\t? deepAssign({}, config, options)\n\t\t\t: deepAssign({}, defaults, options);\n\t} catch (e) {\n\t\tlogger.call(this, 'Invalid configuration.', e.message);\n\t\treturn mount.failure()\n\t}\n\n\ttry {\n\t\tvar container = $(buffer.container)[0];\n\t\tif (!container) {\n\t\t\tthrow new Error('Invalid container.')\n\t\t}\n\t} catch (e) {\n\t\tlogger.call(this, e.message);\n\t\treturn mount.failure()\n\t}\n\n\tconfig = buffer;\n\n\tif ((!config.mobile && isMobile()) || (!config.desktop && !isMobile())) {\n\t\tlogger.call(\n\t\t\tthis,\n\t\t\t'This device is disabled.',\n\t\t\t(\"desktop: \" + (config.desktop)),\n\t\t\t(\"mobile: \" + (config.mobile))\n\t\t);\n\t\treturn mount.failure()\n\t}\n\n\tmount.success();\n\n\tthis.store = {\n\t\tcontainers: {},\n\t\telements: {},\n\t\thistory: [],\n\t\tsequences: {}\n\t};\n\n\tthis.pristine = true;\n\n\tboundDelegate = boundDelegate || delegate.bind(this);\n\tboundDestroy = boundDestroy || destroy.bind(this);\n\tboundReveal = boundReveal || reveal.bind(this);\n\tboundClean = boundClean || clean.bind(this);\n\tboundSync = boundSync || sync.bind(this);\n\n\tObject.defineProperty(this, 'delegate', { get: function () { return boundDelegate; } });\n\tObject.defineProperty(this, 'destroy', { get: function () { return boundDestroy; } });\n\tObject.defineProperty(this, 'reveal', { get: function () { return boundReveal; } });\n\tObject.defineProperty(this, 'clean', { get: function () { return boundClean; } });\n\tObject.defineProperty(this, 'sync', { get: function () { return boundSync; } });\n\n\tObject.defineProperty(this, 'defaults', { get: function () { return config; } });\n\tObject.defineProperty(this, 'version', { get: function () { return version; } });\n\tObject.defineProperty(this, 'noop', { get: function () { return false; } });\n\n\treturn instance ? instance : (instance = this)\n}\n\nScrollReveal.isSupported = function () { return isTransformSupported() && isTransitionSupported(); };\n\nObject.defineProperty(ScrollReveal, 'debug', {\n\tget: function () { return debug || false; },\n\tset: function (value) { return (debug = typeof value === 'boolean' ? value : debug); }\n});\n\nScrollReveal();\n\nexport default ScrollReveal;\n","import heroImage from \"../assets/images/main.svg\";\r\nimport { useEffect, useRef } from \"react\"\r\nimport ScrollReveal from \"scrollreveal\"\r\n\r\nexport default function Hero() {\r\n    const revealRef1 = useRef(null);\r\n    const revealRef2 = useRef(null);\r\n    const revealRef3 = useRef(null);\r\n\r\n    useEffect( () => {\r\n        ScrollReveal().reveal( revealRef1.current, {\r\n            origin: 'center',\r\n            distance: '0px',\r\n            duration: 1200,\r\n            delay: 450,\r\n            easing: 'ease-in-out',\r\n        })\r\n        ScrollReveal().reveal( revealRef2.current, {\r\n            origin: 'right',\r\n            distance: '100px',\r\n            duration: 1200,\r\n            delay: 200,\r\n            easing: 'ease-in-out',\r\n        })\r\n        ScrollReveal().reveal( revealRef3.current, {\r\n            origin: 'right',\r\n            distance: '100px',\r\n            duration: 1200,\r\n            delay: 450,\r\n            easing: 'ease-in-out',\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div className=\"container-fluid\">\r\n            <div className=\"card border-0 overflow-hidden\">\r\n                <div className=\"card-header d-sm-flex align-items-center border-bottom-0 bg-transparent p-5 text-center\">\r\n                    <img src={heroImage} alt=\"gambar hero\" id=\"hero-image\" ref={revealRef1}/>\r\n                    <p className=\"ms-3 mt-sm-0 mt-2\" ref={revealRef2}>Writer. Video maker. Flâneuse.\r\n                        <p className=\"display-6 text-semi-warning mt-3\" ref={revealRef3}>\r\n                            Searching for magic in between the cracks of ordinary objects.\r\n                        </p>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgProject(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"235px\",\n    height: \"314px\",\n    style: {\n      shapeRendering: \"geometricPrecision\",\n      textRendering: \"geometricPrecision\",\n      imageRendering: \"optimizeQuality\",\n      fillRule: \"evenodd\",\n      clipRule: \"evenodd\"\n    },\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ccc59a\",\n    d: \"M -0.5,-0.5 C 6.16667,-0.5 12.8333,-0.5 19.5,-0.5C 19.5086,1.30839 19.0086,2.97506 18,4.5C 17.6667,3.83333 17.3333,3.16667 17,2.5C 16.023,4.73999 15.523,7.07332 15.5,9.5C 15.5,11.5 15.5,13.5 15.5,15.5C 11.774,15.1774 8.10728,15.5108 4.5,16.5C 5.61026,21.1113 5.77693,25.778 5,30.5C 3.98398,29.3659 3.31732,29.6992 3,31.5C 2.66667,29.8333 2.33333,28.1667 2,26.5C 1.66667,30.8333 1.33333,35.1667 1,39.5C 0.822695,35.6437 0.322695,31.977 -0.5,28.5C -0.5,18.8333 -0.5,9.16667 -0.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dddcd3\",\n    d: \"M 60.5,-0.5 C 73.1667,-0.5 85.8333,-0.5 98.5,-0.5C 98.5,0.5 98.5,1.5 98.5,2.5C 98.5,19.1667 98.5,35.8333 98.5,52.5C 97.5,52.5 96.5,52.5 95.5,52.5C 87.2909,52.5875 79.2909,51.9208 71.5,50.5C 71.5,49.5 71.5,48.5 71.5,47.5C 80.0862,49.0075 88.7529,50.0075 97.5,50.5C 97.6659,45.4889 97.4993,40.4889 97,35.5C 94.3423,28.7177 94.1756,22.051 96.5,15.5C 96.5,13.8333 96.5,12.1667 96.5,10.5C 94.7085,10.634 93.0418,10.3007 91.5,9.5C 86.4362,7.7426 81.1029,6.57593 75.5,6C 72.3035,5.19549 69.3035,5.36216 66.5,6.5C 64.744,7.55213 64.0773,9.21879 64.5,11.5C 64.5,12.1667 64.8333,12.5 65.5,12.5C 65.5,13.5 65.5,14.5 65.5,15.5C 64.5,15.5 63.5,15.5 62.5,15.5C 62.5,26.1667 62.5,36.8333 62.5,47.5C 60.8379,31.698 60.1712,15.698 60.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f5ca87\",\n    d: \"M 111.5,-0.5 C 115.167,-0.5 118.833,-0.5 122.5,-0.5C 122.5,0.833333 122.5,2.16667 122.5,3.5C 120.938,3.73286 119.605,4.39952 118.5,5.5C 118.585,4.00475 117.919,3.00475 116.5,2.5C 114.958,3.74684 113.458,3.74684 112,2.5C 111.51,3.79323 111.343,5.12656 111.5,6.5C 108.739,5.91465 107.073,6.91465 106.5,9.5C 107.711,12.9141 109.044,16.2474 110.5,19.5C 109.391,19.4431 108.391,19.1098 107.5,18.5C 106.16,13.4831 104.827,8.48314 103.5,3.5C 105.924,3.80756 108.257,3.47423 110.5,2.5C 111.127,1.58317 111.461,0.583168 111.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9b896d\",\n    d: \"M 135.5,-0.5 C 137.167,-0.5 138.833,-0.5 140.5,-0.5C 150.231,2.01079 160.231,3.67746 170.5,4.5C 170.5,5.16667 170.167,5.5 169.5,5.5C 158.462,4.35134 147.462,3.01801 136.5,1.5C 136.167,0.833333 135.833,0.166667 135.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ebd4a4\",\n    d: \"M 140.5,-0.5 C 149.833,-0.5 159.167,-0.5 168.5,-0.5C 170.667,1.51127 173.334,2.67794 176.5,3C 185.519,4.1705 194.519,5.33717 203.5,6.5C 203.461,11.1844 203.128,15.8511 202.5,20.5C 202.16,24.8218 203.493,28.4885 206.5,31.5C 209.964,27.7316 213.964,26.7316 218.5,28.5C 217.596,29.209 217.263,30.209 217.5,31.5C 216.167,31.5 214.833,31.5 213.5,31.5C 211.302,31.8751 209.302,32.5418 207.5,33.5C 205.331,34.0818 202.998,34.0818 200.5,33.5C 200.666,25.4931 200.5,17.4931 200,9.5C 199.802,11.3817 199.302,13.0484 198.5,14.5C 197.596,14.4654 196.93,13.9654 196.5,13C 196.905,12.0546 197.572,11.3879 198.5,11C 196.073,10.0977 193.74,9.2644 191.5,8.5C 184.674,6.85971 177.674,5.52638 170.5,4.5C 160.231,3.67746 150.231,2.01079 140.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a58e64\",\n    d: \"M 122.5,-0.5 C 123.167,-0.5 123.833,-0.5 124.5,-0.5C 124.5,3.16667 124.5,6.83333 124.5,10.5C 124.167,10.5 123.833,10.5 123.5,10.5C 123.802,7.9407 123.468,5.60737 122.5,3.5C 122.5,2.16667 122.5,0.833333 122.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f2e8b6\",\n    d: \"M 168.5,-0.5 C 176.833,-0.5 185.167,-0.5 193.5,-0.5C 193.414,0.495904 193.748,1.32924 194.5,2C 197.23,2.72839 199.897,2.56172 202.5,1.5C 203.478,1.97665 204.311,2.64332 205,3.5C 204.744,12.1661 205.41,20.8328 207,29.5C 208.745,28.0443 210.578,26.711 212.5,25.5C 211.564,24.0256 210.23,23.0256 208.5,22.5C 207.571,21.3112 207.238,19.9778 207.5,18.5C 211.007,17.9935 214.174,18.6602 217,20.5C 218.439,18.9861 219.939,18.6527 221.5,19.5C 222.086,19.2907 222.586,18.9574 223,18.5C 223.667,15.1667 223.667,11.8333 223,8.5C 221.119,9.35441 219.286,9.02108 217.5,7.5C 216.77,6.06629 215.77,4.89963 214.5,4C 214.833,3.66667 215.167,3.33333 215.5,3C 213.833,2.66667 212.167,2.33333 210.5,2C 209.244,1.58309 208.577,0.749754 208.5,-0.5C 215.5,-0.5 222.5,-0.5 229.5,-0.5C 229.528,5.41532 228.861,11.2487 227.5,17C 228.504,19.3504 229.504,21.6837 230.5,24C 229.551,24.6172 228.718,24.4506 228,23.5C 226.361,27.8774 223.194,29.544 218.5,28.5C 213.964,26.7316 209.964,27.7316 206.5,31.5C 203.493,28.4885 202.16,24.8218 202.5,20.5C 203.128,15.8511 203.461,11.1844 203.5,6.5C 194.519,5.33717 185.519,4.1705 176.5,3C 173.334,2.67794 170.667,1.51127 168.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bcaf8c\",\n    d: \"M 170.5,4.5 C 177.674,5.52638 184.674,6.85971 191.5,8.5C 183.923,8.30438 176.589,7.30438 169.5,5.5C 170.167,5.5 170.5,5.16667 170.5,4.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#969d8b\",\n    d: \"M 66.5,6.5 C 69.3035,5.36216 72.3035,5.19549 75.5,6C 81.1029,6.57593 86.4362,7.7426 91.5,9.5C 86.3781,9.0766 81.3781,9.0766 76.5,9.5C 76.5,9.16667 76.5,8.83333 76.5,8.5C 73.981,7.27318 70.6477,6.60652 66.5,6.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#efeb94\",\n    d: \"M 118.5,5.5 C 118.241,9.23957 118.574,12.9062 119.5,16.5C 117.556,19.1554 114.89,20.4887 111.5,20.5C 111.5,19.8333 111.167,19.5 110.5,19.5C 109.044,16.2474 107.711,12.9141 106.5,9.5C 107.073,6.91465 108.739,5.91465 111.5,6.5C 111.343,5.12656 111.51,3.79323 112,2.5C 113.458,3.74684 114.958,3.74684 116.5,2.5C 117.919,3.00475 118.585,4.00475 118.5,5.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bcb796\",\n    d: \"M 124.5,-0.5 C 127.167,-0.5 129.833,-0.5 132.5,-0.5C 132.5,3.16667 132.5,6.83333 132.5,10.5C 130.833,10.5 129.167,10.5 127.5,10.5C 126.508,10.3284 125.842,10.6618 125.5,11.5C 124.833,11.5 124.5,11.1667 124.5,10.5C 124.5,6.83333 124.5,3.16667 124.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#73816f\",\n    d: \"M 66.5,6.5 C 70.6477,6.60652 73.981,7.27318 76.5,8.5C 73.5525,8.77712 70.7191,8.44379 68,7.5C 67.2597,9.31873 66.0931,10.6521 64.5,11.5C 64.0773,9.21879 64.744,7.55213 66.5,6.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a19986\",\n    d: \"M 132.5,-0.5 C 133.5,-0.5 134.5,-0.5 135.5,-0.5C 135.833,0.166667 136.167,0.833333 136.5,1.5C 134.526,11.1107 133.859,21.1107 134.5,31.5C 134.5,42.1667 134.5,52.8333 134.5,63.5C 134.167,63.5 133.833,63.5 133.5,63.5C 133.667,46.1635 133.5,28.8301 133,11.5C 131.374,11.8541 129.541,11.8541 127.5,11.5C 127.5,11.1667 127.5,10.8333 127.5,10.5C 129.167,10.5 130.833,10.5 132.5,10.5C 132.5,6.83333 132.5,3.16667 132.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f2ecbf\",\n    d: \"M 193.5,-0.5 C 198.5,-0.5 203.5,-0.5 208.5,-0.5C 208.577,0.749754 209.244,1.58309 210.5,2C 212.167,2.33333 213.833,2.66667 215.5,3C 215.167,3.33333 214.833,3.66667 214.5,4C 215.77,4.89963 216.77,6.06629 217.5,7.5C 219.286,9.02108 221.119,9.35441 223,8.5C 223.667,11.8333 223.667,15.1667 223,18.5C 222.586,18.9574 222.086,19.2907 221.5,19.5C 219.939,18.6527 218.439,18.9861 217,20.5C 214.174,18.6602 211.007,17.9935 207.5,18.5C 207.238,19.9778 207.571,21.3112 208.5,22.5C 210.23,23.0256 211.564,24.0256 212.5,25.5C 210.578,26.711 208.745,28.0443 207,29.5C 205.41,20.8328 204.744,12.1661 205,3.5C 204.311,2.64332 203.478,1.97665 202.5,1.5C 199.897,2.56172 197.23,2.72839 194.5,2C 193.748,1.32924 193.414,0.495904 193.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#70897a\",\n    d: \"M 91.5,9.5 C 93.0418,10.3007 94.7085,10.634 96.5,10.5C 96.5,12.1667 96.5,13.8333 96.5,15.5C 95.5,15.5 94.5,15.5 93.5,15.5C 93.6399,13.8762 92.9733,12.7096 91.5,12C 86.5246,12.3284 81.5246,12.3284 76.5,12C 73.8875,10.9288 73.8875,10.0955 76.5,9.5C 81.3781,9.0766 86.3781,9.0766 91.5,9.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f2e290\",\n    d: \"M 122.5,3.5 C 123.468,5.60737 123.802,7.9407 123.5,10.5C 123.659,19.0658 119.659,22.3991 111.5,20.5C 114.89,20.4887 117.556,19.1554 119.5,16.5C 118.574,12.9062 118.241,9.23957 118.5,5.5C 119.605,4.39952 120.938,3.73286 122.5,3.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#eeede0\",\n    d: \"M 136.5,1.5 C 147.462,3.01801 158.462,4.35134 169.5,5.5C 176.589,7.30438 183.923,8.30438 191.5,8.5C 193.74,9.2644 196.073,10.0977 198.5,11C 197.572,11.3879 196.905,12.0546 196.5,13C 196.93,13.9654 197.596,14.4654 198.5,14.5C 198.5,18.5 198.5,22.5 198.5,26.5C 198.5,28.1667 198.5,29.8333 198.5,31.5C 198.167,31.5 197.833,31.5 197.5,31.5C 196.167,31.5 194.833,31.5 193.5,31.5C 193.5,29.8333 193.5,28.1667 193.5,26.5C 190.771,25.4696 188.104,25.4696 185.5,26.5C 185.414,25.5041 185.748,24.6708 186.5,24C 191.083,22.8403 192.416,20.007 190.5,15.5C 189.138,17.012 188.804,18.512 189.5,20C 185.845,21.0053 183.512,19.672 182.5,16C 181.552,15.5172 180.552,15.3505 179.5,15.5C 179.5,14.5 179.5,13.5 179.5,12.5C 178.167,12.5 176.833,12.5 175.5,12.5C 175.5,14.1667 175.5,15.8333 175.5,17.5C 180.186,19.1316 181.686,22.4649 180,27.5C 179.617,28.056 179.117,28.3893 178.5,28.5C 180.032,25.4578 179.699,22.6244 177.5,20C 172.919,19.5584 170.252,21.7251 169.5,26.5C 165.314,27.9079 160.981,28.5745 156.5,28.5C 156.5,27.5 156.5,26.5 156.5,25.5C 152.23,25.6178 147.897,25.4512 143.5,25C 142.883,27.277 142.216,29.4437 141.5,31.5C 137.314,21.46 134.981,21.46 134.5,31.5C 133.859,21.1107 134.526,11.1107 136.5,1.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#edf0e8\",\n    d: \"M 135.5,3.5 C 142.147,3.41235 148.481,4.74569 154.5,7.5C 153.726,8.71118 152.893,8.71118 152,7.5C 149.732,11.6557 150.399,12.3223 154,9.5C 154.333,10.1667 154.667,10.8333 155,11.5C 156.419,10.5399 157.919,9.70653 159.5,9C 165.833,8.33333 172.167,8.33333 178.5,9C 179.833,9.66667 179.833,10.3333 178.5,11C 176.888,11.7203 175.388,11.5536 174,10.5C 173.598,11.8721 173.098,13.2054 172.5,14.5C 168.217,15.4922 163.884,15.8256 159.5,15.5C 159.5,17.1667 159.5,18.8333 159.5,20.5C 156.459,20.5944 154.793,19.0944 154.5,16C 152.5,15.3333 150.5,15.3333 148.5,16C 147.663,17.0113 147.33,18.1779 147.5,19.5C 146.448,19.6495 145.448,19.4828 144.5,19C 145.973,18.2904 146.64,17.1238 146.5,15.5C 144.567,15.2714 142.9,14.4381 141.5,13C 139.527,12.5045 137.527,12.3379 135.5,12.5C 135.5,9.5 135.5,6.5 135.5,3.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b9af88\",\n    d: \"M 40.5,-0.5 C 41.5,-0.5 42.5,-0.5 43.5,-0.5C 41.3536,10.0486 40.187,20.7153 40,31.5C 39.6667,31.1667 39.3333,30.8333 39,30.5C 37.4158,34.169 36.5825,38.0023 36.5,42C 36.5465,44.2953 37.2132,46.1286 38.5,47.5C 39.0431,47.56 39.3764,47.8933 39.5,48.5C 37.604,49.4656 35.604,49.7989 33.5,49.5C 32.0689,48.9181 30.7356,48.0848 29.5,47C 30.7979,43.533 32.1313,40.033 33.5,36.5C 32.6171,35.452 31.9504,34.2853 31.5,33C 32.791,30.6292 33.791,28.1292 34.5,25.5C 35.1924,26.0253 35.6924,26.6919 36,27.5C 36.49,26.2068 36.6567,24.8734 36.5,23.5C 36.334,18.1563 36.5006,12.8229 37,7.5C 36.9646,11.2452 37.9646,11.9119 40,9.5C 40.4983,6.18323 40.665,2.8499 40.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d2cba3\",\n    d: \"M 19.5,-0.5 C 26.5,-0.5 33.5,-0.5 40.5,-0.5C 40.665,2.8499 40.4983,6.18323 40,9.5C 37.9646,11.9119 36.9646,11.2452 37,7.5C 36.5006,12.8229 36.334,18.1563 36.5,23.5C 35.8343,20.9723 35.1676,18.3056 34.5,15.5C 33.8333,17.5 33.1667,19.5 32.5,21.5C 31.7022,19.9223 31.2022,18.2556 31,16.5C 30.8283,21.2018 30.3283,25.8685 29.5,30.5C 27.6401,24.3221 26.4735,17.9888 26,11.5C 25.1301,12.1079 24.6301,12.9412 24.5,14C 26.1015,19.4111 26.6015,24.9111 26,30.5C 24.9823,29.2941 24.4823,29.6274 24.5,31.5C 24.737,34.0635 25.237,34.0635 26,31.5C 26.7805,32.9437 26.6139,34.277 25.5,35.5C 24.914,35.2907 24.414,34.9574 24,34.5C 23.8327,29.245 23.1661,23.9117 22,18.5C 21.5958,23.7698 21.4291,28.7698 21.5,33.5C 20.478,30.5589 19.6446,27.5589 19,24.5C 18.6667,24.8333 18.3333,25.1667 18,25.5C 17.9327,19.9019 17.0994,14.5686 15.5,9.5C 15.523,7.07332 16.023,4.73999 17,2.5C 17.3333,3.16667 17.6667,3.83333 18,4.5C 19.0086,2.97506 19.5086,1.30839 19.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7c7055\",\n    d: \"M 51.5,-0.5 C 52.8333,-0.5 54.1667,-0.5 55.5,-0.5C 55.5,10.1667 55.5,20.8333 55.5,31.5C 55.2912,42.1936 55.6245,52.8602 56.5,63.5C 56.631,64.2389 56.4643,64.9056 56,65.5C 55.7206,62.5432 54.8873,59.8766 53.5,57.5C 52.3734,56.8783 51.3734,56.045 50.5,55C 47.3054,54.8195 44.3054,54.3195 41.5,53.5C 43.5273,53.6621 45.5273,53.4955 47.5,53C 43.551,52.1932 43.551,51.6932 47.5,51.5C 47.5,44.8333 47.5,38.1667 47.5,31.5C 48.5,31.5 49.5,31.5 50.5,31.5C 50.6233,20.8253 50.9566,10.1586 51.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ad8d5a\",\n    d: \"M 127.5,10.5 C 127.5,10.8333 127.5,11.1667 127.5,11.5C 128.855,13.9127 129.855,16.4127 130.5,19C 129.179,21.654 127.179,23.654 124.5,25C 127.666,25.3221 130.333,26.4887 132.5,28.5C 125.407,28.6591 118.407,27.9924 111.5,26.5C 111.5,26.1667 111.5,25.8333 111.5,25.5C 116.191,24.1032 120.857,22.6032 125.5,21C 126.357,20.3109 127.023,19.4776 127.5,18.5C 126.423,16.2706 125.756,13.9372 125.5,11.5C 125.842,10.6618 126.508,10.3284 127.5,10.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f8d088\",\n    d: \"M 123.5,10.5 C 123.833,10.5 124.167,10.5 124.5,10.5C 124.5,11.1667 124.833,11.5 125.5,11.5C 125.756,13.9372 126.423,16.2706 127.5,18.5C 127.023,19.4776 126.357,20.3109 125.5,21C 120.857,22.6032 116.191,24.1032 111.5,25.5C 110.659,23.6208 110.325,21.6208 110.5,19.5C 111.167,19.5 111.5,19.8333 111.5,20.5C 119.659,22.3991 123.659,19.0658 123.5,10.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d0b8a1\",\n    d: \"M 107.5,19.5 C 108.53,20.5523 109.197,21.8857 109.5,23.5C 108.905,26.1401 108.572,28.8067 108.5,31.5C 107.833,31.5 107.167,31.5 106.5,31.5C 104.565,30.8505 102.565,30.5172 100.5,30.5C 100.5,26.5 100.5,22.5 100.5,18.5C 102.806,18.9926 105.139,19.3259 107.5,19.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9c8261\",\n    d: \"M 127.5,11.5 C 129.541,11.8541 131.374,11.8541 133,11.5C 133.5,28.8301 133.667,46.1635 133.5,63.5C 133.167,63.5 132.833,63.5 132.5,63.5C 132.5,51.8333 132.5,40.1667 132.5,28.5C 130.333,26.4887 127.666,25.3221 124.5,25C 127.179,23.654 129.179,21.654 130.5,19C 129.855,16.4127 128.855,13.9127 127.5,11.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e8dca6\",\n    d: \"M 229.5,-0.5 C 231.167,-0.5 232.833,-0.5 234.5,-0.5C 234.5,10.1667 234.5,20.8333 234.5,31.5C 230.429,31.2338 226.429,31.5672 222.5,32.5C 220.812,31.4787 219.479,30.1454 218.5,28.5C 223.194,29.544 226.361,27.8774 228,23.5C 228.718,24.4506 229.551,24.6172 230.5,24C 229.504,21.6837 228.504,19.3504 227.5,17C 228.861,11.2487 229.528,5.41532 229.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c9b3a2\",\n    d: \"M 98.5,2.5 C 99.4952,14.6554 99.8286,26.9887 99.5,39.5C 99.5,42.1667 99.5,44.8333 99.5,47.5C 99.7947,49.7354 99.4614,51.7354 98.5,53.5C 97.209,53.7373 96.209,53.404 95.5,52.5C 96.5,52.5 97.5,52.5 98.5,52.5C 98.5,35.8333 98.5,19.1667 98.5,2.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ecdbd3\",\n    d: \"M 185.5,26.5 C 185.704,29.5176 186.037,32.5176 186.5,35.5C 187.552,35.3505 188.552,35.5172 189.5,36C 187.563,36.1216 186.23,36.955 185.5,38.5C 184.833,38.5 184.5,38.8333 184.5,39.5C 183.833,38.8333 183.167,38.1667 182.5,37.5C 179.633,37.6308 177.967,36.2974 177.5,33.5C 179.213,35.8504 181.547,36.8504 184.5,36.5C 184.825,29.6694 182.159,28.0027 176.5,31.5C 176.167,31.5 175.833,31.5 175.5,31.5C 175.5,30.8333 175.5,30.1667 175.5,29.5C 176.609,29.4431 177.609,29.1098 178.5,28.5C 179.117,28.3893 179.617,28.056 180,27.5C 181.686,22.4649 180.186,19.1316 175.5,17.5C 175.5,15.8333 175.5,14.1667 175.5,12.5C 176.833,12.5 178.167,12.5 179.5,12.5C 179.5,13.5 179.5,14.5 179.5,15.5C 180.552,15.3505 181.552,15.5172 182.5,16C 183.512,19.672 185.845,21.0053 189.5,20C 188.804,18.512 189.138,17.012 190.5,15.5C 192.416,20.007 191.083,22.8403 186.5,24C 185.748,24.6708 185.414,25.5041 185.5,26.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c1ad87\",\n    d: \"M 207.5,33.5 C 207.5,33.8333 207.5,34.1667 207.5,34.5C 205.958,35.3007 204.292,35.634 202.5,35.5C 202.617,37.4835 201.95,39.1502 200.5,40.5C 199.833,35.6833 199.166,31.0166 198.5,26.5C 198.5,22.5 198.5,18.5 198.5,14.5C 199.302,13.0484 199.802,11.3817 200,9.5C 200.5,17.4931 200.666,25.4931 200.5,33.5C 202.998,34.0818 205.331,34.0818 207.5,33.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e6eac2\",\n    d: \"M 178.5,28.5 C 177.609,29.1098 176.609,29.4431 175.5,29.5C 172.687,29.9754 170.687,28.9754 169.5,26.5C 170.252,21.7251 172.919,19.5584 177.5,20C 179.699,22.6244 180.032,25.4578 178.5,28.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dca86c\",\n    d: \"M 107.5,18.5 C 108.391,19.1098 109.391,19.4431 110.5,19.5C 110.325,21.6208 110.659,23.6208 111.5,25.5C 111.5,25.8333 111.5,26.1667 111.5,26.5C 111.5,27.5 111.5,28.5 111.5,29.5C 111.5,30.1667 111.5,30.8333 111.5,31.5C 110.833,31.5 110.167,31.5 109.5,31.5C 109.167,31.5 108.833,31.5 108.5,31.5C 108.572,28.8067 108.905,26.1401 109.5,23.5C 109.197,21.8857 108.53,20.5523 107.5,19.5C 107.5,19.1667 107.5,18.8333 107.5,18.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dfd9c3\",\n    d: \"M 197.5,31.5 C 198.324,36.4452 196.324,39.1118 191.5,39.5C 189.621,38.6586 187.621,38.3253 185.5,38.5C 186.23,36.955 187.563,36.1216 189.5,36C 188.552,35.5172 187.552,35.3505 186.5,35.5C 186.037,32.5176 185.704,29.5176 185.5,26.5C 188.104,25.4696 190.771,25.4696 193.5,26.5C 193.5,28.1667 193.5,29.8333 193.5,31.5C 194.833,31.5 196.167,31.5 197.5,31.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cfc8a2\",\n    d: \"M 15.5,15.5 C 15.3354,18.5184 15.502,21.5184 16,24.5C 16.7398,26.3774 17.5731,27.8774 18.5,29C 18.0548,30.4469 17.3881,31.7803 16.5,33C 17.6493,34.7297 17.6493,36.3963 16.5,38C 19.7736,40.604 20.1069,43.4373 17.5,46.5C 11.5368,47.4959 5.53675,47.8293 -0.5,47.5C -0.5,41.1667 -0.5,34.8333 -0.5,28.5C 0.322695,31.977 0.822695,35.6437 1,39.5C 1.33333,35.1667 1.66667,30.8333 2,26.5C 2.33333,28.1667 2.66667,29.8333 3,31.5C 3.31732,29.6992 3.98398,29.3659 5,30.5C 5.77693,25.778 5.61026,21.1113 4.5,16.5C 8.10728,15.5108 11.774,15.1774 15.5,15.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dedfdc\",\n    d: \"M 65.5,12.5 C 66.3267,17.6509 66.8267,22.9842 67,28.5C 67.3742,29.4162 67.8742,30.2496 68.5,31C 76.7154,32.9679 85.0487,33.8012 93.5,33.5C 93.5,27.5 93.5,21.5 93.5,15.5C 94.5,15.5 95.5,15.5 96.5,15.5C 94.1756,22.051 94.3423,28.7177 97,35.5C 97.4993,40.4889 97.6659,45.4889 97.5,50.5C 88.7529,50.0075 80.0862,49.0075 71.5,47.5C 71.5,48.5 71.5,49.5 71.5,50.5C 68.8333,50.5 66.1667,50.5 63.5,50.5C 63.7373,49.209 63.404,48.209 62.5,47.5C 62.5,36.8333 62.5,26.1667 62.5,15.5C 63.5,15.5 64.5,15.5 65.5,15.5C 65.5,14.5 65.5,13.5 65.5,12.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#75b3a6\",\n    d: \"M 76.5,8.5 C 76.5,8.83333 76.5,9.16667 76.5,9.5C 73.8875,10.0955 73.8875,10.9288 76.5,12C 81.5246,12.3284 86.5246,12.3284 91.5,12C 92.9733,12.7096 93.6399,13.8762 93.5,15.5C 93.5,21.5 93.5,27.5 93.5,33.5C 85.0487,33.8012 76.7154,32.9679 68.5,31C 67.8742,30.2496 67.3742,29.4162 67,28.5C 66.8267,22.9842 66.3267,17.6509 65.5,12.5C 64.8333,12.5 64.5,12.1667 64.5,11.5C 66.0931,10.6521 67.2597,9.31873 68,7.5C 70.7191,8.44379 73.5525,8.77712 76.5,8.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#69857b\",\n    d: \"M 68.5,16.5 C 75.5102,17.5458 82.8436,18.3791 90.5,19C 92.4865,21.4699 92.9865,24.3033 92,27.5C 91.2753,28.0585 90.4419,28.3918 89.5,28.5C 83.2029,27.4212 76.8696,26.5878 70.5,26C 67.2252,23.9393 66.8919,21.606 69.5,19C 68.7476,18.3292 68.4142,17.4959 68.5,16.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7e7b77\",\n    d: \"M 73.5,18.5 C 77.4144,19.086 81.2477,20.086 85,21.5C 86.4397,20.8524 87.9397,20.5191 89.5,20.5C 89.5,22.5 89.5,24.5 89.5,26.5C 82.7849,26.3356 76.4516,24.8356 70.5,22C 74.8518,21.5811 75.1851,20.9145 71.5,20C 72.4158,19.7216 73.0825,19.2216 73.5,18.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ece454\",\n    d: \"M 111.5,29.5 C 118.053,28.9323 124.387,29.599 130.5,31.5C 130.833,34.6667 131.167,37.8333 131.5,41C 131.485,44.5758 130.818,47.7425 129.5,50.5C 129.737,49.209 129.404,48.209 128.5,47.5C 129.306,39.9389 128.972,36.2722 127.5,36.5C 126.325,36.281 125.325,36.6143 124.5,37.5C 122.883,40.7843 120.55,43.4509 117.5,45.5C 116.752,43.6675 115.752,42.0009 114.5,40.5C 115.025,39.8076 115.692,39.3076 116.5,39C 115.228,37.6932 114.228,36.1932 113.5,34.5C 112.416,35.6651 111.583,36.9984 111,38.5C 109.961,37.7562 109.461,36.7562 109.5,35.5C 110.6,34.3951 111.267,33.0618 111.5,31.5C 111.5,30.8333 111.5,30.1667 111.5,29.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#eed36b\",\n    d: \"M 109.5,31.5 C 110.167,31.5 110.833,31.5 111.5,31.5C 111.267,33.0618 110.6,34.3951 109.5,35.5C 108.596,36.209 108.263,37.209 108.5,38.5C 108.167,38.5 107.833,38.5 107.5,38.5C 107.185,35.7892 107.852,33.4559 109.5,31.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#988b6b\",\n    d: \"M 44.5,-0.5 C 46.8333,-0.5 49.1667,-0.5 51.5,-0.5C 50.9566,10.1586 50.6233,20.8253 50.5,31.5C 49.5,31.5 48.5,31.5 47.5,31.5C 47.5,38.1667 47.5,44.8333 47.5,51.5C 43.551,51.6932 43.551,52.1932 47.5,53C 45.5273,53.4955 43.5273,53.6621 41.5,53.5C 38.1667,53.5 34.8333,53.5 31.5,53.5C 28.6146,53.8064 25.9479,53.4731 23.5,52.5C 27.8461,52.6657 32.1794,52.499 36.5,52C 34.8807,51.7645 33.8807,50.9311 33.5,49.5C 35.604,49.7989 37.604,49.4656 39.5,48.5C 39.3764,47.8933 39.0431,47.56 38.5,47.5C 39.4326,43.7673 40.4326,39.7673 41.5,35.5C 42.9975,23.5388 43.9975,11.5388 44.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a47c60\",\n    d: \"M 98.5,-0.5 C 99.1667,-0.5 99.8333,-0.5 100.5,-0.5C 102.597,1.48245 105.264,2.48245 108.5,2.5C 108.5,1.5 108.5,0.5 108.5,-0.5C 109.5,-0.5 110.5,-0.5 111.5,-0.5C 111.461,0.583168 111.127,1.58317 110.5,2.5C 108.257,3.47423 105.924,3.80756 103.5,3.5C 104.827,8.48314 106.16,13.4831 107.5,18.5C 107.5,18.8333 107.5,19.1667 107.5,19.5C 105.139,19.3259 102.806,18.9926 100.5,18.5C 100.5,22.5 100.5,26.5 100.5,30.5C 102.565,30.5172 104.565,30.8505 106.5,31.5C 106.386,33.7179 105.72,35.7179 104.5,37.5C 102.833,38.1667 101.167,38.8333 99.5,39.5C 99.8286,26.9887 99.4952,14.6554 98.5,2.5C 98.5,1.5 98.5,0.5 98.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e2d4c3\",\n    d: \"M 100.5,-0.5 C 103.167,-0.5 105.833,-0.5 108.5,-0.5C 108.5,0.5 108.5,1.5 108.5,2.5C 105.264,2.48245 102.597,1.48245 100.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#efefe3\",\n    d: \"M 169.5,26.5 C 170.687,28.9754 172.687,29.9754 175.5,29.5C 175.5,30.1667 175.5,30.8333 175.5,31.5C 173.283,33.0799 170.616,34.0799 167.5,34.5C 169.664,36.6839 172.331,38.0172 175.5,38.5C 171.182,39.5404 166.849,39.5404 162.5,38.5C 161.5,38.5 160.5,38.5 159.5,38.5C 159.5,39.8333 159.5,41.1667 159.5,42.5C 160.5,42.5 161.5,42.5 162.5,42.5C 164.648,42.3894 164.981,43.056 163.5,44.5C 165.743,45.4742 168.076,45.8076 170.5,45.5C 170.342,49.4177 168.342,51.4177 164.5,51.5C 165.038,49.8828 165.371,48.2161 165.5,46.5C 162.183,45.7791 158.849,45.6124 155.5,46C 155.034,47.2988 155.034,48.7988 155.5,50.5C 152.552,50.2229 149.719,50.5562 147,51.5C 148.046,53.9016 148.546,56.5683 148.5,59.5C 150.099,59.2322 151.432,59.5655 152.5,60.5C 150.105,61.3635 147.771,61.3635 145.5,60.5C 148.319,56.8481 147.319,54.5147 142.5,53.5C 141.534,51.604 141.201,49.604 141.5,47.5C 143.282,48.7196 145.282,49.3862 147.5,49.5C 147.938,45.0917 145.938,43.4251 141.5,44.5C 141.5,40.1667 141.5,35.8333 141.5,31.5C 142.216,29.4437 142.883,27.277 143.5,25C 147.897,25.4512 152.23,25.6178 156.5,25.5C 156.5,26.5 156.5,27.5 156.5,28.5C 160.981,28.5745 165.314,27.9079 169.5,26.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cf9528\",\n    d: \"M 218.5,28.5 C 219.479,30.1454 220.812,31.4787 222.5,32.5C 226.429,31.5672 230.429,31.2338 234.5,31.5C 234.5,33.8333 234.5,36.1667 234.5,38.5C 232.167,38.5 229.833,38.5 227.5,38.5C 226.448,38.6495 225.448,38.4828 224.5,38C 225.973,37.2904 226.64,36.1238 226.5,34.5C 221.948,35.9264 217.281,36.9264 212.5,37.5C 211.897,35.5477 212.23,33.5477 213.5,31.5C 214.833,31.5 216.167,31.5 217.5,31.5C 217.263,30.209 217.596,29.209 218.5,28.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ebbec3\",\n    d: \"M 177.5,33.5 C 177.672,32.5084 177.338,31.8417 176.5,31.5C 182.159,28.0027 184.825,29.6694 184.5,36.5C 181.547,36.8504 179.213,35.8504 177.5,33.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ab9e7a\",\n    d: \"M 43.5,-0.5 C 43.8333,-0.5 44.1667,-0.5 44.5,-0.5C 43.9975,11.5388 42.9975,23.5388 41.5,35.5C 40.4326,39.7673 39.4326,43.7673 38.5,47.5C 37.2132,46.1286 36.5465,44.2953 36.5,42C 36.5825,38.0023 37.4158,34.169 39,30.5C 39.3333,30.8333 39.6667,31.1667 40,31.5C 40.187,20.7153 41.3536,10.0486 43.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a89258\",\n    d: \"M 106.5,31.5 C 107.167,31.5 107.833,31.5 108.5,31.5C 108.833,31.5 109.167,31.5 109.5,31.5C 107.852,33.4559 107.185,35.7892 107.5,38.5C 107.5,38.8333 107.5,39.1667 107.5,39.5C 106.5,38.8333 105.5,38.1667 104.5,37.5C 105.72,35.7179 106.386,33.7179 106.5,31.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c1944c\",\n    d: \"M 213.5,31.5 C 212.23,33.5477 211.897,35.5477 212.5,37.5C 211.081,38.4511 209.415,38.7845 207.5,38.5C 207.5,37.1667 207.5,35.8333 207.5,34.5C 207.5,34.1667 207.5,33.8333 207.5,33.5C 209.302,32.5418 211.302,31.8751 213.5,31.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b87c21\",\n    d: \"M 227.5,38.5 C 225.983,39.7349 224.316,39.7349 222.5,38.5C 219.741,39.8793 217.075,41.2126 214.5,42.5C 213.833,42.8333 213.167,43.1667 212.5,43.5C 211.081,42.5489 209.415,42.2155 207.5,42.5C 207.5,41.5 207.5,40.5 207.5,39.5C 207.5,39.1667 207.5,38.8333 207.5,38.5C 209.415,38.7845 211.081,38.4511 212.5,37.5C 217.281,36.9264 221.948,35.9264 226.5,34.5C 226.64,36.1238 225.973,37.2904 224.5,38C 225.448,38.4828 226.448,38.6495 227.5,38.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cbc49f\",\n    d: \"M 15.5,9.5 C 17.0994,14.5686 17.9327,19.9019 18,25.5C 18.3333,25.1667 18.6667,24.8333 19,24.5C 19.6446,27.5589 20.478,30.5589 21.5,33.5C 21.4291,28.7698 21.5958,23.7698 22,18.5C 23.1661,23.9117 23.8327,29.245 24,34.5C 24.414,34.9574 24.914,35.2907 25.5,35.5C 26.6139,34.277 26.7805,32.9437 26,31.5C 25.237,34.0635 24.737,34.0635 24.5,31.5C 24.4823,29.6274 24.9823,29.2941 26,30.5C 26.6015,24.9111 26.1015,19.4111 24.5,14C 24.6301,12.9412 25.1301,12.1079 26,11.5C 26.4735,17.9888 27.6401,24.3221 29.5,30.5C 30.3283,25.8685 30.8283,21.2018 31,16.5C 31.2022,18.2556 31.7022,19.9223 32.5,21.5C 33.1667,19.5 33.8333,17.5 34.5,15.5C 35.1676,18.3056 35.8343,20.9723 36.5,23.5C 36.6567,24.8734 36.49,26.2068 36,27.5C 35.6924,26.6919 35.1924,26.0253 34.5,25.5C 33.791,28.1292 32.791,30.6292 31.5,33C 31.9504,34.2853 32.6171,35.452 33.5,36.5C 32.1313,40.033 30.7979,43.533 29.5,47C 30.7356,48.0848 32.0689,48.9181 33.5,49.5C 33.8807,50.9311 34.8807,51.7645 36.5,52C 32.1794,52.499 27.8461,52.6657 23.5,52.5C 15.5173,51.8345 7.51728,51.5012 -0.5,51.5C -0.5,50.1667 -0.5,48.8333 -0.5,47.5C 5.53675,47.8293 11.5368,47.4959 17.5,46.5C 20.1069,43.4373 19.7736,40.604 16.5,38C 17.6493,36.3963 17.6493,34.7297 16.5,33C 17.3881,31.7803 18.0548,30.4469 18.5,29C 17.5731,27.8774 16.7398,26.3774 16,24.5C 15.502,21.5184 15.3354,18.5184 15.5,15.5C 15.5,13.5 15.5,11.5 15.5,9.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a684e\",\n    d: \"M 104.5,37.5 C 104.617,39.4835 103.95,41.1502 102.5,42.5C 103.309,44.0709 103.643,45.7376 103.5,47.5C 102.295,48.6857 100.961,48.6857 99.5,47.5C 99.5,44.8333 99.5,42.1667 99.5,39.5C 101.167,38.8333 102.833,38.1667 104.5,37.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#976b20\",\n    d: \"M 227.5,38.5 C 229.833,38.5 232.167,38.5 234.5,38.5C 234.5,39.5 234.5,40.5 234.5,41.5C 231.904,40.7347 229.237,40.4013 226.5,40.5C 222.5,41.1667 218.5,41.8333 214.5,42.5C 217.075,41.2126 219.741,39.8793 222.5,38.5C 224.316,39.7349 225.983,39.7349 227.5,38.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f4f3ef\",\n    d: \"M 141.5,31.5 C 141.5,35.8333 141.5,40.1667 141.5,44.5C 141.5,45.5 141.5,46.5 141.5,47.5C 141.201,49.604 141.534,51.604 142.5,53.5C 147.319,54.5147 148.319,56.8481 145.5,60.5C 147.771,61.3635 150.105,61.3635 152.5,60.5C 152.833,60.5 153.167,60.5 153.5,60.5C 148.985,64.4112 144.319,64.4112 139.5,60.5C 138.614,61.325 138.281,62.325 138.5,63.5C 137.167,63.5 135.833,63.5 134.5,63.5C 134.5,52.8333 134.5,42.1667 134.5,31.5C 134.981,21.46 137.314,21.46 141.5,31.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d7eca7\",\n    d: \"M 162.5,38.5 C 163.833,39.8333 163.833,41.1667 162.5,42.5C 161.5,42.5 160.5,42.5 159.5,42.5C 159.5,41.1667 159.5,39.8333 159.5,38.5C 160.5,38.5 161.5,38.5 162.5,38.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cea89e\",\n    d: \"M 185.5,38.5 C 187.621,38.3253 189.621,38.6586 191.5,39.5C 191.5,40.8333 191.5,42.1667 191.5,43.5C 189.167,43.5 186.833,43.5 184.5,43.5C 184.5,42.1667 184.5,40.8333 184.5,39.5C 184.5,38.8333 184.833,38.5 185.5,38.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bdc97e\",\n    d: \"M 107.5,38.5 C 107.833,38.5 108.167,38.5 108.5,38.5C 110.177,41.9271 109.844,44.9271 107.5,47.5C 107.5,44.8333 107.5,42.1667 107.5,39.5C 107.5,39.1667 107.5,38.8333 107.5,38.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e9dc60\",\n    d: \"M 128.5,47.5 C 126.544,49.1484 124.211,49.8151 121.5,49.5C 117.821,49.6374 114.321,48.9707 111,47.5C 110.503,50.146 110.336,52.8127 110.5,55.5C 110.351,56.552 110.517,57.552 111,58.5C 113.106,56.709 115.606,56.0423 118.5,56.5C 119.209,57.404 120.209,57.7373 121.5,57.5C 118.344,58.4339 115.011,59.1006 111.5,59.5C 111.5,60.5 111.5,61.5 111.5,62.5C 113.527,62.3379 115.527,62.5045 117.5,63C 115.098,63.8141 112.765,63.6474 110.5,62.5C 109.721,57.8867 109.221,53.22 109,48.5C 108.27,55.5484 108.603,62.5484 110,69.5C 112.277,70.1172 114.444,70.7839 116.5,71.5C 113.145,71.9086 110.145,71.2419 107.5,69.5C 107.5,62.5 107.5,55.5 107.5,48.5C 107.5,48.1667 107.5,47.8333 107.5,47.5C 109.844,44.9271 110.177,41.9271 108.5,38.5C 108.263,37.209 108.596,36.209 109.5,35.5C 109.461,36.7562 109.961,37.7562 111,38.5C 111.583,36.9984 112.416,35.6651 113.5,34.5C 114.228,36.1932 115.228,37.6932 116.5,39C 115.692,39.3076 115.025,39.8076 114.5,40.5C 115.752,42.0009 116.752,43.6675 117.5,45.5C 120.55,43.4509 122.883,40.7843 124.5,37.5C 125.325,36.6143 126.325,36.281 127.5,36.5C 128.972,36.2722 129.306,39.9389 128.5,47.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#94aea2\",\n    d: \"M 104.5,37.5 C 105.5,38.1667 106.5,38.8333 107.5,39.5C 107.5,42.1667 107.5,44.8333 107.5,47.5C 106.167,47.5 104.833,47.5 103.5,47.5C 103.643,45.7376 103.309,44.0709 102.5,42.5C 103.95,41.1502 104.617,39.4835 104.5,37.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f2cadb\",\n    d: \"M 141.5,44.5 C 145.938,43.4251 147.938,45.0917 147.5,49.5C 145.282,49.3862 143.282,48.7196 141.5,47.5C 141.5,46.5 141.5,45.5 141.5,44.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#69702b\",\n    d: \"M 226.5,40.5 C 229.237,40.4013 231.904,40.7347 234.5,41.5C 234.5,45.1667 234.5,48.8333 234.5,52.5C 233.833,52.8333 233.167,53.1667 232.5,53.5C 231.504,53.5858 230.671,53.2524 230,52.5C 228.602,50.1861 228.435,47.8528 229.5,45.5C 229.121,43.7869 228.121,42.7869 226.5,42.5C 226.5,42.1667 226.5,41.8333 226.5,41.5C 226.5,41.1667 226.5,40.8333 226.5,40.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b1a46d\",\n    d: \"M 121.5,49.5 C 122.359,51.1059 122.526,52.7725 122,54.5C 123.624,54.5699 125.457,55.0699 127.5,56C 124.518,56.498 121.518,56.6646 118.5,56.5C 118.389,55.8826 118.056,55.3826 117.5,55C 118.973,54.2904 119.64,53.1238 119.5,51.5C 116.833,51.5 114.167,51.5 111.5,51.5C 111.351,52.552 111.517,53.552 112,54.5C 112.654,53.3044 113.154,53.3044 113.5,54.5C 112.675,55.3857 111.675,55.719 110.5,55.5C 110.336,52.8127 110.503,50.146 111,47.5C 114.321,48.9707 117.821,49.6374 121.5,49.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#eddc79\",\n    d: \"M 111.5,26.5 C 118.407,27.9924 125.407,28.6591 132.5,28.5C 132.5,40.1667 132.5,51.8333 132.5,63.5C 132.5,66.5 132.5,69.5 132.5,72.5C 126.974,72.8214 121.64,72.4881 116.5,71.5C 121.167,71.5 125.833,71.5 130.5,71.5C 130.503,67.476 130.836,63.476 131.5,59.5C 131.415,57.6672 130.748,56.3339 129.5,55.5C 129.5,53.8333 129.5,52.1667 129.5,50.5C 130.818,47.7425 131.485,44.5758 131.5,41C 131.167,37.8333 130.833,34.6667 130.5,31.5C 124.387,29.599 118.053,28.9323 111.5,29.5C 111.5,28.5 111.5,27.5 111.5,26.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3b401d\",\n    d: \"M 226.5,47.5 C 226.5,49.8333 226.5,52.1667 226.5,54.5C 221.55,57.4031 219.55,61.7364 220.5,67.5C 218.833,66.1667 217.167,64.8333 215.5,63.5C 216.901,60.6726 216.567,58.006 214.5,55.5C 216.511,52.8311 219.178,51.4978 222.5,51.5C 222.67,50.1779 222.337,49.0113 221.5,48C 223.134,47.5065 224.801,47.3398 226.5,47.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b2a78c\",\n    d: \"M 197.5,31.5 C 197.833,31.5 198.167,31.5 198.5,31.5C 198.167,36.8333 197.833,42.1667 197.5,47.5C 195.089,47.1367 193.589,48.1367 193,50.5C 192.667,50.1667 192.333,49.8333 192,49.5C 191.502,52.4816 191.335,55.4816 191.5,58.5C 184.884,59.3679 184.884,60.5346 191.5,62C 188.085,64.0723 188.085,65.239 191.5,65.5C 191.773,67.451 191.107,68.951 189.5,70C 190.833,70.3333 192.167,70.6667 193.5,71C 193.254,74.3494 193.254,77.8494 193.5,81.5C 190.167,81.5 186.833,81.5 183.5,81.5C 184.952,80.6981 186.618,80.1981 188.5,80C 186.09,78.4376 184.756,76.271 184.5,73.5C 185.643,70.9945 186.31,68.3278 186.5,65.5C 185.833,60.5 185.167,55.5 184.5,50.5C 184.59,48.7722 184.923,47.1056 185.5,45.5C 184.975,44.8076 184.308,44.3076 183.5,44C 183.728,43.6012 184.062,43.4346 184.5,43.5C 186.833,43.5 189.167,43.5 191.5,43.5C 191.5,42.1667 191.5,40.8333 191.5,39.5C 196.324,39.1118 198.324,36.4452 197.5,31.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d6bb93\",\n    d: \"M 55.5,-0.5 C 57.1667,-0.5 58.8333,-0.5 60.5,-0.5C 60.1712,15.698 60.8379,31.698 62.5,47.5C 63.404,48.209 63.7373,49.209 63.5,50.5C 62.7854,63.9967 62.7854,77.6634 63.5,91.5C 61.8708,88.4896 60.8708,85.1563 60.5,81.5C 60.2528,80.2867 59.5862,79.62 58.5,79.5C 58.5,76.8333 58.5,74.1667 58.5,71.5C 58.419,57.7946 57.419,44.4613 55.5,31.5C 55.5,20.8333 55.5,10.1667 55.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9d8976\",\n    d: \"M 63.5,50.5 C 66.1667,50.5 68.8333,50.5 71.5,50.5C 79.2909,51.9208 87.2909,52.5875 95.5,52.5C 96.209,53.404 97.209,53.7373 98.5,53.5C 98.4588,55.7453 97.6255,56.4119 96,55.5C 95.5017,58.8168 95.335,62.1501 95.5,65.5C 95.5,70.1667 95.5,74.8333 95.5,79.5C 95.5,85.8333 95.5,92.1667 95.5,98.5C 94.5,98.5 93.5,98.5 92.5,98.5C 94.4575,84.0764 95.1242,69.4097 94.5,54.5C 85.0907,54.5839 75.7574,53.9173 66.5,52.5C 65.8243,53.6016 65.1577,54.6016 64.5,55.5C 63.962,53.8828 63.6287,52.2161 63.5,50.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c8c17b\",\n    d: \"M 128.5,47.5 C 129.404,48.209 129.737,49.209 129.5,50.5C 129.5,52.1667 129.5,53.8333 129.5,55.5C 127.365,57.369 124.698,58.0356 121.5,57.5C 120.209,57.7373 119.209,57.404 118.5,56.5C 121.518,56.6646 124.518,56.498 127.5,56C 125.457,55.0699 123.624,54.5699 122,54.5C 122.526,52.7725 122.359,51.1059 121.5,49.5C 124.211,49.8151 126.544,49.1484 128.5,47.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e0d2c0\",\n    d: \"M 175.5,31.5 C 175.833,31.5 176.167,31.5 176.5,31.5C 177.338,31.8417 177.672,32.5084 177.5,33.5C 177.967,36.2974 179.633,37.6308 182.5,37.5C 182.657,38.8734 182.49,40.2068 182,41.5C 179.828,42.5089 178.662,44.1756 178.5,46.5C 182.5,46.8333 182.5,47.1667 178.5,47.5C 178.5,49.5 178.5,51.5 178.5,53.5C 179.5,53.5 180.5,53.5 181.5,53.5C 181.5,56.1667 181.5,58.8333 181.5,61.5C 182.552,61.3505 183.552,61.5172 184.5,62C 183.284,63.7398 181.618,64.7398 179.5,65C 180.376,66.5848 181.709,67.5848 183.5,68C 179.5,68.6667 179.5,69.3333 183.5,70C 181.779,71.5272 179.779,72.5272 177.5,73C 178.029,75.4286 179.363,77.2619 181.5,78.5C 180.975,79.1924 180.308,79.6924 179.5,80C 175.848,80.4986 172.182,80.6653 168.5,80.5C 168.5,80.1667 168.5,79.8333 168.5,79.5C 171.388,80.0102 173.721,79.3435 175.5,77.5C 175.5,76.5 175.5,75.5 175.5,74.5C 173.167,74.5 170.833,74.5 168.5,74.5C 168.5,73.5 168.5,72.5 168.5,71.5C 168.567,70.0413 168.234,68.7079 167.5,67.5C 167.833,66.8333 168.167,66.1667 168.5,65.5C 170.764,64.7814 173.097,64.448 175.5,64.5C 175.998,59.7984 174.664,55.7984 171.5,52.5C 173.734,50.6187 175.067,48.2853 175.5,45.5C 173.833,45.5 172.167,45.5 170.5,45.5C 168.076,45.8076 165.743,45.4742 163.5,44.5C 164.981,43.056 164.648,42.3894 162.5,42.5C 163.833,41.1667 163.833,39.8333 162.5,38.5C 166.849,39.5404 171.182,39.5404 175.5,38.5C 172.331,38.0172 169.664,36.6839 167.5,34.5C 170.616,34.0799 173.283,33.0799 175.5,31.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#efe1cf\",\n    d: \"M 92.5,98.5 C 83.8333,98.5 75.1667,98.5 66.5,98.5C 66.5,95.5 66.5,92.5 66.5,89.5C 66.1655,84.393 66.4988,80.0597 67.5,76.5C 67.5,83.1667 67.5,89.8333 67.5,96.5C 70.8333,96.5 74.1667,96.5 77.5,96.5C 82.5,96.5 87.5,96.5 92.5,96.5C 92.81,93.2869 92.4767,90.2869 91.5,87.5C 91.6582,84.4545 90.9915,81.6212 89.5,79C 91.3115,77.9593 91.6448,76.7927 90.5,75.5C 90.2865,73.8561 90.6198,72.3561 91.5,71C 89.8659,70.5065 88.1992,70.3398 86.5,70.5C 87.9187,69.5489 89.5853,69.2155 91.5,69.5C 91.5,67.5 91.5,65.5 91.5,63.5C 90.325,63.719 89.325,63.3857 88.5,62.5C 90.2159,56.4536 88.3825,55.1202 83,58.5C 82.7216,57.5842 82.2216,56.9175 81.5,56.5C 80.1667,56.1667 78.8333,55.8333 77.5,55.5C 74.2062,56.2081 71.0396,56.2081 68,55.5C 68.3011,59.9061 68.1344,64.2394 67.5,68.5C 66.8333,70.5 66.1667,72.5 65.5,74.5C 65.3473,68.155 65.014,61.8217 64.5,55.5C 65.1577,54.6016 65.8243,53.6016 66.5,52.5C 75.7574,53.9173 85.0907,54.5839 94.5,54.5C 95.1242,69.4097 94.4575,84.0764 92.5,98.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c0b96f\",\n    d: \"M 118.5,56.5 C 115.606,56.0423 113.106,56.709 111,58.5C 110.517,57.552 110.351,56.552 110.5,55.5C 111.675,55.719 112.675,55.3857 113.5,54.5C 113.154,53.3044 112.654,53.3044 112,54.5C 111.517,53.552 111.351,52.552 111.5,51.5C 114.167,51.5 116.833,51.5 119.5,51.5C 119.64,53.1238 118.973,54.2904 117.5,55C 118.056,55.3826 118.389,55.8826 118.5,56.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#575132\",\n    d: \"M 226.5,41.5 C 226.5,41.8333 226.5,42.1667 226.5,42.5C 225.167,44.1667 225.167,45.8333 226.5,47.5C 224.801,47.3398 223.134,47.5065 221.5,48C 222.337,49.0113 222.67,50.1779 222.5,51.5C 219.178,51.4978 216.511,52.8311 214.5,55.5C 216.567,58.006 216.901,60.6726 215.5,63.5C 213.833,63.5 212.167,63.5 210.5,63.5C 210.5,65.8333 210.5,68.1667 210.5,70.5C 209.5,70.5 208.5,70.5 207.5,70.5C 206.167,70.5 204.833,70.5 203.5,70.5C 202.896,64.6653 204.063,59.332 207,54.5C 207.497,52.1902 207.663,49.8568 207.5,47.5C 212.714,46.0315 218.047,45.3649 223.5,45.5C 223.5,44.1667 223.5,42.8333 223.5,41.5C 224.5,41.5 225.5,41.5 226.5,41.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#272f40\",\n    d: \"M -0.5,51.5 C 7.51728,51.5012 15.5173,51.8345 23.5,52.5C 25.9479,53.4731 28.6146,53.8064 31.5,53.5C 36.5686,55.0994 41.9019,55.9327 47.5,56C 50.1667,56.6667 50.1667,57.3333 47.5,58C 48.4158,58.2784 49.0825,58.7784 49.5,59.5C 32.8298,58.9164 16.1631,58.2498 -0.5,57.5C -0.5,55.5 -0.5,53.5 -0.5,51.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e4f2d7\",\n    d: \"M 164.5,51.5 C 149.87,52.8922 149.87,54.8922 164.5,57.5C 165.872,59.6198 165.205,60.6198 162.5,60.5C 159.5,60.5 156.5,60.5 153.5,60.5C 153.167,60.5 152.833,60.5 152.5,60.5C 151.432,59.5655 150.099,59.2322 148.5,59.5C 148.546,56.5683 148.046,53.9016 147,51.5C 149.719,50.5562 152.552,50.2229 155.5,50.5C 155.034,48.7988 155.034,47.2988 155.5,46C 158.849,45.6124 162.183,45.7791 165.5,46.5C 165.371,48.2161 165.038,49.8828 164.5,51.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#788f4c\",\n    d: \"M 226.5,54.5 C 227.043,54.56 227.376,54.8933 227.5,55.5C 225.942,57.9907 224.942,60.6574 224.5,63.5C 223.549,64.9187 223.216,66.5853 223.5,68.5C 222.209,68.7373 221.209,68.404 220.5,67.5C 219.55,61.7364 221.55,57.4031 226.5,54.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6b5c39\",\n    d: \"M 226.5,40.5 C 226.5,40.8333 226.5,41.1667 226.5,41.5C 225.5,41.5 224.5,41.5 223.5,41.5C 223.5,42.8333 223.5,44.1667 223.5,45.5C 218.047,45.3649 212.714,46.0315 207.5,47.5C 207.663,49.8568 207.497,52.1902 207,54.5C 204.063,59.332 202.896,64.6653 203.5,70.5C 202.912,73.6104 202.245,76.6104 201.5,79.5C 201.167,79.5 200.833,79.5 200.5,79.5C 200.169,70.8078 200.502,62.1411 201.5,53.5C 203.537,50.7737 205.203,47.7737 206.5,44.5C 208.409,43.6518 210.409,43.3184 212.5,43.5C 213.167,43.1667 213.833,42.8333 214.5,42.5C 218.5,41.8333 222.5,41.1667 226.5,40.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#56689a\",\n    d: \"M -0.5,57.5 C 16.1631,58.2498 32.8298,58.9164 49.5,59.5C 49.5,59.8333 49.5,60.1667 49.5,60.5C 46.2172,61.0811 42.8839,61.4145 39.5,61.5C 26.1802,60.5008 12.8468,59.8341 -0.5,59.5C -0.5,58.8333 -0.5,58.1667 -0.5,57.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#87734c\",\n    d: \"M 207.5,39.5 C 207.5,40.5 207.5,41.5 207.5,42.5C 209.415,42.2155 211.081,42.5489 212.5,43.5C 210.409,43.3184 208.409,43.6518 206.5,44.5C 205.203,47.7737 203.537,50.7737 201.5,53.5C 200.502,62.1411 200.169,70.8078 200.5,79.5C 200.167,79.5 199.833,79.5 199.5,79.5C 199.665,76.4816 199.498,73.4816 199,70.5C 198.667,71.8333 198.333,73.1667 198,74.5C 198.04,65.512 198.207,56.512 198.5,47.5C 204.193,48.3843 205.193,47.2176 201.5,44C 202.807,41.5198 204.807,40.0198 207.5,39.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a58c6d\",\n    d: \"M 55.5,31.5 C 57.419,44.4613 58.419,57.7946 58.5,71.5C 57.8333,68.8333 57.1667,66.1667 56.5,63.5C 55.6245,52.8602 55.2912,42.1936 55.5,31.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cecbb6\",\n    d: \"M 77.5,55.5 C 78.8333,55.8333 80.1667,56.1667 81.5,56.5C 81.6159,59.8599 81.9492,63.1933 82.5,66.5C 80.2075,66.7564 78.0408,66.4231 76,65.5C 75.063,61.8326 75.563,58.4993 77.5,55.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e9e3d9\",\n    d: \"M 170.5,45.5 C 172.167,45.5 173.833,45.5 175.5,45.5C 175.067,48.2853 173.734,50.6187 171.5,52.5C 174.664,55.7984 175.998,59.7984 175.5,64.5C 173.097,64.448 170.764,64.7814 168.5,65.5C 167.198,63.1782 165.198,61.8449 162.5,61.5C 162.5,61.1667 162.5,60.8333 162.5,60.5C 165.205,60.6198 165.872,59.6198 164.5,57.5C 149.87,54.8922 149.87,52.8922 164.5,51.5C 168.342,51.4177 170.342,49.4177 170.5,45.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a3967c\",\n    d: \"M 197.5,47.5 C 197.666,51.5138 197.499,55.5138 197,59.5C 196.707,61.9249 195.541,63.7582 193.5,65C 194.448,65.4828 195.448,65.6495 196.5,65.5C 196.631,71.0823 196.631,76.4157 196.5,81.5C 195.5,81.5 194.5,81.5 193.5,81.5C 193.254,77.8494 193.254,74.3494 193.5,71C 192.167,70.6667 190.833,70.3333 189.5,70C 191.107,68.951 191.773,67.451 191.5,65.5C 188.085,65.239 188.085,64.0723 191.5,62C 184.884,60.5346 184.884,59.3679 191.5,58.5C 191.335,55.4816 191.502,52.4816 192,49.5C 192.333,49.8333 192.667,50.1667 193,50.5C 193.589,48.1367 195.089,47.1367 197.5,47.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#586933\",\n    d: \"M 226.5,42.5 C 228.121,42.7869 229.121,43.7869 229.5,45.5C 228.435,47.8528 228.602,50.1861 230,52.5C 230.671,53.2524 231.504,53.5858 232.5,53.5C 231.099,56.7036 230.099,60.0369 229.5,63.5C 227.833,63.5 226.167,63.5 224.5,63.5C 224.942,60.6574 225.942,57.9907 227.5,55.5C 227.376,54.8933 227.043,54.56 226.5,54.5C 226.5,52.1667 226.5,49.8333 226.5,47.5C 225.167,45.8333 225.167,44.1667 226.5,42.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c8bfa8\",\n    d: \"M 182.5,37.5 C 183.167,38.1667 183.833,38.8333 184.5,39.5C 184.5,40.8333 184.5,42.1667 184.5,43.5C 184.062,43.4346 183.728,43.6012 183.5,44C 184.308,44.3076 184.975,44.8076 185.5,45.5C 184.923,47.1056 184.59,48.7722 184.5,50.5C 185.167,55.5 185.833,60.5 186.5,65.5C 186.31,68.3278 185.643,70.9945 184.5,73.5C 184.756,76.271 186.09,78.4376 188.5,80C 186.618,80.1981 184.952,80.6981 183.5,81.5C 182.167,81.5 180.833,81.5 179.5,81.5C 175.833,81.5 172.167,81.5 168.5,81.5C 168.5,81.1667 168.5,80.8333 168.5,80.5C 172.182,80.6653 175.848,80.4986 179.5,80C 180.308,79.6924 180.975,79.1924 181.5,78.5C 179.363,77.2619 178.029,75.4286 177.5,73C 179.779,72.5272 181.779,71.5272 183.5,70C 179.5,69.3333 179.5,68.6667 183.5,68C 181.709,67.5848 180.376,66.5848 179.5,65C 181.618,64.7398 183.284,63.7398 184.5,62C 183.552,61.5172 182.552,61.3505 181.5,61.5C 181.5,58.8333 181.5,56.1667 181.5,53.5C 180.5,53.5 179.5,53.5 178.5,53.5C 178.5,51.5 178.5,49.5 178.5,47.5C 182.5,47.1667 182.5,46.8333 178.5,46.5C 178.662,44.1756 179.828,42.5089 182,41.5C 182.49,40.2068 182.657,38.8734 182.5,37.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7187af\",\n    d: \"M -0.5,59.5 C 12.8468,59.8341 26.1802,60.5008 39.5,61.5C 42.8839,61.4145 46.2172,61.0811 49.5,60.5C 50.2653,63.0961 50.5987,65.7628 50.5,68.5C 49.2719,67.6935 48.2719,66.6935 47.5,65.5C 31.5165,64.5505 15.5165,63.8838 -0.5,63.5C -0.5,62.1667 -0.5,60.8333 -0.5,59.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a78263\",\n    d: \"M 99.5,47.5 C 100.961,48.6857 102.295,48.6857 103.5,47.5C 104.833,47.5 106.167,47.5 107.5,47.5C 107.5,47.8333 107.5,48.1667 107.5,48.5C 106.738,54.843 106.071,61.343 105.5,68C 105.387,69.6991 106.053,70.8658 107.5,71.5C 107.5,71.8333 107.5,72.1667 107.5,72.5C 104.833,72.5 102.167,72.5 99.5,72.5C 101.042,71.8365 102.709,71.1698 104.5,70.5C 102.507,69.8906 100.173,69.0573 97.5,68C 96.9341,67.0053 96.2674,66.172 95.5,65.5C 95.335,62.1501 95.5017,58.8168 96,55.5C 97.6255,56.4119 98.4588,55.7453 98.5,53.5C 99.4614,51.7354 99.7947,49.7354 99.5,47.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#df9995\",\n    d: \"M 153.5,60.5 C 156.5,60.5 159.5,60.5 162.5,60.5C 162.5,60.8333 162.5,61.1667 162.5,61.5C 159.833,61.5 157.167,61.5 154.5,61.5C 154.773,63.451 154.107,64.951 152.5,66C 154.902,66.8141 157.235,66.6474 159.5,65.5C 158.271,64.7189 156.938,64.2189 155.5,64C 158.882,63.1764 162.216,63.343 165.5,64.5C 164.398,65.1757 163.398,65.8423 162.5,66.5C 161.508,66.3284 160.842,66.6618 160.5,67.5C 154.812,68.0056 149.145,68.6723 143.5,69.5C 143.167,69.5 142.833,69.5 142.5,69.5C 141.293,66.7213 139.96,64.7213 138.5,63.5C 138.281,62.325 138.614,61.325 139.5,60.5C 144.319,64.4112 148.985,64.4112 153.5,60.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6478a6\",\n    d: \"M -0.5,63.5 C 15.5165,63.8838 31.5165,64.5505 47.5,65.5C 47.5,66.5 47.5,67.5 47.5,68.5C 40.8375,68.1673 34.1708,67.834 27.5,67.5C 23.3208,67.6453 19.3208,68.3119 15.5,69.5C 10.1667,69.5 4.83333,69.5 -0.5,69.5C -0.5,67.5 -0.5,65.5 -0.5,63.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d3726e\",\n    d: \"M 162.5,61.5 C 165.198,61.8449 167.198,63.1782 168.5,65.5C 168.167,66.1667 167.833,66.8333 167.5,67.5C 165.708,67.634 164.042,67.3007 162.5,66.5C 163.398,65.8423 164.398,65.1757 165.5,64.5C 162.216,63.343 158.882,63.1764 155.5,64C 156.938,64.2189 158.271,64.7189 159.5,65.5C 157.235,66.6474 154.902,66.8141 152.5,66C 154.107,64.951 154.773,63.451 154.5,61.5C 157.167,61.5 159.833,61.5 162.5,61.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f2b35\",\n    d: \"M 31.5,53.5 C 34.8333,53.5 38.1667,53.5 41.5,53.5C 44.3054,54.3195 47.3054,54.8195 50.5,55C 51.3734,56.045 52.3734,56.8783 53.5,57.5C 54.2934,66.134 55.9601,74.4673 58.5,82.5C 59.3708,88.8539 60.3708,95.1873 61.5,101.5C 60.0149,99.7512 59.0149,97.7512 58.5,95.5C 55.5488,84.0323 53.3822,72.3656 52,60.5C 51.3292,59.7476 50.4959,59.4142 49.5,59.5C 49.0825,58.7784 48.4158,58.2784 47.5,58C 50.1667,57.3333 50.1667,56.6667 47.5,56C 41.9019,55.9327 36.5686,55.0994 31.5,53.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aa8f4d\",\n    d: \"M 107.5,48.5 C 107.5,55.5 107.5,62.5 107.5,69.5C 107.5,70.1667 107.5,70.8333 107.5,71.5C 106.053,70.8658 105.387,69.6991 105.5,68C 106.071,61.343 106.738,54.843 107.5,48.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f1e75d\",\n    d: \"M 121.5,57.5 C 124.698,58.0356 127.365,57.369 129.5,55.5C 130.748,56.3339 131.415,57.6672 131.5,59.5C 130.836,63.476 130.503,67.476 130.5,71.5C 125.833,71.5 121.167,71.5 116.5,71.5C 114.444,70.7839 112.277,70.1172 110,69.5C 108.603,62.5484 108.27,55.5484 109,48.5C 109.221,53.22 109.721,57.8867 110.5,62.5C 112.765,63.6474 115.098,63.8141 117.5,63C 115.527,62.5045 113.527,62.3379 111.5,62.5C 111.5,61.5 111.5,60.5 111.5,59.5C 115.011,59.1006 118.344,58.4339 121.5,57.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#465234\",\n    d: \"M 215.5,63.5 C 217.167,64.8333 218.833,66.1667 220.5,67.5C 221.209,68.404 222.209,68.7373 223.5,68.5C 223.216,66.5853 223.549,64.9187 224.5,63.5C 224.5,65.5 224.5,67.5 224.5,69.5C 224.167,69.5 223.833,69.5 223.5,69.5C 219.143,69.5865 214.81,69.9198 210.5,70.5C 210.5,68.1667 210.5,65.8333 210.5,63.5C 212.167,63.5 213.833,63.5 215.5,63.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9a8261\",\n    d: \"M 198.5,26.5 C 199.166,31.0166 199.833,35.6833 200.5,40.5C 201.95,39.1502 202.617,37.4835 202.5,35.5C 204.292,35.634 205.958,35.3007 207.5,34.5C 207.5,35.8333 207.5,37.1667 207.5,38.5C 207.5,38.8333 207.5,39.1667 207.5,39.5C 204.807,40.0198 202.807,41.5198 201.5,44C 205.193,47.2176 204.193,48.3843 198.5,47.5C 198.207,56.512 198.04,65.512 198,74.5C 198.333,73.1667 198.667,71.8333 199,70.5C 199.498,73.4816 199.665,76.4816 199.5,79.5C 199.5,84.8333 199.5,90.1667 199.5,95.5C 198.799,99.7267 197.966,104.06 197,108.5C 196.667,108.167 196.333,107.833 196,107.5C 195.927,98.8406 196.094,90.174 196.5,81.5C 196.631,76.4157 196.631,71.0823 196.5,65.5C 195.448,65.6495 194.448,65.4828 193.5,65C 195.541,63.7582 196.707,61.9249 197,59.5C 197.499,55.5138 197.666,51.5138 197.5,47.5C 197.833,42.1667 198.167,36.8333 198.5,31.5C 198.5,29.8333 198.5,28.1667 198.5,26.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#353d25\",\n    d: \"M 234.5,52.5 C 234.5,57.8333 234.5,63.1667 234.5,68.5C 231.14,68.6159 227.807,68.9492 224.5,69.5C 224.5,67.5 224.5,65.5 224.5,63.5C 226.167,63.5 227.833,63.5 229.5,63.5C 230.099,60.0369 231.099,56.7036 232.5,53.5C 233.167,53.1667 233.833,52.8333 234.5,52.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9b7b66\",\n    d: \"M 63.5,50.5 C 63.6287,52.2161 63.962,53.8828 64.5,55.5C 65.014,61.8217 65.3473,68.155 65.5,74.5C 64.506,84.3194 64.1726,94.3194 64.5,104.5C 64.5,105.5 64.5,106.5 64.5,107.5C 64.1667,107.5 63.8333,107.5 63.5,107.5C 63.5,102.167 63.5,96.8333 63.5,91.5C 62.7854,77.6634 62.7854,63.9967 63.5,50.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8d777d\",\n    d: \"M 160.5,67.5 C 160.842,66.6618 161.508,66.3284 162.5,66.5C 164.042,67.3007 165.708,67.634 167.5,67.5C 168.234,68.7079 168.567,70.0413 168.5,71.5C 166.938,71.2671 165.605,70.6005 164.5,69.5C 163.395,68.3995 162.062,67.7329 160.5,67.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#abafa0\",\n    d: \"M 86.5,70.5 C 88.1992,70.3398 89.8659,70.5065 91.5,71C 90.6198,72.3561 90.2865,73.8561 90.5,75.5C 88.1236,74.7939 86.7903,73.1273 86.5,70.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8095c1\",\n    d: \"M 47.5,68.5 C 48.402,72.7552 49.402,77.0885 50.5,81.5C 47.431,80.2573 44.0977,79.5906 40.5,79.5C 26.8449,78.6879 13.1783,78.3545 -0.5,78.5C -0.5,77.5 -0.5,76.5 -0.5,75.5C 7.79597,75.1946 15.9626,75.8613 24,77.5C 31.5658,75.7156 39.3991,74.8823 47.5,75C 39.798,74.7062 32.1313,74.0395 24.5,73C 26.5,72.6667 28.5,72.3333 30.5,72C 25.3187,71.3998 20.3187,70.5665 15.5,69.5C 19.3208,68.3119 23.3208,67.6453 27.5,67.5C 34.1708,67.834 40.8375,68.1673 47.5,68.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c3b169\",\n    d: \"M 107.5,69.5 C 110.145,71.2419 113.145,71.9086 116.5,71.5C 121.64,72.4881 126.974,72.8214 132.5,72.5C 131.081,73.4511 129.415,73.7845 127.5,73.5C 126.833,73.5 126.167,73.5 125.5,73.5C 119.484,73.4075 113.484,73.0742 107.5,72.5C 107.5,72.1667 107.5,71.8333 107.5,71.5C 107.5,70.8333 107.5,70.1667 107.5,69.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aed9b0\",\n    d: \"M 169.5,70.5 C 171.5,70.5 173.5,70.5 175.5,70.5C 175.5,71.5 175.5,72.5 175.5,73.5C 173.5,73.5 171.5,73.5 169.5,73.5C 169.5,72.5 169.5,71.5 169.5,70.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#978a7e\",\n    d: \"M 53.5,57.5 C 54.8873,59.8766 55.7206,62.5432 56,65.5C 56.4643,64.9056 56.631,64.2389 56.5,63.5C 57.1667,66.1667 57.8333,68.8333 58.5,71.5C 58.5,74.1667 58.5,76.8333 58.5,79.5C 58.5,80.5 58.5,81.5 58.5,82.5C 55.9601,74.4673 54.2934,66.134 53.5,57.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bebcb1\",\n    d: \"M 67.5,68.5 C 73.2964,69.4669 78.9631,69.9669 84.5,70C 85.4061,71.6995 85.7394,73.5328 85.5,75.5C 81.0458,75.2758 76.7125,75.2758 72.5,75.5C 71.5224,75.0233 70.6891,74.3567 70,73.5C 69.1482,74.5707 68.3149,75.5707 67.5,76.5C 66.4988,80.0597 66.1655,84.393 66.5,89.5C 65.5128,84.6946 65.1795,79.6946 65.5,74.5C 66.1667,72.5 66.8333,70.5 67.5,68.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#869fcc\",\n    d: \"M -0.5,69.5 C 4.83333,69.5 10.1667,69.5 15.5,69.5C 20.3187,70.5665 25.3187,71.3998 30.5,72C 28.5,72.3333 26.5,72.6667 24.5,73C 32.1313,74.0395 39.798,74.7062 47.5,75C 39.3991,74.8823 31.5658,75.7156 24,77.5C 15.9626,75.8613 7.79597,75.1946 -0.5,75.5C -0.5,73.5 -0.5,71.5 -0.5,69.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8c9ca1\",\n    d: \"M 164.5,69.5 C 165.605,70.6005 166.938,71.2671 168.5,71.5C 168.5,72.5 168.5,73.5 168.5,74.5C 168.5,75.5 168.5,76.5 168.5,77.5C 168.5,78.1667 168.5,78.8333 168.5,79.5C 168.5,79.8333 168.5,80.1667 168.5,80.5C 168.5,80.8333 168.5,81.1667 168.5,81.5C 168.167,81.5 167.833,81.5 167.5,81.5C 167.665,78.4816 167.498,75.4816 167,72.5C 166.821,76.0252 166.321,79.3586 165.5,82.5C 165.423,81.2502 164.756,80.4169 163.5,80C 166.167,79 166.167,78 163.5,77C 164.973,76.2904 165.64,75.1238 165.5,73.5C 165.167,72.1667 164.833,70.8333 164.5,69.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d2b5b8\",\n    d: \"M 168.5,74.5 C 170.833,74.5 173.167,74.5 175.5,74.5C 175.5,75.5 175.5,76.5 175.5,77.5C 173.167,77.5 170.833,77.5 168.5,77.5C 168.5,76.5 168.5,75.5 168.5,74.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f7edb8\",\n    d: \"M 168.5,77.5 C 170.833,77.5 173.167,77.5 175.5,77.5C 173.721,79.3435 171.388,80.0102 168.5,79.5C 168.5,78.8333 168.5,78.1667 168.5,77.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8e8d73\",\n    d: \"M 234.5,68.5 C 234.5,77.5 234.5,86.5 234.5,95.5C 231.875,99.702 228.542,103.369 224.5,106.5C 223.89,105.609 223.557,104.609 223.5,103.5C 225.088,102.359 226.421,100.859 227.5,99C 225.833,98.6667 224.167,98.3333 222.5,98C 224.167,97 225.833,96 227.5,95C 225.888,94.2797 224.388,94.4464 223,95.5C 221.352,94.283 219.519,93.4497 217.5,93C 216.76,91.2151 216.093,89.3817 215.5,87.5C 216.901,85.7227 218.401,84.056 220,82.5C 219.388,80.248 219.055,77.9147 219,75.5C 220.752,73.6491 222.252,71.6491 223.5,69.5C 223.833,69.5 224.167,69.5 224.5,69.5C 227.807,68.9492 231.14,68.6159 234.5,68.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#92aad7\",\n    d: \"M -0.5,78.5 C 13.1783,78.3545 26.8449,78.6879 40.5,79.5C 44.0977,79.5906 47.431,80.2573 50.5,81.5C 51.755,86.7756 52.755,92.109 53.5,97.5C 52.7784,97.0825 52.2784,96.4158 52,95.5C 51.6667,96.1667 51.3333,96.8333 51,97.5C 50.1004,96.2298 48.9337,95.2298 47.5,94.5C 31.5139,93.5006 15.5139,93.1672 -0.5,93.5C -0.5,93.1667 -0.5,92.8333 -0.5,92.5C 15.1808,92.8327 30.8475,92.4994 46.5,91.5C 44.5767,90.6922 42.5767,90.1922 40.5,90C 41.1667,89.6667 41.8333,89.3333 42.5,89C 41.6195,88.2917 40.9528,87.4584 40.5,86.5C 43.8066,86.9368 46.8066,86.2702 49.5,84.5C 48.9747,83.8076 48.3081,83.3076 47.5,83C 34.8377,82.5001 22.1711,82.3334 9.5,82.5C 9.14118,84.7659 9.80784,86.5993 11.5,88C 17.6812,88.8192 23.6812,88.6525 29.5,87.5C 30.0431,87.56 30.3764,87.8933 30.5,88.5C 20.1881,89.4986 9.85478,89.8319 -0.5,89.5C -0.5,85.8333 -0.5,82.1667 -0.5,78.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d8e8e0\",\n    d: \"M 160.5,67.5 C 162.062,67.7329 163.395,68.3995 164.5,69.5C 164.833,70.8333 165.167,72.1667 165.5,73.5C 163.616,74.3816 162.283,75.8816 161.5,78C 162.213,80.8263 162.88,83.6596 163.5,86.5C 156.833,86.5 150.167,86.5 143.5,86.5C 143.5,80.8333 143.5,75.1667 143.5,69.5C 149.145,68.6723 154.812,68.0056 160.5,67.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#869ecb\",\n    d: \"M 40.5,86.5 C 33.1591,86.3337 25.8258,86.5003 18.5,87C 22.1516,87.4986 25.8183,87.6653 29.5,87.5C 23.6812,88.6525 17.6812,88.8192 11.5,88C 9.80784,86.5993 9.14118,84.7659 9.5,82.5C 22.1711,82.3334 34.8377,82.5001 47.5,83C 48.3081,83.3076 48.9747,83.8076 49.5,84.5C 46.8066,86.2702 43.8066,86.9368 40.5,86.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e2643\",\n    d: \"M 49.5,59.5 C 50.4959,59.4142 51.3292,59.7476 52,60.5C 53.3822,72.3656 55.5488,84.0323 58.5,95.5C 58.8402,100.37 59.5068,105.203 60.5,110C 60.4857,111.385 60.1524,112.551 59.5,113.5C 56.9667,98.3733 53.9667,83.3733 50.5,68.5C 50.5987,65.7628 50.2653,63.0961 49.5,60.5C 49.5,60.1667 49.5,59.8333 49.5,59.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e7e3d6\",\n    d: \"M 77.5,55.5 C 75.563,58.4993 75.063,61.8326 76,65.5C 78.0408,66.4231 80.2075,66.7564 82.5,66.5C 81.9492,63.1933 81.6159,59.8599 81.5,56.5C 82.2216,56.9175 82.7216,57.5842 83,58.5C 88.3825,55.1202 90.2159,56.4536 88.5,62.5C 89.325,63.3857 90.325,63.719 91.5,63.5C 91.5,65.5 91.5,67.5 91.5,69.5C 89.5853,69.2155 87.9187,69.5489 86.5,70.5C 86.7903,73.1273 88.1236,74.7939 90.5,75.5C 91.6448,76.7927 91.3115,77.9593 89.5,79C 90.9915,81.6212 91.6582,84.4545 91.5,87.5C 90.2811,89.6359 89.4478,91.9693 89,94.5C 87.8118,93.4366 87.3118,92.1033 87.5,90.5C 85.0876,90.244 83.4209,91.244 82.5,93.5C 80.8427,89.6391 79.3427,89.6391 78,93.5C 77.51,92.2068 77.3433,90.8734 77.5,89.5C 74.5,89.5 71.5,89.5 68.5,89.5C 68.2011,91.604 68.5344,93.604 69.5,95.5C 70.1667,95.1667 70.8333,94.8333 71.5,94.5C 73.6568,95.0505 75.6568,95.7171 77.5,96.5C 74.1667,96.5 70.8333,96.5 67.5,96.5C 67.5,89.8333 67.5,83.1667 67.5,76.5C 68.3149,75.5707 69.1482,74.5707 70,73.5C 70.6891,74.3567 71.5224,75.0233 72.5,75.5C 76.7125,75.2758 81.0458,75.2758 85.5,75.5C 85.7394,73.5328 85.4061,71.6995 84.5,70C 78.9631,69.9669 73.2964,69.4669 67.5,68.5C 68.1344,64.2394 68.3011,59.9061 68,55.5C 71.0396,56.2081 74.2062,56.2081 77.5,55.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aaaca4\",\n    d: \"M 77.5,79.5 C 80.758,80.0678 84.0913,80.2345 87.5,80C 88.7691,82.1385 88.7691,84.3052 87.5,86.5C 86.8076,85.9747 86.3076,85.3081 86,84.5C 83.2074,84.5469 80.3741,84.7136 77.5,85C 76.2475,83.1722 76.2475,81.3388 77.5,79.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b38664\",\n    d: \"M 132.5,63.5 C 132.833,63.5 133.167,63.5 133.5,63.5C 133.632,66.7967 135.298,68.4633 138.5,68.5C 138.9,74.829 139.233,81.1624 139.5,87.5C 139.292,89.9201 139.626,92.2534 140.5,94.5C 139.923,96.5499 138.59,97.5499 136.5,97.5C 134.533,97.7394 132.699,97.4061 131,96.5C 129.667,97.1667 128.667,98.1667 128,99.5C 126.246,90.8772 126.08,82.2105 127.5,73.5C 129.415,73.7845 131.081,73.4511 132.5,72.5C 132.5,69.5 132.5,66.5 132.5,63.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#827869\",\n    d: \"M 142.5,69.5 C 142.833,69.5 143.167,69.5 143.5,69.5C 143.5,75.1667 143.5,80.8333 143.5,86.5C 150.167,86.5 156.833,86.5 163.5,86.5C 164.674,85.4863 165.34,84.153 165.5,82.5C 166.321,79.3586 166.821,76.0252 167,72.5C 167.498,75.4816 167.665,78.4816 167.5,81.5C 167.5,83.8333 167.5,86.1667 167.5,88.5C 158.724,88.9408 150.058,88.4408 141.5,87C 140.363,81.918 140.196,76.7513 141,71.5C 141.278,70.5842 141.778,69.9175 142.5,69.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a3cacd\",\n    d: \"M 165.5,73.5 C 165.64,75.1238 164.973,76.2904 163.5,77C 166.167,78 166.167,79 163.5,80C 164.756,80.4169 165.423,81.2502 165.5,82.5C 165.34,84.153 164.674,85.4863 163.5,86.5C 162.88,83.6596 162.213,80.8263 161.5,78C 162.283,75.8816 163.616,74.3816 165.5,73.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#796b55\",\n    d: \"M 178.5,86.5 C 182.819,85.8537 184.819,87.687 184.5,92C 184.392,93.6811 183.725,94.8478 182.5,95.5C 184.507,91.1751 183.173,88.8418 178.5,88.5C 178.468,91.0758 179.135,93.4091 180.5,95.5C 179.167,95.5 178.5,96.1667 178.5,97.5C 175.104,97.3671 174.771,96.3671 177.5,94.5C 175.955,91.5102 176.289,88.8435 178.5,86.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f5e6d5\",\n    d: \"M 99.5,72.5 C 102.167,72.5 104.833,72.5 107.5,72.5C 113.484,73.0742 119.484,73.4075 125.5,73.5C 125.5,86.8333 125.5,100.167 125.5,113.5C 124.167,113.5 122.833,113.5 121.5,113.5C 122.687,112.466 123.52,111.133 124,109.5C 124.667,98.5 124.667,87.5 124,76.5C 123.5,76 123,75.5 122.5,75C 115.331,74.042 108.331,74.3753 101.5,76C 101.225,87.7609 101.558,99.5943 102.5,111.5C 103.69,113.07 106.357,113.737 110.5,113.5C 110.5,114.167 110.167,114.5 109.5,114.5C 106.482,114.665 103.482,114.498 100.5,114C 101.167,113.667 101.833,113.333 102.5,113C 100.767,99.7205 99.767,86.2205 99.5,72.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aa8a71\",\n    d: \"M 133.5,63.5 C 133.833,63.5 134.167,63.5 134.5,63.5C 135.833,63.5 137.167,63.5 138.5,63.5C 139.96,64.7213 141.293,66.7213 142.5,69.5C 141.778,69.9175 141.278,70.5842 141,71.5C 140.196,76.7513 140.363,81.918 141.5,87C 150.058,88.4408 158.724,88.9408 167.5,88.5C 167.5,86.1667 167.5,83.8333 167.5,81.5C 167.833,81.5 168.167,81.5 168.5,81.5C 172.167,81.5 175.833,81.5 179.5,81.5C 178.167,82.1667 176.833,82.8333 175.5,83.5C 174.305,83.3225 173.138,82.9891 172,82.5C 170.251,82.7483 169.418,83.7483 169.5,85.5C 168.566,86.5676 168.232,87.901 168.5,89.5C 159.73,88.8817 151.23,89.5484 143,91.5C 142.34,89.6763 141.173,88.343 139.5,87.5C 139.233,81.1624 138.9,74.829 138.5,68.5C 135.298,68.4633 133.632,66.7967 133.5,63.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9cb7e5\",\n    d: \"M 40.5,86.5 C 40.9528,87.4584 41.6195,88.2917 42.5,89C 41.8333,89.3333 41.1667,89.6667 40.5,90C 42.5767,90.1922 44.5767,90.6922 46.5,91.5C 30.8475,92.4994 15.1808,92.8327 -0.5,92.5C -0.5,91.5 -0.5,90.5 -0.5,89.5C 9.85478,89.8319 20.1881,89.4986 30.5,88.5C 30.3764,87.8933 30.0431,87.56 29.5,87.5C 25.8183,87.6653 22.1516,87.4986 18.5,87C 25.8258,86.5003 33.1591,86.3337 40.5,86.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a3b2a8\",\n    d: \"M 182.5,95.5 C 181.833,95.5 181.167,95.5 180.5,95.5C 179.135,93.4091 178.468,91.0758 178.5,88.5C 183.173,88.8418 184.507,91.1751 182.5,95.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ebe9db\",\n    d: \"M 121.5,113.5 C 120.167,113.5 119.5,112.833 119.5,111.5C 121.846,103.33 119.679,101.664 113,106.5C 112.153,108.854 111.32,111.188 110.5,113.5C 106.357,113.737 103.69,113.07 102.5,111.5C 101.558,99.5943 101.225,87.7609 101.5,76C 108.331,74.3753 115.331,74.042 122.5,75C 123,75.5 123.5,76 124,76.5C 124.667,87.5 124.667,98.5 124,109.5C 123.52,111.133 122.687,112.466 121.5,113.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a47a55\",\n    d: \"M 175.5,83.5 C 176.5,83.5 177.5,83.5 178.5,83.5C 178.5,84.5 178.5,85.5 178.5,86.5C 176.289,88.8435 175.955,91.5102 177.5,94.5C 174.771,96.3671 175.104,97.3671 178.5,97.5C 182.814,97.6481 185.481,99.8147 186.5,104C 185.672,104.915 184.672,105.581 183.5,106C 185.444,108.153 185.944,110.653 185,113.5C 184.329,114.252 183.496,114.586 182.5,114.5C 181.522,114.189 180.855,113.522 180.5,112.5C 183.28,109.643 182.947,107.31 179.5,105.5C 177.401,104.388 175.067,103.721 172.5,103.5C 172.586,102.504 172.252,101.671 171.5,101C 176.508,100.131 176.175,99.4641 170.5,99C 174.402,96.6019 174.068,96.1019 169.5,97.5C 169.611,96.8826 169.944,96.3826 170.5,96C 168.59,95.5917 167.59,94.4251 167.5,92.5C 168.894,90.3543 169.56,88.021 169.5,85.5C 169.418,83.7483 170.251,82.7483 172,82.5C 173.138,82.9891 174.305,83.3225 175.5,83.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d5bdad\",\n    d: \"M 58.5,79.5 C 59.5862,79.62 60.2528,80.2867 60.5,81.5C 60.8708,85.1563 61.8708,88.4896 63.5,91.5C 63.5,96.8333 63.5,102.167 63.5,107.5C 63.5,107.833 63.5,108.167 63.5,108.5C 62.5933,106.343 61.9267,104.01 61.5,101.5C 60.3708,95.1873 59.3708,88.8539 58.5,82.5C 58.5,81.5 58.5,80.5 58.5,79.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b38461\",\n    d: \"M 169.5,85.5 C 169.56,88.021 168.894,90.3543 167.5,92.5C 167.59,94.4251 168.59,95.5917 170.5,96C 169.944,96.3826 169.611,96.8826 169.5,97.5C 166.351,97.7886 163.351,97.2886 160.5,96C 161.654,95.0862 161.487,94.2529 160,93.5C 159.335,96.8383 157.668,99.505 155,101.5C 154.205,106.115 153.038,110.615 151.5,115C 150.381,116.876 148.714,117.709 146.5,117.5C 138.5,117.5 130.5,117.5 122.5,117.5C 123.622,116.053 125.122,115.053 127,114.5C 127.333,112.167 127.667,109.833 128,107.5C 128.383,106.944 128.883,106.611 129.5,106.5C 131.167,107.167 132.833,107.833 134.5,108.5C 135.833,108.5 137.167,108.5 138.5,108.5C 139.207,105.214 139.54,101.881 139.5,98.5C 138.209,98.7373 137.209,98.404 136.5,97.5C 138.59,97.5499 139.923,96.5499 140.5,94.5C 139.626,92.2534 139.292,89.9201 139.5,87.5C 141.173,88.343 142.34,89.6763 143,91.5C 151.23,89.5484 159.73,88.8817 168.5,89.5C 168.232,87.901 168.566,86.5676 169.5,85.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9ab3dd\",\n    d: \"M -0.5,93.5 C 15.5139,93.1672 31.5139,93.5006 47.5,94.5C 48.9337,95.2298 50.1004,96.2298 51,97.5C 51.3333,96.8333 51.6667,96.1667 52,95.5C 52.2784,96.4158 52.7784,97.0825 53.5,97.5C 55.5078,108.191 57.5078,118.858 59.5,129.5C 58.4479,131.256 56.7812,131.923 54.5,131.5C 51.9407,131.198 49.6074,131.532 47.5,132.5C 45.1667,132.5 42.8333,132.5 40.5,132.5C 38.7215,131.33 37.7215,129.664 37.5,127.5C 38.8333,127.5 40.1667,127.5 41.5,127.5C 41.5,128.5 41.5,129.5 41.5,130.5C 42.8333,130.5 44.1667,130.5 45.5,130.5C 45.5,129.5 45.5,128.5 45.5,127.5C 46.8734,127.657 48.2068,127.49 49.5,127C 48.7734,125.601 48.2734,124.101 48,122.5C 47.5172,123.448 47.3505,124.448 47.5,125.5C 44.8333,125.5 42.1667,125.5 39.5,125.5C 39.5,124.5 39.5,123.5 39.5,122.5C 38.1779,122.67 37.0113,122.337 36,121.5C 34.2229,118.28 32.7229,114.947 31.5,111.5C 31.8678,110.09 32.7011,109.09 34,108.5C 35.6641,104.871 36.8308,101.038 37.5,97C 36.9915,95.8315 36.1581,94.9981 35,94.5C 31.6064,95.4558 28.1064,95.7892 24.5,95.5C 21.7131,94.5233 18.7131,94.19 15.5,94.5C 10.1383,94.4724 4.80492,94.8058 -0.5,95.5C -0.5,94.8333 -0.5,94.1667 -0.5,93.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a0b8e4\",\n    d: \"M 40.5,132.5 C 38.8333,132.5 37.1667,132.5 35.5,132.5C 33.0411,130.472 33.0411,128.472 35.5,126.5C 34.3333,124.167 33.1667,121.833 32,119.5C 31.6667,120.833 31.3333,122.167 31,123.5C 28.3731,122.686 26.0398,121.353 24,119.5C 23.5258,111.245 23.6925,103.245 24.5,95.5C 28.1064,95.7892 31.6064,95.4558 35,94.5C 36.1581,94.9981 36.9915,95.8315 37.5,97C 36.8308,101.038 35.6641,104.871 34,108.5C 32.7011,109.09 31.8678,110.09 31.5,111.5C 32.7229,114.947 34.2229,118.28 36,121.5C 37.0113,122.337 38.1779,122.67 39.5,122.5C 39.5,123.5 39.5,124.5 39.5,125.5C 42.1667,125.5 44.8333,125.5 47.5,125.5C 47.3505,124.448 47.5172,123.448 48,122.5C 48.2734,124.101 48.7734,125.601 49.5,127C 48.2068,127.49 46.8734,127.657 45.5,127.5C 45.5,128.5 45.5,129.5 45.5,130.5C 44.1667,130.5 42.8333,130.5 41.5,130.5C 41.5,129.5 41.5,128.5 41.5,127.5C 40.1667,127.5 38.8333,127.5 37.5,127.5C 37.7215,129.664 38.7215,131.33 40.5,132.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9fbfe9\",\n    d: \"M 15.5,94.5 C 15.8174,97.5719 15.4841,100.572 14.5,103.5C 12.1658,102.159 10.4991,102.826 9.5,105.5C 10.1744,110.752 11.1744,115.918 12.5,121C 9.18058,121.65 6.01391,121.15 3,119.5C 1.74407,119.648 0.577401,119.982 -0.5,120.5C -0.5,112.167 -0.5,103.833 -0.5,95.5C 4.80492,94.8058 10.1383,94.4724 15.5,94.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5b6e96\",\n    d: \"M 47.5,65.5 C 48.2719,66.6935 49.2719,67.6935 50.5,68.5C 53.9667,83.3733 56.9667,98.3733 59.5,113.5C 60.3916,118.515 61.3916,123.515 62.5,128.5C 61.675,129.386 60.675,129.719 59.5,129.5C 57.5078,118.858 55.5078,108.191 53.5,97.5C 52.755,92.109 51.755,86.7756 50.5,81.5C 49.402,77.0885 48.402,72.7552 47.5,68.5C 47.5,67.5 47.5,66.5 47.5,65.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c1bdb9\",\n    d: \"M 91.5,87.5 C 92.4767,90.2869 92.81,93.2869 92.5,96.5C 87.5,96.5 82.5,96.5 77.5,96.5C 75.6568,95.7171 73.6568,95.0505 71.5,94.5C 70.8333,94.8333 70.1667,95.1667 69.5,95.5C 68.5344,93.604 68.2011,91.604 68.5,89.5C 71.5,89.5 74.5,89.5 77.5,89.5C 77.3433,90.8734 77.51,92.2068 78,93.5C 79.3427,89.6391 80.8427,89.6391 82.5,93.5C 83.4209,91.244 85.0876,90.244 87.5,90.5C 87.3118,92.1033 87.8118,93.4366 89,94.5C 89.4478,91.9693 90.2811,89.6359 91.5,87.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#755338\",\n    d: \"M 183.5,81.5 C 186.833,81.5 190.167,81.5 193.5,81.5C 194.5,81.5 195.5,81.5 196.5,81.5C 196.094,90.174 195.927,98.8406 196,107.5C 196.333,107.833 196.667,108.167 197,108.5C 197.966,104.06 198.799,99.7267 199.5,95.5C 199.528,100.862 199.194,106.195 198.5,111.5C 197.5,111.5 196.5,111.5 195.5,111.5C 195.688,109.897 195.188,108.563 194,107.5C 192.122,108.053 190.622,109.053 189.5,110.5C 188.833,110.833 188.167,111.167 187.5,111.5C 186.337,108.294 187.67,106.627 191.5,106.5C 192.077,103.45 190.91,101.45 188,100.5C 187.517,99.552 187.351,98.552 187.5,97.5C 188.978,97.762 190.311,97.4287 191.5,96.5C 190.675,95.6143 189.675,95.281 188.5,95.5C 191.237,88.8382 189.237,84.6715 182.5,83C 183.056,82.6174 183.389,82.1174 183.5,81.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a6876f\",\n    d: \"M 125.5,73.5 C 126.167,73.5 126.833,73.5 127.5,73.5C 126.08,82.2105 126.246,90.8772 128,99.5C 128.667,98.1667 129.667,97.1667 131,96.5C 132.699,97.4061 134.533,97.7394 136.5,97.5C 137.209,98.404 138.209,98.7373 139.5,98.5C 139.54,101.881 139.207,105.214 138.5,108.5C 137.167,108.5 135.833,108.5 134.5,108.5C 134.5,108.167 134.5,107.833 134.5,107.5C 137.202,105.386 137.869,102.719 136.5,99.5C 135.274,100.363 133.94,100.363 132.5,99.5C 132.44,98.9569 132.107,98.6236 131.5,98.5C 130.451,101.08 129.784,103.746 129.5,106.5C 128.883,106.611 128.383,106.944 128,107.5C 127.667,109.833 127.333,112.167 127,114.5C 125.122,115.053 123.622,116.053 122.5,117.5C 121.167,117.5 119.833,117.5 118.5,117.5C 118.5,116.167 118.5,114.833 118.5,113.5C 118.328,112.508 118.662,111.842 119.5,111.5C 119.5,112.833 120.167,113.5 121.5,113.5C 122.833,113.5 124.167,113.5 125.5,113.5C 125.5,100.167 125.5,86.8333 125.5,73.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#88613f\",\n    d: \"M 179.5,81.5 C 180.833,81.5 182.167,81.5 183.5,81.5C 183.389,82.1174 183.056,82.6174 182.5,83C 189.237,84.6715 191.237,88.8382 188.5,95.5C 189.675,95.281 190.675,95.6143 191.5,96.5C 190.311,97.4287 188.978,97.762 187.5,97.5C 187.351,98.552 187.517,99.552 188,100.5C 190.91,101.45 192.077,103.45 191.5,106.5C 187.67,106.627 186.337,108.294 187.5,111.5C 187.5,112.833 187.5,114.167 187.5,115.5C 186.167,115.5 184.833,115.5 183.5,115.5C 183.167,115.5 182.833,115.5 182.5,115.5C 182.5,115.167 182.5,114.833 182.5,114.5C 183.496,114.586 184.329,114.252 185,113.5C 185.944,110.653 185.444,108.153 183.5,106C 184.672,105.581 185.672,104.915 186.5,104C 185.481,99.8147 182.814,97.6481 178.5,97.5C 178.5,96.1667 179.167,95.5 180.5,95.5C 181.167,95.5 181.833,95.5 182.5,95.5C 183.725,94.8478 184.392,93.6811 184.5,92C 184.819,87.687 182.819,85.8537 178.5,86.5C 178.5,85.5 178.5,84.5 178.5,83.5C 177.5,83.5 176.5,83.5 175.5,83.5C 176.833,82.8333 178.167,82.1667 179.5,81.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#847f68\",\n    d: \"M 223.5,69.5 C 222.252,71.6491 220.752,73.6491 219,75.5C 219.055,77.9147 219.388,80.248 220,82.5C 218.401,84.056 216.901,85.7227 215.5,87.5C 216.093,89.3817 216.76,91.2151 217.5,93C 219.519,93.4497 221.352,94.283 223,95.5C 224.388,94.4464 225.888,94.2797 227.5,95C 225.833,96 224.167,97 222.5,98C 224.167,98.3333 225.833,98.6667 227.5,99C 226.421,100.859 225.088,102.359 223.5,103.5C 218.697,104.181 214.031,105.347 209.5,107C 208.033,108.098 207.199,109.598 207,111.5C 206.221,108.903 205.721,108.903 205.5,111.5C 203.5,111.5 201.5,111.5 199.5,111.5C 199.273,109.067 200.273,107.401 202.5,106.5C 204.598,107.914 205.598,107.248 205.5,104.5C 207.857,104.663 210.19,104.497 212.5,104C 213.061,102.434 212.394,101.101 210.5,100C 211.574,99.2613 212.241,98.2613 212.5,97C 211.453,95.3197 210.787,93.4864 210.5,91.5C 211.042,88.3123 212.042,85.3123 213.5,82.5C 211.278,82.178 209.444,82.8446 208,84.5C 206.24,80.3169 205.073,75.9835 204.5,71.5C 205.791,71.7373 206.791,71.404 207.5,70.5C 208.5,70.5 209.5,70.5 210.5,70.5C 214.81,69.9198 219.143,69.5865 223.5,69.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#776e58\",\n    d: \"M 203.5,70.5 C 204.833,70.5 206.167,70.5 207.5,70.5C 206.791,71.404 205.791,71.7373 204.5,71.5C 205.073,75.9835 206.24,80.3169 208,84.5C 209.444,82.8446 211.278,82.178 213.5,82.5C 212.042,85.3123 211.042,88.3123 210.5,91.5C 210.787,93.4864 211.453,95.3197 212.5,97C 212.241,98.2613 211.574,99.2613 210.5,100C 212.394,101.101 213.061,102.434 212.5,104C 210.19,104.497 207.857,104.663 205.5,104.5C 205.598,107.248 204.598,107.914 202.5,106.5C 201.585,97.5404 201.252,88.5404 201.5,79.5C 202.245,76.6104 202.912,73.6104 203.5,70.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#765b54\",\n    d: \"M 132.5,99.5 C 132.714,101.144 132.38,102.644 131.5,104C 133.056,104.72 134.056,105.887 134.5,107.5C 134.5,107.833 134.5,108.167 134.5,108.5C 132.833,107.833 131.167,107.167 129.5,106.5C 129.784,103.746 130.451,101.08 131.5,98.5C 132.107,98.6236 132.44,98.9569 132.5,99.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ad8667\",\n    d: \"M 169.5,97.5 C 174.068,96.1019 174.402,96.6019 170.5,99C 176.175,99.4641 176.508,100.131 171.5,101C 172.252,101.671 172.586,102.504 172.5,103.5C 167.968,103.182 163.634,103.515 159.5,104.5C 158.5,104.5 157.5,104.5 156.5,104.5C 156.5,108.5 156.5,112.5 156.5,116.5C 155.448,116.351 154.448,116.517 153.5,117C 154.641,117.741 154.641,118.575 153.5,119.5C 151.369,120.169 149.369,120.835 147.5,121.5C 146.167,121.5 144.833,121.5 143.5,121.5C 144.789,120.363 145.789,119.03 146.5,117.5C 148.714,117.709 150.381,116.876 151.5,115C 153.038,110.615 154.205,106.115 155,101.5C 157.668,99.505 159.335,96.8383 160,93.5C 161.487,94.2529 161.654,95.0862 160.5,96C 163.351,97.2886 166.351,97.7886 169.5,97.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a2bfe9\",\n    d: \"M 15.5,94.5 C 18.7131,94.19 21.7131,94.5233 24.5,95.5C 23.6925,103.245 23.5258,111.245 24,119.5C 26.0398,121.353 28.3731,122.686 31,123.5C 31.3333,122.167 31.6667,120.833 32,119.5C 33.1667,121.833 34.3333,124.167 35.5,126.5C 33.0411,128.472 33.0411,130.472 35.5,132.5C 35.5,132.833 35.5,133.167 35.5,133.5C 30.3054,133.179 25.3054,133.513 20.5,134.5C 16.9581,134.187 13.6248,134.521 10.5,135.5C 6.83333,135.5 3.16667,135.5 -0.5,135.5C -0.5,130.5 -0.5,125.5 -0.5,120.5C 0.577401,119.982 1.74407,119.648 3,119.5C 6.01391,121.15 9.18058,121.65 12.5,121C 11.1744,115.918 10.1744,110.752 9.5,105.5C 10.4991,102.826 12.1658,102.159 14.5,103.5C 15.4841,100.572 15.8174,97.5719 15.5,94.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9a765d\",\n    d: \"M 65.5,74.5 C 65.1795,79.6946 65.5128,84.6946 66.5,89.5C 66.5,92.5 66.5,95.5 66.5,98.5C 75.1667,98.5 83.8333,98.5 92.5,98.5C 93.5,98.5 94.5,98.5 95.5,98.5C 94.1286,99.7868 92.2953,100.453 90,100.5C 86.489,100.196 82.989,99.8627 79.5,99.5C 79.5,101.167 79.5,102.833 79.5,104.5C 75.3294,105.303 73.6627,107.636 74.5,111.5C 73.2299,112.288 72.2299,113.288 71.5,114.5C 69.7808,111.141 68.6141,107.475 68,103.5C 66.9887,104.337 65.8221,104.67 64.5,104.5C 64.1726,94.3194 64.506,84.3194 65.5,74.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a4785a\",\n    d: \"M 95.5,79.5 C 96.8117,81.7432 97.4783,84.4098 97.5,87.5C 97.3779,95.8003 97.3779,104.134 97.5,112.5C 94.5063,113.748 91.5063,113.748 88.5,112.5C 89.767,110.629 89.767,108.796 88.5,107C 85.4786,106.151 82.4786,105.317 79.5,104.5C 79.5,102.833 79.5,101.167 79.5,99.5C 82.989,99.8627 86.489,100.196 90,100.5C 92.2953,100.453 94.1286,99.7868 95.5,98.5C 95.5,92.1667 95.5,85.8333 95.5,79.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8dbab2\",\n    d: \"M 132.5,99.5 C 133.94,100.363 135.274,100.363 136.5,99.5C 137.869,102.719 137.202,105.386 134.5,107.5C 134.056,105.887 133.056,104.72 131.5,104C 132.38,102.644 132.714,101.144 132.5,99.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#929883\",\n    d: \"M 172.5,103.5 C 175.067,103.721 177.401,104.388 179.5,105.5C 178.833,105.5 178.5,105.833 178.5,106.5C 177.5,106.5 176.5,106.5 175.5,106.5C 174.5,106.5 173.5,106.5 172.5,106.5C 171.666,105.252 170.333,104.585 168.5,104.5C 165.508,104.966 162.508,105.299 159.5,105.5C 159.5,105.167 159.5,104.833 159.5,104.5C 163.634,103.515 167.968,103.182 172.5,103.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9b9d8f\",\n    d: \"M 234.5,95.5 C 234.5,99.1667 234.5,102.833 234.5,106.5C 231.201,104.886 228.368,105.552 226,108.5C 224.97,108.164 224.47,107.497 224.5,106.5C 228.542,103.369 231.875,99.702 234.5,95.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2e4c4b\",\n    d: \"M 172.5,106.5 C 168.167,106.5 163.833,106.5 159.5,106.5C 159.5,106.167 159.5,105.833 159.5,105.5C 162.508,105.299 165.508,104.966 168.5,104.5C 170.333,104.585 171.666,105.252 172.5,106.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#636057\",\n    d: \"M 119.5,111.5 C 118.662,111.842 118.328,112.508 118.5,113.5C 118.167,113.5 117.833,113.5 117.5,113.5C 118.812,101.989 117.146,101.656 112.5,112.5C 111.833,113.5 111.167,114.5 110.5,115.5C 110.167,115.5 109.833,115.5 109.5,115.5C 109.5,115.167 109.5,114.833 109.5,114.5C 110.167,114.5 110.5,114.167 110.5,113.5C 111.32,111.188 112.153,108.854 113,106.5C 119.679,101.664 121.846,103.33 119.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#58432d\",\n    d: \"M 199.5,79.5 C 199.833,79.5 200.167,79.5 200.5,79.5C 200.833,79.5 201.167,79.5 201.5,79.5C 201.252,88.5404 201.585,97.5404 202.5,106.5C 200.273,107.401 199.273,109.067 199.5,111.5C 201.5,111.5 203.5,111.5 205.5,111.5C 205.5,112.167 205.5,112.833 205.5,113.5C 205.343,114.873 205.51,116.207 206,117.5C 209.037,118.709 212.204,119.543 215.5,120C 214.552,120.483 213.552,120.649 212.5,120.5C 209.417,120.084 206.417,119.417 203.5,118.5C 203.5,117.167 203.5,115.833 203.5,114.5C 201.833,114.5 200.167,114.5 198.5,114.5C 198.5,115.5 198.5,116.5 198.5,117.5C 197.414,117.38 196.747,116.713 196.5,115.5C 197.225,114.133 197.892,112.8 198.5,111.5C 199.194,106.195 199.528,100.862 199.5,95.5C 199.5,90.1667 199.5,84.8333 199.5,79.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d1f3d\",\n    d: \"M 159.5,106.5 C 163.833,106.5 168.167,106.5 172.5,106.5C 173.5,106.5 174.5,106.5 175.5,106.5C 175.5,106.833 175.5,107.167 175.5,107.5C 175.5,108.167 175.5,108.833 175.5,109.5C 169.729,110.113 164.396,109.446 159.5,107.5C 159.5,107.167 159.5,106.833 159.5,106.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a7465\",\n    d: \"M 223.5,103.5 C 223.557,104.609 223.89,105.609 224.5,106.5C 224.47,107.497 224.97,108.164 226,108.5C 228.368,105.552 231.201,104.886 234.5,106.5C 234.5,106.833 234.5,107.167 234.5,107.5C 229.833,109.833 225.167,112.167 220.5,114.5C 220.5,115.5 220.5,116.5 220.5,117.5C 215.595,115.848 210.595,114.515 205.5,113.5C 205.5,112.833 205.5,112.167 205.5,111.5C 205.721,108.903 206.221,108.903 207,111.5C 207.199,109.598 208.033,108.098 209.5,107C 214.031,105.347 218.697,104.181 223.5,103.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e3dfd5\",\n    d: \"M 117.5,113.5 C 115.585,113.784 113.919,113.451 112.5,112.5C 117.146,101.656 118.812,101.989 117.5,113.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#937b70\",\n    d: \"M 178.5,106.5 C 178.5,105.833 178.833,105.5 179.5,105.5C 182.947,107.31 183.28,109.643 180.5,112.5C 180.855,113.522 181.522,114.189 182.5,114.5C 182.5,114.833 182.5,115.167 182.5,115.5C 181.778,116.551 180.778,117.218 179.5,117.5C 179.815,113.629 179.482,109.962 178.5,106.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#393c6b\",\n    d: \"M 175.5,107.5 C 176.496,107.414 177.329,107.748 178,108.5C 178.497,111.146 178.664,113.813 178.5,116.5C 177.167,116.5 175.833,116.5 174.5,116.5C 174.448,114.097 174.781,111.764 175.5,109.5C 175.5,108.833 175.5,108.167 175.5,107.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#21202b\",\n    d: \"M 159.5,107.5 C 164.396,109.446 169.729,110.113 175.5,109.5C 174.781,111.764 174.448,114.097 174.5,116.5C 174.5,116.833 174.5,117.167 174.5,117.5C 168.797,117.625 163.13,117.292 157.5,116.5C 157.42,113.219 158.087,110.219 159.5,107.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9d806b\",\n    d: \"M 95.5,65.5 C 96.2674,66.172 96.9341,67.0053 97.5,68C 100.173,69.0573 102.507,69.8906 104.5,70.5C 102.709,71.1698 101.042,71.8365 99.5,72.5C 99.767,86.2205 100.767,99.7205 102.5,113C 101.833,113.333 101.167,113.667 100.5,114C 103.482,114.498 106.482,114.665 109.5,114.5C 109.5,114.833 109.5,115.167 109.5,115.5C 108.098,117.875 106.765,120.209 105.5,122.5C 103.859,120.797 102.859,118.63 102.5,116C 97.5111,115.501 92.5111,115.334 87.5,115.5C 85.901,115.768 84.5676,115.434 83.5,114.5C 84.2389,114.631 84.9056,114.464 85.5,114C 85.6355,112.232 85.6355,110.399 85.5,108.5C 83.5818,106.366 81.5818,106.366 79.5,108.5C 77.5474,107.095 76.5474,107.761 76.5,110.5C 76.755,114.07 77.755,114.403 79.5,111.5C 79.5,112.167 79.5,112.833 79.5,113.5C 79.5,113.833 79.5,114.167 79.5,114.5C 76.8333,114.5 74.1667,114.5 71.5,114.5C 72.2299,113.288 73.2299,112.288 74.5,111.5C 73.6627,107.636 75.3294,105.303 79.5,104.5C 82.4786,105.317 85.4786,106.151 88.5,107C 89.767,108.796 89.767,110.629 88.5,112.5C 91.5063,113.748 94.5063,113.748 97.5,112.5C 97.3779,104.134 97.3779,95.8003 97.5,87.5C 97.4783,84.4098 96.8117,81.7432 95.5,79.5C 95.5,74.8333 95.5,70.1667 95.5,65.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#574130\",\n    d: \"M 79.5,108.5 C 79.5,109.5 79.5,110.5 79.5,111.5C 77.755,114.403 76.755,114.07 76.5,110.5C 76.5474,107.761 77.5474,107.095 79.5,108.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#87a598\",\n    d: \"M 83.5,114.5 C 82.2921,113.766 80.9587,113.433 79.5,113.5C 79.5,112.833 79.5,112.167 79.5,111.5C 79.5,110.5 79.5,109.5 79.5,108.5C 81.5818,106.366 83.5818,106.366 85.5,108.5C 85.6355,110.399 85.6355,112.232 85.5,114C 84.9056,114.464 84.2389,114.631 83.5,114.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a08c86\",\n    d: \"M 189.5,110.5 C 189.5,112.5 189.5,114.5 189.5,116.5C 187.265,116.795 185.265,116.461 183.5,115.5C 184.833,115.5 186.167,115.5 187.5,115.5C 187.5,114.167 187.5,112.833 187.5,111.5C 188.167,111.167 188.833,110.833 189.5,110.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#625b4c\",\n    d: \"M 234.5,107.5 C 234.5,113.833 234.5,120.167 234.5,126.5C 232.883,125.962 231.216,125.629 229.5,125.5C 228.834,123.327 227.667,122.993 226,124.5C 223.144,123.744 220.311,122.911 217.5,122C 220.206,120.092 223.206,119.259 226.5,119.5C 226.281,120.675 226.614,121.675 227.5,122.5C 229.659,121.215 230.326,119.548 229.5,117.5C 226.223,118.254 222.89,118.754 219.5,119C 218.429,119.852 217.429,120.685 216.5,121.5C 216.167,121.5 215.833,121.5 215.5,121.5C 214.209,121.737 213.209,121.404 212.5,120.5C 213.552,120.649 214.552,120.483 215.5,120C 212.204,119.543 209.037,118.709 206,117.5C 205.51,116.207 205.343,114.873 205.5,113.5C 210.595,114.515 215.595,115.848 220.5,117.5C 220.5,116.5 220.5,115.5 220.5,114.5C 225.167,112.167 229.833,109.833 234.5,107.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9e8d8d\",\n    d: \"M 63.5,107.5 C 63.8333,107.5 64.1667,107.5 64.5,107.5C 64.3379,109.527 64.5045,111.527 65,113.5C 65.4244,109.81 66.2577,109.643 67.5,113C 66.2721,114.49 66.2721,115.99 67.5,117.5C 66.6236,117.369 65.9569,117.702 65.5,118.5C 66.3482,120.409 66.6816,122.409 66.5,124.5C 66.1667,124.5 65.8333,124.5 65.5,124.5C 64.6161,119.196 63.9494,113.863 63.5,108.5C 63.5,108.167 63.5,107.833 63.5,107.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6b534a\",\n    d: \"M 71.5,114.5 C 74.1667,114.5 76.8333,114.5 79.5,114.5C 75.473,115.176 71.473,116.176 67.5,117.5C 66.2721,115.99 66.2721,114.49 67.5,113C 66.2577,109.643 65.4244,109.81 65,113.5C 64.5045,111.527 64.3379,109.527 64.5,107.5C 64.5,106.5 64.5,105.5 64.5,104.5C 65.8221,104.67 66.9887,104.337 68,103.5C 68.6141,107.475 69.7808,111.141 71.5,114.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ae866a\",\n    d: \"M 112.5,112.5 C 113.919,113.451 115.585,113.784 117.5,113.5C 116.699,115.042 116.366,116.708 116.5,118.5C 114.167,118.5 111.833,118.5 109.5,118.5C 110.11,117.609 110.443,116.609 110.5,115.5C 111.167,114.5 111.833,113.5 112.5,112.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e596e\",\n    d: \"M 175.5,107.5 C 175.5,107.167 175.5,106.833 175.5,106.5C 176.5,106.5 177.5,106.5 178.5,106.5C 179.482,109.962 179.815,113.629 179.5,117.5C 178.833,117.5 178.167,117.5 177.5,117.5C 176.5,117.5 175.5,117.5 174.5,117.5C 174.5,117.167 174.5,116.833 174.5,116.5C 175.833,116.5 177.167,116.5 178.5,116.5C 178.664,113.813 178.497,111.146 178,108.5C 177.329,107.748 176.496,107.414 175.5,107.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#675245\",\n    d: \"M 198.5,111.5 C 197.892,112.8 197.225,114.133 196.5,115.5C 196.747,116.713 197.414,117.38 198.5,117.5C 198.5,117.833 198.5,118.167 198.5,118.5C 198.167,118.5 197.833,118.5 197.5,118.5C 195.421,118.029 193.421,117.363 191.5,116.5C 190.833,116.5 190.167,116.5 189.5,116.5C 189.5,114.5 189.5,112.5 189.5,110.5C 190.622,109.053 192.122,108.053 194,107.5C 195.188,108.563 195.688,109.897 195.5,111.5C 196.5,111.5 197.5,111.5 198.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a28151\",\n    d: \"M 203.5,118.5 C 201.833,118.5 200.167,118.5 198.5,118.5C 198.5,118.167 198.5,117.833 198.5,117.5C 198.5,116.5 198.5,115.5 198.5,114.5C 200.167,114.5 201.833,114.5 203.5,114.5C 203.5,115.833 203.5,117.167 203.5,118.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#383234\",\n    d: \"M 79.5,113.5 C 80.9587,113.433 82.2921,113.766 83.5,114.5C 84.5676,115.434 85.901,115.768 87.5,115.5C 91.6472,116.325 95.9805,116.825 100.5,117C 100.827,119.685 100.827,122.518 100.5,125.5C 89.4836,125.583 78.4836,125.249 67.5,124.5C 67.1667,124.5 66.8333,124.5 66.5,124.5C 66.6816,122.409 66.3482,120.409 65.5,118.5C 65.9569,117.702 66.6236,117.369 67.5,117.5C 71.473,116.176 75.473,115.176 79.5,114.5C 79.5,114.167 79.5,113.833 79.5,113.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dad1b6\",\n    d: \"M 182.5,115.5 C 182.833,115.5 183.167,115.5 183.5,115.5C 185.265,116.461 187.265,116.795 189.5,116.5C 190.167,116.5 190.833,116.5 191.5,116.5C 191.5,117.5 191.5,118.5 191.5,119.5C 191.53,120.497 191.03,121.164 190,121.5C 185.979,119.628 182.145,119.628 178.5,121.5C 177.571,120.311 177.238,118.978 177.5,117.5C 178.167,117.5 178.833,117.5 179.5,117.5C 180.778,117.218 181.778,116.551 182.5,115.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e4bd9d\",\n    d: \"M 118.5,117.5 C 119.833,117.5 121.167,117.5 122.5,117.5C 130.5,117.5 138.5,117.5 146.5,117.5C 145.789,119.03 144.789,120.363 143.5,121.5C 140.833,121.5 138.167,121.5 135.5,121.5C 129.833,121.5 124.167,121.5 118.5,121.5C 118.5,120.167 118.5,118.833 118.5,117.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#51413a\",\n    d: \"M 87.5,115.5 C 92.5111,115.334 97.5111,115.501 102.5,116C 102.859,118.63 103.859,120.797 105.5,122.5C 104.432,123.434 103.099,123.768 101.5,123.5C 101.5,124.5 101.5,125.5 101.5,126.5C 102.791,126.263 103.791,126.596 104.5,127.5C 104.672,128.492 104.338,129.158 103.5,129.5C 102.222,129.218 101.222,128.551 100.5,127.5C 100.5,126.833 100.5,126.167 100.5,125.5C 100.827,122.518 100.827,119.685 100.5,117C 95.9805,116.825 91.6472,116.325 87.5,115.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dabda2\",\n    d: \"M 109.5,118.5 C 111.833,118.5 114.167,118.5 116.5,118.5C 117.434,119.568 117.768,120.901 117.5,122.5C 114.167,122.5 110.833,122.5 107.5,122.5C 108.167,121.167 108.833,119.833 109.5,118.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#786356\",\n    d: \"M 159.5,104.5 C 159.5,104.833 159.5,105.167 159.5,105.5C 159.5,105.833 159.5,106.167 159.5,106.5C 159.5,106.833 159.5,107.167 159.5,107.5C 158.087,110.219 157.42,113.219 157.5,116.5C 163.13,117.292 168.797,117.625 174.5,117.5C 174.751,119.17 175.418,120.67 176.5,122C 176.272,122.399 175.938,122.565 175.5,122.5C 175.167,122.5 174.833,122.5 174.5,122.5C 168.97,121.725 163.303,120.891 157.5,120C 156.833,119.667 156.167,119.333 155.5,119C 156.833,118.667 158.167,118.333 159.5,118C 158.263,117.768 157.263,117.268 156.5,116.5C 156.5,112.5 156.5,108.5 156.5,104.5C 157.5,104.5 158.5,104.5 159.5,104.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#baad99\",\n    d: \"M 197.5,118.5 C 197.833,118.5 198.167,118.5 198.5,118.5C 200.167,118.5 201.833,118.5 203.5,118.5C 206.417,119.417 209.417,120.084 212.5,120.5C 213.209,121.404 214.209,121.737 215.5,121.5C 214.688,122.993 213.355,123.66 211.5,123.5C 206.396,122.735 201.73,121.068 197.5,118.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#65503f\",\n    d: \"M 156.5,116.5 C 157.263,117.268 158.263,117.768 159.5,118C 158.167,118.333 156.833,118.667 155.5,119C 156.167,119.333 156.833,119.667 157.5,120C 163.303,120.891 168.97,121.725 174.5,122.5C 173.167,122.5 172.5,123.167 172.5,124.5C 168.19,123.92 163.857,123.586 159.5,123.5C 158.292,124.234 156.959,124.567 155.5,124.5C 155.167,123.5 154.5,122.833 153.5,122.5C 151.735,121.539 149.735,121.205 147.5,121.5C 149.369,120.835 151.369,120.169 153.5,119.5C 154.641,118.575 154.641,117.741 153.5,117C 154.448,116.517 155.448,116.351 156.5,116.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e4232\",\n    d: \"M 117.5,113.5 C 117.833,113.5 118.167,113.5 118.5,113.5C 118.5,114.833 118.5,116.167 118.5,117.5C 118.5,118.833 118.5,120.167 118.5,121.5C 124.167,121.5 129.833,121.5 135.5,121.5C 129.923,122.121 124.923,122.788 120.5,123.5C 120.5,123.833 120.5,124.167 120.5,124.5C 119.884,125.202 119.884,126.202 120.5,127.5C 117.545,126.841 114.545,126.508 111.5,126.5C 113.628,125.719 113.795,124.719 112,123.5C 110.274,124.576 108.441,124.743 106.5,124C 107.056,123.617 107.389,123.117 107.5,122.5C 110.833,122.5 114.167,122.5 117.5,122.5C 117.768,120.901 117.434,119.568 116.5,118.5C 116.366,116.708 116.699,115.042 117.5,113.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#42200d\",\n    d: \"M 135.5,121.5 C 138.167,121.5 140.833,121.5 143.5,121.5C 144.833,121.5 146.167,121.5 147.5,121.5C 149.735,121.205 151.735,121.539 153.5,122.5C 153.5,123.167 153.5,123.833 153.5,124.5C 142.581,123.523 131.581,123.19 120.5,123.5C 124.923,122.788 129.923,122.121 135.5,121.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e5e0d6\",\n    d: \"M 174.5,117.5 C 175.5,117.5 176.5,117.5 177.5,117.5C 177.238,118.978 177.571,120.311 178.5,121.5C 182.145,119.628 185.979,119.628 190,121.5C 191.03,121.164 191.53,120.497 191.5,119.5C 192.649,119.791 193.316,120.624 193.5,122C 193.085,125.106 192.085,125.272 190.5,122.5C 188.164,123.594 188.164,124.927 190.5,126.5C 190.043,127.298 189.376,127.631 188.5,127.5C 184.11,125.723 179.776,124.056 175.5,122.5C 175.938,122.565 176.272,122.399 176.5,122C 175.418,120.67 174.751,119.17 174.5,117.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#35221c\",\n    d: \"M 109.5,115.5 C 109.833,115.5 110.167,115.5 110.5,115.5C 110.443,116.609 110.11,117.609 109.5,118.5C 108.833,119.833 108.167,121.167 107.5,122.5C 107.389,123.117 107.056,123.617 106.5,124C 108.441,124.743 110.274,124.576 112,123.5C 113.795,124.719 113.628,125.719 111.5,126.5C 109.05,126.298 106.717,126.631 104.5,127.5C 103.791,126.596 102.791,126.263 101.5,126.5C 101.5,125.5 101.5,124.5 101.5,123.5C 103.099,123.768 104.432,123.434 105.5,122.5C 106.765,120.209 108.098,117.875 109.5,115.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#283e49\",\n    d: \"M 159.5,123.5 C 163.857,123.586 168.19,123.92 172.5,124.5C 172.5,125.5 172.5,126.5 172.5,127.5C 171.265,127.721 170.265,128.388 169.5,129.5C 168.503,136.803 168.169,144.137 168.5,151.5C 166.167,151.548 163.834,151.215 161.5,150.5C 162.833,150.5 164.167,150.5 165.5,150.5C 166.661,142.545 167.328,134.545 167.5,126.5C 165.052,125.527 162.385,125.194 159.5,125.5C 159.5,124.833 159.5,124.167 159.5,123.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bab0a2\",\n    d: \"M 229.5,125.5 C 228.097,127.968 226.097,128.634 223.5,127.5C 222.5,127.5 221.5,127.5 220.5,127.5C 219.097,126.069 217.431,124.902 215.5,124C 216.252,123.329 216.586,122.496 216.5,121.5C 217.429,120.685 218.429,119.852 219.5,119C 222.89,118.754 226.223,118.254 229.5,117.5C 230.326,119.548 229.659,121.215 227.5,122.5C 226.614,121.675 226.281,120.675 226.5,119.5C 223.206,119.259 220.206,120.092 217.5,122C 220.311,122.911 223.144,123.744 226,124.5C 227.667,122.993 228.834,123.327 229.5,125.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a161c\",\n    d: \"M 67.5,124.5 C 78.4836,125.249 89.4836,125.583 100.5,125.5C 100.5,126.167 100.5,126.833 100.5,127.5C 100.762,128.978 100.429,130.311 99.5,131.5C 89.2616,129.777 78.9283,129.11 68.5,129.5C 67.5489,128.081 67.2155,126.415 67.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a99d93\",\n    d: \"M 174.5,122.5 C 174.833,122.5 175.167,122.5 175.5,122.5C 179.776,124.056 184.11,125.723 188.5,127.5C 188.5,128.167 188.833,128.5 189.5,128.5C 189.5,128.833 189.5,129.167 189.5,129.5C 185.993,129.693 182.66,129.027 179.5,127.5C 178.548,129.045 178.215,130.712 178.5,132.5C 178.672,133.492 178.338,134.158 177.5,134.5C 178.01,131.612 177.344,129.279 175.5,127.5C 175.5,126.5 175.5,125.5 175.5,124.5C 174.5,124.5 173.5,124.5 172.5,124.5C 172.5,123.167 173.167,122.5 174.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f1eded\",\n    d: \"M 191.5,116.5 C 193.421,117.363 195.421,118.029 197.5,118.5C 201.73,121.068 206.396,122.735 211.5,123.5C 213.355,123.66 214.688,122.993 215.5,121.5C 215.833,121.5 216.167,121.5 216.5,121.5C 216.586,122.496 216.252,123.329 215.5,124C 217.431,124.902 219.097,126.069 220.5,127.5C 213.49,127.668 206.49,128.001 199.5,128.5C 196.167,128.5 192.833,128.5 189.5,128.5C 188.833,128.5 188.5,128.167 188.5,127.5C 189.376,127.631 190.043,127.298 190.5,126.5C 188.164,124.927 188.164,123.594 190.5,122.5C 192.085,125.272 193.085,125.106 193.5,122C 193.316,120.624 192.649,119.791 191.5,119.5C 191.5,118.5 191.5,117.5 191.5,116.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#314664\",\n    d: \"M 159.5,125.5 C 162.385,125.194 165.052,125.527 167.5,126.5C 166.85,126.804 166.183,127.137 165.5,127.5C 164.505,132.792 164.172,138.125 164.5,143.5C 163.5,143.5 162.5,143.5 161.5,143.5C 161.5,145.833 161.5,148.167 161.5,150.5C 160.833,150.5 160.167,150.5 159.5,150.5C 158.771,145.87 158.437,141.203 158.5,136.5C 158.5,133.5 158.5,130.5 158.5,127.5C 159.338,127.158 159.672,126.492 159.5,125.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#422726\",\n    d: \"M 100.5,127.5 C 101.222,128.551 102.222,129.218 103.5,129.5C 103.672,130.492 103.338,131.158 102.5,131.5C 101.833,131.5 101.5,131.833 101.5,132.5C 90.5158,131.626 79.5158,130.959 68.5,130.5C 68.5,130.167 68.5,129.833 68.5,129.5C 78.9283,129.11 89.2616,129.777 99.5,131.5C 100.429,130.311 100.762,128.978 100.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#98624c\",\n    d: \"M 120.5,124.5 C 128.833,124.5 137.167,124.5 145.5,124.5C 145.5,125.5 145.5,126.5 145.5,127.5C 139.107,127.207 132.773,127.54 126.5,128.5C 125.681,133.829 125.014,139.162 124.5,144.5C 123.833,145.167 123.167,145.833 122.5,146.5C 121.656,144.241 119.989,143.241 117.5,143.5C 117.187,140.753 117.52,138.086 118.5,135.5C 120.455,134.72 121.455,133.22 121.5,131C 121.486,129.615 121.152,128.449 120.5,127.5C 119.884,126.202 119.884,125.202 120.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c6c3d0\",\n    d: \"M 220.5,127.5 C 221.5,127.5 222.5,127.5 223.5,127.5C 222.144,129.27 220.311,130.603 218,131.5C 215.899,130.385 213.733,130.385 211.5,131.5C 207.46,130.176 203.46,129.176 199.5,128.5C 206.49,128.001 213.49,127.668 220.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ded9d6\",\n    d: \"M 229.5,125.5 C 231.216,125.629 232.883,125.962 234.5,126.5C 234.5,129.167 234.5,131.833 234.5,134.5C 227.151,134.549 219.817,134.882 212.5,135.5C 213.589,133.883 215.256,133.05 217.5,133C 212.653,132.467 207.82,132.634 203,133.5C 200.043,133.307 197.543,132.307 195.5,130.5C 193.379,130.675 191.379,130.341 189.5,129.5C 189.5,129.167 189.5,128.833 189.5,128.5C 192.833,128.5 196.167,128.5 199.5,128.5C 203.46,129.176 207.46,130.176 211.5,131.5C 213.733,130.385 215.899,130.385 218,131.5C 220.311,130.603 222.144,129.27 223.5,127.5C 226.097,128.634 228.097,127.968 229.5,125.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#582623\",\n    d: \"M 68.5,130.5 C 79.5158,130.959 90.5158,131.626 101.5,132.5C 97.0874,134.138 92.4208,135.138 87.5,135.5C 87.5,136.167 87.1667,136.5 86.5,136.5C 81.2981,135.79 75.9648,135.124 70.5,134.5C 69.7025,134.957 69.3691,135.624 69.5,136.5C 68.5386,134.735 68.2053,132.735 68.5,130.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#786355\",\n    d: \"M 189.5,129.5 C 191.379,130.341 193.379,130.675 195.5,130.5C 195.167,132.5 194.833,134.5 194.5,136.5C 197.5,136.5 200.5,136.5 203.5,136.5C 200.713,137.477 197.713,137.81 194.5,137.5C 189.121,135.825 183.788,134.158 178.5,132.5C 178.215,130.712 178.548,129.045 179.5,127.5C 182.66,129.027 185.993,129.693 189.5,129.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3d515f\",\n    d: \"M 20.5,134.5 C 25.3054,133.513 30.3054,133.179 35.5,133.5C 35.5,133.833 35.5,134.167 35.5,134.5C 33.7085,134.366 32.0418,134.699 30.5,135.5C 28.901,135.232 27.5676,135.566 26.5,136.5C 26.5654,136.938 26.3988,137.272 26,137.5C 25.5831,136.244 24.7498,135.577 23.5,135.5C 22.791,134.596 21.791,134.263 20.5,134.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b284d\",\n    d: \"M 40.5,132.5 C 42.8333,132.5 45.1667,132.5 47.5,132.5C 50.8683,132.036 52.2016,132.369 51.5,133.5C 49.5168,133.157 48.1834,133.824 47.5,135.5C 45.002,134.918 42.6687,134.918 40.5,135.5C 39.325,135.719 38.325,135.386 37.5,134.5C 38.6016,133.824 39.6016,133.158 40.5,132.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#364e74\",\n    d: \"M 47.5,132.5 C 49.6074,131.532 51.9407,131.198 54.5,131.5C 55.1098,132.391 55.4431,133.391 55.5,134.5C 53.8716,135.853 52.5383,135.519 51.5,133.5C 52.2016,132.369 50.8683,132.036 47.5,132.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#78b4ad\",\n    d: \"M 175.5,127.5 C 174.494,134.971 173.494,142.305 172.5,149.5C 172.446,143.813 172.779,138.146 173.5,132.5C 173.556,130.36 174.223,128.694 175.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#997456\",\n    d: \"M 153.5,122.5 C 154.5,122.833 155.167,123.5 155.5,124.5C 154.51,130.645 154.177,136.978 154.5,143.5C 154.643,145.262 154.309,146.929 153.5,148.5C 154.521,149.901 155.521,151.235 156.5,152.5C 155.791,153.404 154.791,153.737 153.5,153.5C 153.405,151.214 152.738,149.214 151.5,147.5C 152.125,139.824 152.792,132.158 153.5,124.5C 153.5,123.833 153.5,123.167 153.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bbada3\",\n    d: \"M 195.5,130.5 C 197.543,132.307 200.043,133.307 203,133.5C 207.82,132.634 212.653,132.467 217.5,133C 215.256,133.05 213.589,133.883 212.5,135.5C 210.585,135.216 208.919,135.549 207.5,136.5C 206.167,136.5 204.833,136.5 203.5,136.5C 200.5,136.5 197.5,136.5 194.5,136.5C 194.833,134.5 195.167,132.5 195.5,130.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f7ea5\",\n    d: \"M 51.5,133.5 C 52.5383,135.519 53.8716,135.853 55.5,134.5C 56.6431,134.908 57.6431,135.575 58.5,136.5C 55.2473,137.598 51.9139,138.264 48.5,138.5C 48.4431,137.391 48.1098,136.391 47.5,135.5C 48.1834,133.824 49.5168,133.157 51.5,133.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#361514\",\n    d: \"M 86.5,136.5 C 83.9407,136.198 81.6074,136.532 79.5,137.5C 76.1667,137.5 72.8333,137.5 69.5,137.5C 69.5,137.167 69.5,136.833 69.5,136.5C 69.3691,135.624 69.7025,134.957 70.5,134.5C 75.9648,135.124 81.2981,135.79 86.5,136.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8d4c36\",\n    d: \"M 145.5,127.5 C 146.552,127.351 147.552,127.517 148.5,128C 147.383,131.073 147.216,134.24 148,137.5C 148.915,136.672 149.581,135.672 150,134.5C 150.796,138.755 150.629,142.921 149.5,147C 141.479,147.832 133.479,147.665 125.5,146.5C 125.137,145.817 124.804,145.15 124.5,144.5C 125.014,139.162 125.681,133.829 126.5,128.5C 132.773,127.54 139.107,127.207 145.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d5a89\",\n    d: \"M 35.5,132.5 C 37.1667,132.5 38.8333,132.5 40.5,132.5C 39.6016,133.158 38.6016,133.824 37.5,134.5C 38.325,135.386 39.325,135.719 40.5,135.5C 39.8166,137.176 38.4832,137.843 36.5,137.5C 35.8902,136.609 35.5569,135.609 35.5,134.5C 35.5,134.167 35.5,133.833 35.5,133.5C 35.5,133.167 35.5,132.833 35.5,132.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#294572\",\n    d: \"M 10.5,135.5 C 13.6248,134.521 16.9581,134.187 20.5,134.5C 21.791,134.263 22.791,134.596 23.5,135.5C 22.1667,135.5 21.5,136.167 21.5,137.5C 19.6434,134.982 17.8101,134.982 16,137.5C 14.9887,136.663 13.8221,136.33 12.5,136.5C 12.5,137.5 12.5,138.5 12.5,139.5C 12.1667,139.5 11.8333,139.5 11.5,139.5C 11.5,138.833 11.5,138.167 11.5,137.5C 11.6716,136.508 11.3382,135.842 10.5,135.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6988b4\",\n    d: \"M 23.5,135.5 C 24.7498,135.577 25.5831,136.244 26,137.5C 26.3988,137.272 26.5654,136.938 26.5,136.5C 28.2327,137.008 28.566,137.841 27.5,139C 28.7932,139.49 30.1266,139.657 31.5,139.5C 31.5,139.833 31.5,140.167 31.5,140.5C 24.8407,140.954 18.1741,141.287 11.5,141.5C 11.5,140.833 11.5,140.167 11.5,139.5C 11.8333,139.5 12.1667,139.5 12.5,139.5C 12.7352,140.097 13.2352,140.43 14,140.5C 17.1275,139.796 20.2942,139.296 23.5,139C 22.9558,138.283 22.2891,137.783 21.5,137.5C 21.5,136.167 22.1667,135.5 23.5,135.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#388173\",\n    d: \"M 35.5,134.5 C 35.5569,135.609 35.8902,136.609 36.5,137.5C 33.5327,139.266 31.5327,138.599 30.5,135.5C 32.0418,134.699 33.7085,134.366 35.5,134.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#889cad\",\n    d: \"M 47.5,135.5 C 48.1098,136.391 48.4431,137.391 48.5,138.5C 48.1667,138.5 47.8333,138.5 47.5,138.5C 45.901,138.232 44.5676,138.566 43.5,139.5C 39.5,139.5 35.5,139.5 31.5,139.5C 30.1266,139.657 28.7932,139.49 27.5,139C 28.566,137.841 28.2327,137.008 26.5,136.5C 27.5676,135.566 28.901,135.232 30.5,135.5C 31.5327,138.599 33.5327,139.266 36.5,137.5C 38.4832,137.843 39.8166,137.176 40.5,135.5C 42.6687,134.918 45.002,134.918 47.5,135.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9b7a6e\",\n    d: \"M 234.5,134.5 C 234.5,134.833 234.5,135.167 234.5,135.5C 231.482,135.335 228.482,135.502 225.5,136C 226.684,137.145 226.684,138.312 225.5,139.5C 221.232,138.627 216.898,138.294 212.5,138.5C 211.262,138.19 211.262,137.69 212.5,137C 210.866,136.506 209.199,136.34 207.5,136.5C 208.919,135.549 210.585,135.216 212.5,135.5C 219.817,134.882 227.151,134.549 234.5,134.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#435860\",\n    d: \"M -0.5,136.5 C -0.5,136.167 -0.5,135.833 -0.5,135.5C 3.16667,135.5 6.83333,135.5 10.5,135.5C 11.3382,135.842 11.6716,136.508 11.5,137.5C 11.1667,137.5 10.8333,137.5 10.5,137.5C 9.29208,136.766 7.95875,136.433 6.5,136.5C 6.5,137.833 6.5,139.167 6.5,140.5C 5.29208,141.234 3.95875,141.567 2.5,141.5C 3.41217,139.012 2.41217,137.345 -0.5,136.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4477be\",\n    d: \"M 21.5,137.5 C 22.2891,137.783 22.9558,138.283 23.5,139C 20.2942,139.296 17.1275,139.796 14,140.5C 13.2352,140.43 12.7352,140.097 12.5,139.5C 12.5,138.5 12.5,137.5 12.5,136.5C 13.8221,136.33 14.9887,136.663 16,137.5C 17.8101,134.982 19.6434,134.982 21.5,137.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#513934\",\n    d: \"M 86.5,136.5 C 86.67,137.822 86.3366,138.989 85.5,140C 83.5273,140.495 81.5273,140.662 79.5,140.5C 79.5,139.5 79.5,138.5 79.5,137.5C 81.6074,136.532 83.9407,136.198 86.5,136.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a3b30\",\n    d: \"M 102.5,131.5 C 103.379,133.228 104.046,135.061 104.5,137C 104.676,139.359 104.009,139.859 102.5,138.5C 101.399,137.402 100.066,137.235 98.5,138C 96.0987,140.607 93.2654,141.441 90,140.5C 86.9654,142.97 83.4654,144.304 79.5,144.5C 82.6062,143.069 85.7728,141.403 89,139.5C 89.7726,137.648 89.2726,136.314 87.5,135.5C 92.4208,135.138 97.0874,134.138 101.5,132.5C 101.5,131.833 101.833,131.5 102.5,131.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#80793f\",\n    d: \"M 159.5,123.5 C 159.5,124.167 159.5,124.833 159.5,125.5C 159.672,126.492 159.338,127.158 158.5,127.5C 157.194,132.616 156.527,137.949 156.5,143.5C 155.833,143.5 155.167,143.5 154.5,143.5C 154.177,136.978 154.51,130.645 155.5,124.5C 156.959,124.567 158.292,124.234 159.5,123.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#52623f\",\n    d: \"M 158.5,127.5 C 158.5,130.5 158.5,133.5 158.5,136.5C 157.833,138.833 157.167,141.167 156.5,143.5C 156.527,137.949 157.194,132.616 158.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#613229\",\n    d: \"M 178.5,132.5 C 183.788,134.158 189.121,135.825 194.5,137.5C 194.5,138.167 194.5,138.833 194.5,139.5C 188.818,139.579 183.151,139.579 177.5,139.5C 177.5,137.833 177.5,136.167 177.5,134.5C 178.338,134.158 178.672,133.492 178.5,132.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bda39a\",\n    d: \"M 234.5,135.5 C 234.5,135.833 234.5,136.167 234.5,136.5C 232.586,137.185 230.586,137.685 228.5,138C 229.167,138.333 229.833,138.667 230.5,139C 229.584,139.278 228.918,139.778 228.5,140.5C 227.609,139.89 226.609,139.557 225.5,139.5C 226.684,138.312 226.684,137.145 225.5,136C 228.482,135.502 231.482,135.335 234.5,135.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#676595\",\n    d: \"M -0.5,136.5 C 2.41217,137.345 3.41217,139.012 2.5,141.5C 1.5,141.5 0.5,141.5 -0.5,141.5C -0.5,139.833 -0.5,138.167 -0.5,136.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#598c5a\",\n    d: \"M 10.5,137.5 C 10.5,138.5 10.5,139.5 10.5,140.5C 9.16667,140.5 7.83333,140.5 6.5,140.5C 6.5,139.167 6.5,137.833 6.5,136.5C 7.95875,136.433 9.29208,136.766 10.5,137.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7eaf9f\",\n    d: \"M 10.5,137.5 C 10.8333,137.5 11.1667,137.5 11.5,137.5C 11.5,138.167 11.5,138.833 11.5,139.5C 11.5,140.167 11.5,140.833 11.5,141.5C 10.2921,142.234 8.95875,142.567 7.5,142.5C 7.16667,141.833 6.83333,141.167 6.5,140.5C 7.83333,140.5 9.16667,140.5 10.5,140.5C 10.5,139.5 10.5,138.5 10.5,137.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b1c31\",\n    d: \"M 58.5,95.5 C 59.0149,97.7512 60.0149,99.7512 61.5,101.5C 61.9267,104.01 62.5933,106.343 63.5,108.5C 63.9494,113.863 64.6161,119.196 65.5,124.5C 65.9926,126.806 66.3259,129.139 66.5,131.5C 66.5,132.5 66.5,133.5 66.5,134.5C 65.325,134.281 64.325,134.614 63.5,135.5C 62.8721,137.258 61.8721,138.758 60.5,140C 56.2695,141.29 51.9362,141.79 47.5,141.5C 47.5,140.5 47.5,139.5 47.5,138.5C 47.8333,138.5 48.1667,138.5 48.5,138.5C 51.9139,138.264 55.2473,137.598 58.5,136.5C 57.6431,135.575 56.6431,134.908 55.5,134.5C 55.4431,133.391 55.1098,132.391 54.5,131.5C 56.7812,131.923 58.4479,131.256 59.5,129.5C 60.675,129.719 61.675,129.386 62.5,128.5C 61.3916,123.515 60.3916,118.515 59.5,113.5C 60.1524,112.551 60.4857,111.385 60.5,110C 59.5068,105.203 58.8402,100.37 58.5,95.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6a413c\",\n    d: \"M 87.5,135.5 C 89.2726,136.314 89.7726,137.648 89,139.5C 85.7728,141.403 82.6062,143.069 79.5,144.5C 79.5,144.833 79.5,145.167 79.5,145.5C 79.5,145.833 79.5,146.167 79.5,146.5C 76.3858,144.609 73.0525,143.276 69.5,142.5C 69.5,140.833 69.5,139.167 69.5,137.5C 72.8333,137.5 76.1667,137.5 79.5,137.5C 79.5,138.5 79.5,139.5 79.5,140.5C 81.5273,140.662 83.5273,140.495 85.5,140C 86.3366,138.989 86.67,137.822 86.5,136.5C 87.1667,136.5 87.5,136.167 87.5,135.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6b92b3\",\n    d: \"M 6.5,140.5 C 6.83333,141.167 7.16667,141.833 7.5,142.5C 4.87283,143.092 2.20616,143.425 -0.5,143.5C -0.5,142.833 -0.5,142.167 -0.5,141.5C 0.5,141.5 1.5,141.5 2.5,141.5C 3.95875,141.567 5.29208,141.234 6.5,140.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8e614f\",\n    d: \"M 212.5,138.5 C 216.898,138.294 221.232,138.627 225.5,139.5C 226.609,139.557 227.609,139.89 228.5,140.5C 230.033,142.245 232.033,143.245 234.5,143.5C 234.5,144.5 234.5,145.5 234.5,146.5C 227.593,145.008 220.593,144.341 213.5,144.5C 213.5,145.5 213.5,146.5 213.5,147.5C 212.596,148.209 212.263,149.209 212.5,150.5C 209.435,146.796 210.435,144.296 215.5,143C 212.833,142.333 212.833,141.667 215.5,141C 213.881,140.764 212.881,139.931 212.5,138.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#95786c\",\n    d: \"M 234.5,136.5 C 234.5,138.833 234.5,141.167 234.5,143.5C 232.033,143.245 230.033,142.245 228.5,140.5C 228.918,139.778 229.584,139.278 230.5,139C 229.833,138.667 229.167,138.333 228.5,138C 230.586,137.685 232.586,137.185 234.5,136.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2e2832\",\n    d: \"M 66.5,131.5 C 67.5808,134.627 68.2474,137.96 68.5,141.5C 60.5501,143.09 52.5501,144.423 44.5,145.5C 42.7078,144.691 40.7078,144.191 38.5,144C 39,143.5 39.5,143 40,142.5C 41.6995,143.406 43.5328,143.739 45.5,143.5C 45.8432,141.517 45.1765,140.183 43.5,139.5C 44.5676,138.566 45.901,138.232 47.5,138.5C 47.5,139.5 47.5,140.5 47.5,141.5C 51.9362,141.79 56.2695,141.29 60.5,140C 61.8721,138.758 62.8721,137.258 63.5,135.5C 64.325,134.614 65.325,134.281 66.5,134.5C 66.5,133.5 66.5,132.5 66.5,131.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141b37\",\n    d: \"M 31.5,140.5 C 31.5,141.5 31.5,142.5 31.5,143.5C 21.072,144.88 10.4054,146.213 -0.5,147.5C -0.5,146.167 -0.5,144.833 -0.5,143.5C 2.20616,143.425 4.87283,143.092 7.5,142.5C 8.95875,142.567 10.2921,142.234 11.5,141.5C 18.1741,141.287 24.8407,140.954 31.5,140.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#824a3b\",\n    d: \"M 102.5,138.5 C 99.4594,138.406 97.7928,139.906 97.5,143C 98.8333,145.667 98.8333,148.333 97.5,151C 96.5,151.167 95.5,151.333 94.5,151.5C 92.0124,150.745 90.0124,149.245 88.5,147C 85.5219,146.304 82.5219,145.804 79.5,145.5C 79.5,145.167 79.5,144.833 79.5,144.5C 83.4654,144.304 86.9654,142.97 90,140.5C 93.2654,141.441 96.0987,140.607 98.5,138C 100.066,137.235 101.399,137.402 102.5,138.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3a9480\",\n    d: \"M 172.5,124.5 C 173.5,124.5 174.5,124.5 175.5,124.5C 175.5,125.5 175.5,126.5 175.5,127.5C 174.223,128.694 173.556,130.36 173.5,132.5C 172.779,138.146 172.446,143.813 172.5,149.5C 172.5,150.167 172.5,150.833 172.5,151.5C 172.167,151.5 171.833,151.5 171.5,151.5C 170.425,150.287 169.759,148.787 169.5,147C 170.101,140.414 171.101,133.914 172.5,127.5C 172.5,126.5 172.5,125.5 172.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#384856\",\n    d: \"M 158.5,136.5 C 158.437,141.203 158.771,145.87 159.5,150.5C 158.5,150.5 157.5,150.5 156.5,150.5C 156.5,148.167 156.5,145.833 156.5,143.5C 157.167,141.167 157.833,138.833 158.5,136.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e5b56\",\n    d: \"M 172.5,127.5 C 171.101,133.914 170.101,140.414 169.5,147C 169.759,148.787 170.425,150.287 171.5,151.5C 171.5,152.167 171.167,152.5 170.5,152.5C 170.158,151.662 169.492,151.328 168.5,151.5C 168.169,144.137 168.503,136.803 169.5,129.5C 170.265,128.388 171.265,127.721 172.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b6bcb5\",\n    d: \"M 175.5,127.5 C 177.344,129.279 178.01,131.612 177.5,134.5C 177.5,136.167 177.5,137.833 177.5,139.5C 176.566,142.656 175.899,145.989 175.5,149.5C 174.5,150.167 173.5,150.833 172.5,151.5C 172.5,150.833 172.5,150.167 172.5,149.5C 173.494,142.305 174.494,134.971 175.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#232537\",\n    d: \"M 31.5,139.5 C 35.5,139.5 39.5,139.5 43.5,139.5C 45.1765,140.183 45.8432,141.517 45.5,143.5C 43.5328,143.739 41.6995,143.406 40,142.5C 39.5,143 39,143.5 38.5,144C 40.7078,144.191 42.7078,144.691 44.5,145.5C 29.4712,147.015 14.4712,148.681 -0.5,150.5C -0.5,149.5 -0.5,148.5 -0.5,147.5C 10.4054,146.213 21.072,144.88 31.5,143.5C 31.5,142.5 31.5,141.5 31.5,140.5C 31.5,140.167 31.5,139.833 31.5,139.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8d604e\",\n    d: \"M 111.5,126.5 C 114.545,126.508 117.545,126.841 120.5,127.5C 121.152,128.449 121.486,129.615 121.5,131C 121.455,133.22 120.455,134.72 118.5,135.5C 117.52,138.086 117.187,140.753 117.5,143.5C 119.989,143.241 121.656,144.241 122.5,146.5C 121.246,150.848 121.246,155.182 122.5,159.5C 106.057,158.573 105.39,160.739 120.5,166C 122.373,166.953 122.706,168.12 121.5,169.5C 112.512,164.339 103.179,159.673 93.5,155.5C 89.1731,152.001 84.5064,149.001 79.5,146.5C 79.5,146.167 79.5,145.833 79.5,145.5C 82.5219,145.804 85.5219,146.304 88.5,147C 90.0124,149.245 92.0124,150.745 94.5,151.5C 95.5,151.333 96.5,151.167 97.5,151C 98.8333,148.333 98.8333,145.667 97.5,143C 97.7928,139.906 99.4594,138.406 102.5,138.5C 104.009,139.859 104.676,139.359 104.5,137C 104.046,135.061 103.379,133.228 102.5,131.5C 103.338,131.158 103.672,130.492 103.5,129.5C 104.338,129.158 104.672,128.492 104.5,127.5C 106.717,126.631 109.05,126.298 111.5,126.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#375f76\",\n    d: \"M 167.5,126.5 C 167.328,134.545 166.661,142.545 165.5,150.5C 164.167,150.5 162.833,150.5 161.5,150.5C 161.5,148.167 161.5,145.833 161.5,143.5C 162.5,143.5 163.5,143.5 164.5,143.5C 164.172,138.125 164.505,132.792 165.5,127.5C 166.183,127.137 166.85,126.804 167.5,126.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ae9a82\",\n    d: \"M 234.5,146.5 C 234.5,147.5 234.5,148.5 234.5,149.5C 230.062,148.415 225.729,147.082 221.5,145.5C 219.347,145.561 218.014,146.561 217.5,148.5C 216.041,148.567 214.708,148.234 213.5,147.5C 213.5,146.5 213.5,145.5 213.5,144.5C 220.593,144.341 227.593,145.008 234.5,146.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#854c39\",\n    d: \"M 120.5,124.5 C 120.5,124.167 120.5,123.833 120.5,123.5C 131.581,123.19 142.581,123.523 153.5,124.5C 152.792,132.158 152.125,139.824 151.5,147.5C 149.2,149.202 146.533,149.868 143.5,149.5C 143.5,150.833 143.5,152.167 143.5,153.5C 141.08,153.292 138.747,153.626 136.5,154.5C 135.937,156.709 134.604,158.209 132.5,159C 133.833,159.333 135.167,159.667 136.5,160C 133.928,162.287 130.928,163.453 127.5,163.5C 127.5,165.167 127.5,166.833 127.5,168.5C 128.959,168.433 130.292,168.766 131.5,169.5C 132.598,170.397 132.598,171.23 131.5,172C 129.888,172.72 128.388,172.554 127,171.5C 123.821,168.129 122.321,164.129 122.5,159.5C 121.246,155.182 121.246,150.848 122.5,146.5C 123.167,145.833 123.833,145.167 124.5,144.5C 124.804,145.15 125.137,145.817 125.5,146.5C 133.479,147.665 141.479,147.832 149.5,147C 150.629,142.921 150.796,138.755 150,134.5C 149.581,135.672 148.915,136.672 148,137.5C 147.216,134.24 147.383,131.073 148.5,128C 147.552,127.517 146.552,127.351 145.5,127.5C 145.5,126.5 145.5,125.5 145.5,124.5C 137.167,124.5 128.833,124.5 120.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bab099\",\n    d: \"M 234.5,149.5 C 234.5,151.167 234.5,152.833 234.5,154.5C 233.127,154.657 231.793,154.49 230.5,154C 231.833,152.667 231.833,151.333 230.5,150C 226.152,149.535 221.819,149.035 217.5,148.5C 218.014,146.561 219.347,145.561 221.5,145.5C 225.729,147.082 230.062,148.415 234.5,149.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8b503f\",\n    d: \"M 203.5,136.5 C 204.833,136.5 206.167,136.5 207.5,136.5C 209.199,136.34 210.866,136.506 212.5,137C 211.262,137.69 211.262,138.19 212.5,138.5C 212.881,139.931 213.881,140.764 215.5,141C 212.833,141.667 212.833,142.333 215.5,143C 210.435,144.296 209.435,146.796 212.5,150.5C 212.5,153.5 212.5,156.5 212.5,159.5C 211.5,159.5 210.5,159.5 209.5,159.5C 203.445,156.021 197.445,152.355 191.5,148.5C 192.5,147.167 193.5,145.833 194.5,144.5C 198.783,143.508 203.116,143.174 207.5,143.5C 207.5,142.5 207.5,141.5 207.5,140.5C 202.968,140.818 198.634,140.485 194.5,139.5C 194.5,138.833 194.5,138.167 194.5,137.5C 197.713,137.81 200.713,137.477 203.5,136.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#635f4e\",\n    d: \"M 154.5,143.5 C 155.167,143.5 155.833,143.5 156.5,143.5C 156.5,145.833 156.5,148.167 156.5,150.5C 156.5,151.167 156.5,151.833 156.5,152.5C 155.521,151.235 154.521,149.901 153.5,148.5C 154.309,146.929 154.643,145.262 154.5,143.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#706e71\",\n    d: \"M 65.5,124.5 C 65.8333,124.5 66.1667,124.5 66.5,124.5C 66.8333,124.5 67.1667,124.5 67.5,124.5C 67.2155,126.415 67.5489,128.081 68.5,129.5C 68.5,129.833 68.5,130.167 68.5,130.5C 68.2053,132.735 68.5386,134.735 69.5,136.5C 69.5,136.833 69.5,137.167 69.5,137.5C 69.5,139.167 69.5,140.833 69.5,142.5C 68.448,142.351 67.448,142.517 66.5,143C 66.1654,144.164 66.1654,145.497 66.5,147C 64.3808,147.342 64.0474,148.175 65.5,149.5C 62.9561,147.818 60.1228,146.818 57,146.5C 52.4798,147.122 47.9798,147.789 43.5,148.5C 28.8096,150.021 14.1429,151.688 -0.5,153.5C -0.5,152.5 -0.5,151.5 -0.5,150.5C 14.4712,148.681 29.4712,147.015 44.5,145.5C 52.5501,144.423 60.5501,143.09 68.5,141.5C 68.2474,137.96 67.5808,134.627 66.5,131.5C 66.3259,129.139 65.9926,126.806 65.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#774f43\",\n    d: \"M 151.5,147.5 C 152.738,149.214 153.405,151.214 153.5,153.5C 154.791,153.737 155.791,153.404 156.5,152.5C 161.295,154.763 165.962,154.763 170.5,152.5C 171.167,152.5 171.5,152.167 171.5,151.5C 171.833,151.5 172.167,151.5 172.5,151.5C 173.5,150.833 174.5,150.167 175.5,149.5C 175.649,150.552 175.483,151.552 175,152.5C 172.985,153.697 171.151,155.03 169.5,156.5C 165.361,155.794 161.194,155.128 157,154.5C 155.21,155.285 153.543,155.285 152,154.5C 151.536,155.094 151.369,155.761 151.5,156.5C 148.382,156.232 145.716,155.232 143.5,153.5C 143.5,152.167 143.5,150.833 143.5,149.5C 146.533,149.868 149.2,149.202 151.5,147.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d2526\",\n    d: \"M 156.5,150.5 C 157.5,150.5 158.5,150.5 159.5,150.5C 160.167,150.5 160.833,150.5 161.5,150.5C 163.834,151.215 166.167,151.548 168.5,151.5C 169.492,151.328 170.158,151.662 170.5,152.5C 165.962,154.763 161.295,154.763 156.5,152.5C 156.5,151.833 156.5,151.167 156.5,150.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b2b33\",\n    d: \"M 65.5,149.5 C 65.8333,150.167 66.1667,150.833 66.5,151.5C 65.709,154.275 64.5423,156.942 63,159.5C 60.9836,157.392 58.8169,157.058 56.5,158.5C 55.5,158.5 54.5,158.5 53.5,158.5C 50.7742,160.301 49.1076,159.634 48.5,156.5C 47.709,153.26 45.709,151.094 42.5,150C 43.056,149.617 43.3893,149.117 43.5,148.5C 47.9798,147.789 52.4798,147.122 57,146.5C 60.1228,146.818 62.9561,147.818 65.5,149.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#494540\",\n    d: \"M 66.5,151.5 C 69.3837,152.38 72.0503,153.713 74.5,155.5C 66.6646,157.726 66.8313,158.393 75,157.5C 76.6811,157.608 77.8478,158.275 78.5,159.5C 77.8333,159.5 77.1667,159.5 76.5,159.5C 74.0504,159.298 71.717,159.631 69.5,160.5C 66.15,160.614 62.8167,160.947 59.5,161.5C 58.1667,161.167 56.8333,160.833 55.5,160.5C 57.0777,159.702 58.7444,159.202 60.5,159C 59.2068,158.51 57.8734,158.343 56.5,158.5C 58.8169,157.058 60.9836,157.392 63,159.5C 64.5423,156.942 65.709,154.275 66.5,151.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#864433\",\n    d: \"M 194.5,139.5 C 198.634,140.485 202.968,140.818 207.5,140.5C 207.5,141.5 207.5,142.5 207.5,143.5C 203.116,143.174 198.783,143.508 194.5,144.5C 193.5,145.833 192.5,147.167 191.5,148.5C 197.445,152.355 203.445,156.021 209.5,159.5C 204.5,159.5 199.5,159.5 194.5,159.5C 189.156,159.334 183.823,159.501 178.5,160C 179.056,160.383 179.389,160.883 179.5,161.5C 177.568,160.416 175.735,159.083 174,157.5C 172.699,157.639 171.866,158.305 171.5,159.5C 170.833,159.5 170.167,159.5 169.5,159.5C 169.5,158.5 169.5,157.5 169.5,156.5C 171.151,155.03 172.985,153.697 175,152.5C 175.483,151.552 175.649,150.552 175.5,149.5C 175.899,145.989 176.566,142.656 177.5,139.5C 183.151,139.579 188.818,139.579 194.5,139.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9c9082\",\n    d: \"M 217.5,148.5 C 221.819,149.035 226.152,149.535 230.5,150C 231.833,151.333 231.833,152.667 230.5,154C 231.793,154.49 233.127,154.657 234.5,154.5C 234.5,156.5 234.5,158.5 234.5,160.5C 231.956,161.708 230.622,163.708 230.5,166.5C 229.624,166.631 228.957,166.298 228.5,165.5C 229.55,164.571 229.55,163.905 228.5,163.5C 228.971,161.712 229.304,159.878 229.5,158C 229.392,156.319 228.725,155.152 227.5,154.5C 227.67,153.178 227.337,152.011 226.5,151C 223.149,150.943 220.149,150.109 217.5,148.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a99c88\",\n    d: \"M 69.5,142.5 C 73.0525,143.276 76.3858,144.609 79.5,146.5C 84.5064,149.001 89.1731,152.001 93.5,155.5C 92.0048,155.989 90.6715,156.655 89.5,157.5C 85.7878,157.961 82.1211,158.627 78.5,159.5C 77.8478,158.275 76.6811,157.608 75,157.5C 66.8313,158.393 66.6646,157.726 74.5,155.5C 72.0503,153.713 69.3837,152.38 66.5,151.5C 66.1667,150.833 65.8333,150.167 65.5,149.5C 64.0474,148.175 64.3808,147.342 66.5,147C 66.1654,145.497 66.1654,144.164 66.5,143C 67.448,142.517 68.448,142.351 69.5,142.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#766253\",\n    d: \"M 227.5,154.5 C 228.725,155.152 229.392,156.319 229.5,158C 229.304,159.878 228.971,161.712 228.5,163.5C 224.3,162.733 220.633,160.9 217.5,158C 221.167,157.429 224.5,156.263 227.5,154.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#574338\",\n    d: \"M 213.5,147.5 C 214.708,148.234 216.041,148.567 217.5,148.5C 220.149,150.109 223.149,150.943 226.5,151C 227.337,152.011 227.67,153.178 227.5,154.5C 224.5,156.263 221.167,157.429 217.5,158C 220.633,160.9 224.3,162.733 228.5,163.5C 229.55,163.905 229.55,164.571 228.5,165.5C 228.957,166.298 229.624,166.631 230.5,166.5C 230.34,168.153 229.674,169.486 228.5,170.5C 225.65,167.719 222.317,165.386 218.5,163.5C 217.817,163.863 217.15,164.196 216.5,164.5C 214.014,163.538 214.014,162.705 216.5,162C 215.307,160.905 213.973,160.072 212.5,159.5C 212.5,156.5 212.5,153.5 212.5,150.5C 212.263,149.209 212.596,148.209 213.5,147.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c1b299\",\n    d: \"M 93.5,155.5 C 103.179,159.673 112.512,164.339 121.5,169.5C 121.5,171.5 121.5,173.5 121.5,175.5C 120.5,175.5 119.5,175.5 118.5,175.5C 118.38,174.414 117.713,173.747 116.5,173.5C 111.204,174.495 105.871,175.162 100.5,175.5C 96.7879,175.658 93.2879,175.658 90,175.5C 89,176.167 88,176.833 87,177.5C 84.2027,172.939 85.3694,170.606 90.5,170.5C 90.8506,166.631 92.1839,163.131 94.5,160C 93.381,158.124 91.7144,157.291 89.5,157.5C 90.6715,156.655 92.0048,155.989 93.5,155.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#96634d\",\n    d: \"M 122.5,159.5 C 122.321,164.129 123.821,168.129 127,171.5C 128.388,172.554 129.888,172.72 131.5,172C 132.598,171.23 132.598,170.397 131.5,169.5C 133.661,169.491 134.994,168.824 135.5,167.5C 139.065,170.06 143.065,171.393 147.5,171.5C 148.167,171.5 148.833,171.5 149.5,171.5C 140.354,173.688 131.02,175.355 121.5,176.5C 121.5,176.167 121.5,175.833 121.5,175.5C 121.5,173.5 121.5,171.5 121.5,169.5C 122.706,168.12 122.373,166.953 120.5,166C 105.39,160.739 106.057,158.573 122.5,159.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#222330\",\n    d: \"M 43.5,148.5 C 43.3893,149.117 43.056,149.617 42.5,150C 45.709,151.094 47.709,153.26 48.5,156.5C 46.4508,156.706 46.1175,157.539 47.5,159C 45.8659,159.494 44.1992,159.66 42.5,159.5C 42.5,160.5 42.5,161.5 42.5,162.5C 40.8008,162.66 39.1341,162.494 37.5,162C 38.6956,161.346 38.6956,160.846 37.5,160.5C 34.5891,161.983 31.9225,161.65 29.5,159.5C 29.1667,159.667 28.8333,159.833 28.5,160C 29.6872,161.019 30.6872,162.186 31.5,163.5C 29.4061,164.518 27.4061,165.518 25.5,166.5C 16.8036,167.67 8.13697,169.004 -0.5,170.5C -0.5,164.833 -0.5,159.167 -0.5,153.5C 14.1429,151.688 28.8096,150.021 43.5,148.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#373739\",\n    d: \"M 48.5,156.5 C 49.1076,159.634 50.7742,160.301 53.5,158.5C 52.2935,159.88 52.6269,161.047 54.5,162C 45.502,163.632 36.502,165.132 27.5,166.5C 26.8333,166.5 26.1667,166.5 25.5,166.5C 27.4061,165.518 29.4061,164.518 31.5,163.5C 30.6872,162.186 29.6872,161.019 28.5,160C 28.8333,159.833 29.1667,159.667 29.5,159.5C 31.9225,161.65 34.5891,161.983 37.5,160.5C 38.6956,160.846 38.6956,161.346 37.5,162C 39.1341,162.494 40.8008,162.66 42.5,162.5C 42.5,161.5 42.5,160.5 42.5,159.5C 44.1992,159.66 45.8659,159.494 47.5,159C 46.1175,157.539 46.4508,156.706 48.5,156.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#703125\",\n    d: \"M 169.5,156.5 C 169.5,157.5 169.5,158.5 169.5,159.5C 167.772,160.379 165.939,161.046 164,161.5C 162.106,161.461 161.106,160.794 161,159.5C 158.549,161.595 155.715,162.595 152.5,162.5C 152.5,161.5 152.5,160.5 152.5,159.5C 153.552,159.649 154.552,159.483 155.5,159C 154.264,157.915 152.931,157.082 151.5,156.5C 151.369,155.761 151.536,155.094 152,154.5C 153.543,155.285 155.21,155.285 157,154.5C 161.194,155.128 165.361,155.794 169.5,156.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#67392c\",\n    d: \"M 194.5,159.5 C 199.5,159.5 204.5,159.5 209.5,159.5C 210.5,159.5 211.5,159.5 212.5,159.5C 212.222,166.925 215.889,171.591 223.5,173.5C 223.5,174.167 223.5,174.833 223.5,175.5C 220.203,173.36 216.536,172.027 212.5,171.5C 211.599,169.273 209.933,168.273 207.5,168.5C 207.5,167.5 207.5,166.5 207.5,165.5C 205.396,165.799 203.396,165.466 201.5,164.5C 200.619,163.029 199.286,162.196 197.5,162C 197.833,161.667 198.167,161.333 198.5,161C 196.942,160.79 195.609,160.29 194.5,159.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#875346\",\n    d: \"M 143.5,153.5 C 145.716,155.232 148.382,156.232 151.5,156.5C 152.931,157.082 154.264,157.915 155.5,159C 154.552,159.483 153.552,159.649 152.5,159.5C 152.5,160.5 152.5,161.5 152.5,162.5C 152.167,163.167 151.833,163.833 151.5,164.5C 150.292,163.766 148.959,163.433 147.5,163.5C 145.154,160.965 142.487,160.298 139.5,161.5C 138.761,161.369 138.094,161.536 137.5,162C 138.268,164.369 139.435,166.535 141,168.5C 143.74,169.282 146.574,169.782 149.5,170C 148.584,170.278 147.918,170.778 147.5,171.5C 143.065,171.393 139.065,170.06 135.5,167.5C 134.994,168.824 133.661,169.491 131.5,169.5C 130.292,168.766 128.959,168.433 127.5,168.5C 127.5,166.833 127.5,165.167 127.5,163.5C 130.928,163.453 133.928,162.287 136.5,160C 135.167,159.667 133.833,159.333 132.5,159C 134.604,158.209 135.937,156.709 136.5,154.5C 138.747,153.626 141.08,153.292 143.5,153.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b3988a\",\n    d: \"M 139.5,161.5 C 142.487,160.298 145.154,160.965 147.5,163.5C 144.579,163.717 141.913,163.051 139.5,161.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#874c3b\",\n    d: \"M 179.5,161.5 C 181.485,161.859 182.151,162.692 181.5,164C 184.692,166.071 187.025,168.238 188.5,170.5C 184.147,170.956 182.647,172.956 184,176.5C 187.592,176.926 189.092,178.926 188.5,182.5C 194.533,184.999 200.867,186.666 207.5,187.5C 210.596,186.907 212.929,187.907 214.5,190.5C 213.333,190.833 212.167,191.167 211,191.5C 206.544,190.844 202.378,189.511 198.5,187.5C 195.198,185.256 191.531,183.756 187.5,183C 186.167,182 186.167,181 187.5,180C 186.956,179.283 186.289,178.783 185.5,178.5C 183.685,177.37 181.685,176.704 179.5,176.5C 177.781,175.978 176.448,174.978 175.5,173.5C 174.358,168.618 173.025,163.951 171.5,159.5C 171.866,158.305 172.699,157.639 174,157.5C 175.735,159.083 177.568,160.416 179.5,161.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#452e25\",\n    d: \"M 212.5,159.5 C 213.973,160.072 215.307,160.905 216.5,162C 214.014,162.705 214.014,163.538 216.5,164.5C 219.305,167.647 222.639,169.98 226.5,171.5C 226.611,172.117 226.944,172.617 227.5,173C 225.885,173.062 224.552,173.229 223.5,173.5C 215.889,171.591 212.222,166.925 212.5,159.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#969186\",\n    d: \"M 53.5,158.5 C 54.5,158.5 55.5,158.5 56.5,158.5C 57.8734,158.343 59.2068,158.51 60.5,159C 58.7444,159.202 57.0777,159.702 55.5,160.5C 56.8333,160.833 58.1667,161.167 59.5,161.5C 62.8167,160.947 66.15,160.614 69.5,160.5C 64.1228,162.703 58.6228,164.703 53,166.5C 50.8511,165.16 49.6845,165.827 49.5,168.5C 47.4254,166.792 45.2588,166.125 43,166.5C 39.3511,168.096 35.5178,169.096 31.5,169.5C 30.5525,168.022 29.2191,167.022 27.5,166.5C 36.502,165.132 45.502,163.632 54.5,162C 52.6269,161.047 52.2935,159.88 53.5,158.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b8ae98\",\n    d: \"M 89.5,157.5 C 91.7144,157.291 93.381,158.124 94.5,160C 92.1839,163.131 90.8506,166.631 90.5,170.5C 85.3694,170.606 84.2027,172.939 87,177.5C 88,176.833 89,176.167 90,175.5C 93.2879,175.658 96.7879,175.658 100.5,175.5C 96.2395,177.016 91.9061,178.349 87.5,179.5C 76.7017,180.86 66.0351,182.86 55.5,185.5C 56.0577,184.21 57.0577,183.377 58.5,183C 62.0189,182.605 65.3522,181.605 68.5,180C 68.1667,179.667 67.8333,179.333 67.5,179C 71.5,178.167 75.5,177.333 79.5,176.5C 77.2338,175.686 74.9005,175.186 72.5,175C 74.3211,173.257 76.3211,171.757 78.5,170.5C 79.487,167.232 79.8204,163.898 79.5,160.5C 78.209,160.737 77.209,160.404 76.5,159.5C 77.1667,159.5 77.8333,159.5 78.5,159.5C 82.1211,158.627 85.7878,157.961 89.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7b3e37\",\n    d: \"M 169.5,159.5 C 167.774,161.82 167.107,164.487 167.5,167.5C 164.833,168.833 162.167,168.833 159.5,167.5C 156.603,166.871 153.936,165.871 151.5,164.5C 151.833,163.833 152.167,163.167 152.5,162.5C 155.715,162.595 158.549,161.595 161,159.5C 161.106,160.794 162.106,161.461 164,161.5C 165.939,161.046 167.772,160.379 169.5,159.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8176\",\n    d: \"M 228.5,170.5 C 227.508,170.328 226.842,170.662 226.5,171.5C 222.639,169.98 219.305,167.647 216.5,164.5C 217.15,164.196 217.817,163.863 218.5,163.5C 222.317,165.386 225.65,167.719 228.5,170.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aca58e\",\n    d: \"M 76.5,159.5 C 77.209,160.404 78.209,160.737 79.5,160.5C 79.8204,163.898 79.487,167.232 78.5,170.5C 76.3211,171.757 74.3211,173.257 72.5,175C 74.9005,175.186 77.2338,175.686 79.5,176.5C 75.5,177.333 71.5,178.167 67.5,179C 67.8333,179.333 68.1667,179.667 68.5,180C 65.3522,181.605 62.0189,182.605 58.5,183C 57.0577,183.377 56.0577,184.21 55.5,185.5C 53.8333,185.5 52.1667,185.5 50.5,185.5C 50.7373,186.791 50.404,187.791 49.5,188.5C 49.5,187.5 49.5,186.5 49.5,185.5C 40.5223,187.296 31.5223,188.962 22.5,190.5C 23.6085,189.71 24.9419,189.21 26.5,189C 25.376,188.751 24.376,188.251 23.5,187.5C 24.1667,187.167 24.8333,186.833 25.5,186.5C 38.0389,184.893 50.3723,182.393 62.5,179C 57.8537,175.855 53.5203,172.355 49.5,168.5C 49.6845,165.827 50.8511,165.16 53,166.5C 58.6228,164.703 64.1228,162.703 69.5,160.5C 71.717,159.631 74.0504,159.298 76.5,159.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a3857a\",\n    d: \"M 147.5,163.5 C 148.959,163.433 150.292,163.766 151.5,164.5C 153.936,165.871 156.603,166.871 159.5,167.5C 159.5,168.5 159.5,169.5 159.5,170.5C 157.708,170.634 156.042,170.301 154.5,169.5C 153.167,169.5 151.833,169.5 150.5,169.5C 149.956,167.284 148.956,165.284 147.5,163.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a4030\",\n    d: \"M 194.5,159.5 C 195.609,160.29 196.942,160.79 198.5,161C 198.167,161.333 197.833,161.667 197.5,162C 199.286,162.196 200.619,163.029 201.5,164.5C 203.396,165.466 205.396,165.799 207.5,165.5C 207.5,166.5 207.5,167.5 207.5,168.5C 209.933,168.273 211.599,169.273 212.5,171.5C 205.518,169.342 198.518,167.842 191.5,167C 192.167,167.333 192.833,167.667 193.5,168C 192.1,169.438 190.433,170.271 188.5,170.5C 187.025,168.238 184.692,166.071 181.5,164C 182.151,162.692 181.485,161.859 179.5,161.5C 179.389,160.883 179.056,160.383 178.5,160C 183.823,159.501 189.156,159.334 194.5,159.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a1766c\",\n    d: \"M 169.5,159.5 C 170.167,159.5 170.833,159.5 171.5,159.5C 173.025,163.951 174.358,168.618 175.5,173.5C 173.214,173.405 171.214,172.738 169.5,171.5C 168.402,170.603 168.402,169.77 169.5,169C 168.584,168.722 167.918,168.222 167.5,167.5C 167.107,164.487 167.774,161.82 169.5,159.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#715956\",\n    d: \"M 159.5,167.5 C 162.167,168.833 164.833,168.833 167.5,167.5C 167.918,168.222 168.584,168.722 169.5,169C 168.402,169.77 168.402,170.603 169.5,171.5C 167.83,171.249 166.33,170.582 165,169.5C 164.355,170.646 163.522,171.646 162.5,172.5C 162.957,173.298 163.624,173.631 164.5,173.5C 164.5,174.167 164.5,174.833 164.5,175.5C 161.838,174.501 159.172,173.501 156.5,172.5C 155.081,171.549 153.415,171.216 151.5,171.5C 152.5,170.833 153.5,170.167 154.5,169.5C 156.042,170.301 157.708,170.634 159.5,170.5C 159.5,169.5 159.5,168.5 159.5,167.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f3e37\",\n    d: \"M 139.5,161.5 C 141.913,163.051 144.579,163.717 147.5,163.5C 148.956,165.284 149.956,167.284 150.5,169.5C 151.833,169.5 153.167,169.5 154.5,169.5C 153.5,170.167 152.5,170.833 151.5,171.5C 150.833,171.5 150.167,171.5 149.5,171.5C 148.833,171.5 148.167,171.5 147.5,171.5C 147.918,170.778 148.584,170.278 149.5,170C 146.574,169.782 143.74,169.282 141,168.5C 139.435,166.535 138.268,164.369 137.5,162C 138.094,161.536 138.761,161.369 139.5,161.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#874731\",\n    d: \"M 212.5,171.5 C 216.536,172.027 220.203,173.36 223.5,175.5C 223.663,177.857 223.497,180.19 223,182.5C 222.292,183.381 221.458,184.047 220.5,184.5C 218.265,184.795 216.265,184.461 214.5,183.5C 213.972,182.279 213.305,181.113 212.5,180C 209.278,179.65 206.612,178.316 204.5,176C 201.833,175.333 199.167,175.333 196.5,176C 198.257,178.846 200.257,181.512 202.5,184C 204.134,184.494 205.801,184.66 207.5,184.5C 207.5,185.5 207.5,186.5 207.5,187.5C 200.867,186.666 194.533,184.999 188.5,182.5C 189.092,178.926 187.592,176.926 184,176.5C 182.647,172.956 184.147,170.956 188.5,170.5C 190.433,170.271 192.1,169.438 193.5,168C 192.833,167.667 192.167,167.333 191.5,167C 198.518,167.842 205.518,169.342 212.5,171.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#362d30\",\n    d: \"M 169.5,171.5 C 171.214,172.738 173.214,173.405 175.5,173.5C 176.448,174.978 177.781,175.978 179.5,176.5C 179.5,176.833 179.5,177.167 179.5,177.5C 174.5,176.167 169.5,174.833 164.5,173.5C 163.624,173.631 162.957,173.298 162.5,172.5C 163.522,171.646 164.355,170.646 165,169.5C 166.33,170.582 167.83,171.249 169.5,171.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#252422\",\n    d: \"M 234.5,160.5 C 234.5,169.5 234.5,178.5 234.5,187.5C 233.833,187.833 233.167,188.167 232.5,188.5C 228.224,188.569 224.224,189.569 220.5,191.5C 220.833,187.65 222.666,184.65 226,182.5C 226.497,180.19 226.663,177.857 226.5,175.5C 225.5,175.5 224.5,175.5 223.5,175.5C 223.5,174.833 223.5,174.167 223.5,173.5C 224.552,173.229 225.885,173.062 227.5,173C 226.944,172.617 226.611,172.117 226.5,171.5C 226.842,170.662 227.508,170.328 228.5,170.5C 229.674,169.486 230.34,168.153 230.5,166.5C 230.622,163.708 231.956,161.708 234.5,160.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#818173\",\n    d: \"M 25.5,166.5 C 26.1667,166.5 26.8333,166.5 27.5,166.5C 29.2191,167.022 30.5525,168.022 31.5,169.5C 27.6877,170.324 23.6877,170.824 19.5,171C 23.3036,172.05 27.1369,172.884 31,173.5C 31.8141,175.902 31.6474,178.235 30.5,180.5C 29.1552,181.347 28.1552,182.513 27.5,184C 25.8876,184.72 24.3876,184.554 23,183.5C 22,186.167 21,186.167 20,183.5C 15.6341,184.773 11.3008,186.106 7,187.5C 6.33333,186.833 5.66667,186.167 5,185.5C 3.55575,187.155 1.72241,187.822 -0.5,187.5C -0.5,181.833 -0.5,176.167 -0.5,170.5C 8.13697,169.004 16.8036,167.67 25.5,166.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e1c6bd\",\n    d: \"M 149.5,171.5 C 150.167,171.5 150.833,171.5 151.5,171.5C 153.415,171.216 155.081,171.549 156.5,172.5C 154.046,172.321 151.879,172.987 150,174.5C 147.385,172.871 145.218,173.204 143.5,175.5C 133.885,176.505 124.385,177.838 115,179.5C 113.615,179.486 112.449,179.152 111.5,178.5C 114.789,177.626 118.123,176.959 121.5,176.5C 131.02,175.355 140.354,173.688 149.5,171.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8b79\",\n    d: \"M 49.5,168.5 C 53.5203,172.355 57.8537,175.855 62.5,179C 50.3723,182.393 38.0389,184.893 25.5,186.5C 24.8333,186.833 24.1667,187.167 23.5,187.5C 24.376,188.251 25.376,188.751 26.5,189C 24.9419,189.21 23.6085,189.71 22.5,190.5C 22.5,191.167 22.5,191.833 22.5,192.5C 14.7885,193.174 7.12185,194.174 -0.5,195.5C -0.5,192.833 -0.5,190.167 -0.5,187.5C 1.72241,187.822 3.55575,187.155 5,185.5C 5.66667,186.167 6.33333,186.833 7,187.5C 11.3008,186.106 15.6341,184.773 20,183.5C 21,186.167 22,186.167 23,183.5C 24.3876,184.554 25.8876,184.72 27.5,184C 28.1552,182.513 29.1552,181.347 30.5,180.5C 31.6474,178.235 31.8141,175.902 31,173.5C 27.1369,172.884 23.3036,172.05 19.5,171C 23.6877,170.824 27.6877,170.324 31.5,169.5C 35.5178,169.096 39.3511,168.096 43,166.5C 45.2588,166.125 47.4254,166.792 49.5,168.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#755f59\",\n    d: \"M 118.5,175.5 C 119.5,175.5 120.5,175.5 121.5,175.5C 121.5,175.833 121.5,176.167 121.5,176.5C 118.123,176.959 114.789,177.626 111.5,178.5C 110.833,178.5 110.167,178.5 109.5,178.5C 107.5,178.833 105.5,179.167 103.5,179.5C 108.114,177.17 113.114,175.836 118.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#eee6e5\",\n    d: \"M 156.5,172.5 C 159.172,173.501 161.838,174.501 164.5,175.5C 171.014,177.781 177.347,180.448 183.5,183.5C 181.097,185.91 178.43,187.91 175.5,189.5C 170.077,189.524 164.743,190.19 159.5,191.5C 154.657,191.117 149.991,191.783 145.5,193.5C 144.833,193.167 144.167,192.833 143.5,192.5C 148.89,190.618 154.223,188.951 159.5,187.5C 165.407,185.741 171.407,183.907 177.5,182C 170.873,182.818 164.206,183.652 157.5,184.5C 150.736,183.343 144.07,184.01 137.5,186.5C 137.611,185.883 137.944,185.383 138.5,185C 136.527,184.505 134.527,184.338 132.5,184.5C 133.429,183.685 134.429,182.852 135.5,182C 139.928,181.943 144.261,181.776 148.5,181.5C 148.5,180.167 148.5,178.833 148.5,177.5C 145.167,177.5 141.833,177.5 138.5,177.5C 140.167,176.833 141.833,176.167 143.5,175.5C 145.218,173.204 147.385,172.871 150,174.5C 151.879,172.987 154.046,172.321 156.5,172.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a69589\",\n    d: \"M 179.5,177.5 C 179.5,177.167 179.5,176.833 179.5,176.5C 181.685,176.704 183.685,177.37 185.5,178.5C 183.477,179.521 181.477,179.188 179.5,177.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a8968f\",\n    d: \"M 118.5,175.5 C 113.114,175.836 108.114,177.17 103.5,179.5C 100.784,179.678 98.1168,180.178 95.5,181C 95.8333,181.333 96.1667,181.667 96.5,182C 94.0261,182.037 92.0261,182.87 90.5,184.5C 89.5266,184.013 88.5266,183.513 87.5,183C 90.9152,180.928 90.9152,179.761 87.5,179.5C 91.9061,178.349 96.2395,177.016 100.5,175.5C 105.871,175.162 111.204,174.495 116.5,173.5C 117.713,173.747 118.38,174.414 118.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#645e5f\",\n    d: \"M 164.5,173.5 C 169.5,174.833 174.5,176.167 179.5,177.5C 181.477,179.188 183.477,179.521 185.5,178.5C 186.289,178.783 186.956,179.283 187.5,180C 186.167,181 186.167,182 187.5,183C 191.531,183.756 195.198,185.256 198.5,187.5C 198.5,188.167 198.5,188.833 198.5,189.5C 193.336,187.89 188.336,185.89 183.5,183.5C 177.347,180.448 171.014,177.781 164.5,175.5C 164.5,174.833 164.5,174.167 164.5,173.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#eddcda\",\n    d: \"M 143.5,175.5 C 141.833,176.167 140.167,176.833 138.5,177.5C 137.167,177.5 135.833,177.5 134.5,177.5C 134.5,178.5 134.5,179.5 134.5,180.5C 128.794,180.171 123.128,180.505 117.5,181.5C 118.665,182.584 119.998,183.417 121.5,184C 125.152,184.499 128.818,184.665 132.5,184.5C 134.527,184.338 136.527,184.505 138.5,185C 137.944,185.383 137.611,185.883 137.5,186.5C 135.473,186.338 133.473,186.505 131.5,187C 131.043,187.414 130.709,187.914 130.5,188.5C 132.743,189.474 135.076,189.808 137.5,189.5C 134.411,190.785 131.078,191.451 127.5,191.5C 126.448,189.744 124.781,189.077 122.5,189.5C 124.042,188.837 125.709,188.17 127.5,187.5C 120.88,184.894 114.213,184.228 107.5,185.5C 104.595,187.14 102.262,186.473 100.5,183.5C 100.709,182.914 101.043,182.414 101.5,182C 103.833,181.667 106.167,181.333 108.5,181C 109.252,180.329 109.586,179.496 109.5,178.5C 110.167,178.5 110.833,178.5 111.5,178.5C 112.449,179.152 113.615,179.486 115,179.5C 124.385,177.838 133.885,176.505 143.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d7c5bf\",\n    d: \"M 109.5,178.5 C 109.586,179.496 109.252,180.329 108.5,181C 106.167,181.333 103.833,181.667 101.5,182C 101.043,182.414 100.709,182.914 100.5,183.5C 102.262,186.473 104.595,187.14 107.5,185.5C 107.047,186.458 106.381,187.292 105.5,188C 105.833,188.333 106.167,188.667 106.5,189C 111.155,189.499 115.821,189.666 120.5,189.5C 118.975,191.036 116.975,192.036 114.5,192.5C 116.045,193.452 117.712,193.785 119.5,193.5C 118.5,194.167 117.5,194.833 116.5,195.5C 116.5,196.167 116.5,196.833 116.5,197.5C 115.167,198.167 113.833,198.833 112.5,199.5C 106.945,195.277 101.611,191.777 96.5,189C 94.3162,187.637 92.3162,186.137 90.5,184.5C 92.0261,182.87 94.0261,182.037 96.5,182C 96.1667,181.667 95.8333,181.333 95.5,181C 98.1168,180.178 100.784,179.678 103.5,179.5C 105.5,179.167 107.5,178.833 109.5,178.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f3d9bb\",\n    d: \"M 138.5,177.5 C 141.833,177.5 145.167,177.5 148.5,177.5C 148.5,178.833 148.5,180.167 148.5,181.5C 144.261,181.776 139.928,181.943 135.5,182C 134.429,182.852 133.429,183.685 132.5,184.5C 128.818,184.665 125.152,184.499 121.5,184C 119.998,183.417 118.665,182.584 117.5,181.5C 123.128,180.505 128.794,180.171 134.5,180.5C 134.5,179.5 134.5,178.5 134.5,177.5C 135.833,177.5 137.167,177.5 138.5,177.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7b4b3a\",\n    d: \"M 214.5,183.5 C 212.442,182.067 210.108,181.4 207.5,181.5C 205.948,180.378 204.282,179.878 202.5,180C 204.24,181.517 205.906,183.017 207.5,184.5C 205.801,184.66 204.134,184.494 202.5,184C 200.257,181.512 198.257,178.846 196.5,176C 199.167,175.333 201.833,175.333 204.5,176C 206.612,178.316 209.278,179.65 212.5,180C 213.305,181.113 213.972,182.279 214.5,183.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#342627\",\n    d: \"M 80.5,186.5 C 78.2181,185.61 75.8848,185.444 73.5,186C 56.2734,191.141 38.9401,195.308 21.5,198.5C 21.1667,198.5 20.8333,198.5 20.5,198.5C 13.5212,199.941 6.52123,201.274 -0.5,202.5C -0.5,201.5 -0.5,200.5 -0.5,199.5C 8.37583,197.778 17.0425,195.778 25.5,193.5C 30.7242,192.073 36.0576,191.073 41.5,190.5C 55.8255,188.023 70.1588,185.356 84.5,182.5C 85.9317,182.733 86.4317,183.4 86,184.5C 84.5557,186.155 82.7224,186.822 80.5,186.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d4a8b2\",\n    d: \"M 159.5,187.5 C 145.14,189.98 130.806,192.647 116.5,195.5C 117.5,194.833 118.5,194.167 119.5,193.5C 122.33,193.306 124.996,192.639 127.5,191.5C 131.078,191.451 134.411,190.785 137.5,189.5C 138.167,189.5 138.833,189.5 139.5,189.5C 143.615,188.49 147.615,187.49 151.5,186.5C 153.685,186.296 155.685,185.63 157.5,184.5C 164.206,183.652 170.873,182.818 177.5,182C 171.407,183.907 165.407,185.741 159.5,187.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f1acab\",\n    d: \"M 122.5,189.5 C 121.833,189.5 121.167,189.5 120.5,189.5C 115.821,189.666 111.155,189.499 106.5,189C 106.167,188.667 105.833,188.333 105.5,188C 106.381,187.292 107.047,186.458 107.5,185.5C 114.213,184.228 120.88,184.894 127.5,187.5C 125.709,188.17 124.042,188.837 122.5,189.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e7dae2\",\n    d: \"M 151.5,186.5 C 147.615,187.49 143.615,188.49 139.5,189.5C 140.347,188.034 141.68,187.2 143.5,187C 146.146,186.503 148.813,186.336 151.5,186.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#acdacd\",\n    d: \"M 157.5,184.5 C 155.685,185.63 153.685,186.296 151.5,186.5C 148.813,186.336 146.146,186.503 143.5,187C 141.68,187.2 140.347,188.034 139.5,189.5C 138.833,189.5 138.167,189.5 137.5,189.5C 135.076,189.808 132.743,189.474 130.5,188.5C 130.709,187.914 131.043,187.414 131.5,187C 133.473,186.505 135.473,186.338 137.5,186.5C 144.07,184.01 150.736,183.343 157.5,184.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b5d1c0\",\n    d: \"M 120.5,189.5 C 121.167,189.5 121.833,189.5 122.5,189.5C 124.781,189.077 126.448,189.744 127.5,191.5C 124.996,192.639 122.33,193.306 119.5,193.5C 117.712,193.785 116.045,193.452 114.5,192.5C 116.975,192.036 118.975,191.036 120.5,189.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ddd9ca\",\n    d: \"M 49.5,188.5 C 46.6697,188.963 44.003,189.629 41.5,190.5C 36.0576,191.073 30.7242,192.073 25.5,193.5C 24.209,193.737 23.209,193.404 22.5,192.5C 22.5,191.833 22.5,191.167 22.5,190.5C 31.5223,188.962 40.5223,187.296 49.5,185.5C 49.5,186.5 49.5,187.5 49.5,188.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#897e78\",\n    d: \"M 87.5,179.5 C 90.9152,179.761 90.9152,180.928 87.5,183C 88.5266,183.513 89.5266,184.013 90.5,184.5C 92.3162,186.137 94.3162,187.637 96.5,189C 101.611,191.777 106.945,195.277 112.5,199.5C 119.948,204.87 127.282,210.203 134.5,215.5C 134.389,216.117 134.056,216.617 133.5,217C 135.455,217.953 137.122,219.287 138.5,221C 136.109,221.691 136.109,222.691 138.5,224C 136.035,223.435 133.702,222.268 131.5,220.5C 129.803,221.364 128.637,222.697 128,224.5C 128.046,222.687 127.88,221.021 127.5,219.5C 122.139,217.132 118.139,213.465 115.5,208.5C 116.332,207.671 115.999,206.838 114.5,206C 111.941,204.223 109.274,202.723 106.5,201.5C 104.139,200.565 101.972,199.232 100,197.5C 98.9153,199.657 97.7487,199.824 96.5,198C 97.1667,197.667 97.8333,197.333 98.5,197C 96.9716,195.639 95.3049,194.472 93.5,193.5C 92.5224,193.977 91.6891,194.643 91,195.5C 90.3292,194.748 89.4959,194.414 88.5,194.5C 87.1325,193.694 85.7992,192.694 84.5,191.5C 83.8333,192.833 83.1667,194.167 82.5,195.5C 82.6017,193.233 82.2683,190.9 81.5,188.5C 81.1667,187.833 80.8333,187.167 80.5,186.5C 82.7224,186.822 84.5557,186.155 86,184.5C 86.4317,183.4 85.9317,182.733 84.5,182.5C 70.1588,185.356 55.8255,188.023 41.5,190.5C 44.003,189.629 46.6697,188.963 49.5,188.5C 50.404,187.791 50.7373,186.791 50.5,185.5C 52.1667,185.5 53.8333,185.5 55.5,185.5C 66.0351,182.86 76.7017,180.86 87.5,179.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#443833\",\n    d: \"M 223.5,175.5 C 224.5,175.5 225.5,175.5 226.5,175.5C 226.663,177.857 226.497,180.19 226,182.5C 222.666,184.65 220.833,187.65 220.5,191.5C 224.224,189.569 228.224,188.569 232.5,188.5C 231.833,189.833 231.167,191.167 230.5,192.5C 227.876,193.076 227.209,194.41 228.5,196.5C 225.758,196.964 223.258,197.297 221,197.5C 217.225,195.696 213.392,194.029 209.5,192.5C 208.817,192.863 208.15,193.196 207.5,193.5C 205.5,192.833 203.5,192.167 201.5,191.5C 200.71,190.599 199.71,189.932 198.5,189.5C 198.5,188.833 198.5,188.167 198.5,187.5C 202.378,189.511 206.544,190.844 211,191.5C 212.167,191.167 213.333,190.833 214.5,190.5C 212.929,187.907 210.596,186.907 207.5,187.5C 207.5,186.5 207.5,185.5 207.5,184.5C 205.906,183.017 204.24,181.517 202.5,180C 204.282,179.878 205.948,180.378 207.5,181.5C 210.792,183.776 214.125,186.109 217.5,188.5C 218.984,187.533 219.984,186.2 220.5,184.5C 221.458,184.047 222.292,183.381 223,182.5C 223.497,180.19 223.663,177.857 223.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#876959\",\n    d: \"M 207.5,181.5 C 210.108,181.4 212.442,182.067 214.5,183.5C 216.265,184.461 218.265,184.795 220.5,184.5C 219.984,186.2 218.984,187.533 217.5,188.5C 214.125,186.109 210.792,183.776 207.5,181.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#885b43\",\n    d: \"M 234.5,187.5 C 234.5,190.167 234.5,192.833 234.5,195.5C 232.027,195.912 230.694,194.912 230.5,192.5C 231.167,191.167 231.833,189.833 232.5,188.5C 233.167,188.167 233.833,187.833 234.5,187.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f4dbe0\",\n    d: \"M 159.5,187.5 C 154.223,188.951 148.89,190.618 143.5,192.5C 144.167,192.833 144.833,193.167 145.5,193.5C 149.991,191.783 154.657,191.117 159.5,191.5C 159.5,192.167 159.5,192.833 159.5,193.5C 160.398,194.158 161.398,194.824 162.5,195.5C 158.122,197.761 153.455,198.761 148.5,198.5C 151,196.864 153.666,195.364 156.5,194C 152.109,193.842 147.776,194.342 143.5,195.5C 143.082,194.778 142.416,194.278 141.5,194C 138.167,193.333 134.833,193.333 131.5,194C 133.955,194.394 135.955,195.56 137.5,197.5C 136.332,199.217 134.665,199.884 132.5,199.5C 135.625,198.9 135.958,197.733 133.5,196C 131.527,195.505 129.527,195.338 127.5,195.5C 127.232,197.099 127.566,198.432 128.5,199.5C 128.5,199.833 128.5,200.167 128.5,200.5C 126.577,200.205 124.91,199.372 123.5,198C 121.19,197.503 118.857,197.337 116.5,197.5C 116.5,196.833 116.5,196.167 116.5,195.5C 130.806,192.647 145.14,189.98 159.5,187.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#89c3d5\",\n    d: \"M 175.5,189.5 C 174.152,191.48 172.152,192.647 169.5,193C 166.183,193.498 162.85,193.665 159.5,193.5C 159.5,192.833 159.5,192.167 159.5,191.5C 164.743,190.19 170.077,189.524 175.5,189.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ece2e2\",\n    d: \"M 183.5,183.5 C 188.336,185.89 193.336,187.89 198.5,189.5C 199.71,189.932 200.71,190.599 201.5,191.5C 197.154,191.666 192.821,191.499 188.5,191C 188,190.5 187.5,190 187,189.5C 184.931,190.264 182.764,190.764 180.5,191C 182.134,191.494 183.801,191.66 185.5,191.5C 185.799,193.604 185.466,195.604 184.5,197.5C 183.583,198.127 182.583,198.461 181.5,198.5C 175.63,200.201 169.63,201.368 163.5,202C 162.624,203.585 161.291,204.585 159.5,205C 152.389,205.735 145.389,205.235 138.5,203.5C 138.5,202.5 138.5,201.5 138.5,200.5C 135.167,200.5 131.833,200.5 128.5,200.5C 128.5,200.167 128.5,199.833 128.5,199.5C 129.833,199.5 131.167,199.5 132.5,199.5C 134.665,199.884 136.332,199.217 137.5,197.5C 135.955,195.56 133.955,194.394 131.5,194C 134.833,193.333 138.167,193.333 141.5,194C 142.416,194.278 143.082,194.778 143.5,195.5C 143.5,196.5 143.5,197.5 143.5,198.5C 145.167,198.5 146.833,198.5 148.5,198.5C 153.455,198.761 158.122,197.761 162.5,195.5C 161.398,194.824 160.398,194.158 159.5,193.5C 162.85,193.665 166.183,193.498 169.5,193C 172.152,192.647 174.152,191.48 175.5,189.5C 178.43,187.91 181.097,185.91 183.5,183.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#615553\",\n    d: \"M 22.5,192.5 C 23.209,193.404 24.209,193.737 25.5,193.5C 17.0425,195.778 8.37583,197.778 -0.5,199.5C -0.5,198.167 -0.5,196.833 -0.5,195.5C 7.12185,194.174 14.7885,193.174 22.5,192.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c0ada3\",\n    d: \"M 80.5,186.5 C 80.8333,187.167 81.1667,187.833 81.5,188.5C 78.1501,188.335 74.8168,188.502 71.5,189C 65.8586,190.613 60.3586,192.447 55,194.5C 53.4385,194.397 51.9385,194.063 50.5,193.5C 48.4404,195.196 46.1071,196.363 43.5,197C 36.2066,198.899 28.8733,199.399 21.5,198.5C 38.9401,195.308 56.2734,191.141 73.5,186C 75.8848,185.444 78.2181,185.61 80.5,186.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e4b8c5\",\n    d: \"M 148.5,198.5 C 146.833,198.5 145.167,198.5 143.5,198.5C 143.5,197.5 143.5,196.5 143.5,195.5C 147.776,194.342 152.109,193.842 156.5,194C 153.666,195.364 151,196.864 148.5,198.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#987e63\",\n    d: \"M 230.5,192.5 C 230.694,194.912 232.027,195.912 234.5,195.5C 234.5,196.833 234.5,198.167 234.5,199.5C 232.784,199.371 231.117,199.038 229.5,198.5C 229.167,197.833 228.833,197.167 228.5,196.5C 227.209,194.41 227.876,193.076 230.5,192.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f2afc9\",\n    d: \"M 132.5,199.5 C 131.167,199.5 129.833,199.5 128.5,199.5C 127.566,198.432 127.232,197.099 127.5,195.5C 129.527,195.338 131.527,195.505 133.5,196C 135.958,197.733 135.625,198.9 132.5,199.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6f6e6b\",\n    d: \"M 228.5,196.5 C 228.833,197.167 229.167,197.833 229.5,198.5C 227.801,198.34 226.134,198.506 224.5,199C 227.531,201.015 230.864,202.181 234.5,202.5C 234.5,203.5 234.5,204.5 234.5,205.5C 225.136,202.27 216.136,198.27 207.5,193.5C 208.15,193.196 208.817,192.863 209.5,192.5C 213.392,194.029 217.225,195.696 221,197.5C 223.258,197.297 225.758,196.964 228.5,196.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d8cac4\",\n    d: \"M 81.5,188.5 C 82.2683,190.9 82.6017,193.233 82.5,195.5C 83.1667,194.167 83.8333,192.833 84.5,191.5C 85.7992,192.694 87.1325,193.694 88.5,194.5C 88.4828,196.565 88.1495,198.565 87.5,200.5C 85.1346,201.008 82.8013,201.675 80.5,202.5C 77.7023,198.567 76.369,199.234 76.5,204.5C 73.6433,205.333 70.9766,206.666 68.5,208.5C 70.0453,209.452 71.712,209.785 73.5,209.5C 70.2613,210.49 66.928,211.49 63.5,212.5C 63.5,211.167 62.8333,210.5 61.5,210.5C 61.0825,209.778 60.4158,209.278 59.5,209C 60.8333,208.667 62.1667,208.333 63.5,208C 62.9747,207.308 62.3081,206.808 61.5,206.5C 56.8999,207.443 52.2332,207.777 47.5,207.5C 47.5,207.167 47.5,206.833 47.5,206.5C 50.5788,206.74 53.5788,206.407 56.5,205.5C 56.8333,205 57.1667,204.5 57.5,204C 56.556,202.523 55.2226,201.523 53.5,201C 47.796,200.47 42.1294,200.803 36.5,202C 34.256,202.05 32.5893,202.883 31.5,204.5C 24.2971,204.312 17.2971,205.312 10.5,207.5C 10.9059,209.109 10.9059,210.443 10.5,211.5C 7.05004,209.776 3.38337,209.109 -0.5,209.5C -0.5,208.5 -0.5,207.5 -0.5,206.5C 2.23769,206.149 4.90436,205.482 7.5,204.5C 8.38568,203.675 8.71901,202.675 8.5,201.5C 12.4631,202.44 16.4631,202.607 20.5,202C 21.6843,200.855 21.6843,199.688 20.5,198.5C 20.8333,198.5 21.1667,198.5 21.5,198.5C 28.8733,199.399 36.2066,198.899 43.5,197C 46.1071,196.363 48.4404,195.196 50.5,193.5C 51.9385,194.063 53.4385,194.397 55,194.5C 60.3586,192.447 65.8586,190.613 71.5,189C 74.8168,188.502 78.1501,188.335 81.5,188.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e5bcc1\",\n    d: \"M 63.5,196.5 C 62.3998,197.558 61.0664,198.392 59.5,199C 65.2179,199.74 70.8846,199.573 76.5,198.5C 73.6693,203.099 70.0026,203.766 65.5,200.5C 63.1994,201.396 60.8661,201.562 58.5,201C 57.0745,199.286 57.4078,197.953 59.5,197C 60.7932,196.51 62.1266,196.343 63.5,196.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e493ab\",\n    d: \"M 76.5,198.5 C 70.8846,199.573 65.2179,199.74 59.5,199C 61.0664,198.392 62.3998,197.558 63.5,196.5C 68.323,194.93 72.9897,195.264 77.5,197.5C 77.3764,198.107 77.0431,198.44 76.5,198.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#392d24\",\n    d: \"M 229.5,198.5 C 231.117,199.038 232.784,199.371 234.5,199.5C 234.5,200.5 234.5,201.5 234.5,202.5C 230.864,202.181 227.531,201.015 224.5,199C 226.134,198.506 227.801,198.34 229.5,198.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e4bec5\",\n    d: \"M 47.5,206.5 C 47.5,206.833 47.5,207.167 47.5,207.5C 46.5,207.5 45.5,207.5 44.5,207.5C 42.8333,207.5 41.1667,207.5 39.5,207.5C 37.22,205.777 34.5533,205.111 31.5,205.5C 31.5,205.167 31.5,204.833 31.5,204.5C 32.5893,202.883 34.256,202.05 36.5,202C 42.1294,200.803 47.796,200.47 53.5,201C 55.2226,201.523 56.556,202.523 57.5,204C 57.1667,204.5 56.8333,205 56.5,205.5C 53.5788,206.407 50.5788,206.74 47.5,206.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#625956\",\n    d: \"M 106.5,201.5 C 109.274,202.723 111.941,204.223 114.5,206C 115.999,206.838 116.332,207.671 115.5,208.5C 112.19,206.518 109.19,204.185 106.5,201.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e6e3e0\",\n    d: \"M 116.5,197.5 C 118.857,197.337 121.19,197.503 123.5,198C 124.91,199.372 126.577,200.205 128.5,200.5C 131.833,200.5 135.167,200.5 138.5,200.5C 138.5,201.5 138.5,202.5 138.5,203.5C 145.389,205.235 152.389,205.735 159.5,205C 161.291,204.585 162.624,203.585 163.5,202C 169.63,201.368 175.63,200.201 181.5,198.5C 181.5,199.833 181.5,201.167 181.5,202.5C 179.435,202.483 177.435,202.15 175.5,201.5C 171.667,202.961 167.667,204.128 163.5,205C 160.668,206.908 161.001,207.741 164.5,207.5C 163.626,208.525 162.459,209.192 161,209.5C 159.699,208.107 158.199,207.607 156.5,208C 154.421,209.64 152.088,210.806 149.5,211.5C 148.575,212.357 147.908,213.357 147.5,214.5C 146.518,213.859 145.518,213.193 144.5,212.5C 144.167,212.833 143.833,213.167 143.5,213.5C 144.63,214.622 145.297,215.956 145.5,217.5C 144.469,218.355 143.303,219.022 142,219.5C 139.35,218.327 136.85,216.994 134.5,215.5C 127.282,210.203 119.948,204.87 112.5,199.5C 113.833,198.833 115.167,198.167 116.5,197.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e293ad\",\n    d: \"M 47.5,206.5 C 44.797,206.048 42.1303,205.381 39.5,204.5C 39.7093,203.914 40.0426,203.414 40.5,203C 44.1767,202.282 47.8434,201.949 51.5,202C 51.1667,202.333 50.8333,202.667 50.5,203C 52.5,203.333 54.5,203.667 56.5,204C 53.4213,204.973 50.4213,205.806 47.5,206.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f2e2e4\",\n    d: \"M 189.5,210.5 C 179.604,212.808 169.604,214.474 159.5,215.5C 171.902,210.423 184.735,206.423 198,203.5C 200,202.833 200,202.167 198,201.5C 181.131,205.825 164.631,210.825 148.5,216.5C 147.662,216.158 147.328,215.492 147.5,214.5C 147.908,213.357 148.575,212.357 149.5,211.5C 152.088,210.806 154.421,209.64 156.5,208C 158.199,207.607 159.699,208.107 161,209.5C 162.459,209.192 163.626,208.525 164.5,207.5C 168.011,206.336 171.677,205.336 175.5,204.5C 175.5,203.5 175.5,202.5 175.5,201.5C 177.435,202.15 179.435,202.483 181.5,202.5C 183.414,201.815 185.414,201.315 187.5,201C 188.833,200 188.833,199 187.5,198C 192.473,198.087 197.473,198.421 202.5,199C 204.531,199.632 206.198,200.799 207.5,202.5C 205.901,204.729 203.901,205.062 201.5,203.5C 200.571,204.689 200.238,206.022 200.5,207.5C 197.5,207.5 194.5,207.5 191.5,207.5C 191.715,209.179 191.048,210.179 189.5,210.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b4a797\",\n    d: \"M 20.5,198.5 C 21.6843,199.688 21.6843,200.855 20.5,202C 16.4631,202.607 12.4631,202.44 8.5,201.5C 8.71901,202.675 8.38568,203.675 7.5,204.5C 4.90436,205.482 2.23769,206.149 -0.5,206.5C -0.5,205.167 -0.5,203.833 -0.5,202.5C 6.52123,201.274 13.5212,199.941 20.5,198.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#99c9d3\",\n    d: \"M 175.5,201.5 C 175.5,202.5 175.5,203.5 175.5,204.5C 171.677,205.336 168.011,206.336 164.5,207.5C 161.001,207.741 160.668,206.908 163.5,205C 167.667,204.128 171.667,202.961 175.5,201.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#79bfac\",\n    d: \"M 76.5,204.5 C 79.188,204.166 81.5214,204.832 83.5,206.5C 80.3811,207.87 77.0477,208.87 73.5,209.5C 71.712,209.785 70.0453,209.452 68.5,208.5C 70.9766,206.666 73.6433,205.333 76.5,204.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d4cfbe\",\n    d: \"M 31.5,205.5 C 34.5533,205.111 37.22,205.777 39.5,207.5C 31.6566,209.815 23.6566,211.482 15.5,212.5C 15.5,211.5 15.5,210.5 15.5,209.5C 21.2337,208.811 26.567,207.478 31.5,205.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ddd4d1\",\n    d: \"M 116.5,216.5 C 116.895,219.523 115.895,220.523 113.5,219.5C 111.664,220.028 109.997,220.694 108.5,221.5C 107.926,220.472 107.593,219.472 107.5,218.5C 106.5,219.167 105.5,219.833 104.5,220.5C 99.8887,219.39 95.222,219.223 90.5,220C 89.6634,221.011 89.33,222.178 89.5,223.5C 89.1667,223.5 88.8333,223.5 88.5,223.5C 86.1582,224.211 85.8249,225.544 87.5,227.5C 87.6107,228.117 87.944,228.617 88.5,229C 86.4817,229.505 84.4817,230.005 82.5,230.5C 81.8968,228.321 81.2301,226.154 80.5,224C 82.4324,222.648 83.7657,220.815 84.5,218.5C 87.8755,218.142 90.5422,216.642 92.5,214C 95.914,213.703 99.2473,213.036 102.5,212C 100.603,210.89 98.7698,210.724 97,211.5C 94.6987,210.24 92.5321,208.907 90.5,207.5C 93.2316,206.033 93.0649,205.033 90,204.5C 87.7739,205.033 85.6073,205.7 83.5,206.5C 81.5214,204.832 79.188,204.166 76.5,204.5C 76.369,199.234 77.7023,198.567 80.5,202.5C 82.8013,201.675 85.1346,201.008 87.5,200.5C 88.5,200.5 89.5,200.5 90.5,200.5C 90.3433,199.127 90.51,197.793 91,196.5C 95.3202,198.261 96.4868,201.261 94.5,205.5C 95.325,206.386 96.325,206.719 97.5,206.5C 97.238,205.022 97.5713,203.689 98.5,202.5C 104.569,207.187 110.569,211.853 116.5,216.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#eab79a\",\n    d: \"M 39.5,207.5 C 41.1667,207.5 42.8333,207.5 44.5,207.5C 41.1484,211.405 36.815,213.405 31.5,213.5C 26.2468,212.48 20.9134,212.813 15.5,214.5C 15.5,213.833 15.5,213.167 15.5,212.5C 23.6566,211.482 31.6566,209.815 39.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c89ea8\",\n    d: \"M 159.5,215.5 C 156.198,216.294 152.865,216.96 149.5,217.5C 148.833,217.5 148.5,217.167 148.5,216.5C 164.631,210.825 181.131,205.825 198,201.5C 200,202.167 200,202.833 198,203.5C 184.735,206.423 171.902,210.423 159.5,215.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7fc3b0\",\n    d: \"M 61.5,210.5 C 62.8333,210.5 63.5,211.167 63.5,212.5C 62.791,213.404 61.791,213.737 60.5,213.5C 56.4444,213.777 52.4444,214.444 48.5,215.5C 47.8333,215.333 47.1667,215.167 46.5,215C 47.0779,213.583 48.0779,212.75 49.5,212.5C 53.2527,210.861 57.2527,210.194 61.5,210.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c18998\",\n    d: \"M 90.5,207.5 C 79.6953,210.292 69.0287,213.292 58.5,216.5C 55.8478,216.41 53.5145,217.076 51.5,218.5C 49.901,218.232 48.5676,218.566 47.5,219.5C 44.1667,220.167 40.8333,220.833 37.5,221.5C 37.5,220.833 37.5,220.167 37.5,219.5C 45.4632,218.238 53.1298,216.238 60.5,213.5C 61.791,213.737 62.791,213.404 63.5,212.5C 66.928,211.49 70.2613,210.49 73.5,209.5C 77.0477,208.87 80.3811,207.87 83.5,206.5C 85.6073,205.7 87.7739,205.033 90,204.5C 93.0649,205.033 93.2316,206.033 90.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d7bfa4\",\n    d: \"M 31.5,204.5 C 31.5,204.833 31.5,205.167 31.5,205.5C 26.567,207.478 21.2337,208.811 15.5,209.5C 15.5,210.5 15.5,211.5 15.5,212.5C 15.5,213.167 15.5,213.833 15.5,214.5C 20.67,215.466 26.0033,215.466 31.5,214.5C 27.9409,216.156 24.1076,217.156 20,217.5C 16.722,217.407 13.8887,216.407 11.5,214.5C 7.76428,215.078 3.76428,215.745 -0.5,216.5C -0.5,214.167 -0.5,211.833 -0.5,209.5C 3.38337,209.109 7.05004,209.776 10.5,211.5C 10.9059,210.443 10.9059,209.109 10.5,207.5C 17.2971,205.312 24.2971,204.312 31.5,204.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e4b87f\",\n    d: \"M 31.5,213.5 C 31.5,213.833 31.5,214.167 31.5,214.5C 26.0033,215.466 20.67,215.466 15.5,214.5C 20.9134,212.813 26.2468,212.48 31.5,213.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e9e6e2\",\n    d: \"M 189.5,210.5 C 193.427,213.436 197.76,215.936 202.5,218C 204.134,218.494 205.801,218.66 207.5,218.5C 207.238,217.022 207.571,215.689 208.5,214.5C 210.115,215.154 211.782,215.654 213.5,216C 209.5,216.667 209.5,217.333 213.5,218C 210.823,218.249 208.49,219.249 206.5,221C 207.5,221.333 208.5,221.667 209.5,222C 208.584,222.278 207.918,222.778 207.5,223.5C 207.5,224.5 207.5,225.5 207.5,226.5C 202.825,225.339 200.159,227.006 199.5,231.5C 194.615,231.248 189.781,231.581 185,232.5C 182.792,233.837 180.959,235.504 179.5,237.5C 179.747,238.713 180.414,239.38 181.5,239.5C 182.833,239.5 184.167,239.5 185.5,239.5C 185.433,240.959 185.766,242.292 186.5,243.5C 183.664,244.776 180.664,245.442 177.5,245.5C 172.934,243.269 168.934,240.269 165.5,236.5C 166.568,235.566 167.901,235.232 169.5,235.5C 170.211,231.684 169.045,228.684 166,226.5C 164.249,226.828 164.249,227.495 166,228.5C 167.177,232.492 165.677,234.158 161.5,233.5C 159.668,232.752 158.001,231.752 156.5,230.5C 160.572,226.515 160.072,222.849 155,219.5C 156.408,223.107 155.241,225.44 151.5,226.5C 149.5,225.167 147.5,223.833 145.5,222.5C 146.916,220.821 148.25,219.154 149.5,217.5C 152.865,216.96 156.198,216.294 159.5,215.5C 169.604,214.474 179.604,212.808 189.5,210.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#eae8e1\",\n    d: \"M 201.5,191.5 C 203.5,192.167 205.5,192.833 207.5,193.5C 216.136,198.27 225.136,202.27 234.5,205.5C 234.5,211.5 234.5,217.5 234.5,223.5C 231.656,224.172 229.156,225.505 227,227.5C 223.699,228.37 220.199,228.37 216.5,227.5C 216.67,226.178 216.337,225.011 215.5,224C 212.854,223.503 210.187,223.336 207.5,223.5C 207.918,222.778 208.584,222.278 209.5,222C 208.5,221.667 207.5,221.333 206.5,221C 208.49,219.249 210.823,218.249 213.5,218C 209.5,217.333 209.5,216.667 213.5,216C 211.782,215.654 210.115,215.154 208.5,214.5C 207.571,215.689 207.238,217.022 207.5,218.5C 205.801,218.66 204.134,218.494 202.5,218C 197.76,215.936 193.427,213.436 189.5,210.5C 191.048,210.179 191.715,209.179 191.5,207.5C 194.5,207.5 197.5,207.5 200.5,207.5C 200.238,206.022 200.571,204.689 201.5,203.5C 203.901,205.062 205.901,204.729 207.5,202.5C 206.198,200.799 204.531,199.632 202.5,199C 197.473,198.421 192.473,198.087 187.5,198C 188.833,199 188.833,200 187.5,201C 185.414,201.315 183.414,201.815 181.5,202.5C 181.5,201.167 181.5,199.833 181.5,198.5C 182.583,198.461 183.583,198.127 184.5,197.5C 185.466,195.604 185.799,193.604 185.5,191.5C 183.801,191.66 182.134,191.494 180.5,191C 182.764,190.764 184.931,190.264 187,189.5C 187.5,190 188,190.5 188.5,191C 192.821,191.499 197.154,191.666 201.5,191.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c1a9a9\",\n    d: \"M 221.5,204.5 C 223.288,204.215 224.955,204.548 226.5,205.5C 222.368,207.577 218.034,208.411 213.5,208C 216.401,207.125 219.068,205.958 221.5,204.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d0c5c6\",\n    d: \"M 49.5,212.5 C 48.0779,212.75 47.0779,213.583 46.5,215C 47.1667,215.167 47.8333,215.333 48.5,215.5C 52.4444,214.444 56.4444,213.777 60.5,213.5C 53.1298,216.238 45.4632,218.238 37.5,219.5C 36.1667,219.833 34.8333,220.167 33.5,220.5C 33.8333,219.5 34.5,218.833 35.5,218.5C 38.6741,218.048 39.0075,217.048 36.5,215.5C 36.7093,214.914 37.0426,214.414 37.5,214C 41.026,212.451 44.526,210.951 48,209.5C 49.0386,210.244 49.5386,211.244 49.5,212.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c9cbc1\",\n    d: \"M 61.5,210.5 C 57.2527,210.194 53.2527,210.861 49.5,212.5C 49.5386,211.244 49.0386,210.244 48,209.5C 44.526,210.951 41.026,212.451 37.5,214C 37.0426,214.414 36.7093,214.914 36.5,215.5C 39.0075,217.048 38.6741,218.048 35.5,218.5C 35.38,217.414 34.7133,216.747 33.5,216.5C 29.1645,216.962 25.1645,218.295 21.5,220.5C 23.396,221.466 25.396,221.799 27.5,221.5C 23.8171,223.25 19.8171,223.917 15.5,223.5C 10.1667,223.5 4.83333,223.5 -0.5,223.5C -0.5,221.167 -0.5,218.833 -0.5,216.5C 3.76428,215.745 7.76428,215.078 11.5,214.5C 13.8887,216.407 16.722,217.407 20,217.5C 24.1076,217.156 27.9409,216.156 31.5,214.5C 31.5,214.167 31.5,213.833 31.5,213.5C 36.815,213.405 41.1484,211.405 44.5,207.5C 45.5,207.5 46.5,207.5 47.5,207.5C 52.2332,207.777 56.8999,207.443 61.5,206.5C 62.3081,206.808 62.9747,207.308 63.5,208C 62.1667,208.333 60.8333,208.667 59.5,209C 60.4158,209.278 61.0825,209.778 61.5,210.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c0b2ac\",\n    d: \"M 147.5,214.5 C 147.328,215.492 147.662,216.158 148.5,216.5C 148.5,217.167 148.833,217.5 149.5,217.5C 148.25,219.154 146.916,220.821 145.5,222.5C 144.76,220.595 144.76,218.928 145.5,217.5C 145.297,215.956 144.63,214.622 143.5,213.5C 143.833,213.167 144.167,212.833 144.5,212.5C 145.518,213.193 146.518,213.859 147.5,214.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dcd7d1\",\n    d: \"M 51.5,218.5 C 53.5145,217.076 55.8478,216.41 58.5,216.5C 63.6719,216.234 64.3385,217.401 60.5,220C 63.4786,220.007 66.4786,219.673 69.5,219C 68.1667,218 66.8333,217 65.5,216C 69.485,214.77 73.485,213.603 77.5,212.5C 79.7085,212.569 81.7085,213.236 83.5,214.5C 80.5,215.167 77.5,215.833 74.5,216.5C 75.6685,218.217 77.3352,218.884 79.5,218.5C 79.5,219.5 79.5,220.5 79.5,221.5C 73.4035,221.71 67.5702,223.043 62,225.5C 59.1803,222.971 55.6803,220.637 51.5,218.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#78b7a2\",\n    d: \"M 35.5,218.5 C 34.5,218.833 33.8333,219.5 33.5,220.5C 31.5648,221.15 29.5648,221.483 27.5,221.5C 25.396,221.799 23.396,221.466 21.5,220.5C 25.1645,218.295 29.1645,216.962 33.5,216.5C 34.7133,216.747 35.38,217.414 35.5,218.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#edbcc8\",\n    d: \"M 92.5,227.5 C 90.8333,227.5 89.1667,227.5 87.5,227.5C 85.8249,225.544 86.1582,224.211 88.5,223.5C 88.5,224.5 88.5,225.5 88.5,226.5C 92.8156,225.274 97.1489,223.941 101.5,222.5C 97.74,221.402 94.0733,221.735 90.5,223.5C 90.8039,222.85 91.1373,222.183 91.5,221.5C 95.3803,220.205 99.2136,220.205 103,221.5C 103.507,222.996 103.007,224.163 101.5,225C 98.8333,225.333 96.1667,225.667 93.5,226C 92.944,226.383 92.6107,226.883 92.5,227.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ec9fb7\",\n    d: \"M 88.5,223.5 C 88.8333,223.5 89.1667,223.5 89.5,223.5C 89.8333,223.5 90.1667,223.5 90.5,223.5C 94.0733,221.735 97.74,221.402 101.5,222.5C 97.1489,223.941 92.8156,225.274 88.5,226.5C 88.5,225.5 88.5,224.5 88.5,223.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b28d96\",\n    d: \"M 37.5,219.5 C 37.5,220.167 37.5,220.833 37.5,221.5C 36.8333,221.833 36.1667,222.167 35.5,222.5C 23.521,225.498 11.521,228.498 -0.5,231.5C -0.5,230.833 -0.5,230.167 -0.5,229.5C 5.67904,229.225 11.0124,227.225 15.5,223.5C 19.8171,223.917 23.8171,223.25 27.5,221.5C 29.5648,221.483 31.5648,221.15 33.5,220.5C 34.8333,220.167 36.1667,219.833 37.5,219.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ddc7c7\",\n    d: \"M 35.5,222.5 C 39.5172,223.155 43.5172,223.489 47.5,223.5C 40.5452,224.047 33.5452,225.047 26.5,226.5C 20.0774,229.55 13.4108,231.217 6.5,231.5C 7.37598,232.251 8.37598,232.751 9.5,233C 6.19964,232.954 2.86631,232.788 -0.5,232.5C -0.5,232.167 -0.5,231.833 -0.5,231.5C 11.521,228.498 23.521,225.498 35.5,222.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8bb9a8\",\n    d: \"M -0.5,223.5 C 4.83333,223.5 10.1667,223.5 15.5,223.5C 11.0124,227.225 5.67904,229.225 -0.5,229.5C -0.5,227.5 -0.5,225.5 -0.5,223.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d4d1ca\",\n    d: \"M 47.5,219.5 C 47.3691,220.376 47.7025,221.043 48.5,221.5C 53.2525,222.651 54.7525,225.651 53,230.5C 52.1667,231.333 51.3333,232.167 50.5,233C 52.7885,233.822 55.1218,234.489 57.5,235C 58.9423,235.377 59.9423,236.21 60.5,237.5C 53.2085,239.819 45.8752,242.152 38.5,244.5C 36.8857,244.197 35.5523,243.53 34.5,242.5C 34.3601,240.876 35.0267,239.71 36.5,239C 34.8659,238.506 33.1992,238.34 31.5,238.5C 31.5,237.167 31.5,235.833 31.5,234.5C 31.5,233.833 31.5,233.167 31.5,232.5C 31.5,232.167 31.5,231.833 31.5,231.5C 37.8333,230.833 44.1667,230.167 50.5,229.5C 50.4208,228.07 50.7542,226.736 51.5,225.5C 50.6798,223.889 49.3464,223.222 47.5,223.5C 43.5172,223.489 39.5172,223.155 35.5,222.5C 36.1667,222.167 36.8333,221.833 37.5,221.5C 40.8333,220.833 44.1667,220.167 47.5,219.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cbd6b6\",\n    d: \"M 47.5,223.5 C 49.3464,223.222 50.6798,223.889 51.5,225.5C 50.7542,226.736 50.4208,228.07 50.5,229.5C 44.1667,230.167 37.8333,230.833 31.5,231.5C 36.622,229.973 41.9554,228.973 47.5,228.5C 47.5,227.5 47.5,226.5 47.5,225.5C 40.7613,225.512 34.0947,226.179 27.5,227.5C 27.5,229.167 27.5,230.833 27.5,232.5C 28.8333,232.5 30.1667,232.5 31.5,232.5C 31.5,233.167 31.5,233.833 31.5,234.5C 25.8103,234.464 24.1437,231.798 26.5,226.5C 33.5452,225.047 40.5452,224.047 47.5,223.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d3d7cb\",\n    d: \"M 99.5,227.5 C 103.394,227.186 106.727,228.353 109.5,231C 108.056,232.064 106.389,232.564 104.5,232.5C 101.74,232.242 99.4064,231.242 97.5,229.5C 96.2867,229.747 95.62,230.414 95.5,231.5C 94.2438,231.539 93.2438,231.039 92.5,230C 94.5692,228.477 96.9026,227.643 99.5,227.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f8782\",\n    d: \"M 106.5,201.5 C 109.19,204.185 112.19,206.518 115.5,208.5C 118.139,213.465 122.139,217.132 127.5,219.5C 127.88,221.021 128.046,222.687 128,224.5C 128.637,222.697 129.803,221.364 131.5,220.5C 133.702,222.268 136.035,223.435 138.5,224C 136.109,222.691 136.109,221.691 138.5,221C 137.122,219.287 135.455,217.953 133.5,217C 134.056,216.617 134.389,216.117 134.5,215.5C 136.85,216.994 139.35,218.327 142,219.5C 143.303,219.022 144.469,218.355 145.5,217.5C 144.76,218.928 144.76,220.595 145.5,222.5C 147.5,223.833 149.5,225.167 151.5,226.5C 153.349,227.593 155.016,228.926 156.5,230.5C 158.001,231.752 159.668,232.752 161.5,233.5C 162.795,234.488 164.128,235.488 165.5,236.5C 168.934,240.269 172.934,243.269 177.5,245.5C 180.075,246.787 182.741,248.121 185.5,249.5C 187.323,248.253 189.323,247.586 191.5,247.5C 189.481,248.933 187.314,250.267 185,251.5C 184.51,252.793 184.343,254.127 184.5,255.5C 185.833,255.5 187.167,255.5 188.5,255.5C 188.167,256.5 187.5,257.167 186.5,257.5C 185.448,257.649 184.448,257.483 183.5,257C 176.675,252.335 170.009,247.502 163.5,242.5C 163.167,241.5 162.5,240.833 161.5,240.5C 158.211,238.384 155.044,236.051 152,233.5C 151.333,234.167 151.333,234.833 152,235.5C 154.688,237.364 157.188,239.364 159.5,241.5C 159.351,242.552 159.517,243.552 160,244.5C 163.854,248.183 168.02,251.516 172.5,254.5C 173.363,255.726 173.363,257.06 172.5,258.5C 170.816,257.473 169.149,256.473 167.5,255.5C 161.862,249.92 155.695,244.92 149,240.5C 148.28,242.112 148.446,243.612 149.5,245C 148.437,246.188 147.103,246.688 145.5,246.5C 145.196,245.85 144.863,245.183 144.5,244.5C 146.279,242.807 146.779,240.807 146,238.5C 143.512,236.257 140.846,234.257 138,232.5C 137.506,234.134 137.34,235.801 137.5,237.5C 136.325,237.719 135.325,237.386 134.5,236.5C 135.52,234.568 135.687,232.568 135,230.5C 133.104,228.47 130.937,226.803 128.5,225.5C 127.833,227.167 127.167,228.833 126.5,230.5C 126.167,230.333 125.833,230.167 125.5,230C 125.273,227.631 125.107,225.131 125,222.5C 122.05,220.613 119.216,218.613 116.5,216.5C 110.569,211.853 104.569,207.187 98.5,202.5C 97.5713,203.689 97.238,205.022 97.5,206.5C 96.325,206.719 95.325,206.386 94.5,205.5C 96.4868,201.261 95.3202,198.261 91,196.5C 90.51,197.793 90.3433,199.127 90.5,200.5C 89.5,200.5 88.5,200.5 87.5,200.5C 88.1495,198.565 88.4828,196.565 88.5,194.5C 89.4959,194.414 90.3292,194.748 91,195.5C 91.6891,194.643 92.5224,193.977 93.5,193.5C 95.3049,194.472 96.9716,195.639 98.5,197C 97.8333,197.333 97.1667,197.667 96.5,198C 97.7487,199.824 98.9153,199.657 100,197.5C 101.972,199.232 104.139,200.565 106.5,201.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b4ab9d\",\n    d: \"M 156.5,230.5 C 155.016,228.926 153.349,227.593 151.5,226.5C 155.241,225.44 156.408,223.107 155,219.5C 160.072,222.849 160.572,226.515 156.5,230.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#534d4a\",\n    d: \"M 140.5,224.5 C 143.48,227.144 146.48,229.811 149.5,232.5C 149.167,232.833 148.833,233.167 148.5,233.5C 145.853,230.843 142.853,228.677 139.5,227C 140.252,226.329 140.586,225.496 140.5,224.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e2f28d\",\n    d: \"M 207.5,232.5 C 206.791,233.404 205.791,233.737 204.5,233.5C 202.721,232.33 201.721,230.664 201.5,228.5C 204.866,228.212 208.2,228.046 211.5,228C 209.808,229.307 208.475,230.807 207.5,232.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aad783\",\n    d: \"M 31.5,231.5 C 31.5,231.833 31.5,232.167 31.5,232.5C 30.1667,232.5 28.8333,232.5 27.5,232.5C 27.5,230.833 27.5,229.167 27.5,227.5C 34.0947,226.179 40.7613,225.512 47.5,225.5C 47.5,226.5 47.5,227.5 47.5,228.5C 41.9554,228.973 36.622,229.973 31.5,231.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b7b2ae\",\n    d: \"M 165.5,236.5 C 164.128,235.488 162.795,234.488 161.5,233.5C 165.677,234.158 167.177,232.492 166,228.5C 164.249,227.495 164.249,226.828 166,226.5C 169.045,228.684 170.211,231.684 169.5,235.5C 167.901,235.232 166.568,235.566 165.5,236.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ddd0d0\",\n    d: \"M 90.5,207.5 C 92.5321,208.907 94.6987,210.24 97,211.5C 98.7698,210.724 100.603,210.89 102.5,212C 99.2473,213.036 95.914,213.703 92.5,214C 90.5422,216.642 87.8755,218.142 84.5,218.5C 83.7657,220.815 82.4324,222.648 80.5,224C 81.2301,226.154 81.8968,228.321 82.5,230.5C 77.6247,232.432 72.6247,234.099 67.5,235.5C 66.4461,235.32 65.4461,234.987 64.5,234.5C 63.4305,235.91 62.0972,236.91 60.5,237.5C 59.9423,236.21 58.9423,235.377 57.5,235C 55.1218,234.489 52.7885,233.822 50.5,233C 51.3333,232.167 52.1667,231.333 53,230.5C 54.7525,225.651 53.2525,222.651 48.5,221.5C 47.7025,221.043 47.3691,220.376 47.5,219.5C 48.5676,218.566 49.901,218.232 51.5,218.5C 55.6803,220.637 59.1803,222.971 62,225.5C 67.5702,223.043 73.4035,221.71 79.5,221.5C 79.5,220.5 79.5,219.5 79.5,218.5C 77.3352,218.884 75.6685,218.217 74.5,216.5C 77.5,215.833 80.5,215.167 83.5,214.5C 81.7085,213.236 79.7085,212.569 77.5,212.5C 73.485,213.603 69.485,214.77 65.5,216C 66.8333,217 68.1667,218 69.5,219C 66.4786,219.673 63.4786,220.007 60.5,220C 64.3385,217.401 63.6719,216.234 58.5,216.5C 69.0287,213.292 79.6953,210.292 90.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e6ecb7\",\n    d: \"M 207.5,223.5 C 210.187,223.336 212.854,223.503 215.5,224C 216.337,225.011 216.67,226.178 216.5,227.5C 216.414,228.496 216.748,229.329 217.5,230C 215.68,230.2 214.347,231.034 213.5,232.5C 211.5,232.5 209.5,232.5 207.5,232.5C 208.475,230.807 209.808,229.307 211.5,228C 208.2,228.046 204.866,228.212 201.5,228.5C 201.721,230.664 202.721,232.33 204.5,233.5C 202.833,233.5 201.167,233.5 199.5,233.5C 199.512,236.142 198.179,237.475 195.5,237.5C 195.721,236.265 196.388,235.265 197.5,234.5C 192.404,233.481 187.404,233.981 182.5,236C 181.663,237.011 181.33,238.178 181.5,239.5C 180.414,239.38 179.747,238.713 179.5,237.5C 180.959,235.504 182.792,233.837 185,232.5C 189.781,231.581 194.615,231.248 199.5,231.5C 200.159,227.006 202.825,225.339 207.5,226.5C 207.5,225.5 207.5,224.5 207.5,223.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d1c7c4\",\n    d: \"M 99.5,227.5 C 96.9026,227.643 94.5692,228.477 92.5,230C 93.2438,231.039 94.2438,231.539 95.5,231.5C 96.3351,232.943 97.6684,233.943 99.5,234.5C 99.1131,235.72 98.2798,236.387 97,236.5C 94.8789,234.203 92.3789,232.536 89.5,231.5C 81.5364,233.099 73.8698,235.599 66.5,239C 70.6093,243.096 75.6093,244.596 81.5,243.5C 75.8945,246.408 69.8945,248.408 63.5,249.5C 64.6412,248.661 65.9745,247.994 67.5,247.5C 68.3857,246.675 68.719,245.675 68.5,244.5C 66.8333,244.5 65.1667,244.5 63.5,244.5C 63.5,243.5 63.5,242.5 63.5,241.5C 66.7973,241.671 67.1306,241.005 64.5,239.5C 56.0758,241.688 47.7425,244.021 39.5,246.5C 40.1115,249.696 40.1115,252.696 39.5,255.5C 38.9442,252.721 37.2775,251.054 34.5,250.5C 32.9704,250.64 31.9704,251.307 31.5,252.5C 28.7531,252.813 26.0865,252.48 23.5,251.5C 25.8511,249.771 28.5178,249.104 31.5,249.5C 31.5,248.5 31.5,247.5 31.5,246.5C 32.5,246.5 33.5,246.5 34.5,246.5C 34.5,245.167 34.5,243.833 34.5,242.5C 35.5523,243.53 36.8857,244.197 38.5,244.5C 45.8752,242.152 53.2085,239.819 60.5,237.5C 62.0972,236.91 63.4305,235.91 64.5,234.5C 65.4461,234.987 66.4461,235.32 67.5,235.5C 72.6247,234.099 77.6247,232.432 82.5,230.5C 84.4817,230.005 86.4817,229.505 88.5,229C 87.944,228.617 87.6107,228.117 87.5,227.5C 89.1667,227.5 90.8333,227.5 92.5,227.5C 95.0048,226.583 97.3382,226.583 99.5,227.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ddcecc\",\n    d: \"M 108.5,221.5 C 107.766,222.708 107.433,224.041 107.5,225.5C 112.418,226.716 117.418,227.716 122.5,228.5C 122.376,229.107 122.043,229.44 121.5,229.5C 108.286,234.35 94.9528,239.017 81.5,243.5C 75.6093,244.596 70.6093,243.096 66.5,239C 73.8698,235.599 81.5364,233.099 89.5,231.5C 92.3789,232.536 94.8789,234.203 97,236.5C 98.2798,236.387 99.1131,235.72 99.5,234.5C 97.6684,233.943 96.3351,232.943 95.5,231.5C 95.62,230.414 96.2867,229.747 97.5,229.5C 99.4064,231.242 101.74,232.242 104.5,232.5C 106.389,232.564 108.056,232.064 109.5,231C 106.727,228.353 103.394,227.186 99.5,227.5C 97.3382,226.583 95.0048,226.583 92.5,227.5C 92.6107,226.883 92.944,226.383 93.5,226C 96.1667,225.667 98.8333,225.333 101.5,225C 103.007,224.163 103.507,222.996 103,221.5C 99.2136,220.205 95.3803,220.205 91.5,221.5C 91.1373,222.183 90.8039,222.85 90.5,223.5C 90.1667,223.5 89.8333,223.5 89.5,223.5C 89.33,222.178 89.6634,221.011 90.5,220C 95.222,219.223 99.8887,219.39 104.5,220.5C 105.5,219.833 106.5,219.167 107.5,218.5C 107.593,219.472 107.926,220.472 108.5,221.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bcbdb3\",\n    d: \"M 234.5,229.5 C 234.5,230.5 234.5,231.5 234.5,232.5C 230.002,233.689 226.336,236.023 223.5,239.5C 222.167,239.5 220.833,239.5 219.5,239.5C 219.64,237.876 218.973,236.71 217.5,236C 222.937,233.283 228.604,231.117 234.5,229.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cacac4\",\n    d: \"M 26.5,226.5 C 24.1437,231.798 25.8103,234.464 31.5,234.5C 31.5,235.833 31.5,237.167 31.5,238.5C 33.1992,238.34 34.8659,238.506 36.5,239C 35.0267,239.71 34.3601,240.876 34.5,242.5C 34.5,243.833 34.5,245.167 34.5,246.5C 33.5,246.5 32.5,246.5 31.5,246.5C 30.0011,245.506 28.3344,245.506 26.5,246.5C 27.6354,244.787 29.302,244.12 31.5,244.5C 31.5,243.5 31.5,242.5 31.5,241.5C 28.1501,241.335 24.8168,241.502 21.5,242C 16.2626,243.94 10.9293,245.607 5.5,247C 3.68127,247.74 2.34794,248.907 1.5,250.5C 0.833333,250.5 0.166667,250.5 -0.5,250.5C -0.5,244.5 -0.5,238.5 -0.5,232.5C 2.86631,232.788 6.19964,232.954 9.5,233C 8.37598,232.751 7.37598,232.251 6.5,231.5C 13.4108,231.217 20.0774,229.55 26.5,226.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#deee8c\",\n    d: \"M 195.5,237.5 C 192.266,238.576 188.932,239.243 185.5,239.5C 184.167,239.5 182.833,239.5 181.5,239.5C 181.33,238.178 181.663,237.011 182.5,236C 187.404,233.981 192.404,233.481 197.5,234.5C 196.388,235.265 195.721,236.265 195.5,237.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3e3f39\",\n    d: \"M 161.5,240.5 C 161.158,241.338 160.492,241.672 159.5,241.5C 157.188,239.364 154.688,237.364 152,235.5C 151.333,234.833 151.333,234.167 152,233.5C 155.044,236.051 158.211,238.384 161.5,240.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cce2d6\",\n    d: \"M 234.5,232.5 C 234.5,235.167 234.5,237.833 234.5,240.5C 230.785,240.577 227.119,240.244 223.5,239.5C 226.336,236.023 230.002,233.689 234.5,232.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bec2b9\",\n    d: \"M 210.5,239.5 C 212.5,239.5 214.5,239.5 216.5,239.5C 214.867,241.295 213.034,242.962 211,244.5C 210.127,244.265 209.293,243.931 208.5,243.5C 207.534,245.396 207.201,247.396 207.5,249.5C 206.167,249.5 204.833,249.5 203.5,249.5C 203.062,249.565 202.728,249.399 202.5,249C 204.283,245.054 206.949,241.887 210.5,239.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dad1b8\",\n    d: \"M 234.5,223.5 C 234.5,225.5 234.5,227.5 234.5,229.5C 228.604,231.117 222.937,233.283 217.5,236C 218.973,236.71 219.64,237.876 219.5,239.5C 218.5,239.5 217.5,239.5 216.5,239.5C 214.5,239.5 212.5,239.5 210.5,239.5C 206.777,240.297 203.11,241.297 199.5,242.5C 195.987,242.307 192.654,242.974 189.5,244.5C 188.416,244.315 187.416,243.982 186.5,243.5C 185.766,242.292 185.433,240.959 185.5,239.5C 188.932,239.243 192.266,238.576 195.5,237.5C 198.179,237.475 199.512,236.142 199.5,233.5C 201.167,233.5 202.833,233.5 204.5,233.5C 205.791,233.737 206.791,233.404 207.5,232.5C 209.5,232.5 211.5,232.5 213.5,232.5C 214.347,231.034 215.68,230.2 217.5,230C 216.748,229.329 216.414,228.496 216.5,227.5C 220.199,228.37 223.699,228.37 227,227.5C 229.156,225.505 231.656,224.172 234.5,223.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d8c9c4\",\n    d: \"M 213.5,232.5 C 217.966,233.348 217.966,235.181 213.5,238C 209.403,237.919 205.403,237.086 201.5,235.5C 205.71,234.822 209.71,233.822 213.5,232.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#859896\",\n    d: \"M 223.5,239.5 C 227.119,240.244 230.785,240.577 234.5,240.5C 234.5,240.833 234.5,241.167 234.5,241.5C 231.122,242.023 228.122,243.356 225.5,245.5C 225.747,243.142 225.081,241.142 223.5,239.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cdc0b2\",\n    d: \"M 199.5,242.5 C 196.796,244.171 194.129,245.837 191.5,247.5C 189.323,247.586 187.323,248.253 185.5,249.5C 182.741,248.121 180.075,246.787 177.5,245.5C 180.664,245.442 183.664,244.776 186.5,243.5C 187.416,243.982 188.416,244.315 189.5,244.5C 192.654,242.974 195.987,242.307 199.5,242.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#55aabb\",\n    d: \"M 26.5,246.5 C 26.1667,246.5 25.8333,246.5 25.5,246.5C 22.0821,247.188 18.7488,248.188 15.5,249.5C 10.8804,250.493 6.21369,250.827 1.5,250.5C 2.34794,248.907 3.68127,247.74 5.5,247C 10.9293,245.607 16.2626,243.94 21.5,242C 24.8168,241.502 28.1501,241.335 31.5,241.5C 31.5,242.5 31.5,243.5 31.5,244.5C 29.302,244.12 27.6354,244.787 26.5,246.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9a9692\",\n    d: \"M 210.5,239.5 C 206.949,241.887 204.283,245.054 202.5,249C 202.728,249.399 203.062,249.565 203.5,249.5C 201.727,250.892 199.727,252.059 197.5,253C 194.247,253.201 191.247,254.034 188.5,255.5C 187.167,255.5 185.833,255.5 184.5,255.5C 184.343,254.127 184.51,252.793 185,251.5C 187.314,250.267 189.481,248.933 191.5,247.5C 194.129,245.837 196.796,244.171 199.5,242.5C 203.11,241.297 206.777,240.297 210.5,239.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c8e0d4\",\n    d: \"M 216.5,239.5 C 217.5,239.5 218.5,239.5 219.5,239.5C 220.833,239.5 222.167,239.5 223.5,239.5C 225.081,241.142 225.747,243.142 225.5,245.5C 222.66,249.46 218.66,251.127 213.5,250.5C 211.5,250.5 209.5,250.5 207.5,250.5C 207.5,250.167 207.5,249.833 207.5,249.5C 207.201,247.396 207.534,245.396 208.5,243.5C 209.293,243.931 210.127,244.265 211,244.5C 213.034,242.962 214.867,241.295 216.5,239.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3e3e38\",\n    d: \"M 163.5,242.5 C 170.009,247.502 176.675,252.335 183.5,257C 184.448,257.483 185.448,257.649 186.5,257.5C 186.5,258.167 186.167,258.5 185.5,258.5C 183.692,258.509 182.025,258.009 180.5,257C 174.321,252.743 168.321,248.243 162.5,243.5C 162.624,242.893 162.957,242.56 163.5,242.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d8cecd\",\n    d: \"M 63.5,249.5 C 62.5707,250.315 61.5707,251.148 60.5,252C 46.1349,255.513 32.1349,260.18 18.5,266C 15.8323,266.567 13.1656,267.067 10.5,267.5C 17.2673,264.342 24.2673,261.342 31.5,258.5C 31.5,257.5 31.5,256.5 31.5,255.5C 34.1667,255.5 36.8333,255.5 39.5,255.5C 40.1115,252.696 40.1115,249.696 39.5,246.5C 47.7425,244.021 56.0758,241.688 64.5,239.5C 67.1306,241.005 66.7973,241.671 63.5,241.5C 63.5,242.5 63.5,243.5 63.5,244.5C 65.1667,244.5 66.8333,244.5 68.5,244.5C 68.719,245.675 68.3857,246.675 67.5,247.5C 65.9745,247.994 64.6412,248.661 63.5,249.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b1c5cf\",\n    d: \"M 25.5,246.5 C 23.44,248.148 21.1067,249.648 18.5,251C 12.3315,252.884 5.99814,253.718 -0.5,253.5C -0.5,252.5 -0.5,251.5 -0.5,250.5C 0.166667,250.5 0.833333,250.5 1.5,250.5C 6.21369,250.827 10.8804,250.493 15.5,249.5C 18.7488,248.188 22.0821,247.188 25.5,246.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d7d4cb\",\n    d: \"M 167.5,255.5 C 165.473,255.338 163.473,255.505 161.5,256C 155.822,259.772 149.822,262.938 143.5,265.5C 142.244,265.096 141.077,264.429 140,263.5C 138.862,263.989 137.695,264.322 136.5,264.5C 138.612,262.794 140.945,261.461 143.5,260.5C 147.31,261.024 149.31,259.357 149.5,255.5C 151.167,255.5 152.833,255.5 154.5,255.5C 156.344,253.721 157.01,251.388 156.5,248.5C 154.473,248.338 152.473,248.505 150.5,249C 148.473,250.879 146.14,252.046 143.5,252.5C 143.5,253.5 143.5,254.5 143.5,255.5C 140.267,256.729 137.267,258.396 134.5,260.5C 133.833,260.5 133.167,260.5 132.5,260.5C 131.021,261.759 129.354,262.759 127.5,263.5C 128.579,261.919 128.579,260.253 127.5,258.5C 127.818,257.353 128.484,256.519 129.5,256C 126.854,255.503 124.187,255.336 121.5,255.5C 122.801,253.328 123.801,250.995 124.5,248.5C 125.5,248.5 126.5,248.5 127.5,248.5C 127.5,249.833 127.5,251.167 127.5,252.5C 129.877,252.216 132.044,252.216 134,252.5C 135.376,251.295 136.542,249.962 137.5,248.5C 139.391,247.464 141.224,247.464 143,248.5C 143.708,247.619 144.542,246.953 145.5,246.5C 147.103,246.688 148.437,246.188 149.5,245C 148.446,243.612 148.28,242.112 149,240.5C 155.695,244.92 161.862,249.92 167.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d7dcb8\",\n    d: \"M 154.5,255.5 C 154.923,252.757 153.756,251.424 151,251.5C 148.846,253.488 146.346,254.822 143.5,255.5C 143.5,254.5 143.5,253.5 143.5,252.5C 146.14,252.046 148.473,250.879 150.5,249C 152.473,248.505 154.473,248.338 156.5,248.5C 157.01,251.388 156.344,253.721 154.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#eac69e\",\n    d: \"M 39.5,255.5 C 36.8333,255.5 34.1667,255.5 31.5,255.5C 31.5,254.833 31.5,254.167 31.5,253.5C 31.5,253.167 31.5,252.833 31.5,252.5C 31.9704,251.307 32.9704,250.64 34.5,250.5C 37.2775,251.054 38.9442,252.721 39.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b38993\",\n    d: \"M 121.5,229.5 C 121.423,230.75 120.756,231.583 119.5,232C 109.429,236.293 99.4289,240.459 89.5,244.5C 80.7479,247.527 72.0813,250.527 63.5,253.5C 52.6649,257.178 41.9983,260.845 31.5,264.5C 29.2143,264.595 27.2143,265.262 25.5,266.5C 20.7749,267.516 16.1082,268.849 11.5,270.5C 10.6143,269.675 10.281,268.675 10.5,267.5C 13.1656,267.067 15.8323,266.567 18.5,266C 32.1349,260.18 46.1349,255.513 60.5,252C 61.5707,251.148 62.5707,250.315 63.5,249.5C 69.8945,248.408 75.8945,246.408 81.5,243.5C 94.9528,239.017 108.286,234.35 121.5,229.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dbcdce\",\n    d: \"M 89.5,244.5 C 89.1961,245.15 88.8627,245.817 88.5,246.5C 90.7427,247.474 93.076,247.808 95.5,247.5C 95.5,248.5 95.5,249.5 95.5,250.5C 91.2365,251.125 87.2365,252.625 83.5,255C 80.6318,256.383 77.6318,257.216 74.5,257.5C 67.3381,257.387 67.0048,256.387 73.5,254.5C 70.2317,253.513 66.8984,253.18 63.5,253.5C 72.0813,250.527 80.7479,247.527 89.5,244.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#30383d\",\n    d: \"M 234.5,241.5 C 234.5,242.833 234.5,244.167 234.5,245.5C 232.692,245.491 231.025,245.991 229.5,247C 230.711,247.893 230.711,248.726 229.5,249.5C 226.039,251.582 222.705,253.749 219.5,256C 220.5,256.333 221.5,256.667 222.5,257C 220.302,257.373 218.135,257.873 216,258.5C 214.193,260.32 212.027,261.487 209.5,262C 210.34,263.666 209.84,263.833 208,262.5C 206.644,264.409 205.144,266.076 203.5,267.5C 201.853,269.326 199.853,270.66 197.5,271.5C 197.859,269.629 198.859,268.129 200.5,267C 199.167,267 197.833,267 196.5,267C 201.072,265.593 205.072,263.26 208.5,260C 208.022,258.697 207.355,257.531 206.5,256.5C 208.647,254.263 210.98,252.263 213.5,250.5C 218.66,251.127 222.66,249.46 225.5,245.5C 228.122,243.356 231.122,242.023 234.5,241.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#363e45\",\n    d: \"M 203.5,249.5 C 204.833,249.5 206.167,249.5 207.5,249.5C 207.5,249.833 207.5,250.167 207.5,250.5C 207.586,251.496 207.252,252.329 206.5,253C 201.952,253.94 197.952,255.94 194.5,259C 193.207,259.49 191.873,259.657 190.5,259.5C 188.585,259.784 186.919,259.451 185.5,258.5C 186.167,258.5 186.5,258.167 186.5,257.5C 187.5,257.167 188.167,256.5 188.5,255.5C 191.247,254.034 194.247,253.201 197.5,253C 199.727,252.059 201.727,250.892 203.5,249.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e7b67e\",\n    d: \"M 31.5,253.5 C 31.5,254.167 31.5,254.833 31.5,255.5C 30.8333,255.5 30.1667,255.5 29.5,255.5C 27.3927,256.3 25.2261,256.967 23,257.5C 21.124,257.475 19.624,256.809 18.5,255.5C 23.0361,255.567 27.3695,254.901 31.5,253.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d7cdc6\",\n    d: \"M 116.5,216.5 C 119.216,218.613 122.05,220.613 125,222.5C 125.107,225.131 125.273,227.631 125.5,230C 125.833,230.167 126.167,230.333 126.5,230.5C 127.167,228.833 127.833,227.167 128.5,225.5C 130.937,226.803 133.104,228.47 135,230.5C 135.687,232.568 135.52,234.568 134.5,236.5C 135.325,237.386 136.325,237.719 137.5,237.5C 137.34,235.801 137.506,234.134 138,232.5C 140.846,234.257 143.512,236.257 146,238.5C 146.779,240.807 146.279,242.807 144.5,244.5C 144.863,245.183 145.196,245.85 145.5,246.5C 144.542,246.953 143.708,247.619 143,248.5C 141.224,247.464 139.391,247.464 137.5,248.5C 137.719,247.325 137.386,246.325 136.5,245.5C 134.427,246.469 132.261,247.135 130,247.5C 128.624,247.316 127.791,246.649 127.5,245.5C 130.821,244.789 133.488,242.956 135.5,240C 133.866,239.506 132.199,239.34 130.5,239.5C 127.813,239.336 125.146,239.503 122.5,240C 121.09,241.372 119.423,242.205 117.5,242.5C 116.504,242.414 115.671,242.748 115,243.5C 114.506,245.134 114.34,246.801 114.5,248.5C 114.5,249.833 114.5,251.167 114.5,252.5C 113.5,252.5 112.5,252.5 111.5,252.5C 111.728,250.645 111.061,249.812 109.5,250C 109.833,250.333 110.167,250.667 110.5,251C 109.636,252.137 108.636,253.47 107.5,255C 109.878,255.974 109.544,256.641 106.5,257C 108.424,257.179 110.091,257.346 111.5,257.5C 109.415,258.541 107.748,260.041 106.5,262C 102.842,262.128 99.3417,262.628 96,263.5C 95.5172,262.552 95.3505,261.552 95.5,260.5C 92.1027,262.252 88.7694,263.252 85.5,263.5C 83.5648,264.15 81.5648,264.483 79.5,264.5C 79.5,265.833 79.5,267.167 79.5,268.5C 76.2039,268.65 73.2039,269.65 70.5,271.5C 68.1817,271.003 65.8484,270.67 63.5,270.5C 66.6247,269.43 69.2914,267.596 71.5,265C 74.6208,263.392 77.9541,262.559 81.5,262.5C 81.2204,258.775 79.2204,257.608 75.5,259C 72.3493,260.821 69.3493,262.821 66.5,265C 61.2326,264.693 57.5659,266.86 55.5,271.5C 55.1667,271.5 54.8333,271.5 54.5,271.5C 53.1667,271.5 51.8333,271.5 50.5,271.5C 52.0664,269.375 53.3998,267.042 54.5,264.5C 57.9665,263.033 61.4665,262.699 65,263.5C 68.5446,261.949 71.7112,259.949 74.5,257.5C 77.6318,257.216 80.6318,256.383 83.5,255C 87.2365,252.625 91.2365,251.125 95.5,250.5C 95.5,249.5 95.5,248.5 95.5,247.5C 93.076,247.808 90.7427,247.474 88.5,246.5C 88.8627,245.817 89.1961,245.15 89.5,244.5C 99.4289,240.459 109.429,236.293 119.5,232C 120.756,231.583 121.423,230.75 121.5,229.5C 122.043,229.44 122.376,229.107 122.5,228.5C 117.418,227.716 112.418,226.716 107.5,225.5C 107.433,224.041 107.766,222.708 108.5,221.5C 109.997,220.694 111.664,220.028 113.5,219.5C 115.895,220.523 116.895,219.523 116.5,216.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e4be98\",\n    d: \"M 95.5,250.5 C 97.9201,250.292 100.253,250.626 102.5,251.5C 103.429,252.689 103.762,254.022 103.5,255.5C 97.8397,255.89 92.5063,257.224 87.5,259.5C 87.5,258.167 87.5,256.833 87.5,255.5C 90.2062,255.425 92.8728,255.092 95.5,254.5C 95.5,253.167 95.5,251.833 95.5,250.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dcb590\",\n    d: \"M 130.5,239.5 C 126.322,242.646 121.655,244.979 116.5,246.5C 116.433,245.041 116.766,243.708 117.5,242.5C 119.423,242.205 121.09,241.372 122.5,240C 125.146,239.503 127.813,239.336 130.5,239.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e3cdb7\",\n    d: \"M 130.5,239.5 C 132.199,239.34 133.866,239.506 135.5,240C 133.488,242.956 130.821,244.789 127.5,245.5C 127.44,244.957 127.107,244.624 126.5,244.5C 123.334,248.077 119.334,249.41 114.5,248.5C 114.34,246.801 114.506,245.134 115,243.5C 115.671,242.748 116.504,242.414 117.5,242.5C 116.766,243.708 116.433,245.041 116.5,246.5C 121.655,244.979 126.322,242.646 130.5,239.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d9dbab\",\n    d: \"M 149.5,255.5 C 149.31,259.357 147.31,261.024 143.5,260.5C 145.443,258.835 147.443,257.168 149.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d4dd8a\",\n    d: \"M 154.5,255.5 C 152.833,255.5 151.167,255.5 149.5,255.5C 147.443,257.168 145.443,258.835 143.5,260.5C 140.945,261.461 138.612,262.794 136.5,264.5C 133.574,265.461 130.574,266.127 127.5,266.5C 127.5,265.5 127.5,264.5 127.5,263.5C 129.354,262.759 131.021,261.759 132.5,260.5C 132.667,264.34 134.334,264.507 137.5,261C 136.552,260.517 135.552,260.351 134.5,260.5C 137.267,258.396 140.267,256.729 143.5,255.5C 146.346,254.822 148.846,253.488 151,251.5C 153.756,251.424 154.923,252.757 154.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#747c86\",\n    d: \"M 207.5,250.5 C 209.5,250.5 211.5,250.5 213.5,250.5C 210.98,252.263 208.647,254.263 206.5,256.5C 201.218,259.145 196.218,262.312 191.5,266C 190.072,266.579 188.738,266.412 187.5,265.5C 187.279,264.265 186.612,263.265 185.5,262.5C 187.36,261.675 189.026,260.675 190.5,259.5C 191.873,259.657 193.207,259.49 194.5,259C 197.952,255.94 201.952,253.94 206.5,253C 207.252,252.329 207.586,251.496 207.5,250.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#78756b\",\n    d: \"M 161.5,240.5 C 162.5,240.833 163.167,241.5 163.5,242.5C 162.957,242.56 162.624,242.893 162.5,243.5C 168.321,248.243 174.321,252.743 180.5,257C 182.025,258.009 183.692,258.509 185.5,258.5C 186.919,259.451 188.585,259.784 190.5,259.5C 189.026,260.675 187.36,261.675 185.5,262.5C 186.612,263.265 187.279,264.265 187.5,265.5C 186.292,264.766 184.959,264.433 183.5,264.5C 180.797,264.955 178.13,265.622 175.5,266.5C 174.416,266.315 173.416,265.982 172.5,265.5C 173.167,264.5 173.833,263.5 174.5,262.5C 177.743,263.58 181.076,263.747 184.5,263C 180.231,263.212 176.731,261.712 174,258.5C 173.536,259.094 173.369,259.761 173.5,260.5C 172.833,260.5 172.5,260.167 172.5,259.5C 172.5,259.167 172.5,258.833 172.5,258.5C 173.363,257.06 173.363,255.726 172.5,254.5C 168.02,251.516 163.854,248.183 160,244.5C 159.517,243.552 159.351,242.552 159.5,241.5C 160.492,241.672 161.158,241.338 161.5,240.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#424442\",\n    d: \"M 234.5,245.5 C 234.5,248.167 234.5,250.833 234.5,253.5C 229.027,255.402 224.027,258.068 219.5,261.5C 214.33,264.091 208.997,266.091 203.5,267.5C 205.144,266.076 206.644,264.409 208,262.5C 209.84,263.833 210.34,263.666 209.5,262C 212.027,261.487 214.193,260.32 216,258.5C 218.135,257.873 220.302,257.373 222.5,257C 221.5,256.667 220.5,256.333 219.5,256C 222.705,253.749 226.039,251.582 229.5,249.5C 230.711,248.726 230.711,247.893 229.5,247C 231.025,245.991 232.692,245.491 234.5,245.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e4331\",\n    d: \"M 174.5,262.5 C 174.167,261.833 173.833,261.167 173.5,260.5C 173.369,259.761 173.536,259.094 174,258.5C 176.731,261.712 180.231,263.212 184.5,263C 181.076,263.747 177.743,263.58 174.5,262.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dccbcd\",\n    d: \"M 63.5,253.5 C 63.5,254.833 63.5,256.167 63.5,257.5C 58.2886,259.022 53.122,260.689 48,262.5C 46.0224,261.184 44.5224,261.684 43.5,264C 39.5138,264.499 35.5138,264.666 31.5,264.5C 41.9983,260.845 52.6649,257.178 63.5,253.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dfbc94\",\n    d: \"M 63.5,270.5 C 62.791,271.404 61.791,271.737 60.5,271.5C 58.8333,271.5 57.1667,271.5 55.5,271.5C 57.5659,266.86 61.2326,264.693 66.5,265C 69.3493,262.821 72.3493,260.821 75.5,259C 79.2204,257.608 81.2204,258.775 81.5,262.5C 77.9541,262.559 74.6208,263.392 71.5,265C 69.2914,267.596 66.6247,269.43 63.5,270.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cdd962\",\n    d: \"M 132.5,260.5 C 133.167,260.5 133.833,260.5 134.5,260.5C 135.552,260.351 136.552,260.517 137.5,261C 134.334,264.507 132.667,264.34 132.5,260.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#918568\",\n    d: \"M 234.5,253.5 C 234.5,261.5 234.5,269.5 234.5,277.5C 232.801,277.34 231.134,277.506 229.5,278C 227.423,279.705 225.09,280.872 222.5,281.5C 223.626,280.142 223.626,278.808 222.5,277.5C 219.991,276.079 217.657,274.412 215.5,272.5C 212.696,271.895 210.029,271.062 207.5,270C 211.742,267.39 215.742,264.557 219.5,261.5C 224.027,258.068 229.027,255.402 234.5,253.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#211f24\",\n    d: \"M -0.5,260.5 C 0.491777,262.456 1.49178,264.456 2.5,266.5C 2.17876,268.048 1.17876,268.715 -0.5,268.5C -0.5,265.833 -0.5,263.167 -0.5,260.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d4cec9\",\n    d: \"M 127.5,245.5 C 127.791,246.649 128.624,247.316 130,247.5C 132.261,247.135 134.427,246.469 136.5,245.5C 137.386,246.325 137.719,247.325 137.5,248.5C 136.542,249.962 135.376,251.295 134,252.5C 132.044,252.216 129.877,252.216 127.5,252.5C 127.5,251.167 127.5,249.833 127.5,248.5C 126.5,248.5 125.5,248.5 124.5,248.5C 123.801,250.995 122.801,253.328 121.5,255.5C 124.187,255.336 126.854,255.503 129.5,256C 128.484,256.519 127.818,257.353 127.5,258.5C 128.579,260.253 128.579,261.919 127.5,263.5C 127.5,264.5 127.5,265.5 127.5,266.5C 130.574,266.127 133.574,265.461 136.5,264.5C 137.695,264.322 138.862,263.989 140,263.5C 141.077,264.429 142.244,265.096 143.5,265.5C 143.5,266.5 143.5,267.5 143.5,268.5C 140.507,267.865 137.507,267.699 134.5,268C 132.28,270.446 129.947,272.946 127.5,275.5C 122.725,276.402 118.392,278.069 114.5,280.5C 112.589,280.574 111.422,281.574 111,283.5C 105.75,280.062 102.917,281.395 102.5,287.5C 101.5,287.5 100.5,287.5 99.5,287.5C 100.781,285.016 100.447,282.682 98.5,280.5C 97.8333,280.833 97.1667,281.167 96.5,281.5C 95.8333,279.167 95.1667,276.833 94.5,274.5C 92.4898,274.174 90.4898,273.841 88.5,273.5C 89.9079,272.757 91.2412,271.923 92.5,271C 89.6168,268.918 87.2834,266.418 85.5,263.5C 88.7694,263.252 92.1027,262.252 95.5,260.5C 95.3505,261.552 95.5172,262.552 96,263.5C 99.3417,262.628 102.842,262.128 106.5,262C 107.748,260.041 109.415,258.541 111.5,257.5C 110.091,257.346 108.424,257.179 106.5,257C 109.544,256.641 109.878,255.974 107.5,255C 108.636,253.47 109.636,252.137 110.5,251C 110.167,250.667 109.833,250.333 109.5,250C 111.061,249.812 111.728,250.645 111.5,252.5C 112.5,252.5 113.5,252.5 114.5,252.5C 114.5,251.167 114.5,249.833 114.5,248.5C 119.334,249.41 123.334,248.077 126.5,244.5C 127.107,244.624 127.44,244.957 127.5,245.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c473a\",\n    d: \"M 183.5,264.5 C 185.213,268.461 184.546,269.128 181.5,266.5C 179.908,268.562 178.075,268.895 176,267.5C 175.878,269.437 175.045,270.77 173.5,271.5C 172.833,271.5 172.167,271.5 171.5,271.5C 170.9,270.1 169.9,269.1 168.5,268.5C 169.795,267.512 171.128,266.512 172.5,265.5C 173.416,265.982 174.416,266.315 175.5,266.5C 178.13,265.622 180.797,264.955 183.5,264.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cdcec8\",\n    d: \"M 63.5,253.5 C 66.8984,253.18 70.2317,253.513 73.5,254.5C 67.0048,256.387 67.3381,257.387 74.5,257.5C 71.7112,259.949 68.5446,261.949 65,263.5C 61.4665,262.699 57.9665,263.033 54.5,264.5C 53.3998,267.042 52.0664,269.375 50.5,271.5C 47.3552,274.113 43.6886,275.779 39.5,276.5C 41.0781,274.682 40.5781,273.682 38,273.5C 35.863,274.077 33.6963,274.41 31.5,274.5C 31.5,275.5 31.5,276.5 31.5,277.5C 28.8915,277.4 26.5582,278.067 24.5,279.5C 20.4726,279.719 19.8059,278.552 22.5,276C 25.3527,274.57 28.3527,273.737 31.5,273.5C 31.5,272.167 31.5,270.833 31.5,269.5C 27.8264,270.831 24.1598,271.998 20.5,273C 19.5494,272.282 19.3828,271.449 20,270.5C 22.4632,269.968 24.2965,268.634 25.5,266.5C 27.2143,265.262 29.2143,264.595 31.5,264.5C 35.5138,264.666 39.5138,264.499 43.5,264C 44.5224,261.684 46.0224,261.184 48,262.5C 53.122,260.689 58.2886,259.022 63.5,257.5C 63.5,256.167 63.5,254.833 63.5,253.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a69c99\",\n    d: \"M 172.5,259.5 C 172.5,260.167 172.833,260.5 173.5,260.5C 173.833,261.167 174.167,261.833 174.5,262.5C 173.833,263.5 173.167,264.5 172.5,265.5C 171.128,266.512 169.795,267.512 168.5,268.5C 162.808,270.049 157.808,272.716 153.5,276.5C 152.833,276.5 152.167,276.5 151.5,276.5C 149.658,276.277 147.825,275.943 146,275.5C 143.572,277.296 141.072,278.962 138.5,280.5C 137.167,280.833 135.833,281.167 134.5,281.5C 132.5,281.833 130.5,282.167 128.5,282.5C 130.5,281.167 132.5,279.833 134.5,278.5C 144.618,273.441 154.285,268.608 163.5,264C 164.716,262.26 166.382,261.26 168.5,261C 166.355,260.257 166.189,259.424 168,258.5C 169.44,259.148 170.94,259.481 172.5,259.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a45a30\",\n    d: \"M -0.5,269.5 C 3.34997,269.701 4.34997,271.534 2.5,275C 1.55198,275.483 0.551975,275.649 -0.5,275.5C -0.5,273.5 -0.5,271.5 -0.5,269.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c2127\",\n    d: \"M 206.5,256.5 C 207.355,257.531 208.022,258.697 208.5,260C 205.072,263.26 201.072,265.593 196.5,267C 197.833,267 199.167,267 200.5,267C 198.859,268.129 197.859,269.629 197.5,271.5C 194.215,271.893 191.382,273.226 189,275.5C 188.5,275.333 188,275.167 187.5,275C 188.672,274.581 189.672,273.915 190.5,273C 188.331,272.571 186.331,273.071 184.5,274.5C 183.304,274.154 183.304,273.654 184.5,273C 180.796,272.196 177.296,272.696 174,274.5C 173.517,273.552 173.351,272.552 173.5,271.5C 175.045,270.77 175.878,269.437 176,267.5C 178.075,268.895 179.908,268.562 181.5,266.5C 184.546,269.128 185.213,268.461 183.5,264.5C 184.959,264.433 186.292,264.766 187.5,265.5C 188.738,266.412 190.072,266.579 191.5,266C 196.218,262.312 201.218,259.145 206.5,256.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#897f63\",\n    d: \"M 219.5,261.5 C 215.742,264.557 211.742,267.39 207.5,270C 210.029,271.062 212.696,271.895 215.5,272.5C 217.657,274.412 219.991,276.079 222.5,277.5C 223.626,278.808 223.626,280.142 222.5,281.5C 217.462,283.145 212.462,284.979 207.5,287C 205.527,287.495 203.527,287.662 201.5,287.5C 198.167,287.5 194.833,287.5 191.5,287.5C 191.66,285.801 191.494,284.134 191,282.5C 188.005,285.265 184.505,286.098 180.5,285C 182.878,284.489 185.212,283.822 187.5,283C 185.833,282.667 184.167,282.333 182.5,282C 184.32,281.8 185.653,280.966 186.5,279.5C 190.705,277.636 194.372,274.97 197.5,271.5C 199.853,270.66 201.853,269.326 203.5,267.5C 208.997,266.091 214.33,264.091 219.5,261.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#91644f\",\n    d: \"M 2.5,266.5 C 4.5595,269.24 6.22617,272.24 7.5,275.5C 4.83333,276.167 2.16667,276.833 -0.5,277.5C -0.5,276.833 -0.5,276.167 -0.5,275.5C 0.551975,275.649 1.55198,275.483 2.5,275C 4.34997,271.534 3.34997,269.701 -0.5,269.5C -0.5,269.167 -0.5,268.833 -0.5,268.5C 1.17876,268.715 2.17876,268.048 2.5,266.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d4d2cc\",\n    d: \"M 85.5,263.5 C 87.2834,266.418 89.6168,268.918 92.5,271C 91.2412,271.923 89.9079,272.757 88.5,273.5C 90.4898,273.841 92.4898,274.174 94.5,274.5C 95.1667,276.833 95.8333,279.167 96.5,281.5C 97.1667,281.167 97.8333,280.833 98.5,280.5C 100.447,282.682 100.781,285.016 99.5,287.5C 98.1667,287.5 96.8333,287.5 95.5,287.5C 95.719,288.675 95.3857,289.675 94.5,290.5C 91.8333,291.167 89.1667,291.833 86.5,292.5C 85.6143,293.325 85.281,294.325 85.5,295.5C 83.5,295.5 81.5,295.5 79.5,295.5C 79.2965,293.61 79.9632,292.11 81.5,291C 77.9319,292.097 74.2653,293.264 70.5,294.5C 69.8933,294.376 69.56,294.043 69.5,293.5C 74.3122,291.271 79.3122,289.105 84.5,287C 82.0641,287.053 79.7308,286.887 77.5,286.5C 80.4314,283.942 83.7648,282.276 87.5,281.5C 87.5,280.5 87.5,279.5 87.5,278.5C 83.3178,279.256 79.3178,280.59 75.5,282.5C 75.8333,283.167 76.1667,283.833 76.5,284.5C 74.8208,285.782 72.9874,286.782 71,287.5C 70.9115,285.887 71.7448,284.72 73.5,284C 71.5,284 69.5,284 67.5,284C 69.5,283 71.5,282 73.5,281C 70.7652,281.198 68.0985,281.031 65.5,280.5C 68.0698,279.777 70.4032,278.61 72.5,277C 71.5,276.667 70.5,276.333 69.5,276C 71.5,275 73.5,274 75.5,273C 71.0361,272.93 66.8694,274.097 63,276.5C 61.1079,275.383 60.2746,273.716 60.5,271.5C 61.791,271.737 62.791,271.404 63.5,270.5C 65.8484,270.67 68.1817,271.003 70.5,271.5C 73.2039,269.65 76.2039,268.65 79.5,268.5C 79.5,267.167 79.5,265.833 79.5,264.5C 81.5648,264.483 83.5648,264.15 85.5,263.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f3233\",\n    d: \"M 171.5,271.5 C 172.167,271.5 172.833,271.5 173.5,271.5C 173.351,272.552 173.517,273.552 174,274.5C 177.296,272.696 180.796,272.196 184.5,273C 183.304,273.654 183.304,274.154 184.5,274.5C 186.331,273.071 188.331,272.571 190.5,273C 189.672,273.915 188.672,274.581 187.5,275C 188,275.167 188.5,275.333 189,275.5C 191.382,273.226 194.215,271.893 197.5,271.5C 194.372,274.97 190.705,277.636 186.5,279.5C 180.796,282.092 174.796,283.426 168.5,283.5C 168.5,283.167 168.5,282.833 168.5,282.5C 167.645,281.469 166.978,280.303 166.5,279C 167.573,277.584 167.573,276.25 166.5,275C 168.973,274.78 170.64,273.614 171.5,271.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c7b9a6\",\n    d: \"M 167.5,255.5 C 169.149,256.473 170.816,257.473 172.5,258.5C 172.5,258.833 172.5,259.167 172.5,259.5C 170.94,259.481 169.44,259.148 168,258.5C 166.189,259.424 166.355,260.257 168.5,261C 166.382,261.26 164.716,262.26 163.5,264C 154.285,268.608 144.618,273.441 134.5,278.5C 132.167,278.5 129.833,278.5 127.5,278.5C 127.5,279.5 127.5,280.5 127.5,281.5C 123.182,281.371 118.849,281.038 114.5,280.5C 118.392,278.069 122.725,276.402 127.5,275.5C 129.947,272.946 132.28,270.446 134.5,268C 137.507,267.699 140.507,267.865 143.5,268.5C 143.5,267.5 143.5,266.5 143.5,265.5C 149.822,262.938 155.822,259.772 161.5,256C 163.473,255.505 165.473,255.338 167.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#332422\",\n    d: \"M 7.5,275.5 C 8.60048,276.605 9.26714,277.938 9.5,279.5C 8.85013,279.196 8.18346,278.863 7.5,278.5C 4.90436,279.482 2.23769,280.149 -0.5,280.5C -0.5,279.5 -0.5,278.5 -0.5,277.5C 2.16667,276.833 4.83333,276.167 7.5,275.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cfcad7\",\n    d: \"M 39.5,276.5 C 34.7916,278.194 30.1249,279.861 25.5,281.5C 23.3023,281.591 22.9689,280.925 24.5,279.5C 26.5582,278.067 28.8915,277.4 31.5,277.5C 31.5,276.5 31.5,275.5 31.5,274.5C 33.6963,274.41 35.863,274.077 38,273.5C 40.5781,273.682 41.0781,274.682 39.5,276.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b64f7f\",\n    d: \"M 151.5,276.5 C 151.714,278.144 151.38,279.644 150.5,281C 147.107,283.512 143.441,284.012 139.5,282.5C 138.662,282.158 138.328,281.492 138.5,280.5C 141.072,278.962 143.572,277.296 146,275.5C 147.825,275.943 149.658,276.277 151.5,276.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#61abb1\",\n    d: \"M 50.5,271.5 C 51.8333,271.5 53.1667,271.5 54.5,271.5C 54.5,272.833 54.5,274.167 54.5,275.5C 45.6693,277.388 37.336,280.554 29.5,285C 27.5273,285.495 25.5273,285.662 23.5,285.5C 22.9569,285.44 22.6236,285.107 22.5,284.5C 23.3398,283.265 24.3398,282.265 25.5,281.5C 30.1249,279.861 34.7916,278.194 39.5,276.5C 43.6886,275.779 47.3552,274.113 50.5,271.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c6c5bd\",\n    d: \"M 31.5,246.5 C 31.5,247.5 31.5,248.5 31.5,249.5C 28.5178,249.104 25.8511,249.771 23.5,251.5C 26.0865,252.48 28.7531,252.813 31.5,252.5C 31.5,252.833 31.5,253.167 31.5,253.5C 27.3695,254.901 23.0361,255.567 18.5,255.5C 14.8914,256.758 11.2248,257.925 7.5,259C 3.79641,261.136 3.79641,262.969 7.5,264.5C 10.9735,262.938 14.6402,262.105 18.5,262C 22.5599,260.311 26.2266,258.144 29.5,255.5C 30.1667,255.5 30.8333,255.5 31.5,255.5C 31.5,256.5 31.5,257.5 31.5,258.5C 24.2673,261.342 17.2673,264.342 10.5,267.5C 10.281,268.675 10.6143,269.675 11.5,270.5C 16.1082,268.849 20.7749,267.516 25.5,266.5C 24.2965,268.634 22.4632,269.968 20,270.5C 19.3828,271.449 19.5494,272.282 20.5,273C 24.1598,271.998 27.8264,270.831 31.5,269.5C 31.5,270.833 31.5,272.167 31.5,273.5C 28.3527,273.737 25.3527,274.57 22.5,276C 19.8059,278.552 20.4726,279.719 24.5,279.5C 22.9689,280.925 23.3023,281.591 25.5,281.5C 24.3398,282.265 23.3398,283.265 22.5,284.5C 22.6236,285.107 22.9569,285.44 23.5,285.5C 23.8212,287.048 24.8212,287.715 26.5,287.5C 26.7637,290.757 28.4304,292.757 31.5,293.5C 31.5,291.833 31.5,290.167 31.5,288.5C 30.325,288.719 29.325,288.386 28.5,287.5C 31.0601,286.253 33.7268,285.253 36.5,284.5C 36.2907,283.914 35.9574,283.414 35.5,283C 38.4816,282.502 41.4816,282.335 44.5,282.5C 44.5,283.5 44.5,284.5 44.5,285.5C 40.6495,284.925 37.6495,286.259 35.5,289.5C 38.028,290.517 38.028,291.684 35.5,293C 40.6207,293.577 40.6207,294.577 35.5,296C 42.462,295.759 49.1287,294.259 55.5,291.5C 55.5,292.833 55.5,294.167 55.5,295.5C 50.8359,296.333 46.5026,298 42.5,300.5C 41.6941,297.638 40.3607,297.138 38.5,299C 39.3081,299.308 39.9747,299.808 40.5,300.5C 39.3595,301.425 39.3595,302.259 40.5,303C 35.7695,302.966 35.2695,304.466 39,307.5C 39.49,308.793 39.6567,310.127 39.5,311.5C 38.6618,311.842 38.3284,312.508 38.5,313.5C 34.5,313.5 30.5,313.5 26.5,313.5C 24.2455,307.319 21.2455,301.652 17.5,296.5C 15.2061,290.598 12.5394,284.931 9.5,279.5C 9.26714,277.938 8.60048,276.605 7.5,275.5C 6.22617,272.24 4.5595,269.24 2.5,266.5C 1.49178,264.456 0.491777,262.456 -0.5,260.5C -0.5,258.167 -0.5,255.833 -0.5,253.5C 5.99814,253.718 12.3315,252.884 18.5,251C 21.1067,249.648 23.44,248.148 25.5,246.5C 25.8333,246.5 26.1667,246.5 26.5,246.5C 28.3344,245.506 30.0011,245.506 31.5,246.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dcbc99\",\n    d: \"M 18.5,255.5 C 19.624,256.809 21.124,257.475 23,257.5C 25.2261,256.967 27.3927,256.3 29.5,255.5C 26.2266,258.144 22.5599,260.311 18.5,262C 14.6402,262.105 10.9735,262.938 7.5,264.5C 3.79641,262.969 3.79641,261.136 7.5,259C 11.2248,257.925 14.8914,256.758 18.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#96b1b0\",\n    d: \"M 134.5,281.5 C 132.337,283.083 130.004,284.416 127.5,285.5C 127.5,284.5 127.5,283.5 127.5,282.5C 127.833,282.5 128.167,282.5 128.5,282.5C 130.5,282.167 132.5,281.833 134.5,281.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#391e33\",\n    d: \"M 151.5,276.5 C 152.167,276.5 152.833,276.5 153.5,276.5C 153.047,281.295 150.381,284.295 145.5,285.5C 144.151,285.154 142.817,284.821 141.5,284.5C 140.167,284.5 139.5,283.833 139.5,282.5C 143.441,284.012 147.107,283.512 150.5,281C 151.38,279.644 151.714,278.144 151.5,276.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a89f81\",\n    d: \"M 234.5,281.5 C 234.5,283.167 234.5,284.833 234.5,286.5C 223.638,289.598 212.971,293.264 202.5,297.5C 200.621,297.607 200.288,297.107 201.5,296C 203.631,295.457 205.631,294.624 207.5,293.5C 207.333,293.167 207.167,292.833 207,292.5C 204.985,293.842 202.818,294.342 200.5,294C 201.672,293.581 202.672,292.915 203.5,292C 213.717,287.878 224.051,284.378 234.5,281.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#345a75\",\n    d: \"M 138.5,280.5 C 138.328,281.492 138.662,282.158 139.5,282.5C 139.5,283.833 140.167,284.5 141.5,284.5C 141.586,285.496 141.252,286.329 140.5,287C 138.509,287.374 136.842,288.207 135.5,289.5C 134.71,290.401 133.71,291.068 132.5,291.5C 131.766,290.292 131.433,288.959 131.5,287.5C 130.167,287.5 128.833,287.5 127.5,287.5C 127.5,286.833 127.5,286.167 127.5,285.5C 130.004,284.416 132.337,283.083 134.5,281.5C 135.833,281.167 137.167,280.833 138.5,280.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c1f1a\",\n    d: \"M -0.5,287.5 C 0.833333,287.5 2.16667,287.5 3.5,287.5C 3.5,290.167 3.5,292.833 3.5,295.5C 4.5,295.5 5.5,295.5 6.5,295.5C 6.5135,300.926 7.18016,306.26 8.5,311.5C 9.16667,312.833 9.83333,312.833 10.5,311.5C 10.7657,308.35 11.7657,305.683 13.5,303.5C 12.6758,306.764 12.3424,310.098 12.5,313.5C 8.16667,313.5 3.83333,313.5 -0.5,313.5C -0.5,304.833 -0.5,296.167 -0.5,287.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d1f1f\",\n    d: \"M 9.5,279.5 C 12.5394,284.931 15.2061,290.598 17.5,296.5C 17.6495,297.552 17.4828,298.552 17,299.5C 16.2597,301.319 15.0931,302.652 13.5,303.5C 11.7657,305.683 10.7657,308.35 10.5,311.5C 9.83333,312.833 9.16667,312.833 8.5,311.5C 7.18016,306.26 6.5135,300.926 6.5,295.5C 5.5,295.5 4.5,295.5 3.5,295.5C 3.5,292.833 3.5,290.167 3.5,287.5C 2.16667,287.5 0.833333,287.5 -0.5,287.5C -0.5,285.167 -0.5,282.833 -0.5,280.5C 2.23769,280.149 4.90436,279.482 7.5,278.5C 8.18346,278.863 8.85013,279.196 9.5,279.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cccbc7\",\n    d: \"M 54.5,271.5 C 54.8333,271.5 55.1667,271.5 55.5,271.5C 57.1667,271.5 58.8333,271.5 60.5,271.5C 60.2746,273.716 61.1079,275.383 63,276.5C 66.8694,274.097 71.0361,272.93 75.5,273C 73.5,274 71.5,275 69.5,276C 70.5,276.333 71.5,276.667 72.5,277C 70.4032,278.61 68.0698,279.777 65.5,280.5C 68.0985,281.031 70.7652,281.198 73.5,281C 71.5,282 69.5,283 67.5,284C 69.5,284 71.5,284 73.5,284C 71.7448,284.72 70.9115,285.887 71,287.5C 72.9874,286.782 74.8208,285.782 76.5,284.5C 76.1667,283.833 75.8333,283.167 75.5,282.5C 79.3178,280.59 83.3178,279.256 87.5,278.5C 87.5,279.5 87.5,280.5 87.5,281.5C 83.7648,282.276 80.4314,283.942 77.5,286.5C 79.7308,286.887 82.0641,287.053 84.5,287C 79.3122,289.105 74.3122,291.271 69.5,293.5C 67.0997,294.927 66.433,294.427 67.5,292C 65.4636,291.546 63.6303,290.713 62,289.5C 59.9534,290.609 57.7867,291.276 55.5,291.5C 49.1287,294.259 42.462,295.759 35.5,296C 40.6207,294.577 40.6207,293.577 35.5,293C 38.028,291.684 38.028,290.517 35.5,289.5C 37.6495,286.259 40.6495,284.925 44.5,285.5C 44.5,284.5 44.5,283.5 44.5,282.5C 41.4816,282.335 38.4816,282.502 35.5,283C 35.9574,283.414 36.2907,283.914 36.5,284.5C 33.7268,285.253 31.0601,286.253 28.5,287.5C 29.325,288.386 30.325,288.719 31.5,288.5C 31.5,290.167 31.5,291.833 31.5,293.5C 28.4304,292.757 26.7637,290.757 26.5,287.5C 24.8212,287.715 23.8212,287.048 23.5,285.5C 25.5273,285.662 27.5273,285.495 29.5,285C 37.336,280.554 45.6693,277.388 54.5,275.5C 54.5,274.167 54.5,272.833 54.5,271.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ad6a51\",\n    d: \"M 127.5,287.5 C 128.833,287.5 130.167,287.5 131.5,287.5C 131.433,288.959 131.766,290.292 132.5,291.5C 129.46,292.68 126.794,294.347 124.5,296.5C 122.328,295.199 119.995,294.199 117.5,293.5C 117.5,292.833 117.5,292.167 117.5,291.5C 120.237,288.783 123.57,287.45 127.5,287.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b2025\",\n    d: \"M 168.5,268.5 C 169.9,269.1 170.9,270.1 171.5,271.5C 170.64,273.614 168.973,274.78 166.5,275C 167.573,276.25 167.573,277.584 166.5,279C 166.978,280.303 167.645,281.469 168.5,282.5C 164.979,282.83 161.979,284.33 159.5,287C 154.666,287.972 150.333,289.806 146.5,292.5C 146.5,293.833 146.5,295.167 146.5,296.5C 145.209,296.263 144.209,296.596 143.5,297.5C 125.055,296.927 125.055,295.26 143.5,292.5C 143.5,291.5 143.5,290.5 143.5,289.5C 140.833,289.5 138.167,289.5 135.5,289.5C 136.842,288.207 138.509,287.374 140.5,287C 141.252,286.329 141.586,285.496 141.5,284.5C 142.817,284.821 144.151,285.154 145.5,285.5C 150.381,284.295 153.047,281.295 153.5,276.5C 157.808,272.716 162.808,270.049 168.5,268.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#252523\",\n    d: \"M 168.5,282.5 C 168.5,282.833 168.5,283.167 168.5,283.5C 167.5,283.833 166.833,284.5 166.5,285.5C 161.783,288.037 157.449,291.204 153.5,295C 150.264,296.786 146.93,298.286 143.5,299.5C 143.5,298.833 143.5,298.167 143.5,297.5C 144.209,296.596 145.209,296.263 146.5,296.5C 146.5,295.167 146.5,293.833 146.5,292.5C 150.333,289.806 154.666,287.972 159.5,287C 161.979,284.33 164.979,282.83 168.5,282.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#231c23\",\n    d: \"M 135.5,289.5 C 138.167,289.5 140.833,289.5 143.5,289.5C 143.5,290.5 143.5,291.5 143.5,292.5C 125.055,295.26 125.055,296.927 143.5,297.5C 143.5,298.167 143.5,298.833 143.5,299.5C 142.486,300.674 141.153,301.34 139.5,301.5C 135.6,300.57 131.6,300.237 127.5,300.5C 127.5,299.5 127.5,298.5 127.5,297.5C 126.209,297.737 125.209,297.404 124.5,296.5C 126.794,294.347 129.46,292.68 132.5,291.5C 133.71,291.068 134.71,290.401 135.5,289.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c2b6a2\",\n    d: \"M 134.5,278.5 C 132.5,279.833 130.5,281.167 128.5,282.5C 128.167,282.5 127.833,282.5 127.5,282.5C 121.932,284.859 116.598,287.692 111.5,291C 107.93,292.31 104.263,293.143 100.5,293.5C 99.2674,297.132 96.6008,298.798 92.5,298.5C 90.0193,295.962 87.686,296.296 85.5,299.5C 84.6143,298.675 84.281,297.675 84.5,296.5C 82.549,296.227 81.049,296.893 80,298.5C 79.5357,297.906 79.369,297.239 79.5,296.5C 79.5,296.167 79.5,295.833 79.5,295.5C 81.5,295.5 83.5,295.5 85.5,295.5C 85.281,294.325 85.6143,293.325 86.5,292.5C 89.1667,291.833 91.8333,291.167 94.5,290.5C 95.3857,289.675 95.719,288.675 95.5,287.5C 96.8333,287.5 98.1667,287.5 99.5,287.5C 100.5,287.5 101.5,287.5 102.5,287.5C 102.917,281.395 105.75,280.062 111,283.5C 111.422,281.574 112.589,280.574 114.5,280.5C 118.849,281.038 123.182,281.371 127.5,281.5C 127.5,280.5 127.5,279.5 127.5,278.5C 129.833,278.5 132.167,278.5 134.5,278.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cecdc7\",\n    d: \"M 69.5,293.5 C 69.56,294.043 69.8933,294.376 70.5,294.5C 74.2653,293.264 77.9319,292.097 81.5,291C 79.9632,292.11 79.2965,293.61 79.5,295.5C 79.5,295.833 79.5,296.167 79.5,296.5C 77.8267,297.343 76.66,298.676 76,300.5C 73.9361,299.409 71.7695,299.242 69.5,300C 66.2694,303.322 62.2694,305.155 57.5,305.5C 57.719,306.675 57.3857,307.675 56.5,308.5C 52.944,306.877 49.944,307.544 47.5,310.5C 44.9135,311.48 42.2469,311.813 39.5,311.5C 39.6567,310.127 39.49,308.793 39,307.5C 35.2695,304.466 35.7695,302.966 40.5,303C 39.3595,302.259 39.3595,301.425 40.5,300.5C 39.9747,299.808 39.3081,299.308 38.5,299C 40.3607,297.138 41.6941,297.638 42.5,300.5C 46.5026,298 50.8359,296.333 55.5,295.5C 55.5,294.167 55.5,292.833 55.5,291.5C 57.7867,291.276 59.9534,290.609 62,289.5C 63.6303,290.713 65.4636,291.546 67.5,292C 66.433,294.427 67.0997,294.927 69.5,293.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#928b6d\",\n    d: \"M 234.5,277.5 C 234.5,278.833 234.5,280.167 234.5,281.5C 224.051,284.378 213.717,287.878 203.5,292C 202.672,292.915 201.672,293.581 200.5,294C 202.818,294.342 204.985,293.842 207,292.5C 207.167,292.833 207.333,293.167 207.5,293.5C 205.631,294.624 203.631,295.457 201.5,296C 200.288,297.107 200.621,297.607 202.5,297.5C 200.221,298.651 197.888,299.651 195.5,300.5C 184.453,304.067 173.786,308.4 163.5,313.5C 158.833,313.5 154.167,313.5 149.5,313.5C 149.47,312.503 149.97,311.836 151,311.5C 165.139,306.208 179.306,301.041 193.5,296C 195.5,295 197.5,294 199.5,293C 198.833,292.833 198.167,292.667 197.5,292.5C 188.521,294.991 179.855,298.158 171.5,302C 170.056,302.781 168.723,302.614 167.5,301.5C 179.083,297.122 190.416,292.456 201.5,287.5C 203.527,287.662 205.527,287.495 207.5,287C 212.462,284.979 217.462,283.145 222.5,281.5C 225.09,280.872 227.423,279.705 229.5,278C 231.134,277.506 232.801,277.34 234.5,277.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#beb3a3\",\n    d: \"M 79.5,296.5 C 79.369,297.239 79.5357,297.906 80,298.5C 81.049,296.893 82.549,296.227 84.5,296.5C 84.281,297.675 84.6143,298.675 85.5,299.5C 87.686,296.296 90.0193,295.962 92.5,298.5C 82.0828,303.657 71.7495,308.657 61.5,313.5C 53.8333,313.5 46.1667,313.5 38.5,313.5C 38.3284,312.508 38.6618,311.842 39.5,311.5C 42.2469,311.813 44.9135,311.48 47.5,310.5C 49.944,307.544 52.944,306.877 56.5,308.5C 57.3857,307.675 57.719,306.675 57.5,305.5C 62.2694,305.155 66.2694,303.322 69.5,300C 71.7695,299.242 73.9361,299.409 76,300.5C 76.66,298.676 77.8267,297.343 79.5,296.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#756e50\",\n    d: \"M 234.5,286.5 C 234.5,288.5 234.5,290.5 234.5,292.5C 223.154,296.275 212.154,300.609 201.5,305.5C 196.426,306.969 191.426,308.636 186.5,310.5C 184.076,310.808 181.743,310.474 179.5,309.5C 185.448,306.905 191.448,304.405 197.5,302C 197.833,301.667 198.167,301.333 198.5,301C 197.552,300.517 196.552,300.351 195.5,300.5C 197.888,299.651 200.221,298.651 202.5,297.5C 212.971,293.264 223.638,289.598 234.5,286.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#92908e\",\n    d: \"M 117.5,291.5 C 117.5,292.167 117.5,292.833 117.5,293.5C 110.485,298.095 102.985,302.095 95,305.5C 92.7447,307.043 91.2447,309.043 90.5,311.5C 90.5,310.5 90.5,309.5 90.5,308.5C 90.2786,307.265 89.6119,306.265 88.5,305.5C 91.5672,300.968 95.9006,298.801 101.5,299C 106.685,296.214 112.019,293.714 117.5,291.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e2124\",\n    d: \"M 117.5,293.5 C 119.995,294.199 122.328,295.199 124.5,296.5C 125.209,297.404 126.209,297.737 127.5,297.5C 127.5,298.5 127.5,299.5 127.5,300.5C 131.6,300.237 135.6,300.57 139.5,301.5C 132.833,305.5 126.167,309.5 119.5,313.5C 109.833,313.5 100.167,313.5 90.5,313.5C 90.5,312.833 90.5,312.167 90.5,311.5C 91.2447,309.043 92.7447,307.043 95,305.5C 102.985,302.095 110.485,298.095 117.5,293.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#706b52\",\n    d: \"M 166.5,285.5 C 166.414,286.496 166.748,287.329 167.5,288C 165.792,289.51 164.126,291.01 162.5,292.5C 165.443,295.18 165.11,295.847 161.5,294.5C 155.639,298.097 149.639,301.097 143.5,303.5C 143.808,305.924 143.474,308.257 142.5,310.5C 139.873,311.058 137.54,312.058 135.5,313.5C 130.167,313.5 124.833,313.5 119.5,313.5C 126.167,309.5 132.833,305.5 139.5,301.5C 141.153,301.34 142.486,300.674 143.5,299.5C 146.93,298.286 150.264,296.786 153.5,295C 157.449,291.204 161.783,288.037 166.5,285.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#090a07\",\n    d: \"M 234.5,292.5 C 234.5,299.5 234.5,306.5 234.5,313.5C 221.833,313.5 209.167,313.5 196.5,313.5C 197.171,312.153 197.171,310.986 196.5,310C 198.986,309.344 200.653,307.844 201.5,305.5C 212.154,300.609 223.154,296.275 234.5,292.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a39c8f\",\n    d: \"M 127.5,282.5 C 127.5,283.5 127.5,284.5 127.5,285.5C 127.5,286.167 127.5,286.833 127.5,287.5C 123.57,287.45 120.237,288.783 117.5,291.5C 112.019,293.714 106.685,296.214 101.5,299C 95.9006,298.801 91.5672,300.968 88.5,305.5C 89.6119,306.265 90.2786,307.265 90.5,308.5C 88.9317,307.527 87.265,307.36 85.5,308C 83.3826,309.769 81.3826,311.602 79.5,313.5C 73.5,313.5 67.5,313.5 61.5,313.5C 71.7495,308.657 82.0828,303.657 92.5,298.5C 96.6008,298.798 99.2674,297.132 100.5,293.5C 104.263,293.143 107.93,292.31 111.5,291C 116.598,287.692 121.932,284.859 127.5,282.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7c7656\",\n    d: \"M 186.5,279.5 C 185.653,280.966 184.32,281.8 182.5,282C 184.167,282.333 185.833,282.667 187.5,283C 185.212,283.822 182.878,284.489 180.5,285C 184.505,286.098 188.005,285.265 191,282.5C 191.494,284.134 191.66,285.801 191.5,287.5C 194.833,287.5 198.167,287.5 201.5,287.5C 190.416,292.456 179.083,297.122 167.5,301.5C 168.723,302.614 170.056,302.781 171.5,302C 179.855,298.158 188.521,294.991 197.5,292.5C 198.167,292.667 198.833,292.833 199.5,293C 197.5,294 195.5,295 193.5,296C 179.306,301.041 165.139,306.208 151,311.5C 149.97,311.836 149.47,312.503 149.5,313.5C 144.833,313.5 140.167,313.5 135.5,313.5C 137.54,312.058 139.873,311.058 142.5,310.5C 143.474,308.257 143.808,305.924 143.5,303.5C 149.639,301.097 155.639,298.097 161.5,294.5C 165.11,295.847 165.443,295.18 162.5,292.5C 164.126,291.01 165.792,289.51 167.5,288C 166.748,287.329 166.414,286.496 166.5,285.5C 166.833,284.5 167.5,283.833 168.5,283.5C 174.796,283.426 180.796,282.092 186.5,279.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9fb586\",\n    d: \"M 90.5,308.5 C 90.5,309.5 90.5,310.5 90.5,311.5C 90.5,312.167 90.5,312.833 90.5,313.5C 86.8333,313.5 83.1667,313.5 79.5,313.5C 81.3826,311.602 83.3826,309.769 85.5,308C 87.265,307.36 88.9317,307.527 90.5,308.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#65775c\",\n    d: \"M 17.5,296.5 C 21.2455,301.652 24.2455,307.319 26.5,313.5C 21.8333,313.5 17.1667,313.5 12.5,313.5C 12.3424,310.098 12.6758,306.764 13.5,303.5C 15.0931,302.652 16.2597,301.319 17,299.5C 17.4828,298.552 17.6495,297.552 17.5,296.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#615b40\",\n    d: \"M 195.5,300.5 C 196.552,300.351 197.552,300.517 198.5,301C 198.167,301.333 197.833,301.667 197.5,302C 191.448,304.405 185.448,306.905 179.5,309.5C 181.743,310.474 184.076,310.808 186.5,310.5C 184.739,311.313 183.072,312.313 181.5,313.5C 175.5,313.5 169.5,313.5 163.5,313.5C 173.786,308.4 184.453,304.067 195.5,300.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d190f\",\n    d: \"M 201.5,305.5 C 200.653,307.844 198.986,309.344 196.5,310C 197.171,310.986 197.171,312.153 196.5,313.5C 191.5,313.5 186.5,313.5 181.5,313.5C 183.072,312.313 184.739,311.313 186.5,310.5C 191.426,308.636 196.426,306.969 201.5,305.5 Z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgProject);\nexport default __webpack_public_path__ + \"static/media/project.f524df23b0141113e3219fecf04bb1fd.svg\";\nexport { ForwardRef as ReactComponent };","import projectImage from \"../assets/images/project.svg\";\r\nimport { useEffect, useRef } from \"react\";\r\nimport ScrollReveal from \"scrollreveal\";\r\n\r\nexport default function A_year() {\r\n    const revealRef1 = useRef(null);\r\n    const revealRef2 = useRef(null);\r\n    const revealRef3 = useRef(null);\r\n\r\n    useEffect( () => {\r\n        ScrollReveal().reveal( revealRef1.current, {\r\n            origin: 'center',\r\n            distance: '0px',\r\n            duration: 1200,\r\n            delay: 1000,\r\n            easing: 'ease-in-out',\r\n        })\r\n        ScrollReveal().reveal( revealRef2.current, {\r\n            origin: 'left',\r\n            distance: '100px',\r\n            duration: 1200,\r\n            delay: 200,\r\n            easing: 'ease-in-out',\r\n        })\r\n        ScrollReveal().reveal( revealRef3.current, {\r\n            origin: 'bottom',\r\n            distance: '100px',\r\n            duration: 1200,\r\n            delay: 450,\r\n            easing: 'ease-in-out',\r\n        })\r\n    })\r\n    return (\r\n        <>\r\n            <div className=\"container-fluid d-sm-flex p-0 mt-5\">\r\n                <div className=\"card col-sm-6 col-12 border-0 card-header text-center text-sm-end py-5 px-5 px-sm-2 align-items-center\">\r\n                    <div ref={revealRef2}>\r\n                        <p className=\"text-title display-6 text-primary\">A Year In Indonesia</p>\r\n                        <p className=\"text-content\">\r\n                            An illustrated guide & memoir of 13 magical months spent exploring the city of ginkgo leaves.\r\n                        </p>\r\n                        <a href=\"#\" className=\"w-100\">\r\n                            <button className=\"btn btn-dark rounded-pill px-3 mt-2 py-2 fw-semibold\">Buy Now</button>\r\n                        </a>\r\n                    </div>\r\n            </div>\r\n            <div className=\"card col-sm-6 col-12 border-0 card-header py-5 px-5 px-sm-2 pt-sm-5 pt-0 align-items-center\">\r\n                <img src={projectImage} alt=\"project image\" id=\"content-image\"ref={revealRef3} />\r\n            </div>\r\n            </div>\r\n            <div className=\"container p-3 mb-4 mt-2\">\r\n                <div className=\"row d-flex justify-content-center\">\r\n                    <h1 className=\"text-center text-success fw-normal p-5 w-75\" style={{ fontFamily: 'Advent Pro', letterSpacing : '2px' }} ref={revealRef1}>\r\n                        To search deeper and get updates and more products, please check my <span><a href=\"/shop-more\" className=\"text-dark display-6\">Shop</a></span> ♡\r\n                    </h1>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r]);}return n;},_extends.apply(null,arguments);}import*as React from\"react\";function SvgNotebook(_ref,svgRef){let{title,titleId,...props}=_ref;return/*#__PURE__*/React.createElement(\"svg\",_extends({xmlns:\"http://www.w3.org/2000/svg\",width:\"564px\",height:\"650px\",style:{shapeRendering:\"geometricPrecision\",textRendering:\"geometricPrecision\",imageRendering:\"optimizeQuality\",fillRule:\"evenodd\",clipRule:\"evenodd\"},xmlnsXlink:\"http://www.w3.org/1999/xlink\",ref:svgRef,\"aria-labelledby\":titleId},props),title?/*#__PURE__*/React.createElement(\"title\",{id:titleId},title):null,/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#0b1013\",d:\"M 421.5,-0.5 C 459.833,-0.5 498.167,-0.5 536.5,-0.5C 536.5,4.83333 536.5,10.1667 536.5,15.5C 530.833,15.5 525.167,15.5 519.5,15.5C 519.367,11.1988 517.2,8.53211 513,7.5C 491.2,8.48385 469.367,8.81718 447.5,8.5C 447.319,11.1951 446.319,13.5284 444.5,15.5C 441.813,15.3359 439.146,15.5026 436.5,16C 437.5,16.3333 438.5,16.6667 439.5,17C 435.898,17.6346 435.232,18.968 437.5,21C 435.527,21.4955 433.527,21.6621 431.5,21.5C 431.5,20.5 431.5,19.5 431.5,18.5C 432.552,18.6495 433.552,18.4828 434.5,18C 433.939,16.4345 434.606,15.1011 436.5,14C 431.95,11.7059 427.283,10.0392 422.5,9C 423.846,10.6423 423.513,11.3089 421.5,11C 419.652,9.13898 419.652,6.97232 421.5,4.5C 420.465,2.87162 420.465,1.20495 421.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#0a1011\",d:\"M 536.5,-0.5 C 538.833,-0.5 541.167,-0.5 543.5,-0.5C 543.5,4.83333 543.5,10.1667 543.5,15.5C 544.833,15.5 546.167,15.5 547.5,15.5C 547.66,17.1992 547.494,18.8659 547,20.5C 546.385,18.8839 545.385,17.5505 544,16.5C 543.667,20.1667 543.333,23.8333 543,27.5C 542.174,24.2072 541.674,20.8738 541.5,17.5C 536.833,17.5 532.167,17.5 527.5,17.5C 527.5,22.1667 527.5,26.8333 527.5,31.5C 522.821,31.3342 518.155,31.5008 513.5,32C 521.351,34.4699 521.351,36.9699 513.5,39.5C 501.479,36.4086 489.812,32.2419 478.5,27C 475.648,26.7306 472.982,25.8972 470.5,24.5C 469.914,24.7093 469.414,25.0426 469,25.5C 467.736,23.393 465.903,22.393 463.5,22.5C 463.5,20.1667 463.5,17.8333 463.5,15.5C 457.167,15.5 450.833,15.5 444.5,15.5C 446.319,13.5284 447.319,11.1951 447.5,8.5C 469.367,8.81718 491.2,8.48385 513,7.5C 517.2,8.53211 519.367,11.1988 519.5,15.5C 525.167,15.5 530.833,15.5 536.5,15.5C 536.5,10.1667 536.5,4.83333 536.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a2917f\",d:\"M 23.5,-0.5 C 31.8333,-0.5 40.1667,-0.5 48.5,-0.5C 48.8588,1.37099 49.8588,2.87099 51.5,4C 50.1456,5.29369 48.8123,5.46036 47.5,4.5C 46.479,5.00161 46.3123,5.66828 47,6.5C 49.6928,8.23807 52.5261,9.73807 55.5,11C 50.2206,11.1023 45.054,10.269 40,8.5C 39.2352,8.56993 38.7352,8.90326 38.5,9.5C 35.4844,8.43804 32.4844,7.27137 29.5,6C 30.3081,5.69238 30.9747,5.19238 31.5,4.5C 29.0296,2.33148 26.3629,0.664813 23.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f2efe0\",d:\"M 101.5,6.5 C 99.9142,7.14814 98.2475,7.64814 96.5,8C 99.3771,8.95615 102.044,10.2895 104.5,12C 101.16,12.1643 98.66,13.6643 97,16.5C 96.6012,16.2716 96.4346,15.9382 96.5,15.5C 96.5,15.1667 96.5,14.8333 96.5,14.5C 98.0878,13.3647 98.4212,12.0314 97.5,10.5C 92.9672,7.40233 88.3005,4.569 83.5,2C 86.3044,1.54028 88.9711,2.04028 91.5,3.5C 95.9858,-0.701353 99.9858,-0.36802 103.5,4.5C 102.757,5.18185 102.091,5.84851 101.5,6.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c9c1b0\",d:\"M 103.5,-0.5 C 119.5,-0.5 135.5,-0.5 151.5,-0.5C 146.006,1.45606 140.339,2.28939 134.5,2C 136.891,3.30863 136.891,4.30863 134.5,5C 136.857,6.22 136.524,7.05334 133.5,7.5C 128.795,8.90116 124.129,8.73449 119.5,7C 113.872,5.22462 108.539,2.72462 103.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ebe6d8\",d:\"M 151.5,-0.5 C 179.5,-0.5 207.5,-0.5 235.5,-0.5C 225.302,1.57846 225.302,2.57846 235.5,2.5C 235.008,4.84086 233.841,6.84086 232,8.5C 229.367,6.83994 226.534,6.33994 223.5,7C 224.989,8.46847 226.323,9.96847 227.5,11.5C 224.482,11.6646 221.482,11.498 218.5,11C 209.487,7.77968 200.154,6.77968 190.5,8C 191.5,8.33333 192.5,8.66667 193.5,9C 188.875,10.1624 184.208,10.4958 179.5,10C 181.382,9.80192 183.048,9.30192 184.5,8.5C 187.578,7.79761 190.578,6.79761 193.5,5.5C 192.975,4.80762 192.308,4.30762 191.5,4C 185.553,3.85256 179.72,3.01923 174,1.5C 170.875,2.25601 167.709,2.58935 164.5,2.5C 162.77,1.08821 161.27,1.42155 160,3.5C 156.274,2.81517 152.607,2.48184 149,2.5C 145.519,3.12268 142.019,3.62268 138.5,4C 137.304,4.65431 137.304,5.15431 138.5,5.5C 140.343,4.06134 142.01,4.22801 143.5,6C 141.5,7.33333 139.5,8.66667 137.5,10C 140.861,9.27538 144.194,8.60871 147.5,8C 144.869,9.32673 142.202,10.6601 139.5,12C 145.768,12.7028 151.935,12.2028 158,10.5C 159.5,10.6667 161,10.8333 162.5,11C 161.5,11.3333 160.5,11.6667 159.5,12C 164.864,12.8295 170.198,12.6628 175.5,11.5C 174.873,10.5832 174.539,9.58317 174.5,8.5C 175.167,8.5 175.833,8.5 176.5,8.5C 176.5,9.5 176.5,10.5 176.5,11.5C 184.196,11.1692 191.862,11.5025 199.5,12.5C 194.188,13.5341 188.854,13.5341 183.5,12.5C 177.521,13.6638 171.521,14.6638 165.5,15.5C 161.5,15.1667 157.5,14.8333 153.5,14.5C 147.023,14.7489 140.357,14.2489 133.5,13C 136.934,11.4833 136.934,9.65 133.5,7.5C 136.524,7.05334 136.857,6.22 134.5,5C 136.891,4.30863 136.891,3.30863 134.5,2C 140.339,2.28939 146.006,1.45606 151.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dcd4c5\",d:\"M 164.5,2.5 C 167.091,3.45803 171.758,3.95803 178.5,4C 177.5,4.33333 176.5,4.66667 175.5,5C 176.833,5.66667 178.167,6.33333 179.5,7C 170.995,6.98874 162.495,6.48874 154,5.5C 151.652,5.25824 149.818,6.09158 148.5,8C 155.352,8.77409 162.186,9.60742 169,10.5C 170.597,9.11528 172.43,8.44862 174.5,8.5C 174.539,9.58317 174.873,10.5832 175.5,11.5C 170.198,12.6628 164.864,12.8295 159.5,12C 160.5,11.6667 161.5,11.3333 162.5,11C 161,10.8333 159.5,10.6667 158,10.5C 151.935,12.2028 145.768,12.7028 139.5,12C 142.202,10.6601 144.869,9.32673 147.5,8C 144.194,8.60871 140.861,9.27538 137.5,10C 139.5,8.66667 141.5,7.33333 143.5,6C 142.01,4.22801 140.343,4.06134 138.5,5.5C 137.304,5.15431 137.304,4.65431 138.5,4C 142.019,3.62268 145.519,3.12268 149,2.5C 152.607,2.48184 156.274,2.81517 160,3.5C 161.27,1.42155 162.77,1.08821 164.5,2.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#171919\",d:\"M 281.5,-0.5 C 287.167,-0.5 292.833,-0.5 298.5,-0.5C 297.37,2.88418 296.037,6.21751 294.5,9.5C 293.833,9.83333 293.167,10.1667 292.5,10.5C 289.93,9.38307 287.263,8.54974 284.5,8C 282.456,7.50167 281.122,6.33501 280.5,4.5C 280.629,2.7839 280.962,1.11723 281.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#1d1f20\",d:\"M 327.5,-0.5 C 328.5,-0.5 329.5,-0.5 330.5,-0.5C 333.915,1.27933 337.581,2.61267 341.5,3.5C 342.422,6.46682 341.255,8.46682 338,9.5C 333.947,9.07549 330.28,7.74216 327,5.5C 326.51,3.45464 326.677,1.45464 327.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c6c6c0\",d:\"M 336.5,-0.5 C 347.5,-0.5 358.5,-0.5 369.5,-0.5C 378.822,3.16358 388.155,6.83025 397.5,10.5C 397.04,11.7647 395.707,12.9314 393.5,14C 394.28,15.073 394.113,16.2396 393,17.5C 392.692,16.6919 392.192,16.0253 391.5,15.5C 389.608,18.0443 387.775,18.0443 386,15.5C 385.536,16.0944 385.369,16.7611 385.5,17.5C 368.903,11.9444 352.569,5.9444 336.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c0b8a8\",d:\"M 184.5,8.5 C 181.833,8.5 179.167,8.5 176.5,8.5C 175.833,8.5 175.167,8.5 174.5,8.5C 172.43,8.44862 170.597,9.11528 169,10.5C 162.186,9.60742 155.352,8.77409 148.5,8C 149.818,6.09158 151.652,5.25824 154,5.5C 162.495,6.48874 170.995,6.98874 179.5,7C 178.167,6.33333 176.833,5.66667 175.5,5C 176.5,4.66667 177.5,4.33333 178.5,4C 171.758,3.95803 167.091,3.45803 164.5,2.5C 167.709,2.58935 170.875,2.25601 174,1.5C 179.72,3.01923 185.553,3.85256 191.5,4C 192.308,4.30762 192.975,4.80762 193.5,5.5C 190.578,6.79761 187.578,7.79761 184.5,8.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#928170\",d:\"M 20.5,-0.5 C 21.5,-0.5 22.5,-0.5 23.5,-0.5C 26.3629,0.664813 29.0296,2.33148 31.5,4.5C 30.9747,5.19238 30.3081,5.69238 29.5,6C 32.4844,7.27137 35.4844,8.43804 38.5,9.5C 45.0287,11.0019 51.1953,13.3352 57,16.5C 57.6917,17.4368 57.525,18.1034 56.5,18.5C 51.9662,17.5713 47.4662,16.2379 43,14.5C 42.5,14.6667 42,14.8333 41.5,15C 43.7173,16.2754 46.0506,17.2754 48.5,18C 49.6956,18.6543 49.6956,19.1543 48.5,19.5C 43.135,17.4799 37.8017,15.4799 32.5,13.5C 24.6563,12.3123 20.6563,7.64559 20.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dcd5c6\",d:\"M 76.5,-0.5 C 85.5,-0.5 94.5,-0.5 103.5,-0.5C 108.539,2.72462 113.872,5.22462 119.5,7C 124.129,8.73449 128.795,8.90116 133.5,7.5C 136.934,9.65 136.934,11.4833 133.5,13C 140.357,14.2489 147.023,14.7489 153.5,14.5C 143.819,15.1136 134.152,15.7803 124.5,16.5C 121.032,15.3998 117.532,14.3998 114,13.5C 112.089,14.4069 110.256,14.4069 108.5,13.5C 105.718,15.6289 102.718,17.2955 99.5,18.5C 98.6676,17.6715 99.001,16.8382 100.5,16C 104.821,14.3888 107.821,11.3888 109.5,7C 106.876,7.64982 104.209,7.48315 101.5,6.5C 102.091,5.84851 102.757,5.18185 103.5,4.5C 99.9858,-0.36802 95.9858,-0.701353 91.5,3.5C 88.9711,2.04028 86.3044,1.54028 83.5,2C 88.3005,4.569 92.9672,7.40233 97.5,10.5C 98.4212,12.0314 98.0878,13.3647 96.5,14.5C 94.0991,11.2059 90.7658,9.37254 86.5,9C 83.8029,5.15364 80.4696,1.98697 76.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b1b3b4\",d:\"M 298.5,-0.5 C 299.167,-0.5 299.833,-0.5 300.5,-0.5C 299.208,3.51113 297.541,7.34446 295.5,11C 299.725,13.4109 304.225,15.2442 309,16.5C 311.393,12.7194 313.56,8.71942 315.5,4.5C 312.597,2.64472 309.597,0.97805 306.5,-0.5C 307.833,-0.5 309.167,-0.5 310.5,-0.5C 314.413,1.53368 318.579,3.20035 323,4.5C 324.659,3.18431 325.825,1.51764 326.5,-0.5C 326.833,-0.5 327.167,-0.5 327.5,-0.5C 326.677,1.45464 326.51,3.45464 327,5.5C 330.28,7.74216 333.947,9.07549 338,9.5C 341.255,8.46682 342.422,6.46682 341.5,3.5C 343.027,3.42702 344.027,4.09368 344.5,5.5C 342.491,7.37777 342.158,9.54444 343.5,12C 347.628,14.1162 351.961,15.1162 356.5,15C 357.252,14.3292 357.586,13.4959 357.5,12.5C 358.338,12.8417 358.672,13.5084 358.5,14.5C 358.33,15.8221 358.663,16.9887 359.5,18C 363.162,19.1632 366.828,20.3299 370.5,21.5C 372.54,20.4297 373.874,18.7631 374.5,16.5C 375.623,15.2426 376.289,15.5759 376.5,17.5C 374.926,19.1016 374.259,21.1016 374.5,23.5C 376.553,23.4021 378.22,24.0687 379.5,25.5C 378.833,25.5 378.5,25.8333 378.5,26.5C 374.385,24.7387 370.218,23.072 366,21.5C 362.267,25.7607 360.767,30.5941 361.5,36C 363.723,36.5662 365.723,37.3995 367.5,38.5C 366.508,38.3284 365.842,38.6618 365.5,39.5C 360.792,36.9802 355.792,35.3135 350.5,34.5C 351.167,33.8333 351.833,33.1667 352.5,32.5C 354.67,33.768 356.837,33.768 359,32.5C 360.449,29.2682 361.616,25.9349 362.5,22.5C 358.849,18.2248 354.182,16.3914 348.5,17C 346.93,20.6363 345.263,24.1363 343.5,27.5C 343.167,27.5 342.833,27.5 342.5,27.5C 343.769,23.3669 345.436,19.3669 347.5,15.5C 343.077,12.0494 338.077,10.5494 332.5,11C 330.93,14.6363 329.263,18.1363 327.5,21.5C 327.167,21.5 326.833,21.5 326.5,21.5C 328.101,17.9577 329.435,14.291 330.5,10.5C 330.167,9.83333 329.833,9.16667 329.5,8.5C 325.828,7.16499 322.161,5.83166 318.5,4.5C 317.353,4.81777 316.519,5.48444 316,6.5C 313.944,10.2677 312.778,14.2677 312.5,18.5C 313.791,18.2627 314.791,18.596 315.5,19.5C 315.5,19.8333 315.5,20.1667 315.5,20.5C 311.307,18.5988 306.973,17.4322 302.5,17C 300.69,21.4523 299.023,25.9523 297.5,30.5C 302.42,32.1261 307.42,33.4595 312.5,34.5C 311.833,35.1667 311.167,35.8333 310.5,36.5C 307.353,34.7499 304.019,33.9165 300.5,34C 298.912,37.6284 297.246,41.1284 295.5,44.5C 295.167,44.5 294.833,44.5 294.5,44.5C 295.444,40.6649 296.778,36.9983 298.5,33.5C 298.167,32.8333 297.833,32.1667 297.5,31.5C 289.906,28.8647 282.572,25.8647 275.5,22.5C 281.894,24.1906 288.227,26.1906 294.5,28.5C 295.647,28.1822 296.481,27.5156 297,26.5C 299.056,22.7323 300.222,18.7323 300.5,14.5C 293.396,12.4466 286.396,10.1133 279.5,7.5C 279.263,6.20895 279.596,5.20895 280.5,4.5C 281.122,6.33501 282.456,7.50167 284.5,8C 287.263,8.54974 289.93,9.38307 292.5,10.5C 293.167,10.1667 293.833,9.83333 294.5,9.5C 296.037,6.21751 297.37,2.88418 298.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#141719\",d:\"M 300.5,-0.5 C 302.5,-0.5 304.5,-0.5 306.5,-0.5C 309.597,0.97805 312.597,2.64472 315.5,4.5C 313.56,8.71942 311.393,12.7194 309,16.5C 304.225,15.2442 299.725,13.4109 295.5,11C 297.541,7.34446 299.208,3.51113 300.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#181a17\",d:\"M 310.5,-0.5 C 315.833,-0.5 321.167,-0.5 326.5,-0.5C 325.825,1.51764 324.659,3.18431 323,4.5C 318.579,3.20035 314.413,1.53368 310.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#afa290\",d:\"M 54.5,-0.5 C 61.8333,-0.5 69.1667,-0.5 76.5,-0.5C 80.4696,1.98697 83.8029,5.15364 86.5,9C 90.7658,9.37254 94.0991,11.2059 96.5,14.5C 96.5,14.8333 96.5,15.1667 96.5,15.5C 94.1561,14.3284 91.8228,14.3284 89.5,15.5C 87.7295,14.9646 87.3961,14.1313 88.5,13C 86.9751,11.9914 85.3084,11.4914 83.5,11.5C 83.0488,15.1224 81.0488,16.6224 77.5,16C 70.3066,9.99369 62.6399,4.49369 54.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#131619\",d:\"M 326.5,21.5 C 325.791,22.404 324.791,22.7373 323.5,22.5C 321.064,21.129 318.397,20.129 315.5,19.5C 314.791,18.596 313.791,18.2627 312.5,18.5C 312.778,14.2677 313.944,10.2677 316,6.5C 316.519,5.48444 317.353,4.81777 318.5,4.5C 322.161,5.83166 325.828,7.16499 329.5,8.5C 329.833,9.16667 330.167,9.83333 330.5,10.5C 329.435,14.291 328.101,17.9577 326.5,21.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#202022\",d:\"M 344.5,5.5 C 348.845,6.8375 353.178,8.17083 357.5,9.5C 357.5,10.5 357.5,11.5 357.5,12.5C 357.586,13.4959 357.252,14.3292 356.5,15C 351.961,15.1162 347.628,14.1162 343.5,12C 342.158,9.54444 342.491,7.37777 344.5,5.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#978977\",d:\"M 13.5,-0.5 C 14.5,-0.5 15.5,-0.5 16.5,-0.5C 17.1415,6.2278 18.9749,12.5611 22,18.5C 22.4966,20.8098 22.6633,23.1432 22.5,25.5C 20.901,25.7678 19.5676,25.4345 18.5,24.5C 19.0768,20.1309 18.2435,16.1309 16,12.5C 15.089,15.612 13.9223,18.612 12.5,21.5C 13.207,24.0428 14.5403,26.2095 16.5,28C 16.1667,28.3333 15.8333,28.6667 15.5,29C 16.717,30.6477 17.5503,32.481 18,34.5C 18.3742,33.5838 18.8742,32.7504 19.5,32C 20.825,32.1484 21.9916,31.9817 23,31.5C 23.6924,32.0253 24.1924,32.6919 24.5,33.5C 23.5153,35.0983 23.3486,36.765 24,38.5C 24.1183,36.4267 25.1183,35.0933 27,34.5C 29.1542,35.2741 31.3208,35.9408 33.5,36.5C 35.7505,36.1814 37.7505,36.6814 39.5,38C 38.9056,38.4643 38.2389,38.631 37.5,38.5C 34.2869,38.19 31.2869,38.5233 28.5,39.5C 26.742,39.8769 25.0754,40.5435 23.5,41.5C 21.9411,40.9264 20.4411,40.2598 19,39.5C 17.2458,41.25 15.0792,41.9167 12.5,41.5C 11.0351,40.5943 10.0351,39.261 9.5,37.5C 9.84569,36.3044 10.3457,36.3044 11,37.5C 12.4596,33.2023 11.1262,30.2023 7,28.5C 5.19518,25.8779 5.19518,23.2113 7,20.5C 7.30762,21.3081 7.80762,21.9747 8.5,22.5C 9.32654,18.5408 9.82654,14.5408 10,10.5C 11,13.1667 12,13.1667 13,10.5C 13.346,8.78178 13.846,7.11511 14.5,5.5C 13.6518,3.59136 13.3184,1.59136 13.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#202220\",d:\"M 374.5,16.5 C 373.874,18.7631 372.54,20.4297 370.5,21.5C 366.828,20.3299 363.162,19.1632 359.5,18C 358.663,16.9887 358.33,15.8221 358.5,14.5C 359.404,13.791 359.737,12.791 359.5,11.5C 364.797,12.3173 369.797,13.984 374.5,16.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dfe0de\",d:\"M 280.5,-0.5 C 280.833,-0.5 281.167,-0.5 281.5,-0.5C 280.962,1.11723 280.629,2.7839 280.5,4.5C 279.596,5.20895 279.263,6.20895 279.5,7.5C 276.845,11.312 274.845,15.4787 273.5,20C 274.056,21.0111 274.722,21.8444 275.5,22.5C 274.325,22.281 273.325,22.6143 272.5,23.5C 271.392,26.0591 270.059,28.3924 268.5,30.5C 271.654,19.8551 275.654,9.52172 280.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b1a494\",d:\"M -0.5,-0.5 C 4.16667,-0.5 8.83333,-0.5 13.5,-0.5C 13.3184,1.59136 13.6518,3.59136 14.5,5.5C 13.846,7.11511 13.346,8.78178 13,10.5C 12,13.1667 11,13.1667 10,10.5C 9.82654,14.5408 9.32654,18.5408 8.5,22.5C 7.80762,21.9747 7.30762,21.3081 7,20.5C 5.19518,23.2113 5.19518,25.8779 7,28.5C 11.1262,30.2023 12.4596,33.2023 11,37.5C 10.3457,36.3044 9.84569,36.3044 9.5,37.5C 10.0351,39.261 11.0351,40.5943 12.5,41.5C 13.9002,42.1001 14.9002,43.1001 15.5,44.5C 11.3811,45.647 7.38113,45.147 3.5,43C 5.5,43 7.5,43 9.5,43C 7.07936,39.6469 3.74603,35.8136 -0.5,31.5C -0.5,20.8333 -0.5,10.1667 -0.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#0a1013\",d:\"M 543.5,-0.5 C 550.167,-0.5 556.833,-0.5 563.5,-0.5C 563.5,4.16667 563.5,8.83333 563.5,13.5C 556.467,25.8951 549.801,38.5618 543.5,51.5C 542.833,52.1667 542.167,52.8333 541.5,53.5C 540.836,52.352 540.669,51.0187 541,49.5C 539.636,50.2583 538.469,49.7583 537.5,48C 531.384,46.9608 525.551,45.1275 520,42.5C 520,43.8333 520,45.1667 520,46.5C 517.948,45.2766 515.781,44.2766 513.5,43.5C 514.025,42.8076 514.692,42.3076 515.5,42C 514.244,41.5831 513.577,40.7498 513.5,39.5C 521.351,36.9699 521.351,34.4699 513.5,32C 518.155,31.5008 522.821,31.3342 527.5,31.5C 527.5,26.8333 527.5,22.1667 527.5,17.5C 532.167,17.5 536.833,17.5 541.5,17.5C 541.674,20.8738 542.174,24.2072 543,27.5C 543.333,23.8333 543.667,20.1667 544,16.5C 545.385,17.5505 546.385,18.8839 547,20.5C 547.494,18.8659 547.66,17.1992 547.5,15.5C 546.167,15.5 544.833,15.5 543.5,15.5C 543.5,10.1667 543.5,4.83333 543.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d0c9b7\",d:\"M 48.5,-0.5 C 50.5,-0.5 52.5,-0.5 54.5,-0.5C 62.6399,4.49369 70.3066,9.99369 77.5,16C 81.0488,16.6224 83.0488,15.1224 83.5,11.5C 85.3084,11.4914 86.9751,11.9914 88.5,13C 87.3961,14.1313 87.7295,14.9646 89.5,15.5C 91.8228,14.3284 94.1561,14.3284 96.5,15.5C 96.4346,15.9382 96.6012,16.2716 97,16.5C 98.66,13.6643 101.16,12.1643 104.5,12C 102.044,10.2895 99.3771,8.95615 96.5,8C 98.2475,7.64814 99.9142,7.14814 101.5,6.5C 104.209,7.48315 106.876,7.64982 109.5,7C 107.821,11.3888 104.821,14.3888 100.5,16C 99.001,16.8382 98.6676,17.6715 99.5,18.5C 98.3744,19.8583 98.3744,21.1916 99.5,22.5C 100.192,21.9747 100.692,21.3081 101,20.5C 101.49,21.7932 101.657,23.1266 101.5,24.5C 102.93,24.4208 104.264,24.7542 105.5,25.5C 106.281,24.2634 107.281,23.2634 108.5,22.5C 109.477,24.4109 110.143,26.4109 110.5,28.5C 109.677,31.977 109.177,35.6437 109,39.5C 108.667,39.8333 108.333,40.1667 108,40.5C 107.821,37.4465 107.321,34.4465 106.5,31.5C 105.41,32.727 104.076,33.5604 102.5,34C 102.348,36.4473 102.348,38.9473 102.5,41.5C 101.867,43.7855 100.534,45.4522 98.5,46.5C 97.9672,44.4318 97.9672,42.4318 98.5,40.5C 97.8076,41.0253 97.3076,41.6919 97,42.5C 94.219,40.4599 91.219,38.7933 88,37.5C 86.9125,39.9316 86.4125,39.5983 86.5,36.5C 88.9248,36.316 88.9248,35.6493 86.5,34.5C 89.3719,33.2175 92.2053,33.2175 95,34.5C 95.5,33.3333 96.3333,32.5 97.5,32C 93.529,31.9154 89.8623,30.9154 86.5,29C 87.92,26.7911 89.5867,24.7911 91.5,23C 87.9968,23.8713 84.3302,24.7047 80.5,25.5C 79.062,25.2811 77.7287,24.7811 76.5,24C 79.8612,23.9464 82.8612,22.9464 85.5,21C 81.8297,20.7208 78.163,20.8875 74.5,21.5C 74.6261,24.4678 76.1261,26.4678 79,27.5C 79.6667,28.1667 79.6667,28.8333 79,29.5C 75.172,26.5852 71.172,23.9186 67,21.5C 63.0745,22.2501 59.5745,21.2501 56.5,18.5C 57.525,18.1034 57.6917,17.4368 57,16.5C 51.1953,13.3352 45.0287,11.0019 38.5,9.5C 38.7352,8.90326 39.2352,8.56993 40,8.5C 45.054,10.269 50.2206,11.1023 55.5,11C 52.5261,9.73807 49.6928,8.23807 47,6.5C 46.3123,5.66828 46.479,5.00161 47.5,4.5C 48.8123,5.46036 50.1456,5.29369 51.5,4C 49.8588,2.87099 48.8588,1.37099 48.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#141618\",d:\"M 279.5,7.5 C 286.396,10.1133 293.396,12.4466 300.5,14.5C 300.222,18.7323 299.056,22.7323 297,26.5C 296.481,27.5156 295.647,28.1822 294.5,28.5C 288.227,26.1906 281.894,24.1906 275.5,22.5C 274.722,21.8444 274.056,21.0111 273.5,20C 274.845,15.4787 276.845,11.312 279.5,7.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aea091\",d:\"M 16.5,-0.5 C 17.8333,-0.5 19.1667,-0.5 20.5,-0.5C 20.6563,7.64559 24.6563,12.3123 32.5,13.5C 34.3243,15.498 36.991,17.1647 40.5,18.5C 39.3998,19.5585 38.0664,20.3918 36.5,21C 38.2464,21.4709 39.913,22.1376 41.5,23C 37.0988,23.3556 32.7655,22.8556 28.5,21.5C 27.8333,21.8333 27.1667,22.1667 26.5,22.5C 32.0565,23.744 37.5565,25.0774 43,26.5C 43.414,26.0426 43.914,25.7093 44.5,25.5C 46.878,27.552 49.2113,29.552 51.5,31.5C 52.922,32.925 54.5887,33.925 56.5,34.5C 56.1583,35.3382 55.4916,35.6716 54.5,35.5C 52.513,34.8358 50.8463,33.6692 49.5,32C 40.1662,30.6088 31.1662,28.4421 22.5,25.5C 22.6633,23.1432 22.4966,20.8098 22,18.5C 18.9749,12.5611 17.1415,6.2278 16.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bdb8aa\",d:\"M 235.5,-0.5 C 245.167,-0.5 254.833,-0.5 264.5,-0.5C 258.283,8.78704 252.616,18.4537 247.5,28.5C 245.407,27.9553 243.407,27.122 241.5,26C 245.245,26.0354 245.912,25.0354 243.5,23C 240.204,22.5426 237.037,21.7093 234,20.5C 233.667,21.8333 233.333,23.1667 233,24.5C 232.722,23.5842 232.222,22.9175 231.5,22.5C 231.5,21.8333 231.167,21.5 230.5,21.5C 229.192,20.7677 227.858,19.9344 226.5,19C 230.33,19.0486 233.663,17.8819 236.5,15.5C 232.656,14.0179 228.656,13.1845 224.5,13C 225.737,12.7679 226.737,12.2679 227.5,11.5C 226.323,9.96847 224.989,8.46847 223.5,7C 226.534,6.33994 229.367,6.83994 232,8.5C 233.841,6.84086 235.008,4.84086 235.5,2.5C 225.302,2.57846 225.302,1.57846 235.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8b8c89\",d:\"M 330.5,-0.5 C 332.5,-0.5 334.5,-0.5 336.5,-0.5C 352.569,5.9444 368.903,11.9444 385.5,17.5C 398.293,22.5348 410.96,27.5348 423.5,32.5C 422.508,32.3284 421.842,32.6618 421.5,33.5C 417.426,31.397 413.093,30.0636 408.5,29.5C 408.5,28.1667 407.833,27.5 406.5,27.5C 402.004,25.5861 397.337,24.2527 392.5,23.5C 392.5,22.1667 391.833,21.5 390.5,21.5C 385.833,20.1662 381.166,18.8329 376.5,17.5C 376.289,15.5759 375.623,15.2426 374.5,16.5C 369.797,13.984 364.797,12.3173 359.5,11.5C 359.737,12.791 359.404,13.791 358.5,14.5C 358.672,13.5084 358.338,12.8417 357.5,12.5C 357.5,11.5 357.5,10.5 357.5,9.5C 353.178,8.17083 348.845,6.8375 344.5,5.5C 344.027,4.09368 343.027,3.42702 341.5,3.5C 337.581,2.61267 333.915,1.27933 330.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#15181b\",d:\"M 315.5,20.5 C 316.124,20.9169 316.457,21.5836 316.5,22.5C 315.156,26.516 313.822,30.516 312.5,34.5C 307.42,33.4595 302.42,32.1261 297.5,30.5C 299.023,25.9523 300.69,21.4523 302.5,17C 306.973,17.4322 311.307,18.5988 315.5,20.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#141718\",d:\"M 369.5,-0.5 C 386.833,-0.5 404.167,-0.5 421.5,-0.5C 420.465,1.20495 420.465,2.87162 421.5,4.5C 419.652,6.97232 419.652,9.13898 421.5,11C 423.513,11.3089 423.846,10.6423 422.5,9C 427.283,10.0392 431.95,11.7059 436.5,14C 434.606,15.1011 433.939,16.4345 434.5,18C 433.552,18.4828 432.552,18.6495 431.5,18.5C 431.5,19.5 431.5,20.5 431.5,21.5C 433.527,21.6621 435.527,21.4955 437.5,21C 435.232,18.968 435.898,17.6346 439.5,17C 438.5,16.6667 437.5,16.3333 436.5,16C 439.146,15.5026 441.813,15.3359 444.5,15.5C 450.833,15.5 457.167,15.5 463.5,15.5C 463.5,17.8333 463.5,20.1667 463.5,22.5C 465.903,22.393 467.736,23.393 469,25.5C 469.414,25.0426 469.914,24.7093 470.5,24.5C 472.982,25.8972 475.648,26.7306 478.5,27C 489.812,32.2419 501.479,36.4086 513.5,39.5C 513.577,40.7498 514.244,41.5831 515.5,42C 514.692,42.3076 514.025,42.8076 513.5,43.5C 515.781,44.2766 517.948,45.2766 520,46.5C 520,45.1667 520,43.8333 520,42.5C 525.551,45.1275 531.384,46.9608 537.5,48C 538.469,49.7583 539.636,50.2583 541,49.5C 540.669,51.0187 540.836,52.352 541.5,53.5C 540.522,57.515 538.188,58.8484 534.5,57.5C 530.991,55.7745 527.325,54.4411 523.5,53.5C 520.341,51.9963 517.007,50.663 513.5,49.5C 512.446,49.6799 511.446,50.0133 510.5,50.5C 505.609,48.5933 500.776,46.5933 496,44.5C 495.439,45.0219 494.772,45.3552 494,45.5C 484.514,42.0607 475.014,38.7273 465.5,35.5C 443.106,26.809 420.44,18.4757 397.5,10.5C 388.155,6.83025 378.822,3.16358 369.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#3b3e3d\",d:\"M 400.5,2.5 C 401.222,2.91753 401.722,3.5842 402,4.5C 402.414,4.04265 402.914,3.70931 403.5,3.5C 407.222,5.01609 410.889,6.68275 414.5,8.5C 415.583,9.36495 415.749,10.365 415,11.5C 410.168,10.508 405.335,8.67467 400.5,6C 399.316,4.85453 399.316,3.68787 400.5,2.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#16181a\",d:\"M 342.5,27.5 C 342.44,28.0431 342.107,28.3764 341.5,28.5C 337.112,27.1531 332.779,25.6531 328.5,24C 327.748,23.3292 327.414,22.4959 327.5,21.5C 329.263,18.1363 330.93,14.6363 332.5,11C 338.077,10.5494 343.077,12.0494 347.5,15.5C 345.436,19.3669 343.769,23.3669 342.5,27.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e8e2d4\",d:\"M 32.5,13.5 C 37.8017,15.4799 43.135,17.4799 48.5,19.5C 49.6956,19.1543 49.6956,18.6543 48.5,18C 46.0506,17.2754 43.7173,16.2754 41.5,15C 42,14.8333 42.5,14.6667 43,14.5C 47.4662,16.2379 51.9662,17.5713 56.5,18.5C 59.5745,21.2501 63.0745,22.2501 67,21.5C 71.172,23.9186 75.172,26.5852 79,29.5C 79.6667,28.8333 79.6667,28.1667 79,27.5C 76.1261,26.4678 74.6261,24.4678 74.5,21.5C 78.163,20.8875 81.8297,20.7208 85.5,21C 82.8612,22.9464 79.8612,23.9464 76.5,24C 77.7287,24.7811 79.062,25.2811 80.5,25.5C 84.3302,24.7047 87.9968,23.8713 91.5,23C 89.5867,24.7911 87.92,26.7911 86.5,29C 89.8623,30.9154 93.529,31.9154 97.5,32C 96.3333,32.5 95.5,33.3333 95,34.5C 92.2053,33.2175 89.3719,33.2175 86.5,34.5C 88.9248,35.6493 88.9248,36.316 86.5,36.5C 85.1184,35.1995 83.4517,34.3661 81.5,34C 82.3081,33.6924 82.9747,33.1924 83.5,32.5C 78.7229,31.7239 74.5562,29.7239 71,26.5C 70.5,26.6667 70,26.8333 69.5,27C 70.7112,27.8928 70.7112,28.7261 69.5,29.5C 66.4101,27.6112 63.2434,25.9445 60,24.5C 59.6322,25.91 58.7989,26.91 57.5,27.5C 55.6225,27.3775 53.7891,27.3775 52,27.5C 48.5895,23.8878 44.7562,20.8878 40.5,18.5C 36.991,17.1647 34.3243,15.498 32.5,13.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#5b5955\",d:\"M 259.5,17.5 C 257.27,25.2018 254.27,32.5351 250.5,39.5C 250.167,39.5 249.833,39.5 249.5,39.5C 249.167,38.8333 248.833,38.1667 248.5,37.5C 249.848,32.9526 251.682,28.6193 254,24.5C 255.371,21.7339 257.204,19.4006 259.5,17.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#131618\",d:\"M 323.5,23.5 C 326.682,24.5945 329.682,25.9278 332.5,27.5C 331.167,31.8333 329.833,36.1667 328.5,40.5C 324.156,39.4422 319.823,38.2755 315.5,37C 314.643,36.3109 313.977,35.4776 313.5,34.5C 315.098,30.8736 316.598,27.2069 318,23.5C 319.828,22.2475 321.661,22.2475 323.5,23.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#1e1e1e\",d:\"M 376.5,17.5 C 381.166,18.8329 385.833,20.1662 390.5,21.5C 390.697,25.8063 388.697,27.8063 384.5,27.5C 383.07,26.4625 381.403,25.7959 379.5,25.5C 378.22,24.0687 376.553,23.4021 374.5,23.5C 374.259,21.1016 374.926,19.1016 376.5,17.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c6c0ae\",d:\"M 143.5,52.5 C 141.833,52.5 140.167,52.5 138.5,52.5C 138.264,54.9732 136.931,56.6399 134.5,57.5C 133.289,56.7261 133.289,55.8928 134.5,55C 133.667,54.8333 132.833,54.6667 132,54.5C 126.961,54.9316 122.127,54.9316 117.5,54.5C 122.136,50.566 127.469,48.7327 133.5,49C 131.355,49.7431 131.189,50.5765 133,51.5C 135.345,49.3786 138.179,48.212 141.5,48C 142.554,46.6124 142.72,45.1124 142,43.5C 139.5,42.3333 137,41.1667 134.5,40C 140.776,35.6961 147.442,32.1961 154.5,29.5C 164.1,27.9533 173.1,29.62 181.5,34.5C 175.144,38.6678 169.311,38.3345 164,33.5C 162.437,34.1021 162.604,34.9354 164.5,36C 164,36.1667 163.5,36.3333 163,36.5C 161.711,34.9146 160.211,33.5813 158.5,32.5C 156.128,33.3628 156.128,34.5295 158.5,36C 156.089,37.5892 153.922,37.0892 152,34.5C 150.374,34.8541 148.541,34.8541 146.5,34.5C 147.206,39.0745 148.873,43.2412 151.5,47C 149.333,49.8333 147.167,52.6667 145,55.5C 146.828,51.7864 147.495,47.7864 147,43.5C 146.139,46.7305 144.972,49.7305 143.5,52.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#232326\",d:\"M 392.5,23.5 C 397.337,24.2527 402.004,25.5861 406.5,27.5C 406.167,29.5 405.833,31.5 405.5,33.5C 399.956,32.9322 394.956,31.0988 390.5,28C 390.899,26.2725 391.566,24.7725 392.5,23.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#1a1b1d\",d:\"M 352.5,32.5 C 348.651,32.0819 345.651,30.4152 343.5,27.5C 345.263,24.1363 346.93,20.6363 348.5,17C 354.182,16.3914 358.849,18.2248 362.5,22.5C 361.616,25.9349 360.449,29.2682 359,32.5C 356.837,33.768 354.67,33.768 352.5,32.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ded8c9\",d:\"M 227.5,11.5 C 226.737,12.2679 225.737,12.7679 224.5,13C 228.656,13.1845 232.656,14.0179 236.5,15.5C 233.663,17.8819 230.33,19.0486 226.5,19C 227.858,19.9344 229.192,20.7677 230.5,21.5C 223.16,20.2468 221.994,21.9135 227,26.5C 227.49,27.7932 227.657,29.1266 227.5,30.5C 226.325,30.281 225.325,30.6143 224.5,31.5C 224.175,35.6675 222.175,38.6675 218.5,40.5C 218.167,40 217.833,39.5 217.5,39C 218.848,37.4447 219.514,35.6113 219.5,33.5C 218.339,29.542 217.839,25.542 218,21.5C 222.676,18.3866 227.843,16.8866 233.5,17C 230.041,15.2945 226.541,15.1278 223,16.5C 221.737,14.2031 219.903,13.3698 217.5,14C 216,15.5 214.5,17 213,18.5C 213.521,23.604 212.021,28.104 208.5,32C 209.044,33.585 209.711,35.085 210.5,36.5C 207.946,37.388 205.279,37.7214 202.5,37.5C 203.807,36.1984 203.807,34.865 202.5,33.5C 198.878,32.6747 195.211,32.1747 191.5,32C 195.455,30.6452 199.789,29.4785 204.5,28.5C 206.731,28.0191 206.898,27.3524 205,26.5C 199.337,27.6366 193.837,29.1366 188.5,31C 185.633,31.8007 182.966,31.6341 180.5,30.5C 182.857,30.6633 185.19,30.4966 187.5,30C 186.167,29.3333 184.833,28.6667 183.5,28C 185.246,27.5291 186.913,26.8624 188.5,26C 185.655,26.049 182.822,26.549 180,27.5C 177.046,27.4056 176.879,26.9056 179.5,26C 169.668,25.568 160.335,23.2347 151.5,19C 160.63,20.1293 169.964,20.6293 179.5,20.5C 182.405,20.2764 185.072,19.4431 187.5,18C 179.942,17.8474 172.609,17.0141 165.5,15.5C 171.521,14.6638 177.521,13.6638 183.5,12.5C 188.854,13.5341 194.188,13.5341 199.5,12.5C 191.862,11.5025 184.196,11.1692 176.5,11.5C 176.5,10.5 176.5,9.5 176.5,8.5C 179.167,8.5 181.833,8.5 184.5,8.5C 183.048,9.30192 181.382,9.80192 179.5,10C 184.208,10.4958 188.875,10.1624 193.5,9C 192.5,8.66667 191.5,8.33333 190.5,8C 200.154,6.77968 209.487,7.77968 218.5,11C 221.482,11.498 224.482,11.6646 227.5,11.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e7e0d2\",d:\"M 18.5,24.5 C 19.5676,25.4345 20.901,25.7678 22.5,25.5C 31.1662,28.4421 40.1662,30.6088 49.5,32C 50.8463,33.6692 52.513,34.8358 54.5,35.5C 54.9528,36.4584 55.6195,37.2917 56.5,38C 55.6667,38.1667 54.8333,38.3333 54,38.5C 47.7173,36.0887 41.5507,34.7553 35.5,34.5C 39.5138,34.6655 43.5138,34.4988 47.5,34C 39.5018,32.406 31.5018,30.7394 23.5,29C 22.5,28.6667 21.5,28.3333 20.5,28C 20.8333,27.6667 21.1667,27.3333 21.5,27C 19.2852,26.8295 17.2852,26.1628 15.5,25C 16.448,24.5172 17.448,24.3505 18.5,24.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c2b9a8\",d:\"M 153.5,14.5 C 157.5,14.8333 161.5,15.1667 165.5,15.5C 172.609,17.0141 179.942,17.8474 187.5,18C 185.072,19.4431 182.405,20.2764 179.5,20.5C 169.964,20.6293 160.63,20.1293 151.5,19C 160.335,23.2347 169.668,25.568 179.5,26C 176.879,26.9056 177.046,27.4056 180,27.5C 182.822,26.549 185.655,26.049 188.5,26C 186.913,26.8624 185.246,27.5291 183.5,28C 184.833,28.6667 186.167,29.3333 187.5,30C 185.19,30.4966 182.857,30.6633 180.5,30.5C 172.37,27.7782 164.036,25.7782 155.5,24.5C 149.204,27.462 142.538,29.2953 135.5,30C 134.294,31.0177 134.627,31.5177 136.5,31.5C 139.464,30.5282 142.464,30.3615 145.5,31C 141.704,34.3094 137.371,36.476 132.5,37.5C 130.884,36.8848 129.551,35.8848 128.5,34.5C 125.972,35.4978 125.972,36.3311 128.5,37C 124.637,40.555 123.637,39.7217 125.5,34.5C 128.824,33.1724 131.824,31.339 134.5,29C 139.889,26.4194 145.556,24.7527 151.5,24C 151.957,23.586 152.291,23.086 152.5,22.5C 150.754,21.6047 148.92,20.938 147,20.5C 139.797,23.9692 132.297,26.8025 124.5,29C 121.485,31.8634 119.651,35.3634 119,39.5C 118.667,39.1667 118.333,38.8333 118,38.5C 117,39.8333 116,41.1667 115,42.5C 114.148,39.152 114.814,36.152 117,33.5C 117.333,33.8333 117.667,34.1667 118,34.5C 118.232,31.262 119.732,28.762 122.5,27C 121.365,26.2506 120.365,26.4173 119.5,27.5C 118.094,29.026 116.928,30.6927 116,32.5C 115.788,29.2423 115.288,26.0757 114.5,23C 115.603,21.3196 115.27,19.8196 113.5,18.5C 112.645,20.6077 111.978,22.7744 111.5,25C 112.434,30.7849 112.768,36.6182 112.5,42.5C 112.737,43.791 112.404,44.791 111.5,45.5C 111.687,39.7876 111.354,34.1209 110.5,28.5C 110.143,26.4109 109.477,24.4109 108.5,22.5C 107.281,23.2634 106.281,24.2634 105.5,25.5C 104.264,24.7542 102.93,24.4208 101.5,24.5C 101.657,23.1266 101.49,21.7932 101,20.5C 100.692,21.3081 100.192,21.9747 99.5,22.5C 98.3744,21.1916 98.3744,19.8583 99.5,18.5C 102.718,17.2955 105.718,15.6289 108.5,13.5C 110.256,14.4069 112.089,14.4069 114,13.5C 117.532,14.3998 121.032,15.3998 124.5,16.5C 134.152,15.7803 143.819,15.1136 153.5,14.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e0e0db\",d:\"M 397.5,10.5 C 420.44,18.4757 443.106,26.809 465.5,35.5C 464.778,35.9175 464.278,36.5842 464,37.5C 462.703,36.2164 461.536,36.3831 460.5,38C 463.167,39.3333 463.167,40.6667 460.5,42C 461.451,42.7175 461.617,43.5509 461,44.5C 459.448,43.0339 457.614,42.0339 455.5,41.5C 454.537,41.9698 454.537,42.6365 455.5,43.5C 444.971,39.4348 434.304,35.7681 423.5,32.5C 410.96,27.5348 398.293,22.5348 385.5,17.5C 385.369,16.7611 385.536,16.0944 386,15.5C 387.775,18.0443 389.608,18.0443 391.5,15.5C 392.192,16.0253 392.692,16.6919 393,17.5C 394.113,16.2396 394.28,15.073 393.5,14C 395.707,12.9314 397.04,11.7647 397.5,10.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b0a293\",d:\"M 18.5,24.5 C 17.448,24.3505 16.448,24.5172 15.5,25C 17.2852,26.1628 19.2852,26.8295 21.5,27C 21.1667,27.3333 20.8333,27.6667 20.5,28C 21.5,28.3333 22.5,28.6667 23.5,29C 31.5018,30.7394 39.5018,32.406 47.5,34C 43.5138,34.4988 39.5138,34.6655 35.5,34.5C 34.1667,34.5 33.5,35.1667 33.5,36.5C 31.3208,35.9408 29.1542,35.2741 27,34.5C 25.1183,35.0933 24.1183,36.4267 24,38.5C 23.3486,36.765 23.5153,35.0983 24.5,33.5C 24.1924,32.6919 23.6924,32.0253 23,31.5C 21.9916,31.9817 20.825,32.1484 19.5,32C 18.8742,32.7504 18.3742,33.5838 18,34.5C 17.5503,32.481 16.717,30.6477 15.5,29C 15.8333,28.6667 16.1667,28.3333 16.5,28C 14.5403,26.2095 13.207,24.0428 12.5,21.5C 13.9223,18.612 15.089,15.612 16,12.5C 18.2435,16.1309 19.0768,20.1309 18.5,24.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#29292d\",d:\"M 408.5,29.5 C 413.093,30.0636 417.426,31.397 421.5,33.5C 423.237,37.3383 421.904,39.3383 417.5,39.5C 413.999,38.0631 410.499,36.3965 407,34.5C 406.797,32.6092 407.297,30.9425 408.5,29.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#151718\",d:\"M 275.5,22.5 C 282.572,25.8647 289.906,28.8647 297.5,31.5C 297.833,32.1667 298.167,32.8333 298.5,33.5C 296.778,36.9983 295.444,40.6649 294.5,44.5C 293.399,45.5983 292.066,45.765 290.5,45C 283.056,42.4441 275.722,39.6108 268.5,36.5C 267.769,34.5988 267.769,32.5988 268.5,30.5C 270.059,28.3924 271.392,26.0591 272.5,23.5C 273.325,22.6143 274.325,22.281 275.5,22.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a09f9a\",d:\"M 268.5,-0.5 C 272.5,-0.5 276.5,-0.5 280.5,-0.5C 275.654,9.52172 271.654,19.8551 268.5,30.5C 267.685,31.4293 266.852,32.4293 266,33.5C 262.943,43.2644 259.109,52.5978 254.5,61.5C 252.111,65.0042 249.111,65.5042 245.5,63C 245.438,60.0617 245.438,57.2284 245.5,54.5C 247.453,49.5939 249.12,44.5939 250.5,39.5C 254.27,32.5351 257.27,25.2018 259.5,17.5C 261.628,11.9257 264.795,6.92568 269,2.5C 269.47,1.42317 269.303,0.423175 268.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#2c2b2d\",d:\"M 424.5,35.5 C 428.693,35.9526 432.693,37.1192 436.5,39C 437.973,39.7096 438.64,40.8762 438.5,42.5C 438.144,43.8699 437.31,44.8699 436,45.5C 431.002,44.4137 426.502,42.4137 422.5,39.5C 422.994,37.9745 423.661,36.6412 424.5,35.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ccc4b3\",d:\"M 35.5,34.5 C 41.5507,34.7553 47.7173,36.0887 54,38.5C 54.8333,38.3333 55.6667,38.1667 56.5,38C 55.6195,37.2917 54.9528,36.4584 54.5,35.5C 55.4916,35.6716 56.1583,35.3382 56.5,34.5C 59.4815,37.8166 62.4815,41.15 65.5,44.5C 62.4961,43.9114 59.6627,42.9114 57,41.5C 53.896,41.8507 54.0626,42.3507 57.5,43C 54.134,43.3301 50.8006,42.9967 47.5,42C 44.2239,40.3077 40.8905,39.141 37.5,38.5C 38.2389,38.631 38.9056,38.4643 39.5,38C 37.7505,36.6814 35.7505,36.1814 33.5,36.5C 33.5,35.1667 34.1667,34.5 35.5,34.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#121518\",d:\"M 334.5,28.5 C 338.924,29.4183 343.258,30.7517 347.5,32.5C 347.833,33.1667 348.167,33.8333 348.5,34.5C 347.149,38.5264 345.815,42.5264 344.5,46.5C 343.5,46.5 342.5,46.5 341.5,46.5C 337.232,45.0748 333.232,43.0748 329.5,40.5C 331.179,36.4787 332.846,32.4787 334.5,28.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#686d73\",d:\"M 338.5,35.5 C 340.97,36.3603 341.137,37.6936 339,39.5C 337.489,38.436 337.323,37.1026 338.5,35.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ac9f8e\",d:\"M 197.5,37.5 C 196.138,39.8661 194.305,41.8661 192,43.5C 189.505,42.1485 187.172,42.4819 185,44.5C 181.868,43.0072 178.701,41.5072 175.5,40C 177.708,39.8091 179.708,39.3091 181.5,38.5C 186.813,37.9022 192.146,37.5688 197.5,37.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ece8da\",d:\"M 230.5,21.5 C 231.167,21.5 231.5,21.8333 231.5,22.5C 231.336,25.1873 231.503,27.854 232,30.5C 234.52,31.2066 237.02,32.04 239.5,33C 236.711,33.2414 234.044,33.908 231.5,35C 232.152,38.7584 230.485,41.4251 226.5,43C 227.899,43.5946 229.232,43.4279 230.5,42.5C 231.132,45.0297 232.132,47.363 233.5,49.5C 232.233,51.3707 232.233,53.2041 233.5,55C 231.801,55.3932 230.301,54.8932 229,53.5C 226.467,55.8956 225.967,55.229 227.5,51.5C 225.505,50.1101 224.172,50.6101 223.5,53C 223.905,53.9454 224.572,54.6121 225.5,55C 224.833,55.3333 224.167,55.6667 223.5,56C 225.493,57.5922 227.493,59.0922 229.5,60.5C 226.135,62.5668 222.468,63.9001 218.5,64.5C 215.805,66.1776 213.139,67.8442 210.5,69.5C 211.536,65.9973 212.869,62.6639 214.5,59.5C 215.151,58.9094 215.818,58.2427 216.5,57.5C 218.599,59.5342 220.932,59.8676 223.5,58.5C 220.633,53.4643 220.967,48.7977 224.5,44.5C 224.167,44.1667 223.833,43.8333 223.5,43.5C 219.775,46.1999 215.775,48.0333 211.5,49C 213.037,47.8904 213.703,46.3904 213.5,44.5C 211.508,44.3285 209.842,44.9951 208.5,46.5C 208.167,46.1667 207.833,45.8333 207.5,45.5C 209.394,44.0546 211.06,42.3879 212.5,40.5C 212.771,38.6203 212.104,37.287 210.5,36.5C 209.711,35.085 209.044,33.585 208.5,32C 212.021,28.104 213.521,23.604 213,18.5C 214.5,17 216,15.5 217.5,14C 219.903,13.3698 221.737,14.2031 223,16.5C 226.541,15.1278 230.041,15.2945 233.5,17C 227.843,16.8866 222.676,18.3866 218,21.5C 217.839,25.542 218.339,29.542 219.5,33.5C 219.514,35.6113 218.848,37.4447 217.5,39C 217.833,39.5 218.167,40 218.5,40.5C 222.175,38.6675 224.175,35.6675 224.5,31.5C 225.325,30.6143 226.325,30.281 227.5,30.5C 227.657,29.1266 227.49,27.7932 227,26.5C 221.994,21.9135 223.16,20.2468 230.5,21.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bfb8a8\",d:\"M -0.5,31.5 C 3.74603,35.8136 7.07936,39.6469 9.5,43C 7.5,43 5.5,43 3.5,43C 7.38113,45.147 11.3811,45.647 15.5,44.5C 14.4019,45.397 14.4019,46.2303 15.5,47C 18.6996,47.1015 21.6996,47.7681 24.5,49C 22.5,49.3333 20.5,49.6667 18.5,50C 20.433,50.2511 22.2663,50.7511 24,51.5C 24.414,51.0426 24.914,50.7093 25.5,50.5C 27.5101,51.5019 29.5101,52.5019 31.5,53.5C 31,53.8333 30.5,54.1667 30,54.5C 23.8801,52.7581 17.7135,51.5914 11.5,51C 13.087,51.8624 14.7536,52.5291 16.5,53C 12.4043,52.8785 8.57095,51.7118 5,49.5C 4.2352,49.5699 3.7352,49.9033 3.5,50.5C 2.29208,49.7659 0.95875,49.4326 -0.5,49.5C -0.5,43.5 -0.5,37.5 -0.5,31.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cdc1b3\",d:\"M 210.5,36.5 C 212.104,37.287 212.771,38.6203 212.5,40.5C 210.876,40.3601 209.71,41.0267 209,42.5C 208.167,41.5 207.333,40.5 206.5,39.5C 203.252,40.6454 199.919,41.4787 196.5,42C 198.725,42.8759 200.725,44.0426 202.5,45.5C 201.47,45.5545 200.303,45.8878 199,46.5C 198.805,47.8193 198.972,49.1526 199.5,50.5C 199.12,51.1331 198.787,51.7997 198.5,52.5C 197.583,51.8728 196.583,51.5394 195.5,51.5C 194.833,51.5 194.167,51.5 193.5,51.5C 191.044,47.4419 187.377,45.7753 182.5,46.5C 180.833,45.8333 179.167,45.1667 177.5,44.5C 175.691,43.5188 174.357,42.0188 173.5,40C 171.618,39.8019 169.952,39.3019 168.5,38.5C 172.833,38.5 177.167,38.5 181.5,38.5C 179.708,39.3091 177.708,39.8091 175.5,40C 178.701,41.5072 181.868,43.0072 185,44.5C 187.172,42.4819 189.505,42.1485 192,43.5C 194.305,41.8661 196.138,39.8661 197.5,37.5C 199.167,37.5 200.833,37.5 202.5,37.5C 205.279,37.7214 207.946,37.388 210.5,36.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8f8b85\",d:\"M 248.5,37.5 C 248.833,38.1667 249.167,38.8333 249.5,39.5C 247.285,47.207 243.951,54.207 239.5,60.5C 241.883,52.5542 244.883,44.8875 248.5,37.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#1d1f22\",d:\"M 417.5,40.5 C 420.687,41.7568 423.854,43.0901 427,44.5C 427.667,45.8333 427.667,47.1667 427,48.5C 425.259,51.3093 424.092,54.3093 423.5,57.5C 419.751,57.2494 416.085,56.5828 412.5,55.5C 411.019,54.5788 409.686,53.4121 408.5,52C 409.754,47.9915 411.421,44.1582 413.5,40.5C 414.7,39.7084 416.033,39.7084 417.5,40.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#373739\",d:\"M 455.5,45.5 C 455.697,49.8063 453.697,51.8063 449.5,51.5C 446.769,49.8019 443.769,48.4685 440.5,47.5C 439.548,45.9547 439.215,44.288 439.5,42.5C 440.416,42.0183 441.416,41.685 442.5,41.5C 446.863,42.8439 451.196,44.1772 455.5,45.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#edeee9\",d:\"M 465.5,35.5 C 475.014,38.7273 484.514,42.0607 494,45.5C 494.772,45.3552 495.439,45.0219 496,44.5C 500.776,46.5933 505.609,48.5933 510.5,50.5C 511.446,50.0133 512.446,49.6799 513.5,49.5C 517.007,50.663 520.341,51.9963 523.5,53.5C 520.453,54.29 518.786,56.29 518.5,59.5C 517.833,58.8333 517.167,58.1667 516.5,57.5C 515.549,58.3256 514.549,58.4922 513.5,58C 512.323,55.281 510.657,53.781 508.5,53.5C 507.808,54.0253 507.308,54.6919 507,55.5C 506.667,55.1667 506.333,54.8333 506,54.5C 505.544,55.7441 506.044,56.5774 507.5,57C 505.112,57.8651 503.612,57.0317 503,54.5C 502.25,55.1258 501.416,55.6258 500.5,56C 502.102,57.6416 503.435,59.4749 504.5,61.5C 488.167,55.5 471.833,49.5 455.5,43.5C 454.537,42.6365 454.537,41.9698 455.5,41.5C 457.614,42.0339 459.448,43.0339 461,44.5C 461.617,43.5509 461.451,42.7175 460.5,42C 463.167,40.6667 463.167,39.3333 460.5,38C 461.536,36.3831 462.703,36.2164 464,37.5C 464.278,36.5842 464.778,35.9175 465.5,35.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aea693\",d:\"M 28.5,39.5 C 31.2869,38.5233 34.2869,38.19 37.5,38.5C 40.8905,39.141 44.2239,40.3077 47.5,42C 50.8006,42.9967 54.134,43.3301 57.5,43C 54.0626,42.3507 53.896,41.8507 57,41.5C 59.6627,42.9114 62.4961,43.9114 65.5,44.5C 67.8957,46.1375 70.5624,47.3042 73.5,48C 68.6521,48.1141 63.9854,48.9475 59.5,50.5C 57.233,52.7869 55.5663,52.6202 54.5,50C 49.6486,48.7423 45.3153,49.5756 41.5,52.5C 39.1463,51.9399 36.813,51.2733 34.5,50.5C 35.0253,49.8076 35.6919,49.3076 36.5,49C 42.5389,48.6635 48.5389,47.9968 54.5,47C 51.1667,46.6667 47.8333,46.3333 44.5,46C 47.6685,45.1364 47.3352,43.8031 43.5,42C 38.471,41.2106 33.471,40.3773 28.5,39.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d8d4c2\",d:\"M 212.5,40.5 C 211.06,42.3879 209.394,44.0546 207.5,45.5C 207.833,45.8333 208.167,46.1667 208.5,46.5C 209.842,44.9951 211.508,44.3285 213.5,44.5C 213.703,46.3904 213.037,47.8904 211.5,49C 215.775,48.0333 219.775,46.1999 223.5,43.5C 223.833,43.8333 224.167,44.1667 224.5,44.5C 220.967,48.7977 220.633,53.4643 223.5,58.5C 220.932,59.8676 218.599,59.5342 216.5,57.5C 215.818,58.2427 215.151,58.9094 214.5,59.5C 211.109,57.5971 208.275,54.9305 206,51.5C 205,51.8333 204,52.1667 203,52.5C 201.923,51.5705 200.756,50.9038 199.5,50.5C 198.972,49.1526 198.805,47.8193 199,46.5C 200.303,45.8878 201.47,45.5545 202.5,45.5C 200.725,44.0426 198.725,42.8759 196.5,42C 199.919,41.4787 203.252,40.6454 206.5,39.5C 207.333,40.5 208.167,41.5 209,42.5C 209.71,41.0267 210.876,40.3601 212.5,40.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c5bead\",d:\"M 40.5,18.5 C 44.7562,20.8878 48.5895,23.8878 52,27.5C 53.7891,27.3775 55.6225,27.3775 57.5,27.5C 58.7989,26.91 59.6322,25.91 60,24.5C 63.2434,25.9445 66.4101,27.6112 69.5,29.5C 70.7112,28.7261 70.7112,27.8928 69.5,27C 70,26.8333 70.5,26.6667 71,26.5C 74.5562,29.7239 78.7229,31.7239 83.5,32.5C 82.9747,33.1924 82.3081,33.6924 81.5,34C 83.4517,34.3661 85.1184,35.1995 86.5,36.5C 86.4125,39.5983 86.9125,39.9316 88,37.5C 91.219,38.7933 94.219,40.4599 97,42.5C 97.3076,41.6919 97.8076,41.0253 98.5,40.5C 97.9672,42.4318 97.9672,44.4318 98.5,46.5C 97.9924,48.2327 97.159,48.566 96,47.5C 92.2055,50.6297 88.0388,51.1297 83.5,49C 78.6057,47.1888 73.6057,45.5221 68.5,44C 66.2385,43.2988 65.2385,42.1322 65.5,40.5C 74.161,42.4098 82.4943,45.0765 90.5,48.5C 92.8496,48.2921 94.5162,47.1254 95.5,45C 92.5544,44.1939 89.8877,42.8605 87.5,41C 83.294,40.7392 79.1274,40.2392 75,39.5C 74.1268,39.7355 73.2935,40.0688 72.5,40.5C 70.1178,38.9293 67.4512,38.096 64.5,38C 60.8276,34.9239 56.8276,32.4239 52.5,30.5C 51.8933,30.6236 51.56,30.9569 51.5,31.5C 49.2113,29.552 46.878,27.552 44.5,25.5C 43.914,25.7093 43.414,26.0426 43,26.5C 37.5565,25.0774 32.0565,23.744 26.5,22.5C 27.1667,22.1667 27.8333,21.8333 28.5,21.5C 32.7655,22.8556 37.0988,23.3556 41.5,23C 39.913,22.1376 38.2464,21.4709 36.5,21C 38.0664,20.3918 39.3998,19.5585 40.5,18.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e8e2d3\",d:\"M 180.5,30.5 C 182.966,31.6341 185.633,31.8007 188.5,31C 193.837,29.1366 199.337,27.6366 205,26.5C 206.898,27.3524 206.731,28.0191 204.5,28.5C 199.789,29.4785 195.455,30.6452 191.5,32C 195.211,32.1747 198.878,32.6747 202.5,33.5C 203.807,34.865 203.807,36.1984 202.5,37.5C 200.833,37.5 199.167,37.5 197.5,37.5C 192.146,37.5688 186.813,37.9022 181.5,38.5C 177.167,38.5 172.833,38.5 168.5,38.5C 164.958,38.1872 161.625,38.5206 158.5,39.5C 159.582,40.5938 160.248,41.9271 160.5,43.5C 159.528,46.4642 159.362,49.4642 160,52.5C 160.654,51.3044 161.154,51.3044 161.5,52.5C 160.557,55.1092 158.89,57.1092 156.5,58.5C 157.263,59.7193 158.263,60.7193 159.5,61.5C 157.51,61.8411 155.51,62.1744 153.5,62.5C 153.232,56.5501 153.066,50.5501 153,44.5C 152.229,41.8103 151.396,39.1436 150.5,36.5C 150.167,37.1667 149.833,37.8333 149.5,38.5C 151.704,42.6006 152.538,46.9339 152,51.5C 147.632,55.5439 143.965,60.2105 141,65.5C 140.5,65 140,64.5 139.5,64C 141.217,60.2989 142.55,56.4656 143.5,52.5C 144.972,49.7305 146.139,46.7305 147,43.5C 147.495,47.7864 146.828,51.7864 145,55.5C 147.167,52.6667 149.333,49.8333 151.5,47C 148.873,43.2412 147.206,39.0745 146.5,34.5C 148.541,34.8541 150.374,34.8541 152,34.5C 153.922,37.0892 156.089,37.5892 158.5,36C 156.128,34.5295 156.128,33.3628 158.5,32.5C 160.211,33.5813 161.711,34.9146 163,36.5C 163.5,36.3333 164,36.1667 164.5,36C 162.604,34.9354 162.437,34.1021 164,33.5C 169.311,38.3345 175.144,38.6678 181.5,34.5C 173.1,29.62 164.1,27.9533 154.5,29.5C 147.442,32.1961 140.776,35.6961 134.5,40C 137,41.1667 139.5,42.3333 142,43.5C 142.72,45.1124 142.554,46.6124 141.5,48C 138.179,48.212 135.345,49.3786 133,51.5C 131.189,50.5765 131.355,49.7431 133.5,49C 127.469,48.7327 122.136,50.566 117.5,54.5C 116.957,54.44 116.624,54.1067 116.5,53.5C 119.322,49.9179 122.988,47.5846 127.5,46.5C 125.262,46.7229 122.928,46.3895 120.5,45.5C 122.611,44.2641 124.611,42.7641 126.5,41C 126.167,40.8333 125.833,40.6667 125.5,40.5C 121.961,42.8461 118.128,44.5128 114,45.5C 113.768,44.2625 113.268,43.2625 112.5,42.5C 112.768,36.6182 112.434,30.7849 111.5,25C 111.978,22.7744 112.645,20.6077 113.5,18.5C 115.27,19.8196 115.603,21.3196 114.5,23C 115.288,26.0757 115.788,29.2423 116,32.5C 116.928,30.6927 118.094,29.026 119.5,27.5C 120.365,26.4173 121.365,26.2506 122.5,27C 119.732,28.762 118.232,31.262 118,34.5C 117.667,34.1667 117.333,33.8333 117,33.5C 114.814,36.152 114.148,39.152 115,42.5C 116,41.1667 117,39.8333 118,38.5C 118.333,38.8333 118.667,39.1667 119,39.5C 119.651,35.3634 121.485,31.8634 124.5,29C 132.297,26.8025 139.797,23.9692 147,20.5C 148.92,20.938 150.754,21.6047 152.5,22.5C 152.291,23.086 151.957,23.586 151.5,24C 145.556,24.7527 139.889,26.4194 134.5,29C 131.824,31.339 128.824,33.1724 125.5,34.5C 123.637,39.7217 124.637,40.555 128.5,37C 125.972,36.3311 125.972,35.4978 128.5,34.5C 129.551,35.8848 130.884,36.8848 132.5,37.5C 137.371,36.476 141.704,34.3094 145.5,31C 142.464,30.3615 139.464,30.5282 136.5,31.5C 134.627,31.5177 134.294,31.0177 135.5,30C 142.538,29.2953 149.204,27.462 155.5,24.5C 164.036,25.7782 172.37,27.7782 180.5,30.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d2cdc1\",d:\"M 247.5,28.5 C 244.374,35.0799 241.541,41.7466 239,48.5C 237.57,48.3062 236.07,48.3062 234.5,48.5C 235.115,50.1161 236.115,51.4495 237.5,52.5C 234.541,59.0808 231.041,65.4141 227,71.5C 226.667,70.8333 226.333,70.1667 226,69.5C 225.1,71.3975 223.934,73.0642 222.5,74.5C 220.59,69.3739 217.257,67.8739 212.5,70C 213.167,70.6667 213.833,71.3333 214.5,72C 213.5,74.3333 212.5,76.6667 211.5,79C 211.833,79.3333 212.167,79.6667 212.5,80C 210.146,80.8471 207.812,81.6805 205.5,82.5C 206.727,77.862 208.394,73.5287 210.5,69.5C 213.139,67.8442 215.805,66.1776 218.5,64.5C 222.468,63.9001 226.135,62.5668 229.5,60.5C 227.493,59.0922 225.493,57.5922 223.5,56C 224.167,55.6667 224.833,55.3333 225.5,55C 224.572,54.6121 223.905,53.9454 223.5,53C 224.172,50.6101 225.505,50.1101 227.5,51.5C 225.967,55.229 226.467,55.8956 229,53.5C 230.301,54.8932 231.801,55.3932 233.5,55C 232.233,53.2041 232.233,51.3707 233.5,49.5C 232.132,47.363 231.132,45.0297 230.5,42.5C 229.232,43.4279 227.899,43.5946 226.5,43C 230.485,41.4251 232.152,38.7584 231.5,35C 234.044,33.908 236.711,33.2414 239.5,33C 237.02,32.04 234.52,31.2066 232,30.5C 231.503,27.854 231.336,25.1873 231.5,22.5C 232.222,22.9175 232.722,23.5842 233,24.5C 233.333,23.1667 233.667,21.8333 234,20.5C 237.037,21.7093 240.204,22.5426 243.5,23C 245.912,25.0354 245.245,26.0354 241.5,26C 243.407,27.122 245.407,27.9553 247.5,28.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#313034\",d:\"M 457.5,47.5 C 462.352,48.2291 467.019,49.5624 471.5,51.5C 471.975,54.3227 470.975,56.3227 468.5,57.5C 464.137,56.1561 459.804,54.8228 455.5,53.5C 455.259,51.1016 455.926,49.1016 457.5,47.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#75787d\",d:\"M 416.5,49.5 C 418.048,49.8212 418.715,50.8212 418.5,52.5C 415.752,52.5983 415.086,51.5983 416.5,49.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b6aa9c\",d:\"M 158.5,39.5 C 161.625,38.5206 164.958,38.1872 168.5,38.5C 169.952,39.3019 171.618,39.8019 173.5,40C 174.357,42.0188 175.691,43.5188 177.5,44.5C 176.503,44.4701 175.836,44.9701 175.5,46C 174.55,49.3913 173.217,52.558 171.5,55.5C 170.375,58.1785 168.708,60.5118 166.5,62.5C 165.846,64.1151 165.346,65.7818 165,67.5C 163.644,68.3802 162.144,68.7135 160.5,68.5C 160.672,70.4918 160.005,72.1585 158.5,73.5C 160.748,74.324 160.914,75.324 159,76.5C 156.342,75.306 155.176,76.306 155.5,79.5C 154.042,75.8166 152.375,72.15 150.5,68.5C 150.863,67.8165 151.196,67.1499 151.5,66.5C 154.837,65.2609 158.17,65.2609 161.5,66.5C 162.287,65.7579 162.953,64.9246 163.5,64C 159.81,61.8845 159.81,60.0511 163.5,58.5C 164.167,56.8333 164.833,55.1667 165.5,53.5C 164.726,52.2888 163.893,52.2888 163,53.5C 162.186,51.0982 162.353,48.7649 163.5,46.5C 165.24,45.1637 166.907,43.8304 168.5,42.5C 168.291,41.914 167.957,41.414 167.5,41C 164.522,40.304 161.522,39.804 158.5,39.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#17181c\",d:\"M 341.5,47.5 C 342.609,48.29 343.942,48.79 345.5,49C 346.022,49.5613 346.355,50.228 346.5,51C 345.139,54.8892 343.639,58.7225 342,62.5C 341.329,63.2524 340.496,63.5858 339.5,63.5C 335.248,62.0406 331.248,60.0406 327.5,57.5C 329.038,53.5931 330.704,49.7598 332.5,46C 335.594,45.7488 338.594,46.2488 341.5,47.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e1dbcc\",d:\"M 110.5,28.5 C 111.354,34.1209 111.687,39.7876 111.5,45.5C 101.625,52.1074 91.2913,58.2741 80.5,64C 75.7095,63.0443 70.8762,61.8777 66,60.5C 64.3189,60.6083 63.1522,61.2749 62.5,62.5C 60.5767,62.795 58.9101,63.6283 57.5,65C 56.1667,65.6667 54.8333,65.6667 53.5,65C 56.0467,64.4478 58.0467,63.1144 59.5,61C 58.7343,57.5816 58.7343,54.0816 59.5,50.5C 63.9854,48.9475 68.6521,48.1141 73.5,48C 70.5624,47.3042 67.8957,46.1375 65.5,44.5C 62.4815,41.15 59.4815,37.8166 56.5,34.5C 54.5887,33.925 52.922,32.925 51.5,31.5C 51.56,30.9569 51.8933,30.6236 52.5,30.5C 56.8276,32.4239 60.8276,34.9239 64.5,38C 67.4512,38.096 70.1178,38.9293 72.5,40.5C 73.2935,40.0688 74.1268,39.7355 75,39.5C 79.1274,40.2392 83.294,40.7392 87.5,41C 89.8877,42.8605 92.5544,44.1939 95.5,45C 94.5162,47.1254 92.8496,48.2921 90.5,48.5C 82.4943,45.0765 74.161,42.4098 65.5,40.5C 65.2385,42.1322 66.2385,43.2988 68.5,44C 73.6057,45.5221 78.6057,47.1888 83.5,49C 88.0388,51.1297 92.2055,50.6297 96,47.5C 97.159,48.566 97.9924,48.2327 98.5,46.5C 100.534,45.4522 101.867,43.7855 102.5,41.5C 102.348,38.9473 102.348,36.4473 102.5,34C 104.076,33.5604 105.41,32.727 106.5,31.5C 107.321,34.4465 107.821,37.4465 108,40.5C 108.333,40.1667 108.667,39.8333 109,39.5C 109.177,35.6437 109.677,31.977 110.5,28.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bda5a7\",d:\"M 182.5,46.5 C 187.377,45.7753 191.044,47.4419 193.5,51.5C 191.54,50.8617 189.707,50.8617 188,51.5C 187.887,55.9215 188.72,56.2549 190.5,52.5C 193.028,53.5174 193.028,54.6841 190.5,56C 191.167,56.3333 191.833,56.6667 192.5,57C 190.5,57 188.5,57 186.5,57C 185.853,58.6095 185.02,60.1095 184,61.5C 181.993,60.3313 179.827,59.6646 177.5,59.5C 177.67,60.8221 177.337,61.9887 176.5,63C 178.932,64.0875 178.598,64.5875 175.5,64.5C 175.649,63.448 175.483,62.448 175,61.5C 173.757,62.3363 172.59,62.003 171.5,60.5C 172.376,59.7492 173.376,59.2492 174.5,59C 173.167,57.1598 173.334,56.6598 175,57.5C 174.737,56.0494 174.904,54.7161 175.5,53.5C 177.102,52.45 177.935,53.1167 178,55.5C 178.333,54.8333 178.667,54.1667 179,53.5C 179.684,54.7839 179.517,55.9505 178.5,57C 180.167,57.8333 181.833,58.6667 183.5,59.5C 184.862,57.988 185.196,56.488 184.5,55C 188.749,49.3086 187.583,48.1419 181,51.5C 180.36,49.4567 180.86,47.7901 182.5,46.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f1ece1\",d:\"M 120.5,45.5 C 118.015,47.6523 116.349,50.3189 115.5,53.5C 114.179,55.4202 112.846,55.5868 111.5,54C 113.394,52.2246 115.061,50.2246 116.5,48C 116.167,47.8333 115.833,47.6667 115.5,47.5C 104.424,53.5119 93.4238,59.5119 82.5,65.5C 75.9848,69.5891 69.6515,73.9224 63.5,78.5C 68.5494,80.0357 73.5494,81.5357 78.5,83C 77.9056,83.4643 77.2389,83.631 76.5,83.5C 71.7325,83.1908 67.0658,83.6908 62.5,85C 62.8333,85.3333 63.1667,85.6667 63.5,86C 59.3808,86.1432 55.3808,86.8099 51.5,88C 54.4816,88.498 57.4816,88.6646 60.5,88.5C 55.0337,89.7236 49.367,90.5569 43.5,91C 40.53,92.1532 37.8633,93.8199 35.5,96C 37.9316,97.0875 37.5983,97.5875 34.5,97.5C 33.325,97.281 32.325,97.6143 31.5,98.5C 29.0318,101.202 26.3651,103.702 23.5,106C 27.7835,107.663 32.1168,107.996 36.5,107C 35.5842,107.278 34.9175,107.778 34.5,108.5C 31.5448,109.159 28.5448,109.492 25.5,109.5C 17.2504,109.117 9.58378,106.95 2.5,103C 3.09442,102.536 3.76109,102.369 4.5,102.5C 6.017,103.735 7.68367,103.735 9.5,102.5C 9.73647,103.247 10.0698,104.08 10.5,105C 18.7696,105.775 25.4363,102.942 30.5,96.5C 28.9547,95.5481 27.288,95.2148 25.5,95.5C 30.4284,95.1172 35.0951,93.6172 39.5,91C 37.0989,90.195 37.2656,89.3617 40,88.5C 42.3818,89.8663 44.5485,89.533 46.5,87.5C 46.1373,86.8165 45.8039,86.1499 45.5,85.5C 49.1337,84.7077 52.4671,83.2077 55.5,81C 50.1065,81.3446 44.7732,82.3446 39.5,84C 34.1343,84.3227 28.8009,84.8227 23.5,85.5C 22.2905,85.0679 21.2905,84.4013 20.5,83.5C 25.8993,83.691 31.2326,83.191 36.5,82C 33.5,81.6667 30.5,81.3333 27.5,81C 32.6507,80.3384 37.6507,79.1718 42.5,77.5C 43.2164,78.311 44.0497,78.9777 45,79.5C 48.8333,78 52.6667,76.5 56.5,75C 58.5675,74.3131 60.5675,74.4798 62.5,75.5C 63.3081,75.1924 63.9747,74.6924 64.5,74C 61.4748,73.6393 58.4748,73.1393 55.5,72.5C 52.4169,74.3456 49.0835,74.8456 45.5,74C 51.1527,69.9133 57.3193,68.7466 64,70.5C 64.7504,69.8742 65.5838,69.3742 66.5,69C 63.2473,67.9635 59.914,67.2969 56.5,67C 59.1104,66.8528 61.4437,66.0194 63.5,64.5C 65.7354,65.7521 68.0687,66.2521 70.5,66C 67.9625,64.5429 65.2959,63.3762 62.5,62.5C 63.1522,61.2749 64.3189,60.6083 66,60.5C 70.8762,61.8777 75.7095,63.0443 80.5,64C 91.2913,58.2741 101.625,52.1074 111.5,45.5C 112.404,44.791 112.737,43.791 112.5,42.5C 113.268,43.2625 113.768,44.2625 114,45.5C 118.128,44.5128 121.961,42.8461 125.5,40.5C 125.833,40.6667 126.167,40.8333 126.5,41C 124.611,42.7641 122.611,44.2641 120.5,45.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f9f9f7\",d:\"M 523.5,53.5 C 527.325,54.4411 530.991,55.7745 534.5,57.5C 532.828,60.3371 533.494,61.0038 536.5,59.5C 538.468,65.8645 537.302,71.5312 533,76.5C 532.51,77.7932 532.343,79.1266 532.5,80.5C 531.069,80.8807 530.236,81.8807 530,83.5C 529.667,82.8333 529.333,82.1667 529,81.5C 527.34,84.7698 527.006,88.1031 528,91.5C 526.105,96.1309 524.272,100.798 522.5,105.5C 523.609,107.214 522.942,107.881 520.5,107.5C 520.5,108.5 520.5,109.5 520.5,110.5C 513.625,128.463 506.958,146.463 500.5,164.5C 498.644,167.409 496.977,170.409 495.5,173.5C 494.571,172.685 493.571,171.852 492.5,171C 493.416,170.626 494.25,170.126 495,169.5C 495.273,167.899 495.773,166.399 496.5,165C 495.5,162.909 496.167,161.243 498.5,160C 497,157.833 495.167,156 493,154.5C 490.897,158.168 488.564,158.168 486,154.5C 484.23,156.418 482.063,156.918 479.5,156C 480.167,155.667 480.833,155.333 481.5,155C 479.924,154.56 478.59,153.727 477.5,152.5C 474.229,155.197 471.229,154.864 468.5,151.5C 470.991,150.459 470.991,149.626 468.5,149C 469.056,148.617 469.389,148.117 469.5,147.5C 470.675,147.719 471.675,147.386 472.5,146.5C 472.942,145.261 473.609,144.261 474.5,143.5C 473.862,145.46 473.862,147.293 474.5,149C 478.9,151.368 483.566,152.868 488.5,153.5C 489.397,154.598 490.23,154.598 491,153.5C 501.827,125.843 512.661,98.1766 523.5,70.5C 523.023,69.5224 522.357,68.6891 521.5,68C 515.861,65.6772 510.194,63.5105 504.5,61.5C 503.435,59.4749 502.102,57.6416 500.5,56C 501.416,55.6258 502.25,55.1258 503,54.5C 503.612,57.0317 505.112,57.8651 507.5,57C 506.044,56.5774 505.544,55.7441 506,54.5C 506.333,54.8333 506.667,55.1667 507,55.5C 507.308,54.6919 507.808,54.0253 508.5,53.5C 510.657,53.781 512.323,55.281 513.5,58C 514.549,58.4922 515.549,58.3256 516.5,57.5C 517.167,58.1667 517.833,58.8333 518.5,59.5C 518.786,56.29 520.453,54.29 523.5,53.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#3b3d3d\",d:\"M 473.5,53.5 C 478.957,54.2349 483.957,56.0682 488.5,59C 487.944,59.3826 487.611,59.8826 487.5,60.5C 487.516,62.4841 486.516,63.4841 484.5,63.5C 479.717,62.2722 475.383,60.2722 471.5,57.5C 472.18,56.1401 472.847,54.8068 473.5,53.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c3bcad\",d:\"M 115.5,53.5 C 112.654,58.5121 108.654,62.3454 103.5,65C 100.837,64.8567 98.1708,64.3567 95.5,63.5C 92.5,64 89.5,64.5 86.5,65C 92.2724,65.2058 97.939,66.0392 103.5,67.5C 103.167,68.1667 102.833,68.8333 102.5,69.5C 96.2726,70.9811 90.2726,70.4811 84.5,68C 85.1667,67.6667 85.8333,67.3333 86.5,67C 84.9419,66.79 83.6085,66.29 82.5,65.5C 93.4238,59.5119 104.424,53.5119 115.5,47.5C 115.833,47.6667 116.167,47.8333 116.5,48C 115.061,50.2246 113.394,52.2246 111.5,54C 112.846,55.5868 114.179,55.4202 115.5,53.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a79b87\",d:\"M -0.5,49.5 C 0.95875,49.4326 2.29208,49.7659 3.5,50.5C 6.63651,51.7131 9.63651,53.2131 12.5,55C 8.95782,54.7433 5.62448,53.5766 2.5,51.5C 1.30441,51.8457 1.30441,52.3457 2.5,53C 5.95614,54.4814 9.28947,56.148 12.5,58C 18.0619,56.7573 23.3952,57.424 28.5,60C 29.3802,61.3561 29.7135,62.8561 29.5,64.5C 25.7514,64.7755 22.2514,65.7755 19,67.5C 12.0327,64.7636 5.53273,61.0969 -0.5,56.5C -0.5,54.1667 -0.5,51.8333 -0.5,49.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#171a1a\",d:\"M 272.5,66.5 C 271.442,67.6002 270.608,68.9336 270,70.5C 269.275,71.0585 268.442,71.3918 267.5,71.5C 264.556,70.2964 261.556,69.2964 258.5,68.5C 258.158,67.6618 257.492,67.3284 256.5,67.5C 255.876,67.0831 255.543,66.4164 255.5,65.5C 256.493,60.8458 258.493,56.8458 261.5,53.5C 265.863,54.8439 270.196,56.1772 274.5,57.5C 273.539,60.4261 272.873,63.4261 272.5,66.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d8cec0\",d:\"M 158.5,39.5 C 161.522,39.804 164.522,40.304 167.5,41C 167.957,41.414 168.291,41.914 168.5,42.5C 166.907,43.8304 165.24,45.1637 163.5,46.5C 162.353,48.7649 162.186,51.0982 163,53.5C 163.893,52.2888 164.726,52.2888 165.5,53.5C 164.833,55.1667 164.167,56.8333 163.5,58.5C 159.81,60.0511 159.81,61.8845 163.5,64C 162.953,64.9246 162.287,65.7579 161.5,66.5C 158.17,65.2609 154.837,65.2609 151.5,66.5C 149.689,64.6146 148.522,62.2813 148,59.5C 146.66,61.7659 146.827,64.0993 148.5,66.5C 145.762,65.9648 143.928,66.9648 143,69.5C 142.667,68.8333 142.333,68.1667 142,67.5C 141.51,68.7932 141.343,70.1266 141.5,71.5C 137.894,66.3631 134.394,61.0298 131,55.5C 125.82,58.9945 120.654,62.3278 115.5,65.5C 115.167,65.5 114.833,65.5 114.5,65.5C 113.686,63.7274 112.352,63.2274 110.5,64C 104.999,71.0952 97.9987,76.2618 89.5,79.5C 86.8686,78.4467 84.202,77.9467 81.5,78C 82.3081,78.3076 82.9747,78.8076 83.5,79.5C 82.0921,80.2432 80.7588,81.0766 79.5,82C 80.938,82.2189 82.2713,82.7189 83.5,83.5C 81.0268,84.7969 78.6934,84.7969 76.5,83.5C 77.2389,83.631 77.9056,83.4643 78.5,83C 73.5494,81.5357 68.5494,80.0357 63.5,78.5C 69.6515,73.9224 75.9848,69.5891 82.5,65.5C 83.6085,66.29 84.9419,66.79 86.5,67C 85.8333,67.3333 85.1667,67.6667 84.5,68C 90.2726,70.4811 96.2726,70.9811 102.5,69.5C 102.833,68.8333 103.167,68.1667 103.5,67.5C 97.939,66.0392 92.2724,65.2058 86.5,65C 89.5,64.5 92.5,64 95.5,63.5C 98.1708,64.3567 100.837,64.8567 103.5,65C 108.654,62.3454 112.654,58.5121 115.5,53.5C 116.349,50.3189 118.015,47.6523 120.5,45.5C 122.928,46.3895 125.262,46.7229 127.5,46.5C 122.988,47.5846 119.322,49.9179 116.5,53.5C 116.624,54.1067 116.957,54.44 117.5,54.5C 122.127,54.9316 126.961,54.9316 132,54.5C 132.833,54.6667 133.667,54.8333 134.5,55C 133.289,55.8928 133.289,56.7261 134.5,57.5C 136.931,56.6399 138.264,54.9732 138.5,52.5C 140.167,52.5 141.833,52.5 143.5,52.5C 142.55,56.4656 141.217,60.2989 139.5,64C 140,64.5 140.5,65 141,65.5C 143.965,60.2105 147.632,55.5439 152,51.5C 152.538,46.9339 151.704,42.6006 149.5,38.5C 149.833,37.8333 150.167,37.1667 150.5,36.5C 151.396,39.1436 152.229,41.8103 153,44.5C 153.066,50.5501 153.232,56.5501 153.5,62.5C 155.51,62.1744 157.51,61.8411 159.5,61.5C 158.263,60.7193 157.263,59.7193 156.5,58.5C 158.89,57.1092 160.557,55.1092 161.5,52.5C 161.154,51.3044 160.654,51.3044 160,52.5C 159.362,49.4642 159.528,46.4642 160.5,43.5C 160.248,41.9271 159.582,40.5938 158.5,39.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#141617\",d:\"M 274.5,74.5 C 273.791,73.596 272.791,73.2627 271.5,73.5C 271.993,71.1944 272.326,68.861 272.5,66.5C 273.859,63.7771 275.692,61.4437 278,59.5C 282.577,60.8475 286.743,62.8475 290.5,65.5C 288.927,69.3917 287.26,73.2251 285.5,77C 281.654,77.1105 277.988,76.2772 274.5,74.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c9cbcc\",d:\"M 326.5,21.5 C 326.833,21.5 327.167,21.5 327.5,21.5C 327.414,22.4959 327.748,23.3292 328.5,24C 332.779,25.6531 337.112,27.1531 341.5,28.5C 342.107,28.3764 342.44,28.0431 342.5,27.5C 342.833,27.5 343.167,27.5 343.5,27.5C 345.651,30.4152 348.651,32.0819 352.5,32.5C 351.833,33.1667 351.167,33.8333 350.5,34.5C 349.139,38.5884 347.472,42.5884 345.5,46.5C 349.542,49.3173 354.042,51.3173 359,52.5C 359.5,52.1667 360,51.8333 360.5,51.5C 361.867,47.3505 363.534,43.3505 365.5,39.5C 365.842,38.6618 366.508,38.3284 367.5,38.5C 370.041,39.6489 372.541,39.6489 375,38.5C 376.402,34.7931 377.902,31.1264 379.5,27.5C 379.376,26.8933 379.043,26.56 378.5,26.5C 378.5,25.8333 378.833,25.5 379.5,25.5C 381.403,25.7959 383.07,26.4625 384.5,27.5C 388.697,27.8063 390.697,25.8063 390.5,21.5C 391.833,21.5 392.5,22.1667 392.5,23.5C 391.566,24.7725 390.899,26.2725 390.5,28C 394.956,31.0988 399.956,32.9322 405.5,33.5C 405.833,31.5 406.167,29.5 406.5,27.5C 407.833,27.5 408.5,28.1667 408.5,29.5C 407.297,30.9425 406.797,32.6092 407,34.5C 410.499,36.3965 413.999,38.0631 417.5,39.5C 417.5,39.8333 417.5,40.1667 417.5,40.5C 416.033,39.7084 414.7,39.7084 413.5,40.5C 411.421,44.1582 409.754,47.9915 408.5,52C 409.686,53.4121 411.019,54.5788 412.5,55.5C 416.085,56.5828 419.751,57.2494 423.5,57.5C 422.833,58.1667 422.167,58.8333 421.5,59.5C 419.236,58.7814 416.903,58.448 414.5,58.5C 413.001,62.8168 411.834,67.1502 411,71.5C 414.804,73.2668 418.637,74.9335 422.5,76.5C 422.5,76.8333 422.5,77.1667 422.5,77.5C 419.702,76.9 417.035,75.9 414.5,74.5C 411.69,78.4535 409.69,82.7868 408.5,87.5C 409.09,88.7989 410.09,89.6322 411.5,90C 415.169,91.3552 418.835,92.3552 422.5,93C 425.047,88.862 426.714,84.362 427.5,79.5C 428.167,80.1667 428.833,80.8333 429.5,81.5C 427.938,85.3454 426.271,89.1787 424.5,93C 424.645,93.772 424.978,94.4387 425.5,95C 429.59,96.6969 433.757,98.1969 438,99.5C 440.453,95.9346 442.62,92.2679 444.5,88.5C 443.863,92.5776 442.53,96.4109 440.5,100C 442.618,101.082 444.618,102.249 446.5,103.5C 446.5,103.833 446.5,104.167 446.5,104.5C 444.299,103.434 441.965,102.767 439.5,102.5C 437.139,100.375 434.472,99.7088 431.5,100.5C 429.421,104.158 427.754,107.992 426.5,112C 426.645,112.772 426.978,113.439 427.5,114C 431.154,115.274 434.82,116.44 438.5,117.5C 439.675,117.719 440.675,117.386 441.5,116.5C 442.879,113.741 444.213,111.075 445.5,108.5C 445.5,108.833 445.5,109.167 445.5,109.5C 444.655,112.826 444.155,116.16 444,119.5C 447.219,120.739 450.386,122.072 453.5,123.5C 456.932,123.873 459.266,122.54 460.5,119.5C 460.014,121.807 460.014,123.973 460.5,126C 465.131,127.392 469.464,129.225 473.5,131.5C 469.772,130.617 466.105,129.784 462.5,129C 460.336,133.326 458.669,137.826 457.5,142.5C 456.833,142.167 456.167,141.833 455.5,141.5C 457.257,137.402 458.923,133.235 460.5,129C 460.355,128.228 460.022,127.561 459.5,127C 455.257,125.697 451.09,124.197 447,122.5C 444.564,126.374 442.397,130.374 440.5,134.5C 440.167,134.5 439.833,134.5 439.5,134.5C 441.801,130.436 442.968,126.103 443,121.5C 439.098,119.642 435.098,117.976 431,116.5C 427.612,120.452 425.445,125.118 424.5,130.5C 423.662,130.158 423.328,129.492 423.5,128.5C 424.68,124.635 426.013,120.801 427.5,117C 427.252,115.251 426.252,114.418 424.5,114.5C 424.158,113.662 423.492,113.328 422.5,113.5C 417.984,111.203 413.318,110.203 408.5,110.5C 407.004,114.353 405.338,118.019 403.5,121.5C 403.167,121.5 402.833,121.5 402.5,121.5C 403.876,117.077 405.543,112.744 407.5,108.5C 391.144,102.323 374.81,95.9897 358.5,89.5C 358.833,88.8333 359.167,88.1667 359.5,87.5C 361.94,83.1832 363.607,78.5166 364.5,73.5C 360.064,71.6308 355.398,70.2975 350.5,69.5C 349.833,69.1667 349.167,68.8333 348.5,68.5C 345.572,67.1833 342.572,65.85 339.5,64.5C 339.5,64.1667 339.5,63.8333 339.5,63.5C 340.496,63.5858 341.329,63.2524 342,62.5C 343.639,58.7225 345.139,54.8892 346.5,51C 346.355,50.228 346.022,49.5613 345.5,49C 343.942,48.79 342.609,48.29 341.5,47.5C 341.5,47.1667 341.5,46.8333 341.5,46.5C 342.5,46.5 343.5,46.5 344.5,46.5C 345.815,42.5264 347.149,38.5264 348.5,34.5C 348.167,33.8333 347.833,33.1667 347.5,32.5C 343.258,30.7517 338.924,29.4183 334.5,28.5C 333.833,28.1667 333.167,27.8333 332.5,27.5C 329.682,25.9278 326.682,24.5945 323.5,23.5C 323.5,23.1667 323.5,22.8333 323.5,22.5C 324.791,22.7373 325.791,22.404 326.5,21.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#161718\",d:\"M 348.5,50.5 C 353.803,51.8181 358.47,54.1515 362.5,57.5C 361.44,62.042 359.44,66.042 356.5,69.5C 351.89,67.8637 347.556,65.8637 343.5,63.5C 345.457,59.2563 347.124,54.923 348.5,50.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#161617\",d:\"M 383.5,45.5 C 388.449,47.1984 393.116,49.365 397.5,52C 395.634,55.9359 393.967,59.9359 392.5,64C 387.81,63.3257 383.31,61.8257 379,59.5C 379.595,54.6187 381.095,49.952 383.5,45.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#17191b\",d:\"M 412.5,55.5 C 412.884,60.6344 411.551,65.4677 408.5,70C 403.988,68.5998 399.321,67.4331 394.5,66.5C 395.26,61.6526 396.594,56.9859 398.5,52.5C 403.272,53.0928 407.939,54.0928 412.5,55.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#16181b\",d:\"M 367.5,56.5 C 365.219,55.6855 363.219,54.3522 361.5,52.5C 363.139,47.8878 365.306,43.5545 368,39.5C 372.452,41.3101 376.952,42.9768 381.5,44.5C 379.833,49.1667 378.167,53.8333 376.5,58.5C 373.574,57.5392 370.574,56.8726 367.5,56.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#15171a\",d:\"M 350.5,34.5 C 355.792,35.3135 360.792,36.9802 365.5,39.5C 363.534,43.3505 361.867,47.3505 360.5,51.5C 360,51.8333 359.5,52.1667 359,52.5C 354.042,51.3173 349.542,49.3173 345.5,46.5C 347.472,42.5884 349.139,38.5884 350.5,34.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#1b1d1f\",d:\"M 397.5,33.5 C 402.186,34.673 406.686,36.3396 411,38.5C 410.166,42.8498 408.999,47.1832 407.5,51.5C 402.558,51.1866 397.891,49.8533 393.5,47.5C 393.359,42.5687 394.692,37.902 397.5,33.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#1a1c1f\",d:\"M 384.5,27.5 C 388.172,29.5008 391.839,31.5008 395.5,33.5C 394,37.1667 392.5,40.8333 391,44.5C 387.488,45.0954 383.988,44.5954 380.5,43C 378.522,42.5193 377.189,41.3527 376.5,39.5C 377.705,35.7183 379.205,32.0516 381,28.5C 382.011,27.6634 383.178,27.33 384.5,27.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#18191f\",d:\"M 378.5,26.5 C 379.043,26.56 379.376,26.8933 379.5,27.5C 377.902,31.1264 376.402,34.7931 375,38.5C 372.541,39.6489 370.041,39.6489 367.5,38.5C 365.723,37.3995 363.723,36.5662 361.5,36C 360.767,30.5941 362.267,25.7607 366,21.5C 370.218,23.072 374.385,24.7387 378.5,26.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#494846\",d:\"M 498.5,69.5 C 496.786,68.2616 494.786,67.595 492.5,67.5C 491.739,66.6091 490.739,65.9424 489.5,65.5C 488.571,64.3112 488.238,62.9778 488.5,61.5C 489.261,60.6091 490.261,59.9424 491.5,59.5C 495.568,60.6339 499.568,61.9672 503.5,63.5C 504.231,65.4012 504.231,67.4012 503.5,69.5C 501.833,69.5 500.167,69.5 498.5,69.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cfc7b7\",d:\"M 28.5,39.5 C 33.471,40.3773 38.471,41.2106 43.5,42C 47.3352,43.8031 47.6685,45.1364 44.5,46C 47.8333,46.3333 51.1667,46.6667 54.5,47C 48.5389,47.9968 42.5389,48.6635 36.5,49C 35.6919,49.3076 35.0253,49.8076 34.5,50.5C 36.813,51.2733 39.1463,51.9399 41.5,52.5C 45.3153,49.5756 49.6486,48.7423 54.5,50C 55.5663,52.6202 57.233,52.7869 59.5,50.5C 58.7343,54.0816 58.7343,57.5816 59.5,61C 58.0467,63.1144 56.0467,64.4478 53.5,65C 54.8333,65.6667 56.1667,65.6667 57.5,65C 58.9101,63.6283 60.5767,62.795 62.5,62.5C 65.2959,63.3762 67.9625,64.5429 70.5,66C 68.0687,66.2521 65.7354,65.7521 63.5,64.5C 61.4437,66.0194 59.1104,66.8528 56.5,67C 59.914,67.2969 63.2473,67.9635 66.5,69C 65.5838,69.3742 64.7504,69.8742 64,70.5C 57.3193,68.7466 51.1527,69.9133 45.5,74C 49.0835,74.8456 52.4169,74.3456 55.5,72.5C 58.4748,73.1393 61.4748,73.6393 64.5,74C 63.9747,74.6924 63.3081,75.1924 62.5,75.5C 60.5675,74.4798 58.5675,74.3131 56.5,75C 52.6667,76.5 48.8333,78 45,79.5C 44.0497,78.9777 43.2164,78.311 42.5,77.5C 37.6507,79.1718 32.6507,80.3384 27.5,81C 30.5,81.3333 33.5,81.6667 36.5,82C 31.2326,83.191 25.8993,83.691 20.5,83.5C 20.0825,82.7784 19.4158,82.2784 18.5,82C 20.8833,81.935 21.55,81.1017 20.5,79.5C 21.0253,78.8076 21.6919,78.3076 22.5,78C 21.5842,77.7216 20.9175,77.2216 20.5,76.5C 24.5556,76.7775 28.5556,77.4442 32.5,78.5C 33.3079,76.8849 34.9746,75.3849 37.5,74C 41.3885,73.9381 44.8885,72.7715 48,70.5C 48.4922,69.451 48.3256,68.451 47.5,67.5C 48.5,66.6667 49.5,65.8333 50.5,65C 50.1667,64.8333 49.8333,64.6667 49.5,64.5C 44.4575,68.0458 39.2908,71.3791 34,74.5C 30.2657,74.2369 26.4324,73.4036 22.5,72C 26.8054,70.9851 31.1388,70.1518 35.5,69.5C 35.8333,70.1667 36.1667,70.8333 36.5,71.5C 41.1612,67.3369 46.4946,64.5035 52.5,63C 50.1917,59.8618 50.525,56.8618 53.5,54C 53.3333,53.1667 53.1667,52.3333 53,51.5C 50.9945,55.5134 48.4945,59.1801 45.5,62.5C 41.526,64.1176 37.526,65.7843 33.5,67.5C 33.1667,67.1667 32.8333,66.8333 32.5,66.5C 36.7042,63.8003 41.0375,61.3003 45.5,59C 44.1667,58.3333 44.1667,57.6667 45.5,57C 40.6484,58.2973 36.315,60.7973 32.5,64.5C 31.3132,65.6527 30.3132,65.6527 29.5,64.5C 29.7135,62.8561 29.3802,61.3561 28.5,60C 23.3952,57.424 18.0619,56.7573 12.5,58C 9.28947,56.148 5.95614,54.4814 2.5,53C 1.30441,52.3457 1.30441,51.8457 2.5,51.5C 5.62448,53.5766 8.95782,54.7433 12.5,55C 9.63651,53.2131 6.63651,51.7131 3.5,50.5C 3.7352,49.9033 4.2352,49.5699 5,49.5C 8.57095,51.7118 12.4043,52.8785 16.5,53C 14.7536,52.5291 13.087,51.8624 11.5,51C 17.7135,51.5914 23.8801,52.7581 30,54.5C 30.5,54.1667 31,53.8333 31.5,53.5C 29.5101,52.5019 27.5101,51.5019 25.5,50.5C 24.914,50.7093 24.414,51.0426 24,51.5C 22.2663,50.7511 20.433,50.2511 18.5,50C 20.5,49.6667 22.5,49.3333 24.5,49C 21.6996,47.7681 18.6996,47.1015 15.5,47C 14.4019,46.2303 14.4019,45.397 15.5,44.5C 14.9002,43.1001 13.9002,42.1001 12.5,41.5C 15.0792,41.9167 17.2458,41.25 19,39.5C 20.4411,40.2598 21.9411,40.9264 23.5,41.5C 25.0754,40.5435 26.742,39.8769 28.5,39.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#998485\",d:\"M 177.5,44.5 C 179.167,45.1667 180.833,45.8333 182.5,46.5C 180.86,47.7901 180.36,49.4567 181,51.5C 187.583,48.1419 188.749,49.3086 184.5,55C 185.196,56.488 184.862,57.988 183.5,59.5C 181.833,58.6667 180.167,57.8333 178.5,57C 179.517,55.9505 179.684,54.7839 179,53.5C 178.667,54.1667 178.333,54.8333 178,55.5C 177.935,53.1167 177.102,52.45 175.5,53.5C 174.904,54.7161 174.737,56.0494 175,57.5C 173.334,56.6598 173.167,57.1598 174.5,59C 173.376,59.2492 172.376,59.7492 171.5,60.5C 172.59,62.003 173.757,62.3363 175,61.5C 175.483,62.448 175.649,63.448 175.5,64.5C 178.598,64.5875 178.932,64.0875 176.5,63C 177.337,61.9887 177.67,60.8221 177.5,59.5C 179.827,59.6646 181.993,60.3313 184,61.5C 185.02,60.1095 185.853,58.6095 186.5,57C 188.5,57 190.5,57 192.5,57C 191.833,56.6667 191.167,56.3333 190.5,56C 193.028,54.6841 193.028,53.5174 190.5,52.5C 188.72,56.2549 187.887,55.9215 188,51.5C 189.707,50.8617 191.54,50.8617 193.5,51.5C 194.167,51.5 194.833,51.5 195.5,51.5C 196.058,52.7899 197.058,53.6232 198.5,54C 196.766,56.2658 195.1,58.4325 193.5,60.5C 193.808,61.3081 194.308,61.9747 195,62.5C 196.204,61.5294 196.704,60.5294 196.5,59.5C 197.308,59.8076 197.975,60.3076 198.5,61C 196.747,63.5799 195.747,66.4132 195.5,69.5C 192.819,69.5379 190.319,68.8713 188,67.5C 186.989,67.8919 186.489,68.5585 186.5,69.5C 184.38,68.1285 183.38,68.7952 183.5,71.5C 184.552,71.3505 185.552,71.5172 186.5,72C 185.167,72.3333 183.833,72.6667 182.5,73C 186.144,73.9372 186.311,75.4372 183,77.5C 181.437,76.8979 181.604,76.0646 183.5,75C 181.953,74.6666 180.62,75.1666 179.5,76.5C 178.808,75.9747 178.308,75.3081 178,74.5C 177.282,75.4506 176.449,75.6172 175.5,75C 176.711,74.1072 176.711,73.2739 175.5,72.5C 174.833,73.1667 174.167,73.8333 173.5,74.5C 172.557,72.5302 173.224,71.0302 175.5,70C 173.56,70.1781 171.893,69.1781 170.5,67C 171.833,66.3333 172.833,65.3333 173.5,64C 171.613,63.8374 170.113,64.6707 169,66.5C 169.696,62.8859 170.53,59.2193 171.5,55.5C 173.217,52.558 174.55,49.3913 175.5,46C 175.836,44.9701 176.503,44.4701 177.5,44.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#342f28\",d:\"M 249.5,39.5 C 249.833,39.5 250.167,39.5 250.5,39.5C 249.12,44.5939 247.453,49.5939 245.5,54.5C 241.406,64.349 237.072,74.0157 232.5,83.5C 235.13,75.9109 237.464,68.2442 239.5,60.5C 243.951,54.207 247.285,47.207 249.5,39.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e3dccd\",d:\"M 20.5,76.5 C 17.904,75.243 15.2373,74.0764 12.5,73C 10.1638,70.099 7.83044,67.9324 5.5,66.5C 4.47899,67.0016 4.31232,67.6683 5,68.5C 7.01761,70.3501 8.85095,72.3501 10.5,74.5C 10.1667,74.8333 9.83333,75.1667 9.5,75.5C 5.73706,71.7479 2.40372,67.7479 -0.5,63.5C -0.5,61.1667 -0.5,58.8333 -0.5,56.5C 5.53273,61.0969 12.0327,64.7636 19,67.5C 22.2514,65.7755 25.7514,64.7755 29.5,64.5C 30.3132,65.6527 31.3132,65.6527 32.5,64.5C 36.315,60.7973 40.6484,58.2973 45.5,57C 44.1667,57.6667 44.1667,58.3333 45.5,59C 41.0375,61.3003 36.7042,63.8003 32.5,66.5C 32.8333,66.8333 33.1667,67.1667 33.5,67.5C 37.526,65.7843 41.526,64.1176 45.5,62.5C 48.4945,59.1801 50.9945,55.5134 53,51.5C 53.1667,52.3333 53.3333,53.1667 53.5,54C 50.525,56.8618 50.1917,59.8618 52.5,63C 46.4946,64.5035 41.1612,67.3369 36.5,71.5C 36.1667,70.8333 35.8333,70.1667 35.5,69.5C 31.1388,70.1518 26.8054,70.9851 22.5,72C 26.4324,73.4036 30.2657,74.2369 34,74.5C 39.2908,71.3791 44.4575,68.0458 49.5,64.5C 49.8333,64.6667 50.1667,64.8333 50.5,65C 49.5,65.8333 48.5,66.6667 47.5,67.5C 48.3256,68.451 48.4922,69.451 48,70.5C 44.8885,72.7715 41.3885,73.9381 37.5,74C 34.9746,75.3849 33.3079,76.8849 32.5,78.5C 28.5556,77.4442 24.5556,76.7775 20.5,76.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#161818\",d:\"M 367.5,56.5 C 370.823,58.2419 374.323,59.9086 378,61.5C 377.745,66.3592 376.579,71.0258 374.5,75.5C 369.076,74.5606 364.076,72.5606 359.5,69.5C 361.167,65.5 362.833,61.5 364.5,57.5C 365.325,56.6143 366.325,56.281 367.5,56.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#161919\",d:\"M 421.5,59.5 C 424.857,60.1727 427.524,61.8394 429.5,64.5C 427.959,68.4558 426.626,72.4558 425.5,76.5C 424.5,76.5 423.5,76.5 422.5,76.5C 418.637,74.9335 414.804,73.2668 411,71.5C 411.834,67.1502 413.001,62.8168 414.5,58.5C 416.903,58.448 419.236,58.7814 421.5,59.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#141516\",d:\"M 339.5,64.5 C 342.572,65.85 345.572,67.1833 348.5,68.5C 347.252,72.8295 345.586,76.9961 343.5,81C 338.764,80.371 334.098,79.2044 329.5,77.5C 330.298,72.9396 331.798,68.6063 334,64.5C 335.776,63.4639 337.609,63.4639 339.5,64.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d9d4d0\",d:\"M 563.5,62.5 C 563.5,69.8333 563.5,77.1667 563.5,84.5C 562.127,84.6567 560.793,84.49 559.5,84C 558.949,82.6015 558.616,81.2682 558.5,80C 555.39,78.3018 552.057,77.3018 548.5,77C 547.035,75.107 545.369,73.4404 543.5,72C 544.905,68.902 546.238,65.7353 547.5,62.5C 551.185,59.6022 553.351,60.6022 554,65.5C 556.279,67.2893 558.279,69.2893 560,71.5C 560.44,69.9238 561.273,68.5904 562.5,67.5C 561.194,66.0878 560.36,64.4211 560,62.5C 558.229,61.6959 556.729,60.5292 555.5,59C 558.461,59.3096 561.128,60.4763 563.5,62.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b7ae9c\",d:\"M -0.5,63.5 C 2.40372,67.7479 5.73706,71.7479 9.5,75.5C 9.83333,75.1667 10.1667,74.8333 10.5,74.5C 8.85095,72.3501 7.01761,70.3501 5,68.5C 4.31232,67.6683 4.47899,67.0016 5.5,66.5C 7.83044,67.9324 10.1638,70.099 12.5,73C 15.2373,74.0764 17.904,75.243 20.5,76.5C 20.9175,77.2216 21.5842,77.7216 22.5,78C 21.6919,78.3076 21.0253,78.8076 20.5,79.5C 21.55,81.1017 20.8833,81.935 18.5,82C 19.4158,82.2784 20.0825,82.7784 20.5,83.5C 18.857,83.4802 17.5237,84.1468 16.5,85.5C 14.5,84.5 12.5,83.5 10.5,82.5C 10.277,83.9667 9.94366,85.4667 9.5,87C 6.46423,89.0063 3.1309,89.8396 -0.5,89.5C -0.5,80.8333 -0.5,72.1667 -0.5,63.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#58595e\",d:\"M 274.5,69.5 C 278.23,69.8541 281.563,71.1874 284.5,73.5C 283.467,74.452 282.3,74.452 281,73.5C 278.467,72.4502 276.3,71.1168 274.5,69.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dbd9d7\",d:\"M 543.5,51.5 C 543.259,54.999 544.092,55.3323 546,52.5C 546.484,54.9129 546.15,57.2462 545,59.5C 540.318,67.5527 535.985,75.886 532,84.5C 531.421,83.0715 531.588,81.7382 532.5,80.5C 532.343,79.1266 532.51,77.7932 533,76.5C 537.302,71.5312 538.468,65.8645 536.5,59.5C 533.494,61.0038 532.828,60.3371 534.5,57.5C 538.188,58.8484 540.522,57.515 541.5,53.5C 542.167,52.8333 542.833,52.1667 543.5,51.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cac5bc\",d:\"M 232.5,71.5 C 233.097,71.7352 233.43,72.2352 233.5,73C 231.229,76.0931 230.062,79.5931 230,83.5C 227.642,86.5683 225.809,89.7349 224.5,93C 225.609,94.813 224.942,95.6463 222.5,95.5C 223.223,99.3896 221.89,102.056 218.5,103.5C 219.735,97.7875 222.068,92.6208 225.5,88C 224.715,85.5571 224.881,83.0571 226,80.5C 228.446,77.5766 230.613,74.5766 232.5,71.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#151618\",d:\"M 394.5,66.5 C 395.234,67.7079 395.567,69.0413 395.5,70.5C 393.334,74.1645 391.168,77.8311 389,81.5C 384.293,79.8949 379.793,77.8949 375.5,75.5C 377.073,71.6083 378.74,67.7749 380.5,64C 385.164,64.4782 389.831,65.3115 394.5,66.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#717372\",d:\"M 384.5,69.5 C 385.218,71.2458 386.218,71.9125 387.5,71.5C 386.406,73.8362 385.073,73.8362 383.5,71.5C 383.863,70.8165 384.196,70.1499 384.5,69.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#94745a\",d:\"M 114.5,65.5 C 114.833,65.5 115.167,65.5 115.5,65.5C 118.11,70.6142 120.943,75.6142 124,80.5C 124.667,81.5 124.667,82.5 124,83.5C 123.346,82.3044 122.846,82.3044 122.5,83.5C 123.763,85.0287 124.763,86.6954 125.5,88.5C 123.61,88.7035 122.11,88.0368 121,86.5C 117.821,80.8061 114.655,75.1394 111.5,69.5C 111.738,67.5956 112.738,66.2623 114.5,65.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a79292\",d:\"M 199.5,50.5 C 200.756,50.9038 201.923,51.5705 203,52.5C 204,52.1667 205,51.8333 206,51.5C 208.275,54.9305 211.109,57.5971 214.5,59.5C 212.869,62.6639 211.536,65.9973 210.5,69.5C 208.394,73.5287 206.727,77.862 205.5,82.5C 205.5,82.8333 205.5,83.1667 205.5,83.5C 204.662,83.8417 204.328,84.5084 204.5,85.5C 201.203,85.3287 200.869,85.9954 203.5,87.5C 201.997,89.4216 199.997,90.5883 197.5,91C 199.332,91.7485 200.999,92.7485 202.5,94C 201.956,94.7172 201.289,95.2172 200.5,95.5C 199.275,95.9689 198.275,95.3022 197.5,93.5C 196.304,93.8457 196.304,94.3457 197.5,95C 195.034,94.9296 192.7,95.0963 190.5,95.5C 186.718,94.3108 183.051,92.9774 179.5,91.5C 172.937,88.4076 173.104,88.0742 180,90.5C 181.426,87.9306 181.259,85.7639 179.5,84C 180.167,83.6667 180.833,83.3333 181.5,83C 179.512,82.8195 177.512,82.9862 175.5,83.5C 175.649,84.552 175.483,85.552 175,86.5C 174.667,85.1667 174.333,83.8333 174,82.5C 171.45,81.02 169.617,81.6867 168.5,84.5C 168.709,85.086 169.043,85.586 169.5,86C 168.365,86.7494 167.365,86.5827 166.5,85.5C 168.016,82.4689 169.516,79.4689 171,76.5C 171.492,77.549 171.326,78.549 170.5,79.5C 174.722,82.9446 176.722,81.9446 176.5,76.5C 174.173,76.3354 172.007,75.6687 170,74.5C 168.991,76.0249 168.491,77.6916 168.5,79.5C 167.5,79.5 166.5,79.5 165.5,79.5C 166.014,77.4884 166.18,75.4884 166,73.5C 165.333,74.1667 164.667,74.8333 164,75.5C 162.794,78.9476 161.294,82.2809 159.5,85.5C 160.243,86.1818 160.909,86.8485 161.5,87.5C 160.325,87.719 159.325,87.3857 158.5,86.5C 157.298,84.2195 156.298,81.8862 155.5,79.5C 155.176,76.306 156.342,75.306 159,76.5C 160.914,75.324 160.748,74.324 158.5,73.5C 160.005,72.1585 160.672,70.4918 160.5,68.5C 162.144,68.7135 163.644,68.3802 165,67.5C 165.346,65.7818 165.846,64.1151 166.5,62.5C 168.708,60.5118 170.375,58.1785 171.5,55.5C 170.53,59.2193 169.696,62.8859 169,66.5C 170.113,64.6707 171.613,63.8374 173.5,64C 172.833,65.3333 171.833,66.3333 170.5,67C 171.893,69.1781 173.56,70.1781 175.5,70C 173.224,71.0302 172.557,72.5302 173.5,74.5C 174.167,73.8333 174.833,73.1667 175.5,72.5C 176.711,73.2739 176.711,74.1072 175.5,75C 176.449,75.6172 177.282,75.4506 178,74.5C 178.308,75.3081 178.808,75.9747 179.5,76.5C 180.62,75.1666 181.953,74.6666 183.5,75C 181.604,76.0646 181.437,76.8979 183,77.5C 186.311,75.4372 186.144,73.9372 182.5,73C 183.833,72.6667 185.167,72.3333 186.5,72C 185.552,71.5172 184.552,71.3505 183.5,71.5C 183.38,68.7952 184.38,68.1285 186.5,69.5C 186.489,68.5585 186.989,67.8919 188,67.5C 190.319,68.8713 192.819,69.5379 195.5,69.5C 195.747,66.4132 196.747,63.5799 198.5,61C 197.975,60.3076 197.308,59.8076 196.5,59.5C 196.704,60.5294 196.204,61.5294 195,62.5C 194.308,61.9747 193.808,61.3081 193.5,60.5C 195.1,58.4325 196.766,56.2658 198.5,54C 197.058,53.6232 196.058,52.7899 195.5,51.5C 196.583,51.5394 197.583,51.8728 198.5,52.5C 198.787,51.7997 199.12,51.1331 199.5,50.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#28282d\",d:\"M 397.5,69.5 C 398.842,70.793 400.509,71.6264 402.5,72C 399.246,73.518 398.746,75.6846 401,78.5C 401.998,75.9722 402.831,75.9722 403.5,78.5C 403.182,79.6473 402.516,80.4806 401.5,81C 403.299,82.6998 403.632,84.5331 402.5,86.5C 399.296,85.0991 395.963,84.0991 392.5,83.5C 393.204,79.0937 394.204,74.7603 395.5,70.5C 396.167,70.1667 396.833,69.8333 397.5,69.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#16161b\",d:\"M 397.5,69.5 C 402.766,69.9721 407.433,71.8054 411.5,75C 410,78.8333 408.5,82.6667 407,86.5C 405.51,87.7279 404.01,87.7279 402.5,86.5C 403.632,84.5331 403.299,82.6998 401.5,81C 402.516,80.4806 403.182,79.6473 403.5,78.5C 402.831,75.9722 401.998,75.9722 401,78.5C 398.746,75.6846 399.246,73.518 402.5,72C 400.509,71.6264 398.842,70.793 397.5,69.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#eeebe7\",d:\"M 563.5,13.5 C 563.5,29.8333 563.5,46.1667 563.5,62.5C 561.128,60.4763 558.461,59.3096 555.5,59C 556.729,60.5292 558.229,61.6959 560,62.5C 560.36,64.4211 561.194,66.0878 562.5,67.5C 561.273,68.5904 560.44,69.9238 560,71.5C 558.279,69.2893 556.279,67.2893 554,65.5C 553.351,60.6022 551.185,59.6022 547.5,62.5C 546.238,65.7353 544.905,68.902 543.5,72C 545.369,73.4404 547.035,75.107 548.5,77C 552.057,77.3018 555.39,78.3018 558.5,80C 558.616,81.2682 558.949,82.6015 559.5,84C 560.793,84.49 562.127,84.6567 563.5,84.5C 563.5,92.5 563.5,100.5 563.5,108.5C 561.348,107.923 561.015,106.756 562.5,105C 560.939,104.682 559.772,103.849 559,102.5C 557.271,104.931 555.771,104.597 554.5,101.5C 555.391,100.41 556.391,100.41 557.5,101.5C 557.676,98.9208 556.343,96.9208 553.5,95.5C 552.413,100.74 551.413,100.74 550.5,95.5C 545.177,94.1375 540.843,91.1375 537.5,86.5C 536.585,87.3279 535.919,88.3279 535.5,89.5C 538.298,91.1296 540.965,92.9629 543.5,95C 545.796,97.7678 547.796,100.601 549.5,103.5C 551.346,103.222 552.68,103.889 553.5,105.5C 551.737,105.306 549.903,105.306 548,105.5C 544.617,99.7135 540.117,95.0468 534.5,91.5C 534.649,90.448 534.483,89.448 534,88.5C 533.426,91.3208 532.092,93.6541 530,95.5C 528.729,102.572 527.229,109.572 525.5,116.5C 524.372,117.262 523.205,117.929 522,118.5C 521.768,117.263 521.268,116.263 520.5,115.5C 522.109,113.399 522.609,111.065 522,108.5C 521.722,109.416 521.222,110.082 520.5,110.5C 520.5,109.5 520.5,108.5 520.5,107.5C 522.942,107.881 523.609,107.214 522.5,105.5C 524.272,100.798 526.105,96.1309 528,91.5C 527.006,88.1031 527.34,84.7698 529,81.5C 529.333,82.1667 529.667,82.8333 530,83.5C 530.236,81.8807 531.069,80.8807 532.5,80.5C 531.588,81.7382 531.421,83.0715 532,84.5C 535.985,75.886 540.318,67.5527 545,59.5C 546.15,57.2462 546.484,54.9129 546,52.5C 544.092,55.3323 543.259,54.999 543.5,51.5C 549.801,38.5618 556.467,25.8951 563.5,13.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#424243\",d:\"M 498.5,69.5 C 504.459,72.4384 510.626,75.105 517,77.5C 516.625,82.4618 515.125,87.1285 512.5,91.5C 509.603,90.871 506.936,89.871 504.5,88.5C 504.938,88.5654 505.272,88.3988 505.5,88C 503.068,86.9125 503.402,86.4125 506.5,86.5C 506.5,85.5 506.5,84.5 506.5,83.5C 508.288,83.7852 509.955,83.4519 511.5,82.5C 510.609,81.4104 509.609,81.4104 508.5,82.5C 507.201,81.91 506.368,80.91 506,79.5C 505.667,79.8333 505.333,80.1667 505,80.5C 502.451,77.2529 499.617,76.9196 496.5,79.5C 495.738,78.3717 495.071,77.2051 494.5,76C 495.801,74.3845 495.801,72.8845 494.5,71.5C 495.183,69.8235 496.517,69.1568 498.5,69.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bebebb\",d:\"M 315.5,20.5 C 315.5,20.1667 315.5,19.8333 315.5,19.5C 318.397,20.129 321.064,21.129 323.5,22.5C 323.5,22.8333 323.5,23.1667 323.5,23.5C 321.661,22.2475 319.828,22.2475 318,23.5C 316.598,27.2069 315.098,30.8736 313.5,34.5C 313.977,35.4776 314.643,36.3109 315.5,37C 319.823,38.2755 324.156,39.4422 328.5,40.5C 329.833,36.1667 331.167,31.8333 332.5,27.5C 333.167,27.8333 333.833,28.1667 334.5,28.5C 332.846,32.4787 331.179,36.4787 329.5,40.5C 333.232,43.0748 337.232,45.0748 341.5,46.5C 341.5,46.8333 341.5,47.1667 341.5,47.5C 338.594,46.2488 335.594,45.7488 332.5,46C 330.704,49.7598 329.038,53.5931 327.5,57.5C 331.248,60.0406 335.248,62.0406 339.5,63.5C 339.5,63.8333 339.5,64.1667 339.5,64.5C 337.609,63.4639 335.776,63.4639 334,64.5C 331.798,68.6063 330.298,72.9396 329.5,77.5C 334.098,79.2044 338.764,80.371 343.5,81C 345.586,76.9961 347.252,72.8295 348.5,68.5C 349.167,68.8333 349.833,69.1667 350.5,69.5C 348.71,73.5847 347.044,77.7513 345.5,82C 349.687,84.8988 354.354,86.7321 359.5,87.5C 359.167,88.1667 358.833,88.8333 358.5,89.5C 348.779,86.0366 339.112,82.3699 329.5,78.5C 326.15,82.5395 324.15,87.2062 323.5,92.5C 322.833,91.8333 322.167,91.1667 321.5,90.5C 323.614,86.2947 325.114,81.9613 326,77.5C 319.991,74.997 313.824,72.997 307.5,71.5C 305.594,75.9859 304.26,80.6526 303.5,85.5C 302.833,84.8333 302.167,84.1667 301.5,83.5C 303.171,78.8272 304.837,74.1605 306.5,69.5C 301.846,68.0032 297.18,66.8365 292.5,66C 289.561,70.0416 287.894,74.5416 287.5,79.5C 287.062,79.4346 286.728,79.6012 286.5,80C 287.833,80.6667 289.167,81.3333 290.5,82C 289.5,82.3333 288.5,82.6667 287.5,83C 288.817,84.7672 290.484,86.1005 292.5,87C 290.687,86.9536 289.021,87.1203 287.5,87.5C 293.027,88.477 293.527,90.1437 289,92.5C 288.691,93.7659 288.191,94.9326 287.5,96C 291.378,96.9486 291.378,98.1153 287.5,99.5C 288.167,100.167 288.833,100.833 289.5,101.5C 288.746,104.777 288.246,108.11 288,111.5C 285.871,110.137 285.371,110.471 286.5,112.5C 285.065,113.929 284.065,115.595 283.5,117.5C 283.833,118.167 284.167,118.833 284.5,119.5C 287.247,115.646 288.08,116.312 287,121.5C 285.612,120.446 284.112,120.28 282.5,121C 281.289,122.113 281.289,123.28 282.5,124.5C 281.249,125.631 280.249,126.964 279.5,128.5C 279.608,129.442 279.941,130.275 280.5,131C 278.833,131.333 277.167,131.667 275.5,132C 279.932,132.623 280.265,133.623 276.5,135C 277.793,135.49 279.127,135.657 280.5,135.5C 280.421,136.93 280.754,138.264 281.5,139.5C 283.862,139.974 286.195,140.308 288.5,140.5C 286.004,141.58 283.67,142.914 281.5,144.5C 280.549,143.674 279.549,143.508 278.5,144C 276.5,146.333 274.5,148.667 272.5,151C 279.147,153.776 278.814,156.109 271.5,158C 274.761,160.796 278.427,162.796 282.5,164C 280.765,164.651 279.098,164.485 277.5,163.5C 276.537,163.97 276.537,164.637 277.5,165.5C 269.992,162.797 262.659,159.797 255.5,156.5C 255.756,154.224 257.09,153.057 259.5,153C 256.063,152.351 255.896,151.851 259,151.5C 261.241,151.68 261.741,152.513 260.5,154C 261,154.5 261.5,155 262,155.5C 262.408,153.59 263.575,152.59 265.5,152.5C 267.453,153.156 269.453,153.489 271.5,153.5C 271.715,148.077 270.715,142.91 268.5,138C 268.492,134.846 269.158,134.679 270.5,137.5C 270.833,136.833 271.167,136.167 271.5,135.5C 270.393,133.94 270.393,132.44 271.5,131C 271.081,128.914 269.914,127.414 268,126.5C 266.463,122.756 266.463,119.089 268,115.5C 269.57,116.614 270.903,117.947 272,119.5C 272.777,116.571 272.61,113.737 271.5,111C 272.833,110.333 274.167,110.333 275.5,111C 274.159,118.106 274.826,118.273 277.5,111.5C 277.938,114.556 279.105,117.223 281,119.5C 281.682,117.062 281.182,114.895 279.5,113C 280.7,111.297 280.367,109.797 278.5,108.5C 279.309,106.929 279.643,105.262 279.5,103.5C 280.552,103.649 281.552,103.483 282.5,103C 280.038,101.784 277.371,101.118 274.5,101C 275.727,99.4126 275.394,98.0793 273.5,97C 274.308,95.2942 275.641,94.4609 277.5,94.5C 277.481,92.9397 277.148,91.4397 276.5,90C 276.63,88.9412 277.13,88.1079 278,87.5C 278.822,90.1168 279.322,92.7835 279.5,95.5C 278.127,95.3433 276.793,95.51 275.5,96C 276.693,98.0267 278.36,99.5267 280.5,100.5C 281.052,98.9974 281.052,97.3307 280.5,95.5C 281.822,95.33 282.989,95.6634 284,96.5C 284.167,96 284.333,95.5 284.5,95C 284.445,92.5818 284.112,90.0818 283.5,87.5C 282.549,88.3256 281.549,88.4922 280.5,88C 281.833,87 281.833,86 280.5,85C 281.308,84.6924 281.975,84.1924 282.5,83.5C 279.285,82.5522 278.952,81.2189 281.5,79.5C 278.489,77.918 276.155,76.2514 274.5,74.5C 277.988,76.2772 281.654,77.1105 285.5,77C 287.26,73.2251 288.927,69.3917 290.5,65.5C 286.743,62.8475 282.577,60.8475 278,59.5C 275.692,61.4437 273.859,63.7771 272.5,66.5C 272.873,63.4261 273.539,60.4261 274.5,57.5C 270.196,56.1772 265.863,54.8439 261.5,53.5C 258.493,56.8458 256.493,60.8458 255.5,65.5C 255.543,66.4164 255.876,67.0831 256.5,67.5C 254.668,68.7181 253.668,68.0514 253.5,65.5C 254.234,64.2921 254.567,62.9587 254.5,61.5C 259.109,52.5978 262.943,43.2644 266,33.5C 266.852,32.4293 267.685,31.4293 268.5,30.5C 267.769,32.5988 267.769,34.5988 268.5,36.5C 275.722,39.6108 283.056,42.4441 290.5,45C 292.066,45.765 293.399,45.5983 294.5,44.5C 294.833,44.5 295.167,44.5 295.5,44.5C 295.574,46.4109 296.574,47.5776 298.5,48C 302.15,49.445 305.817,50.445 309.5,51C 311.434,47.1298 313.1,43.1298 314.5,39C 313.644,37.4053 312.311,36.572 310.5,36.5C 311.167,35.8333 311.833,35.1667 312.5,34.5C 313.822,30.516 315.156,26.516 316.5,22.5C 316.457,21.5836 316.124,20.9169 315.5,20.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#151717\",d:\"M 321.5,90.5 C 320.001,91.494 318.334,91.494 316.5,90.5C 312.478,88.2661 308.144,86.5995 303.5,85.5C 304.26,80.6526 305.594,75.9859 307.5,71.5C 313.824,72.997 319.991,74.997 326,77.5C 325.114,81.9613 323.614,86.2947 321.5,90.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7f7d7b\",d:\"M 320.5,77.5 C 323.686,77.9736 324.186,79.307 322,81.5C 321.25,80.8742 320.416,80.3742 319.5,80C 320.252,79.3292 320.586,78.4959 320.5,77.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#161819\",d:\"M 301.5,83.5 C 296.793,82.3761 292.126,81.0428 287.5,79.5C 287.894,74.5416 289.561,70.0416 292.5,66C 297.18,66.8365 301.846,68.0032 306.5,69.5C 304.837,74.1605 303.171,78.8272 301.5,83.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#62656b\",d:\"M 291.5,75.5 C 294.298,76.1 296.965,77.1 299.5,78.5C 300.521,79.0016 300.688,79.6683 300,80.5C 297.557,79.4067 295.057,78.4067 292.5,77.5C 291.702,77.0431 291.369,76.3764 291.5,75.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6f7072\",d:\"M 337.5,70.5 C 340.797,70.3287 341.131,70.9954 338.5,72.5C 341.131,74.0046 340.797,74.6713 337.5,74.5C 337.5,73.1667 337.5,71.8333 337.5,70.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#131617\",d:\"M 318.5,57.5 C 323.249,58.4795 327.749,60.1462 332,62.5C 331.258,66.841 329.758,71.0077 327.5,75C 322.936,74.9412 318.603,73.7746 314.5,71.5C 313.386,70.277 313.219,68.9437 314,67.5C 315.604,64.1792 317.104,60.8458 318.5,57.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6f7478\",d:\"M 322.5,64.5 C 323.376,64.3691 324.043,64.7025 324.5,65.5C 323.897,66.6348 323.564,67.6348 323.5,68.5C 321.3,67.6754 320.966,66.3421 322.5,64.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#13171a\",d:\"M 302.5,51.5 C 307.328,52.2761 311.828,53.9428 316,56.5C 315.258,60.841 313.758,65.0077 311.5,69C 307.061,68.5814 302.727,67.4148 298.5,65.5C 297.386,64.277 297.219,62.9437 298,61.5C 299.604,58.1792 301.104,54.8458 302.5,51.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6a7278\",d:\"M 306.5,57.5 C 308.984,58.9641 308.984,60.6308 306.5,62.5C 305.948,60.9974 305.948,59.3307 306.5,57.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#131616\",d:\"M 286.5,45.5 C 291.167,46.8333 295.833,48.1667 300.5,49.5C 299.549,54.2403 297.883,58.7403 295.5,63C 290.827,62.1823 286.16,61.0156 281.5,59.5C 282.376,54.5364 284.043,49.8697 286.5,45.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#131518\",d:\"M 315.5,39.5 C 320.461,40.3194 325.294,41.6527 330,43.5C 329.55,48.2605 328.05,52.7605 325.5,57C 320.81,56.3257 316.31,54.8257 312,52.5C 313.108,48.2433 314.275,43.91 315.5,39.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6b6e74\",d:\"M 320.5,45.5 C 322.176,46.1834 322.843,47.5168 322.5,49.5C 321.448,49.6495 320.448,49.4828 319.5,49C 320.337,47.9887 320.67,46.8221 320.5,45.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#151718\",d:\"M 265.5,38.5 C 271.978,39.4864 278.145,41.4864 284,44.5C 283.518,48.9408 282.018,53.1075 279.5,57C 272.83,56.4423 266.83,54.1089 261.5,50C 263.137,46.2559 264.47,42.4225 265.5,38.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#131517\",d:\"M 310.5,36.5 C 312.311,36.572 313.644,37.4053 314.5,39C 313.1,43.1298 311.434,47.1298 309.5,51C 305.817,50.445 302.15,49.445 298.5,48C 296.574,47.5776 295.574,46.4109 295.5,44.5C 297.246,41.1284 298.912,37.6284 300.5,34C 304.019,33.9165 307.353,34.7499 310.5,36.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#72757a\",d:\"M 304.5,40.5 C 306.344,41.2039 306.844,42.5372 306,44.5C 303.628,43.6828 303.128,42.3495 304.5,40.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6d7076\",d:\"M 321.5,28.5 C 325.041,29.1429 325.874,30.8096 324,33.5C 323.683,31.6992 323.016,31.3659 322,32.5C 321.51,31.2068 321.343,29.8734 321.5,28.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f9f7f1\",d:\"M 264.5,-0.5 C 265.833,-0.5 267.167,-0.5 268.5,-0.5C 269.303,0.423175 269.47,1.42317 269,2.5C 264.795,6.92568 261.628,11.9257 259.5,17.5C 257.204,19.4006 255.371,21.7339 254,24.5C 251.682,28.6193 249.848,32.9526 248.5,37.5C 244.883,44.8875 241.883,52.5542 239.5,60.5C 237.355,64.2378 235.021,67.9045 232.5,71.5C 230.613,74.5766 228.446,77.5766 226,80.5C 224.881,83.0571 224.715,85.5571 225.5,88C 222.068,92.6208 219.735,97.7875 218.5,103.5C 216.124,107.456 214.957,111.789 215,116.5C 214.667,116.167 214.333,115.833 214,115.5C 212.991,117.025 212.491,118.692 212.5,120.5C 210.96,122.838 210.294,125.505 210.5,128.5C 206.154,128.666 201.821,128.499 197.5,128C 198.022,125.995 199.688,124.495 202.5,123.5C 204.003,124.052 205.669,124.052 207.5,123.5C 207.5,122.167 207.5,120.833 207.5,119.5C 204.626,119.451 201.792,119.784 199,120.5C 197.624,120.316 196.791,119.649 196.5,118.5C 198.807,117.347 201.14,116.18 203.5,115C 204.663,109.385 206.163,109.551 208,115.5C 210.349,113.496 210.849,111.163 209.5,108.5C 210.325,107.614 211.325,107.281 212.5,107.5C 212.989,102.362 214.656,97.695 217.5,93.5C 218.339,92.3588 219.006,91.0255 219.5,89.5C 219.331,87.8827 218.997,86.216 218.5,84.5C 215.897,85.5617 213.23,85.7284 210.5,85C 212.569,83.4766 214.903,82.6432 217.5,82.5C 217.651,79.2819 218.484,78.9485 220,81.5C 222.339,79.8599 223.172,77.8599 222.5,75.5C 221.575,76.6405 220.741,76.6405 220,75.5C 219.517,76.448 219.351,77.448 219.5,78.5C 215.187,80.9394 210.52,82.6061 205.5,83.5C 205.5,83.1667 205.5,82.8333 205.5,82.5C 207.812,81.6805 210.146,80.8471 212.5,80C 212.167,79.6667 211.833,79.3333 211.5,79C 212.5,76.6667 213.5,74.3333 214.5,72C 213.833,71.3333 213.167,70.6667 212.5,70C 217.257,67.8739 220.59,69.3739 222.5,74.5C 223.934,73.0642 225.1,71.3975 226,69.5C 226.333,70.1667 226.667,70.8333 227,71.5C 231.041,65.4141 234.541,59.0808 237.5,52.5C 236.115,51.4495 235.115,50.1161 234.5,48.5C 236.07,48.3062 237.57,48.3062 239,48.5C 241.541,41.7466 244.374,35.0799 247.5,28.5C 252.616,18.4537 258.283,8.78704 264.5,-0.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#17191c\",d:\"M 350.5,69.5 C 355.398,70.2975 360.064,71.6308 364.5,73.5C 363.607,78.5166 361.94,83.1832 359.5,87.5C 354.354,86.7321 349.687,84.8988 345.5,82C 347.044,77.7513 348.71,73.5847 350.5,69.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#252625\",d:\"M 494.5,71.5 C 495.801,72.8845 495.801,74.3845 494.5,76C 495.071,77.2051 495.738,78.3717 496.5,79.5C 499.617,76.9196 502.451,77.2529 505,80.5C 505.333,80.1667 505.667,79.8333 506,79.5C 506.368,80.91 507.201,81.91 508.5,82.5C 509.609,81.4104 510.609,81.4104 511.5,82.5C 509.955,83.4519 508.288,83.7852 506.5,83.5C 506.5,84.5 506.5,85.5 506.5,86.5C 503.402,86.4125 503.068,86.9125 505.5,88C 505.272,88.3988 504.938,88.5654 504.5,88.5C 499.952,86.9763 495.452,85.3097 491,83.5C 491.264,79.2871 492.43,75.2871 494.5,71.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b1ab9c\",d:\"M 45.5,85.5 C 37.9404,87.0459 30.2737,87.5459 22.5,87C 23.056,86.6174 23.3893,86.1174 23.5,85.5C 28.8009,84.8227 34.1343,84.3227 39.5,84C 44.7732,82.3446 50.1065,81.3446 55.5,81C 52.4671,83.2077 49.1337,84.7077 45.5,85.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bb9b8e\",d:\"M 141.5,71.5 C 143.503,77.0049 146.17,82.1715 149.5,87C 147.899,87.2734 146.399,87.7734 145,88.5C 142.667,88.1667 140.333,87.8333 138,87.5C 136.667,88.1667 135.333,88.8333 134,89.5C 131.258,89.7253 128.424,89.3919 125.5,88.5C 124.763,86.6954 123.763,85.0287 122.5,83.5C 122.846,82.3044 123.346,82.3044 124,83.5C 124.667,82.5 124.667,81.5 124,80.5C 120.943,75.6142 118.11,70.6142 115.5,65.5C 120.654,62.3278 125.82,58.9945 131,55.5C 134.394,61.0298 137.894,66.3631 141.5,71.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#99807e\",d:\"M 179.5,91.5 C 179.44,92.0431 179.107,92.3764 178.5,92.5C 174.279,89.3462 169.945,89.0128 165.5,91.5C 165.815,93.483 166.815,94.8163 168.5,95.5C 168.631,96.2389 168.464,96.9056 168,97.5C 167.329,96.7476 166.496,96.4142 165.5,96.5C 162.835,94.1645 161.502,91.1645 161.5,87.5C 160.909,86.8485 160.243,86.1818 159.5,85.5C 161.294,82.2809 162.794,78.9476 164,75.5C 164.667,74.8333 165.333,74.1667 166,73.5C 166.18,75.4884 166.014,77.4884 165.5,79.5C 166.5,79.5 167.5,79.5 168.5,79.5C 168.491,77.6916 168.991,76.0249 170,74.5C 172.007,75.6687 174.173,76.3354 176.5,76.5C 176.722,81.9446 174.722,82.9446 170.5,79.5C 171.326,78.549 171.492,77.549 171,76.5C 169.516,79.4689 168.016,82.4689 166.5,85.5C 167.365,86.5827 168.365,86.7494 169.5,86C 169.043,85.586 168.709,85.086 168.5,84.5C 169.617,81.6867 171.45,81.02 174,82.5C 174.333,83.8333 174.667,85.1667 175,86.5C 175.483,85.552 175.649,84.552 175.5,83.5C 177.512,82.9862 179.512,82.8195 181.5,83C 180.833,83.3333 180.167,83.6667 179.5,84C 181.259,85.7639 181.426,87.9306 180,90.5C 173.104,88.0742 172.937,88.4076 179.5,91.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e5e0d3\",d:\"M 217.5,93.5 C 217.265,92.9033 216.765,92.5699 216,92.5C 214.5,93 213,93.5 211.5,94C 211.45,96.4702 212.117,98.3035 213.5,99.5C 210.306,99.1756 209.306,100.342 210.5,103C 209.338,103.827 208.171,104.66 207,105.5C 206.228,105.355 205.561,105.022 205,104.5C 205.034,101.637 205.201,98.6369 205.5,95.5C 205.471,93.9707 204.804,92.804 203.5,92C 205.303,90.738 206.636,89.0713 207.5,87C 206.756,85.9614 205.756,85.4614 204.5,85.5C 204.328,84.5084 204.662,83.8417 205.5,83.5C 210.52,82.6061 215.187,80.9394 219.5,78.5C 219.351,77.448 219.517,76.448 220,75.5C 220.741,76.6405 221.575,76.6405 222.5,75.5C 223.172,77.8599 222.339,79.8599 220,81.5C 218.484,78.9485 217.651,79.2819 217.5,82.5C 214.903,82.6432 212.569,83.4766 210.5,85C 213.23,85.7284 215.897,85.5617 218.5,84.5C 218.997,86.216 219.331,87.8827 219.5,89.5C 219.006,91.0255 218.339,92.3588 217.5,93.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#5d5e60\",d:\"M 306.5,81.5 C 311.167,82.8333 315.833,84.1667 320.5,85.5C 320.719,86.675 320.386,87.675 319.5,88.5C 314.843,86.3451 310.51,84.0118 306.5,81.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c7c6c1\",d:\"M 287.5,79.5 C 292.126,81.0428 296.793,82.3761 301.5,83.5C 302.167,84.1667 302.833,84.8333 303.5,85.5C 308.144,86.5995 312.478,88.2661 316.5,90.5C 316.927,91.2616 316.927,92.2616 316.5,93.5C 314.451,92.3586 312.451,92.3586 310.5,93.5C 301.412,115.589 292.412,137.755 283.5,160C 284.87,161.441 285.87,163.108 286.5,165C 291.191,166.836 295.858,168.67 300.5,170.5C 304.172,171.835 307.838,173.168 311.5,174.5C 315.755,176.363 320.088,178.03 324.5,179.5C 323.209,179.263 322.209,179.596 321.5,180.5C 319.833,180.5 318.167,180.5 316.5,180.5C 303.231,176.079 290.231,171.079 277.5,165.5C 276.537,164.637 276.537,163.97 277.5,163.5C 279.098,164.485 280.765,164.651 282.5,164C 278.427,162.796 274.761,160.796 271.5,158C 278.814,156.109 279.147,153.776 272.5,151C 274.5,148.667 276.5,146.333 278.5,144C 279.549,143.508 280.549,143.674 281.5,144.5C 283.67,142.914 286.004,141.58 288.5,140.5C 286.195,140.308 283.862,139.974 281.5,139.5C 280.754,138.264 280.421,136.93 280.5,135.5C 279.127,135.657 277.793,135.49 276.5,135C 280.265,133.623 279.932,132.623 275.5,132C 277.167,131.667 278.833,131.333 280.5,131C 279.941,130.275 279.608,129.442 279.5,128.5C 280.249,126.964 281.249,125.631 282.5,124.5C 281.289,123.28 281.289,122.113 282.5,121C 284.112,120.28 285.612,120.446 287,121.5C 288.08,116.312 287.247,115.646 284.5,119.5C 284.167,118.833 283.833,118.167 283.5,117.5C 284.065,115.595 285.065,113.929 286.5,112.5C 285.371,110.471 285.871,110.137 288,111.5C 288.246,108.11 288.746,104.777 289.5,101.5C 288.833,100.833 288.167,100.167 287.5,99.5C 291.378,98.1153 291.378,96.9486 287.5,96C 288.191,94.9326 288.691,93.7659 289,92.5C 293.527,90.1437 293.027,88.477 287.5,87.5C 289.021,87.1203 290.687,86.9536 292.5,87C 290.484,86.1005 288.817,84.7672 287.5,83C 288.5,82.6667 289.5,82.3333 290.5,82C 289.167,81.3333 287.833,80.6667 286.5,80C 286.728,79.6012 287.062,79.4346 287.5,79.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#17191b\",d:\"M 422.5,77.5 C 424.167,78.1667 425.833,78.8333 427.5,79.5C 426.714,84.362 425.047,88.862 422.5,93C 418.835,92.3552 415.169,91.3552 411.5,90C 410.09,89.6322 409.09,88.7989 408.5,87.5C 409.69,82.7868 411.69,78.4535 414.5,74.5C 417.035,75.9 419.702,76.9 422.5,77.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#141719\",d:\"M 366.5,75.5 C 371.353,76.2645 376.02,77.5978 380.5,79.5C 379.74,84.3474 378.406,89.0141 376.5,93.5C 371.17,92.8344 366.17,91.1677 361.5,88.5C 362.899,84.0402 364.566,79.7069 366.5,75.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6c6f75\",d:\"M 370.5,82.5 C 374.079,82.7657 374.413,84.099 371.5,86.5C 369.358,85.5629 369.024,84.2296 370.5,82.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#19191b\",d:\"M 432.5,80.5 C 435.868,82.6085 439.534,84.2751 443.5,85.5C 444.386,86.325 444.719,87.325 444.5,88.5C 442.62,92.2679 440.453,95.9346 438,99.5C 433.757,98.1969 429.59,96.6969 425.5,95C 424.978,94.4387 424.645,93.772 424.5,93C 426.271,89.1787 427.938,85.3454 429.5,81.5C 430.209,80.596 431.209,80.2627 432.5,80.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cfd0d1\",d:\"M 421.5,33.5 C 421.842,32.6618 422.508,32.3284 423.5,32.5C 423.918,33.2216 424.584,33.7216 425.5,34C 424.944,34.3826 424.611,34.8826 424.5,35.5C 423.661,36.6412 422.994,37.9745 422.5,39.5C 426.502,42.4137 431.002,44.4137 436,45.5C 437.31,44.8699 438.144,43.8699 438.5,42.5C 438.833,42.5 439.167,42.5 439.5,42.5C 439.215,44.288 439.548,45.9547 440.5,47.5C 443.769,48.4685 446.769,49.8019 449.5,51.5C 453.697,51.8063 455.697,49.8063 455.5,45.5C 456.833,45.5 457.5,46.1667 457.5,47.5C 455.926,49.1016 455.259,51.1016 455.5,53.5C 459.804,54.8228 464.137,56.1561 468.5,57.5C 470.975,56.3227 471.975,54.3227 471.5,51.5C 473.993,51.1307 474.66,51.7973 473.5,53.5C 472.847,54.8068 472.18,56.1401 471.5,57.5C 475.383,60.2722 479.717,62.2722 484.5,63.5C 486.516,63.4841 487.516,62.4841 487.5,60.5C 488.167,60.5 488.5,60.8333 488.5,61.5C 488.238,62.9778 488.571,64.3112 489.5,65.5C 490.739,65.9424 491.739,66.6091 492.5,67.5C 494.786,67.595 496.786,68.2616 498.5,69.5C 496.517,69.1568 495.183,69.8235 494.5,71.5C 492.43,75.2871 491.264,79.2871 491,83.5C 495.452,85.3097 499.952,86.9763 504.5,88.5C 506.936,89.871 509.603,90.871 512.5,91.5C 513.757,92.6226 513.424,93.2893 511.5,93.5C 508.28,92.0088 504.946,90.5088 501.5,89C 499.866,88.5065 498.199,88.3398 496.5,88.5C 495.784,91.5982 494.784,94.5982 493.5,97.5C 493.018,98.4163 492.685,99.4163 492.5,100.5C 493.523,102.003 494.523,103.503 495.5,105C 495.011,106.138 494.678,107.305 494.5,108.5C 492.801,111.237 491.467,114.237 490.5,117.5C 493.431,120.49 497.098,122.157 501.5,122.5C 501.5,123.833 500.833,124.5 499.5,124.5C 491.342,120.928 483.009,117.595 474.5,114.5C 471.173,113.317 467.839,112.484 464.5,112C 463.534,114.769 462.201,117.269 460.5,119.5C 461.054,116.438 461.554,113.438 462,110.5C 457.757,108.128 453.257,106.461 448.5,105.5C 447.5,106.833 446.5,108.167 445.5,109.5C 445.5,109.167 445.5,108.833 445.5,108.5C 445.833,107.167 446.167,105.833 446.5,104.5C 446.5,104.167 446.5,103.833 446.5,103.5C 448.216,103.629 449.883,103.962 451.5,104.5C 453.01,105.728 454.51,105.728 456,104.5C 457.639,100.722 459.139,96.8892 460.5,93C 456.256,90.4648 451.756,88.2981 447,86.5C 446.283,87.0442 445.783,87.7109 445.5,88.5C 445.167,88.5 444.833,88.5 444.5,88.5C 444.719,87.325 444.386,86.325 443.5,85.5C 439.534,84.2751 435.868,82.6085 432.5,80.5C 431.209,80.2627 430.209,80.596 429.5,81.5C 428.833,80.8333 428.167,80.1667 427.5,79.5C 425.833,78.8333 424.167,78.1667 422.5,77.5C 422.5,77.1667 422.5,76.8333 422.5,76.5C 423.5,76.5 424.5,76.5 425.5,76.5C 426.626,72.4558 427.959,68.4558 429.5,64.5C 427.524,61.8394 424.857,60.1727 421.5,59.5C 422.167,58.8333 422.833,58.1667 423.5,57.5C 424.092,54.3093 425.259,51.3093 427,48.5C 427.667,47.1667 427.667,45.8333 427,44.5C 423.854,43.0901 420.687,41.7568 417.5,40.5C 417.5,40.1667 417.5,39.8333 417.5,39.5C 421.904,39.3383 423.237,37.3383 421.5,33.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#313036\",d:\"M 480.5,83.5 C 486.186,82.5171 491.186,84.1838 495.5,88.5C 493.902,92.1264 492.402,95.7931 491,99.5C 489.224,100.536 487.391,100.536 485.5,99.5C 485.918,98.7784 486.584,98.2784 487.5,98C 485.213,96.5728 484.88,94.7394 486.5,92.5C 486.167,92.1667 485.833,91.8333 485.5,91.5C 484.757,92.9079 483.923,94.2412 483,95.5C 481.482,95.9426 480.315,95.2759 479.5,93.5C 480.711,92.2798 480.711,91.1131 479.5,90C 480.966,88.4478 481.966,86.6145 482.5,84.5C 482.043,83.7025 481.376,83.3691 480.5,83.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#48484d\",d:\"M 464.5,76.5 C 466.783,78.5864 469.45,80.0864 472.5,81C 471.151,81.7724 470.318,82.9391 470,84.5C 469.667,83.5 469.333,82.5 469,81.5C 467.921,83.3937 466.587,83.727 465,82.5C 465.196,85.2614 465.029,88.2614 464.5,91.5C 461.873,91.7067 460.207,90.54 459.5,88C 460.899,83.9416 462.566,80.1082 464.5,76.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#25262a\",d:\"M 464.5,76.5 C 470.18,76.4041 474.847,78.4041 478.5,82.5C 477.149,86.5264 475.815,90.5264 474.5,94.5C 471.167,93.8333 467.833,93.1667 464.5,92.5C 464.5,92.1667 464.5,91.8333 464.5,91.5C 465.029,88.2614 465.196,85.2614 465,82.5C 466.587,83.727 467.921,83.3937 469,81.5C 469.333,82.5 469.667,83.5 470,84.5C 470.318,82.9391 471.151,81.7724 472.5,81C 469.45,80.0864 466.783,78.5864 464.5,76.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#131416\",d:\"M 455.5,72.5 C 457.746,73.4552 460.079,74.1218 462.5,74.5C 461.331,79.174 459.664,83.674 457.5,88C 453.418,87.3643 449.418,86.1976 445.5,84.5C 445.577,83.2502 446.244,82.4169 447.5,82C 445.314,81.3964 445.148,80.2297 447,78.5C 449.578,75.1548 452.411,74.1548 455.5,75.5C 455.74,74.2821 455.74,73.2821 455.5,72.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#717274\",d:\"M 452.5,76.5 C 455.188,78.2246 454.855,79.558 451.5,80.5C 451.167,80.3333 450.833,80.1667 450.5,80C 451.305,78.8873 451.972,77.7206 452.5,76.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#2f2f31\",d:\"M 455.5,72.5 C 455.74,73.2821 455.74,74.2821 455.5,75.5C 452.411,74.1548 449.578,75.1548 447,78.5C 445.148,80.2297 445.314,81.3964 447.5,82C 446.244,82.4169 445.577,83.2502 445.5,84.5C 443.5,84.5 442.5,83.5 442.5,81.5C 444.631,78.3003 446.298,74.8003 447.5,71C 450.482,70.2971 453.149,70.7971 455.5,72.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#424347\",d:\"M 492.5,67.5 C 492.923,68.2646 493.257,69.0979 493.5,70C 491.767,74.4041 489.767,78.5708 487.5,82.5C 482.571,81.0334 477.904,79.0334 473.5,76.5C 474.631,71.5826 476.797,67.2493 480,63.5C 484.037,65.3462 488.204,66.6796 492.5,67.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#17171c\",d:\"M 442.5,81.5 C 441.735,81.9234 440.902,82.2568 440,82.5C 437.681,81.1287 435.181,80.4621 432.5,80.5C 430.397,79.3501 428.397,78.0167 426.5,76.5C 428.121,71.9626 430.121,67.6293 432.5,63.5C 436.644,65.2691 440.81,66.9358 445,68.5C 444.802,72.9176 443.969,77.2509 442.5,81.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#686871\",d:\"M 435.5,70.5 C 437.912,70.6941 438.912,72.0274 438.5,74.5C 434.814,74.87 433.814,73.5367 435.5,70.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#212226\",d:\"M 462.5,58.5 C 467.009,58.7641 471.509,60.0974 476,62.5C 475.585,67.0272 474.252,71.3605 472,75.5C 471.014,76.1712 469.847,76.1712 468.5,75.5C 469.263,74.7321 470.263,74.2321 471.5,74C 470.531,72.2417 469.364,71.7417 468,72.5C 467.781,71.062 467.281,69.7287 466.5,68.5C 465.808,69.0253 465.308,69.6919 465,70.5C 463.759,69.0625 463.259,67.5625 463.5,66C 465.788,65.1779 468.122,64.5112 470.5,64C 468.382,62.6546 466.382,62.1546 464.5,62.5C 466.078,61.7022 467.744,61.2022 469.5,61C 466.97,60.6207 464.637,59.7874 462.5,58.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#404044\",d:\"M 462.5,58.5 C 464.637,59.7874 466.97,60.6207 469.5,61C 467.744,61.2022 466.078,61.7022 464.5,62.5C 466.382,62.1546 468.382,62.6546 470.5,64C 468.122,64.5112 465.788,65.1779 463.5,66C 463.259,67.5625 463.759,69.0625 465,70.5C 465.308,69.6919 465.808,69.0253 466.5,68.5C 467.281,69.7287 467.781,71.062 468,72.5C 469.364,71.7417 470.531,72.2417 471.5,74C 470.263,74.2321 469.263,74.7321 468.5,75.5C 464.984,74.6571 461.65,73.3238 458.5,71.5C 458.193,66.7477 459.527,62.4144 462.5,58.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#161718\",d:\"M 435.5,47.5 C 438.917,48.0761 441.917,49.4094 444.5,51.5C 443.027,55.2508 441.36,58.9175 439.5,62.5C 436.646,63.4503 433.98,63.117 431.5,61.5C 432.81,59.8523 434.143,58.1856 435.5,56.5C 435.192,55.6919 434.692,55.0253 434,54.5C 433,55.8333 432,57.1667 431,58.5C 429.675,55.4116 430.509,52.7449 433.5,50.5C 435.248,52.9935 436.914,52.8268 438.5,50C 437.167,49.3333 435.833,48.6667 434.5,48C 434.728,47.6012 435.062,47.4346 435.5,47.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#171919\",d:\"M 451.5,53.5 C 454.179,54.2261 456.846,55.0594 459.5,56C 460.022,56.5613 460.355,57.228 460.5,58C 458.438,61.6149 457.105,65.4483 456.5,69.5C 450.956,69.2077 445.956,67.5411 441.5,64.5C 443.226,64.8146 444.893,64.9813 446.5,65C 445.167,62.6667 445.167,60.3333 446.5,58C 447.966,57.3645 449.3,56.5312 450.5,55.5C 451.194,58.5972 452.194,58.9305 453.5,56.5C 452.619,55.0295 451.286,54.1962 449.5,54C 450.094,53.5357 450.761,53.369 451.5,53.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#707373\",d:\"M 448.5,61.5 C 449.5,61.5 450.5,61.5 451.5,61.5C 451.5,62.5 451.5,63.5 451.5,64.5C 450.5,64.5 449.5,64.5 448.5,64.5C 448.5,63.5 448.5,62.5 448.5,61.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#333537\",d:\"M 449.5,51.5 C 450.167,52.1667 450.833,52.8333 451.5,53.5C 450.761,53.369 450.094,53.5357 449.5,54C 451.286,54.1962 452.619,55.0295 453.5,56.5C 452.194,58.9305 451.194,58.5972 450.5,55.5C 449.3,56.5312 447.966,57.3645 446.5,58C 445.167,60.3333 445.167,62.6667 446.5,65C 444.893,64.9813 443.226,64.8146 441.5,64.5C 442.253,60.3228 443.586,56.3228 445.5,52.5C 446.689,51.5713 448.022,51.238 449.5,51.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#38373b\",d:\"M 435.5,47.5 C 435.062,47.4346 434.728,47.6012 434.5,48C 435.833,48.6667 437.167,49.3333 438.5,50C 436.914,52.8268 435.248,52.9935 433.5,50.5C 430.509,52.7449 429.675,55.4116 431,58.5C 432,57.1667 433,55.8333 434,54.5C 434.692,55.0253 435.192,55.6919 435.5,56.5C 434.143,58.1856 432.81,59.8523 431.5,61.5C 429.254,60.5448 426.921,59.8782 424.5,59.5C 425.979,55.1981 427.479,50.8648 429,46.5C 431.373,45.457 433.54,45.7903 435.5,47.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d6cfbe\",d:\"M 20.5,83.5 C 21.2905,84.4013 22.2905,85.0679 23.5,85.5C 23.3893,86.1174 23.056,86.6174 22.5,87C 30.2737,87.5459 37.9404,87.0459 45.5,85.5C 45.8039,86.1499 46.1373,86.8165 46.5,87.5C 44.5485,89.533 42.3818,89.8663 40,88.5C 37.2656,89.3617 37.0989,90.195 39.5,91C 35.0951,93.6172 30.4284,95.1172 25.5,95.5C 20.6932,95.519 16.0265,96.019 11.5,97C 12.6341,95.984 12.3008,95.3173 10.5,95C 12.2817,94.1859 13.7817,93.0192 15,91.5C 18.0818,94.1973 20.9151,93.864 23.5,90.5C 21.7045,89.8586 20.2045,88.8586 19,87.5C 12.3563,88.7467 5.85628,90.4134 -0.5,92.5C -0.5,91.5 -0.5,90.5 -0.5,89.5C 3.1309,89.8396 6.46423,89.0063 9.5,87C 9.94366,85.4667 10.277,83.9667 10.5,82.5C 12.5,83.5 14.5,84.5 16.5,85.5C 17.5237,84.1468 18.857,83.4802 20.5,83.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c2a191\",d:\"M 111.5,69.5 C 114.655,75.1394 117.821,80.8061 121,86.5C 122.11,88.0368 123.61,88.7035 125.5,88.5C 122.523,88.9016 119.857,89.9016 117.5,91.5C 117.245,102.647 117.245,113.981 117.5,125.5C 116.209,125.737 115.209,125.404 114.5,124.5C 115.773,123.923 115.773,123.257 114.5,122.5C 113.833,122.833 113.167,123.167 112.5,123.5C 106.387,121.599 100.053,120.932 93.5,121.5C 92.0993,117.314 91.266,112.981 91,108.5C 90.1475,106.875 89.1475,106.542 88,107.5C 86.4094,104.142 84.5761,100.975 82.5,98C 79.4726,96.4863 76.4726,94.9863 73.5,93.5C 75.0049,92.1585 75.6715,90.4918 75.5,88.5C 79.2373,86.6936 83.2373,85.527 87.5,85C 88.6341,83.984 88.3008,83.3173 86.5,83C 87.9931,81.6319 89.4931,81.4652 91,82.5C 91.5,80.6667 92.6667,79.5 94.5,79C 96.8333,78.6667 99.1667,78.3333 101.5,78C 99.6992,77.6827 99.3659,77.016 100.5,76C 104.358,74.9017 108.024,72.735 111.5,69.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ddd5c7\",d:\"M 60.5,88.5 C 64.2452,89.2072 67.9119,89.3739 71.5,89C 68.4998,90.9089 65.8332,93.0755 63.5,95.5C 57.6782,97.7422 52.6782,100.242 48.5,103C 46.8659,103.494 45.1992,103.66 43.5,103.5C 41.8812,102.928 40.2145,102.595 38.5,102.5C 43.5512,101.154 48.5512,99.6541 53.5,98C 53.1667,97.6667 52.8333,97.3333 52.5,97C 49.5283,97.0523 46.6949,97.8856 44,99.5C 40.6758,98.9496 37.5091,98.2829 34.5,97.5C 37.5983,97.5875 37.9316,97.0875 35.5,96C 37.8633,93.8199 40.53,92.1532 43.5,91C 49.367,90.5569 55.0337,89.7236 60.5,88.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#baa597\",d:\"M 114.5,65.5 C 112.738,66.2623 111.738,67.5956 111.5,69.5C 108.024,72.735 104.358,74.9017 100.5,76C 99.3659,77.016 99.6992,77.6827 101.5,78C 99.1667,78.3333 96.8333,78.6667 94.5,79C 92.6667,79.5 91.5,80.6667 91,82.5C 89.4931,81.4652 87.9931,81.6319 86.5,83C 88.3008,83.3173 88.6341,83.984 87.5,85C 83.2373,85.527 79.2373,86.6936 75.5,88.5C 75.6715,90.4918 75.0049,92.1585 73.5,93.5C 76.4726,94.9863 79.4726,96.4863 82.5,98C 84.5761,100.975 86.4094,104.142 88,107.5C 89.1475,106.542 90.1475,106.875 91,108.5C 91.266,112.981 92.0993,117.314 93.5,121.5C 100.053,120.932 106.387,121.599 112.5,123.5C 113.167,123.167 113.833,122.833 114.5,122.5C 115.773,123.257 115.773,123.923 114.5,124.5C 106.613,125.019 98.9466,124.352 91.5,122.5C 89.744,112.084 84.4107,104.084 75.5,98.5C 74.5041,98.4142 73.6708,98.7476 73,99.5C 72.51,98.2068 72.3433,96.8734 72.5,95.5C 69.5,95.5 66.5,95.5 63.5,95.5C 65.8332,93.0755 68.4998,90.9089 71.5,89C 67.9119,89.3739 64.2452,89.2072 60.5,88.5C 57.4816,88.6646 54.4816,88.498 51.5,88C 55.3808,86.8099 59.3808,86.1432 63.5,86C 63.1667,85.6667 62.8333,85.3333 62.5,85C 67.0658,83.6908 71.7325,83.1908 76.5,83.5C 78.6934,84.7969 81.0268,84.7969 83.5,83.5C 82.2713,82.7189 80.938,82.2189 79.5,82C 80.7588,81.0766 82.0921,80.2432 83.5,79.5C 82.9747,78.8076 82.3081,78.3076 81.5,78C 84.202,77.9467 86.8686,78.4467 89.5,79.5C 97.9987,76.2618 104.999,71.0952 110.5,64C 112.352,63.2274 113.686,63.7274 114.5,65.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7a7976\",d:\"M 316.5,93.5 C 323.012,95.9279 329.345,98.5946 335.5,101.5C 333.194,101.007 330.861,100.674 328.5,100.5C 324.814,98.2051 320.814,96.3718 316.5,95C 314.613,94.2204 312.946,94.3871 311.5,95.5C 310.662,95.1583 310.328,94.4916 310.5,93.5C 312.451,92.3586 314.451,92.3586 316.5,93.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#151718\",d:\"M 398.5,87.5 C 403.577,88.47 408.41,90.1366 413,92.5C 412.258,96.841 410.758,101.008 408.5,105C 403.77,104.87 399.27,103.704 395,101.5C 395.247,96.6513 396.413,91.9846 398.5,87.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#16181a\",d:\"M 382.5,81.5 C 386.924,82.4183 391.258,83.7517 395.5,85.5C 396.091,90.0557 395.091,94.389 392.5,98.5C 391.667,98.8333 390.833,99.1667 390,99.5C 385.968,97.7332 381.801,96.3999 377.5,95.5C 379.169,90.8296 380.836,86.163 382.5,81.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#737578\",d:\"M 402.5,94.5 C 403.441,97.1251 404.607,97.1251 406,94.5C 406.485,97.1715 405.318,98.5048 402.5,98.5C 402.5,97.1667 402.5,95.8333 402.5,94.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#535457\",d:\"M 480.5,83.5 C 481.376,83.3691 482.043,83.7025 482.5,84.5C 481.966,86.6145 480.966,88.4478 479.5,90C 480.711,91.1131 480.711,92.2798 479.5,93.5C 480.315,95.2759 481.482,95.9426 483,95.5C 483.923,94.2412 484.757,92.9079 485.5,91.5C 485.833,91.8333 486.167,92.1667 486.5,92.5C 484.88,94.7394 485.213,96.5728 487.5,98C 486.584,98.2784 485.918,98.7784 485.5,99.5C 481.849,98.3411 478.515,96.6744 475.5,94.5C 476.996,90.6472 478.662,86.9805 480.5,83.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#373938\",d:\"M 511.5,93.5 C 510.935,97.5368 509.601,101.203 507.5,104.5C 507.361,103.081 506.861,101.748 506,100.5C 505.692,101.308 505.192,101.975 504.5,102.5C 501.263,102.141 499.097,100.474 498,97.5C 497.311,98.3567 496.478,99.0233 495.5,99.5C 494.304,99.1543 494.304,98.6543 495.5,98C 494.906,97.5357 494.239,97.369 493.5,97.5C 494.784,94.5982 495.784,91.5982 496.5,88.5C 498.199,88.3398 499.866,88.5065 501.5,89C 504.946,90.5088 508.28,92.0088 511.5,93.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ac9c8f\",d:\"M 183.5,106.5 C 182.609,107.11 181.609,107.443 180.5,107.5C 178.571,105.852 176.571,104.185 174.5,102.5C 173.167,101.167 171.833,101.167 170.5,102.5C 173.13,103.962 175.63,105.629 178,107.5C 178.667,108.833 178.667,110.167 178,111.5C 177.667,110.833 177.333,110.167 177,109.5C 175.796,110.471 175.296,111.471 175.5,112.5C 171.686,107.377 168.353,102.044 165.5,96.5C 166.496,96.4142 167.329,96.7476 168,97.5C 168.464,96.9056 168.631,96.2389 168.5,95.5C 168.942,94.7688 169.109,93.7688 169,92.5C 170.016,93.6341 170.683,93.3008 171,91.5C 173.121,95.4994 176.288,98.4994 180.5,100.5C 181.326,101.451 181.492,102.451 181,103.5C 179.622,101.787 177.955,100.453 176,99.5C 175.333,100.167 175.333,100.833 176,101.5C 178.544,103.267 181.044,104.934 183.5,106.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#343438\",d:\"M 444.5,88.5 C 444.833,88.5 445.167,88.5 445.5,88.5C 447.056,88.6032 448.723,89.4365 450.5,91C 449.24,92.113 448.073,92.2797 447,91.5C 446.167,92.3333 445.333,93.1667 444.5,94C 445.641,94.7412 445.641,95.5745 444.5,96.5C 445.831,97.5922 446.664,98.9255 447,100.5C 448.353,99.3147 449.52,97.9814 450.5,96.5C 451.105,97.5874 450.772,98.754 449.5,100C 450.833,101 452.167,102 453.5,103C 452.584,103.278 451.918,103.778 451.5,104.5C 449.883,103.962 448.216,103.629 446.5,103.5C 444.618,102.249 442.618,101.082 440.5,100C 442.53,96.4109 443.863,92.5776 444.5,88.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#191a1e\",d:\"M 451.5,104.5 C 451.918,103.778 452.584,103.278 453.5,103C 452.167,102 450.833,101 449.5,100C 450.772,98.754 451.105,97.5874 450.5,96.5C 449.52,97.9814 448.353,99.3147 447,100.5C 446.664,98.9255 445.831,97.5922 444.5,96.5C 445.641,95.5745 445.641,94.7412 444.5,94C 445.333,93.1667 446.167,92.3333 447,91.5C 448.073,92.2797 449.24,92.113 450.5,91C 448.723,89.4365 447.056,88.6032 445.5,88.5C 445.783,87.7109 446.283,87.0442 447,86.5C 451.756,88.2981 456.256,90.4648 460.5,93C 459.139,96.8892 457.639,100.722 456,104.5C 454.51,105.728 453.01,105.728 451.5,104.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b3b3ab\",d:\"M 311.5,95.5 C 312.946,94.3871 314.613,94.2204 316.5,95C 320.814,96.3718 324.814,98.2051 328.5,100.5C 329.347,101.966 330.68,102.8 332.5,103C 332.384,104.268 332.051,105.602 331.5,107C 332.308,107.308 332.975,107.808 333.5,108.5C 331.435,108.262 329.435,108.762 327.5,110C 328.416,110.374 329.25,110.874 330,111.5C 331.388,110.446 332.888,110.28 334.5,111C 331.213,111.745 330.213,113.578 331.5,116.5C 324.608,120.715 325.275,122.048 333.5,120.5C 334.737,120.556 335.737,121.056 336.5,122C 333.118,122.176 329.785,122.676 326.5,123.5C 327.167,124.167 327.833,124.833 328.5,125.5C 328,125.833 327.5,126.167 327,126.5C 322.843,123.819 322.01,124.486 324.5,128.5C 322.411,130.58 320.744,132.913 319.5,135.5C 319.667,136.167 319.833,136.833 320,137.5C 321.133,135.789 322.633,135.289 324.5,136C 323.491,138.172 321.824,139.338 319.5,139.5C 319.244,141.912 320.244,143.579 322.5,144.5C 321.408,145.831 320.074,146.664 318.5,147C 319.325,148.688 320.325,148.855 321.5,147.5C 322.281,148.729 322.781,150.062 323,151.5C 324.388,150.446 325.888,150.28 327.5,151C 322.455,152.047 321.455,154.547 324.5,158.5C 323.132,159.594 321.965,159.26 321,157.5C 320.667,156.167 320.333,154.833 320,153.5C 319.259,154.641 318.425,154.641 317.5,153.5C 316.795,155.672 315.795,157.672 314.5,159.5C 312.397,157.12 311.23,157.787 311,161.5C 310.667,161.167 310.333,160.833 310,160.5C 311.465,163.511 311.965,166.678 311.5,170C 306.222,169.621 306.222,170.621 311.5,173C 322.146,173.829 322.146,174.329 311.5,174.5C 307.838,173.168 304.172,171.835 300.5,170.5C 302.151,169.453 303.817,168.286 305.5,167C 304.027,166.29 303.36,165.124 303.5,163.5C 301.396,163.799 299.396,163.466 297.5,162.5C 298.641,161.575 298.641,160.741 297.5,160C 300.099,159.231 302.599,159.398 305,160.5C 309.27,158.771 309.103,157.937 304.5,158C 305.809,156.249 305.475,154.749 303.5,153.5C 305.024,152.307 307.024,150.974 309.5,149.5C 308.153,145.625 306.986,145.625 306,149.5C 304.734,147.804 304.9,145.971 306.5,144C 307.742,143.689 308.742,144.189 309.5,145.5C 311.271,144.965 311.604,144.131 310.5,143C 313.419,141.172 315.085,138.505 315.5,135C 311.467,133.079 310.8,133.913 313.5,137.5C 311.95,139.959 309.95,140.626 307.5,139.5C 309.691,137.792 310.024,135.792 308.5,133.5C 309.729,132.719 311.062,132.219 312.5,132C 313.022,131.439 313.355,130.772 313.5,130C 312.645,128.549 312.478,127.049 313,125.5C 312.094,127.612 310.594,128.445 308.5,128C 310.166,125.52 310.999,122.687 311,119.5C 311.202,121.256 311.702,122.922 312.5,124.5C 312.833,124.333 313.167,124.167 313.5,124C 312.065,121.733 312.398,119.733 314.5,118C 313.833,117.333 313.167,116.667 312.5,116C 314.706,113.654 317.206,113.154 320,114.5C 320.667,113.167 320.667,111.833 320,110.5C 319.667,111.167 319.333,111.833 319,112.5C 317.491,111.91 315.991,111.244 314.5,110.5C 315.788,107.966 315.788,105.466 314.5,103C 315.77,102.1 316.77,100.934 317.5,99.5C 318.314,101.766 318.814,104.1 319,106.5C 320.073,107.28 321.24,107.113 322.5,106C 319.378,104.579 319.044,102.913 321.5,101C 319.141,98.6013 315.807,96.7679 311.5,95.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#282a2c\",d:\"M 464.5,93.5 C 468.3,94.9333 472.133,96.2666 476,97.5C 475.371,102.236 474.204,106.902 472.5,111.5C 470.784,111.371 469.117,111.038 467.5,110.5C 468.263,109.732 469.263,109.232 470.5,109C 469.833,108.667 469.167,108.333 468.5,108C 468.501,106.601 468.835,105.101 469.5,103.5C 467.527,102.669 465.527,102.502 463.5,103C 463.982,101.992 464.148,100.825 464,99.5C 465.156,100.993 465.99,100.826 466.5,99C 466.01,97.018 465.01,95.3513 463.5,94C 463.728,93.6012 464.062,93.4346 464.5,93.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9d8772\",d:\"M 179.5,91.5 C 183.051,92.9774 186.718,94.3108 190.5,95.5C 192.7,95.0963 195.034,94.9296 197.5,95C 196.304,94.3457 196.304,93.8457 197.5,93.5C 198.275,95.3022 199.275,95.9689 200.5,95.5C 200.586,96.4959 200.252,97.3292 199.5,98C 197.132,98.8564 194.798,99.6897 192.5,100.5C 192.5,101.833 192.5,103.167 192.5,104.5C 191.833,106.167 191.167,107.833 190.5,109.5C 189.518,110.141 188.518,110.807 187.5,111.5C 187.089,110.738 186.923,109.738 187,108.5C 184.992,110.774 183.825,110.107 183.5,106.5C 181.044,104.934 178.544,103.267 176,101.5C 175.333,100.833 175.333,100.167 176,99.5C 177.955,100.453 179.622,101.787 181,103.5C 181.492,102.451 181.326,101.451 180.5,100.5C 176.288,98.4994 173.121,95.4994 171,91.5C 170.683,93.3008 170.016,93.6341 169,92.5C 169.109,93.7688 168.942,94.7688 168.5,95.5C 166.815,94.8163 165.815,93.483 165.5,91.5C 169.945,89.0128 174.279,89.3462 178.5,92.5C 179.107,92.3764 179.44,92.0431 179.5,91.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#141718\",d:\"M 421.5,111.5 C 422.263,110.732 423.263,110.232 424.5,110C 423.24,108.887 422.073,108.72 421,109.5C 417.887,107.942 417.72,106.109 420.5,104C 420.167,103.667 419.833,103.333 419.5,103C 425.136,98.9436 424.803,97.2769 418.5,98C 417.809,96.9326 417.309,95.7659 417,94.5C 416.31,95.7383 415.81,95.7383 415.5,94.5C 415.735,93.9033 416.235,93.5699 417,93.5C 421.098,94.9758 425.098,96.6425 429,98.5C 428.755,102.687 427.588,106.687 425.5,110.5C 424.311,111.429 422.978,111.762 421.5,111.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bfb6a7\",d:\"M 25.5,95.5 C 27.288,95.2148 28.9547,95.5481 30.5,96.5C 25.4363,102.942 18.7696,105.775 10.5,105C 10.0698,104.08 9.73647,103.247 9.5,102.5C 7.68367,103.735 6.017,103.735 4.5,102.5C 5.79109,101.458 5.79109,100.292 4.5,99C 2.89253,99.0187 1.22586,99.1854 -0.5,99.5C -0.5,97.1667 -0.5,94.8333 -0.5,92.5C 5.85628,90.4134 12.3563,88.7467 19,87.5C 20.2045,88.8586 21.7045,89.8586 23.5,90.5C 20.9151,93.864 18.0818,94.1973 15,91.5C 13.7817,93.0192 12.2817,94.1859 10.5,95C 12.3008,95.3173 12.6341,95.984 11.5,97C 16.0265,96.019 20.6932,95.519 25.5,95.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#afaaa5\",d:\"M 245.5,54.5 C 245.438,57.2284 245.438,60.0617 245.5,63C 249.111,65.5042 252.111,65.0042 254.5,61.5C 254.567,62.9587 254.234,64.2921 253.5,65.5C 252.069,65.8807 251.236,66.8807 251,68.5C 249.203,65.9041 247.869,66.2374 247,69.5C 245.992,64.4591 245.492,64.7924 245.5,70.5C 244.448,70.3505 243.448,70.5172 242.5,71C 243.973,71.7096 244.64,72.8762 244.5,74.5C 247.562,74.8442 250.562,75.5109 253.5,76.5C 253.291,77.086 252.957,77.586 252.5,78C 256.403,78.412 258.07,80.5786 257.5,84.5C 256.5,84.5 255.5,84.5 254.5,84.5C 254.839,79.7589 252.839,78.4256 248.5,80.5C 248.167,81.1667 247.833,81.8333 247.5,82.5C 249.318,83.7742 250.985,85.2742 252.5,87C 251.692,87.3076 251.025,87.8076 250.5,88.5C 251.689,89.4287 253.022,89.762 254.5,89.5C 254.5,90.5 254.5,91.5 254.5,92.5C 249.167,93.1667 249.167,93.8333 254.5,94.5C 255.32,98.1578 253.987,100.491 250.5,101.5C 251.5,102.167 252.5,102.833 253.5,103.5C 252.332,104.906 252.665,106.072 254.5,107C 252.323,108.202 249.989,108.702 247.5,108.5C 247.714,110.144 247.38,111.644 246.5,113C 244.674,111.648 242.674,111.148 240.5,111.5C 239.315,112.853 237.981,114.02 236.5,115C 240.265,116.377 239.932,117.377 235.5,118C 236.793,118.49 238.127,118.657 239.5,118.5C 239.822,120.722 239.155,122.556 237.5,124C 239.361,125.028 240.695,126.528 241.5,128.5C 239.247,131.233 239.914,133.4 243.5,135C 240.258,135.283 239.924,136.117 242.5,137.5C 241.02,138.113 239.687,138.446 238.5,138.5C 239.853,139.524 240.52,140.857 240.5,142.5C 243.786,143.207 247.119,143.54 250.5,143.5C 247.9,144.566 245.233,145.566 242.5,146.5C 239.972,145.502 239.972,144.669 242.5,144C 241.5,143.333 240.5,143.333 239.5,144C 238.167,144.667 238.167,145.333 239.5,146C 235.815,146.914 236.148,147.581 240.5,148C 238.942,148.21 237.609,148.71 236.5,149.5C 227.888,147.533 220.221,143.867 213.5,138.5C 213.46,135.119 213.793,131.786 214.5,128.5C 221.305,113.879 227.305,98.8794 232.5,83.5C 237.072,74.0157 241.406,64.349 245.5,54.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bfb5aa\",d:\"M 43.5,103.5 C 41.2219,106.472 38.2219,108.139 34.5,108.5C 34.9175,107.778 35.5842,107.278 36.5,107C 32.1168,107.996 27.7835,107.663 23.5,106C 26.3651,103.702 29.0318,101.202 31.5,98.5C 32.325,97.6143 33.325,97.281 34.5,97.5C 37.5091,98.2829 40.6758,98.9496 44,99.5C 46.6949,97.8856 49.5283,97.0523 52.5,97C 52.8333,97.3333 53.1667,97.6667 53.5,98C 48.5512,99.6541 43.5512,101.154 38.5,102.5C 40.2145,102.595 41.8812,102.928 43.5,103.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#23292b\",d:\"M 415.5,94.5 C 415.81,95.7383 416.31,95.7383 417,94.5C 417.309,95.7659 417.809,96.9326 418.5,98C 424.803,97.2769 425.136,98.9436 419.5,103C 419.833,103.333 420.167,103.667 420.5,104C 417.72,106.109 417.887,107.942 421,109.5C 422.073,108.72 423.24,108.887 424.5,110C 423.263,110.232 422.263,110.732 421.5,111.5C 418.116,110.37 414.782,109.037 411.5,107.5C 411.167,106.833 410.833,106.167 410.5,105.5C 411.939,101.629 413.606,97.9623 415.5,94.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#292a2e\",d:\"M 439.5,102.5 C 438.766,103.878 438.099,105.378 437.5,107C 436.256,107.456 435.423,106.956 435,105.5C 432.774,107.324 431.274,109.157 430.5,111C 432.608,114.34 434.108,114.173 435,110.5C 435.996,112.744 437.496,114.577 439.5,116C 438.944,116.383 438.611,116.883 438.5,117.5C 434.82,116.44 431.154,115.274 427.5,114C 426.978,113.439 426.645,112.772 426.5,112C 427.754,107.992 429.421,104.158 431.5,100.5C 434.472,99.7088 437.139,100.375 439.5,102.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#3e3e42\",d:\"M 464.5,92.5 C 464.5,92.8333 464.5,93.1667 464.5,93.5C 464.062,93.4346 463.728,93.6012 463.5,94C 465.01,95.3513 466.01,97.018 466.5,99C 465.99,100.826 465.156,100.993 464,99.5C 464.148,100.825 463.982,101.992 463.5,103C 465.527,102.502 467.527,102.669 469.5,103.5C 468.835,105.101 468.501,106.601 468.5,108C 469.167,108.333 469.833,108.667 470.5,109C 469.263,109.232 468.263,109.732 467.5,110.5C 463.51,109.636 460.177,107.803 457.5,105C 459.392,101.325 460.892,97.4912 462,93.5C 462.671,92.7476 463.504,92.4142 464.5,92.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ccbbba\",d:\"M 148.5,66.5 C 149.658,69.2697 149.658,72.103 148.5,75C 148.73,79.1426 150.23,82.6426 153,85.5C 153.333,84.5 153.667,83.5 154,82.5C 156.726,86.6188 158.893,90.9521 160.5,95.5C 160.5,97.1667 160.5,98.8333 160.5,100.5C 159.167,100.5 157.833,100.5 156.5,100.5C 155.862,98.54 155.862,96.7067 156.5,95C 154.059,94.964 152.059,94.1307 150.5,92.5C 151.397,92.3309 152.397,91.9976 153.5,91.5C 151.647,90.2404 149.814,90.2404 148,91.5C 145.929,88.5845 144.595,88.9178 144,92.5C 141.894,90.709 139.394,90.0423 136.5,90.5C 136.238,91.9778 136.571,93.3112 137.5,94.5C 137.998,93.3966 138.331,92.3966 138.5,91.5C 139.428,93.3348 140.594,93.6682 142,92.5C 142.089,94.1134 141.255,95.2801 139.5,96C 140.448,96.4828 141.448,96.6495 142.5,96.5C 142.5,98.1667 142.5,99.8333 142.5,101.5C 140.833,101.5 139.167,101.5 137.5,101.5C 137.261,99.5328 137.594,97.6995 138.5,96C 136.833,95.3333 135.167,95.3333 133.5,96C 134.416,96.3742 135.25,96.8742 136,97.5C 136.333,100.5 136.667,103.5 137,106.5C 137.307,103.124 139.14,101.79 142.5,102.5C 142.646,106.519 142.979,110.519 143.5,114.5C 139.833,114.5 136.167,114.5 132.5,114.5C 132.5,112.833 132.5,111.167 132.5,109.5C 134.288,109.215 135.955,109.548 137.5,110.5C 136.145,111.675 136.312,112.675 138,113.5C 138.495,111.527 138.662,109.527 138.5,107.5C 136.194,107.993 133.861,108.326 131.5,108.5C 131.5,110.5 131.5,112.5 131.5,114.5C 126.167,114.833 126.167,115.167 131.5,115.5C 130.89,120.317 131.223,122.317 132.5,121.5C 136.187,122.403 139.854,122.736 143.5,122.5C 144.244,125.443 144.744,128.443 145,131.5C 145.483,130.552 145.649,129.552 145.5,128.5C 149.166,128.488 152.499,128.155 155.5,127.5C 156.452,129.045 156.785,130.712 156.5,132.5C 152.154,132.334 147.821,132.501 143.5,133C 146.146,133.497 148.813,133.664 151.5,133.5C 148.5,134.167 145.5,134.833 142.5,135.5C 136.29,130.731 129.29,127.564 121.5,126C 120.783,124.348 120.45,122.848 120.5,121.5C 119.614,122.325 119.281,123.325 119.5,124.5C 118.833,113.5 118.167,102.5 117.5,91.5C 119.857,89.9016 122.523,88.9016 125.5,88.5C 128.424,89.3919 131.258,89.7253 134,89.5C 135.333,88.8333 136.667,88.1667 138,87.5C 140.333,87.8333 142.667,88.1667 145,88.5C 146.399,87.7734 147.899,87.2734 149.5,87C 146.17,82.1715 143.503,77.0049 141.5,71.5C 141.343,70.1266 141.51,68.7932 142,67.5C 142.333,68.1667 142.667,68.8333 143,69.5C 143.928,66.9648 145.762,65.9648 148.5,66.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#806d69\",d:\"M 162.5,96.5 C 164.573,100.308 166.906,103.974 169.5,107.5C 169.137,108.183 168.804,108.85 168.5,109.5C 166.737,107.115 165.237,104.448 164,101.5C 164.765,106.3 166.265,110.966 168.5,115.5C 168.03,116.463 167.363,116.463 166.5,115.5C 165.872,112.91 164.705,110.577 163,108.5C 162.762,104.778 162.262,101.111 161.5,97.5C 161.624,96.8933 161.957,96.56 162.5,96.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e5ded7\",d:\"M 151.5,66.5 C 151.196,67.1499 150.863,67.8165 150.5,68.5C 152.375,72.15 154.042,75.8166 155.5,79.5C 156.298,81.8862 157.298,84.2195 158.5,86.5C 159.325,87.3857 160.325,87.719 161.5,87.5C 161.502,91.1645 162.835,94.1645 165.5,96.5C 168.353,102.044 171.686,107.377 175.5,112.5C 175.296,111.471 175.796,110.471 177,109.5C 177.333,110.167 177.667,110.833 178,111.5C 178.667,110.167 178.667,108.833 178,107.5C 175.63,105.629 173.13,103.962 170.5,102.5C 171.833,101.167 173.167,101.167 174.5,102.5C 176.571,104.185 178.571,105.852 180.5,107.5C 181.209,108.404 182.209,108.737 183.5,108.5C 182.571,112.127 181.737,115.793 181,119.5C 180.8,117.68 179.966,116.347 178.5,115.5C 177.25,115.423 176.417,114.756 176,113.5C 175.349,115.235 175.515,116.902 176.5,118.5C 181.082,124.007 185.415,129.673 189.5,135.5C 186.021,136.314 183.021,137.981 180.5,140.5C 179.194,138.184 177.861,135.85 176.5,133.5C 177.167,133.167 177.833,132.833 178.5,132.5C 175.649,129.179 174.316,125.512 174.5,121.5C 173.384,121.598 172.384,121.098 171.5,120C 170.551,116.355 169.551,112.855 168.5,109.5C 168.804,108.85 169.137,108.183 169.5,107.5C 166.906,103.974 164.573,100.308 162.5,96.5C 162.158,95.6618 161.492,95.3284 160.5,95.5C 158.893,90.9521 156.726,86.6188 154,82.5C 153.667,83.5 153.333,84.5 153,85.5C 150.23,82.6426 148.73,79.1426 148.5,75C 149.658,72.103 149.658,69.2697 148.5,66.5C 146.827,64.0993 146.66,61.7659 148,59.5C 148.522,62.2813 149.689,64.6146 151.5,66.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#5c3e39\",d:\"M 117.5,91.5 C 118.167,102.5 118.833,113.5 119.5,124.5C 119.158,125.338 118.492,125.672 117.5,125.5C 117.245,113.981 117.245,102.647 117.5,91.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#4a4b4e\",d:\"M 478.5,100.5 C 479.798,100.28 481.131,100.947 482.5,102.5C 483.251,103.376 483.751,104.376 484,105.5C 484.308,104.692 484.808,104.025 485.5,103.5C 485.911,104.262 486.077,105.262 486,106.5C 487,105.167 488,105.167 489,106.5C 489.087,109.707 489.254,112.707 489.5,115.5C 489.38,116.586 488.713,117.253 487.5,117.5C 483.306,116.736 479.306,115.402 475.5,113.5C 474.64,108.745 475.64,104.412 478.5,100.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d6c6c5\",d:\"M 160.5,95.5 C 161.492,95.3284 162.158,95.6618 162.5,96.5C 161.957,96.56 161.624,96.8933 161.5,97.5C 162.262,101.111 162.762,104.778 163,108.5C 164.705,110.577 165.872,112.91 166.5,115.5C 165.115,114.426 163.949,113.093 163,111.5C 162.854,116.32 163.021,121.154 163.5,126C 163.475,128.929 162.809,131.429 161.5,133.5C 158.167,133.5 154.833,133.5 151.5,133.5C 148.813,133.664 146.146,133.497 143.5,133C 147.821,132.501 152.154,132.334 156.5,132.5C 156.785,130.712 156.452,129.045 155.5,127.5C 152.499,128.155 149.166,128.488 145.5,128.5C 145.649,129.552 145.483,130.552 145,131.5C 144.744,128.443 144.244,125.443 143.5,122.5C 139.854,122.736 136.187,122.403 132.5,121.5C 131.223,122.317 130.89,120.317 131.5,115.5C 126.167,115.167 126.167,114.833 131.5,114.5C 131.5,112.5 131.5,110.5 131.5,108.5C 133.861,108.326 136.194,107.993 138.5,107.5C 138.662,109.527 138.495,111.527 138,113.5C 136.312,112.675 136.145,111.675 137.5,110.5C 135.955,109.548 134.288,109.215 132.5,109.5C 132.5,111.167 132.5,112.833 132.5,114.5C 136.167,114.5 139.833,114.5 143.5,114.5C 142.979,110.519 142.646,106.519 142.5,102.5C 139.14,101.79 137.307,103.124 137,106.5C 136.667,103.5 136.333,100.5 136,97.5C 135.25,96.8742 134.416,96.3742 133.5,96C 135.167,95.3333 136.833,95.3333 138.5,96C 137.594,97.6995 137.261,99.5328 137.5,101.5C 139.167,101.5 140.833,101.5 142.5,101.5C 142.5,99.8333 142.5,98.1667 142.5,96.5C 141.448,96.6495 140.448,96.4828 139.5,96C 141.255,95.2801 142.089,94.1134 142,92.5C 140.594,93.6682 139.428,93.3348 138.5,91.5C 138.331,92.3966 137.998,93.3966 137.5,94.5C 136.571,93.3112 136.238,91.9778 136.5,90.5C 139.394,90.0423 141.894,90.709 144,92.5C 144.595,88.9178 145.929,88.5845 148,91.5C 149.814,90.2404 151.647,90.2404 153.5,91.5C 152.397,91.9976 151.397,92.3309 150.5,92.5C 152.059,94.1307 154.059,94.964 156.5,95C 155.862,96.7067 155.862,98.54 156.5,100.5C 157.833,100.5 159.167,100.5 160.5,100.5C 160.5,98.8333 160.5,97.1667 160.5,95.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c6bdaf\",d:\"M 204.5,85.5 C 205.756,85.4614 206.756,85.9614 207.5,87C 206.636,89.0713 205.303,90.738 203.5,92C 204.804,92.804 205.471,93.9707 205.5,95.5C 205.201,98.6369 205.034,101.637 205,104.5C 205.561,105.022 206.228,105.355 207,105.5C 208.171,104.66 209.338,103.827 210.5,103C 209.306,100.342 210.306,99.1756 213.5,99.5C 212.117,98.3035 211.45,96.4702 211.5,94C 213,93.5 214.5,93 216,92.5C 216.765,92.5699 217.265,92.9033 217.5,93.5C 214.656,97.695 212.989,102.362 212.5,107.5C 211.325,107.281 210.325,107.614 209.5,108.5C 210.849,111.163 210.349,113.496 208,115.5C 206.163,109.551 204.663,109.385 203.5,115C 201.14,116.18 198.807,117.347 196.5,118.5C 195.276,113.257 194.776,107.924 195,102.5C 194.292,103.381 193.458,104.047 192.5,104.5C 192.5,103.167 192.5,101.833 192.5,100.5C 194.798,99.6897 197.132,98.8564 199.5,98C 200.252,97.3292 200.586,96.4959 200.5,95.5C 201.289,95.2172 201.956,94.7172 202.5,94C 200.999,92.7485 199.332,91.7485 197.5,91C 199.997,90.5883 201.997,89.4216 203.5,87.5C 200.869,85.9954 201.203,85.3287 204.5,85.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#131616\",d:\"M 358.5,89.5 C 374.81,95.9897 391.144,102.323 407.5,108.5C 405.543,112.744 403.876,117.077 402.5,121.5C 375.784,112.632 349.451,102.965 323.5,92.5C 324.15,87.2062 326.15,82.5395 329.5,78.5C 339.112,82.3699 348.779,86.0366 358.5,89.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#121417\",d:\"M 439.5,102.5 C 441.965,102.767 444.299,103.434 446.5,104.5C 446.167,105.833 445.833,107.167 445.5,108.5C 444.213,111.075 442.879,113.741 441.5,116.5C 440.675,117.386 439.675,117.719 438.5,117.5C 438.611,116.883 438.944,116.383 439.5,116C 437.496,114.577 435.996,112.744 435,110.5C 434.108,114.173 432.608,114.34 430.5,111C 431.274,109.157 432.774,107.324 435,105.5C 435.423,106.956 436.256,107.456 437.5,107C 438.099,105.378 438.766,103.878 439.5,102.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#242227\",d:\"M 489.5,115.5 C 489.254,112.707 489.087,109.707 489,106.5C 488,105.167 487,105.167 486,106.5C 486.077,105.262 485.911,104.262 485.5,103.5C 484.808,104.025 484.308,104.692 484,105.5C 483.751,104.376 483.251,103.376 482.5,102.5C 481.131,100.947 479.798,100.28 478.5,100.5C 478.917,99.8761 479.584,99.5427 480.5,99.5C 484.505,100.837 488.505,102.17 492.5,103.5C 492.833,104 493.167,104.5 493.5,105C 492.292,108.576 490.959,112.076 489.5,115.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bcb8b3\",d:\"M 272.5,66.5 C 272.326,68.861 271.993,71.1944 271.5,73.5C 272.791,73.2627 273.791,73.596 274.5,74.5C 276.155,76.2514 278.489,77.918 281.5,79.5C 278.952,81.2189 279.285,82.5522 282.5,83.5C 281.975,84.1924 281.308,84.6924 280.5,85C 281.833,86 281.833,87 280.5,88C 281.549,88.4922 282.549,88.3256 283.5,87.5C 284.112,90.0818 284.445,92.5818 284.5,95C 284.333,95.5 284.167,96 284,96.5C 282.989,95.6634 281.822,95.33 280.5,95.5C 281.052,97.3307 281.052,98.9974 280.5,100.5C 278.36,99.5267 276.693,98.0267 275.5,96C 276.793,95.51 278.127,95.3433 279.5,95.5C 279.322,92.7835 278.822,90.1168 278,87.5C 277.13,88.1079 276.63,88.9412 276.5,90C 277.148,91.4397 277.481,92.9397 277.5,94.5C 275.641,94.4609 274.308,95.2942 273.5,97C 275.394,98.0793 275.727,99.4126 274.5,101C 277.371,101.118 280.038,101.784 282.5,103C 281.552,103.483 280.552,103.649 279.5,103.5C 279.643,105.262 279.309,106.929 278.5,108.5C 280.367,109.797 280.7,111.297 279.5,113C 281.182,114.895 281.682,117.062 281,119.5C 279.105,117.223 277.938,114.556 277.5,111.5C 274.826,118.273 274.159,118.106 275.5,111C 274.167,110.333 272.833,110.333 271.5,111C 272.61,113.737 272.777,116.571 272,119.5C 270.903,117.947 269.57,116.614 268,115.5C 266.463,119.089 266.463,122.756 268,126.5C 269.914,127.414 271.081,128.914 271.5,131C 270.393,132.44 270.393,133.94 271.5,135.5C 271.167,136.167 270.833,136.833 270.5,137.5C 269.158,134.679 268.492,134.846 268.5,138C 270.715,142.91 271.715,148.077 271.5,153.5C 269.453,153.489 267.453,153.156 265.5,152.5C 263.575,152.59 262.408,153.59 262,155.5C 261.5,155 261,154.5 260.5,154C 261.741,152.513 261.241,151.68 259,151.5C 255.896,151.851 256.063,152.351 259.5,153C 257.09,153.057 255.756,154.224 255.5,156.5C 248.89,154.743 242.557,152.41 236.5,149.5C 237.609,148.71 238.942,148.21 240.5,148C 236.148,147.581 235.815,146.914 239.5,146C 238.167,145.333 238.167,144.667 239.5,144C 240.5,143.333 241.5,143.333 242.5,144C 239.972,144.669 239.972,145.502 242.5,146.5C 245.233,145.566 247.9,144.566 250.5,143.5C 250.415,142.005 251.081,141.005 252.5,140.5C 253.96,142.422 255.627,143.089 257.5,142.5C 258.833,141.5 258.833,140.5 257.5,139.5C 256.914,139.709 256.414,140.043 256,140.5C 255.51,139.207 255.343,137.873 255.5,136.5C 257.564,136.313 259.564,135.813 261.5,135C 260.929,133.795 260.262,132.628 259.5,131.5C 258.169,132.592 257.336,133.926 257,135.5C 256.786,131.417 254.786,130.75 251,133.5C 250.588,130.403 251.754,129.403 254.5,130.5C 256.444,129.811 258.444,129.311 260.5,129C 259.207,128.51 257.873,128.343 256.5,128.5C 256.421,127.07 256.754,125.736 257.5,124.5C 256.478,123.646 255.645,122.646 255,121.5C 254.107,122.711 253.274,122.711 252.5,121.5C 253.668,119.783 255.335,119.116 257.5,119.5C 258.167,117.833 258.833,116.167 259.5,114.5C 258.5,114.5 257.5,114.5 256.5,114.5C 255.308,108.218 256.475,107.885 260,113.5C 261.205,112.929 262.372,112.262 263.5,111.5C 262.675,110.614 261.675,110.281 260.5,110.5C 260.281,109.325 260.614,108.325 261.5,107.5C 264.697,106.296 266.364,104.296 266.5,101.5C 265.522,101.977 264.689,102.643 264,103.5C 263.355,102.354 262.522,101.354 261.5,100.5C 262.729,99.7189 264.062,99.2189 265.5,99C 262.584,96.9288 262.918,95.5954 266.5,95C 265.643,94.3109 264.977,93.4776 264.5,92.5C 265.041,90.4648 265.708,88.4648 266.5,86.5C 269.794,88.0069 270.46,87.1735 268.5,84C 268.493,82.1878 269.16,80.6878 270.5,79.5C 270.154,78.3044 269.654,78.3044 269,79.5C 268.64,77.5789 267.806,75.9122 266.5,74.5C 264.877,75.4908 263.877,74.8241 263.5,72.5C 261.376,71.542 259.376,70.3754 257.5,69C 257.728,68.6012 258.062,68.4346 258.5,68.5C 261.556,69.2964 264.556,70.2964 267.5,71.5C 268.442,71.3918 269.275,71.0585 270,70.5C 270.608,68.9336 271.442,67.6002 272.5,66.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#222423\",d:\"M 493.5,97.5 C 494.239,97.369 494.906,97.5357 495.5,98C 494.304,98.6543 494.304,99.1543 495.5,99.5C 496.478,99.0233 497.311,98.3567 498,97.5C 499.097,100.474 501.263,102.141 504.5,102.5C 505.192,101.975 505.692,101.308 506,100.5C 506.861,101.748 507.361,103.081 507.5,104.5C 506.698,107.574 505.698,110.574 504.5,113.5C 503.778,113.082 503.278,112.416 503,111.5C 502.259,112.641 501.425,112.641 500.5,111.5C 499.117,114.076 498.283,113.742 498,110.5C 495.851,111.84 494.684,111.173 494.5,108.5C 494.678,107.305 495.011,106.138 495.5,105C 494.523,103.503 493.523,102.003 492.5,100.5C 492.685,99.4163 493.018,98.4163 493.5,97.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#adadac\",d:\"M 423.5,32.5 C 434.304,35.7681 444.971,39.4348 455.5,43.5C 471.833,49.5 488.167,55.5 504.5,61.5C 510.194,63.5105 515.861,65.6772 521.5,68C 522.357,68.6891 523.023,69.5224 523.5,70.5C 512.661,98.1766 501.827,125.843 491,153.5C 490.23,154.598 489.397,154.598 488.5,153.5C 490.563,148.978 492.23,144.312 493.5,139.5C 490.089,138.64 486.756,137.474 483.5,136C 481.833,135.333 480.167,135.333 478.5,136C 477.534,138.769 476.201,141.269 474.5,143.5C 474.955,140.797 475.622,138.13 476.5,135.5C 476.213,133.557 475.213,132.223 473.5,131.5C 480.343,133.251 487.009,135.584 493.5,138.5C 495.251,136.936 496.251,134.936 496.5,132.5C 498.585,130.316 499.585,127.649 499.5,124.5C 500.833,124.5 501.5,123.833 501.5,122.5C 502.216,119.402 503.216,116.402 504.5,113.5C 505.698,110.574 506.698,107.574 507.5,104.5C 509.601,101.203 510.935,97.5368 511.5,93.5C 513.424,93.2893 513.757,92.6226 512.5,91.5C 515.125,87.1285 516.625,82.4618 517,77.5C 510.626,75.105 504.459,72.4384 498.5,69.5C 500.167,69.5 501.833,69.5 503.5,69.5C 504.231,67.4012 504.231,65.4012 503.5,63.5C 499.568,61.9672 495.568,60.6339 491.5,59.5C 490.261,59.9424 489.261,60.6091 488.5,61.5C 488.5,60.8333 488.167,60.5 487.5,60.5C 487.611,59.8826 487.944,59.3826 488.5,59C 483.957,56.0682 478.957,54.2349 473.5,53.5C 474.66,51.7973 473.993,51.1307 471.5,51.5C 467.019,49.5624 462.352,48.2291 457.5,47.5C 457.5,46.1667 456.833,45.5 455.5,45.5C 451.196,44.1772 446.863,42.8439 442.5,41.5C 441.416,41.685 440.416,42.0183 439.5,42.5C 439.167,42.5 438.833,42.5 438.5,42.5C 438.64,40.8762 437.973,39.7096 436.5,39C 432.693,37.1192 428.693,35.9526 424.5,35.5C 424.611,34.8826 424.944,34.3826 425.5,34C 424.584,33.7216 423.918,33.2216 423.5,32.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#4f4f4c\",d:\"M 505.5,65.5 C 509.951,66.1491 514.284,67.3158 518.5,69C 520.945,71.4822 520.779,73.9822 518,76.5C 513.674,74.3361 509.174,72.6695 504.5,71.5C 504.517,69.4352 504.85,67.4352 505.5,65.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#2e2822\",d:\"M 232.5,83.5 C 227.305,98.8794 221.305,113.879 214.5,128.5C 219.734,113.117 225.734,98.1173 232.5,83.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b8b7b0\",d:\"M 328.5,100.5 C 330.861,100.674 333.194,101.007 335.5,101.5C 348.175,105.39 360.508,110.056 372.5,115.5C 368.777,114.703 365.11,113.703 361.5,112.5C 359.485,111.076 357.152,110.41 354.5,110.5C 354.82,113.898 354.487,117.232 353.5,120.5C 353.309,116.611 352.309,112.611 350.5,108.5C 347.776,106.46 344.776,105.627 341.5,106C 343.246,106.471 344.913,107.138 346.5,108C 345.833,108.333 345.167,108.667 344.5,109C 345.784,109.684 346.951,109.517 348,108.5C 348.5,109.667 349.333,110.5 350.5,111C 349.875,113.8 349.208,116.634 348.5,119.5C 347.833,117.833 347.167,116.167 346.5,114.5C 344.084,117.439 341.084,120.606 337.5,124C 338.337,125.011 338.67,126.178 338.5,127.5C 337.795,130.228 337.128,133.061 336.5,136C 337.208,138.768 338.708,139.601 341,138.5C 342.951,141.838 342.451,144.838 339.5,147.5C 337.983,146.089 336.649,146.256 335.5,148C 337.674,149.797 340.007,149.964 342.5,148.5C 343.583,149.365 343.749,150.365 343,151.5C 337.693,149.551 336.693,150.551 340,154.5C 340.49,155.793 340.657,157.127 340.5,158.5C 342.467,158.261 344.301,158.594 346,159.5C 346.483,158.552 346.649,157.552 346.5,156.5C 352.696,156.574 353.03,157.741 347.5,160C 348.337,161.011 348.67,162.178 348.5,163.5C 347.5,163.5 346.5,163.5 345.5,163.5C 345.778,161.654 345.111,160.32 343.5,159.5C 342.614,160.325 342.281,161.325 342.5,162.5C 338.485,162.276 337.819,163.443 340.5,166C 338.971,167.582 338.471,169.415 339,171.5C 340.714,169.063 342.547,166.73 344.5,164.5C 345.731,165.651 345.731,166.817 344.5,168C 345.77,168.9 346.77,170.066 347.5,171.5C 348.5,170.833 349.5,170.167 350.5,169.5C 351.59,170.727 352.924,171.56 354.5,172C 353.552,172.483 352.552,172.649 351.5,172.5C 351.586,174.677 352.253,176.677 353.5,178.5C 352.102,180.13 351.102,181.964 350.5,184C 348.77,185.852 347.604,185.686 347,183.5C 346.302,184.691 345.469,185.691 344.5,186.5C 337.864,184.887 331.198,182.553 324.5,179.5C 320.088,178.03 315.755,176.363 311.5,174.5C 322.146,174.329 322.146,173.829 311.5,173C 306.222,170.621 306.222,169.621 311.5,170C 311.965,166.678 311.465,163.511 310,160.5C 310.333,160.833 310.667,161.167 311,161.5C 311.23,157.787 312.397,157.12 314.5,159.5C 315.795,157.672 316.795,155.672 317.5,153.5C 318.425,154.641 319.259,154.641 320,153.5C 320.333,154.833 320.667,156.167 321,157.5C 321.965,159.26 323.132,159.594 324.5,158.5C 321.455,154.547 322.455,152.047 327.5,151C 325.888,150.28 324.388,150.446 323,151.5C 322.781,150.062 322.281,148.729 321.5,147.5C 320.325,148.855 319.325,148.688 318.5,147C 320.074,146.664 321.408,145.831 322.5,144.5C 320.244,143.579 319.244,141.912 319.5,139.5C 321.824,139.338 323.491,138.172 324.5,136C 322.633,135.289 321.133,135.789 320,137.5C 319.833,136.833 319.667,136.167 319.5,135.5C 320.744,132.913 322.411,130.58 324.5,128.5C 322.01,124.486 322.843,123.819 327,126.5C 327.5,126.167 328,125.833 328.5,125.5C 327.833,124.833 327.167,124.167 326.5,123.5C 329.785,122.676 333.118,122.176 336.5,122C 335.737,121.056 334.737,120.556 333.5,120.5C 325.275,122.048 324.608,120.715 331.5,116.5C 330.213,113.578 331.213,111.745 334.5,111C 332.888,110.28 331.388,110.446 330,111.5C 329.25,110.874 328.416,110.374 327.5,110C 329.435,108.762 331.435,108.262 333.5,108.5C 332.975,107.808 332.308,107.308 331.5,107C 332.051,105.602 332.384,104.268 332.5,103C 330.68,102.8 329.347,101.966 328.5,100.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e3ded8\",d:\"M 563.5,108.5 C 563.5,129.5 563.5,150.5 563.5,171.5C 562.167,171.5 560.833,171.5 559.5,171.5C 559.666,176.511 559.499,181.511 559,186.5C 557.678,183.112 555.845,182.779 553.5,185.5C 552.735,184.388 551.735,183.721 550.5,183.5C 548.897,181.418 547.563,179.085 546.5,176.5C 550.277,175.004 550.277,173.337 546.5,171.5C 548.229,170.403 549.896,169.237 551.5,168C 550.397,166.32 550.73,164.82 552.5,163.5C 553.086,163.709 553.586,164.043 554,164.5C 553.848,162.924 553.015,161.591 551.5,160.5C 552.522,159.646 553.355,158.646 554,157.5C 555.667,156.167 557.333,156.167 559,157.5C 558.601,154.549 558.101,151.549 557.5,148.5C 558.552,148.649 559.552,148.483 560.5,148C 558.75,146.681 556.75,146.181 554.5,146.5C 553.325,146.719 552.325,146.386 551.5,145.5C 553.078,144.702 554.744,144.202 556.5,144C 554.845,142.556 554.178,140.722 554.5,138.5C 556.599,139.231 558.599,139.231 560.5,138.5C 559.992,136.096 558.825,135.429 557,136.5C 554.674,135.287 554.341,133.954 556,132.5C 557.261,132.759 558.261,133.426 559,134.5C 559.49,133.207 559.657,131.873 559.5,130.5C 554.781,129.175 549.948,128.175 545,127.5C 544.219,126.056 544.386,124.723 545.5,123.5C 546.243,124.908 547.077,126.241 548,127.5C 548.308,126.692 548.808,126.025 549.5,125.5C 552.276,127.13 555.276,127.797 558.5,127.5C 558.785,125.712 558.452,124.045 557.5,122.5C 556.833,122.833 556.167,123.167 555.5,123.5C 554.391,120.892 552.724,118.726 550.5,117C 551.149,115.31 551.149,113.477 550.5,111.5C 549.127,111.343 547.793,111.51 546.5,112C 546.977,114.899 547.977,117.566 549.5,120C 547.953,120.333 546.62,119.833 545.5,118.5C 544.914,118.709 544.414,119.043 544,119.5C 542.45,115.549 539.783,113.883 536,114.5C 535.333,113.833 534.667,113.167 534,112.5C 533.891,118.115 536.391,122.282 541.5,125C 539.154,124.921 536.987,124.088 535,122.5C 535.36,125.399 536.86,127.733 539.5,129.5C 537.238,131.03 537.572,132.363 540.5,133.5C 539.527,135.068 539.36,136.735 540,138.5C 542.307,141.448 543.807,144.782 544.5,148.5C 542.712,151.905 541.712,151.238 541.5,146.5C 540.325,146.281 539.325,146.614 538.5,147.5C 540.173,149.523 540.84,151.856 540.5,154.5C 541.5,154.5 542.5,154.5 543.5,154.5C 543.714,158.257 542.714,158.924 540.5,156.5C 540.167,156.833 539.833,157.167 539.5,157.5C 540.39,158.711 540.39,160.045 539.5,161.5C 539.529,163.029 540.196,164.196 541.5,165C 540.978,165.561 540.645,166.228 540.5,167C 542.391,168.957 543.558,171.124 544,173.5C 540.48,167.857 538.146,168.19 537,174.5C 535.687,173.713 534.52,174.046 533.5,175.5C 532.5,175.5 531.5,175.5 530.5,175.5C 530.374,173.8 529.707,172.3 528.5,171C 530.141,169.093 529.641,168.26 527,168.5C 523.898,168.659 523.898,169.326 527,170.5C 527.273,172.101 527.773,173.601 528.5,175C 528.167,175.167 527.833,175.333 527.5,175.5C 522.257,174.919 516.923,173.752 511.5,172C 510.112,171.111 510.278,170.611 512,170.5C 515.503,171.723 519.003,171.723 522.5,170.5C 520.332,168.545 517.998,167.879 515.5,168.5C 514.067,165.667 513.4,162.667 513.5,159.5C 516.747,148.611 520.914,137.945 526,127.5C 527.785,126.76 529.618,126.093 531.5,125.5C 532.532,127.04 533.865,127.54 535.5,127C 533.873,124.98 532.039,123.147 530,121.5C 531.166,111.493 532.666,101.493 534.5,91.5C 540.117,95.0468 544.617,99.7135 548,105.5C 549.903,105.306 551.737,105.306 553.5,105.5C 552.68,103.889 551.346,103.222 549.5,103.5C 547.796,100.601 545.796,97.7678 543.5,95C 540.965,92.9629 538.298,91.1296 535.5,89.5C 535.919,88.3279 536.585,87.3279 537.5,86.5C 540.843,91.1375 545.177,94.1375 550.5,95.5C 551.413,100.74 552.413,100.74 553.5,95.5C 556.343,96.9208 557.676,98.9208 557.5,101.5C 556.391,100.41 555.391,100.41 554.5,101.5C 555.771,104.597 557.271,104.931 559,102.5C 559.772,103.849 560.939,104.682 562.5,105C 561.015,106.756 561.348,107.923 563.5,108.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c0b4a9\",d:\"M 183.5,106.5 C 183.825,110.107 184.992,110.774 187,108.5C 186.923,109.738 187.089,110.738 187.5,111.5C 188.518,110.807 189.518,110.141 190.5,109.5C 190.721,110.735 191.388,111.735 192.5,112.5C 191.96,113.748 191.293,114.915 190.5,116C 191.738,115.923 192.738,116.089 193.5,116.5C 191.483,119.571 188.817,120.571 185.5,119.5C 184.702,119.957 184.369,120.624 184.5,121.5C 184.483,123.028 183.816,123.528 182.5,123C 180.057,121.066 178.724,118.566 178.5,115.5C 179.966,116.347 180.8,117.68 181,119.5C 181.737,115.793 182.571,112.127 183.5,108.5C 182.209,108.737 181.209,108.404 180.5,107.5C 181.609,107.443 182.609,107.11 183.5,106.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a39886\",d:\"M 4.5,102.5 C 3.76109,102.369 3.09442,102.536 2.5,103C 9.58378,106.95 17.2504,109.117 25.5,109.5C 26.8333,110.167 28.1667,110.833 29.5,111.5C 22.4142,111.553 15.4142,110.886 8.5,109.5C 7.30441,109.846 7.30441,110.346 8.5,111C 10.1341,111.494 11.8008,111.66 13.5,111.5C 13.4046,114.358 12.2379,116.691 10,118.5C 9.69238,117.692 9.19238,117.025 8.5,116.5C 5.61476,118.769 2.61476,120.769 -0.5,122.5C -0.5,114.833 -0.5,107.167 -0.5,99.5C 1.22586,99.1854 2.89253,99.0187 4.5,99C 5.79109,100.292 5.79109,101.458 4.5,102.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#464746\",d:\"M 494.5,108.5 C 494.684,111.173 495.851,111.84 498,110.5C 498.283,113.742 499.117,114.076 500.5,111.5C 501.425,112.641 502.259,112.641 503,111.5C 503.278,112.416 503.778,113.082 504.5,113.5C 503.216,116.402 502.216,119.402 501.5,122.5C 497.098,122.157 493.431,120.49 490.5,117.5C 491.467,114.237 492.801,111.237 494.5,108.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bfb4a2\",d:\"M 29.5,111.5 C 27.6012,112.439 24.2679,112.939 19.5,113C 16.4161,118.079 12.0827,121.746 6.5,124C 7.16667,124.333 7.83333,124.667 8.5,125C 5.48731,125.909 2.48731,126.742 -0.5,127.5C -0.5,125.833 -0.5,124.167 -0.5,122.5C 2.61476,120.769 5.61476,118.769 8.5,116.5C 9.19238,117.025 9.69238,117.692 10,118.5C 12.2379,116.691 13.4046,114.358 13.5,111.5C 11.8008,111.66 10.1341,111.494 8.5,111C 7.30441,110.346 7.30441,109.846 8.5,109.5C 15.4142,110.886 22.4142,111.553 29.5,111.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#83837e\",d:\"M 372.5,115.5 C 376.537,116.065 380.203,117.399 383.5,119.5C 379.356,119.223 375.689,117.89 372.5,115.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#3e3f44\",d:\"M 422.5,113.5 C 423.492,113.328 424.158,113.662 424.5,114.5C 424.813,116.021 424.313,117.688 423,119.5C 421.168,118.142 419.335,117.808 417.5,118.5C 418.592,119.831 419.926,120.664 421.5,121C 417.728,121.611 417.728,122.611 421.5,124C 421.167,124.333 420.833,124.667 420.5,125C 416.497,123.497 412.163,122.331 407.5,121.5C 408.357,119.138 408.691,116.804 408.5,114.5C 409.728,112.679 411.394,111.679 413.5,111.5C 413.259,114.999 414.092,115.332 416,112.5C 418.188,114.097 420.354,114.431 422.5,113.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#1b1c1f\",d:\"M 448.5,105.5 C 453.257,106.461 457.757,108.128 462,110.5C 461.554,113.438 461.054,116.438 460.5,119.5C 459.266,122.54 456.932,123.873 453.5,123.5C 454.263,122.732 455.263,122.232 456.5,122C 454.096,121.492 453.429,120.325 454.5,118.5C 453.855,116.568 452.521,115.401 450.5,115C 451.833,114.333 451.833,113.667 450.5,113C 453.799,114.343 455.466,113.176 455.5,109.5C 452.422,109.413 450.089,108.08 448.5,105.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#3b3b3f\",d:\"M 448.5,105.5 C 450.089,108.08 452.422,109.413 455.5,109.5C 455.466,113.176 453.799,114.343 450.5,113C 451.833,113.667 451.833,114.333 450.5,115C 452.521,115.401 453.855,116.568 454.5,118.5C 453.429,120.325 454.096,121.492 456.5,122C 455.263,122.232 454.263,122.732 453.5,123.5C 450.386,122.072 447.219,120.739 444,119.5C 444.155,116.16 444.655,112.826 445.5,109.5C 446.5,108.167 447.5,106.833 448.5,105.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#2b2b2e\",d:\"M 422.5,113.5 C 420.354,114.431 418.188,114.097 416,112.5C 414.092,115.332 413.259,114.999 413.5,111.5C 411.394,111.679 409.728,112.679 408.5,114.5C 408.691,116.804 408.357,119.138 407.5,121.5C 412.163,122.331 416.497,123.497 420.5,125C 420.833,124.667 421.167,124.333 421.5,124C 417.728,122.611 417.728,121.611 421.5,121C 419.926,120.664 418.592,119.831 417.5,118.5C 419.335,117.808 421.168,118.142 423,119.5C 424.313,117.688 424.813,116.021 424.5,114.5C 426.252,114.418 427.252,115.251 427.5,117C 426.013,120.801 424.68,124.635 423.5,128.5C 422.85,128.804 422.183,129.137 421.5,129.5C 416.204,127.568 410.871,125.735 405.5,124C 404.244,123.583 403.577,122.75 403.5,121.5C 405.338,118.019 407.004,114.353 408.5,110.5C 413.318,110.203 417.984,111.203 422.5,113.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b1b0a6\",d:\"M 310.5,93.5 C 310.328,94.4916 310.662,95.1583 311.5,95.5C 315.807,96.7679 319.141,98.6013 321.5,101C 319.044,102.913 319.378,104.579 322.5,106C 321.24,107.113 320.073,107.28 319,106.5C 318.814,104.1 318.314,101.766 317.5,99.5C 316.77,100.934 315.77,102.1 314.5,103C 315.788,105.466 315.788,107.966 314.5,110.5C 315.991,111.244 317.491,111.91 319,112.5C 319.333,111.833 319.667,111.167 320,110.5C 320.667,111.833 320.667,113.167 320,114.5C 317.206,113.154 314.706,113.654 312.5,116C 313.167,116.667 313.833,117.333 314.5,118C 312.398,119.733 312.065,121.733 313.5,124C 313.167,124.167 312.833,124.333 312.5,124.5C 311.702,122.922 311.202,121.256 311,119.5C 310.999,122.687 310.166,125.52 308.5,128C 310.594,128.445 312.094,127.612 313,125.5C 312.478,127.049 312.645,128.549 313.5,130C 313.355,130.772 313.022,131.439 312.5,132C 311.062,132.219 309.729,132.719 308.5,133.5C 310.024,135.792 309.691,137.792 307.5,139.5C 309.95,140.626 311.95,139.959 313.5,137.5C 310.8,133.913 311.467,133.079 315.5,135C 315.085,138.505 313.419,141.172 310.5,143C 311.604,144.131 311.271,144.965 309.5,145.5C 308.742,144.189 307.742,143.689 306.5,144C 304.9,145.971 304.734,147.804 306,149.5C 306.986,145.625 308.153,145.625 309.5,149.5C 307.024,150.974 305.024,152.307 303.5,153.5C 305.475,154.749 305.809,156.249 304.5,158C 309.103,157.937 309.27,158.771 305,160.5C 302.599,159.398 300.099,159.231 297.5,160C 298.641,160.741 298.641,161.575 297.5,162.5C 299.396,163.466 301.396,163.799 303.5,163.5C 303.36,165.124 304.027,166.29 305.5,167C 303.817,168.286 302.151,169.453 300.5,170.5C 295.858,168.67 291.191,166.836 286.5,165C 285.87,163.108 284.87,161.441 283.5,160C 292.412,137.755 301.412,115.589 310.5,93.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#38393c\",d:\"M 474.5,114.5 C 473.773,116.717 473.94,119.05 475,121.5C 476.692,121.676 478.192,122.176 479.5,123C 477.996,124.491 477.163,126.324 477,128.5C 476.107,127.289 475.274,127.289 474.5,128.5C 477.724,130.942 481.391,132.609 485.5,133.5C 487.271,132.965 487.604,132.131 486.5,131C 487.914,129.452 489.58,128.785 491.5,129C 490.5,129.833 489.5,130.667 488.5,131.5C 489.833,133.5 491.5,135.167 493.5,136.5C 494.862,134.988 495.196,133.488 494.5,132C 495.437,131.308 496.103,131.475 496.5,132.5C 496.251,134.936 495.251,136.936 493.5,138.5C 487.009,135.584 480.343,133.251 473.5,131.5C 469.464,129.225 465.131,127.392 460.5,126C 460.014,123.973 460.014,121.807 460.5,119.5C 462.201,117.269 463.534,114.769 464.5,112C 467.839,112.484 471.173,113.317 474.5,114.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b89886\",d:\"M 63.5,95.5 C 66.5,95.5 69.5,95.5 72.5,95.5C 72.3433,96.8734 72.51,98.2068 73,99.5C 73.6708,98.7476 74.5041,98.4142 75.5,98.5C 79.1212,103.293 82.9545,107.96 87,112.5C 87.4523,115.149 88.2857,117.649 89.5,120C 80.6561,118.739 73.1561,121.239 67,127.5C 61.0502,123.788 54.5502,122.621 47.5,124C 46.6919,124.308 46.0253,124.808 45.5,125.5C 49.7129,125.563 54.0462,125.729 58.5,126C 60.9494,126.725 63.2827,127.725 65.5,129C 57.1167,138.968 52.1167,150.468 50.5,163.5C 46.9303,164.257 43.7636,163.257 41,160.5C 39.8947,156.877 38.8947,153.21 38,149.5C 35.5293,158.576 38.6959,164.242 47.5,166.5C 45.96,171.608 42.6267,174.941 37.5,176.5C 36.4164,177.665 35.5831,178.998 35,180.5C 33.6487,178.981 32.1487,177.648 30.5,176.5C 29.3892,178.552 27.7225,179.886 25.5,180.5C 25.0879,178.113 24.0879,176.113 22.5,174.5C 23.7683,173.213 23.435,172.213 21.5,171.5C 23.5,170.833 25.5,170.167 27.5,169.5C 27.0814,168.328 26.4147,167.328 25.5,166.5C 24.1144,168.17 22.2811,169.504 20,170.5C 18.6338,168.63 17.4672,166.63 16.5,164.5C 17.9014,163.479 19.2347,162.479 20.5,161.5C 19.0695,161.421 17.7362,161.754 16.5,162.5C 15.3961,161.369 15.7295,160.535 17.5,160C 13.8548,159.856 11.5214,158.023 10.5,154.5C 13.0756,153.117 12.7423,152.283 9.5,152C 11.8835,150.599 14.2169,150.099 16.5,150.5C 16.04,148.214 14.7067,146.881 12.5,146.5C 11.8589,147.947 10.3589,149.28 8,150.5C 7.54643,148.464 6.7131,146.63 5.5,145C 6.18676,143.838 6.35343,142.672 6,141.5C 3.82148,142.84 3.32148,142.507 4.5,140.5C 2.52119,139.188 0.854523,137.521 -0.5,135.5C -0.5,132.833 -0.5,130.167 -0.5,127.5C 2.48731,126.742 5.48731,125.909 8.5,125C 7.83333,124.667 7.16667,124.333 6.5,124C 12.0827,121.746 16.4161,118.079 19.5,113C 24.2679,112.939 27.6012,112.439 29.5,111.5C 28.1667,110.833 26.8333,110.167 25.5,109.5C 28.5448,109.492 31.5448,109.159 34.5,108.5C 38.2219,108.139 41.2219,106.472 43.5,103.5C 45.1992,103.66 46.8659,103.494 48.5,103C 52.6782,100.242 57.6782,97.7422 63.5,95.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#1b1d20\",d:\"M 439.5,134.5 C 437.691,135.291 435.691,135.291 433.5,134.5C 430.889,132.421 427.889,131.088 424.5,130.5C 425.445,125.118 427.612,120.452 431,116.5C 435.098,117.976 439.098,119.642 443,121.5C 442.968,126.103 441.801,130.436 439.5,134.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#2c2d30\",d:\"M 455.5,141.5 C 451.423,140.63 447.423,139.463 443.5,138C 441.937,137.241 440.937,136.074 440.5,134.5C 442.397,130.374 444.564,126.374 447,122.5C 451.09,124.197 455.257,125.697 459.5,127C 460.022,127.561 460.355,128.228 460.5,129C 458.923,133.235 457.257,137.402 455.5,141.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8f887e\",d:\"M 239.5,60.5 C 237.464,68.2442 235.13,75.9109 232.5,83.5C 225.734,98.1173 219.734,113.117 214.5,128.5C 213.028,130.117 212.361,132.117 212.5,134.5C 212.511,136.045 212.844,137.378 213.5,138.5C 214.385,142.046 216.385,144.712 219.5,146.5C 217.654,146.222 216.32,146.889 215.5,148.5C 216.882,150.549 218.548,152.215 220.5,153.5C 220.102,157.957 218.436,157.957 215.5,153.5C 213.879,151.883 211.879,150.716 209.5,150C 211.256,149.798 212.922,149.298 214.5,148.5C 213.294,146.851 211.961,145.351 210.5,144C 211.308,143.692 211.975,143.192 212.5,142.5C 210.448,140.207 209.781,137.707 210.5,135C 209.956,134.283 209.289,133.783 208.5,133.5C 207.766,132.292 207.433,130.959 207.5,129.5C 208.833,129.5 210.167,129.5 211.5,129.5C 211.704,126.482 212.037,123.482 212.5,120.5C 212.491,118.692 212.991,117.025 214,115.5C 214.333,115.833 214.667,116.167 215,116.5C 214.957,111.789 216.124,107.456 218.5,103.5C 221.89,102.056 223.223,99.3896 222.5,95.5C 224.942,95.6463 225.609,94.813 224.5,93C 225.809,89.7349 227.642,86.5683 230,83.5C 230.062,79.5931 231.229,76.0931 233.5,73C 233.43,72.2352 233.097,71.7352 232.5,71.5C 235.021,67.9045 237.355,64.2378 239.5,60.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#44474a\",d:\"M 474.5,114.5 C 483.009,117.595 491.342,120.928 499.5,124.5C 499.585,127.649 498.585,130.316 496.5,132.5C 496.103,131.475 495.437,131.308 494.5,132C 495.196,133.488 494.862,134.988 493.5,136.5C 491.5,135.167 489.833,133.5 488.5,131.5C 489.5,130.667 490.5,129.833 491.5,129C 489.58,128.785 487.914,129.452 486.5,131C 487.604,132.131 487.271,132.965 485.5,133.5C 481.391,132.609 477.724,130.942 474.5,128.5C 475.274,127.289 476.107,127.289 477,128.5C 477.163,126.324 477.996,124.491 479.5,123C 478.192,122.176 476.692,121.676 475,121.5C 473.94,119.05 473.773,116.717 474.5,114.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#3f3d3b\",d:\"M 520.5,115.5 C 520.443,116.609 520.11,117.609 519.5,118.5C 513.167,133.833 506.833,149.167 500.5,164.5C 506.958,146.463 513.625,128.463 520.5,110.5C 521.222,110.082 521.722,109.416 522,108.5C 522.609,111.065 522.109,113.399 520.5,115.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c5c2bc\",d:\"M 361.5,112.5 C 361.062,112.435 360.728,112.601 360.5,113C 363.461,114.314 366.128,115.981 368.5,118C 365.833,118.667 365.833,119.333 368.5,120C 364.43,122.21 364.597,122.71 369,121.5C 371.505,117.862 373.838,118.195 376,122.5C 376.893,121.289 377.726,121.289 378.5,122.5C 376.5,125.167 374.5,125.167 372.5,122.5C 370.67,122.776 369.003,123.443 367.5,124.5C 368.033,126.224 369.199,127.891 371,129.5C 372.099,126.961 373.766,126.295 376,127.5C 373.933,129.667 372.766,132.167 372.5,135C 373.667,135.5 374.5,136.333 375,137.5C 376.113,136.24 376.28,135.073 375.5,134C 376.025,133.308 376.692,132.808 377.5,132.5C 378.731,133.651 378.731,134.817 377.5,136C 379.587,135.782 381.587,135.949 383.5,136.5C 380.294,138.269 376.961,139.769 373.5,141C 374.325,142.688 375.325,142.855 376.5,141.5C 376.833,141.833 377.167,142.167 377.5,142.5C 376.833,143.167 376.167,143.833 375.5,144.5C 380.833,145.833 380.833,147.167 375.5,148.5C 376.837,148.74 378.503,149.24 380.5,150C 379.328,150.419 378.328,151.085 377.5,152C 379.134,152.494 380.801,152.66 382.5,152.5C 380.588,153.21 378.921,154.377 377.5,156C 377.759,157.261 378.426,158.261 379.5,159C 376.633,158.756 373.633,159.089 370.5,160C 371.471,165.072 371.805,170.238 371.5,175.5C 367.543,175.177 363.71,175.177 360,175.5C 359.46,173.865 359.96,172.532 361.5,171.5C 359.838,170.673 358.505,169.507 357.5,168C 358.833,165 358.833,162 357.5,159C 358.662,158.173 359.829,157.34 361,156.5C 362.694,158.429 364.861,159.429 367.5,159.5C 366.949,154.02 366.949,148.687 367.5,143.5C 364.482,143.665 361.482,143.498 358.5,143C 362.148,140.503 361.815,138.169 357.5,136C 356.551,135.383 355.718,135.549 355,136.5C 353.764,132.197 354.598,131.197 357.5,133.5C 358.452,131.955 358.785,130.288 358.5,128.5C 360.199,128.66 361.866,128.494 363.5,128C 357.252,127.812 351.085,127.312 345,126.5C 342.738,127.169 340.571,127.502 338.5,127.5C 338.67,126.178 338.337,125.011 337.5,124C 341.084,120.606 344.084,117.439 346.5,114.5C 347.167,116.167 347.833,117.833 348.5,119.5C 349.208,116.634 349.875,113.8 350.5,111C 349.333,110.5 348.5,109.667 348,108.5C 346.951,109.517 345.784,109.684 344.5,109C 345.167,108.667 345.833,108.333 346.5,108C 344.913,107.138 343.246,106.471 341.5,106C 344.776,105.627 347.776,106.46 350.5,108.5C 352.309,112.611 353.309,116.611 353.5,120.5C 354.487,117.232 354.82,113.898 354.5,110.5C 357.152,110.41 359.485,111.076 361.5,112.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#5f6366\",d:\"M 427.5,126.5 C 430.253,127.022 432.92,127.856 435.5,129C 436.451,129.718 436.617,130.551 436,131.5C 433.557,130.407 431.057,129.407 428.5,128.5C 427.702,128.043 427.369,127.376 427.5,126.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ddd7cc\",d:\"M 196.5,118.5 C 196.791,119.649 197.624,120.316 199,120.5C 201.792,119.784 204.626,119.451 207.5,119.5C 207.5,120.833 207.5,122.167 207.5,123.5C 205.669,124.052 204.003,124.052 202.5,123.5C 199.688,124.495 198.022,125.995 197.5,128C 201.821,128.499 206.154,128.666 210.5,128.5C 210.294,125.505 210.96,122.838 212.5,120.5C 212.037,123.482 211.704,126.482 211.5,129.5C 210.167,129.5 208.833,129.5 207.5,129.5C 207.433,130.959 207.766,132.292 208.5,133.5C 207.643,136.549 207.643,139.549 208.5,142.5C 207.443,142.906 206.109,142.906 204.5,142.5C 209.059,132.73 206.059,128.563 195.5,130C 193.907,130.949 192.574,132.115 191.5,133.5C 186.362,130.939 185.028,127.272 187.5,122.5C 186.675,121.614 185.675,121.281 184.5,121.5C 184.369,120.624 184.702,119.957 185.5,119.5C 188.817,120.571 191.483,119.571 193.5,116.5C 192.738,116.089 191.738,115.923 190.5,116C 191.293,114.915 191.96,113.748 192.5,112.5C 191.388,111.735 190.721,110.735 190.5,109.5C 191.167,107.833 191.833,106.167 192.5,104.5C 193.458,104.047 194.292,103.381 195,102.5C 194.776,107.924 195.276,113.257 196.5,118.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#322b22\",d:\"M 214.5,128.5 C 213.793,131.786 213.46,135.119 213.5,138.5C 212.844,137.378 212.511,136.045 212.5,134.5C 212.361,132.117 213.028,130.117 214.5,128.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b7b3ad\",d:\"M 253.5,65.5 C 253.668,68.0514 254.668,68.7181 256.5,67.5C 257.492,67.3284 258.158,67.6618 258.5,68.5C 258.062,68.4346 257.728,68.6012 257.5,69C 259.376,70.3754 261.376,71.542 263.5,72.5C 263.877,74.8241 264.877,75.4908 266.5,74.5C 267.806,75.9122 268.64,77.5789 269,79.5C 269.654,78.3044 270.154,78.3044 270.5,79.5C 269.16,80.6878 268.493,82.1878 268.5,84C 270.46,87.1735 269.794,88.0069 266.5,86.5C 265.708,88.4648 265.041,90.4648 264.5,92.5C 264.977,93.4776 265.643,94.3109 266.5,95C 262.918,95.5954 262.584,96.9288 265.5,99C 264.062,99.2189 262.729,99.7189 261.5,100.5C 262.522,101.354 263.355,102.354 264,103.5C 264.689,102.643 265.522,101.977 266.5,101.5C 266.364,104.296 264.697,106.296 261.5,107.5C 260.614,108.325 260.281,109.325 260.5,110.5C 261.675,110.281 262.675,110.614 263.5,111.5C 262.372,112.262 261.205,112.929 260,113.5C 256.475,107.885 255.308,108.218 256.5,114.5C 257.5,114.5 258.5,114.5 259.5,114.5C 258.833,116.167 258.167,117.833 257.5,119.5C 255.335,119.116 253.668,119.783 252.5,121.5C 253.274,122.711 254.107,122.711 255,121.5C 255.645,122.646 256.478,123.646 257.5,124.5C 256.754,125.736 256.421,127.07 256.5,128.5C 257.873,128.343 259.207,128.51 260.5,129C 258.444,129.311 256.444,129.811 254.5,130.5C 251.754,129.403 250.588,130.403 251,133.5C 254.786,130.75 256.786,131.417 257,135.5C 257.336,133.926 258.169,132.592 259.5,131.5C 260.262,132.628 260.929,133.795 261.5,135C 259.564,135.813 257.564,136.313 255.5,136.5C 255.343,137.873 255.51,139.207 256,140.5C 256.414,140.043 256.914,139.709 257.5,139.5C 258.833,140.5 258.833,141.5 257.5,142.5C 255.627,143.089 253.96,142.422 252.5,140.5C 251.081,141.005 250.415,142.005 250.5,143.5C 247.119,143.54 243.786,143.207 240.5,142.5C 240.52,140.857 239.853,139.524 238.5,138.5C 239.687,138.446 241.02,138.113 242.5,137.5C 239.924,136.117 240.258,135.283 243.5,135C 239.914,133.4 239.247,131.233 241.5,128.5C 240.695,126.528 239.361,125.028 237.5,124C 239.155,122.556 239.822,120.722 239.5,118.5C 238.127,118.657 236.793,118.49 235.5,118C 239.932,117.377 240.265,116.377 236.5,115C 237.981,114.02 239.315,112.853 240.5,111.5C 242.674,111.148 244.674,111.648 246.5,113C 247.38,111.644 247.714,110.144 247.5,108.5C 249.989,108.702 252.323,108.202 254.5,107C 252.665,106.072 252.332,104.906 253.5,103.5C 252.5,102.833 251.5,102.167 250.5,101.5C 253.987,100.491 255.32,98.1578 254.5,94.5C 249.167,93.8333 249.167,93.1667 254.5,92.5C 254.5,91.5 254.5,90.5 254.5,89.5C 253.022,89.762 251.689,89.4287 250.5,88.5C 251.025,87.8076 251.692,87.3076 252.5,87C 250.985,85.2742 249.318,83.7742 247.5,82.5C 247.833,81.8333 248.167,81.1667 248.5,80.5C 252.839,78.4256 254.839,79.7589 254.5,84.5C 255.5,84.5 256.5,84.5 257.5,84.5C 258.07,80.5786 256.403,78.412 252.5,78C 252.957,77.586 253.291,77.086 253.5,76.5C 250.562,75.5109 247.562,74.8442 244.5,74.5C 244.64,72.8762 243.973,71.7096 242.5,71C 243.448,70.5172 244.448,70.3505 245.5,70.5C 245.492,64.7924 245.992,64.4591 247,69.5C 247.869,66.2374 249.203,65.9041 251,68.5C 251.236,66.8807 252.069,65.8807 253.5,65.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cdccc4\",d:\"M 361.5,112.5 C 365.11,113.703 368.777,114.703 372.5,115.5C 375.689,117.89 379.356,119.223 383.5,119.5C 398.02,123.95 412.186,129.284 426,135.5C 423.984,145.379 420.484,154.713 415.5,163.5C 412.263,169.864 409.597,176.53 407.5,183.5C 405.654,186.338 403.988,189.338 402.5,192.5C 399.506,191.252 396.506,191.252 393.5,192.5C 393.919,193.672 394.585,194.672 395.5,195.5C 397.122,193.561 398.956,193.228 401,194.5C 401.383,197.683 400.383,200.349 398,202.5C 397.055,202.095 396.388,201.428 396,200.5C 395.581,201.672 394.915,202.672 394,203.5C 389.868,202.92 386.368,201.92 383.5,200.5C 383.662,198.473 383.495,196.473 383,194.5C 382.346,195.696 381.846,195.696 381.5,194.5C 382.802,192.799 384.469,191.632 386.5,191C 385.833,190.333 385.167,189.667 384.5,189C 386.022,187.478 387.522,185.978 389,184.5C 390.892,187.39 391.725,187.056 391.5,183.5C 389.22,183.746 387.22,183.746 385.5,183.5C 388.419,182.686 391.252,181.686 394,180.5C 395.377,184.265 396.377,183.932 397,179.5C 398.255,178.789 399.421,177.956 400.5,177C 398.707,175.69 396.874,175.19 395,175.5C 394.517,176.448 394.351,177.448 394.5,178.5C 391.227,178.529 390.56,177.196 392.5,174.5C 392,172.5 391.5,170.5 391,168.5C 390.798,170.256 390.298,171.922 389.5,173.5C 388.422,170.893 389.089,168.726 391.5,167C 390.062,166.781 388.729,166.281 387.5,165.5C 388.246,164.264 388.579,162.93 388.5,161.5C 389.675,161.719 390.675,161.386 391.5,160.5C 389.433,159.866 387.6,158.866 386,157.5C 384.644,158.38 383.144,158.714 381.5,158.5C 381.383,156.516 382.05,154.85 383.5,153.5C 383.376,152.893 383.043,152.56 382.5,152.5C 380.801,152.66 379.134,152.494 377.5,152C 378.328,151.085 379.328,150.419 380.5,150C 378.503,149.24 376.837,148.74 375.5,148.5C 380.833,147.167 380.833,145.833 375.5,144.5C 376.167,143.833 376.833,143.167 377.5,142.5C 377.167,142.167 376.833,141.833 376.5,141.5C 375.325,142.855 374.325,142.688 373.5,141C 376.961,139.769 380.294,138.269 383.5,136.5C 381.587,135.949 379.587,135.782 377.5,136C 378.731,134.817 378.731,133.651 377.5,132.5C 376.692,132.808 376.025,133.308 375.5,134C 376.28,135.073 376.113,136.24 375,137.5C 374.5,136.333 373.667,135.5 372.5,135C 372.766,132.167 373.933,129.667 376,127.5C 373.766,126.295 372.099,126.961 371,129.5C 369.199,127.891 368.033,126.224 367.5,124.5C 369.003,123.443 370.67,122.776 372.5,122.5C 374.5,125.167 376.5,125.167 378.5,122.5C 377.726,121.289 376.893,121.289 376,122.5C 373.838,118.195 371.505,117.862 369,121.5C 364.597,122.71 364.43,122.21 368.5,120C 365.833,119.333 365.833,118.667 368.5,118C 366.128,115.981 363.461,114.314 360.5,113C 360.728,112.601 361.062,112.435 361.5,112.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#674b37\",d:\"M 151.5,133.5 C 154.833,133.5 158.167,133.5 161.5,133.5C 158.299,135.26 154.633,136.094 150.5,136C 153.413,141.014 156.413,145.847 159.5,150.5C 162.596,154.788 164.929,159.455 166.5,164.5C 165.728,163.306 164.728,162.306 163.5,161.5C 160.92,155.332 157.586,149.665 153.5,144.5C 152.563,139.86 149.897,137.193 145.5,136.5C 144.391,136.443 143.391,136.11 142.5,135.5C 145.5,134.833 148.5,134.167 151.5,133.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bbb2a5\",d:\"M 208.5,133.5 C 209.289,133.783 209.956,134.283 210.5,135C 209.781,137.707 210.448,140.207 212.5,142.5C 211.975,143.192 211.308,143.692 210.5,144C 211.961,145.351 213.294,146.851 214.5,148.5C 212.922,149.298 211.256,149.798 209.5,150C 211.879,150.716 213.879,151.883 215.5,153.5C 212.402,152.784 209.402,151.784 206.5,150.5C 205.357,150.092 204.357,149.425 203.5,148.5C 206.099,147.969 208.765,147.802 211.5,148C 207.986,147.169 204.819,145.669 202,143.5C 201.246,140.361 200.246,137.361 199,134.5C 197.201,134.721 195.368,135.054 193.5,135.5C 192.478,135.145 191.811,134.478 191.5,133.5C 192.574,132.115 193.907,130.949 195.5,130C 206.059,128.563 209.059,132.73 204.5,142.5C 206.109,142.906 207.443,142.906 208.5,142.5C 207.643,139.549 207.643,136.549 208.5,133.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6e4f44\",d:\"M 4.5,140.5 C 6.46862,136.542 8.46862,136.542 10.5,140.5C 10.1667,141.5 9.5,142.167 8.5,142.5C 7.4763,141.147 6.14297,140.48 4.5,140.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#2e2e31\",d:\"M 473.5,131.5 C 475.213,132.223 476.213,133.557 476.5,135.5C 475.622,138.13 474.955,140.797 474.5,143.5C 473.609,144.261 472.942,145.261 472.5,146.5C 471.675,147.386 470.675,147.719 469.5,147.5C 469.167,147.5 468.833,147.5 468.5,147.5C 464.99,145.656 461.323,143.989 457.5,142.5C 458.669,137.826 460.336,133.326 462.5,129C 466.105,129.784 469.772,130.617 473.5,131.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b89e8d\",d:\"M 145.5,136.5 C 149.897,137.193 152.563,139.86 153.5,144.5C 150.452,142.118 147.785,139.452 145.5,136.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#efeae2\",d:\"M 178.5,115.5 C 178.724,118.566 180.057,121.066 182.5,123C 183.816,123.528 184.483,123.028 184.5,121.5C 185.675,121.281 186.675,121.614 187.5,122.5C 185.028,127.272 186.362,130.939 191.5,133.5C 191.811,134.478 192.478,135.145 193.5,135.5C 195.368,135.054 197.201,134.721 199,134.5C 200.246,137.361 201.246,140.361 202,143.5C 204.819,145.669 207.986,147.169 211.5,148C 208.765,147.802 206.099,147.969 203.5,148.5C 204.357,149.425 205.357,150.092 206.5,150.5C 216.309,164.398 223.143,179.732 227,196.5C 230.033,198.912 231.7,201.912 232,205.5C 231.346,204.304 230.846,204.304 230.5,205.5C 232.786,209.385 234.453,213.385 235.5,217.5C 235.5,218.167 235.5,218.833 235.5,219.5C 234.604,220.506 233.938,220.506 233.5,219.5C 232.637,218.06 232.637,216.726 233.5,215.5C 227.712,203.133 222.712,190.467 218.5,177.5C 215.386,175.887 212.053,174.887 208.5,174.5C 207.194,175.912 206.36,177.579 206,179.5C 205.313,177.432 205.48,175.432 206.5,173.5C 204.327,170.532 202.827,167.532 202,164.5C 200.954,165.772 200.454,167.272 200.5,169C 200.788,171.187 201.122,173.354 201.5,175.5C 200.11,174.101 199.11,172.434 198.5,170.5C 198.865,168.412 198.865,166.079 198.5,163.5C 197.448,163.649 196.448,163.483 195.5,163C 194.726,160.371 194.726,157.538 195.5,154.5C 194.021,152.235 192.687,149.901 191.5,147.5C 192.167,147.167 192.833,146.833 193.5,146.5C 192.224,145.355 190.891,145.355 189.5,146.5C 186.961,143.972 186.128,140.972 187,137.5C 187.995,136.934 188.828,136.267 189.5,135.5C 185.415,129.673 181.082,124.007 176.5,118.5C 175.515,116.902 175.349,115.235 176,113.5C 176.417,114.756 177.25,115.423 178.5,115.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#eeede9\",d:\"M 316.5,90.5 C 318.334,91.494 320.001,91.494 321.5,90.5C 322.167,91.1667 322.833,91.8333 323.5,92.5C 349.451,102.965 375.784,112.632 402.5,121.5C 402.833,121.5 403.167,121.5 403.5,121.5C 403.577,122.75 404.244,123.583 405.5,124C 410.871,125.735 416.204,127.568 421.5,129.5C 422.183,129.137 422.85,128.804 423.5,128.5C 423.328,129.492 423.662,130.158 424.5,130.5C 427.889,131.088 430.889,132.421 433.5,134.5C 431.271,135.055 429.605,136.389 428.5,138.5C 432.095,142.464 432.428,146.297 429.5,150C 429.862,151.225 430.362,152.391 431,153.5C 431.667,150.833 432.333,150.833 433,153.5C 433.651,155.235 433.485,156.902 432.5,158.5C 434.078,159.298 435.744,159.798 437.5,160C 436.062,160.219 434.729,160.719 433.5,161.5C 434.989,162.98 436.655,163.813 438.5,164C 437.663,165.011 437.33,166.178 437.5,167.5C 440.481,167.544 440.814,167.877 438.5,168.5C 436.845,167.772 435.179,167.605 433.5,168C 436.228,170.77 435.894,173.27 432.5,175.5C 431.5,173.833 430.167,172.5 428.5,171.5C 427.019,173.149 425.352,174.482 423.5,175.5C 420.851,174.752 418.184,175.085 415.5,176.5C 413.848,178.446 413.015,180.446 413,182.5C 411.887,181.695 410.721,181.028 409.5,180.5C 411.896,174.978 413.896,169.311 415.5,163.5C 420.484,154.713 423.984,145.379 426,135.5C 412.186,129.284 398.02,123.95 383.5,119.5C 380.203,117.399 376.537,116.065 372.5,115.5C 360.508,110.056 348.175,105.39 335.5,101.5C 329.345,98.5946 323.012,95.9279 316.5,93.5C 316.927,92.2616 316.927,91.2616 316.5,90.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c1bcb6\",d:\"M 554.5,146.5 C 554.468,148.567 553.468,149.9 551.5,150.5C 549.597,151.353 547.597,151.353 545.5,150.5C 545.156,145.519 544.656,140.852 544,136.5C 543.578,134.574 542.411,133.574 540.5,133.5C 537.572,132.363 537.238,131.03 539.5,129.5C 536.86,127.733 535.36,125.399 535,122.5C 536.987,124.088 539.154,124.921 541.5,125C 536.391,122.282 533.891,118.115 534,112.5C 534.667,113.167 535.333,113.833 536,114.5C 539.783,113.883 542.45,115.549 544,119.5C 544.414,119.043 544.914,118.709 545.5,118.5C 546.62,119.833 547.953,120.333 549.5,120C 547.977,117.566 546.977,114.899 546.5,112C 547.793,111.51 549.127,111.343 550.5,111.5C 551.149,113.477 551.149,115.31 550.5,117C 552.724,118.726 554.391,120.892 555.5,123.5C 556.167,123.167 556.833,122.833 557.5,122.5C 558.452,124.045 558.785,125.712 558.5,127.5C 555.276,127.797 552.276,127.13 549.5,125.5C 548.808,126.025 548.308,126.692 548,127.5C 547.077,126.241 546.243,124.908 545.5,123.5C 544.386,124.723 544.219,126.056 545,127.5C 549.948,128.175 554.781,129.175 559.5,130.5C 559.657,131.873 559.49,133.207 559,134.5C 558.261,133.426 557.261,132.759 556,132.5C 554.341,133.954 554.674,135.287 557,136.5C 558.825,135.429 559.992,136.096 560.5,138.5C 558.599,139.231 556.599,139.231 554.5,138.5C 554.178,140.722 554.845,142.556 556.5,144C 554.744,144.202 553.078,144.702 551.5,145.5C 552.325,146.386 553.325,146.719 554.5,146.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#2f2f32\",d:\"M 488.5,153.5 C 483.566,152.868 478.9,151.368 474.5,149C 473.862,147.293 473.862,145.46 474.5,143.5C 476.201,141.269 477.534,138.769 478.5,136C 480.167,135.333 481.833,135.333 483.5,136C 486.756,137.474 490.089,138.64 493.5,139.5C 492.23,144.312 490.563,148.978 488.5,153.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bd9789\",d:\"M 168.5,109.5 C 169.551,112.855 170.551,116.355 171.5,120C 172.384,121.098 173.384,121.598 174.5,121.5C 174.316,125.512 175.649,129.179 178.5,132.5C 177.833,132.833 177.167,133.167 176.5,133.5C 177.861,135.85 179.194,138.184 180.5,140.5C 181.167,142.167 181.833,143.833 182.5,145.5C 181.987,147.29 181.487,148.956 181,150.5C 182.809,150.989 184.643,151.323 186.5,151.5C 185.352,153.149 184.019,154.649 182.5,156C 183.956,156.423 184.456,157.256 184,158.5C 181.551,160.613 179.051,160.446 176.5,158C 176.957,157.586 177.291,157.086 177.5,156.5C 176.585,155.672 175.919,154.672 175.5,153.5C 177.432,147.803 176.599,146.803 173,150.5C 172.549,148.071 171.715,147.904 170.5,150C 170.694,151.43 170.694,152.93 170.5,154.5C 168.435,153.143 166.435,151.81 164.5,150.5C 163.185,149.524 161.852,148.524 160.5,147.5C 159.614,148.325 159.281,149.325 159.5,150.5C 156.413,145.847 153.413,141.014 150.5,136C 154.633,136.094 158.299,135.26 161.5,133.5C 162.809,131.429 163.475,128.929 163.5,126C 163.021,121.154 162.854,116.32 163,111.5C 163.949,113.093 165.115,114.426 166.5,115.5C 167.363,116.463 168.03,116.463 168.5,115.5C 166.265,110.966 164.765,106.3 164,101.5C 165.237,104.448 166.737,107.115 168.5,109.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dbd9d5\",d:\"M 519.5,118.5 C 519.821,120.048 520.821,120.715 522.5,120.5C 521.094,128.78 518.094,136.446 513.5,143.5C 512.239,147.067 511.405,150.734 511,154.5C 503.842,168.479 497.009,182.479 490.5,196.5C 489.833,196.5 489.5,196.167 489.5,195.5C 493.446,185.273 497.112,174.94 500.5,164.5C 506.833,149.167 513.167,133.833 519.5,118.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ccbdb4\",d:\"M 189.5,135.5 C 188.828,136.267 187.995,136.934 187,137.5C 186.128,140.972 186.961,143.972 189.5,146.5C 190.891,145.355 192.224,145.355 193.5,146.5C 192.833,146.833 192.167,147.167 191.5,147.5C 192.687,149.901 194.021,152.235 195.5,154.5C 194.726,157.538 194.726,160.371 195.5,163C 196.448,163.483 197.448,163.649 198.5,163.5C 198.865,166.079 198.865,168.412 198.5,170.5C 194.176,165.377 191.009,159.71 189,153.5C 189.667,154.167 190.333,154.833 191,155.5C 191.651,153.765 191.485,152.098 190.5,150.5C 188.102,149.102 186.435,147.102 185.5,144.5C 184.787,146.435 183.787,146.768 182.5,145.5C 181.833,143.833 181.167,142.167 180.5,140.5C 183.021,137.981 186.021,136.314 189.5,135.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bfbfb7\",d:\"M 371.5,175.5 C 372.404,176.209 372.737,177.209 372.5,178.5C 373.5,178.5 374.5,178.5 375.5,178.5C 375.185,180.226 375.019,181.893 375,183.5C 377.502,181.23 379.002,182.063 379.5,186C 378.352,187.726 377.185,187.559 376,185.5C 374.505,187.11 374.339,188.776 375.5,190.5C 373.577,191.308 371.577,191.808 369.5,192C 371.901,192.805 371.734,193.638 369,194.5C 368.167,193.5 367.333,192.5 366.5,191.5C 365.228,192.046 363.894,192.379 362.5,192.5C 359.563,191.53 356.563,190.863 353.5,190.5C 350.589,188.876 347.589,187.543 344.5,186.5C 345.469,185.691 346.302,184.691 347,183.5C 347.604,185.686 348.77,185.852 350.5,184C 351.102,181.964 352.102,180.13 353.5,178.5C 352.253,176.677 351.586,174.677 351.5,172.5C 352.552,172.649 353.552,172.483 354.5,172C 352.924,171.56 351.59,170.727 350.5,169.5C 349.5,170.167 348.5,170.833 347.5,171.5C 346.77,170.066 345.77,168.9 344.5,168C 345.731,166.817 345.731,165.651 344.5,164.5C 342.547,166.73 340.714,169.063 339,171.5C 338.471,169.415 338.971,167.582 340.5,166C 337.819,163.443 338.485,162.276 342.5,162.5C 342.281,161.325 342.614,160.325 343.5,159.5C 345.111,160.32 345.778,161.654 345.5,163.5C 346.5,163.5 347.5,163.5 348.5,163.5C 348.67,162.178 348.337,161.011 347.5,160C 353.03,157.741 352.696,156.574 346.5,156.5C 346.649,157.552 346.483,158.552 346,159.5C 344.301,158.594 342.467,158.261 340.5,158.5C 340.657,157.127 340.49,155.793 340,154.5C 336.693,150.551 337.693,149.551 343,151.5C 343.749,150.365 343.583,149.365 342.5,148.5C 340.007,149.964 337.674,149.797 335.5,148C 336.649,146.256 337.983,146.089 339.5,147.5C 342.451,144.838 342.951,141.838 341,138.5C 338.708,139.601 337.208,138.768 336.5,136C 337.128,133.061 337.795,130.228 338.5,127.5C 340.571,127.502 342.738,127.169 345,126.5C 351.085,127.312 357.252,127.812 363.5,128C 361.866,128.494 360.199,128.66 358.5,128.5C 358.785,130.288 358.452,131.955 357.5,133.5C 354.598,131.197 353.764,132.197 355,136.5C 355.718,135.549 356.551,135.383 357.5,136C 361.815,138.169 362.148,140.503 358.5,143C 361.482,143.498 364.482,143.665 367.5,143.5C 366.949,148.687 366.949,154.02 367.5,159.5C 364.861,159.429 362.694,158.429 361,156.5C 359.829,157.34 358.662,158.173 357.5,159C 358.833,162 358.833,165 357.5,168C 358.505,169.507 359.838,170.673 361.5,171.5C 359.96,172.532 359.46,173.865 360,175.5C 363.71,175.177 367.543,175.177 371.5,175.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d0cbc5\",d:\"M 540.5,133.5 C 542.411,133.574 543.578,134.574 544,136.5C 544.656,140.852 545.156,145.519 545.5,150.5C 547.597,151.353 549.597,151.353 551.5,150.5C 553.468,149.9 554.468,148.567 554.5,146.5C 556.75,146.181 558.75,146.681 560.5,148C 559.552,148.483 558.552,148.649 557.5,148.5C 558.101,151.549 558.601,154.549 559,157.5C 557.333,156.167 555.667,156.167 554,157.5C 553.355,158.646 552.522,159.646 551.5,160.5C 553.015,161.591 553.848,162.924 554,164.5C 553.586,164.043 553.086,163.709 552.5,163.5C 550.73,164.82 550.397,166.32 551.5,168C 549.896,169.237 548.229,170.403 546.5,171.5C 550.277,173.337 550.277,175.004 546.5,176.5C 547.563,179.085 548.897,181.418 550.5,183.5C 552.003,188.431 551.169,188.764 548,184.5C 547.667,185.833 547.333,187.167 547,188.5C 546.282,187.549 545.449,187.383 544.5,188C 545.5,189 546.5,190 547.5,191C 544.833,191.667 544.833,192.333 547.5,193C 545.954,194.44 545.121,196.273 545,198.5C 543.644,197.62 542.144,197.286 540.5,197.5C 540.666,201.846 540.499,206.179 540,210.5C 538.513,211.253 538.346,212.086 539.5,213C 538.263,213.232 537.263,213.732 536.5,214.5C 536.672,215.492 536.338,216.158 535.5,216.5C 534.504,216.414 533.671,216.748 533,217.5C 531.441,219.217 530.608,221.217 530.5,223.5C 527.074,223.65 526.741,222.484 529.5,220C 529.272,219.601 528.938,219.435 528.5,219.5C 529.058,218.21 530.058,217.377 531.5,217C 531.229,214.762 530.895,212.262 530.5,209.5C 530.787,207.514 531.453,205.68 532.5,204C 531.167,201.667 529.833,199.333 528.5,197C 528.667,196.5 528.833,196 529,195.5C 530.05,198.24 531.883,199.74 534.5,200C 532.306,197.305 530.306,194.472 528.5,191.5C 529.5,190.833 530.5,190.167 531.5,189.5C 529.995,188.158 529.328,186.492 529.5,184.5C 530.833,184.5 532.167,184.5 533.5,184.5C 533.5,182.5 533.5,180.5 533.5,178.5C 538.366,178.521 538.366,177.521 533.5,175.5C 534.52,174.046 535.687,173.713 537,174.5C 538.146,168.19 540.48,167.857 544,173.5C 543.558,171.124 542.391,168.957 540.5,167C 540.645,166.228 540.978,165.561 541.5,165C 540.196,164.196 539.529,163.029 539.5,161.5C 540.39,160.045 540.39,158.711 539.5,157.5C 539.833,157.167 540.167,156.833 540.5,156.5C 542.714,158.924 543.714,158.257 543.5,154.5C 542.5,154.5 541.5,154.5 540.5,154.5C 540.84,151.856 540.173,149.523 538.5,147.5C 539.325,146.614 540.325,146.281 541.5,146.5C 541.712,151.238 542.712,151.905 544.5,148.5C 543.807,144.782 542.307,141.448 540,138.5C 539.36,136.735 539.527,135.068 540.5,133.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f5f5f0\",d:\"M 433.5,134.5 C 435.691,135.291 437.691,135.291 439.5,134.5C 439.833,134.5 440.167,134.5 440.5,134.5C 440.937,136.074 441.937,137.241 443.5,138C 447.423,139.463 451.423,140.63 455.5,141.5C 456.167,141.833 456.833,142.167 457.5,142.5C 461.323,143.989 464.99,145.656 468.5,147.5C 466.99,148.728 465.49,148.728 464,147.5C 463.667,148.167 463.333,148.833 463,149.5C 460.931,148.736 458.764,148.236 456.5,148C 459.742,147.717 460.076,146.883 457.5,145.5C 456.28,145.887 455.613,146.72 455.5,148C 456.424,149.15 456.424,150.15 455.5,151C 456.833,151.667 458.167,151.667 459.5,151C 458.112,150.111 458.278,149.611 460,149.5C 461.795,150.295 463.295,151.462 464.5,153C 463.916,157.501 463.249,162.001 462.5,166.5C 459.869,168.005 460.203,168.671 463.5,168.5C 463.483,170.565 463.15,172.565 462.5,174.5C 459.162,172.335 456.496,169.502 454.5,166C 453.5,165.333 452.5,165.333 451.5,166C 441.14,175.027 431.473,184.694 422.5,195C 421.906,195.464 421.239,195.631 420.5,195.5C 418.857,195.52 417.524,194.853 416.5,193.5C 415.516,190.572 415.183,187.572 415.5,184.5C 422.38,185.48 425.047,182.48 423.5,175.5C 425.352,174.482 427.019,173.149 428.5,171.5C 430.167,172.5 431.5,173.833 432.5,175.5C 435.894,173.27 436.228,170.77 433.5,168C 435.179,167.605 436.845,167.772 438.5,168.5C 440.814,167.877 440.481,167.544 437.5,167.5C 437.33,166.178 437.663,165.011 438.5,164C 436.655,163.813 434.989,162.98 433.5,161.5C 434.729,160.719 436.062,160.219 437.5,160C 435.744,159.798 434.078,159.298 432.5,158.5C 433.485,156.902 433.651,155.235 433,153.5C 432.333,150.833 431.667,150.833 431,153.5C 430.362,152.391 429.862,151.225 429.5,150C 432.428,146.297 432.095,142.464 428.5,138.5C 429.605,136.389 431.271,135.055 433.5,134.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#faf9f5\",d:\"M 534.5,91.5 C 532.666,101.493 531.166,111.493 530,121.5C 532.039,123.147 533.873,124.98 535.5,127C 533.865,127.54 532.532,127.04 531.5,125.5C 529.618,126.093 527.785,126.76 526,127.5C 520.914,137.945 516.747,148.611 513.5,159.5C 508.074,169.427 503.407,179.761 499.5,190.5C 495.585,198.284 493.085,206.617 492,215.5C 489.027,222.147 484.86,227.98 479.5,233C 477.055,233.91 475.722,233.076 475.5,230.5C 485.367,221.423 490.367,210.089 490.5,196.5C 497.009,182.479 503.842,168.479 511,154.5C 511.405,150.734 512.239,147.067 513.5,143.5C 518.094,136.446 521.094,128.78 522.5,120.5C 520.821,120.715 519.821,120.048 519.5,118.5C 520.11,117.609 520.443,116.609 520.5,115.5C 521.268,116.263 521.768,117.263 522,118.5C 523.205,117.929 524.372,117.262 525.5,116.5C 527.229,109.572 528.729,102.572 530,95.5C 532.092,93.6541 533.426,91.3208 534,88.5C 534.483,89.448 534.649,90.448 534.5,91.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#75726b\",d:\"M 219.5,146.5 C 225.625,149.227 231.959,151.394 238.5,153C 241.26,154.179 243.26,156.012 244.5,158.5C 238.921,157.275 233.587,155.442 228.5,153C 225.079,151.301 222.079,149.135 219.5,146.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#fcfcfa\",d:\"M 468.5,147.5 C 468.833,147.5 469.167,147.5 469.5,147.5C 469.389,148.117 469.056,148.617 468.5,149C 470.991,149.626 470.991,150.459 468.5,151.5C 471.229,154.864 474.229,155.197 477.5,152.5C 478.59,153.727 479.924,154.56 481.5,155C 480.833,155.333 480.167,155.667 479.5,156C 482.063,156.918 484.23,156.418 486,154.5C 488.564,158.168 490.897,158.168 493,154.5C 495.167,156 497,157.833 498.5,160C 496.167,161.243 495.5,162.909 496.5,165C 495.773,166.399 495.273,167.899 495,169.5C 494.25,170.126 493.416,170.626 492.5,171C 493.571,171.852 494.571,172.685 495.5,173.5C 494.367,177.567 493.033,181.567 491.5,185.5C 490.127,185.343 488.793,185.51 487.5,186C 488.38,187.356 488.714,188.856 488.5,190.5C 485.791,191.191 483.457,191.857 481.5,192.5C 477.167,188.5 472.833,184.5 468.5,180.5C 466.861,178.194 464.861,176.194 462.5,174.5C 463.15,172.565 463.483,170.565 463.5,168.5C 460.203,168.671 459.869,168.005 462.5,166.5C 463.249,162.001 463.916,157.501 464.5,153C 463.295,151.462 461.795,150.295 460,149.5C 458.278,149.611 458.112,150.111 459.5,151C 458.167,151.667 456.833,151.667 455.5,151C 456.424,150.15 456.424,149.15 455.5,148C 455.613,146.72 456.28,145.887 457.5,145.5C 460.076,146.883 459.742,147.717 456.5,148C 458.764,148.236 460.931,148.736 463,149.5C 463.333,148.833 463.667,148.167 464,147.5C 465.49,148.728 466.99,148.728 468.5,147.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#583727\",d:\"M 20.5,161.5 C 20.0825,160.778 19.4158,160.278 18.5,160C 18.8333,159.667 19.1667,159.333 19.5,159C 15.6137,158.421 15.6137,157.588 19.5,156.5C 20.5,157.833 21.5,159.167 22.5,160.5C 22.0431,161.298 21.3764,161.631 20.5,161.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#5a4534\",d:\"M -0.5,135.5 C 0.854523,137.521 2.52119,139.188 4.5,140.5C 3.32148,142.507 3.82148,142.84 6,141.5C 6.35343,142.672 6.18676,143.838 5.5,145C 6.7131,146.63 7.54643,148.464 8,150.5C 10.3589,149.28 11.8589,147.947 12.5,146.5C 14.7067,146.881 16.04,148.214 16.5,150.5C 14.2169,150.099 11.8835,150.599 9.5,152C 12.7423,152.283 13.0756,153.117 10.5,154.5C 11.5214,158.023 13.8548,159.856 17.5,160C 15.7295,160.535 15.3961,161.369 16.5,162.5C 17.7362,161.754 19.0695,161.421 20.5,161.5C 19.2347,162.479 17.9014,163.479 16.5,164.5C 17.4672,166.63 18.6338,168.63 20,170.5C 22.2811,169.504 24.1144,168.17 25.5,166.5C 26.4147,167.328 27.0814,168.328 27.5,169.5C 25.5,170.167 23.5,170.833 21.5,171.5C 23.435,172.213 23.7683,173.213 22.5,174.5C 25.4791,191.457 30.4791,207.79 37.5,223.5C 37.44,224.043 37.1067,224.376 36.5,224.5C 32.7083,222.25 31.0417,218.917 31.5,214.5C 26.358,212.942 25.358,209.942 28.5,205.5C 25.8477,204.99 23.8477,203.657 22.5,201.5C 29.0734,200.362 29.0734,199.528 22.5,199C 23.6341,197.984 23.3008,197.317 21.5,197C 22.1667,196.333 22.8333,195.667 23.5,195C 18.3698,195.695 15.3698,193.529 14.5,188.5C 16.1079,185.574 15.1079,184.074 11.5,184C 10.9152,182.698 10.2485,181.531 9.5,180.5C 8.72487,178.612 8.72487,176.612 9.5,174.5C 6.70808,174.548 4.87474,173.215 4,170.5C 3.50649,168.866 3.33982,167.199 3.5,165.5C 2.04125,165.567 0.707917,165.234 -0.5,164.5C -0.5,154.833 -0.5,145.167 -0.5,135.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dfdfd8\",d:\"M 155.5,170.5 C 158.381,181.524 159.214,192.857 158,204.5C 157.363,207.107 156.196,209.44 154.5,211.5C 156.38,212.714 156.713,214.048 155.5,215.5C 155.565,215.062 155.399,214.728 155,214.5C 147.716,222.262 139.883,228.262 131.5,232.5C 125.673,233.522 119.673,234.355 113.5,235C 116.146,235.497 118.813,235.664 121.5,235.5C 115.101,236.854 108.768,236.521 102.5,234.5C 104.527,234.662 106.527,234.495 108.5,234C 103.534,233.425 98.8673,232.258 94.5,230.5C 97.4869,230.002 100.487,229.502 103.5,229C 102.5,228.667 101.5,228.333 100.5,228C 101.78,226.142 104.114,224.975 107.5,224.5C 109.262,221.706 110.928,218.872 112.5,216C 113.793,215.51 115.127,215.343 116.5,215.5C 116.5,214.5 116.5,213.5 116.5,212.5C 118.5,211.833 120.5,211.167 122.5,210.5C 122.974,206.719 124.641,203.552 127.5,201C 125.632,200.996 123.798,201.496 122,202.5C 119.882,201.804 117.716,201.637 115.5,202C 117.595,201.444 117.762,200.944 116,200.5C 115.098,200.743 114.265,201.077 113.5,201.5C 118.817,196.017 124.317,190.684 130,185.5C 131,187.833 132,190.167 133,192.5C 133.667,191.833 134.333,191.167 135,190.5C 135.833,185.5 136.667,180.5 137.5,175.5C 138.325,179.122 138.825,182.789 139,186.5C 139.822,184.212 140.489,181.878 141,179.5C 141.684,183.093 143.184,183.427 145.5,180.5C 144.509,179.335 143.509,178.168 142.5,177C 143.615,175.607 144.115,174.107 144,172.5C 140.908,170.082 137.408,168.582 133.5,168C 132.207,165.948 131.207,163.781 130.5,161.5C 131.467,160.194 132.801,159.527 134.5,159.5C 134.343,158.127 134.51,156.793 135,155.5C 136.559,157.217 137.392,159.217 137.5,161.5C 138.873,161.343 140.207,161.51 141.5,162C 143.226,164.341 144.726,166.841 146,169.5C 149.269,171.136 151.936,173.469 154,176.5C 155.128,174.655 155.628,172.655 155.5,170.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#28231f\",d:\"M 213.5,138.5 C 220.221,143.867 227.888,147.533 236.5,149.5C 242.557,152.41 248.89,154.743 255.5,156.5C 262.659,159.797 269.992,162.797 277.5,165.5C 290.231,171.079 303.231,176.079 316.5,180.5C 317.749,182.136 319.416,183.303 321.5,184C 320.906,184.464 320.239,184.631 319.5,184.5C 316.574,183.302 313.574,182.302 310.5,181.5C 293.94,175.066 277.273,168.566 260.5,162C 255.89,160.51 251.223,159.01 246.5,157.5C 245.817,157.863 245.15,158.196 244.5,158.5C 243.26,156.012 241.26,154.179 238.5,153C 231.959,151.394 225.625,149.227 219.5,146.5C 216.385,144.712 214.385,142.046 213.5,138.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#95938e\",d:\"M 415.5,163.5 C 413.896,169.311 411.896,174.978 409.5,180.5C 409.068,181.71 408.401,182.71 407.5,183.5C 409.597,176.53 412.263,169.864 415.5,163.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7f786e\",d:\"M 310.5,181.5 C 300.86,181.257 291.527,179.424 282.5,176C 273.012,171.947 263.345,168.28 253.5,165C 250.433,162.812 247.433,160.645 244.5,158.5C 245.15,158.196 245.817,157.863 246.5,157.5C 251.223,159.01 255.89,160.51 260.5,162C 277.273,168.566 293.94,175.066 310.5,181.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c7c5be\",d:\"M 382.5,152.5 C 383.043,152.56 383.376,152.893 383.5,153.5C 382.05,154.85 381.383,156.516 381.5,158.5C 383.144,158.714 384.644,158.38 386,157.5C 387.6,158.866 389.433,159.866 391.5,160.5C 390.675,161.386 389.675,161.719 388.5,161.5C 388.579,162.93 388.246,164.264 387.5,165.5C 388.729,166.281 390.062,166.781 391.5,167C 389.089,168.726 388.422,170.893 389.5,173.5C 390.298,171.922 390.798,170.256 391,168.5C 391.5,170.5 392,172.5 392.5,174.5C 390.56,177.196 391.227,178.529 394.5,178.5C 394.351,177.448 394.517,176.448 395,175.5C 396.874,175.19 398.707,175.69 400.5,177C 399.421,177.956 398.255,178.789 397,179.5C 396.377,183.932 395.377,184.265 394,180.5C 391.252,181.686 388.419,182.686 385.5,183.5C 387.22,183.746 389.22,183.746 391.5,183.5C 391.725,187.056 390.892,187.39 389,184.5C 387.522,185.978 386.022,187.478 384.5,189C 385.167,189.667 385.833,190.333 386.5,191C 384.469,191.632 382.802,192.799 381.5,194.5C 381.846,195.696 382.346,195.696 383,194.5C 383.495,196.473 383.662,198.473 383.5,200.5C 386.368,201.92 389.868,202.92 394,203.5C 394.915,202.672 395.581,201.672 396,200.5C 396.388,201.428 397.055,202.095 398,202.5C 400.383,200.349 401.383,197.683 401,194.5C 398.956,193.228 397.122,193.561 395.5,195.5C 394.585,194.672 393.919,193.672 393.5,192.5C 396.506,191.252 399.506,191.252 402.5,192.5C 403.988,189.338 405.654,186.338 407.5,183.5C 405.278,191.044 402.444,198.377 399,205.5C 398.107,206.081 397.107,206.415 396,206.5C 381.708,201.261 367.541,195.928 353.5,190.5C 356.563,190.863 359.563,191.53 362.5,192.5C 363.894,192.379 365.228,192.046 366.5,191.5C 367.333,192.5 368.167,193.5 369,194.5C 371.734,193.638 371.901,192.805 369.5,192C 371.577,191.808 373.577,191.308 375.5,190.5C 374.339,188.776 374.505,187.11 376,185.5C 377.185,187.559 378.352,187.726 379.5,186C 379.002,182.063 377.502,181.23 375,183.5C 375.019,181.893 375.185,180.226 375.5,178.5C 374.5,178.5 373.5,178.5 372.5,178.5C 372.737,177.209 372.404,176.209 371.5,175.5C 371.805,170.238 371.471,165.072 370.5,160C 373.633,159.089 376.633,158.756 379.5,159C 378.426,158.261 377.759,157.261 377.5,156C 378.921,154.377 380.588,153.21 382.5,152.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8f8270\",d:\"M -0.5,164.5 C 0.707917,165.234 2.04125,165.567 3.5,165.5C 3.33982,167.199 3.50649,168.866 4,170.5C 4.87474,173.215 6.70808,174.548 9.5,174.5C 8.72487,176.612 8.72487,178.612 9.5,180.5C 8.77033,182.045 7.437,182.878 5.5,183C 8.44709,183.112 9.78042,184.612 9.5,187.5C 8.12656,187.657 6.79323,187.49 5.5,187C 6.20517,185.443 5.5385,184.277 3.5,183.5C 1.8405,184.172 0.507165,185.172 -0.5,186.5C -0.5,179.167 -0.5,171.833 -0.5,164.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9a7665\",d:\"M 47.5,166.5 C 50.734,167.006 51.4007,168.672 49.5,171.5C 46.7391,177.51 44.5724,183.843 43,190.5C 42.4387,191.022 41.772,191.355 41,191.5C 39.4352,190.048 38.1018,188.381 37,186.5C 34.176,187.833 34.3426,189.333 37.5,191C 36.944,191.383 36.6107,191.883 36.5,192.5C 35.1779,192.33 34.0113,192.663 33,193.5C 32.6667,192.5 32.3333,191.5 32,190.5C 29.8707,191.863 29.3707,191.529 30.5,189.5C 29.4995,187.187 28.1662,185.187 26.5,183.5C 25.8902,182.609 25.5569,181.609 25.5,180.5C 27.7225,179.886 29.3892,178.552 30.5,176.5C 32.1487,177.648 33.6487,178.981 35,180.5C 35.5831,178.998 36.4164,177.665 37.5,176.5C 42.6267,174.941 45.96,171.608 47.5,166.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d4cec3\",d:\"M 206.5,150.5 C 209.402,151.784 212.402,152.784 215.5,153.5C 218.436,157.957 220.102,157.957 220.5,153.5C 228.373,157.922 236.706,161.422 245.5,164C 247.431,166.304 249.764,168.138 252.5,169.5C 258.017,171.642 263.684,173.476 269.5,175C 271.973,176.561 273.973,178.561 275.5,181C 269.816,182.157 265.649,179.99 263,174.5C 257.271,174.583 251.438,174.75 245.5,175C 242.421,176.248 239.754,178.081 237.5,180.5C 236.177,178.318 234.51,177.651 232.5,178.5C 234.167,179.5 235.5,180.833 236.5,182.5C 235.675,184.801 235.008,187.135 234.5,189.5C 233.887,192.009 233.22,194.509 232.5,197C 233.428,197.388 234.095,198.055 234.5,199C 235.256,201.856 236.089,204.689 237,207.5C 237.977,208.774 238.811,208.774 239.5,207.5C 240.833,208.167 241.833,209.167 242.5,210.5C 242.511,212.017 243.177,213.184 244.5,214C 249.797,219.131 256.131,221.131 263.5,220C 262.359,217.776 263.026,216.276 265.5,215.5C 266.87,217.25 267.87,219.25 268.5,221.5C 267.448,221.351 266.448,221.517 265.5,222C 266.496,224.316 267.496,226.65 268.5,229C 267.528,231.111 266.695,233.278 266,235.5C 265.221,232.903 264.721,232.903 264.5,235.5C 260.512,232.071 256.846,228.238 253.5,224C 249.506,221.312 245.173,219.645 240.5,219C 239.315,217.647 237.981,216.48 236.5,215.5C 235.702,215.957 235.369,216.624 235.5,217.5C 234.453,213.385 232.786,209.385 230.5,205.5C 230.846,204.304 231.346,204.304 232,205.5C 231.7,201.912 230.033,198.912 227,196.5C 223.143,179.732 216.309,164.398 206.5,150.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d4c6cc\",d:\"M 468.5,180.5 C 472.833,184.5 477.167,188.5 481.5,192.5C 482.739,193.212 483.239,194.212 483,195.5C 474.578,204.09 466.078,212.424 457.5,220.5C 457.082,219.778 456.416,219.278 455.5,219C 458.027,216.473 460.527,213.973 463,211.5C 463.202,209.744 463.702,208.078 464.5,206.5C 465.324,208.748 466.324,208.914 467.5,207C 464.756,203.288 465.256,202.788 469,205.5C 470.914,204.324 470.748,203.324 468.5,202.5C 469.376,201.749 470.376,201.249 471.5,201C 470.24,199.887 469.073,199.72 468,200.5C 467.383,199.551 467.549,198.718 468.5,198C 465.384,196.551 462.884,194.384 461,191.5C 459.647,192.685 458.48,194.019 457.5,195.5C 458.82,197.27 460.32,197.603 462,196.5C 462.49,197.793 462.657,199.127 462.5,200.5C 458.764,200.66 458.764,201.493 462.5,203C 458.666,205.266 458.999,205.933 463.5,205C 462,206.5 460.5,208 459,209.5C 458.316,210.784 458.483,211.951 459.5,213C 458.451,213.492 457.451,213.326 456.5,212.5C 454.095,207.457 451.428,207.29 448.5,212C 448.616,213.268 448.949,214.602 449.5,216C 448.269,217.967 447.269,217.801 446.5,215.5C 447.803,213.411 447.303,211.744 445,210.5C 445.077,211.738 444.911,212.738 444.5,213.5C 440.099,211.213 436.432,208.046 433.5,204C 432.167,203.667 430.833,203.333 429.5,203C 429.833,202.667 430.167,202.333 430.5,202C 427.667,200.167 427.833,198.667 431,197.5C 431.333,198.833 431.667,200.167 432,201.5C 435.529,201.11 438.529,201.11 441,201.5C 442.167,199.667 443.667,198.167 445.5,197C 444.04,195.418 442.373,194.085 440.5,193C 442.344,190.657 444.344,188.49 446.5,186.5C 446.023,185.522 445.357,184.689 444.5,184C 445.449,183.383 446.282,183.549 447,184.5C 447.684,182.641 448.684,180.974 450,179.5C 451.333,182.167 452.667,182.167 454,179.5C 452.834,182.184 453.667,184.184 456.5,185.5C 459.853,183.024 460.186,183.524 457.5,187C 458.579,187.956 459.745,188.789 461,189.5C 464.459,187.215 466.959,184.215 468.5,180.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c8a99c\",d:\"M 198.5,170.5 C 199.11,172.434 200.11,174.101 201.5,175.5C 201.351,176.552 201.517,177.552 202,178.5C 209.769,191.043 217.269,203.71 224.5,216.5C 224.193,212.355 222.527,208.522 219.5,205C 221.218,204.654 222.885,204.154 224.5,203.5C 224.833,203.833 225.167,204.167 225.5,204.5C 224.167,206.833 224.167,209.167 225.5,211.5C 226.441,213.772 227.774,215.772 229.5,217.5C 229,218.5 228.5,219.5 228,220.5C 227.346,219.304 226.846,219.304 226.5,220.5C 227.309,222.071 227.643,223.738 227.5,225.5C 227.5,226.167 227.167,226.5 226.5,226.5C 225.833,224.833 225.167,223.167 224.5,221.5C 225.463,220.637 225.463,219.97 224.5,219.5C 218.938,222.78 213.271,225.78 207.5,228.5C 205.758,225.393 204.425,222.059 203.5,218.5C 203.577,214.785 203.244,211.119 202.5,207.5C 200.833,207.5 199.167,207.5 197.5,207.5C 197.822,205.278 197.155,203.444 195.5,202C 195.833,201.667 196.167,201.333 196.5,201C 192.576,199.68 190.743,196.846 191,192.5C 190.333,193.833 189.667,193.833 189,192.5C 189.487,187.758 187.82,184.092 184,181.5C 182.343,174.179 179.343,168.179 175,163.5C 174.667,164.167 174.333,164.833 174,165.5C 173.138,163.913 172.471,162.246 172,160.5C 171.329,159.748 170.496,159.414 169.5,159.5C 166.55,157.272 164.884,154.272 164.5,150.5C 166.435,151.81 168.435,153.143 170.5,154.5C 170.694,152.93 170.694,151.43 170.5,150C 171.715,147.904 172.549,148.071 173,150.5C 176.599,146.803 177.432,147.803 175.5,153.5C 175.919,154.672 176.585,155.672 177.5,156.5C 177.291,157.086 176.957,157.586 176.5,158C 179.051,160.446 181.551,160.613 184,158.5C 184.456,157.256 183.956,156.423 182.5,156C 184.019,154.649 185.352,153.149 186.5,151.5C 184.643,151.323 182.809,150.989 181,150.5C 181.487,148.956 181.987,147.29 182.5,145.5C 183.787,146.768 184.787,146.435 185.5,144.5C 186.435,147.102 188.102,149.102 190.5,150.5C 191.485,152.098 191.651,153.765 191,155.5C 190.333,154.833 189.667,154.167 189,153.5C 191.009,159.71 194.176,165.377 198.5,170.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f1efe9\",d:\"M 219.5,146.5 C 222.079,149.135 225.079,151.301 228.5,153C 233.587,155.442 238.921,157.275 244.5,158.5C 247.433,160.645 250.433,162.812 253.5,165C 263.345,168.28 273.012,171.947 282.5,176C 291.527,179.424 300.86,181.257 310.5,181.5C 313.574,182.302 316.574,183.302 319.5,184.5C 320.919,185.451 322.585,185.784 324.5,185.5C 340.495,193.062 356.828,200.062 373.5,206.5C 380.75,211.453 388.75,214.786 397.5,216.5C 400.977,217.323 404.644,217.823 408.5,218C 411.328,220.248 414.328,222.248 417.5,224C 423.137,225.461 428.804,226.794 434.5,228C 436.119,228.236 437.119,229.069 437.5,230.5C 437.167,231.167 436.833,231.833 436.5,232.5C 435.127,232.343 433.793,232.51 432.5,233C 434.014,234.439 434.347,235.939 433.5,237.5C 431.766,235.766 430.432,233.766 429.5,231.5C 426.917,230.521 424.251,229.854 421.5,229.5C 420.006,229.709 418.839,230.376 418,231.5C 417.888,228.553 416.388,227.22 413.5,227.5C 413.047,226.542 412.381,225.708 411.5,225C 407.742,223.271 403.909,221.771 400,220.5C 398.624,220.684 397.791,221.351 397.5,222.5C 397.167,222.5 396.833,222.5 396.5,222.5C 396.167,221.833 395.833,221.167 395.5,220.5C 388.369,219.396 382.036,217.063 376.5,213.5C 373.622,211.895 370.622,210.561 367.5,209.5C 364.877,207.735 361.877,207.068 358.5,207.5C 358.649,208.552 358.483,209.552 358,210.5C 356.757,208.167 355.091,207.5 353,208.5C 346.392,207.918 339.892,206.585 333.5,204.5C 332.558,204.608 331.725,204.941 331,205.5C 329.046,202.436 326.213,200.77 322.5,200.5C 320.099,199.461 317.765,198.127 315.5,196.5C 314.614,197.325 314.281,198.325 314.5,199.5C 313.5,198.833 312.5,198.167 311.5,197.5C 307.911,191.534 302.578,188.367 295.5,188C 296.333,189.5 297.5,190.667 299,191.5C 301.09,195.981 303.257,200.314 305.5,204.5C 303.033,205.218 300.2,205.551 297,205.5C 294.129,202.345 292.296,198.678 291.5,194.5C 288.391,192.364 286.391,189.364 285.5,185.5C 280.909,184.368 276.242,183.701 271.5,183.5C 271.461,188.817 272.295,193.484 274,197.5C 274.202,195.744 274.702,194.078 275.5,192.5C 276.185,194.781 276.351,197.114 276,199.5C 276.333,198.833 276.667,198.167 277,197.5C 277.232,198.737 277.732,199.737 278.5,200.5C 275.523,200.902 272.857,201.902 270.5,203.5C 262.794,202.83 255.128,201.83 247.5,200.5C 247.5,199.5 247.5,198.5 247.5,197.5C 251.119,198.244 254.785,198.577 258.5,198.5C 262.236,199.989 266.236,200.656 270.5,200.5C 270.153,194.697 269.153,189.03 267.5,183.5C 265.24,185.407 265.073,187.407 267,189.5C 267.667,192.167 267.667,194.833 267,197.5C 265.872,195.655 265.372,193.655 265.5,191.5C 263.409,191.682 261.409,191.348 259.5,190.5C 258.015,186.863 258.515,186.196 261,188.5C 260.851,184.984 259.017,182.484 255.5,181C 255.727,179.865 256.06,178.698 256.5,177.5C 258.331,178.929 260.331,179.429 262.5,179C 254.988,174.247 247.654,174.58 240.5,180C 239.333,182.5 238.167,185 237,187.5C 236.292,188.381 235.458,189.047 234.5,189.5C 235.008,187.135 235.675,184.801 236.5,182.5C 235.5,180.833 234.167,179.5 232.5,178.5C 234.51,177.651 236.177,178.318 237.5,180.5C 239.754,178.081 242.421,176.248 245.5,175C 251.438,174.75 257.271,174.583 263,174.5C 265.649,179.99 269.816,182.157 275.5,181C 273.973,178.561 271.973,176.561 269.5,175C 263.684,173.476 258.017,171.642 252.5,169.5C 249.764,168.138 247.431,166.304 245.5,164C 236.706,161.422 228.373,157.922 220.5,153.5C 218.548,152.215 216.882,150.549 215.5,148.5C 216.32,146.889 217.654,146.222 219.5,146.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8d8a84\",d:\"M 316.5,180.5 C 318.167,180.5 319.833,180.5 321.5,180.5C 333.193,184.898 344.86,189.398 356.5,194C 358.426,194.422 359.426,195.589 359.5,197.5C 347.773,193.81 336.107,189.81 324.5,185.5C 322.585,185.784 320.919,185.451 319.5,184.5C 320.239,184.631 320.906,184.464 321.5,184C 319.416,183.303 317.749,182.136 316.5,180.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ccbec5\",d:\"M 462.5,174.5 C 464.861,176.194 466.861,178.194 468.5,180.5C 466.959,184.215 464.459,187.215 461,189.5C 459.745,188.789 458.579,187.956 457.5,187C 460.186,183.524 459.853,183.024 456.5,185.5C 453.667,184.184 452.834,182.184 454,179.5C 452.667,182.167 451.333,182.167 450,179.5C 448.684,180.974 447.684,182.641 447,184.5C 446.282,183.549 445.449,183.383 444.5,184C 445.357,184.689 446.023,185.522 446.5,186.5C 444.344,188.49 442.344,190.657 440.5,193C 442.373,194.085 444.04,195.418 445.5,197C 443.667,198.167 442.167,199.667 441,201.5C 438.529,201.11 435.529,201.11 432,201.5C 431.667,200.167 431.333,198.833 431,197.5C 427.833,198.667 427.667,200.167 430.5,202C 430.167,202.333 429.833,202.667 429.5,203C 430.833,203.333 432.167,203.667 433.5,204C 436.432,208.046 440.099,211.213 444.5,213.5C 444.911,212.738 445.077,211.738 445,210.5C 447.303,211.744 447.803,213.411 446.5,215.5C 447.269,217.801 448.269,217.967 449.5,216C 448.949,214.602 448.616,213.268 448.5,212C 451.428,207.29 454.095,207.457 456.5,212.5C 457.451,213.326 458.451,213.492 459.5,213C 458.483,211.951 458.316,210.784 459,209.5C 460.5,208 462,206.5 463.5,205C 458.999,205.933 458.666,205.266 462.5,203C 458.764,201.493 458.764,200.66 462.5,200.5C 462.657,199.127 462.49,197.793 462,196.5C 460.32,197.603 458.82,197.27 457.5,195.5C 458.48,194.019 459.647,192.685 461,191.5C 462.884,194.384 465.384,196.551 468.5,198C 467.549,198.718 467.383,199.551 468,200.5C 469.073,199.72 470.24,199.887 471.5,201C 470.376,201.249 469.376,201.749 468.5,202.5C 470.748,203.324 470.914,204.324 469,205.5C 465.256,202.788 464.756,203.288 467.5,207C 466.324,208.914 465.324,208.748 464.5,206.5C 463.702,208.078 463.202,209.744 463,211.5C 460.527,213.973 458.027,216.473 455.5,219C 456.416,219.278 457.082,219.778 457.5,220.5C 455.548,222.452 453.548,224.452 451.5,226.5C 443.173,218.506 434.839,210.506 426.5,202.5C 423.974,200.582 421.974,198.249 420.5,195.5C 421.239,195.631 421.906,195.464 422.5,195C 431.473,184.694 441.14,175.027 451.5,166C 452.5,165.333 453.5,165.333 454.5,166C 456.496,169.502 459.162,172.335 462.5,174.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bdbcb2\",d:\"M 331.5,193.5 C 331.062,193.435 330.728,193.601 330.5,194C 332.464,195.451 333.797,197.284 334.5,199.5C 332.075,199.684 332.075,200.351 334.5,201.5C 333.998,202.521 333.332,202.688 332.5,202C 330.224,200.888 328.391,198.722 327,195.5C 327.195,197.126 327.195,198.793 327,200.5C 316.998,194.416 306.498,189.249 295.5,185C 300.558,184.339 305.558,184.672 310.5,186C 317.727,188.29 324.727,190.79 331.5,193.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#775748\",d:\"M 49.5,171.5 C 49.5,173.5 49.5,175.5 49.5,177.5C 48.1914,179.571 47.5248,182.071 47.5,185C 47.5252,187.755 47.8586,190.422 48.5,193C 46.1671,194.243 45.5004,195.909 46.5,198C 44.7928,198.195 43.1261,198.195 41.5,198C 43.3937,199.079 43.727,200.413 42.5,202C 44.1261,201.805 45.7928,201.805 47.5,202C 46.8333,202.667 46.1667,203.333 45.5,204C 46.825,203.852 47.9916,204.018 49,204.5C 49.4453,206.594 48.612,208.094 46.5,209C 46.8333,209.333 47.1667,209.667 47.5,210C 45.4708,210.681 43.4708,211.014 41.5,211C 41.8333,210.667 42.1667,210.333 42.5,210C 42.0037,208.004 41.0037,206.337 39.5,205C 39.8333,204.667 40.1667,204.333 40.5,204C 36.7279,203.389 36.7279,202.389 40.5,201C 38.7928,200.805 37.1261,200.805 35.5,201C 36.1081,198.816 35.4414,196.816 33.5,195C 34.5707,194.148 35.5707,193.315 36.5,192.5C 36.6107,191.883 36.944,191.383 37.5,191C 34.3426,189.333 34.176,187.833 37,186.5C 38.1018,188.381 39.4352,190.048 41,191.5C 41.772,191.355 42.4387,191.022 43,190.5C 44.5724,183.843 46.7391,177.51 49.5,171.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f0ebe5\",d:\"M 75.5,98.5 C 84.4107,104.084 89.744,112.084 91.5,122.5C 98.9466,124.352 106.613,125.019 114.5,124.5C 115.209,125.404 116.209,125.737 117.5,125.5C 118.492,125.672 119.158,125.338 119.5,124.5C 119.281,123.325 119.614,122.325 120.5,121.5C 120.45,122.848 120.783,124.348 121.5,126C 129.29,127.564 136.29,130.731 142.5,135.5C 143.391,136.11 144.391,136.443 145.5,136.5C 147.785,139.452 150.452,142.118 153.5,144.5C 157.586,149.665 160.92,155.332 163.5,161.5C 163.857,165.263 164.69,168.93 166,172.5C 166.667,178.833 166.667,185.167 166,191.5C 162.137,201.423 158.47,211.423 155,221.5C 152.599,224.738 149.765,227.405 146.5,229.5C 143.092,230.842 139.759,232.175 136.5,233.5C 135.209,233.263 134.209,233.596 133.5,234.5C 132.833,234.5 132.167,234.5 131.5,234.5C 128.214,235.207 124.881,235.54 121.5,235.5C 118.813,235.664 116.146,235.497 113.5,235C 119.673,234.355 125.673,233.522 131.5,232.5C 142.807,231.205 150.807,225.539 155.5,215.5C 156.713,214.048 156.38,212.714 154.5,211.5C 156.196,209.44 157.363,207.107 158,204.5C 159.214,192.857 158.381,181.524 155.5,170.5C 144.94,147.879 127.606,133.212 103.5,126.5C 102.479,127.002 102.312,127.668 103,128.5C 105.905,130.093 109.071,131.093 112.5,131.5C 121.459,139.778 127.459,149.778 130.5,161.5C 131.207,163.781 132.207,165.948 133.5,168C 137.408,168.582 140.908,170.082 144,172.5C 144.115,174.107 143.615,175.607 142.5,177C 143.509,178.168 144.509,179.335 145.5,180.5C 143.184,183.427 141.684,183.093 141,179.5C 140.489,181.878 139.822,184.212 139,186.5C 138.825,182.789 138.325,179.122 137.5,175.5C 136.667,180.5 135.833,185.5 135,190.5C 134.333,191.167 133.667,191.833 133,192.5C 132,190.167 131,187.833 130,185.5C 124.317,190.684 118.817,196.017 113.5,201.5C 107.628,203.809 101.628,204.475 95.5,203.5C 93.0301,203.346 91.0301,202.346 89.5,200.5C 91.6531,199.427 93.6531,199.427 95.5,200.5C 95.0618,200.435 94.7284,200.601 94.5,201C 99.9868,203.185 105.32,202.851 110.5,200C 106.507,199.83 102.507,199.996 98.5,200.5C 99.9488,198.836 101.949,198.002 104.5,198C 101.77,197.272 99.1029,197.438 96.5,198.5C 95.7025,198.043 95.3691,197.376 95.5,196.5C 100.179,196.666 104.845,196.499 109.5,196C 112.684,195.246 115.351,193.746 117.5,191.5C 119.563,189.551 120.896,187.218 121.5,184.5C 122.167,184.5 122.5,184.833 122.5,185.5C 122.393,187.379 122.893,187.712 124,186.5C 131.248,172.616 129.748,159.783 119.5,148C 118.668,147.312 118.002,147.479 117.5,148.5C 118.785,151.021 119.452,153.687 119.5,156.5C 119.664,159.187 119.497,161.854 119,164.5C 118.722,163.584 118.222,162.918 117.5,162.5C 117.833,161.833 118.167,161.167 118.5,160.5C 118.167,158.5 117.833,156.5 117.5,154.5C 116.805,151.72 115.805,149.053 114.5,146.5C 112.2,143.676 109.2,141.843 105.5,141C 100.796,140.352 96.1292,140.519 91.5,141.5C 91.8495,138.955 91.0162,136.955 89,135.5C 85.9081,138.422 82.4081,140.755 78.5,142.5C 77.4763,141.147 76.143,140.48 74.5,140.5C 74.1667,140.5 73.8333,140.5 73.5,140.5C 72.9352,135.45 70.2685,132.616 65.5,132C 60.6271,137.707 57.2938,144.207 55.5,151.5C 54.2699,155.253 53.2699,159.086 52.5,163C 52.8618,164.434 53.5285,165.601 54.5,166.5C 54.0618,166.435 53.7284,166.601 53.5,167C 54.4158,167.278 55.0825,167.778 55.5,168.5C 53.8762,168.36 52.7096,169.027 52,170.5C 50.1127,185.652 53.9461,198.985 63.5,210.5C 63.8588,212.371 64.8588,213.871 66.5,215C 69.681,217.092 72.681,219.425 75.5,222C 79.2198,223.86 82.8864,225.693 86.5,227.5C 87.209,228.404 88.209,228.737 89.5,228.5C 90.7804,229.931 92.4471,230.598 94.5,230.5C 98.8673,232.258 103.534,233.425 108.5,234C 106.527,234.495 104.527,234.662 102.5,234.5C 100.097,234.552 97.7638,234.219 95.5,233.5C 81.5306,229.407 69.6973,221.74 60,210.5C 53.0809,200.644 49.5809,189.644 49.5,177.5C 49.5,175.5 49.5,173.5 49.5,171.5C 51.4007,168.672 50.734,167.006 47.5,166.5C 38.6959,164.242 35.5293,158.576 38,149.5C 38.8947,153.21 39.8947,156.877 41,160.5C 43.7636,163.257 46.9303,164.257 50.5,163.5C 52.1167,150.468 57.1167,138.968 65.5,129C 63.2827,127.725 60.9494,126.725 58.5,126C 54.0462,125.729 49.7129,125.563 45.5,125.5C 46.0253,124.808 46.6919,124.308 47.5,124C 54.5502,122.621 61.0502,123.788 67,127.5C 73.1561,121.239 80.6561,118.739 89.5,120C 88.2857,117.649 87.4523,115.149 87,112.5C 82.9545,107.96 79.1212,103.293 75.5,98.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#511415\",d:\"M 117.5,191.5 C 115.351,193.746 112.684,195.246 109.5,196C 104.845,196.499 100.179,196.666 95.5,196.5C 94.0351,195.263 92.3684,194.263 90.5,193.5C 90.1667,192.833 89.8333,192.167 89.5,191.5C 95.1842,194.269 100.851,194.103 106.5,191C 104.685,190.243 103.019,189.41 101.5,188.5C 104.579,188.74 107.579,188.407 110.5,187.5C 111.192,188.025 111.692,188.692 112,189.5C 113.117,188.051 113.784,186.384 114,184.5C 115.955,183.547 117.622,182.213 119,180.5C 118.084,184.015 117.584,187.682 117.5,191.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8f877c\",d:\"M 67.5,178.5 C 68.4013,179.29 69.0679,180.29 69.5,181.5C 68.1986,182.64 67.0319,183.973 66,185.5C 65.6667,184.833 65.3333,184.167 65,183.5C 64.3162,184.784 64.4829,185.951 65.5,187C 62.8941,187.45 61.5608,188.95 61.5,191.5C 59.8333,191.5 58.1667,191.5 56.5,191.5C 56.0074,189.194 55.6741,186.861 55.5,184.5C 56.7564,184.904 57.9231,185.571 59,186.5C 59.1284,184.786 59.9618,183.119 61.5,181.5C 62.7481,180.96 63.9148,180.293 65,179.5C 65.3333,179.833 65.6667,180.167 66,180.5C 66.2784,179.584 66.7784,178.918 67.5,178.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#76140d\",d:\"M 90.5,179.5 C 93.1439,183.833 96.8106,186.833 101.5,188.5C 103.019,189.41 104.685,190.243 106.5,191C 100.851,194.103 95.1842,194.269 89.5,191.5C 87.5,191.5 86.5,190.5 86.5,188.5C 85.5531,186.266 84.8864,183.932 84.5,181.5C 85.4644,177.343 87.4644,176.676 90.5,179.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ada89e\",d:\"M 56.5,168.5 C 59.4021,169.578 62.4021,170.244 65.5,170.5C 65.5597,173.341 66.2264,176.007 67.5,178.5C 66.7784,178.918 66.2784,179.584 66,180.5C 65.6667,180.167 65.3333,179.833 65,179.5C 63.9148,180.293 62.7481,180.96 61.5,181.5C 59.9618,183.119 59.1284,184.786 59,186.5C 57.9231,185.571 56.7564,184.904 55.5,184.5C 55.2665,179.105 55.5998,173.772 56.5,168.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e5d3d1\",d:\"M 118.5,160.5 C 118.167,161.167 117.833,161.833 117.5,162.5C 118.222,162.918 118.722,163.584 119,164.5C 119.497,161.854 119.664,159.187 119.5,156.5C 120.338,156.842 120.672,157.508 120.5,158.5C 122.149,166.749 123.149,175.082 123.5,183.5C 123.672,184.492 123.338,185.158 122.5,185.5C 122.5,184.833 122.167,184.5 121.5,184.5C 121.529,178.79 121.029,173.123 120,167.5C 118.257,170.957 117.257,174.623 117,178.5C 114.01,185.245 108.843,188.245 101.5,187.5C 93.2617,183.354 90.0951,176.687 92,167.5C 93.0764,164.763 94.243,162.096 95.5,159.5C 101.326,153.264 107.993,152.097 115.5,156C 116.399,157.652 117.399,159.152 118.5,160.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#371515\",d:\"M 121.5,184.5 C 120.896,187.218 119.563,189.551 117.5,191.5C 117.584,187.682 118.084,184.015 119,180.5C 117.622,182.213 115.955,183.547 114,184.5C 113.784,186.384 113.117,188.051 112,189.5C 111.692,188.692 111.192,188.025 110.5,187.5C 107.579,188.407 104.579,188.74 101.5,188.5C 101.5,188.167 101.5,187.833 101.5,187.5C 108.843,188.245 114.01,185.245 117,178.5C 117.257,174.623 118.257,170.957 120,167.5C 121.029,173.123 121.529,178.79 121.5,184.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#551011\",d:\"M 102.5,185.5 C 99.1667,184.167 96.8333,181.833 95.5,178.5C 95.3924,174.753 95.8924,171.086 97,167.5C 99.1301,170.23 101.797,172.23 105,173.5C 104.05,176.303 104.884,178.636 107.5,180.5C 106.754,181.736 106.421,183.07 106.5,184.5C 104.901,184.232 103.568,184.566 102.5,185.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#631e14\",d:\"M 84.5,159.5 C 85.1667,159.5 85.8333,159.5 86.5,159.5C 88.4575,166.004 89.7908,172.671 90.5,179.5C 87.4644,176.676 85.4644,177.343 84.5,181.5C 84.8864,183.932 85.5531,186.266 86.5,188.5C 85.2794,187.972 84.1127,187.305 83,186.5C 82.4156,182.905 81.5823,179.405 80.5,176C 82.6565,175.922 84.6565,175.755 86.5,175.5C 83.9784,174.697 81.9784,173.364 80.5,171.5C 81.5,171.5 82.5,171.5 83.5,171.5C 83.8333,167.5 84.1667,163.5 84.5,159.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#45352c\",d:\"M 55.5,168.5 C 55.8333,168.5 56.1667,168.5 56.5,168.5C 55.5998,173.772 55.2665,179.105 55.5,184.5C 55.6741,186.861 56.0074,189.194 56.5,191.5C 58.7367,198.225 61.07,204.558 63.5,210.5C 53.9461,198.985 50.1127,185.652 52,170.5C 52.7096,169.027 53.8762,168.36 55.5,168.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f6f6f1\",d:\"M 91.5,141.5 C 90.5145,145.443 89.8478,149.443 89.5,153.5C 88.8091,148.606 88.4758,143.606 88.5,138.5C 81.8613,143.08 79.8613,149.08 82.5,156.5C 82.1667,157.167 81.8333,157.833 81.5,158.5C 80.6667,157.5 79.8333,156.5 79,155.5C 77.4295,161.628 77.5962,167.628 79.5,173.5C 78.9747,174.192 78.3081,174.692 77.5,175C 78.6789,178.53 80.0122,182.03 81.5,185.5C 81.2907,186.086 80.9574,186.586 80.5,187C 82.6499,188.649 84.6499,190.482 86.5,192.5C 87.6888,193.429 89.0222,193.762 90.5,193.5C 92.3684,194.263 94.0351,195.263 95.5,196.5C 95.3691,197.376 95.7025,198.043 96.5,198.5C 99.1029,197.438 101.77,197.272 104.5,198C 101.949,198.002 99.9488,198.836 98.5,200.5C 97.5,200.5 96.5,200.5 95.5,200.5C 93.6531,199.427 91.6531,199.427 89.5,200.5C 81.1255,195.977 74.4588,189.643 69.5,181.5C 69.0679,180.29 68.4013,179.29 67.5,178.5C 66.2264,176.007 65.5597,173.341 65.5,170.5C 62.4021,170.244 59.4021,169.578 56.5,168.5C 56.1667,168.5 55.8333,168.5 55.5,168.5C 55.0825,167.778 54.4158,167.278 53.5,167C 53.7284,166.601 54.0618,166.435 54.5,166.5C 55.5,166.5 56.5,166.5 57.5,166.5C 59.6843,167.266 62.0177,167.933 64.5,168.5C 66.286,166.474 66.6194,164.308 65.5,162C 66.8152,155.338 69.9819,149.838 75,145.5C 75.3845,143.803 75.2178,142.137 74.5,140.5C 76.143,140.48 77.4763,141.147 78.5,142.5C 82.4081,140.755 85.9081,138.422 89,135.5C 91.0162,136.955 91.8495,138.955 91.5,141.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#2f1613\",d:\"M 120.5,158.5 C 125.55,164.888 127.384,172.221 126,180.5C 125.623,181.942 124.79,182.942 123.5,183.5C 123.149,175.082 122.149,166.749 120.5,158.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7f4a36\",d:\"M 84.5,159.5 C 84.1667,163.5 83.8333,167.5 83.5,171.5C 82.5,171.5 81.5,171.5 80.5,171.5C 79.1997,168.976 79.1997,166.309 80.5,163.5C 82.2156,162.451 83.5489,161.118 84.5,159.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#361314\",d:\"M 117.5,162.5 C 117.142,166.509 116.642,170.509 116,174.5C 115.303,176.584 114.136,178.251 112.5,179.5C 113.644,172.933 113.644,166.266 112.5,159.5C 111.532,158.511 110.365,157.844 109,157.5C 106.73,158.86 104.23,159.527 101.5,159.5C 101.5,161.167 101.5,162.833 101.5,164.5C 99.5853,164.784 97.9187,164.451 96.5,163.5C 99.9725,156.732 105.306,154.565 112.5,157C 114.402,158.73 116.069,160.563 117.5,162.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#410e0f\",d:\"M 112.5,179.5 C 110.951,184.37 107.617,186.37 102.5,185.5C 103.568,184.566 104.901,184.232 106.5,184.5C 106.421,183.07 106.754,181.736 107.5,180.5C 104.884,178.636 104.05,176.303 105,173.5C 101.797,172.23 99.1301,170.23 97,167.5C 95.8924,171.086 95.3924,174.753 95.5,178.5C 92.8501,173.366 93.1835,168.366 96.5,163.5C 97.9187,164.451 99.5853,164.784 101.5,164.5C 101.5,162.833 101.5,161.167 101.5,159.5C 104.23,159.527 106.73,158.86 109,157.5C 110.365,157.844 111.532,158.511 112.5,159.5C 113.644,166.266 113.644,172.933 112.5,179.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a2a39e\",d:\"M 75.5,147.5 C 76.0431,147.56 76.3764,147.893 76.5,148.5C 71.4597,154.584 68.6263,161.584 68,169.5C 67.3603,161.109 69.8603,153.776 75.5,147.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7b6762\",d:\"M 122.5,185.5 C 123.338,185.158 123.672,184.492 123.5,183.5C 124.79,182.942 125.623,181.942 126,180.5C 127.384,172.221 125.55,164.888 120.5,158.5C 120.672,157.508 120.338,156.842 119.5,156.5C 119.452,153.687 118.785,151.021 117.5,148.5C 118.002,147.479 118.668,147.312 119.5,148C 129.748,159.783 131.248,172.616 124,186.5C 122.893,187.712 122.393,187.379 122.5,185.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#4a130f\",d:\"M 95.5,159.5 C 94.243,162.096 93.0764,164.763 92,167.5C 90.0951,176.687 93.2617,183.354 101.5,187.5C 101.5,187.833 101.5,188.167 101.5,188.5C 96.8106,186.833 93.1439,183.833 90.5,179.5C 89.7908,172.671 88.4575,166.004 86.5,159.5C 88.7275,156.55 91.7275,154.884 95.5,154.5C 95.5,156.167 95.5,157.833 95.5,159.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cbcbc5\",d:\"M 112.5,127.5 C 125.288,127.656 136.621,132.156 146.5,141C 163.876,157.056 168.709,176.556 161,199.5C 162.473,182.938 158.473,167.938 149,154.5C 139.352,142.02 127.185,133.02 112.5,127.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#44201c\",d:\"M 95.5,150.5 C 100.844,150.334 106.177,150.501 111.5,151C 113.405,152.421 115.405,153.588 117.5,154.5C 117.833,156.5 118.167,158.5 118.5,160.5C 117.399,159.152 116.399,157.652 115.5,156C 107.993,152.097 101.326,153.264 95.5,159.5C 95.5,157.833 95.5,156.167 95.5,154.5C 91.7275,154.884 88.7275,156.55 86.5,159.5C 85.8333,159.5 85.1667,159.5 84.5,159.5C 84.3505,158.448 84.5172,157.448 85,156.5C 86.6516,155.601 88.1516,154.601 89.5,153.5C 91.0532,151.615 93.0532,150.615 95.5,150.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8c6d5e\",d:\"M 65.5,147.5 C 61.4486,153.267 58.782,159.601 57.5,166.5C 56.5,166.5 55.5,166.5 54.5,166.5C 53.5285,165.601 52.8618,164.434 52.5,163C 53.2699,159.086 54.2699,155.253 55.5,151.5C 56.2216,151.918 56.7216,152.584 57,153.5C 57.5,152.5 58,151.5 58.5,150.5C 61.1664,149.961 63.3331,148.628 65,146.5C 65.3988,146.728 65.5654,147.062 65.5,147.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7b625a\",d:\"M 114.5,146.5 C 115.805,149.053 116.805,151.72 117.5,154.5C 115.405,153.588 113.405,152.421 111.5,151C 106.177,150.501 100.844,150.334 95.5,150.5C 97.8109,148.932 100.478,148.098 103.5,148C 106.76,147.216 109.927,147.383 113,148.5C 113.278,147.584 113.778,146.918 114.5,146.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c6bfb6\",d:\"M 89.5,153.5 C 88.1516,154.601 86.6516,155.601 85,156.5C 84.5172,157.448 84.3505,158.448 84.5,159.5C 83.5489,161.118 82.2156,162.451 80.5,163.5C 79.1997,166.309 79.1997,168.976 80.5,171.5C 81.9784,173.364 83.9784,174.697 86.5,175.5C 84.6565,175.755 82.6565,175.922 80.5,176C 81.5823,179.405 82.4156,182.905 83,186.5C 84.1127,187.305 85.2794,187.972 86.5,188.5C 86.5,190.5 87.5,191.5 89.5,191.5C 89.8333,192.167 90.1667,192.833 90.5,193.5C 89.0222,193.762 87.6888,193.429 86.5,192.5C 84.6499,190.482 82.6499,188.649 80.5,187C 80.9574,186.586 81.2907,186.086 81.5,185.5C 80.0122,182.03 78.6789,178.53 77.5,175C 78.3081,174.692 78.9747,174.192 79.5,173.5C 77.5962,167.628 77.4295,161.628 79,155.5C 79.8333,156.5 80.6667,157.5 81.5,158.5C 81.8333,157.833 82.1667,157.167 82.5,156.5C 79.8613,149.08 81.8613,143.08 88.5,138.5C 88.4758,143.606 88.8091,148.606 89.5,153.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d7d3c8\",d:\"M 73.5,140.5 C 73.8333,140.5 74.1667,140.5 74.5,140.5C 75.2178,142.137 75.3845,143.803 75,145.5C 69.9819,149.838 66.8152,155.338 65.5,162C 66.6194,164.308 66.286,166.474 64.5,168.5C 62.0177,167.933 59.6843,167.266 57.5,166.5C 58.782,159.601 61.4486,153.267 65.5,147.5C 67.7831,144.697 70.4497,142.364 73.5,140.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b39586\",d:\"M 73.5,140.5 C 70.4497,142.364 67.7831,144.697 65.5,147.5C 65.5654,147.062 65.3988,146.728 65,146.5C 63.3331,148.628 61.1664,149.961 58.5,150.5C 58,151.5 57.5,152.5 57,153.5C 56.7216,152.584 56.2216,151.918 55.5,151.5C 57.2938,144.207 60.6271,137.707 65.5,132C 70.2685,132.616 72.9352,135.45 73.5,140.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8d8174\",d:\"M 114.5,146.5 C 113.778,146.918 113.278,147.584 113,148.5C 109.927,147.383 106.76,147.216 103.5,148C 100.478,148.098 97.8109,148.932 95.5,150.5C 93.0532,150.615 91.0532,151.615 89.5,153.5C 89.8478,149.443 90.5145,145.443 91.5,141.5C 96.1292,140.519 100.796,140.352 105.5,141C 109.2,141.843 112.2,143.676 114.5,146.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d2d1cc\",d:\"M 155.5,170.5 C 155.628,172.655 155.128,174.655 154,176.5C 151.936,173.469 149.269,171.136 146,169.5C 144.726,166.841 143.226,164.341 141.5,162C 140.207,161.51 138.873,161.343 137.5,161.5C 137.392,159.217 136.559,157.217 135,155.5C 134.51,156.793 134.343,158.127 134.5,159.5C 132.801,159.527 131.467,160.194 130.5,161.5C 127.459,149.778 121.459,139.778 112.5,131.5C 109.071,131.093 105.905,130.093 103,128.5C 102.312,127.668 102.479,127.002 103.5,126.5C 127.606,133.212 144.94,147.879 155.5,170.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ada49b\",d:\"M 87.5,127.5 C 88.675,127.281 89.675,127.614 90.5,128.5C 85.2746,130.897 80.4412,133.897 76,137.5C 75.935,134.802 77.1017,132.636 79.5,131C 82.1579,129.522 84.8245,128.355 87.5,127.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b39d90\",d:\"M 81.5,121.5 C 84.6249,121.865 87.6249,122.698 90.5,124C 83.6113,125.496 78.1113,128.996 74,134.5C 72.1667,132.667 70.3333,130.833 68.5,129C 72.4633,125.645 76.7967,123.145 81.5,121.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9f7d5b\",d:\"M 164.5,150.5 C 164.884,154.272 166.55,157.272 169.5,159.5C 172.801,166.766 176.634,173.766 181,180.5C 182.202,182.553 182.536,184.553 182,186.5C 182.92,186.93 183.753,187.264 184.5,187.5C 183.674,188.451 183.508,189.451 184,190.5C 188.048,194.88 191.715,199.546 195,204.5C 195.743,206.441 195.576,208.274 194.5,210C 196.053,211.097 197.386,212.43 198.5,214C 198.167,214.333 197.833,214.667 197.5,215C 198.849,215.772 199.682,216.939 200,218.5C 200.333,217.5 200.667,216.5 201,215.5C 201.377,216.942 202.21,217.942 203.5,218.5C 204.425,222.059 205.758,225.393 207.5,228.5C 205.115,227.708 203.115,226.374 201.5,224.5C 189.332,204.836 177.665,184.836 166.5,164.5C 164.929,159.455 162.596,154.788 159.5,150.5C 159.281,149.325 159.614,148.325 160.5,147.5C 161.852,148.524 163.185,149.524 164.5,150.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d8d4c7\",d:\"M 291.5,194.5 C 289.906,197.061 288.906,200.061 288.5,203.5C 285.015,201.954 281.848,199.954 279,197.5C 278.517,198.448 278.351,199.448 278.5,200.5C 277.732,199.737 277.232,198.737 277,197.5C 276.667,198.167 276.333,198.833 276,199.5C 276.351,197.114 276.185,194.781 275.5,192.5C 274.702,194.078 274.202,195.744 274,197.5C 272.295,193.484 271.461,188.817 271.5,183.5C 276.242,183.701 280.909,184.368 285.5,185.5C 286.391,189.364 288.391,192.364 291.5,194.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6b6559\",d:\"M 69.5,181.5 C 74.4588,189.643 81.1255,195.977 89.5,200.5C 91.0301,202.346 93.0301,203.346 95.5,203.5C 96.2625,204.268 97.2625,204.768 98.5,205C 95.5656,204.626 92.7322,204.459 90,204.5C 87.7355,205.916 86.5688,207.916 86.5,210.5C 85.5869,215.353 85.2536,220.186 85.5,225C 86.938,225.219 88.2713,225.719 89.5,226.5C 88.675,227.386 87.675,227.719 86.5,227.5C 82.8864,225.693 79.2198,223.86 75.5,222C 72.681,219.425 69.681,217.092 66.5,215C 64.8588,213.871 63.8588,212.371 63.5,210.5C 61.07,204.558 58.7367,198.225 56.5,191.5C 58.1667,191.5 59.8333,191.5 61.5,191.5C 61.5608,188.95 62.8941,187.45 65.5,187C 64.4829,185.951 64.3162,184.784 65,183.5C 65.3333,184.167 65.6667,184.833 66,185.5C 67.0319,183.973 68.1986,182.64 69.5,181.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b2ac9f\",d:\"M 311.5,197.5 C 311.096,198.756 310.429,199.923 309.5,201C 310.839,203.005 312.505,204.672 314.5,206C 311.498,205.842 308.498,205.342 305.5,204.5C 303.257,200.314 301.09,195.981 299,191.5C 297.5,190.667 296.333,189.5 295.5,188C 302.578,188.367 307.911,191.534 311.5,197.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ede9e0\",d:\"M 513.5,159.5 C 513.4,162.667 514.067,165.667 515.5,168.5C 517.998,167.879 520.332,168.545 522.5,170.5C 519.003,171.723 515.503,171.723 512,170.5C 510.278,170.611 510.112,171.111 511.5,172C 516.923,173.752 522.257,174.919 527.5,175.5C 527.833,175.333 528.167,175.167 528.5,175C 527.773,173.601 527.273,172.101 527,170.5C 523.898,169.326 523.898,168.659 527,168.5C 529.641,168.26 530.141,169.093 528.5,171C 529.707,172.3 530.374,173.8 530.5,175.5C 531.5,175.5 532.5,175.5 533.5,175.5C 538.366,177.521 538.366,178.521 533.5,178.5C 533.5,180.5 533.5,182.5 533.5,184.5C 532.167,184.5 530.833,184.5 529.5,184.5C 529.328,186.492 529.995,188.158 531.5,189.5C 530.5,190.167 529.5,190.833 528.5,191.5C 530.306,194.472 532.306,197.305 534.5,200C 531.883,199.74 530.05,198.24 529,195.5C 528.833,196 528.667,196.5 528.5,197C 529.833,199.333 531.167,201.667 532.5,204C 531.453,205.68 530.787,207.514 530.5,209.5C 530.895,212.262 531.229,214.762 531.5,217C 530.058,217.377 529.058,218.21 528.5,219.5C 527.5,219.5 526.5,219.5 525.5,219.5C 525.33,220.822 525.663,221.989 526.5,223C 522.777,224.365 522.777,226.032 526.5,228C 524.744,228.14 523.078,227.64 521.5,226.5C 521.72,228.271 520.887,229.938 519,231.5C 518.517,230.552 518.351,229.552 518.5,228.5C 515.173,227.463 511.839,226.296 508.5,225C 511.38,224.316 514.213,224.483 517,225.5C 518.722,225.389 518.888,224.889 517.5,224C 512.227,221.525 506.894,219.358 501.5,217.5C 501.062,217.565 500.728,217.399 500.5,217C 501.328,216.085 502.328,215.419 503.5,215C 501.697,214.363 500.364,213.197 499.5,211.5C 500.025,210.808 500.692,210.308 501.5,210C 504.758,209.788 507.924,209.288 511,208.5C 513.728,209.968 516.561,210.801 519.5,211C 518.953,210.075 518.287,209.242 517.5,208.5C 510.539,205.929 503.872,202.762 497.5,199C 503.292,197.15 503.959,194.317 499.5,190.5C 503.407,179.761 508.074,169.427 513.5,159.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b9bbb5\",d:\"M 95.5,200.5 C 96.5,200.5 97.5,200.5 98.5,200.5C 102.507,199.996 106.507,199.83 110.5,200C 105.32,202.851 99.9868,203.185 94.5,201C 94.7284,200.601 95.0618,200.435 95.5,200.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d1b0a3\",d:\"M 163.5,161.5 C 164.728,162.306 165.728,163.306 166.5,164.5C 177.665,184.836 189.332,204.836 201.5,224.5C 202.014,226.366 202.68,228.2 203.5,230C 203.43,230.765 203.097,231.265 202.5,231.5C 201.883,231.389 201.383,231.056 201,230.5C 194.913,234.261 189.413,237.261 184.5,239.5C 184.167,239.333 183.833,239.167 183.5,239C 185.412,237.8 186.745,236.133 187.5,234C 185.009,233.374 185.009,232.541 187.5,231.5C 186.009,230.756 184.509,230.09 183,229.5C 182.692,230.308 182.192,230.975 181.5,231.5C 180.167,230.167 178.833,230.167 177.5,231.5C 176.719,230.271 176.219,228.938 176,227.5C 175.667,228.5 175.333,229.5 175,230.5C 172.692,229.359 170.859,227.692 169.5,225.5C 170.364,223.803 171.697,222.637 173.5,222C 170.937,221.082 168.77,221.582 167,223.5C 166.51,222.207 166.343,220.873 166.5,219.5C 169.518,219.665 172.518,219.498 175.5,219C 174.4,217.977 173.067,217.477 171.5,217.5C 169.169,218.606 166.836,218.772 164.5,218C 163.833,219.333 163.167,220.667 162.5,222C 158.107,221.045 155.44,222.878 154.5,227.5C 152.229,228.7 149.896,229.7 147.5,230.5C 146.833,230.5 146.5,230.167 146.5,229.5C 149.765,227.405 152.599,224.738 155,221.5C 158.47,211.423 162.137,201.423 166,191.5C 166.667,185.167 166.667,178.833 166,172.5C 164.69,168.93 163.857,165.263 163.5,161.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#98938c\",d:\"M 331.5,193.5 C 337.781,196.304 344.115,199.138 350.5,202C 353.008,204.535 352.174,205.702 348,205.5C 342.247,205.804 337.747,203.804 334.5,199.5C 333.797,197.284 332.464,195.451 330.5,194C 330.728,193.601 331.062,193.435 331.5,193.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e5dbd0\",d:\"M 258.5,198.5 C 259.5,198.5 260.5,198.5 261.5,198.5C 261.673,192.255 260.673,191.589 258.5,196.5C 257.445,192.64 255.778,189.14 253.5,186C 251.5,185.333 249.5,185.333 247.5,186C 246.167,187 246.167,188 247.5,189C 244.883,189.822 242.216,190.322 239.5,190.5C 239.5,191.5 239.5,192.5 239.5,193.5C 241.527,193.338 243.527,193.505 245.5,194C 244.663,195.011 244.33,196.178 244.5,197.5C 245.5,197.5 246.5,197.5 247.5,197.5C 247.5,198.5 247.5,199.5 247.5,200.5C 255.128,201.83 262.794,202.83 270.5,203.5C 270.443,204.609 270.11,205.609 269.5,206.5C 269.5,207.167 269.5,207.833 269.5,208.5C 262.119,205.951 254.453,204.618 246.5,204.5C 246.657,203.127 246.49,201.793 246,200.5C 245.019,203.689 243.686,204.022 242,201.5C 240.337,203.158 239.504,205.158 239.5,207.5C 238.811,208.774 237.977,208.774 237,207.5C 236.089,204.689 235.256,201.856 234.5,199C 234.095,198.055 233.428,197.388 232.5,197C 233.22,194.509 233.887,192.009 234.5,189.5C 235.458,189.047 236.292,188.381 237,187.5C 238.167,185 239.333,182.5 240.5,180C 247.654,174.58 254.988,174.247 262.5,179C 260.331,179.429 258.331,178.929 256.5,177.5C 256.06,178.698 255.727,179.865 255.5,181C 259.017,182.484 260.851,184.984 261,188.5C 258.515,186.196 258.015,186.863 259.5,190.5C 261.409,191.348 263.409,191.682 265.5,191.5C 265.372,193.655 265.872,195.655 267,197.5C 267.667,194.833 267.667,192.167 267,189.5C 265.073,187.407 265.24,185.407 267.5,183.5C 269.153,189.03 270.153,194.697 270.5,200.5C 266.236,200.656 262.236,199.989 258.5,198.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c7bcaa\",d:\"M 258.5,198.5 C 254.785,198.577 251.119,198.244 247.5,197.5C 246.5,197.5 245.5,197.5 244.5,197.5C 244.33,196.178 244.663,195.011 245.5,194C 243.527,193.505 241.527,193.338 239.5,193.5C 239.5,192.5 239.5,191.5 239.5,190.5C 242.216,190.322 244.883,189.822 247.5,189C 246.167,188 246.167,187 247.5,186C 249.5,185.333 251.5,185.333 253.5,186C 255.778,189.14 257.445,192.64 258.5,196.5C 260.673,191.589 261.673,192.255 261.5,198.5C 260.5,198.5 259.5,198.5 258.5,198.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dfd3cc\",d:\"M 233.5,219.5 C 231.5,221.5 229.5,223.5 227.5,225.5C 227.643,223.738 227.309,222.071 226.5,220.5C 226.846,219.304 227.346,219.304 228,220.5C 228.5,219.5 229,218.5 229.5,217.5C 227.774,215.772 226.441,213.772 225.5,211.5C 224.167,209.167 224.167,206.833 225.5,204.5C 225.167,204.167 224.833,203.833 224.5,203.5C 222.885,204.154 221.218,204.654 219.5,205C 222.527,208.522 224.193,212.355 224.5,216.5C 217.269,203.71 209.769,191.043 202,178.5C 201.517,177.552 201.351,176.552 201.5,175.5C 201.122,173.354 200.788,171.187 200.5,169C 200.454,167.272 200.954,165.772 202,164.5C 202.827,167.532 204.327,170.532 206.5,173.5C 205.48,175.432 205.313,177.432 206,179.5C 206.36,177.579 207.194,175.912 208.5,174.5C 212.053,174.887 215.386,175.887 218.5,177.5C 222.712,190.467 227.712,203.133 233.5,215.5C 232.637,216.726 232.637,218.06 233.5,219.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a7a194\",d:\"M 322.5,200.5 C 323.129,203.375 323.962,206.042 325,208.5C 322.931,207.736 320.764,207.236 318.5,207C 317.248,204.367 315.914,201.867 314.5,199.5C 314.281,198.325 314.614,197.325 315.5,196.5C 317.765,198.127 320.099,199.461 322.5,200.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e9e4df\",d:\"M 563.5,171.5 C 563.5,190.833 563.5,210.167 563.5,229.5C 561.439,230.682 559.939,230.015 559,227.5C 557.721,229.937 556.221,230.437 554.5,229C 555.5,228 556.5,227 557.5,226C 557.167,225 556.833,224 556.5,223C 551.722,220.397 547.055,217.564 542.5,214.5C 542.167,215.167 541.833,215.833 541.5,216.5C 539.925,215.544 538.258,214.877 536.5,214.5C 537.263,213.732 538.263,213.232 539.5,213C 538.346,212.086 538.513,211.253 540,210.5C 540.499,206.179 540.666,201.846 540.5,197.5C 542.144,197.286 543.644,197.62 545,198.5C 545.121,196.273 545.954,194.44 547.5,193C 544.833,192.333 544.833,191.667 547.5,191C 546.5,190 545.5,189 544.5,188C 545.449,187.383 546.282,187.549 547,188.5C 547.333,187.167 547.667,185.833 548,184.5C 551.169,188.764 552.003,188.431 550.5,183.5C 551.735,183.721 552.735,184.388 553.5,185.5C 555.845,182.779 557.678,183.112 559,186.5C 559.499,181.511 559.666,176.511 559.5,171.5C 560.833,171.5 562.167,171.5 563.5,171.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c8c2b9\",d:\"M 291.5,194.5 C 292.296,198.678 294.129,202.345 297,205.5C 300.2,205.551 303.033,205.218 305.5,204.5C 308.498,205.342 311.498,205.842 314.5,206C 312.505,204.672 310.839,203.005 309.5,201C 310.429,199.923 311.096,198.756 311.5,197.5C 312.5,198.167 313.5,198.833 314.5,199.5C 315.914,201.867 317.248,204.367 318.5,207C 320.764,207.236 322.931,207.736 325,208.5C 323.962,206.042 323.129,203.375 322.5,200.5C 326.213,200.77 329.046,202.436 331,205.5C 331.725,204.941 332.558,204.608 333.5,204.5C 339.892,206.585 346.392,207.918 353,208.5C 355.091,207.5 356.757,208.167 358,210.5C 358.483,209.552 358.649,208.552 358.5,207.5C 361.877,207.068 364.877,207.735 367.5,209.5C 368.301,211.042 368.634,212.708 368.5,214.5C 362.109,213.824 355.775,212.824 349.5,211.5C 348.534,213.396 348.201,215.396 348.5,217.5C 353.844,217.334 359.177,217.501 364.5,218C 367.149,218.452 369.649,219.286 372,220.5C 372.308,219.692 372.808,219.025 373.5,218.5C 374.429,219.689 374.762,221.022 374.5,222.5C 374.167,222.5 373.833,222.5 373.5,222.5C 372.25,222.577 371.417,223.244 371,224.5C 367.839,222.651 364.339,221.484 360.5,221C 356.137,220.631 351.804,220.131 347.5,219.5C 347.664,216.813 347.497,214.146 347,211.5C 346.648,213.247 346.148,214.914 345.5,216.5C 344.527,215.209 343.527,215.209 342.5,216.5C 339.833,215.167 337.167,213.833 334.5,212.5C 333.358,213.826 332.024,214.826 330.5,215.5C 330.67,214.178 330.337,213.011 329.5,212C 326.5,211.5 323.5,211 320.5,210.5C 319.274,210.52 318.274,210.853 317.5,211.5C 316.584,211.982 315.584,212.315 314.5,212.5C 309.656,210.921 304.656,210.088 299.5,210C 300.5,209.667 301.5,209.333 302.5,209C 298.347,208.087 294.18,207.253 290,206.5C 287.855,206.396 286.021,207.063 284.5,208.5C 283.571,207.311 283.238,205.978 283.5,204.5C 279.02,206.866 274.354,207.532 269.5,206.5C 270.11,205.609 270.443,204.609 270.5,203.5C 272.857,201.902 275.523,200.902 278.5,200.5C 278.351,199.448 278.517,198.448 279,197.5C 281.848,199.954 285.015,201.954 288.5,203.5C 288.906,200.061 289.906,197.061 291.5,194.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f0ece6\",d:\"M 423.5,175.5 C 425.047,182.48 422.38,185.48 415.5,184.5C 415.183,187.572 415.516,190.572 416.5,193.5C 417.524,194.853 418.857,195.52 420.5,195.5C 421.974,198.249 423.974,200.582 426.5,202.5C 425.624,202.369 424.957,202.702 424.5,203.5C 425.711,204.72 425.711,205.887 424.5,207C 425.738,206.923 426.738,207.089 427.5,207.5C 425.932,209.894 424.599,212.394 423.5,215C 424.949,216.117 426.616,216.784 428.5,217C 427.167,217.333 425.833,217.667 424.5,218C 426.888,218.303 429.055,219.137 431,220.5C 431.456,219.256 430.956,218.423 429.5,218C 430.635,217.251 431.635,217.417 432.5,218.5C 433.705,221.206 435.705,223.039 438.5,224C 437.252,224.861 435.919,225.361 434.5,225.5C 409.592,215.877 384.592,206.544 359.5,197.5C 359.426,195.589 358.426,194.422 356.5,194C 344.86,189.398 333.193,184.898 321.5,180.5C 322.209,179.596 323.209,179.263 324.5,179.5C 331.198,182.553 337.864,184.887 344.5,186.5C 347.589,187.543 350.589,188.876 353.5,190.5C 367.541,195.928 381.708,201.261 396,206.5C 397.107,206.415 398.107,206.081 399,205.5C 402.444,198.377 405.278,191.044 407.5,183.5C 408.401,182.71 409.068,181.71 409.5,180.5C 410.721,181.028 411.887,181.695 413,182.5C 413.015,180.446 413.848,178.446 415.5,176.5C 418.184,175.085 420.851,174.752 423.5,175.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d2ccbe\",d:\"M -0.5,200.5 C 0.117425,200.611 0.617425,200.944 1,201.5C 1.91306,205.25 2.24639,208.917 2,212.5C 3.15317,209.289 3.81984,205.956 4,202.5C 5.33333,203.167 6.66667,203.833 8,204.5C 9.46732,207.784 9.30065,210.784 7.5,213.5C 8.02527,214.192 8.69194,214.692 9.5,215C 8.33492,216.084 7.00158,216.917 5.5,217.5C 4.16667,218.5 4.16667,219.5 5.5,220.5C 6.71927,219.737 7.71927,218.737 8.5,217.5C 9.69637,218.559 10.363,219.893 10.5,221.5C 9.95688,222.864 9.79022,224.197 10,225.5C 11.6933,223.973 13.5266,222.64 15.5,221.5C 16.2975,221.957 16.6309,222.624 16.5,223.5C 16.5,224.167 16.1667,224.5 15.5,224.5C 13.5759,227.434 10.9093,229.6 7.5,231C 4.85397,231.497 2.1873,231.664 -0.5,231.5C -0.5,221.167 -0.5,210.833 -0.5,200.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#beb5a6\",d:\"M 9.5,187.5 C 10.8333,187.5 11.5,188.167 11.5,189.5C 9.14316,189.337 6.80982,189.503 4.5,190C 4.04265,190.414 3.70931,190.914 3.5,191.5C 5.04533,192.452 6.71199,192.785 8.5,192.5C 8.19127,195.346 6.5246,196.846 3.5,197C 5.54068,198.242 6.70735,200.075 7,202.5C 7.33333,202.167 7.66667,201.833 8,201.5C 8.77773,204.184 10.1111,206.517 12,208.5C 12.8928,207.289 13.7261,207.289 14.5,208.5C 12.9591,212.157 11.9591,215.99 11.5,220C 13.0174,221.779 13.8508,221.279 14,218.5C 14.677,220.689 15.8437,221.022 17.5,219.5C 18.8092,221.24 18.4759,222.573 16.5,223.5C 16.6309,222.624 16.2975,221.957 15.5,221.5C 13.5266,222.64 11.6933,223.973 10,225.5C 9.79022,224.197 9.95688,222.864 10.5,221.5C 10.363,219.893 9.69637,218.559 8.5,217.5C 7.71927,218.737 6.71927,219.737 5.5,220.5C 4.16667,219.5 4.16667,218.5 5.5,217.5C 7.00158,216.917 8.33492,216.084 9.5,215C 8.69194,214.692 8.02527,214.192 7.5,213.5C 9.30065,210.784 9.46732,207.784 8,204.5C 6.66667,203.833 5.33333,203.167 4,202.5C 3.81984,205.956 3.15317,209.289 2,212.5C 2.24639,208.917 1.91306,205.25 1,201.5C 0.617425,200.944 0.117425,200.611 -0.5,200.5C -0.5,195.833 -0.5,191.167 -0.5,186.5C 0.507165,185.172 1.8405,184.172 3.5,183.5C 5.5385,184.277 6.20517,185.443 5.5,187C 6.79323,187.49 8.12656,187.657 9.5,187.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cfaf94\",d:\"M 169.5,159.5 C 170.496,159.414 171.329,159.748 172,160.5C 172.471,162.246 173.138,163.913 174,165.5C 174.333,164.833 174.667,164.167 175,163.5C 179.343,168.179 182.343,174.179 184,181.5C 187.82,184.092 189.487,187.758 189,192.5C 189.667,193.833 190.333,193.833 191,192.5C 190.743,196.846 192.576,199.68 196.5,201C 196.167,201.333 195.833,201.667 195.5,202C 197.155,203.444 197.822,205.278 197.5,207.5C 199.167,207.5 200.833,207.5 202.5,207.5C 203.244,211.119 203.577,214.785 203.5,218.5C 202.21,217.942 201.377,216.942 201,215.5C 200.667,216.5 200.333,217.5 200,218.5C 199.682,216.939 198.849,215.772 197.5,215C 197.833,214.667 198.167,214.333 198.5,214C 197.386,212.43 196.053,211.097 194.5,210C 195.576,208.274 195.743,206.441 195,204.5C 191.715,199.546 188.048,194.88 184,190.5C 183.508,189.451 183.674,188.451 184.5,187.5C 183.753,187.264 182.92,186.93 182,186.5C 182.536,184.553 182.202,182.553 181,180.5C 176.634,173.766 172.801,166.766 169.5,159.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#837e75\",d:\"M 317.5,211.5 C 317.33,212.822 317.663,213.989 318.5,215C 322.576,215.998 326.576,216.165 330.5,215.5C 332.024,214.826 333.358,213.826 334.5,212.5C 337.167,213.833 339.833,215.167 342.5,216.5C 343.527,215.209 344.527,215.209 345.5,216.5C 346.154,220.211 344.654,222.211 341,222.5C 333.919,220.942 326.752,219.942 319.5,219.5C 319.64,217.876 318.973,216.71 317.5,216C 313.279,215.422 309.112,214.589 305,213.5C 304.098,213.743 303.265,214.077 302.5,214.5C 300.549,214.227 299.049,214.893 298,216.5C 297.228,215.151 296.061,214.318 294.5,214C 286.194,212.587 277.86,211.42 269.5,210.5C 269.5,209.833 269.5,209.167 269.5,208.5C 269.5,207.833 269.5,207.167 269.5,206.5C 274.354,207.532 279.02,206.866 283.5,204.5C 283.238,205.978 283.571,207.311 284.5,208.5C 286.021,207.063 287.855,206.396 290,206.5C 294.18,207.253 298.347,208.087 302.5,209C 301.5,209.333 300.5,209.667 299.5,210C 304.656,210.088 309.656,210.921 314.5,212.5C 315.584,212.315 316.584,211.982 317.5,211.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#5e5a59\",d:\"M 373.5,206.5 C 379.336,207.748 385.003,209.581 390.5,212C 393.239,213.026 395.572,214.526 397.5,216.5C 388.75,214.786 380.75,211.453 373.5,206.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b3b1a9\",d:\"M 489.5,195.5 C 489.5,196.167 489.833,196.5 490.5,196.5C 490.367,210.089 485.367,221.423 475.5,230.5C 479.418,218.456 484.084,206.789 489.5,195.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ebe4da\",d:\"M 22.5,174.5 C 24.0879,176.113 25.0879,178.113 25.5,180.5C 25.5569,181.609 25.8902,182.609 26.5,183.5C 27.4815,189.615 28.9815,195.615 31,201.5C 38.8622,218.597 46.0288,235.93 52.5,253.5C 54.1054,256.378 55.4388,259.378 56.5,262.5C 57.7347,267.212 59.7347,271.545 62.5,275.5C 64.4157,280.339 67.0824,284.672 70.5,288.5C 71.7007,290.909 73.3674,292.909 75.5,294.5C 76.5,296.167 77.8333,297.5 79.5,298.5C 79.9731,299.906 80.9731,300.573 82.5,300.5C 82.7214,301.735 83.3881,302.735 84.5,303.5C 84.1667,303.833 83.8333,304.167 83.5,304.5C 74.3281,298.333 67.3281,290.333 62.5,280.5C 57.5576,271.291 53.2243,261.958 49.5,252.5C 46.6696,242.34 42.6696,232.674 37.5,223.5C 30.4791,207.79 25.4791,191.457 22.5,174.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cfc2b5\",d:\"M 242.5,210.5 C 248.734,211.937 255.067,212.77 261.5,213C 263.32,213.2 264.653,214.034 265.5,215.5C 263.026,216.276 262.359,217.776 263.5,220C 256.131,221.131 249.797,219.131 244.5,214C 243.177,213.184 242.511,212.017 242.5,210.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f7e7da\",d:\"M 368.5,214.5 C 371.167,215.167 373.833,215.833 376.5,216.5C 376.067,219.166 375.567,221.832 375,224.5C 374.536,223.906 374.369,223.239 374.5,222.5C 374.762,221.022 374.429,219.689 373.5,218.5C 372.808,219.025 372.308,219.692 372,220.5C 369.649,219.286 367.149,218.452 364.5,218C 359.177,217.501 353.844,217.334 348.5,217.5C 348.201,215.396 348.534,213.396 349.5,211.5C 355.775,212.824 362.109,213.824 368.5,214.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b1a090\",d:\"M 269.5,208.5 C 269.5,209.167 269.5,209.833 269.5,210.5C 268.77,212.045 267.437,212.878 265.5,213C 270.453,213.995 275.453,214.662 280.5,215C 283.055,216.445 285.722,217.611 288.5,218.5C 288.66,220.199 288.494,221.866 288,223.5C 287.385,221.884 286.385,220.551 285,219.5C 284.29,220.973 283.124,221.64 281.5,221.5C 280.947,217.544 280.114,217.544 279,221.5C 278.667,220.167 278.333,218.833 278,217.5C 277.581,218.672 276.915,219.672 276,220.5C 275.417,218.998 274.584,217.665 273.5,216.5C 272.575,217.641 271.741,217.641 271,216.5C 270.405,217.899 270.572,219.232 271.5,220.5C 270.675,221.386 269.675,221.719 268.5,221.5C 267.87,219.25 266.87,217.25 265.5,215.5C 264.653,214.034 263.32,213.2 261.5,213C 255.067,212.77 248.734,211.937 242.5,210.5C 241.833,209.167 240.833,208.167 239.5,207.5C 239.504,205.158 240.337,203.158 242,201.5C 243.686,204.022 245.019,203.689 246,200.5C 246.49,201.793 246.657,203.127 246.5,204.5C 254.453,204.618 262.119,205.951 269.5,208.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#53524e\",d:\"M 330.5,215.5 C 326.576,216.165 322.576,215.998 318.5,215C 317.663,213.989 317.33,212.822 317.5,211.5C 318.274,210.853 319.274,210.52 320.5,210.5C 323.5,211 326.5,211.5 329.5,212C 330.337,213.011 330.67,214.178 330.5,215.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#543b2e\",d:\"M 49.5,177.5 C 49.5809,189.644 53.0809,200.644 60,210.5C 69.6973,221.74 81.5306,229.407 95.5,233.5C 94.4226,234.018 93.2559,234.352 92,234.5C 87.09,233.454 82.4234,231.788 78,229.5C 74.5202,229.402 71.0202,229.402 67.5,229.5C 66.2519,228.96 65.0852,228.293 64,227.5C 63.7547,229.663 62.7547,231.33 61,232.5C 60.6667,231.833 60.3333,231.167 60,230.5C 55.7867,232.875 55.7867,235.541 60,238.5C 61.6949,238.776 63.5282,238.443 65.5,237.5C 67.1667,237.833 68.1667,238.833 68.5,240.5C 65.3343,241.234 62.3343,242.4 59.5,244C 61.2072,244.195 62.8739,244.195 64.5,244C 64.4321,246.565 64.4321,249.065 64.5,251.5C 60.6163,252.793 56.6163,253.459 52.5,253.5C 46.0288,235.93 38.8622,218.597 31,201.5C 28.9815,195.615 27.4815,189.615 26.5,183.5C 28.1662,185.187 29.4995,187.187 30.5,189.5C 29.3707,191.529 29.8707,191.863 32,190.5C 32.3333,191.5 32.6667,192.5 33,193.5C 34.0113,192.663 35.1779,192.33 36.5,192.5C 35.5707,193.315 34.5707,194.148 33.5,195C 35.4414,196.816 36.1081,198.816 35.5,201C 37.1261,200.805 38.7928,200.805 40.5,201C 36.7279,202.389 36.7279,203.389 40.5,204C 40.1667,204.333 39.8333,204.667 39.5,205C 41.0037,206.337 42.0037,208.004 42.5,210C 42.1667,210.333 41.8333,210.667 41.5,211C 43.4708,211.014 45.4708,210.681 47.5,210C 47.1667,209.667 46.8333,209.333 46.5,209C 48.612,208.094 49.4453,206.594 49,204.5C 47.9916,204.018 46.825,203.852 45.5,204C 46.1667,203.333 46.8333,202.667 47.5,202C 45.7928,201.805 44.1261,201.805 42.5,202C 43.727,200.413 43.3937,199.079 41.5,198C 43.1261,198.195 44.7928,198.195 46.5,198C 45.5004,195.909 46.1671,194.243 48.5,193C 47.8586,190.422 47.5252,187.755 47.5,185C 47.5248,182.071 48.1914,179.571 49.5,177.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#918775\",d:\"M 269.5,210.5 C 277.86,211.42 286.194,212.587 294.5,214C 296.061,214.318 297.228,215.151 298,216.5C 299.049,214.893 300.549,214.227 302.5,214.5C 305.187,215.353 307.521,216.853 309.5,219C 308.552,219.483 307.552,219.649 306.5,219.5C 306.5,220.5 306.5,221.5 306.5,222.5C 310.057,222.653 313.557,223.987 317,226.5C 317.765,226.43 318.265,226.097 318.5,225.5C 319.573,226.251 319.74,227.251 319,228.5C 315.706,226.071 313.039,226.405 311,229.5C 309.829,228.107 308.329,227.273 306.5,227C 305.333,225.5 304.167,224 303,222.5C 302.667,222.833 302.333,223.167 302,223.5C 301.691,222.234 301.191,221.067 300.5,220C 296.974,218.663 293.308,218.163 289.5,218.5C 289.167,218.5 288.833,218.5 288.5,218.5C 285.722,217.611 283.055,216.445 280.5,215C 275.453,214.662 270.453,213.995 265.5,213C 267.437,212.878 268.77,212.045 269.5,210.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b9b9b1\",d:\"M 94.5,230.5 C 92.4471,230.598 90.7804,229.931 89.5,228.5C 92.0098,228.073 94.3432,227.407 96.5,226.5C 98.5922,226.439 100.092,225.439 101,223.5C 103.213,219.075 105.379,214.741 107.5,210.5C 107.369,211.239 107.536,211.906 108,212.5C 109.36,210.895 110.86,209.395 112.5,208C 116.29,207.77 119.624,206.437 122.5,204C 117.893,204.31 113.227,204.476 108.5,204.5C 108.768,206.099 108.434,207.432 107.5,208.5C 107.565,208.062 107.399,207.728 107,207.5C 106.333,208.833 105.667,210.167 105,211.5C 102.372,213.126 100.039,215.126 98,217.5C 97.2532,214.147 97.7532,210.98 99.5,208C 99.1667,207.5 98.8333,207 98.5,206.5C 95.4973,207.085 92.4973,207.752 89.5,208.5C 88.689,209.216 88.0223,210.05 87.5,211C 89.5385,212.925 91.2052,215.092 92.5,217.5C 87.6152,217.616 85.6152,215.283 86.5,210.5C 86.5688,207.916 87.7355,205.916 90,204.5C 92.7322,204.459 95.5656,204.626 98.5,205C 97.2625,204.768 96.2625,204.268 95.5,203.5C 101.628,204.475 107.628,203.809 113.5,201.5C 114.265,201.077 115.098,200.743 116,200.5C 117.762,200.944 117.595,201.444 115.5,202C 117.716,201.637 119.882,201.804 122,202.5C 123.798,201.496 125.632,200.996 127.5,201C 124.641,203.552 122.974,206.719 122.5,210.5C 120.5,211.167 118.5,211.833 116.5,212.5C 116.5,213.5 116.5,214.5 116.5,215.5C 115.127,215.343 113.793,215.51 112.5,216C 110.928,218.872 109.262,221.706 107.5,224.5C 104.114,224.975 101.78,226.142 100.5,228C 101.5,228.333 102.5,228.667 103.5,229C 100.487,229.502 97.4869,230.002 94.5,230.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#77796a\",d:\"M 107.5,210.5 C 107.5,209.833 107.5,209.167 107.5,208.5C 108.434,207.432 108.768,206.099 108.5,204.5C 113.227,204.476 117.893,204.31 122.5,204C 119.624,206.437 116.29,207.77 112.5,208C 110.86,209.395 109.36,210.895 108,212.5C 107.536,211.906 107.369,211.239 107.5,210.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cfaca0\",d:\"M 202.5,231.5 C 196.346,235.961 189.679,239.628 182.5,242.5C 179.309,243.092 176.309,244.259 173.5,246C 166.631,250.267 159.631,254.267 152.5,258C 151.402,258.77 151.402,259.603 152.5,260.5C 144.725,260.196 137.058,260.862 129.5,262.5C 127.744,261.448 127.077,259.781 127.5,257.5C 134.373,256.902 141.207,256.902 148,257.5C 149.762,257.056 149.595,256.556 147.5,256C 150.146,255.503 152.813,255.336 155.5,255.5C 156.6,251.439 158.433,247.772 161,244.5C 162.333,243.167 163.667,243.167 165,244.5C 165.402,243.128 165.902,241.795 166.5,240.5C 164.961,237.511 163.961,234.344 163.5,231C 163.833,230.667 164.167,230.333 164.5,230C 161.751,228.654 161.417,227.32 163.5,226C 161.939,225.682 160.772,224.849 160,223.5C 159.51,224.793 159.343,226.127 159.5,227.5C 158.5,227.5 157.5,227.5 156.5,227.5C 156.854,229.541 156.854,231.374 156.5,233C 159.145,234.287 160.145,236.453 159.5,239.5C 158.178,239.33 157.011,239.663 156,240.5C 154.98,239.109 154.147,237.609 153.5,236C 151.973,234.632 150.473,234.132 149,234.5C 148.59,233.099 148.09,231.766 147.5,230.5C 149.896,229.7 152.229,228.7 154.5,227.5C 155.44,222.878 158.107,221.045 162.5,222C 163.167,220.667 163.833,219.333 164.5,218C 166.836,218.772 169.169,218.606 171.5,217.5C 173.067,217.477 174.4,217.977 175.5,219C 172.518,219.498 169.518,219.665 166.5,219.5C 166.343,220.873 166.51,222.207 167,223.5C 168.77,221.582 170.937,221.082 173.5,222C 171.697,222.637 170.364,223.803 169.5,225.5C 170.859,227.692 172.692,229.359 175,230.5C 175.333,229.5 175.667,228.5 176,227.5C 176.219,228.938 176.719,230.271 177.5,231.5C 178.833,230.167 180.167,230.167 181.5,231.5C 182.192,230.975 182.692,230.308 183,229.5C 184.509,230.09 186.009,230.756 187.5,231.5C 185.009,232.541 185.009,233.374 187.5,234C 186.745,236.133 185.412,237.8 183.5,239C 183.833,239.167 184.167,239.333 184.5,239.5C 189.413,237.261 194.913,234.261 201,230.5C 201.383,231.056 201.883,231.389 202.5,231.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7c6c59\",d:\"M 9.5,180.5 C 10.2485,181.531 10.9152,182.698 11.5,184C 15.1079,184.074 16.1079,185.574 14.5,188.5C 15.3698,193.529 18.3698,195.695 23.5,195C 22.8333,195.667 22.1667,196.333 21.5,197C 23.3008,197.317 23.6341,197.984 22.5,199C 29.0734,199.528 29.0734,200.362 22.5,201.5C 23.8477,203.657 25.8477,204.99 28.5,205.5C 25.358,209.942 26.358,212.942 31.5,214.5C 31.0417,218.917 32.7083,222.25 36.5,224.5C 37.1067,224.376 37.44,224.043 37.5,223.5C 42.6696,232.674 46.6696,242.34 49.5,252.5C 46.0324,252.464 42.3657,252.298 38.5,252C 36.5204,250.175 34.1871,249.341 31.5,249.5C 31.8256,245.116 31.4922,240.783 30.5,236.5C 29.2638,235.754 27.9305,235.421 26.5,235.5C 26.6199,233.266 26.2865,231.099 25.5,229C 28.1138,226.366 27.9472,223.866 25,221.5C 24.0482,215.74 22.7149,210.074 21,204.5C 19.1667,202.333 17.3333,200.167 15.5,198C 16.1667,197.667 16.8333,197.333 17.5,197C 15.338,195.507 13.338,193.84 11.5,192C 12.5981,191.23 12.5981,190.397 11.5,189.5C 11.5,188.167 10.8333,187.5 9.5,187.5C 9.78042,184.612 8.44709,183.112 5.5,183C 7.437,182.878 8.77033,182.045 9.5,180.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#989084\",d:\"M 86.5,210.5 C 85.6152,215.283 87.6152,217.616 92.5,217.5C 94.0262,220.28 95.3595,223.28 96.5,226.5C 94.3432,227.407 92.0098,228.073 89.5,228.5C 88.209,228.737 87.209,228.404 86.5,227.5C 87.675,227.719 88.675,227.386 89.5,226.5C 88.2713,225.719 86.938,225.219 85.5,225C 85.2536,220.186 85.5869,215.353 86.5,210.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ecece5\",d:\"M 107.5,208.5 C 107.5,209.167 107.5,209.833 107.5,210.5C 105.379,214.741 103.213,219.075 101,223.5C 100.092,225.439 98.5922,226.439 96.5,226.5C 95.3595,223.28 94.0262,220.28 92.5,217.5C 91.2052,215.092 89.5385,212.925 87.5,211C 88.0223,210.05 88.689,209.216 89.5,208.5C 92.4973,207.752 95.4973,207.085 98.5,206.5C 98.8333,207 99.1667,207.5 99.5,208C 97.7532,210.98 97.2532,214.147 98,217.5C 100.039,215.126 102.372,213.126 105,211.5C 105.667,210.167 106.333,208.833 107,207.5C 107.399,207.728 107.565,208.062 107.5,208.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#786e5e\",d:\"M 347.5,219.5 C 346.766,220.708 346.433,222.041 346.5,223.5C 351.643,223.853 356.643,224.853 361.5,226.5C 356.614,227.421 351.948,226.754 347.5,224.5C 346.269,225.651 346.269,226.817 347.5,228C 345.481,227.848 343.481,227.348 341.5,226.5C 338.91,225.986 336.244,225.986 333.5,226.5C 331.956,226.297 330.622,225.63 329.5,224.5C 328.731,228.218 326.731,229.218 323.5,227.5C 323.5,226.833 323.167,226.5 322.5,226.5C 322.582,224.748 321.749,223.748 320,223.5C 318.97,223.836 318.47,224.503 318.5,225.5C 318.265,226.097 317.765,226.43 317,226.5C 313.557,223.987 310.057,222.653 306.5,222.5C 306.5,221.5 306.5,220.5 306.5,219.5C 307.552,219.649 308.552,219.483 309.5,219C 307.521,216.853 305.187,215.353 302.5,214.5C 303.265,214.077 304.098,213.743 305,213.5C 309.112,214.589 313.279,215.422 317.5,216C 318.973,216.71 319.64,217.876 319.5,219.5C 326.752,219.942 333.919,220.942 341,222.5C 344.654,222.211 346.154,220.211 345.5,216.5C 346.148,214.914 346.648,213.247 347,211.5C 347.497,214.146 347.664,216.813 347.5,219.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b2a598\",d:\"M 367.5,209.5 C 370.622,210.561 373.622,211.895 376.5,213.5C 377.391,215.609 378.558,217.609 380,219.5C 382.488,218.588 384.155,219.588 385,222.5C 385.333,222.167 385.667,221.833 386,221.5C 387.051,225.521 388.551,229.188 390.5,232.5C 389.022,232.762 387.689,232.429 386.5,231.5C 385.302,227.801 383.135,224.801 380,222.5C 380.052,225.272 381.219,227.606 383.5,229.5C 383.333,229.833 383.167,230.167 383,230.5C 376.563,224.105 376.063,224.772 381.5,232.5C 381.167,232.833 380.833,233.167 380.5,233.5C 379.111,230.913 377.278,228.579 375,226.5C 374.683,228.301 374.016,228.634 373,227.5C 373.199,230.439 374.032,233.272 375.5,236C 374.956,236.717 374.289,237.217 373.5,237.5C 373.719,236.325 373.386,235.325 372.5,234.5C 370.246,233.876 368.579,232.543 367.5,230.5C 370.795,229.432 372.795,226.765 373.5,222.5C 373.833,222.5 374.167,222.5 374.5,222.5C 374.369,223.239 374.536,223.906 375,224.5C 375.567,221.832 376.067,219.166 376.5,216.5C 373.833,215.833 371.167,215.167 368.5,214.5C 368.634,212.708 368.301,211.042 367.5,209.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c2c0b6\",d:\"M 413.5,227.5 C 412.71,228.609 412.21,229.942 412,231.5C 411.085,230.672 410.419,229.672 410,228.5C 409.691,229.766 409.191,230.933 408.5,232C 407.175,231.852 406.008,232.018 405,232.5C 402.252,229.266 399.752,225.932 397.5,222.5C 397.791,221.351 398.624,220.684 400,220.5C 403.909,221.771 407.742,223.271 411.5,225C 412.381,225.708 413.047,226.542 413.5,227.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e1d9d5\",d:\"M 535.5,216.5 C 534.829,217.847 534.829,219.014 535.5,220C 531.614,223.397 532.114,226.231 537,228.5C 539.033,227.984 539.033,228.65 537,230.5C 534.997,228.078 532.497,227.245 529.5,228C 530.167,228.333 530.833,228.667 531.5,229C 528.437,230.579 525.77,233.413 523.5,237.5C 528.195,240.511 532.862,243.511 537.5,246.5C 535.616,249.603 534.282,252.937 533.5,256.5C 531.732,258.922 530.232,261.588 529,264.5C 527.627,261.588 526.127,258.754 524.5,256C 522.866,255.506 521.199,255.34 519.5,255.5C 516.671,254.285 513.838,254.618 511,256.5C 510.5,256.333 510,256.167 509.5,256C 510.451,255.282 510.617,254.449 510,253.5C 508.811,255.233 507.644,256.9 506.5,258.5C 505.363,257.211 504.03,256.211 502.5,255.5C 502.119,253.058 502.786,252.391 504.5,253.5C 505.308,253.192 505.975,252.692 506.5,252C 503.911,250.803 501.244,249.803 498.5,249C 499,248.5 499.5,248 500,247.5C 502.022,248.786 504.189,249.786 506.5,250.5C 508.385,249.391 510.385,248.557 512.5,248C 510.888,247.28 509.388,247.446 508,248.5C 506.829,247.107 505.329,246.273 503.5,246C 505.058,245.79 506.391,245.29 507.5,244.5C 511.238,245.079 514.904,245.079 518.5,244.5C 517.934,243.709 517.101,243.709 516,244.5C 514.831,243.991 513.998,243.158 513.5,242C 514.424,241.15 514.424,240.15 513.5,239C 513.905,238.055 514.572,237.388 515.5,237C 511.864,236.374 511.864,235.207 515.5,233.5C 510.968,230.473 506.302,227.64 501.5,225C 500.402,224.23 500.402,223.397 501.5,222.5C 502.363,223.463 503.03,223.463 503.5,222.5C 501.995,221.158 501.328,219.492 501.5,217.5C 506.894,219.358 512.227,221.525 517.5,224C 518.888,224.889 518.722,225.389 517,225.5C 514.213,224.483 511.38,224.316 508.5,225C 511.839,226.296 515.173,227.463 518.5,228.5C 518.351,229.552 518.517,230.552 519,231.5C 520.887,229.938 521.72,228.271 521.5,226.5C 523.078,227.64 524.744,228.14 526.5,228C 522.777,226.032 522.777,224.365 526.5,223C 525.663,221.989 525.33,220.822 525.5,219.5C 526.5,219.5 527.5,219.5 528.5,219.5C 528.938,219.435 529.272,219.601 529.5,220C 526.741,222.484 527.074,223.65 530.5,223.5C 530.608,221.217 531.441,219.217 533,217.5C 533.671,216.748 534.504,216.414 535.5,216.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b2afa6\",d:\"M 395.5,220.5 C 395.833,221.167 396.167,221.833 396.5,222.5C 398.408,225.312 400.075,228.312 401.5,231.5C 398.833,232.833 396.167,232.833 393.5,231.5C 394.92,228.012 394.586,224.678 392.5,221.5C 393.325,220.614 394.325,220.281 395.5,220.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#2e2b29\",d:\"M 500.5,164.5 C 497.112,174.94 493.446,185.273 489.5,195.5C 484.084,206.789 479.418,218.456 475.5,230.5C 474.195,233.805 471.862,236.138 468.5,237.5C 465.555,238.468 462.555,238.634 459.5,238C 452.269,235.286 444.935,232.786 437.5,230.5C 437.119,229.069 436.119,228.236 434.5,228C 428.804,226.794 423.137,225.461 417.5,224C 414.328,222.248 411.328,220.248 408.5,218C 404.644,217.823 400.977,217.323 397.5,216.5C 395.572,214.526 393.239,213.026 390.5,212C 385.003,209.581 379.336,207.748 373.5,206.5C 356.828,200.062 340.495,193.062 324.5,185.5C 336.107,189.81 347.773,193.81 359.5,197.5C 384.592,206.544 409.592,215.877 434.5,225.5C 442.476,228.769 450.476,231.936 458.5,235C 462.167,235.667 465.833,235.667 469.5,235C 470.667,233.833 471.833,232.667 473,231.5C 479.272,216.178 485.439,200.844 491.5,185.5C 493.033,181.567 494.367,177.567 495.5,173.5C 496.977,170.409 498.644,167.409 500.5,164.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f7f7f5\",d:\"M 491.5,185.5 C 485.439,200.844 479.272,216.178 473,231.5C 471.833,232.667 470.667,233.833 469.5,235C 465.833,235.667 462.167,235.667 458.5,235C 450.476,231.936 442.476,228.769 434.5,225.5C 435.919,225.361 437.252,224.861 438.5,224C 435.705,223.039 433.705,221.206 432.5,218.5C 431.635,217.417 430.635,217.251 429.5,218C 430.956,218.423 431.456,219.256 431,220.5C 429.055,219.137 426.888,218.303 424.5,218C 425.833,217.667 427.167,217.333 428.5,217C 426.616,216.784 424.949,216.117 423.5,215C 424.599,212.394 425.932,209.894 427.5,207.5C 426.738,207.089 425.738,206.923 424.5,207C 425.711,205.887 425.711,204.72 424.5,203.5C 424.957,202.702 425.624,202.369 426.5,202.5C 434.839,210.506 443.173,218.506 451.5,226.5C 453.548,224.452 455.548,222.452 457.5,220.5C 466.078,212.424 474.578,204.09 483,195.5C 483.239,194.212 482.739,193.212 481.5,192.5C 483.457,191.857 485.791,191.191 488.5,190.5C 488.714,188.856 488.38,187.356 487.5,186C 488.793,185.51 490.127,185.343 491.5,185.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c2b9a9\",d:\"M 264.5,235.5 C 267.302,241.744 269.636,248.077 271.5,254.5C 272.485,257.437 271.151,258.771 267.5,258.5C 266.323,256.968 264.989,255.468 263.5,254C 261.167,253.667 258.833,253.333 256.5,253C 255.333,252.5 254.5,251.667 254,250.5C 253.329,251.252 252.496,251.586 251.5,251.5C 250.909,250.849 250.243,250.182 249.5,249.5C 250.274,248.289 251.107,248.289 252,249.5C 252.892,246.716 254.058,244.05 255.5,241.5C 255.192,240.692 254.692,240.025 254,239.5C 252.667,240.833 251.333,242.167 250,243.5C 248.383,242.464 248.216,241.297 249.5,240C 246.509,237.01 244.343,233.51 243,229.5C 239.478,226.827 236.978,223.494 235.5,219.5C 235.5,218.833 235.5,218.167 235.5,217.5C 235.369,216.624 235.702,215.957 236.5,215.5C 237.981,216.48 239.315,217.647 240.5,219C 245.173,219.645 249.506,221.312 253.5,224C 256.846,228.238 260.512,232.071 264.5,235.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9c8a83\",d:\"M 155.5,215.5 C 150.807,225.539 142.807,231.205 131.5,232.5C 139.883,228.262 147.716,222.262 155,214.5C 155.399,214.728 155.565,215.062 155.5,215.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#eeeadf\",d:\"M 501.5,222.5 C 500.402,223.397 500.402,224.23 501.5,225C 506.302,227.64 510.968,230.473 515.5,233.5C 511.864,235.207 511.864,236.374 515.5,237C 514.572,237.388 513.905,238.055 513.5,239C 514.424,240.15 514.424,241.15 513.5,242C 513.998,243.158 514.831,243.991 516,244.5C 517.101,243.709 517.934,243.709 518.5,244.5C 514.904,245.079 511.238,245.079 507.5,244.5C 503.947,243.483 500.614,241.983 497.5,240C 500.559,239.355 503.559,238.522 506.5,237.5C 503.454,236.625 500.454,235.625 497.5,234.5C 498.376,233.749 499.376,233.249 500.5,233C 498.392,232.64 496.392,231.973 494.5,231C 497.856,230.785 501.189,230.785 504.5,231C 501.689,229.356 499.356,227.19 497.5,224.5C 497.755,222.657 497.922,220.657 498,218.5C 498.498,220.544 499.665,221.878 501.5,222.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a09a95\",d:\"M 413.5,227.5 C 416.388,227.22 417.888,228.553 418,231.5C 418.839,230.376 420.006,229.709 421.5,229.5C 424.251,229.854 426.917,230.521 429.5,231.5C 430.432,233.766 431.766,235.766 433.5,237.5C 434.347,235.939 434.014,234.439 432.5,233C 433.793,232.51 435.127,232.343 436.5,232.5C 436.5,232.833 436.5,233.167 436.5,233.5C 436.677,237.446 436.344,241.446 435.5,245.5C 436.32,241.817 434.987,239.483 431.5,238.5C 430.653,237.034 429.32,236.2 427.5,236C 426.929,234.795 426.262,233.628 425.5,232.5C 420.112,234.804 416.112,233.137 413.5,227.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bcb3a1\",d:\"M 15.5,224.5 C 15.3893,225.117 15.056,225.617 14.5,226C 22.3969,228.476 25.5636,233.976 24,242.5C 24.4828,241.552 24.6495,240.552 24.5,239.5C 25.5,239.5 26.5,239.5 27.5,239.5C 27.6785,242.216 28.1785,244.883 29,247.5C 30.5005,250.839 32.0005,254.173 33.5,257.5C 32.8333,258.5 32.1667,259.5 31.5,260.5C 32.9079,261.243 34.2412,262.077 35.5,263C 35.1667,263.333 34.8333,263.667 34.5,264C 35.8333,264.333 37.1667,264.667 38.5,265C 37.8333,265.333 37.1667,265.667 36.5,266C 38.3237,266.66 39.657,267.827 40.5,269.5C 39.8333,269.5 39.1667,269.5 38.5,269.5C 37.2426,268.182 35.9093,266.849 34.5,265.5C 34.1667,266.167 33.8333,266.833 33.5,267.5C 31.1667,266 28.8333,264.5 26.5,263C 27.1667,262.667 27.8333,262.333 28.5,262C 24.6069,257.972 20.2736,257.472 15.5,260.5C 15.0894,259.738 14.9227,258.738 15,257.5C 12.5719,256.37 10.4053,254.87 8.5,253C 5.51838,252.502 2.51838,252.335 -0.5,252.5C -0.5,245.5 -0.5,238.5 -0.5,231.5C 2.1873,231.664 4.85397,231.497 7.5,231C 10.9093,229.6 13.5759,227.434 15.5,224.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#746e68\",d:\"M 437.5,230.5 C 444.935,232.786 452.269,235.286 459.5,238C 462.555,238.634 465.555,238.468 468.5,237.5C 468.047,238.458 467.381,239.292 466.5,240C 462.745,240.755 459.078,240.589 455.5,239.5C 454.138,237.223 452.305,236.89 450,238.5C 448.433,237.144 446.6,236.477 444.5,236.5C 441.075,233.593 440.075,234.26 441.5,238.5C 440.833,238.5 440.167,238.5 439.5,238.5C 438.737,236.632 437.737,234.965 436.5,233.5C 436.5,233.167 436.5,232.833 436.5,232.5C 436.833,231.833 437.167,231.167 437.5,230.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#69483b\",d:\"M 95.5,233.5 C 97.7638,234.219 100.097,234.552 102.5,234.5C 108.768,236.521 115.101,236.854 121.5,235.5C 124.881,235.54 128.214,235.207 131.5,234.5C 123.473,238.753 114.973,242.086 106,244.5C 94.4269,241.815 82.9269,241.982 71.5,245C 70.8333,245.667 70.1667,246.333 69.5,247C 71.9357,247.206 73.6024,248.373 74.5,250.5C 72.6021,251.485 71.1021,250.818 70,248.5C 69.5,249 69,249.5 68.5,250C 69.5505,251.385 70.8839,252.385 72.5,253C 71.0577,253.377 70.0577,254.21 69.5,255.5C 67.9681,254.63 66.4681,254.964 65,256.5C 65.1519,254.924 65.9852,253.591 67.5,252.5C 66.675,251.614 65.675,251.281 64.5,251.5C 64.4321,249.065 64.4321,246.565 64.5,244C 62.8739,244.195 61.2072,244.195 59.5,244C 62.3343,242.4 65.3343,241.234 68.5,240.5C 68.1667,238.833 67.1667,237.833 65.5,237.5C 63.5282,238.443 61.6949,238.776 60,238.5C 55.7867,235.541 55.7867,232.875 60,230.5C 60.3333,231.167 60.6667,231.833 61,232.5C 62.7547,231.33 63.7547,229.663 64,227.5C 65.0852,228.293 66.2519,228.96 67.5,229.5C 71.0202,229.402 74.5202,229.402 78,229.5C 82.4234,231.788 87.09,233.454 92,234.5C 93.2559,234.352 94.4226,234.018 95.5,233.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cba99b\",d:\"M 129.5,262.5 C 128.449,263.222 127.782,264.222 127.5,265.5C 125.801,265.34 124.134,265.506 122.5,266C 123.598,266.77 123.598,267.603 122.5,268.5C 120.744,267.448 120.077,265.781 120.5,263.5C 119.5,263.5 118.5,263.5 117.5,263.5C 117.719,262.325 117.386,261.325 116.5,260.5C 115.646,261.948 114.646,263.281 113.5,264.5C 114.025,265.192 114.692,265.692 115.5,266C 113.633,266.711 112.133,266.211 111,264.5C 109.759,266.421 108.259,266.754 106.5,265.5C 107.59,264.391 107.59,263.391 106.5,262.5C 103.968,262.914 101.468,263.248 99,263.5C 97.9783,262.646 97.1449,261.646 96.5,260.5C 97.6405,259.575 97.6405,258.741 96.5,258C 99.095,257.774 101.595,257.274 104,256.5C 105.94,258.738 108.107,258.738 110.5,256.5C 109.145,255.325 109.312,254.325 111,253.5C 111.333,253.833 111.667,254.167 112,254.5C 114.301,253.133 116.801,252.466 119.5,252.5C 119.5,251.5 119.5,250.5 119.5,249.5C 120.525,247.799 122.025,246.465 124,245.5C 128.626,244.536 132.126,242.036 134.5,238C 134.167,237.667 133.833,237.333 133.5,237C 135.5,236 137.5,235 139.5,234C 138.552,233.517 137.552,233.351 136.5,233.5C 139.759,232.175 143.092,230.842 146.5,229.5C 146.5,230.167 146.833,230.5 147.5,230.5C 148.09,231.766 148.59,233.099 149,234.5C 150.473,234.132 151.973,234.632 153.5,236C 154.147,237.609 154.98,239.109 156,240.5C 157.011,239.663 158.178,239.33 159.5,239.5C 160.145,236.453 159.145,234.287 156.5,233C 156.854,231.374 156.854,229.541 156.5,227.5C 157.5,227.5 158.5,227.5 159.5,227.5C 159.343,226.127 159.51,224.793 160,223.5C 160.772,224.849 161.939,225.682 163.5,226C 161.417,227.32 161.751,228.654 164.5,230C 164.167,230.333 163.833,230.667 163.5,231C 163.961,234.344 164.961,237.511 166.5,240.5C 165.902,241.795 165.402,243.128 165,244.5C 163.667,243.167 162.333,243.167 161,244.5C 158.433,247.772 156.6,251.439 155.5,255.5C 152.813,255.336 150.146,255.503 147.5,256C 149.595,256.556 149.762,257.056 148,257.5C 141.207,256.902 134.373,256.902 127.5,257.5C 127.077,259.781 127.744,261.448 129.5,262.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bdb1a6\",d:\"M 224.5,221.5 C 225.167,223.167 225.833,224.833 226.5,226.5C 221.08,232.744 215.08,238.577 208.5,244C 200.731,249.1 192.231,252.6 183,254.5C 182.055,254.095 181.388,253.428 181,252.5C 180.764,254.119 179.931,255.119 178.5,255.5C 177.127,252.617 177.793,250.283 180.5,248.5C 181.222,248.918 181.722,249.584 182,250.5C 183.316,247.397 185.482,245.063 188.5,243.5C 198.889,237.94 208.889,231.773 218.5,225C 221.31,224.993 223.31,223.826 224.5,221.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ddd2d2\",d:\"M 536.5,214.5 C 538.258,214.877 539.925,215.544 541.5,216.5C 541.833,215.833 542.167,215.167 542.5,214.5C 547.055,217.564 551.722,220.397 556.5,223C 556.833,224 557.167,225 557.5,226C 556.5,227 555.5,228 554.5,229C 556.221,230.437 557.721,229.937 559,227.5C 559.939,230.015 561.439,230.682 563.5,229.5C 563.5,236.833 563.5,244.167 563.5,251.5C 559.292,250.715 558.958,249.882 562.5,249C 560.212,248.178 557.878,247.511 555.5,247C 556.451,246.282 556.617,245.449 556,244.5C 553.989,248.002 552.656,248.002 552,244.5C 551.077,245.759 550.243,247.092 549.5,248.5C 548.304,248.154 548.304,247.654 549.5,247C 548.874,246.25 548.374,245.416 548,244.5C 547.667,244.833 547.333,245.167 547,245.5C 546.448,242.953 545.114,240.953 543,239.5C 541.974,242.239 540.474,244.572 538.5,246.5C 538.167,246.5 537.833,246.5 537.5,246.5C 532.862,243.511 528.195,240.511 523.5,237.5C 525.77,233.413 528.437,230.579 531.5,229C 530.833,228.667 530.167,228.333 529.5,228C 532.497,227.245 534.997,228.078 537,230.5C 539.033,228.65 539.033,227.984 537,228.5C 532.114,226.231 531.614,223.397 535.5,220C 534.829,219.014 534.829,217.847 535.5,216.5C 536.338,216.158 536.672,215.492 536.5,214.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#83695b\",d:\"M 224.5,221.5 C 223.31,223.826 221.31,224.993 218.5,225C 208.889,231.773 198.889,237.94 188.5,243.5C 185.482,245.063 183.316,247.397 182,250.5C 181.722,249.584 181.222,248.918 180.5,248.5C 174.576,251.13 168.909,254.297 163.5,258C 160.558,259.124 157.558,259.458 154.5,259C 164.061,253.726 173.394,248.226 182.5,242.5C 189.679,239.628 196.346,235.961 202.5,231.5C 203.097,231.265 203.43,230.765 203.5,230C 202.68,228.2 202.014,226.366 201.5,224.5C 203.115,226.374 205.115,227.708 207.5,228.5C 213.271,225.78 218.938,222.78 224.5,219.5C 225.463,219.97 225.463,220.637 224.5,221.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c7bfb1\",d:\"M 289.5,253.5 C 289.217,252.711 288.717,252.044 288,251.5C 287.64,253.421 286.806,255.088 285.5,256.5C 284.033,256.277 282.533,255.944 281,255.5C 279.956,256.623 279.29,257.956 279,259.5C 278.313,257.432 278.48,255.432 279.5,253.5C 278.081,251.664 276.914,249.664 276,247.5C 276.434,251.452 276.434,255.452 276,259.5C 275.458,256.708 274.624,254.042 273.5,251.5C 274.043,251.44 274.376,251.107 274.5,250.5C 271.225,245.624 270.058,240.29 271,234.5C 271.333,235.833 271.667,237.167 272,238.5C 272.167,237.667 272.333,236.833 272.5,236C 270.861,231.584 269.528,227.084 268.5,222.5C 270.39,222.297 271.89,222.963 273,224.5C 278.535,241.993 279.701,241.659 276.5,223.5C 277.5,223.5 278.5,223.5 279.5,223.5C 281.806,231.725 283.64,240.059 285,248.5C 286.036,245.705 287.369,243.038 289,240.5C 289.442,242.679 290.442,243.345 292,242.5C 293.621,246.631 292.788,250.298 289.5,253.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dad6cc\",d:\"M 316.5,244.5 C 313.759,245.083 311.092,246.083 308.5,247.5C 307.41,248.609 307.41,249.609 308.5,250.5C 311.291,246.411 311.958,246.745 310.5,251.5C 308.599,251.246 307.933,251.58 308.5,252.5C 306.58,253.065 304.913,254.065 303.5,255.5C 302.833,255.5 302.167,255.5 301.5,255.5C 298.833,255.5 296.167,255.5 293.5,255.5C 296.65,254.293 299.984,253.293 303.5,252.5C 301.234,251.686 298.9,251.186 296.5,251C 300.27,249.949 303.603,248.115 306.5,245.5C 304.761,245.406 302.761,245.239 300.5,245C 302.625,243.263 303.458,241.096 303,238.5C 302.667,238.833 302.333,239.167 302,239.5C 301.2,236.428 302.367,234.761 305.5,234.5C 305.089,237.276 305.922,237.943 308,236.5C 312.648,238.703 317.482,240.537 322.5,242C 319.866,242.906 317.866,243.739 316.5,244.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d4cec0\",d:\"M 235.5,219.5 C 236.978,223.494 239.478,226.827 243,229.5C 244.343,233.51 246.509,237.01 249.5,240C 248.216,241.297 248.383,242.464 250,243.5C 251.333,242.167 252.667,240.833 254,239.5C 254.692,240.025 255.192,240.692 255.5,241.5C 254.058,244.05 252.892,246.716 252,249.5C 251.107,248.289 250.274,248.289 249.5,249.5C 250.243,250.182 250.909,250.849 251.5,251.5C 249.61,251.703 248.11,251.037 247,249.5C 244.281,250.444 241.448,250.777 238.5,250.5C 238.646,248.058 237.813,247.391 236,248.5C 231.614,242.9 230.781,243.233 233.5,249.5C 233.167,250.167 232.833,250.833 232.5,251.5C 229.249,252.248 225.916,252.248 222.5,251.5C 222.239,254.633 220.572,255.8 217.5,255C 219.716,252.498 220.716,249.498 220.5,246C 220.955,243.077 219.955,240.91 217.5,239.5C 220.48,235.353 223.98,231.686 228,228.5C 228.216,230.384 228.883,232.051 230,233.5C 228.353,228.617 229.853,224.95 234.5,222.5C 235.386,221.675 235.719,220.675 235.5,219.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8c6459\",d:\"M 131.5,234.5 C 132.167,234.5 132.833,234.5 133.5,234.5C 133.938,234.435 134.272,234.601 134.5,235C 129.042,239.721 123.042,243.387 116.5,246C 109.267,246.475 102.101,247.308 95,248.5C 91.479,248.365 87.979,248.032 84.5,247.5C 81.1116,248.992 77.7782,249.992 74.5,250.5C 73.6024,248.373 71.9357,247.206 69.5,247C 70.1667,246.333 70.8333,245.667 71.5,245C 82.9269,241.982 94.4269,241.815 106,244.5C 114.973,242.086 123.473,238.753 131.5,234.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ece8df\",d:\"M 376.5,213.5 C 382.036,217.063 388.369,219.396 395.5,220.5C 394.325,220.281 393.325,220.614 392.5,221.5C 394.586,224.678 394.92,228.012 393.5,231.5C 396.167,232.833 398.833,232.833 401.5,231.5C 400.075,228.312 398.408,225.312 396.5,222.5C 396.833,222.5 397.167,222.5 397.5,222.5C 399.752,225.932 402.252,229.266 405,232.5C 406.008,232.018 407.175,231.852 408.5,232C 409.191,230.933 409.691,229.766 410,228.5C 410.419,229.672 411.085,230.672 412,231.5C 412.21,229.942 412.71,228.609 413.5,227.5C 416.112,233.137 420.112,234.804 425.5,232.5C 426.262,233.628 426.929,234.795 427.5,236C 429.32,236.2 430.653,237.034 431.5,238.5C 431.5,238.833 431.5,239.167 431.5,239.5C 428.247,237.894 425.247,238.227 422.5,240.5C 421.158,238.995 419.492,238.328 417.5,238.5C 417.798,241.336 417.131,241.836 415.5,240C 408.09,239.395 400.757,239.895 393.5,241.5C 393.671,244.797 393.005,245.131 391.5,242.5C 390.188,243.46 388.854,243.294 387.5,242C 390.287,239.854 393.287,238.854 396.5,239C 395.353,236.822 393.687,235.322 391.5,234.5C 388.273,237.02 384.607,238.354 380.5,238.5C 380.33,239.822 380.663,240.989 381.5,242C 387.82,242.435 387.987,243.269 382,244.5C 380.938,243.903 379.772,243.57 378.5,243.5C 374.637,243.632 371.137,244.632 368,246.5C 365.159,244.496 361.993,243.996 358.5,245C 355.101,246.39 351.767,246.89 348.5,246.5C 346.566,246.901 345.066,247.901 344,249.5C 341.822,246.532 340.656,246.865 340.5,250.5C 338.116,250.557 335.782,250.223 333.5,249.5C 325.311,251.595 316.978,252.595 308.5,252.5C 307.933,251.58 308.599,251.246 310.5,251.5C 316.177,250.808 321.844,249.975 327.5,249C 330.422,248.583 333.089,247.583 335.5,246C 333.731,244.936 332.064,243.769 330.5,242.5C 325.889,243.602 321.222,244.269 316.5,244.5C 317.866,243.739 319.866,242.906 322.5,242C 317.482,240.537 312.648,238.703 308,236.5C 305.922,237.943 305.089,237.276 305.5,234.5C 302.367,234.761 301.2,236.428 302,239.5C 302.333,239.167 302.667,238.833 303,238.5C 303.458,241.096 302.625,243.263 300.5,245C 302.761,245.239 304.761,245.406 306.5,245.5C 303.603,248.115 300.27,249.949 296.5,251C 298.9,251.186 301.234,251.686 303.5,252.5C 299.984,253.293 296.65,254.293 293.5,255.5C 291.517,255.843 290.183,255.176 289.5,253.5C 292.788,250.298 293.621,246.631 292,242.5C 290.442,243.345 289.442,242.679 289,240.5C 287.369,243.038 286.036,245.705 285,248.5C 283.64,240.059 281.806,231.725 279.5,223.5C 278.5,223.5 277.5,223.5 276.5,223.5C 279.701,241.659 278.535,241.993 273,224.5C 271.89,222.963 270.39,222.297 268.5,222.5C 269.528,227.084 270.861,231.584 272.5,236C 272.333,236.833 272.167,237.667 272,238.5C 271.667,237.167 271.333,235.833 271,234.5C 270.058,240.29 271.225,245.624 274.5,250.5C 274.376,251.107 274.043,251.44 273.5,251.5C 272.928,250.027 272.095,248.693 271,247.5C 271.207,249.751 271.373,252.085 271.5,254.5C 269.636,248.077 267.302,241.744 264.5,235.5C 264.721,232.903 265.221,232.903 266,235.5C 266.695,233.278 267.528,231.111 268.5,229C 267.496,226.65 266.496,224.316 265.5,222C 266.448,221.517 267.448,221.351 268.5,221.5C 269.675,221.719 270.675,221.386 271.5,220.5C 270.572,219.232 270.405,217.899 271,216.5C 271.741,217.641 272.575,217.641 273.5,216.5C 274.584,217.665 275.417,218.998 276,220.5C 276.915,219.672 277.581,218.672 278,217.5C 278.333,218.833 278.667,220.167 279,221.5C 280.114,217.544 280.947,217.544 281.5,221.5C 283.124,221.64 284.29,220.973 285,219.5C 286.385,220.551 287.385,221.884 288,223.5C 288.494,221.866 288.66,220.199 288.5,218.5C 288.833,218.5 289.167,218.5 289.5,218.5C 289.491,220.308 289.991,221.975 291,223.5C 291.333,222.167 291.667,220.833 292,219.5C 293.352,221.594 293.852,223.927 293.5,226.5C 296.833,226.5 300.167,226.5 303.5,226.5C 303.239,231.078 305.406,233.744 310,234.5C 311.613,232.693 313.447,231.027 315.5,229.5C 316.696,230.559 317.363,231.893 317.5,233.5C 316.954,235.135 316.62,236.801 316.5,238.5C 317.822,238.67 318.989,238.337 320,237.5C 320.795,233.688 321.629,230.021 322.5,226.5C 323.167,226.5 323.5,226.833 323.5,227.5C 323.924,231.283 324.09,234.95 324,238.5C 325.147,236.269 326.147,233.935 327,231.5C 327.128,234.514 327.128,237.514 327,240.5C 328.356,241.38 329.856,241.714 331.5,241.5C 330.986,239.488 330.82,237.488 331,235.5C 331.333,236.167 331.667,236.833 332,237.5C 332.24,233.748 332.74,230.081 333.5,226.5C 334.5,226.5 335.5,226.5 336.5,226.5C 336.338,228.527 336.505,230.527 337,232.5C 337.718,229.766 339.218,229.1 341.5,230.5C 339.405,233.641 338.738,236.974 339.5,240.5C 340.694,235.602 342.527,234.936 345,238.5C 345.151,235.881 345.985,233.547 347.5,231.5C 349.633,234.128 349.966,236.961 348.5,240C 353.533,240.829 358.533,240.662 363.5,239.5C 362.877,236.833 361.877,234.333 360.5,232C 362.134,231.506 363.801,231.34 365.5,231.5C 367.444,232.928 369.111,234.761 370.5,237C 371.448,237.483 372.448,237.649 373.5,237.5C 374.289,237.217 374.956,236.717 375.5,236C 374.032,233.272 373.199,230.439 373,227.5C 374.016,228.634 374.683,228.301 375,226.5C 377.278,228.579 379.111,230.913 380.5,233.5C 380.833,233.167 381.167,232.833 381.5,232.5C 376.063,224.772 376.563,224.105 383,230.5C 383.167,230.167 383.333,229.833 383.5,229.5C 381.219,227.606 380.052,225.272 380,222.5C 383.135,224.801 385.302,227.801 386.5,231.5C 387.689,232.429 389.022,232.762 390.5,232.5C 388.551,229.188 387.051,225.521 386,221.5C 385.667,221.833 385.333,222.167 385,222.5C 384.155,219.588 382.488,218.588 380,219.5C 378.558,217.609 377.391,215.609 376.5,213.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bab3a7\",d:\"M 333.5,226.5 C 336.244,225.986 338.91,225.986 341.5,226.5C 342.806,227.467 343.473,228.801 343.5,230.5C 348.659,229.867 353.826,229.2 359,228.5C 361.546,228.859 363.713,229.859 365.5,231.5C 363.801,231.34 362.134,231.506 360.5,232C 361.877,234.333 362.877,236.833 363.5,239.5C 358.533,240.662 353.533,240.829 348.5,240C 349.966,236.961 349.633,234.128 347.5,231.5C 345.985,233.547 345.151,235.881 345,238.5C 342.527,234.936 340.694,235.602 339.5,240.5C 338.738,236.974 339.405,233.641 341.5,230.5C 339.218,229.1 337.718,229.766 337,232.5C 336.505,230.527 336.338,228.527 336.5,226.5C 335.5,226.5 334.5,226.5 333.5,226.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c0baad\",d:\"M 333.5,226.5 C 332.74,230.081 332.24,233.748 332,237.5C 331.667,236.833 331.333,236.167 331,235.5C 330.82,237.488 330.986,239.488 331.5,241.5C 329.856,241.714 328.356,241.38 327,240.5C 327.128,237.514 327.128,234.514 327,231.5C 326.147,233.935 325.147,236.269 324,238.5C 324.09,234.95 323.924,231.283 323.5,227.5C 326.731,229.218 328.731,228.218 329.5,224.5C 330.622,225.63 331.956,226.297 333.5,226.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c7bfba\",d:\"M 397.5,233.5 C 401.846,233.334 406.179,233.501 410.5,234C 411.973,234.71 412.64,235.876 412.5,237.5C 407.708,237.349 403.041,238.016 398.5,239.5C 397.5,238.167 396.5,236.833 395.5,235.5C 396.243,234.818 396.909,234.151 397.5,233.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b2ac9c\",d:\"M 289.5,218.5 C 293.308,218.163 296.974,218.663 300.5,220C 301.191,221.067 301.691,222.234 302,223.5C 302.333,223.167 302.667,222.833 303,222.5C 304.167,224 305.333,225.5 306.5,227C 308.329,227.273 309.829,228.107 311,229.5C 313.039,226.405 315.706,226.071 319,228.5C 319.74,227.251 319.573,226.251 318.5,225.5C 318.47,224.503 318.97,223.836 320,223.5C 321.749,223.748 322.582,224.748 322.5,226.5C 321.629,230.021 320.795,233.688 320,237.5C 318.989,238.337 317.822,238.67 316.5,238.5C 316.62,236.801 316.954,235.135 317.5,233.5C 317.363,231.893 316.696,230.559 315.5,229.5C 313.447,231.027 311.613,232.693 310,234.5C 305.406,233.744 303.239,231.078 303.5,226.5C 300.167,226.5 296.833,226.5 293.5,226.5C 293.852,223.927 293.352,221.594 292,219.5C 291.667,220.833 291.333,222.167 291,223.5C 289.991,221.975 289.491,220.308 289.5,218.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9a8474\",d:\"M 347.5,219.5 C 351.804,220.131 356.137,220.631 360.5,221C 364.339,221.484 367.839,222.651 371,224.5C 371.417,223.244 372.25,222.577 373.5,222.5C 372.795,226.765 370.795,229.432 367.5,230.5C 368.579,232.543 370.246,233.876 372.5,234.5C 373.386,235.325 373.719,236.325 373.5,237.5C 372.448,237.649 371.448,237.483 370.5,237C 369.111,234.761 367.444,232.928 365.5,231.5C 363.713,229.859 361.546,228.859 359,228.5C 353.826,229.2 348.659,229.867 343.5,230.5C 343.473,228.801 342.806,227.467 341.5,226.5C 343.481,227.348 345.481,227.848 347.5,228C 346.269,226.817 346.269,225.651 347.5,224.5C 351.948,226.754 356.614,227.421 361.5,226.5C 356.643,224.853 351.643,223.853 346.5,223.5C 346.433,222.041 346.766,220.708 347.5,219.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c6bdb4\",d:\"M 310.5,251.5 C 311.958,246.745 311.291,246.411 308.5,250.5C 307.41,249.609 307.41,248.609 308.5,247.5C 311.092,246.083 313.759,245.083 316.5,244.5C 321.222,244.269 325.889,243.602 330.5,242.5C 332.064,243.769 333.731,244.936 335.5,246C 333.089,247.583 330.422,248.583 327.5,249C 321.844,249.975 316.177,250.808 310.5,251.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9c907e\",d:\"M 11.5,189.5 C 12.5981,190.397 12.5981,191.23 11.5,192C 13.338,193.84 15.338,195.507 17.5,197C 16.8333,197.333 16.1667,197.667 15.5,198C 17.3333,200.167 19.1667,202.333 21,204.5C 22.7149,210.074 24.0482,215.74 25,221.5C 27.9472,223.866 28.1138,226.366 25.5,229C 26.2865,231.099 26.6199,233.266 26.5,235.5C 27.9305,235.421 29.2638,235.754 30.5,236.5C 31.4922,240.783 31.8256,245.116 31.5,249.5C 34.1871,249.341 36.5204,250.175 38.5,252C 42.3657,252.298 46.0324,252.464 49.5,252.5C 53.2243,261.958 57.5576,271.291 62.5,280.5C 62.4292,283.139 61.4292,285.306 59.5,287C 59.7591,288.261 60.4258,289.261 61.5,290C 61.2716,290.399 60.9382,290.565 60.5,290.5C 58.0552,288.328 56.0552,285.662 54.5,282.5C 55.6651,281.416 56.9984,280.583 58.5,280C 57.944,279.617 57.6107,279.117 57.5,278.5C 55.9581,277.837 54.2914,277.17 52.5,276.5C 53.5,275.833 54.5,275.167 55.5,274.5C 53.9095,272.367 51.9095,270.701 49.5,269.5C 49.1667,270.167 48.8333,270.833 48.5,271.5C 47.7568,270.092 46.9234,268.759 46,267.5C 44.8394,271.364 43.006,272.03 40.5,269.5C 39.657,267.827 38.3237,266.66 36.5,266C 37.1667,265.667 37.8333,265.333 38.5,265C 37.1667,264.667 35.8333,264.333 34.5,264C 34.8333,263.667 35.1667,263.333 35.5,263C 34.2412,262.077 32.9079,261.243 31.5,260.5C 32.1667,259.5 32.8333,258.5 33.5,257.5C 32.0005,254.173 30.5005,250.839 29,247.5C 28.1785,244.883 27.6785,242.216 27.5,239.5C 26.5,239.5 25.5,239.5 24.5,239.5C 24.6495,240.552 24.4828,241.552 24,242.5C 25.5636,233.976 22.3969,228.476 14.5,226C 15.056,225.617 15.3893,225.117 15.5,224.5C 16.1667,224.5 16.5,224.167 16.5,223.5C 18.4759,222.573 18.8092,221.24 17.5,219.5C 15.8437,221.022 14.677,220.689 14,218.5C 13.8508,221.279 13.0174,221.779 11.5,220C 11.9591,215.99 12.9591,212.157 14.5,208.5C 13.7261,207.289 12.8928,207.289 12,208.5C 10.1111,206.517 8.77773,204.184 8,201.5C 7.66667,201.833 7.33333,202.167 7,202.5C 6.70735,200.075 5.54068,198.242 3.5,197C 6.5246,196.846 8.19127,195.346 8.5,192.5C 6.71199,192.785 5.04533,192.452 3.5,191.5C 3.70931,190.914 4.04265,190.414 4.5,190C 6.80982,189.503 9.14316,189.337 11.5,189.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d4cfc4\",d:\"M 499.5,190.5 C 503.959,194.317 503.292,197.15 497.5,199C 503.872,202.762 510.539,205.929 517.5,208.5C 518.287,209.242 518.953,210.075 519.5,211C 516.561,210.801 513.728,209.968 511,208.5C 507.924,209.288 504.758,209.788 501.5,210C 500.692,210.308 500.025,210.808 499.5,211.5C 500.364,213.197 501.697,214.363 503.5,215C 502.328,215.419 501.328,216.085 500.5,217C 500.728,217.399 501.062,217.565 501.5,217.5C 501.328,219.492 501.995,221.158 503.5,222.5C 503.03,223.463 502.363,223.463 501.5,222.5C 499.665,221.878 498.498,220.544 498,218.5C 497.922,220.657 497.755,222.657 497.5,224.5C 499.356,227.19 501.689,229.356 504.5,231C 501.189,230.785 497.856,230.785 494.5,231C 496.392,231.973 498.392,232.64 500.5,233C 499.376,233.249 498.376,233.749 497.5,234.5C 500.454,235.625 503.454,236.625 506.5,237.5C 503.559,238.522 500.559,239.355 497.5,240C 500.614,241.983 503.947,243.483 507.5,244.5C 506.391,245.29 505.058,245.79 503.5,246C 505.329,246.273 506.829,247.107 508,248.5C 509.388,247.446 510.888,247.28 512.5,248C 510.385,248.557 508.385,249.391 506.5,250.5C 504.189,249.786 502.022,248.786 500,247.5C 499.5,248 499,248.5 498.5,249C 501.244,249.803 503.911,250.803 506.5,252C 505.975,252.692 505.308,253.192 504.5,253.5C 502.786,252.391 502.119,253.058 502.5,255.5C 500.345,255.628 498.345,255.128 496.5,254C 492.736,250.117 488.403,247.95 483.5,247.5C 482.614,246.675 482.281,245.675 482.5,244.5C 479.203,244.671 478.869,244.005 481.5,242.5C 480.15,241.05 478.484,240.383 476.5,240.5C 473.689,246.33 470.022,251.664 465.5,256.5C 464.883,256.611 464.383,256.944 464,257.5C 463,252.5 460,249.5 455,248.5C 454.809,250.708 454.309,252.708 453.5,254.5C 453.66,252.801 453.494,251.134 453,249.5C 452.667,250.167 452.333,250.833 452,251.5C 451.71,249.956 451.044,248.623 450,247.5C 449.536,248.094 449.369,248.761 449.5,249.5C 448.109,247.04 446.942,244.374 446,241.5C 444.871,239.859 443.371,238.859 441.5,238.5C 440.075,234.26 441.075,233.593 444.5,236.5C 445.794,238.907 447.461,241.074 449.5,243C 450.332,243.688 450.998,243.521 451.5,242.5C 450.494,241.604 450.494,240.938 451.5,240.5C 454.479,242.644 457.312,244.978 460,247.5C 459.852,246.175 460.018,245.008 460.5,244C 458.292,242.953 456.626,241.453 455.5,239.5C 459.078,240.589 462.745,240.755 466.5,240C 467.381,239.292 468.047,238.458 468.5,237.5C 471.862,236.138 474.195,233.805 475.5,230.5C 475.722,233.076 477.055,233.91 479.5,233C 484.86,227.98 489.027,222.147 492,215.5C 493.085,206.617 495.585,198.284 499.5,190.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a7a196\",d:\"M 444.5,236.5 C 446.6,236.477 448.433,237.144 450,238.5C 452.305,236.89 454.138,237.223 455.5,239.5C 456.626,241.453 458.292,242.953 460.5,244C 460.018,245.008 459.852,246.175 460,247.5C 457.312,244.978 454.479,242.644 451.5,240.5C 450.494,240.938 450.494,241.604 451.5,242.5C 450.998,243.521 450.332,243.688 449.5,243C 447.461,241.074 445.794,238.907 444.5,236.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bcb3b1\",d:\"M 431.5,239.5 C 428.23,240.283 424.897,241.283 421.5,242.5C 420.833,242.167 420.167,241.833 419.5,241.5C 403.03,243.775 386.697,246.108 370.5,248.5C 348.146,250.668 325.813,253.002 303.5,255.5C 304.913,254.065 306.58,253.065 308.5,252.5C 316.978,252.595 325.311,251.595 333.5,249.5C 335.782,250.223 338.116,250.557 340.5,250.5C 340.656,246.865 341.822,246.532 344,249.5C 345.066,247.901 346.566,246.901 348.5,246.5C 351.767,246.89 355.101,246.39 358.5,245C 361.993,243.996 365.159,244.496 368,246.5C 371.137,244.632 374.637,243.632 378.5,243.5C 379.772,243.57 380.938,243.903 382,244.5C 387.987,243.269 387.82,242.435 381.5,242C 380.663,240.989 380.33,239.822 380.5,238.5C 384.607,238.354 388.273,237.02 391.5,234.5C 393.687,235.322 395.353,236.822 396.5,239C 393.287,238.854 390.287,239.854 387.5,242C 388.854,243.294 390.188,243.46 391.5,242.5C 393.005,245.131 393.671,244.797 393.5,241.5C 400.757,239.895 408.09,239.395 415.5,240C 417.131,241.836 417.798,241.336 417.5,238.5C 419.492,238.328 421.158,238.995 422.5,240.5C 425.247,238.227 428.247,237.894 431.5,239.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aba198\",d:\"M 465.5,256.5 C 462.944,262.049 459.61,267.049 455.5,271.5C 454.46,265.884 453.793,260.217 453.5,254.5C 454.309,252.708 454.809,250.708 455,248.5C 460,249.5 463,252.5 464,257.5C 464.383,256.944 464.883,256.611 465.5,256.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a6a39b\",d:\"M 439.5,238.5 C 440.167,238.5 440.833,238.5 441.5,238.5C 443.371,238.859 444.871,239.859 446,241.5C 446.942,244.374 448.109,247.04 449.5,249.5C 449.5,249.833 449.5,250.167 449.5,250.5C 448.472,251.074 447.472,251.407 446.5,251.5C 448.322,257.368 449.155,263.368 449,269.5C 447.281,266.975 446.114,264.308 445.5,261.5C 444.689,254.079 442.689,247.079 439.5,240.5C 439.5,239.833 439.5,239.167 439.5,238.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f0ebed\",d:\"M 370.5,248.5 C 372.167,248.5 373.833,248.5 375.5,248.5C 375.5,249.5 375.5,250.5 375.5,251.5C 370.38,250.721 365.38,250.888 360.5,252C 363.361,253.246 366.361,254.246 369.5,255C 368,256.167 366.5,257.333 365,258.5C 364.544,257.256 365.044,256.423 366.5,256C 365.407,254.635 364.074,254.301 362.5,255C 363.198,255.971 363.198,257.137 362.5,258.5C 362.833,259.167 363.167,259.833 363.5,260.5C 365.915,259.695 368.249,258.695 370.5,257.5C 373.311,258.08 375.977,258.746 378.5,259.5C 372.531,260.385 366.531,261.052 360.5,261.5C 360.438,266.076 361.105,270.409 362.5,274.5C 364.225,274.843 364.725,275.843 364,277.5C 363.085,278.328 362.419,279.328 362,280.5C 361.667,279.833 361.333,279.167 361,278.5C 359.285,281.587 359.785,284.421 362.5,287C 361.24,289.213 360.574,291.713 360.5,294.5C 359.086,300.083 361.086,303.417 366.5,304.5C 367.308,306.423 367.808,308.423 368,310.5C 368.383,309.944 368.883,309.611 369.5,309.5C 371.667,310.198 373.5,311.531 375,313.5C 375.492,314.549 375.326,315.549 374.5,316.5C 375.328,317.415 376.328,318.081 377.5,318.5C 378.807,317.184 380.307,316.184 382,315.5C 382.914,311.815 383.581,312.148 384,316.5C 385.107,317.712 385.607,317.379 385.5,315.5C 388.698,316.036 391.365,315.369 393.5,313.5C 394.222,313.082 394.722,312.416 395,311.5C 395.383,312.056 395.883,312.389 396.5,312.5C 396.328,313.492 396.662,314.158 397.5,314.5C 397.047,315.458 396.381,316.292 395.5,317C 395.833,317.333 396.167,317.667 396.5,318C 393.408,318.934 393.075,320.1 395.5,321.5C 398.443,319.237 401.276,319.237 404,321.5C 404.333,320.167 404.667,318.833 405,317.5C 405.419,318.672 406.085,319.672 407,320.5C 409.163,319.332 411.163,318.665 413,318.5C 413.614,316.687 413.281,316.353 412,317.5C 409.316,316.932 406.816,315.932 404.5,314.5C 406.465,313.708 408.465,313.041 410.5,312.5C 411.944,313.981 412.611,313.648 412.5,311.5C 412.833,311.5 413.167,311.5 413.5,311.5C 413.944,313.113 414.944,314.28 416.5,315C 415.167,316.333 415.167,317.667 416.5,319C 418.863,318.335 421.196,318.502 423.5,319.5C 425.764,321.681 428.431,323.015 431.5,323.5C 420.474,324.753 409.474,326.087 398.5,327.5C 388.837,328.56 379.17,329.56 369.5,330.5C 371.166,347.163 372.833,363.83 374.5,380.5C 374.631,381.239 374.464,381.906 374,382.5C 373.808,380.423 373.308,378.423 372.5,376.5C 371.832,378.969 371.165,381.302 370.5,383.5C 370.5,381.5 370.5,379.5 370.5,377.5C 350.168,379.539 329.834,381.705 309.5,384C 307.593,388.518 306.926,393.352 307.5,398.5C 310.167,398.167 312.833,397.833 315.5,397.5C 318.059,397.198 320.393,397.532 322.5,398.5C 320.784,398.629 319.117,398.962 317.5,399.5C 315.621,399.393 315.288,399.893 316.5,401C 316,401.5 315.5,402 315,402.5C 314.764,400.881 313.931,399.881 312.5,399.5C 310.533,399.261 308.699,399.594 307,400.5C 305.351,399.047 303.518,398.047 301.5,397.5C 302.833,397.5 304.167,397.5 305.5,397.5C 305.5,395.5 305.5,393.5 305.5,391.5C 302.833,391.833 300.167,392.167 297.5,392.5C 297.5,391.833 297.5,391.167 297.5,390.5C 297.365,388.446 298.032,386.779 299.5,385.5C 301.781,385.923 303.448,385.256 304.5,383.5C 304.281,382.325 304.614,381.325 305.5,380.5C 306.468,381.489 307.635,382.156 309,382.5C 329.03,379.825 349.03,377.491 369,375.5C 365.487,346.057 361.653,316.724 357.5,287.5C 357.5,287.167 357.5,286.833 357.5,286.5C 356.668,279.175 355.834,271.842 355,264.5C 353.991,263.342 352.658,262.675 351,262.5C 333.03,264.629 314.863,267.295 296.5,270.5C 296.187,274.042 296.521,277.375 297.5,280.5C 297.5,280.833 297.5,281.167 297.5,281.5C 297.499,282.755 297.166,284.088 296.5,285.5C 295.833,283.5 295.167,281.5 294.5,279.5C 293.756,276.64 293.089,273.64 292.5,270.5C 293.689,269.571 295.022,269.238 296.5,269.5C 296.671,266.203 296.005,265.869 294.5,268.5C 293.914,268.291 293.414,267.957 293,267.5C 291.965,265.109 291.798,262.776 292.5,260.5C 291.388,259.735 290.721,258.735 290.5,257.5C 294.337,257.069 298.003,256.402 301.5,255.5C 302.167,255.5 302.833,255.5 303.5,255.5C 325.813,253.002 348.146,250.668 370.5,248.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#918785\",d:\"M 537.5,246.5 C 537.833,246.5 538.167,246.5 538.5,246.5C 537.868,250.431 536.201,253.765 533.5,256.5C 534.282,252.937 535.616,249.603 537.5,246.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ad988f\",d:\"M 182.5,242.5 C 173.394,248.226 164.061,253.726 154.5,259C 157.558,259.458 160.558,259.124 163.5,258C 168.909,254.297 174.576,251.13 180.5,248.5C 177.793,250.283 177.127,252.617 178.5,255.5C 173.096,257.423 167.429,258.923 161.5,260C 158.518,260.498 155.518,260.665 152.5,260.5C 151.402,259.603 151.402,258.77 152.5,258C 159.631,254.267 166.631,250.267 173.5,246C 176.309,244.259 179.309,243.092 182.5,242.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cab8b9\",d:\"M 436.5,233.5 C 437.737,234.965 438.737,236.632 439.5,238.5C 439.5,239.167 439.5,239.833 439.5,240.5C 439.441,242.186 439.108,244.186 438.5,246.5C 438.936,249.179 439.436,251.845 440,254.5C 440.333,252.5 440.667,250.5 441,248.5C 442.37,254.742 442.87,261.075 442.5,267.5C 441.907,264.5 441.074,261.5 440,258.5C 439.501,263.823 439.334,269.156 439.5,274.5C 437.966,264.986 436.632,255.319 435.5,245.5C 436.344,241.446 436.677,237.446 436.5,233.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aa8478\",d:\"M 133.5,234.5 C 134.209,233.596 135.209,233.263 136.5,233.5C 137.552,233.351 138.552,233.517 139.5,234C 137.5,235 135.5,236 133.5,237C 133.833,237.333 134.167,237.667 134.5,238C 132.126,242.036 128.626,244.536 124,245.5C 122.025,246.465 120.525,247.799 119.5,249.5C 109.968,251.3 100.302,252.467 90.5,253C 89,253.833 87.8333,255 87,256.5C 81.8435,255.286 80.6769,256.786 83.5,261C 83.1667,261.167 82.8333,261.333 82.5,261.5C 81.7492,260.624 81.2492,259.624 81,258.5C 80.31,257.262 79.81,257.262 79.5,258.5C 76.5426,256.975 75.8759,257.642 77.5,260.5C 76.1667,260.833 74.8333,261.167 73.5,261.5C 71.7819,259.777 70.4486,257.777 69.5,255.5C 70.0577,254.21 71.0577,253.377 72.5,253C 70.8839,252.385 69.5505,251.385 68.5,250C 69,249.5 69.5,249 70,248.5C 71.1021,250.818 72.6021,251.485 74.5,250.5C 77.7782,249.992 81.1116,248.992 84.5,247.5C 87.979,248.032 91.479,248.365 95,248.5C 102.101,247.308 109.267,246.475 116.5,246C 123.042,243.387 129.042,239.721 134.5,235C 134.272,234.601 133.938,234.435 133.5,234.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f5f1e8\",d:\"M 233.5,219.5 C 233.938,220.506 234.604,220.506 235.5,219.5C 235.719,220.675 235.386,221.675 234.5,222.5C 229.853,224.95 228.353,228.617 230,233.5C 228.883,232.051 228.216,230.384 228,228.5C 223.98,231.686 220.48,235.353 217.5,239.5C 219.955,240.91 220.955,243.077 220.5,246C 220.716,249.498 219.716,252.498 217.5,255C 220.572,255.8 222.239,254.633 222.5,251.5C 225.916,252.248 229.249,252.248 232.5,251.5C 232.833,250.833 233.167,250.167 233.5,249.5C 230.781,243.233 231.614,242.9 236,248.5C 237.813,247.391 238.646,248.058 238.5,250.5C 241.448,250.777 244.281,250.444 247,249.5C 248.11,251.037 249.61,251.703 251.5,251.5C 252.496,251.586 253.329,251.252 254,250.5C 254.5,251.667 255.333,252.5 256.5,253C 258.833,253.333 261.167,253.667 263.5,254C 264.989,255.468 266.323,256.968 267.5,258.5C 256.475,258.643 245.809,260.31 235.5,263.5C 232.124,265.082 228.458,265.749 224.5,265.5C 213.15,265.607 201.65,265.274 190,264.5C 185.546,265.493 181.046,266.16 176.5,266.5C 178.214,265.262 180.214,264.595 182.5,264.5C 182.421,263.07 182.754,261.736 183.5,260.5C 178.497,259.334 173.497,259.334 168.5,260.5C 168.36,262.124 169.027,263.29 170.5,264C 168.97,265.12 167.303,265.954 165.5,266.5C 165.5,264.833 165.5,263.167 165.5,261.5C 152.52,260.482 139.853,261.815 127.5,265.5C 127.782,264.222 128.449,263.222 129.5,262.5C 137.058,260.862 144.725,260.196 152.5,260.5C 155.518,260.665 158.518,260.498 161.5,260C 167.429,258.923 173.096,257.423 178.5,255.5C 179.931,255.119 180.764,254.119 181,252.5C 181.388,253.428 182.055,254.095 183,254.5C 192.231,252.6 200.731,249.1 208.5,244C 215.08,238.577 221.08,232.744 226.5,226.5C 227.167,226.5 227.5,226.167 227.5,225.5C 229.5,223.5 231.5,221.5 233.5,219.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d4cfc3\",d:\"M 213.5,241.5 C 216.404,242.102 218.07,243.935 218.5,247C 216.924,249.951 216.257,253.117 216.5,256.5C 208.406,255.999 200.239,256.666 192,258.5C 188.715,258.3 187.882,256.8 189.5,254C 190.793,253.51 192.127,253.343 193.5,253.5C 193.281,254.675 193.614,255.675 194.5,256.5C 195.167,255.167 195.833,253.833 196.5,252.5C 202.991,249.991 208.658,246.324 213.5,241.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#604732\",d:\"M 64.5,251.5 C 65.675,251.281 66.675,251.614 67.5,252.5C 65.9852,253.591 65.1519,254.924 65,256.5C 66.4681,254.964 67.9681,254.63 69.5,255.5C 70.4486,257.777 71.7819,259.777 73.5,261.5C 73.3691,262.376 73.7025,263.043 74.5,263.5C 78.1096,262.153 78.4429,262.82 75.5,265.5C 76.432,268.635 78.0987,271.301 80.5,273.5C 83.8229,272.062 84.1562,270.229 81.5,268C 82.4162,267.626 83.2496,267.126 84,266.5C 84.4186,267.672 85.0853,268.672 86,269.5C 85.0122,271.855 83.5122,274.022 81.5,276C 84.0314,281.059 87.0314,286.393 90.5,292C 95.1671,291.233 99.5004,289.4 103.5,286.5C 103.833,287.167 104.167,287.833 104.5,288.5C 106.941,286.728 109.608,285.394 112.5,284.5C 113.298,284.957 113.631,285.624 113.5,286.5C 113.672,287.492 113.338,288.158 112.5,288.5C 108.374,289.484 104.54,291.151 101,293.5C 97.2001,292.62 93.3668,292.62 89.5,293.5C 87.5853,293.784 85.9187,293.451 84.5,292.5C 84.9175,291.778 85.5842,291.278 86.5,291C 86.1667,290.667 85.8333,290.333 85.5,290C 82.4686,289.505 79.4686,289.671 76.5,290.5C 76.3505,289.448 76.5172,288.448 77,287.5C 77.7175,288.451 78.5509,288.617 79.5,288C 78.8333,286.667 77.8333,285.667 76.5,285C 77.6039,283.869 77.2705,283.035 75.5,282.5C 74.2638,283.246 72.9305,283.579 71.5,283.5C 69.3812,283.532 68.0478,282.532 67.5,280.5C 69.0348,280.345 70.3681,279.178 71.5,277C 70.0039,276.493 68.8373,276.993 68,278.5C 67.4926,277.004 67.9926,275.837 69.5,275C 67.6079,274.027 65.6079,273.36 63.5,273C 64.5,272.667 65.5,272.333 66.5,272C 64.8659,271.506 63.1992,271.34 61.5,271.5C 63.2998,266.775 61.6332,263.775 56.5,262.5C 55.4388,259.378 54.1054,256.378 52.5,253.5C 56.6163,253.459 60.6163,252.793 64.5,251.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cdc6bb\",d:\"M 241.5,251.5 C 248.817,253.063 256.15,254.563 263.5,256C 254.671,256.853 246.004,258.52 237.5,261C 227.699,262.795 218.032,263.295 208.5,262.5C 209.309,260.929 209.643,259.262 209.5,257.5C 213.535,257.607 217.535,257.274 221.5,256.5C 224.89,259.641 227.223,258.975 228.5,254.5C 229.787,262.175 230.787,261.841 231.5,253.5C 233.144,253.714 234.644,253.38 236,252.5C 237.333,254.5 238.667,256.5 240,258.5C 240.496,256.965 240.33,255.465 239.5,254C 240.056,252.989 240.722,252.156 241.5,251.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#43261d\",d:\"M 79.5,258.5 C 80.8333,261.167 80.1667,261.833 77.5,260.5C 75.8759,257.642 76.5426,256.975 79.5,258.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c9c3ba\",d:\"M 204.5,257.5 C 207.294,258.585 207.961,260.418 206.5,263C 205.5,263.167 204.5,263.333 203.5,263.5C 199.31,263.333 194.976,263.166 190.5,263C 189.663,261.989 189.33,260.822 189.5,259.5C 194.71,259.392 199.71,258.725 204.5,257.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#eee5e1\",d:\"M 439.5,240.5 C 442.689,247.079 444.689,254.079 445.5,261.5C 445.344,269.529 445.677,277.529 446.5,285.5C 445.5,283.5 444.5,281.5 443.5,279.5C 443.495,275.466 443.162,271.466 442.5,267.5C 442.87,261.075 442.37,254.742 441,248.5C 440.667,250.5 440.333,252.5 440,254.5C 439.436,251.845 438.936,249.179 438.5,246.5C 439.108,244.186 439.441,242.186 439.5,240.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b2a69f\",d:\"M 273.5,251.5 C 274.624,254.042 275.458,256.708 276,259.5C 276.434,255.452 276.434,251.452 276,247.5C 276.914,249.664 278.081,251.664 279.5,253.5C 278.48,255.432 278.313,257.432 279,259.5C 279.29,257.956 279.956,256.623 281,255.5C 282.533,255.944 284.033,256.277 285.5,256.5C 286.806,255.088 287.64,253.421 288,251.5C 288.717,252.044 289.217,252.711 289.5,253.5C 290.183,255.176 291.517,255.843 293.5,255.5C 296.167,255.5 298.833,255.5 301.5,255.5C 298.003,256.402 294.337,257.069 290.5,257.5C 288.143,257.337 285.81,257.503 283.5,258C 283.014,260.027 283.014,262.193 283.5,264.5C 282.732,263.737 282.232,262.737 282,261.5C 281.259,262.641 280.425,262.641 279.5,261.5C 278.148,262.518 277.148,263.851 276.5,265.5C 275.264,266.246 273.93,266.579 272.5,266.5C 272.662,264.473 272.495,262.473 272,260.5C 259.934,260.908 247.767,261.908 235.5,263.5C 245.809,260.31 256.475,258.643 267.5,258.5C 271.151,258.771 272.485,257.437 271.5,254.5C 271.373,252.085 271.207,249.751 271,247.5C 272.095,248.693 272.928,250.027 273.5,251.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a69398\",d:\"M 519.5,255.5 C 518.347,256.313 518.347,257.313 519.5,258.5C 520.776,259.645 522.109,259.645 523.5,258.5C 524.354,259.948 525.354,261.281 526.5,262.5C 525.311,263.429 523.978,263.762 522.5,263.5C 522.719,264.675 522.386,265.675 521.5,266.5C 521.382,264.917 520.549,263.251 519,261.5C 518.329,262.252 517.496,262.586 516.5,262.5C 512.293,263.681 508.96,262.348 506.5,258.5C 507.644,256.9 508.811,255.233 510,253.5C 510.617,254.449 510.451,255.282 509.5,256C 510,256.167 510.5,256.333 511,256.5C 513.838,254.618 516.671,254.285 519.5,255.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c4a396\",d:\"M 119.5,249.5 C 119.5,250.5 119.5,251.5 119.5,252.5C 116.801,252.466 114.301,253.133 112,254.5C 111.667,254.167 111.333,253.833 111,253.5C 109.312,254.325 109.145,255.325 110.5,256.5C 108.107,258.738 105.94,258.738 104,256.5C 101.595,257.274 99.095,257.774 96.5,258C 97.6405,258.741 97.6405,259.575 96.5,260.5C 97.1449,261.646 97.9783,262.646 99,263.5C 101.468,263.248 103.968,262.914 106.5,262.5C 107.59,263.391 107.59,264.391 106.5,265.5C 108.259,266.754 109.759,266.421 111,264.5C 112.133,266.211 113.633,266.711 115.5,266C 114.692,265.692 114.025,265.192 113.5,264.5C 114.646,263.281 115.646,261.948 116.5,260.5C 117.386,261.325 117.719,262.325 117.5,263.5C 118.5,263.5 119.5,263.5 120.5,263.5C 120.077,265.781 120.744,267.448 122.5,268.5C 123.167,268.5 123.5,268.833 123.5,269.5C 124.552,271.256 126.219,271.923 128.5,271.5C 127.571,272.315 126.571,273.148 125.5,274C 128.146,274.497 130.813,274.664 133.5,274.5C 128.651,275.166 123.651,275.833 118.5,276.5C 117.273,277.59 116.44,278.924 116,280.5C 115.667,280.167 115.333,279.833 115,279.5C 114.814,282.036 114.314,284.369 113.5,286.5C 113.631,285.624 113.298,284.957 112.5,284.5C 109.608,285.394 106.941,286.728 104.5,288.5C 104.167,287.833 103.833,287.167 103.5,286.5C 99.5004,289.4 95.1671,291.233 90.5,292C 87.0314,286.393 84.0314,281.059 81.5,276C 83.5122,274.022 85.0122,271.855 86,269.5C 85.0853,268.672 84.4186,267.672 84,266.5C 83.2496,267.126 82.4162,267.626 81.5,268C 84.1562,270.229 83.8229,272.062 80.5,273.5C 78.0987,271.301 76.432,268.635 75.5,265.5C 78.4429,262.82 78.1096,262.153 74.5,263.5C 73.7025,263.043 73.3691,262.376 73.5,261.5C 74.8333,261.167 76.1667,260.833 77.5,260.5C 80.1667,261.833 80.8333,261.167 79.5,258.5C 79.81,257.262 80.31,257.262 81,258.5C 81.2492,259.624 81.7492,260.624 82.5,261.5C 82.8333,261.333 83.1667,261.167 83.5,261C 80.6769,256.786 81.8435,255.286 87,256.5C 87.8333,255 89,253.833 90.5,253C 100.302,252.467 109.968,251.3 119.5,249.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c3b0a7\",d:\"M 165.5,266.5 C 163.156,268.711 160.49,269.045 157.5,267.5C 146.21,269.436 134.877,270.103 123.5,269.5C 123.5,268.833 123.167,268.5 122.5,268.5C 123.598,267.603 123.598,266.77 122.5,266C 124.134,265.506 125.801,265.34 127.5,265.5C 139.853,261.815 152.52,260.482 165.5,261.5C 165.5,263.167 165.5,264.833 165.5,266.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8b7069\",d:\"M 146.5,262.5 C 149.85,262.335 153.183,262.502 156.5,263C 153.692,263.598 151.192,264.765 149,266.5C 149.077,265.262 148.911,264.262 148.5,263.5C 145.427,268.253 141.094,269.753 135.5,268C 139.259,266.121 142.925,264.287 146.5,262.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cec6bd\",d:\"M 176.5,266.5 C 173.303,266.973 170.137,267.639 167,268.5C 165.97,268.164 165.47,267.497 165.5,266.5C 167.303,265.954 168.97,265.12 170.5,264C 169.027,263.29 168.36,262.124 168.5,260.5C 173.497,259.334 178.497,259.334 183.5,260.5C 182.754,261.736 182.421,263.07 182.5,264.5C 180.214,264.595 178.214,265.262 176.5,266.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f0edf0\",d:\"M 272.5,266.5 C 271.508,266.328 270.842,266.662 270.5,267.5C 267.302,266.964 264.635,267.631 262.5,269.5C 262.643,271.262 262.309,272.929 261.5,274.5C 255.26,276.072 248.927,277.072 242.5,277.5C 239.813,277.664 237.146,277.497 234.5,277C 235.949,275.883 237.616,275.216 239.5,275C 234.313,273.028 228.98,272.361 223.5,273C 225.833,273.333 228.167,273.667 230.5,274C 227.574,274.218 224.74,274.718 222,275.5C 220.53,274.733 219.03,274.067 217.5,273.5C 212.542,274.75 207.542,274.75 202.5,273.5C 199.751,273.726 197.084,273.393 194.5,272.5C 186.682,274.729 178.682,276.063 170.5,276.5C 166.917,275.482 163.25,274.649 159.5,274C 166.134,273.177 166.134,272.677 159.5,272.5C 180.976,269.715 202.643,267.382 224.5,265.5C 228.458,265.749 232.124,265.082 235.5,263.5C 247.767,261.908 259.934,260.908 272,260.5C 272.495,262.473 272.662,264.473 272.5,266.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#33302d\",d:\"M 290.5,264.5 C 290.5,265.833 290.5,267.167 290.5,268.5C 289.5,268.5 288.5,268.5 287.5,268.5C 287.5,267.5 287.5,266.5 287.5,265.5C 288.209,264.596 289.209,264.263 290.5,264.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a69d95\",d:\"M 290.5,264.5 C 291.451,265.919 291.784,267.585 291.5,269.5C 289.801,269.34 288.134,269.506 286.5,270C 285.244,270.417 284.577,271.25 284.5,272.5C 283.766,271.122 283.099,269.622 282.5,268C 282.833,267.667 283.167,267.333 283.5,267C 278.206,266.182 278.206,265.682 283.5,265.5C 284.833,265.5 286.167,265.5 287.5,265.5C 287.5,266.5 287.5,267.5 287.5,268.5C 288.5,268.5 289.5,268.5 290.5,268.5C 290.5,267.167 290.5,265.833 290.5,264.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#827470\",d:\"M 418.5,266.5 C 403.386,268.51 388.386,270.51 373.5,272.5C 369.613,272.646 365.946,273.313 362.5,274.5C 361.105,270.409 360.438,266.076 360.5,261.5C 366.531,261.052 372.531,260.385 378.5,259.5C 393.378,256.884 408.378,255.217 423.5,254.5C 424.272,258.452 424.605,262.452 424.5,266.5C 422.5,266.5 420.5,266.5 418.5,266.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bbaca8\",d:\"M 373.5,262.5 C 374.75,262.577 375.583,263.244 376,264.5C 378.007,263.331 380.173,262.665 382.5,262.5C 383.032,267.797 383.866,267.797 385,262.5C 386.269,263.905 386.769,265.571 386.5,267.5C 382.358,268.231 378.358,268.565 374.5,268.5C 373.833,268.167 373.167,267.833 372.5,267.5C 372.579,265.872 372.912,264.205 373.5,262.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c7b6b4\",d:\"M 401.5,259.5 C 403.857,259.337 406.19,259.503 408.5,260C 406.595,260.826 406.261,261.993 407.5,263.5C 408.086,263.291 408.586,262.957 409,262.5C 409.591,263.483 409.257,264.15 408,264.5C 404.621,265.761 401.288,265.761 398,264.5C 395.699,265.867 393.199,266.534 390.5,266.5C 390.709,260.739 391.542,260.406 393,265.5C 395.122,264.78 395.622,263.613 394.5,262C 397.2,259.595 399.033,260.095 400,263.5C 400.791,262.255 401.291,260.922 401.5,259.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#827467\",d:\"M 56.5,262.5 C 61.6332,263.775 63.2998,266.775 61.5,271.5C 63.1992,271.34 64.8659,271.506 66.5,272C 65.5,272.333 64.5,272.667 63.5,273C 65.6079,273.36 67.6079,274.027 69.5,275C 67.9926,275.837 67.4926,277.004 68,278.5C 68.8373,276.993 70.0039,276.493 71.5,277C 70.3681,279.178 69.0348,280.345 67.5,280.5C 66.6942,279.003 66.0276,277.336 65.5,275.5C 64.5754,274.438 63.5754,274.438 62.5,275.5C 59.7347,271.545 57.7347,267.212 56.5,262.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bebab5\",d:\"M 224.5,265.5 C 202.643,267.382 180.976,269.715 159.5,272.5C 158.325,272.719 157.325,272.386 156.5,271.5C 162.798,270.579 168.965,269.246 175,267.5C 176.107,268.712 176.607,268.379 176.5,266.5C 181.046,266.16 185.546,265.493 190,264.5C 201.65,265.274 213.15,265.607 224.5,265.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a79b87\",d:\"M -0.5,252.5 C 2.51838,252.335 5.51838,252.502 8.5,253C 10.4053,254.87 12.5719,256.37 15,257.5C 14.9227,258.738 15.0894,259.738 15.5,260.5C 20.2736,257.472 24.6069,257.972 28.5,262C 27.8333,262.333 27.1667,262.667 26.5,263C 28.8333,264.5 31.1667,266 33.5,267.5C 33.8333,266.833 34.1667,266.167 34.5,265.5C 35.9093,266.849 37.2426,268.182 38.5,269.5C 37.4168,269.461 36.4168,269.127 35.5,268.5C 29.9734,270.366 24.3067,271.7 18.5,272.5C 14.8019,269.672 14.1352,270.005 16.5,273.5C 18.2601,276.021 20.5934,276.854 23.5,276C 21.0958,275.492 20.4291,274.325 21.5,272.5C 24.7947,273.449 28.128,273.449 31.5,272.5C 31.528,274.582 30.8613,276.416 29.5,278C 31.4665,277.76 33.2998,276.927 35,275.5C 36.9597,276.292 38.4597,277.625 39.5,279.5C 34.1925,280.634 28.8592,281.134 23.5,281C 24.7112,280.107 24.7112,279.274 23.5,278.5C 21.2241,277.787 18.8907,277.287 16.5,277C 15.3067,274.973 13.64,273.473 11.5,272.5C 11.1667,272.667 10.8333,272.833 10.5,273C 14.5228,276.653 14.1894,277.153 9.5,274.5C 8.49367,274.938 8.49367,275.604 9.5,276.5C 12.6017,277.979 15.6017,279.645 18.5,281.5C 12.2038,282.552 5.87045,283.219 -0.5,283.5C -0.5,273.167 -0.5,262.833 -0.5,252.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8a7f7a\",d:\"M 272.5,266.5 C 273.414,269.728 273.747,273.061 273.5,276.5C 273.5,277.5 273.5,278.5 273.5,279.5C 271.379,279.325 269.379,279.659 267.5,280.5C 266.791,279.596 265.791,279.263 264.5,279.5C 266.684,278.734 269.018,278.067 271.5,277.5C 272.474,275.257 272.808,272.924 272.5,270.5C 270.833,270.5 269.167,270.5 267.5,270.5C 266.957,270.44 266.624,270.107 266.5,269.5C 267.949,268.828 269.282,268.161 270.5,267.5C 270.842,266.662 271.508,266.328 272.5,266.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#eee2de\",d:\"M 563.5,251.5 C 563.5,267.167 563.5,282.833 563.5,298.5C 561.932,299.473 560.265,299.64 558.5,299C 559.056,298.617 559.389,298.117 559.5,297.5C 559.631,296.624 559.298,295.957 558.5,295.5C 552.466,292.441 546.466,289.441 540.5,286.5C 535.395,283.108 530.062,279.941 524.5,277C 525.406,274.779 526.406,272.612 527.5,270.5C 530.018,266.123 532.018,261.456 533.5,256.5C 536.201,253.765 537.868,250.431 538.5,246.5C 540.474,244.572 541.974,242.239 543,239.5C 545.114,240.953 546.448,242.953 547,245.5C 547.333,245.167 547.667,244.833 548,244.5C 548.374,245.416 548.874,246.25 549.5,247C 548.304,247.654 548.304,248.154 549.5,248.5C 550.243,247.092 551.077,245.759 552,244.5C 552.656,248.002 553.989,248.002 556,244.5C 556.617,245.449 556.451,246.282 555.5,247C 557.878,247.511 560.212,248.178 562.5,249C 558.958,249.882 559.292,250.715 563.5,251.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#464445\",d:\"M 270.5,267.5 C 269.282,268.161 267.949,268.828 266.5,269.5C 266.624,270.107 266.957,270.44 267.5,270.5C 266.713,272.104 265.38,272.771 263.5,272.5C 263.737,271.209 263.404,270.209 262.5,269.5C 264.635,267.631 267.302,266.964 270.5,267.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#898088\",d:\"M 420.5,271.5 C 420.294,273.549 419.461,273.883 418,272.5C 415.313,273.713 412.48,274.38 409.5,274.5C 406.767,272.613 407.267,271.613 411,271.5C 414.241,270.471 417.407,270.471 420.5,271.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e3cccf\",d:\"M 502.5,255.5 C 504.03,256.211 505.363,257.211 506.5,258.5C 508.96,262.348 512.293,263.681 516.5,262.5C 515.828,263.267 514.995,263.934 514,264.5C 512.151,267.11 511.318,269.777 511.5,272.5C 506.402,275.463 503.068,279.963 501.5,286C 502.923,287.412 502.756,288.579 501,289.5C 500.667,288.833 500.333,288.167 500,287.5C 499.421,291.203 499.588,294.869 500.5,298.5C 499.282,297.269 497.949,296.102 496.5,295C 497.784,293.703 497.617,292.536 496,291.5C 494.999,294.173 493.499,296.507 491.5,298.5C 489.071,299.292 486.905,299.292 485,298.5C 484.667,299.167 484.333,299.833 484,300.5C 481.8,298.385 479.8,296.051 478,293.5C 477.667,294.5 477.333,295.5 477,296.5C 474.931,293.594 472.431,291.261 469.5,289.5C 470.583,289.539 471.583,289.873 472.5,290.5C 473.833,289.833 473.833,289.167 472.5,288.5C 466.975,284.574 461.309,280.907 455.5,277.5C 455.5,275.5 455.5,273.5 455.5,271.5C 459.61,267.049 462.944,262.049 465.5,256.5C 470.022,251.664 473.689,246.33 476.5,240.5C 478.484,240.383 480.15,241.05 481.5,242.5C 478.869,244.005 479.203,244.671 482.5,244.5C 482.281,245.675 482.614,246.675 483.5,247.5C 488.403,247.95 492.736,250.117 496.5,254C 498.345,255.128 500.345,255.628 502.5,255.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#745e59\",d:\"M 133.5,274.5 C 130.813,274.664 128.146,274.497 125.5,274C 126.571,273.148 127.571,272.315 128.5,271.5C 135.117,270.411 141.783,270.244 148.5,271C 148.043,271.414 147.709,271.914 147.5,272.5C 142.88,273.532 138.214,274.198 133.5,274.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e6e2e8\",d:\"M 431.5,238.5 C 434.987,239.483 436.32,241.817 435.5,245.5C 436.632,255.319 437.966,264.986 439.5,274.5C 440.74,285.846 442.073,297.179 443.5,308.5C 442.698,307.048 442.198,305.382 442,303.5C 441.503,306.146 441.336,308.813 441.5,311.5C 440.732,310.737 440.232,309.737 440,308.5C 439.51,309.793 439.343,311.127 439.5,312.5C 437.409,312.682 435.409,312.348 433.5,311.5C 432.614,310.675 432.281,309.675 432.5,308.5C 433.873,308.657 435.207,308.49 436.5,308C 431.825,306.37 431.492,303.87 435.5,300.5C 433.268,296.838 432.935,293.005 434.5,289C 434.137,284.108 433.137,279.442 431.5,275C 432.337,273.989 432.67,272.822 432.5,271.5C 430.5,271.5 428.5,271.5 426.5,271.5C 424.239,270.383 422.072,269.05 420,267.5C 418.893,268.712 418.393,268.379 418.5,266.5C 420.5,266.5 422.5,266.5 424.5,266.5C 424.605,262.452 424.272,258.452 423.5,254.5C 408.378,255.217 393.378,256.884 378.5,259.5C 375.977,258.746 373.311,258.08 370.5,257.5C 368.249,258.695 365.915,259.695 363.5,260.5C 363.167,259.833 362.833,259.167 362.5,258.5C 363.198,257.137 363.198,255.971 362.5,255C 364.074,254.301 365.407,254.635 366.5,256C 365.044,256.423 364.544,257.256 365,258.5C 366.5,257.333 368,256.167 369.5,255C 366.361,254.246 363.361,253.246 360.5,252C 365.38,250.888 370.38,250.721 375.5,251.5C 375.5,250.5 375.5,249.5 375.5,248.5C 373.833,248.5 372.167,248.5 370.5,248.5C 386.697,246.108 403.03,243.775 419.5,241.5C 420.167,241.833 420.833,242.167 421.5,242.5C 424.897,241.283 428.23,240.283 431.5,239.5C 431.5,239.167 431.5,238.833 431.5,238.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c6c1bb\",d:\"M 449.5,250.5 C 451.476,260.138 453.142,269.971 454.5,280C 454,283.5 453.5,287 453,290.5C 452.692,289.692 452.192,289.025 451.5,288.5C 450.345,291.446 450.179,294.446 451,297.5C 455.072,311.026 458.572,324.693 461.5,338.5C 459.784,338.629 458.117,338.962 456.5,339.5C 454.339,327.518 452.172,315.518 450,303.5C 449.554,295.04 449.721,286.707 450.5,278.5C 450.167,278.167 449.833,277.833 449.5,277.5C 448.675,281.122 448.175,284.789 448,288.5C 447.768,287.263 447.268,286.263 446.5,285.5C 445.677,277.529 445.344,269.529 445.5,261.5C 446.114,264.308 447.281,266.975 449,269.5C 449.155,263.368 448.322,257.368 446.5,251.5C 447.472,251.407 448.472,251.074 449.5,250.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#644c3f\",d:\"M 283.5,264.5 C 283.5,264.833 283.5,265.167 283.5,265.5C 278.206,265.682 278.206,266.182 283.5,267C 283.167,267.333 282.833,267.667 282.5,268C 283.099,269.622 283.766,271.122 284.5,272.5C 284.5,273.5 284.5,274.5 284.5,275.5C 282.708,276.309 280.708,276.809 278.5,277C 280.577,277.192 282.577,277.692 284.5,278.5C 281.694,279.168 279.028,279.834 276.5,280.5C 275.022,279.552 274.022,278.219 273.5,276.5C 273.747,273.061 273.414,269.728 272.5,266.5C 273.93,266.579 275.264,266.246 276.5,265.5C 277.148,263.851 278.148,262.518 279.5,261.5C 280.425,262.641 281.259,262.641 282,261.5C 282.232,262.737 282.732,263.737 283.5,264.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aa8f73\",d:\"M 332.5,277.5 C 320.842,278.888 309.175,280.222 297.5,281.5C 297.5,281.167 297.5,280.833 297.5,280.5C 314.601,277.528 331.935,275.194 349.5,273.5C 354.348,274.048 354.515,274.714 350,275.5C 344.1,276.042 338.266,276.708 332.5,277.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#907c7c\",d:\"M 442.5,267.5 C 443.162,271.466 443.495,275.466 443.5,279.5C 443.334,284.179 443.501,288.845 444,293.5C 444.145,297.037 444.978,300.371 446.5,303.5C 447.498,311.807 447.831,320.14 447.5,328.5C 447.784,330.415 447.451,332.081 446.5,333.5C 444.956,325.233 443.956,316.9 443.5,308.5C 442.073,297.179 440.74,285.846 439.5,274.5C 439.334,269.156 439.501,263.823 440,258.5C 441.074,261.5 441.907,264.5 442.5,267.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#5d3d30\",d:\"M 89.5,276.5 C 90.4793,277.765 91.4793,279.099 92.5,280.5C 91.6518,282.283 90.3185,282.783 88.5,282C 91.1667,281.333 91.1667,280.667 88.5,280C 89.6341,278.984 89.3008,278.317 87.5,278C 88.4158,277.722 89.0825,277.222 89.5,276.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#3d3c39\",d:\"M 290.5,275.5 C 292.256,276.552 292.923,278.219 292.5,280.5C 291.5,280.5 290.5,280.5 289.5,280.5C 289.366,278.708 289.699,277.042 290.5,275.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#927e86\",d:\"M 519.5,255.5 C 521.199,255.34 522.866,255.506 524.5,256C 526.127,258.754 527.627,261.588 529,264.5C 530.232,261.588 531.732,258.922 533.5,256.5C 532.018,261.456 530.018,266.123 527.5,270.5C 527.19,269.262 526.69,269.262 526,270.5C 523.284,273.871 522.451,277.537 523.5,281.5C 524.063,283.91 524.563,286.243 525,288.5C 524.097,287.299 522.931,286.465 521.5,286C 521.833,285.667 522.167,285.333 522.5,285C 521.167,285 519.833,285 518.5,285C 520.26,284.035 520.594,282.868 519.5,281.5C 518.676,283.748 517.676,283.914 516.5,282C 516.833,281.667 517.167,281.333 517.5,281C 513.198,277.638 513.532,276.305 518.5,277C 518.043,276.586 517.709,276.086 517.5,275.5C 518.274,274.289 519.107,274.289 520,275.5C 520.418,273.212 519.751,271.212 518,269.5C 518.203,273.637 516.37,275.137 512.5,274C 511.944,273.617 511.611,273.117 511.5,272.5C 511.318,269.777 512.151,267.11 514,264.5C 514.995,263.934 515.828,263.267 516.5,262.5C 517.496,262.586 518.329,262.252 519,261.5C 520.549,263.251 521.382,264.917 521.5,266.5C 522.386,265.675 522.719,264.675 522.5,263.5C 523.978,263.762 525.311,263.429 526.5,262.5C 525.354,261.281 524.354,259.948 523.5,258.5C 522.109,259.645 520.776,259.645 519.5,258.5C 518.347,257.313 518.347,256.313 519.5,255.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b2a696\",d:\"M 67.5,280.5 C 68.0478,282.532 69.3812,283.532 71.5,283.5C 72.1408,284.482 72.8075,285.482 73.5,286.5C 72.3984,287.176 71.3984,287.842 70.5,288.5C 67.0824,284.672 64.4157,280.339 62.5,275.5C 63.5754,274.438 64.5754,274.438 65.5,275.5C 66.0276,277.336 66.6942,279.003 67.5,280.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d5c5c9\",d:\"M 202.5,273.5 C 201.602,274.158 200.602,274.824 199.5,275.5C 200.167,275.833 200.833,276.167 201.5,276.5C 200.37,277.622 199.703,278.956 199.5,280.5C 198.833,280.5 198.167,280.5 197.5,280.5C 198.199,278.554 197.865,276.554 196.5,274.5C 195.749,275.376 195.249,276.376 195,277.5C 194.751,276.376 194.251,275.376 193.5,274.5C 189.862,275.247 186.195,275.914 182.5,276.5C 180.647,277.189 179.481,278.522 179,280.5C 178,276.5 177,276.5 176,280.5C 172.458,276.699 171.792,277.366 174,282.5C 175.285,282.402 176.451,282.402 177.5,282.5C 175.393,283.468 173.059,283.802 170.5,283.5C 168.615,281.947 167.615,279.947 167.5,277.5C 168.791,277.737 169.791,277.404 170.5,276.5C 178.682,276.063 186.682,274.729 194.5,272.5C 197.084,273.393 199.751,273.726 202.5,273.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b39ea3\",d:\"M 217.5,273.5 C 217.719,274.675 217.386,275.675 216.5,276.5C 211.171,278.989 205.504,280.322 199.5,280.5C 199.703,278.956 200.37,277.622 201.5,276.5C 200.833,276.167 200.167,275.833 199.5,275.5C 200.602,274.824 201.602,274.158 202.5,273.5C 207.542,274.75 212.542,274.75 217.5,273.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#82767e\",d:\"M 412.5,277.5 C 413.043,277.56 413.376,277.893 413.5,278.5C 411.107,280.738 408.94,280.738 407,278.5C 406.601,278.728 406.435,279.062 406.5,279.5C 404.797,280.66 404.131,279.993 404.5,277.5C 406.451,277.227 407.951,277.893 409,279.5C 409.816,278.177 410.983,277.511 412.5,277.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f2efef\",d:\"M 165.5,266.5 C 165.47,267.497 165.97,268.164 167,268.5C 170.137,267.639 173.303,266.973 176.5,266.5C 176.607,268.379 176.107,268.712 175,267.5C 168.965,269.246 162.798,270.579 156.5,271.5C 157.325,272.386 158.325,272.719 159.5,272.5C 166.134,272.677 166.134,273.177 159.5,274C 163.25,274.649 166.917,275.482 170.5,276.5C 169.791,277.404 168.791,277.737 167.5,277.5C 167.615,279.947 168.615,281.947 170.5,283.5C 170.611,284.117 170.944,284.617 171.5,285C 164.144,285.836 156.81,286.836 149.5,288C 152.833,288.333 156.167,288.667 159.5,289C 157.956,289.29 156.623,289.956 155.5,291C 157.686,291.604 157.852,292.77 156,294.5C 154.667,293.833 153.333,293.167 152,292.5C 148.406,293.327 144.739,293.993 141,294.5C 136.605,293.138 132.105,292.304 127.5,292C 134.14,290.837 140.807,289.837 147.5,289C 145.167,288.833 142.833,288.667 140.5,288.5C 133.738,289.259 127.071,289.759 120.5,290C 121.167,290.333 121.833,290.667 122.5,291C 121.167,291.667 121.167,292.333 122.5,293C 121.5,293.333 120.5,293.667 119.5,294C 120.566,295.159 120.233,295.992 118.5,296.5C 118.482,292.393 117.815,288.393 116.5,284.5C 115.702,284.957 115.369,285.624 115.5,286.5C 115.223,289.058 114.223,290.391 112.5,290.5C 112.5,289.833 112.5,289.167 112.5,288.5C 113.338,288.158 113.672,287.492 113.5,286.5C 114.314,284.369 114.814,282.036 115,279.5C 115.333,279.833 115.667,280.167 116,280.5C 116.44,278.924 117.273,277.59 118.5,276.5C 123.651,275.833 128.651,275.166 133.5,274.5C 138.214,274.198 142.88,273.532 147.5,272.5C 147.709,271.914 148.043,271.414 148.5,271C 141.783,270.244 135.117,270.411 128.5,271.5C 126.219,271.923 124.552,271.256 123.5,269.5C 134.877,270.103 146.21,269.436 157.5,267.5C 160.49,269.045 163.156,268.711 165.5,266.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ac999b\",d:\"M 197.5,280.5 C 193.332,281.333 189.498,281.333 186,280.5C 183.519,282.314 180.685,282.98 177.5,282.5C 176.451,282.402 175.285,282.402 174,282.5C 171.792,277.366 172.458,276.699 176,280.5C 177,276.5 178,276.5 179,280.5C 179.481,278.522 180.647,277.189 182.5,276.5C 186.195,275.914 189.862,275.247 193.5,274.5C 194.251,275.376 194.751,276.376 195,277.5C 195.249,276.376 195.749,275.376 196.5,274.5C 197.865,276.554 198.199,278.554 197.5,280.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9e938a\",d:\"M 284.5,275.5 C 286.451,276.641 288.451,276.641 290.5,275.5C 289.699,277.042 289.366,278.708 289.5,280.5C 288.005,280.989 286.671,281.655 285.5,282.5C 284.601,281.528 283.434,280.862 282,280.5C 280.096,281.63 278.263,281.63 276.5,280.5C 279.028,279.834 281.694,279.168 284.5,278.5C 282.577,277.692 280.577,277.192 278.5,277C 280.708,276.809 282.708,276.309 284.5,275.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#948079\",d:\"M 333.5,280.5 C 334.925,278.969 335.591,279.302 335.5,281.5C 334.527,282.791 333.527,282.791 332.5,281.5C 331.808,282.025 331.308,282.692 331,283.5C 328.667,283.167 326.333,282.833 324,282.5C 322.075,284.973 320.242,284.973 318.5,282.5C 318.833,281.5 319.5,280.833 320.5,280.5C 324.733,280.007 329.067,280.007 333.5,280.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#4c3b3f\",d:\"M 527.5,270.5 C 526.406,272.612 525.406,274.779 524.5,277C 530.062,279.941 535.395,283.108 540.5,286.5C 538.559,286.131 536.725,285.464 535,284.5C 533.732,284.616 532.398,284.949 531,285.5C 529.667,284.167 528.333,282.833 527,281.5C 526.601,281.728 526.435,282.062 526.5,282.5C 525.391,282.443 524.391,282.11 523.5,281.5C 522.451,277.537 523.284,273.871 526,270.5C 526.69,269.262 527.19,269.262 527.5,270.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d4c9ce\",d:\"M 418.5,266.5 C 418.393,268.379 418.893,268.712 420,267.5C 422.072,269.05 424.239,270.383 426.5,271.5C 424.5,272.833 422.5,272.833 420.5,271.5C 417.407,270.471 414.241,270.471 411,271.5C 407.267,271.613 406.767,272.613 409.5,274.5C 409.393,276.379 409.893,276.712 411,275.5C 411.717,276.044 412.217,276.711 412.5,277.5C 410.983,277.511 409.816,278.177 409,279.5C 407.951,277.893 406.451,277.227 404.5,277.5C 404.131,279.993 404.797,280.66 406.5,279.5C 406.649,280.552 406.483,281.552 406,282.5C 404.301,281.594 402.467,281.261 400.5,281.5C 401.263,280.732 402.263,280.232 403.5,280C 403.167,279.667 402.833,279.333 402.5,279C 397.472,278.412 392.472,278.578 387.5,279.5C 386.402,280.601 386.235,281.934 387,283.5C 388.734,284.249 390.567,284.749 392.5,285C 393.252,285.671 393.586,286.504 393.5,287.5C 391.482,288.933 389.815,288.599 388.5,286.5C 383.539,286.474 378.872,286.474 374.5,286.5C 372.739,287.035 371.406,288.035 370.5,289.5C 369.292,290.234 367.959,290.567 366.5,290.5C 366.5,289.167 366.5,287.833 366.5,286.5C 369.336,286.798 369.836,286.131 368,284.5C 367.333,283.167 367.333,281.833 368,280.5C 368.333,280.833 368.667,281.167 369,281.5C 370.067,280.809 371.234,280.309 372.5,280C 370.561,279.092 369.561,277.592 369.5,275.5C 370.833,275.5 372.167,275.5 373.5,275.5C 373.281,276.675 373.614,277.675 374.5,278.5C 376.535,277.959 378.535,277.292 380.5,276.5C 378.988,275.912 377.655,275.578 376.5,275.5C 376.577,274.25 377.244,273.417 378.5,273C 376.866,272.506 375.199,272.34 373.5,272.5C 388.386,270.51 403.386,268.51 418.5,266.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#978c93\",d:\"M 400.5,281.5 C 396.885,281.421 393.385,281.754 390,282.5C 388.69,281.87 387.856,280.87 387.5,279.5C 392.472,278.578 397.472,278.412 402.5,279C 402.833,279.333 403.167,279.667 403.5,280C 402.263,280.232 401.263,280.732 400.5,281.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6e6469\",d:\"M 373.5,275.5 C 374.5,275.5 375.5,275.5 376.5,275.5C 377.655,275.578 378.988,275.912 380.5,276.5C 378.535,277.292 376.535,277.959 374.5,278.5C 373.614,277.675 373.281,276.675 373.5,275.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7e7477\",d:\"M 385.5,273.5 C 387.201,273.966 388.701,273.966 390,273.5C 390.448,275.224 391.282,275.891 392.5,275.5C 390.579,276.641 388.579,276.808 386.5,276C 385.748,275.329 385.414,274.496 385.5,273.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8e8388\",d:\"M 402.5,271.5 C 405.716,271.872 406.216,273.206 404,275.5C 401.403,275.456 398.903,275.123 396.5,274.5C 398.444,273.199 400.444,272.199 402.5,271.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dfc8b4\",d:\"M 357.5,286.5 C 351.087,286.808 344.754,287.641 338.5,289C 342.805,288.923 347.138,288.756 351.5,288.5C 351.773,290.451 351.107,291.951 349.5,293C 350.973,293.71 351.64,294.876 351.5,296.5C 349.784,296.629 348.117,296.962 346.5,297.5C 345.791,296.596 344.791,296.263 343.5,296.5C 343.167,295.167 342.833,293.833 342.5,292.5C 340.105,291.234 337.438,290.568 334.5,290.5C 330.468,290.504 326.301,291.17 322,292.5C 318.643,291.258 318.81,290.424 322.5,290C 321.956,289.283 321.289,288.783 320.5,288.5C 322.317,288.317 324.15,288.317 326,288.5C 328.342,287.149 330.675,286.816 333,287.5C 334.683,286.824 334.85,285.824 333.5,284.5C 335.048,284.179 335.715,283.179 335.5,281.5C 335.591,279.302 334.925,278.969 333.5,280.5C 333.443,279.391 333.11,278.391 332.5,277.5C 338.266,276.708 344.1,276.042 350,275.5C 354.515,274.714 354.348,274.048 349.5,273.5C 331.935,275.194 314.601,277.528 297.5,280.5C 296.521,277.375 296.187,274.042 296.5,270.5C 314.863,267.295 333.03,264.629 351,262.5C 352.658,262.675 353.991,263.342 355,264.5C 355.834,271.842 356.668,279.175 357.5,286.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bba188\",d:\"M 304.5,271.5 C 305.376,271.369 306.043,271.702 306.5,272.5C 305.494,273.396 305.494,274.062 306.5,274.5C 307.251,273.624 307.751,272.624 308,271.5C 309,272.833 310,272.833 311,271.5C 311.5,272.5 312,273.5 312.5,274.5C 310.084,275.14 307.418,275.64 304.5,276C 303.272,274.51 303.272,273.01 304.5,271.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b5977a\",d:\"M 332.5,267.5 C 335.187,267.336 337.854,267.503 340.5,268C 338.726,268.881 338.06,270.047 338.5,271.5C 337.833,270.5 337.167,269.5 336.5,268.5C 335.289,269.274 335.289,270.107 336.5,271C 335.975,271.692 335.308,272.192 334.5,272.5C 334.511,271.559 334.011,270.892 333,270.5C 330.313,273.072 327.313,273.739 324,272.5C 323.667,273.167 323.333,273.833 323,274.5C 321.374,274.146 319.541,274.146 317.5,274.5C 317.286,272.856 317.62,271.356 318.5,270C 319.167,269.333 319.833,269.333 320.5,270C 318.74,270.965 318.406,272.132 319.5,273.5C 321.069,272.286 321.902,270.619 322,268.5C 323.011,269.337 324.178,269.67 325.5,269.5C 325.351,270.552 325.517,271.552 326,272.5C 326.333,271.167 326.667,269.833 327,268.5C 327.483,269.448 327.649,270.448 327.5,271.5C 328.5,271.5 329.5,271.5 330.5,271.5C 330.527,269.801 331.194,268.467 332.5,267.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7a7075\",d:\"M 378.5,280.5 C 379.552,280.351 380.552,280.517 381.5,281C 380.167,281.667 380.167,282.333 381.5,283C 378.406,285.307 375.739,284.973 373.5,282C 375.382,281.802 377.048,281.302 378.5,280.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#96877e\",d:\"M 455.5,277.5 C 461.309,280.907 466.975,284.574 472.5,288.5C 473.833,289.167 473.833,289.833 472.5,290.5C 471.583,289.873 470.583,289.539 469.5,289.5C 466.281,288.411 462.948,287.411 459.5,286.5C 458.702,288.078 458.202,289.744 458,291.5C 457.062,289.512 456.228,287.512 455.5,285.5C 455.5,282.833 455.5,280.167 455.5,277.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#4d3932\",d:\"M 273.5,276.5 C 274.022,278.219 275.022,279.552 276.5,280.5C 278.263,281.63 280.096,281.63 282,280.5C 283.434,280.862 284.601,281.528 285.5,282.5C 285.5,283.833 285.5,285.167 285.5,286.5C 285.5,286.833 285.5,287.167 285.5,287.5C 282.214,288.207 278.881,288.54 275.5,288.5C 275.007,286.194 274.674,283.861 274.5,281.5C 273.209,281.263 272.209,281.596 271.5,282.5C 269.173,282.665 267.007,283.331 265,284.5C 264.506,282.866 264.34,281.199 264.5,279.5C 265.791,279.263 266.791,279.596 267.5,280.5C 269.598,281.484 271.598,281.151 273.5,279.5C 273.5,278.5 273.5,277.5 273.5,276.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e7e1e4\",d:\"M 273.5,279.5 C 271.598,281.151 269.598,281.484 267.5,280.5C 269.379,279.659 271.379,279.325 273.5,279.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a897a0\",d:\"M 523.5,281.5 C 524.391,282.11 525.391,282.443 526.5,282.5C 526.389,283.117 526.056,283.617 525.5,284C 527.67,286.641 529.17,289.474 530,292.5C 531.7,290.701 533.533,290.368 535.5,291.5C 532.596,293.295 529.596,295.128 526.5,297C 527.5,297.333 528.5,297.667 529.5,298C 524.027,297.592 519.36,299.092 515.5,302.5C 514.391,302.557 513.391,302.89 512.5,303.5C 509.587,303.921 506.754,303.921 504,303.5C 503.003,301.677 501.836,300.01 500.5,298.5C 499.588,294.869 499.421,291.203 500,287.5C 500.333,288.167 500.667,288.833 501,289.5C 502.756,288.579 502.923,287.412 501.5,286C 503.068,279.963 506.402,275.463 511.5,272.5C 511.611,273.117 511.944,273.617 512.5,274C 516.37,275.137 518.203,273.637 518,269.5C 519.751,271.212 520.418,273.212 520,275.5C 519.107,274.289 518.274,274.289 517.5,275.5C 517.709,276.086 518.043,276.586 518.5,277C 513.532,276.305 513.198,277.638 517.5,281C 517.167,281.333 516.833,281.667 516.5,282C 517.676,283.914 518.676,283.748 519.5,281.5C 520.594,282.868 520.26,284.035 518.5,285C 519.833,285 521.167,285 522.5,285C 522.167,285.333 521.833,285.667 521.5,286C 522.931,286.465 524.097,287.299 525,288.5C 524.563,286.243 524.063,283.91 523.5,281.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#edebee\",d:\"M 242.5,277.5 C 248.655,277.855 254.988,278.021 261.5,278C 260.327,281.11 260.827,281.277 263,278.5C 263.495,280.473 263.662,282.473 263.5,284.5C 262.5,284.5 261.5,284.5 260.5,284.5C 260.36,286.124 261.027,287.29 262.5,288C 260.212,288.822 257.878,289.489 255.5,290C 260.833,290.667 260.833,291.333 255.5,292C 256.833,292.333 258.167,292.667 259.5,293C 256.72,293.37 254.72,294.37 253.5,296C 254.973,296.71 255.64,297.876 255.5,299.5C 263.473,299.674 263.473,300.174 255.5,301C 258.146,301.497 260.813,301.664 263.5,301.5C 263.5,303.167 263.5,304.833 263.5,306.5C 260.266,306.205 257.266,306.871 254.5,308.5C 256.239,308.594 258.239,308.761 260.5,309C 261.337,310.011 261.67,311.178 261.5,312.5C 259.5,312.5 257.5,312.5 255.5,312.5C 255.343,313.873 255.51,315.207 256,316.5C 256.519,315.484 257.353,314.818 258.5,314.5C 260.261,315.34 261.927,316.34 263.5,317.5C 260.924,318.883 261.258,319.717 264.5,320C 264.167,320.333 263.833,320.667 263.5,321C 264.308,321.308 264.975,321.808 265.5,322.5C 262.559,323.522 259.559,324.355 256.5,325C 260.471,325.085 264.138,326.085 267.5,328C 265.934,328.608 264.6,329.442 263.5,330.5C 259.629,330.815 255.962,330.482 252.5,329.5C 253.586,329.38 254.253,328.713 254.5,327.5C 253.587,322.528 252.92,317.528 252.5,312.5C 252.795,310.265 252.461,308.265 251.5,306.5C 251.167,301.833 250.833,297.167 250.5,292.5C 245.138,292.472 239.805,292.806 234.5,293.5C 235.389,292.053 236.389,290.386 237.5,288.5C 236.372,287.738 235.205,287.071 234,286.5C 233.915,284.915 233.749,283.582 233.5,282.5C 231.328,282.676 228.995,282.843 226.5,283C 227.711,284.113 227.711,285.28 226.5,286.5C 227.376,287.251 228.376,287.751 229.5,288C 227.19,288.497 224.857,288.663 222.5,288.5C 222.5,289.833 222.5,291.167 222.5,292.5C 220.856,292.286 219.356,292.62 218,293.5C 216.493,289.764 215.66,289.764 215.5,293.5C 212.505,293.294 209.838,293.96 207.5,295.5C 207.5,296.5 207.5,297.5 207.5,298.5C 203.689,298.596 203.689,299.262 207.5,300.5C 206.335,301.584 205.002,302.417 203.5,303C 204.793,303.49 206.127,303.657 207.5,303.5C 207.5,306.833 207.5,310.167 207.5,313.5C 204.784,313.678 202.117,314.178 199.5,315C 200.167,315.333 200.833,315.667 201.5,316C 200.167,316.667 200.167,317.333 201.5,318C 203.577,318.192 205.577,318.692 207.5,319.5C 205.305,320.769 203.139,320.769 201,319.5C 200.661,321.834 200.828,324.168 201.5,326.5C 201.245,330.07 200.245,330.403 198.5,327.5C 198.151,325.109 198.484,322.942 199.5,321C 198.71,312.259 197.377,303.593 195.5,295C 195.833,294.667 196.167,294.333 196.5,294C 191.646,294.989 186.646,295.655 181.5,296C 179.111,296.739 177.111,297.905 175.5,299.5C 172.863,298.768 170.363,298.768 168,299.5C 167.51,298.207 167.343,296.873 167.5,295.5C 165.176,295.995 163.009,295.995 161,295.5C 159.527,295.903 158.194,296.57 157,297.5C 156.667,296.833 156.333,296.167 156,295.5C 154.899,297.394 153.566,298.061 152,297.5C 151.536,298.094 151.369,298.761 151.5,299.5C 143.167,299.5 134.833,299.5 126.5,299.5C 126.719,300.675 126.386,301.675 125.5,302.5C 123.216,301.418 122.05,299.752 122,297.5C 123.813,298.609 124.646,297.942 124.5,295.5C 120.686,295.651 119.019,297.651 119.5,301.5C 118.596,300.791 118.263,299.791 118.5,298.5C 118.5,297.833 118.5,297.167 118.5,296.5C 120.233,295.992 120.566,295.159 119.5,294C 120.5,293.667 121.5,293.333 122.5,293C 121.167,292.333 121.167,291.667 122.5,291C 121.833,290.667 121.167,290.333 120.5,290C 127.071,289.759 133.738,289.259 140.5,288.5C 142.833,288.667 145.167,288.833 147.5,289C 140.807,289.837 134.14,290.837 127.5,292C 132.105,292.304 136.605,293.138 141,294.5C 144.739,293.993 148.406,293.327 152,292.5C 153.333,293.167 154.667,293.833 156,294.5C 157.852,292.77 157.686,291.604 155.5,291C 156.623,289.956 157.956,289.29 159.5,289C 156.167,288.667 152.833,288.333 149.5,288C 156.81,286.836 164.144,285.836 171.5,285C 170.944,284.617 170.611,284.117 170.5,283.5C 173.059,283.802 175.393,283.468 177.5,282.5C 180.685,282.98 183.519,282.314 186,280.5C 189.498,281.333 193.332,281.333 197.5,280.5C 198.167,280.5 198.833,280.5 199.5,280.5C 205.504,280.322 211.171,278.989 216.5,276.5C 217.386,275.675 217.719,274.675 217.5,273.5C 219.03,274.067 220.53,274.733 222,275.5C 224.74,274.718 227.574,274.218 230.5,274C 228.167,273.667 225.833,273.333 223.5,273C 228.98,272.361 234.313,273.028 239.5,275C 237.616,275.216 235.949,275.883 234.5,277C 237.146,277.497 239.813,277.664 242.5,277.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8f8276\",d:\"M 333.5,284.5 C 334.85,285.824 334.683,286.824 333,287.5C 330.675,286.816 328.342,287.149 326,288.5C 324.15,288.317 322.317,288.317 320.5,288.5C 319.652,289.625 318.652,289.625 317.5,288.5C 318.519,286.899 320.019,285.899 322,285.5C 324.407,286.196 326.74,286.529 329,286.5C 330.33,285.418 331.83,284.751 333.5,284.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8b7b7f\",d:\"M 540.5,286.5 C 546.466,289.441 552.466,292.441 558.5,295.5C 559.298,295.957 559.631,296.624 559.5,297.5C 553.11,294.754 546.61,292.087 540,289.5C 538.594,290.414 537.094,291.08 535.5,291.5C 533.533,290.368 531.7,290.701 530,292.5C 529.17,289.474 527.67,286.641 525.5,284C 526.056,283.617 526.389,283.117 526.5,282.5C 526.435,282.062 526.601,281.728 527,281.5C 528.333,282.833 529.667,284.167 531,285.5C 532.398,284.949 533.732,284.616 535,284.5C 536.725,285.464 538.559,286.131 540.5,286.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6b5b56\",d:\"M 271.5,282.5 C 272.209,281.596 273.209,281.263 274.5,281.5C 274.674,283.861 275.007,286.194 275.5,288.5C 278.881,288.54 282.214,288.207 285.5,287.5C 285.64,289.124 284.973,290.29 283.5,291C 284.737,291.232 285.737,291.732 286.5,292.5C 283.421,292.26 280.421,292.593 277.5,293.5C 276.513,296.768 276.18,300.102 276.5,303.5C 278.903,303.552 281.236,303.219 283.5,302.5C 283.5,303.167 283.833,303.5 284.5,303.5C 282.393,304.468 280.059,304.802 277.5,304.5C 277.806,307.385 277.473,310.052 276.5,312.5C 276.5,310.167 276.5,307.833 276.5,305.5C 273.71,305.222 271.21,305.889 269,307.5C 266.173,305.746 266.006,303.912 268.5,302C 270.813,301.338 273.146,300.838 275.5,300.5C 275.5,298.167 275.5,295.833 275.5,293.5C 272.167,294.167 268.833,294.833 265.5,295.5C 265.5,293.833 265.5,292.167 265.5,290.5C 268.199,290.534 270.699,289.867 273,288.5C 273.167,287.5 273.333,286.5 273.5,285.5C 273.36,283.97 272.693,282.97 271.5,282.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#443a3a\",d:\"M 290.5,287.5 C 291.5,287.5 292.5,287.5 293.5,287.5C 293.5,289.167 293.5,290.833 293.5,292.5C 292.167,292.5 290.833,292.5 289.5,292.5C 289.062,292.565 288.728,292.399 288.5,292C 291.167,291 291.167,290 288.5,289C 289.416,288.722 290.082,288.222 290.5,287.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e8e3e9\",d:\"M 373.5,272.5 C 375.199,272.34 376.866,272.506 378.5,273C 377.244,273.417 376.577,274.25 376.5,275.5C 375.5,275.5 374.5,275.5 373.5,275.5C 372.167,275.5 370.833,275.5 369.5,275.5C 369.561,277.592 370.561,279.092 372.5,280C 371.234,280.309 370.067,280.809 369,281.5C 368.667,281.167 368.333,280.833 368,280.5C 367.333,281.833 367.333,283.167 368,284.5C 369.836,286.131 369.336,286.798 366.5,286.5C 366.5,287.833 366.5,289.167 366.5,290.5C 367.959,290.567 369.292,290.234 370.5,289.5C 374.221,289.392 378.054,289.392 382,289.5C 383.555,287.854 385.221,287.521 387,288.5C 388.03,288.164 388.53,287.497 388.5,286.5C 389.815,288.599 391.482,288.933 393.5,287.5C 393.56,288.043 393.893,288.376 394.5,288.5C 396.225,287.985 397.892,287.318 399.5,286.5C 398.359,285.575 398.359,284.741 399.5,284C 401.574,284.227 403.574,284.061 405.5,283.5C 408.167,284.5 408.167,285.5 405.5,286.5C 406.18,287.86 406.847,289.193 407.5,290.5C 407.095,291.55 406.429,291.55 405.5,290.5C 404.614,291.325 404.281,292.325 404.5,293.5C 407.718,293.651 408.051,294.484 405.5,296C 406.308,296.308 406.975,296.808 407.5,297.5C 406.224,298.645 404.891,298.645 403.5,297.5C 402.808,298.025 402.308,298.692 402,299.5C 400.893,298.288 400.393,298.621 400.5,300.5C 405.06,301.693 409.06,300.693 412.5,297.5C 413.931,297.119 414.764,296.119 415,294.5C 415.833,296.5 416.667,298.5 417.5,300.5C 419.619,298.386 419.619,296.552 417.5,295C 417.667,294.5 417.833,294 418,293.5C 419.353,294.685 420.52,296.019 421.5,297.5C 420.975,298.192 420.308,298.692 419.5,299C 420.756,299.417 421.423,300.25 421.5,301.5C 419.876,301.36 418.71,302.027 418,303.5C 414.152,300.486 411.985,301.486 411.5,306.5C 414.328,305.503 416.995,305.503 419.5,306.5C 416.821,307.226 414.154,308.059 411.5,309C 412.094,309.464 412.761,309.631 413.5,309.5C 413.5,310.167 413.5,310.833 413.5,311.5C 413.167,311.5 412.833,311.5 412.5,311.5C 409.612,309.256 406.779,309.589 404,312.5C 402.334,311.66 402.167,312.16 403.5,314C 402.251,314.74 401.251,314.573 400.5,313.5C 399.335,311.891 398.001,311.557 396.5,312.5C 395.883,312.389 395.383,312.056 395,311.5C 394.722,312.416 394.222,313.082 393.5,313.5C 392.389,312.357 391.223,311.357 390,310.5C 389.583,311.756 388.75,312.423 387.5,312.5C 388.598,311.603 388.598,310.77 387.5,310C 388.984,309.338 390.317,308.504 391.5,307.5C 392.463,306.637 392.463,305.97 391.5,305.5C 389.045,305.257 386.545,305.257 384,305.5C 383.53,304.423 383.697,303.423 384.5,302.5C 386.379,302.607 386.712,302.107 385.5,301C 387.595,300.444 387.762,299.944 386,299.5C 385.055,299.905 384.388,300.572 384,301.5C 381.178,301.591 378.511,301.258 376,300.5C 372.566,300.808 371.899,302.141 374,304.5C 374.308,303.692 374.808,303.025 375.5,302.5C 376.417,303.127 377.417,303.461 378.5,303.5C 379.873,303.343 381.207,303.51 382.5,304C 379.037,306.574 375.037,307.907 370.5,308C 369.944,308.383 369.611,308.883 369.5,309.5C 368.883,309.611 368.383,309.944 368,310.5C 367.808,308.423 367.308,306.423 366.5,304.5C 361.086,303.417 359.086,300.083 360.5,294.5C 360.574,291.713 361.24,289.213 362.5,287C 359.785,284.421 359.285,281.587 361,278.5C 361.333,279.167 361.667,279.833 362,280.5C 362.419,279.328 363.085,278.328 364,277.5C 364.725,275.843 364.225,274.843 362.5,274.5C 365.946,273.313 369.613,272.646 373.5,272.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#877981\",d:\"M 388.5,286.5 C 388.53,287.497 388.03,288.164 387,288.5C 385.221,287.521 383.555,287.854 382,289.5C 378.054,289.392 374.221,289.392 370.5,289.5C 371.406,288.035 372.739,287.035 374.5,286.5C 378.872,286.474 383.539,286.474 388.5,286.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#816f5a\",d:\"M 84.5,292.5 C 81.2214,291.508 77.8881,291.341 74.5,292C 76.8333,292.333 79.1667,292.667 81.5,293C 79.4144,293.315 77.4144,293.815 75.5,294.5C 73.3674,292.909 71.7007,290.909 70.5,288.5C 71.3984,287.842 72.3984,287.176 73.5,286.5C 72.8075,285.482 72.1408,284.482 71.5,283.5C 72.9305,283.579 74.2638,283.246 75.5,282.5C 77.2705,283.035 77.6039,283.869 76.5,285C 77.8333,285.667 78.8333,286.667 79.5,288C 78.5509,288.617 77.7175,288.451 77,287.5C 76.5172,288.448 76.3505,289.448 76.5,290.5C 79.4686,289.671 82.4686,289.505 85.5,290C 85.8333,290.333 86.1667,290.667 86.5,291C 85.5842,291.278 84.9175,291.778 84.5,292.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ede5e7\",d:\"M 271.5,290.5 C 272.675,290.281 273.675,290.614 274.5,291.5C 272.926,292.631 271.259,292.798 269.5,292C 270.416,291.722 271.082,291.222 271.5,290.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b7ad9f\",d:\"M 84.5,292.5 C 85.9187,293.451 87.5853,293.784 89.5,293.5C 90.9516,294.302 92.6183,294.802 94.5,295C 89.6243,296.767 84.6243,297.933 79.5,298.5C 77.8333,297.5 76.5,296.167 75.5,294.5C 77.4144,293.815 79.4144,293.315 81.5,293C 79.1667,292.667 76.8333,292.333 74.5,292C 77.8881,291.341 81.2214,291.508 84.5,292.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#543e33\",d:\"M 286.5,292.5 C 286.958,295.394 286.291,297.894 284.5,300C 288.304,301.494 287.971,302.328 283.5,302.5C 281.236,303.219 278.903,303.552 276.5,303.5C 276.18,300.102 276.513,296.768 277.5,293.5C 280.421,292.593 283.421,292.26 286.5,292.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e7d3c4\",d:\"M 332.5,277.5 C 333.11,278.391 333.443,279.391 333.5,280.5C 329.067,280.007 324.733,280.007 320.5,280.5C 319.5,280.833 318.833,281.5 318.5,282.5C 320.242,284.973 322.075,284.973 324,282.5C 326.333,282.833 328.667,283.167 331,283.5C 331.308,282.692 331.808,282.025 332.5,281.5C 333.527,282.791 334.527,282.791 335.5,281.5C 335.715,283.179 335.048,284.179 333.5,284.5C 331.83,284.751 330.33,285.418 329,286.5C 326.74,286.529 324.407,286.196 322,285.5C 320.019,285.899 318.519,286.899 317.5,288.5C 318.652,289.625 319.652,289.625 320.5,288.5C 321.289,288.783 321.956,289.283 322.5,290C 318.81,290.424 318.643,291.258 322,292.5C 326.301,291.17 330.468,290.504 334.5,290.5C 337.438,290.568 340.105,291.234 342.5,292.5C 341.527,293.791 340.527,293.791 339.5,292.5C 337.564,293.908 337.398,295.241 339,296.5C 339.945,296.095 340.612,295.428 341,294.5C 341.417,295.756 342.25,296.423 343.5,296.5C 344.791,296.263 345.791,296.596 346.5,297.5C 337.694,298.664 328.861,299.664 320,300.5C 317.933,300.626 316.766,300.292 316.5,299.5C 318.935,298.87 319.602,297.537 318.5,295.5C 316.165,295.712 313.665,296.379 311,297.5C 310.667,297.167 310.333,296.833 310,296.5C 309.333,297.833 309.333,299.167 310,300.5C 311.356,299.62 312.856,299.286 314.5,299.5C 314.082,300.222 313.416,300.722 312.5,301C 308.152,301.573 303.819,302.24 299.5,303C 300.167,303.667 300.833,304.333 301.5,305C 300.736,307.069 300.236,309.236 300,311.5C 298.341,302.892 297.174,294.225 296.5,285.5C 297.166,284.088 297.499,282.755 297.5,281.5C 309.175,280.222 320.842,278.888 332.5,277.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9c9a9f\",d:\"M 394.5,291.5 C 396.451,291.227 397.951,291.893 399,293.5C 400.516,290.949 401.349,291.282 401.5,294.5C 397.787,295.005 394.287,295.338 391,295.5C 390.308,294.975 389.808,294.308 389.5,293.5C 391.419,294.011 393.085,293.344 394.5,291.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d6cabe\",d:\"M 57.5,278.5 C 57.6107,279.117 57.944,279.617 58.5,280C 56.9984,280.583 55.6651,281.416 54.5,282.5C 56.0552,285.662 58.0552,288.328 60.5,290.5C 62.2922,291.309 64.2922,291.809 66.5,292C 65.1232,293.973 63.9565,295.806 63,297.5C 64.6667,298.5 66.3333,299.5 68,300.5C 70.0886,300.255 72.0886,300.255 74,300.5C 75.3575,302.859 76.3575,305.193 77,307.5C 71.7488,303.427 65.9155,300.427 59.5,298.5C 57.8957,298.939 56.3957,299.606 55,300.5C 54.228,300.355 53.5613,300.022 53,299.5C 52.79,301.058 52.29,302.391 51.5,303.5C 51.6641,300.813 51.4974,298.146 51,295.5C 50.51,296.793 50.3433,298.127 50.5,299.5C 48.4727,299.662 46.4727,299.495 44.5,299C 43.7476,298.329 43.4142,297.496 43.5,296.5C 43.5,295.167 43.5,293.833 43.5,292.5C 45.8333,292.5 48.1667,292.5 50.5,292.5C 50.5,289.833 50.5,287.167 50.5,284.5C 51.4614,282.735 51.7947,280.735 51.5,278.5C 53.5,278.5 55.5,278.5 57.5,278.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#89837f\",d:\"M 118.5,296.5 C 118.5,297.167 118.5,297.833 118.5,298.5C 117.566,299.568 117.232,300.901 117.5,302.5C 116.833,297.167 116.167,291.833 115.5,286.5C 115.369,285.624 115.702,284.957 116.5,284.5C 117.815,288.393 118.482,292.393 118.5,296.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9f9ba1\",d:\"M 379.5,292.5 C 381.274,294.012 383.107,294.345 385,293.5C 386.826,294.01 386.993,294.844 385.5,296C 381.297,296.676 377.297,297.176 373.5,297.5C 372.585,296.672 371.919,295.672 371.5,294.5C 374.317,294.903 376.984,294.237 379.5,292.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aeabb2\",d:\"M 407.5,290.5 C 408.451,291.919 408.784,293.585 408.5,295.5C 410.199,295.34 411.866,295.506 413.5,296C 412.944,296.383 412.611,296.883 412.5,297.5C 409.06,300.693 405.06,301.693 400.5,300.5C 400.393,298.621 400.893,298.288 402,299.5C 402.308,298.692 402.808,298.025 403.5,297.5C 404.891,298.645 406.224,298.645 407.5,297.5C 406.975,296.808 406.308,296.308 405.5,296C 408.051,294.484 407.718,293.651 404.5,293.5C 404.281,292.325 404.614,291.325 405.5,290.5C 406.429,291.55 407.095,291.55 407.5,290.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e0d5cf\",d:\"M 115.5,286.5 C 116.167,291.833 116.833,297.167 117.5,302.5C 119.766,321.61 121.766,340.61 123.5,359.5C 123.585,365.137 124.585,370.471 126.5,375.5C 128.244,386.645 129.577,397.978 130.5,409.5C 128.961,412.865 128.294,416.531 128.5,420.5C 130.539,433.447 132.205,446.447 133.5,459.5C 131.94,457.844 130.94,455.844 130.5,453.5C 129.712,442.439 128.379,431.439 126.5,420.5C 127.9,406.925 127.233,393.591 124.5,380.5C 122.273,367.215 120.939,353.881 120.5,340.5C 118.002,324.513 115.836,308.513 114,292.5C 111.496,297.021 109.996,301.854 109.5,307C 111.194,315.912 113.194,324.745 115.5,333.5C 116.207,336.786 116.54,340.119 116.5,343.5C 116.167,343.5 115.833,343.5 115.5,343.5C 114.151,334.805 112.151,326.139 109.5,317.5C 106.481,307.983 107.481,298.983 112.5,290.5C 114.223,290.391 115.223,289.058 115.5,286.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e6e5eb\",d:\"M 559.5,297.5 C 559.389,298.117 559.056,298.617 558.5,299C 560.265,299.64 561.932,299.473 563.5,298.5C 563.5,310.833 563.5,323.167 563.5,335.5C 557.808,334.156 552.142,332.822 546.5,331.5C 546.351,330.448 546.517,329.448 547,328.5C 549.09,329.794 551.09,330.794 553,331.5C 553.667,330.167 554.333,330.167 555,331.5C 555.464,330.906 555.631,330.239 555.5,329.5C 558.311,326.7 557.811,326.034 554,327.5C 552.404,326.234 550.57,324.567 548.5,322.5C 547.609,321.739 546.942,320.739 546.5,319.5C 548.078,318.702 549.744,318.202 551.5,318C 549.421,317.192 547.421,317.359 545.5,318.5C 544.91,319.799 543.91,320.632 542.5,321C 544.973,322.402 544.973,323.902 542.5,325.5C 541.827,323.311 540.827,321.311 539.5,319.5C 541.312,319.407 542.979,318.407 544.5,316.5C 545.167,316.5 545.833,316.5 546.5,316.5C 549.572,316.183 552.572,316.516 555.5,317.5C 553.833,318.667 552.167,319.833 550.5,321C 551.416,321.374 552.25,321.874 553,322.5C 554.952,320.106 557.452,318.606 560.5,318C 559.552,317.517 558.552,317.351 557.5,317.5C 557.719,316.325 557.386,315.325 556.5,314.5C 554.437,314.392 552.27,314.725 550,315.5C 548.743,315.15 548.409,314.483 549,313.5C 550.067,312.809 551.234,312.309 552.5,312C 551.122,310.666 549.789,310.499 548.5,311.5C 546.319,309.01 543.652,306.177 540.5,303C 537.192,302.961 534.025,301.794 531,299.5C 529.343,302.16 527.676,302.16 526,299.5C 524.765,300.615 523.598,300.615 522.5,299.5C 520.929,302.093 518.596,303.093 515.5,302.5C 519.36,299.092 524.027,297.592 529.5,298C 528.5,297.667 527.5,297.333 526.5,297C 529.596,295.128 532.596,293.295 535.5,291.5C 537.094,291.08 538.594,290.414 540,289.5C 546.61,292.087 553.11,294.754 559.5,297.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d7c0b9\",d:\"M 42.5,296.5 C 42.5,297.5 42.5,298.5 42.5,299.5C 40.8333,299.5 39.1667,299.5 37.5,299.5C 37.5,297.167 37.5,294.833 37.5,292.5C 39.1667,292.5 40.8333,292.5 42.5,292.5C 42.5,293.833 42.5,295.167 42.5,296.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aea6a4\",d:\"M 251.5,306.5 C 251.657,307.873 251.49,309.207 251,310.5C 250.064,306.886 249.564,303.22 249.5,299.5C 245.689,300.881 242.356,300.048 239.5,297C 241.236,295.982 243.07,295.482 245,295.5C 248.011,299.659 249.178,298.992 248.5,293.5C 240.875,294.774 233.208,295.274 225.5,295C 228.587,294.741 231.587,294.241 234.5,293.5C 239.805,292.806 245.138,292.472 250.5,292.5C 250.833,297.167 251.167,301.833 251.5,306.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#85868a\",d:\"M 400.5,300.5 C 398.107,301.21 395.607,301.877 393,302.5C 391.795,301.929 390.628,301.262 389.5,300.5C 391.793,300.974 393.959,300.308 396,298.5C 397.15,299.424 398.15,299.424 399,298.5C 399.278,299.416 399.778,300.082 400.5,300.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e9e0de\",d:\"M 234.5,293.5 C 231.587,294.241 228.587,294.741 225.5,295C 233.208,295.274 240.875,294.774 248.5,293.5C 249.178,298.992 248.011,299.659 245,295.5C 243.07,295.482 241.236,295.982 239.5,297C 242.356,300.048 245.689,300.881 249.5,299.5C 249.564,303.22 250.064,306.886 251,310.5C 251.49,309.207 251.657,307.873 251.5,306.5C 252.461,308.265 252.795,310.265 252.5,312.5C 251.789,317.657 251.789,322.99 252.5,328.5C 240.06,329.325 227.727,330.991 215.5,333.5C 216,333.833 216.5,334.167 217,334.5C 228.783,332.444 240.617,330.778 252.5,329.5C 255.962,330.482 259.629,330.815 263.5,330.5C 265.77,332.449 267.77,334.782 269.5,337.5C 268.691,339.071 268.357,340.738 268.5,342.5C 263.888,343.296 259.221,343.963 254.5,344.5C 241.332,345.916 228.332,347.583 215.5,349.5C 211.5,349.5 207.5,349.5 203.5,349.5C 203.335,353.182 203.501,356.848 204,360.5C 204.561,361.022 205.228,361.355 206,361.5C 214.555,360.893 223.055,359.893 231.5,358.5C 232.086,358.709 232.586,359.043 233,359.5C 237.469,359.022 241.802,358.022 246,356.5C 246.383,357.056 246.883,357.389 247.5,357.5C 248.833,357.5 250.167,357.5 251.5,357.5C 252.833,357.5 254.167,357.5 255.5,357.5C 255.768,359.099 255.434,360.432 254.5,361.5C 254.213,359.879 253.213,358.879 251.5,358.5C 250.28,359.711 249.113,359.711 248,358.5C 246.242,359.469 245.742,360.636 246.5,362C 248.473,362.495 250.473,362.662 252.5,362.5C 251.391,363.29 250.058,363.79 248.5,364C 249,364.5 249.5,365 250,365.5C 251.117,365.335 252.284,365.002 253.5,364.5C 254.308,364.808 254.975,365.308 255.5,366C 252.657,367.352 249.824,367.852 247,367.5C 244.976,367.2 244.476,366.367 245.5,365C 243.431,364.676 243.098,363.842 244.5,362.5C 243.793,359.561 242.46,359.061 240.5,361C 241.451,361.718 241.617,362.551 241,363.5C 238.222,362.675 235.389,362.008 232.5,361.5C 229.167,361.5 225.833,361.5 222.5,361.5C 222.656,365.135 223.822,365.468 226,362.5C 226.377,363.942 227.21,364.942 228.5,365.5C 229.841,367.12 231.674,368.12 234,368.5C 236.103,366.12 237.27,366.787 237.5,370.5C 237.167,372.833 236.167,373.167 234.5,371.5C 226.962,373.567 219.295,374.401 211.5,374C 218.512,373.082 225.512,372.082 232.5,371C 225.642,370.835 218.809,371.335 212,372.5C 210.833,372.333 209.667,372.167 208.5,372C 209.833,370.667 209.833,369.333 208.5,368C 213.432,367.471 218.099,366.805 222.5,366C 216.459,365.838 210.459,366.338 204.5,367.5C 204.347,373.324 205.013,373.657 206.5,368.5C 207.196,372.688 206.03,376.354 203,379.5C 202.999,376.313 202.166,373.48 200.5,371C 201.985,369.244 201.652,368.077 199.5,367.5C 198.505,361.22 197.839,354.886 197.5,348.5C 196.74,344.4 198.073,343.4 201.5,345.5C 202.994,345.291 204.161,344.624 205,343.5C 205.5,344.667 206.333,345.5 207.5,346C 213.416,346.19 219.249,346.69 225,347.5C 225.708,346.619 226.542,345.953 227.5,345.5C 231.287,345.22 234.953,345.22 238.5,345.5C 240.029,343.684 241.696,343.017 243.5,343.5C 245.338,344.102 247.171,344.435 249,344.5C 254.697,342.582 260.364,340.916 266,339.5C 266.654,340.696 267.154,340.696 267.5,339.5C 266.675,338.614 265.675,338.281 264.5,338.5C 264.672,336.508 264.005,334.842 262.5,333.5C 262.709,332.914 263.043,332.414 263.5,332C 255.777,331.756 248.11,332.423 240.5,334C 241.5,334.333 242.5,334.667 243.5,335C 241.527,335.495 239.527,335.662 237.5,335.5C 237.5,337.167 237.5,338.833 237.5,340.5C 235.712,340.785 234.045,340.452 232.5,339.5C 232.709,338.914 233.043,338.414 233.5,338C 232.338,337.173 231.171,336.34 230,335.5C 223.934,335.736 217.767,335.903 211.5,336C 212.097,334.938 212.43,333.772 212.5,332.5C 211.332,319.956 209.665,307.623 207.5,295.5C 209.838,293.96 212.505,293.294 215.5,293.5C 215.66,289.764 216.493,289.764 218,293.5C 219.356,292.62 220.856,292.286 222.5,292.5C 222.5,291.167 222.5,289.833 222.5,288.5C 224.857,288.663 227.19,288.497 229.5,288C 228.376,287.751 227.376,287.251 226.5,286.5C 227.711,285.28 227.711,284.113 226.5,283C 228.995,282.843 231.328,282.676 233.5,282.5C 233.749,283.582 233.915,284.915 234,286.5C 235.205,287.071 236.372,287.738 237.5,288.5C 236.389,290.386 235.389,292.053 234.5,293.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8f8784\",d:\"M 227.5,296.5 C 230.994,297.495 234.661,297.495 238.5,296.5C 238.649,297.552 238.483,298.552 238,299.5C 237.667,299.167 237.333,298.833 237,298.5C 234.004,300.491 231.171,300.491 228.5,298.5C 226.774,300.03 224.774,301.03 222.5,301.5C 220.997,300.948 219.331,300.948 217.5,301.5C 217.5,300.167 217.5,298.833 217.5,297.5C 220.119,297.232 222.619,297.565 225,298.5C 225.995,297.934 226.828,297.267 227.5,296.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bab5ac\",d:\"M 455.5,285.5 C 456.228,287.512 457.062,289.512 458,291.5C 458.202,289.744 458.702,288.078 459.5,286.5C 462.948,287.411 466.281,288.411 469.5,289.5C 468.475,289.897 468.308,290.563 469,291.5C 471.743,294.654 474.243,297.988 476.5,301.5C 477.065,303.747 476.399,305.747 474.5,307.5C 474.617,305.516 473.95,303.85 472.5,302.5C 471.959,304.714 470.792,307.048 469,309.5C 467.989,308.663 466.822,308.33 465.5,308.5C 465.337,306.143 465.503,303.81 466,301.5C 467.368,303.815 468.201,303.815 468.5,301.5C 466.98,298.402 466.146,295.069 466,291.5C 464.416,290.139 462.582,289.472 460.5,289.5C 460.78,294.501 461.78,299.334 463.5,304C 462.333,305.167 461.167,306.333 460,307.5C 459.119,303.291 457.953,299.291 456.5,295.5C 455.941,292.484 455.275,289.484 454.5,286.5C 454.624,285.893 454.957,285.56 455.5,285.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7d787f\",d:\"M 384.5,302.5 C 382.265,302.205 380.265,302.539 378.5,303.5C 377.417,303.461 376.417,303.127 375.5,302.5C 374.808,303.025 374.308,303.692 374,304.5C 371.899,302.141 372.566,300.808 376,300.5C 378.511,301.258 381.178,301.591 384,301.5C 384.388,300.572 385.055,299.905 386,299.5C 387.762,299.944 387.595,300.444 385.5,301C 386.712,302.107 386.379,302.607 384.5,302.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d7bfb8\",d:\"M 38.5,301.5 C 40.1667,301.5 41.8333,301.5 43.5,301.5C 44.2501,306.263 42.5835,308.596 38.5,308.5C 38.5,306.167 38.5,303.833 38.5,301.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#948986\",d:\"M 211.5,296.5 C 212.239,296.369 212.906,296.536 213.5,297C 213.342,300.72 213.175,304.554 213,308.5C 212.172,304.534 211.672,300.534 211.5,296.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aca19c\",d:\"M 285.5,286.5 C 287.042,287.301 288.708,287.634 290.5,287.5C 290.082,288.222 289.416,288.722 288.5,289C 291.167,290 291.167,291 288.5,292C 288.728,292.399 289.062,292.565 289.5,292.5C 287.852,294.456 287.185,296.789 287.5,299.5C 290.167,299.167 292.833,298.833 295.5,298.5C 295.784,300.415 295.451,302.081 294.5,303.5C 294.762,302.022 294.429,300.689 293.5,299.5C 291.358,300.437 291.024,301.77 292.5,303.5C 289.675,304.478 288.342,306.478 288.5,309.5C 287.539,307.735 287.205,305.735 287.5,303.5C 286.5,303.5 285.5,303.5 284.5,303.5C 283.833,303.5 283.5,303.167 283.5,302.5C 287.971,302.328 288.304,301.494 284.5,300C 286.291,297.894 286.958,295.394 286.5,292.5C 285.737,291.732 284.737,291.232 283.5,291C 284.973,290.29 285.64,289.124 285.5,287.5C 285.5,287.167 285.5,286.833 285.5,286.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#201815\",d:\"M 294.5,303.5 C 293.833,303.5 293.167,303.5 292.5,303.5C 291.024,301.77 291.358,300.437 293.5,299.5C 294.429,300.689 294.762,302.022 294.5,303.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ceb9a7\",d:\"M 294.5,279.5 C 295.167,281.5 295.833,283.5 296.5,285.5C 297.174,294.225 298.341,302.892 300,311.5C 300.236,309.236 300.736,307.069 301.5,305C 300.833,304.333 300.167,303.667 299.5,303C 303.819,302.24 308.152,301.573 312.5,301C 313.416,300.722 314.082,300.222 314.5,299.5C 315.167,298.167 315.833,298.167 316.5,299.5C 316.766,300.292 317.933,300.626 320,300.5C 328.861,299.664 337.694,298.664 346.5,297.5C 348.117,296.962 349.784,296.629 351.5,296.5C 351.64,294.876 350.973,293.71 349.5,293C 351.107,291.951 351.773,290.451 351.5,288.5C 347.138,288.756 342.805,288.923 338.5,289C 344.754,287.641 351.087,286.808 357.5,286.5C 357.5,286.833 357.5,287.167 357.5,287.5C 357.79,293.561 357.457,299.561 356.5,305.5C 357.127,308.657 358.127,311.657 359.5,314.5C 359.79,316.11 358.79,317.277 356.5,318C 356.833,318.333 357.167,318.667 357.5,319C 353.381,319.998 349.381,321.165 345.5,322.5C 345.944,320.887 346.944,319.72 348.5,319C 347.833,318.833 347.167,318.667 346.5,318.5C 332.209,320.699 317.875,322.199 303.5,323C 319.838,320.777 336.171,318.444 352.5,316C 352.07,315.08 351.736,314.247 351.5,313.5C 350.833,314.167 350.167,314.833 349.5,315.5C 348.5,314.167 347.5,314.167 346.5,315.5C 345.459,313.009 344.626,313.009 344,315.5C 343.439,314.978 342.772,314.645 342,314.5C 340.667,315.167 339.333,315.833 338,316.5C 336.054,316.237 335.388,315.237 336,313.5C 338.532,312.994 340.698,311.827 342.5,310C 338.33,309.675 334.33,309.509 330.5,309.5C 337.444,308.09 344.444,307.09 351.5,306.5C 351.5,305.5 351.5,304.5 351.5,303.5C 348.833,303.5 346.167,303.5 343.5,303.5C 343.66,301.801 343.494,300.134 343,298.5C 334.88,299.706 326.88,301.373 319,303.5C 313.856,302.293 308.689,302.46 303.5,304C 304.572,305.284 305.905,305.617 307.5,305C 305.665,305.928 305.332,307.094 306.5,308.5C 305.675,309.386 304.675,309.719 303.5,309.5C 303.5,310.5 303.5,311.5 303.5,312.5C 302.167,312.833 302.167,313.167 303.5,313.5C 302.402,314.397 302.402,315.23 303.5,316C 302.258,316.311 301.258,315.811 300.5,314.5C 300.167,314.833 299.833,315.167 299.5,315.5C 300.407,318.421 300.74,321.421 300.5,324.5C 297.522,309.766 295.522,294.766 294.5,279.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#948375\",d:\"M 334.5,293.5 C 336.048,293.821 336.715,294.821 336.5,296.5C 334.173,296.665 332.007,297.331 330,298.5C 328.635,297.407 328.301,296.074 329,294.5C 329.667,297.167 330.333,297.167 331,294.5C 332.217,296.612 333.383,296.279 334.5,293.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#97867d\",d:\"M 316.5,299.5 C 315.833,298.167 315.167,298.167 314.5,299.5C 312.856,299.286 311.356,299.62 310,300.5C 309.333,299.167 309.333,297.833 310,296.5C 310.333,296.833 310.667,297.167 311,297.5C 313.665,296.379 316.165,295.712 318.5,295.5C 319.602,297.537 318.935,298.87 316.5,299.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#988275\",d:\"M 342.5,292.5 C 342.833,293.833 343.167,295.167 343.5,296.5C 342.25,296.423 341.417,295.756 341,294.5C 340.612,295.428 339.945,296.095 339,296.5C 337.398,295.241 337.564,293.908 339.5,292.5C 340.527,293.791 341.527,293.791 342.5,292.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#998879\",d:\"M 326.5,293.5 C 327.434,294.568 327.768,295.901 327.5,297.5C 326.07,297.421 324.736,297.754 323.5,298.5C 322.713,297.758 322.047,296.925 321.5,296C 323.315,295.243 324.981,294.41 326.5,293.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#90827c\",d:\"M 317.5,288.5 C 315.777,289.807 313.943,289.807 312,288.5C 311.016,290.795 310.183,290.461 309.5,287.5C 312.467,286.121 315.134,286.454 317.5,288.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cca17d\",d:\"M 138.5,303.5 C 140.5,303.5 142.5,303.5 144.5,303.5C 144.833,304.833 145.167,306.167 145.5,307.5C 139.6,309.123 133.6,309.623 127.5,309C 126.944,308.617 126.611,308.117 126.5,307.5C 126.33,306.178 126.663,305.011 127.5,304C 131.152,303.501 134.818,303.335 138.5,303.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8f6d56\",d:\"M 145.5,307.5 C 145.167,306.167 144.833,304.833 144.5,303.5C 146.571,303.498 148.738,303.831 151,304.5C 154.734,301.993 158.401,301.66 162,303.5C 164.078,302.057 164.911,302.724 164.5,305.5C 162.326,305.08 160.326,305.08 158.5,305.5C 157.459,303.009 156.626,303.009 156,305.5C 153.271,306.525 150.271,306.525 147,305.5C 146.722,306.416 146.222,307.082 145.5,307.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#948b89\",d:\"M 236.5,301.5 C 238.28,302.755 240.113,302.755 242,301.5C 243.225,301.862 244.391,302.362 245.5,303C 244,305.167 242.833,305 242,302.5C 239.005,304.926 235.505,305.926 231.5,305.5C 231.413,302.402 231.913,302.068 233,304.5C 233.985,303.186 235.152,302.186 236.5,301.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aea7af\",d:\"M 421.5,301.5 C 427.67,303.825 427.004,305.492 419.5,306.5C 416.995,305.503 414.328,305.503 411.5,306.5C 411.985,301.486 414.152,300.486 418,303.5C 418.71,302.027 419.876,301.36 421.5,301.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#635d58\",d:\"M 118.5,298.5 C 118.263,299.791 118.596,300.791 119.5,301.5C 120.978,319.516 122.645,337.516 124.5,355.5C 123.566,356.568 123.232,357.901 123.5,359.5C 121.766,340.61 119.766,321.61 117.5,302.5C 117.232,300.901 117.566,299.568 118.5,298.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7e7875\",d:\"M 221.5,306.5 C 220.833,306.5 220.167,306.5 219.5,306.5C 219.5,305.5 219.5,304.5 219.5,303.5C 222.415,303.746 225.415,304.079 228.5,304.5C 227.758,305.287 226.925,305.953 226,306.5C 224.395,306.438 222.895,306.438 221.5,306.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e7e3eb\",d:\"M 420.5,271.5 C 422.5,272.833 424.5,272.833 426.5,271.5C 428.5,271.5 430.5,271.5 432.5,271.5C 432.67,272.822 432.337,273.989 431.5,275C 433.137,279.442 434.137,284.108 434.5,289C 432.935,293.005 433.268,296.838 435.5,300.5C 431.492,303.87 431.825,306.37 436.5,308C 435.207,308.49 433.873,308.657 432.5,308.5C 432.281,309.675 432.614,310.675 433.5,311.5C 435.409,312.348 437.409,312.682 439.5,312.5C 439.343,311.127 439.51,309.793 440,308.5C 440.232,309.737 440.732,310.737 441.5,311.5C 441.813,314.247 441.48,316.914 440.5,319.5C 439.914,319.291 439.414,318.957 439,318.5C 437.175,319.103 435.341,319.77 433.5,320.5C 432.873,321.417 432.539,322.417 432.5,323.5C 432.167,323.5 431.833,323.5 431.5,323.5C 428.431,323.015 425.764,321.681 423.5,319.5C 423.649,318.448 423.483,317.448 423,316.5C 421.266,315.751 419.433,315.251 417.5,315C 417.957,314.586 418.291,314.086 418.5,313.5C 417.726,312.289 416.893,312.289 416,313.5C 415.8,311.68 414.966,310.347 413.5,309.5C 412.761,309.631 412.094,309.464 411.5,309C 414.154,308.059 416.821,307.226 419.5,306.5C 427.004,305.492 427.67,303.825 421.5,301.5C 421.423,300.25 420.756,299.417 419.5,299C 420.308,298.692 420.975,298.192 421.5,297.5C 420.52,296.019 419.353,294.685 418,293.5C 417.833,294 417.667,294.5 417.5,295C 419.619,296.552 419.619,298.386 417.5,300.5C 416.667,298.5 415.833,296.5 415,294.5C 414.764,296.119 413.931,297.119 412.5,297.5C 412.611,296.883 412.944,296.383 413.5,296C 411.866,295.506 410.199,295.34 408.5,295.5C 408.784,293.585 408.451,291.919 407.5,290.5C 406.847,289.193 406.18,287.86 405.5,286.5C 408.167,285.5 408.167,284.5 405.5,283.5C 403.574,284.061 401.574,284.227 399.5,284C 398.359,284.741 398.359,285.575 399.5,286.5C 397.892,287.318 396.225,287.985 394.5,288.5C 393.893,288.376 393.56,288.043 393.5,287.5C 393.586,286.504 393.252,285.671 392.5,285C 390.567,284.749 388.734,284.249 387,283.5C 386.235,281.934 386.402,280.601 387.5,279.5C 387.856,280.87 388.69,281.87 390,282.5C 393.385,281.754 396.885,281.421 400.5,281.5C 402.467,281.261 404.301,281.594 406,282.5C 406.483,281.552 406.649,280.552 406.5,279.5C 406.435,279.062 406.601,278.728 407,278.5C 408.94,280.738 411.107,280.738 413.5,278.5C 413.376,277.893 413.043,277.56 412.5,277.5C 412.217,276.711 411.717,276.044 411,275.5C 409.893,276.712 409.393,276.379 409.5,274.5C 412.48,274.38 415.313,273.713 418,272.5C 419.461,273.883 420.294,273.549 420.5,271.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#67656c\",d:\"M 412.5,289.5 C 414.807,289.986 416.973,289.986 419,289.5C 419.5,290 420,290.5 420.5,291C 418.157,292.746 416.157,292.579 414.5,290.5C 412.922,291.64 411.256,292.14 409.5,292C 410.571,291.148 411.571,290.315 412.5,289.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#eceaf0\",d:\"M 523.5,304.5 C 522.318,306.561 522.985,308.061 525.5,309C 528.817,309.498 532.15,309.665 535.5,309.5C 537.979,311.568 540.979,312.901 544.5,313.5C 544.5,314.5 544.5,315.5 544.5,316.5C 542.979,318.407 541.312,319.407 539.5,319.5C 540.827,321.311 541.827,323.311 542.5,325.5C 544.973,323.902 544.973,322.402 542.5,321C 543.91,320.632 544.91,319.799 545.5,318.5C 547.421,317.359 549.421,317.192 551.5,318C 549.744,318.202 548.078,318.702 546.5,319.5C 546.942,320.739 547.609,321.739 548.5,322.5C 547.016,323.473 546.516,324.807 547,326.5C 549.595,328.077 552.429,329.077 555.5,329.5C 555.631,330.239 555.464,330.906 555,331.5C 554.333,330.167 553.667,330.167 553,331.5C 551.09,330.794 549.09,329.794 547,328.5C 546.517,329.448 546.351,330.448 546.5,331.5C 552.142,332.822 557.808,334.156 563.5,335.5C 563.5,340.5 563.5,345.5 563.5,350.5C 561.994,349.77 560.66,349.437 559.5,349.5C 559.414,348.504 559.748,347.671 560.5,347C 555.79,346.625 551.123,345.958 546.5,345C 543.967,342.916 543.967,340.916 546.5,339C 543.833,338.333 543.833,337.667 546.5,337C 544.989,335.385 543.656,335.385 542.5,337C 542.64,338.264 542.64,339.431 542.5,340.5C 539.077,339.36 535.744,338.026 532.5,336.5C 533.167,334.833 533.833,333.167 534.5,331.5C 531.922,331.323 531.922,330.157 534.5,328C 533.833,327.667 533.167,327.333 532.5,327C 534.167,326 535.833,325 537.5,324C 536.646,322.978 535.646,322.145 534.5,321.5C 531.806,324.948 529.972,329.282 529,334.5C 522.72,334.638 516.887,332.805 511.5,329C 508.821,328.566 506.154,328.732 503.5,329.5C 500.822,328.825 498.156,328.158 495.5,327.5C 495.5,326.167 495.5,324.833 495.5,323.5C 501.139,322.445 501.473,320.945 496.5,319C 498.234,317.382 500.067,315.882 502,314.5C 504.46,315.598 506.96,316.598 509.5,317.5C 510.7,316.469 512.034,315.635 513.5,315C 512.833,314.333 512.167,313.667 511.5,313C 513.167,312.667 514.833,312.333 516.5,312C 514.754,311.529 513.087,310.862 511.5,310C 510.167,309 510.167,308 511.5,307C 514.516,306.78 517.016,305.613 519,303.5C 520.429,303.47 521.929,303.803 523.5,304.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#958a91\",d:\"M 391.5,307.5 C 395.391,307.108 399.224,305.775 403,303.5C 405.245,304.137 407.412,304.97 409.5,306C 407.238,306.642 405.071,307.475 403,308.5C 402.586,308.043 402.086,307.709 401.5,307.5C 398.5,308.167 395.5,308.833 392.5,309.5C 391.702,309.043 391.369,308.376 391.5,307.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#756b6a\",d:\"M 231.5,307.5 C 234.667,307.675 238.001,307.841 241.5,308C 238.452,308.228 235.452,309.061 232.5,310.5C 231.614,309.675 231.281,308.675 231.5,307.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dcd7d9\",d:\"M 262.5,269.5 C 263.404,270.209 263.737,271.209 263.5,272.5C 265.38,272.771 266.713,272.104 267.5,270.5C 269.167,270.5 270.833,270.5 272.5,270.5C 272.808,272.924 272.474,275.257 271.5,277.5C 269.018,278.067 266.684,278.734 264.5,279.5C 264.34,281.199 264.506,282.866 265,284.5C 267.007,283.331 269.173,282.665 271.5,282.5C 272.693,282.97 273.36,283.97 273.5,285.5C 273.333,286.5 273.167,287.5 273,288.5C 270.699,289.867 268.199,290.534 265.5,290.5C 265.5,292.167 265.5,293.833 265.5,295.5C 268.833,294.833 272.167,294.167 275.5,293.5C 275.5,295.833 275.5,298.167 275.5,300.5C 273.146,300.838 270.813,301.338 268.5,302C 266.006,303.912 266.173,305.746 269,307.5C 271.21,305.889 273.71,305.222 276.5,305.5C 276.5,307.833 276.5,310.167 276.5,312.5C 273.833,312.833 271.167,313.167 268.5,313.5C 268.338,315.527 268.505,317.527 269,319.5C 271.587,317.804 274.421,316.804 277.5,316.5C 277.663,318.857 277.497,321.19 277,323.5C 274.618,324.554 272.118,325.221 269.5,325.5C 269.5,327.167 269.5,328.833 269.5,330.5C 272.734,329.424 276.068,328.757 279.5,328.5C 279.5,330.833 279.5,333.167 279.5,335.5C 275.689,335.596 275.689,336.262 279.5,337.5C 278.398,338.176 277.398,338.842 276.5,339.5C 275.624,339.631 274.957,339.298 274.5,338.5C 275.506,337.604 275.506,336.938 274.5,336.5C 272.517,336.815 271.184,337.815 270.5,339.5C 270.715,341.179 270.048,342.179 268.5,342.5C 268.357,340.738 268.691,339.071 269.5,337.5C 267.77,334.782 265.77,332.449 263.5,330.5C 264.6,329.442 265.934,328.608 267.5,328C 264.138,326.085 260.471,325.085 256.5,325C 259.559,324.355 262.559,323.522 265.5,322.5C 264.975,321.808 264.308,321.308 263.5,321C 263.833,320.667 264.167,320.333 264.5,320C 261.258,319.717 260.924,318.883 263.5,317.5C 261.927,316.34 260.261,315.34 258.5,314.5C 257.353,314.818 256.519,315.484 256,316.5C 255.51,315.207 255.343,313.873 255.5,312.5C 257.5,312.5 259.5,312.5 261.5,312.5C 261.67,311.178 261.337,310.011 260.5,309C 258.239,308.761 256.239,308.594 254.5,308.5C 257.266,306.871 260.266,306.205 263.5,306.5C 263.5,304.833 263.5,303.167 263.5,301.5C 260.813,301.664 258.146,301.497 255.5,301C 263.473,300.174 263.473,299.674 255.5,299.5C 255.64,297.876 254.973,296.71 253.5,296C 254.72,294.37 256.72,293.37 259.5,293C 258.167,292.667 256.833,292.333 255.5,292C 260.833,291.333 260.833,290.667 255.5,290C 257.878,289.489 260.212,288.822 262.5,288C 261.027,287.29 260.36,286.124 260.5,284.5C 261.5,284.5 262.5,284.5 263.5,284.5C 263.662,282.473 263.495,280.473 263,278.5C 260.827,281.277 260.327,281.11 261.5,278C 254.988,278.021 248.655,277.855 242.5,277.5C 248.927,277.072 255.26,276.072 261.5,274.5C 262.309,272.929 262.643,271.262 262.5,269.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#71584c\",d:\"M -0.5,298.5 C 1.22652,308.829 2.89319,319.163 4.5,329.5C 5.49162,329.328 6.15829,329.662 6.5,330.5C 4.72587,331.881 3.22587,331.548 2,329.5C 1.48044,323.975 0.647103,318.642 -0.5,313.5C -0.5,308.5 -0.5,303.5 -0.5,298.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b8b0a1\",d:\"M 62.5,280.5 C 67.3281,290.333 74.3281,298.333 83.5,304.5C 83.8333,304.167 84.1667,303.833 84.5,303.5C 83.3881,302.735 82.7214,301.735 82.5,300.5C 83.2389,300.631 83.9056,300.464 84.5,300C 83.3044,299.346 83.3044,298.846 84.5,298.5C 86.7954,299.432 89.1287,300.265 91.5,301C 93.8477,304.179 95.5144,307.679 96.5,311.5C 98.288,311.215 99.9547,311.548 101.5,312.5C 101.291,313.086 100.957,313.586 100.5,314C 102.002,314.583 103.335,315.416 104.5,316.5C 104.376,317.107 104.043,317.44 103.5,317.5C 102.833,317.5 102.167,317.5 101.5,317.5C 98.8728,316.908 96.2062,316.575 93.5,316.5C 92.1667,316.5 90.8333,316.5 89.5,316.5C 89.5499,318.59 88.5499,319.923 86.5,320.5C 83.7948,318.799 81.1281,318.466 78.5,319.5C 76.2282,318.073 74.0615,316.406 72,314.5C 71.8374,316.387 72.6707,317.887 74.5,319C 74,319.167 73.5,319.333 73,319.5C 69.6441,316.739 65.8107,314.906 61.5,314C 68.5128,313.746 75.5128,313.746 82.5,314C 74.6786,311.238 66.8453,311.072 59,313.5C 54.7729,312.527 53.9396,310.527 56.5,307.5C 56.1667,307.167 55.8333,306.833 55.5,306.5C 54.5832,307.127 53.5832,307.461 52.5,307.5C 51.5655,306.432 51.2322,305.099 51.5,303.5C 52.29,302.391 52.79,301.058 53,299.5C 53.5613,300.022 54.228,300.355 55,300.5C 56.3957,299.606 57.8957,298.939 59.5,298.5C 65.9155,300.427 71.7488,303.427 77,307.5C 76.3575,305.193 75.3575,302.859 74,300.5C 72.0886,300.255 70.0886,300.255 68,300.5C 66.3333,299.5 64.6667,298.5 63,297.5C 63.9565,295.806 65.1232,293.973 66.5,292C 64.2922,291.809 62.2922,291.309 60.5,290.5C 60.9382,290.565 61.2716,290.399 61.5,290C 60.4258,289.261 59.7591,288.261 59.5,287C 61.4292,285.306 62.4292,283.139 62.5,280.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b2a18f\",d:\"M 303.5,313.5 C 302.167,313.167 302.167,312.833 303.5,312.5C 312.109,310.895 320.776,310.062 329.5,310C 325.065,310.957 324.565,312.791 328,315.5C 328.667,316.5 328.667,317.5 328,318.5C 325.275,316.685 322.442,316.185 319.5,317C 319.833,317.333 320.167,317.667 320.5,318C 318.782,318.346 317.115,318.846 315.5,319.5C 313.997,318.948 312.331,318.948 310.5,319.5C 310.5,318.5 310.5,317.5 310.5,316.5C 315.357,316.313 320.024,315.48 324.5,314C 320.5,313.333 320.5,312.667 324.5,312C 317.509,312.247 310.509,312.747 303.5,313.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c6bfc3\",d:\"M 378.5,303.5 C 380.265,302.539 382.265,302.205 384.5,302.5C 383.697,303.423 383.53,304.423 384,305.5C 386.545,305.257 389.045,305.257 391.5,305.5C 392.463,305.97 392.463,306.637 391.5,307.5C 390.317,308.504 388.984,309.338 387.5,310C 388.598,310.77 388.598,311.603 387.5,312.5C 387.095,313.55 386.429,313.55 385.5,312.5C 384.224,313.614 384.224,314.614 385.5,315.5C 385.607,317.379 385.107,317.712 384,316.5C 383.581,312.148 382.914,311.815 382,315.5C 380.307,316.184 378.807,317.184 377.5,318.5C 376.328,318.081 375.328,317.415 374.5,316.5C 375.326,315.549 375.492,314.549 375,313.5C 373.5,311.531 371.667,310.198 369.5,309.5C 369.611,308.883 369.944,308.383 370.5,308C 375.037,307.907 379.037,306.574 382.5,304C 381.207,303.51 379.873,303.343 378.5,303.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a48c85\",d:\"M 50.5,284.5 C 50.5,287.167 50.5,289.833 50.5,292.5C 48.1667,292.5 45.8333,292.5 43.5,292.5C 43.5,293.833 43.5,295.167 43.5,296.5C 43.1667,296.5 42.8333,296.5 42.5,296.5C 42.5,295.167 42.5,293.833 42.5,292.5C 40.8333,292.5 39.1667,292.5 37.5,292.5C 37.5,294.833 37.5,297.167 37.5,299.5C 37.8333,300.167 38.1667,300.833 38.5,301.5C 38.5,303.833 38.5,306.167 38.5,308.5C 38.8333,311.167 39.1667,313.833 39.5,316.5C 41.1667,316.5 42.8333,316.5 44.5,316.5C 44.3505,315.448 44.5172,314.448 45,313.5C 45.3095,314.766 45.8095,315.933 46.5,317C 44.1902,317.497 41.8568,317.663 39.5,317.5C 39.7678,319.099 39.4345,320.432 38.5,321.5C 38.3542,317.481 38.0209,313.481 37.5,309.5C 35.8333,309.5 34.1667,309.5 32.5,309.5C 32.5,312.167 32.5,314.833 32.5,317.5C 35.2627,318.455 34.2627,318.622 29.5,318C 31.291,315.894 31.9577,313.394 31.5,310.5C 29.8333,310.5 28.1667,310.5 26.5,310.5C 26.5,313.5 26.5,316.5 26.5,319.5C 22.1617,319.378 21.8284,319.045 25.5,318.5C 25.5,315.833 25.5,313.167 25.5,310.5C 23.5,310.5 21.5,310.5 19.5,310.5C 19.6633,312.857 19.4966,315.19 19,317.5C 18.4625,312.829 17.9625,308.162 17.5,303.5C 15.8333,303.5 14.1667,303.5 12.5,303.5C 12.5,305.833 12.5,308.167 12.5,310.5C 17.8333,310.833 17.8333,311.167 12.5,311.5C 12.4733,319.394 11.8066,319.394 10.5,311.5C 8.59136,312.348 6.59136,312.682 4.5,312.5C 4.66018,314.199 4.49351,315.866 4,317.5C 2.77058,309.872 1.93725,302.205 1.5,294.5C 5.8383,294.622 6.17163,294.955 2.5,295.5C 2.5751,298.206 2.90843,300.873 3.5,303.5C 7.5,303.833 7.5,304.167 3.5,304.5C 3.52304,306.927 4.02304,309.26 5,311.5C 6.69946,310.594 8.5328,310.261 10.5,310.5C 10.5,308.167 10.5,305.833 10.5,303.5C 6.5,303.167 6.5,302.833 10.5,302.5C 9.5878,296.869 8.92113,291.202 8.5,285.5C 6.14316,285.663 3.80982,285.497 1.5,285C 7.48159,284.001 13.4816,283.668 19.5,284C 18.552,284.483 17.552,284.649 16.5,284.5C 17.0916,287.127 17.4249,289.794 17.5,292.5C 19.1667,292.5 20.8333,292.5 22.5,292.5C 23.0111,288.97 22.3444,285.804 20.5,283C 30.4906,282.251 40.4906,281.751 50.5,281.5C 50.5,282.5 50.5,283.5 50.5,284.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d2b8b2\",d:\"M 24.5,293.5 C 26.1667,293.5 27.8333,293.5 29.5,293.5C 30.0355,297.819 30.5355,302.152 31,306.5C 31.4935,304.866 31.6602,303.199 31.5,301.5C 36.8333,301.167 36.8333,300.833 31.5,300.5C 31.5,298.167 31.5,295.833 31.5,293.5C 32.8333,293.5 34.1667,293.5 35.5,293.5C 36.0582,298.516 36.7249,303.516 37.5,308.5C 31.523,309.165 25.523,309.498 19.5,309.5C 19.0074,307.194 18.6741,304.861 18.5,302.5C 20.5,302.5 22.5,302.5 24.5,302.5C 24.3398,304.199 24.5065,305.866 25,307.5C 25.8141,305.098 25.6474,302.765 24.5,300.5C 22.5914,301.348 20.5914,301.682 18.5,301.5C 18.7564,299.208 18.4231,297.041 17.5,295C 19.4727,294.505 21.4727,294.338 23.5,294.5C 23.3398,296.199 23.5065,297.866 24,299.5C 24.4955,297.527 24.6621,295.527 24.5,293.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d6bcb7\",d:\"M 12.5,284.5 C 13.5,284.5 14.5,284.5 15.5,284.5C 15.6759,289.907 16.3425,295.24 17.5,300.5C 15.6587,301.23 13.8254,301.897 12,302.5C 11.6892,300.444 11.1892,298.444 10.5,296.5C 11.9122,295.194 13.5789,294.36 15.5,294C 13.8659,293.506 12.1992,293.34 10.5,293.5C 9.90843,290.873 9.5751,288.206 9.5,285.5C 10.791,285.737 11.791,285.404 12.5,284.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d6bfb7\",d:\"M 24.5,283.5 C 26.1667,283.5 27.8333,283.5 29.5,283.5C 29.5,286.5 29.5,289.5 29.5,292.5C 27.8333,292.5 26.1667,292.5 24.5,292.5C 24.2492,289.29 24.2492,286.29 24.5,283.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d9c1b9\",d:\"M 39.5,282.5 C 41.3878,284.988 42.0545,287.988 41.5,291.5C 40.0222,291.762 38.6888,291.429 37.5,290.5C 36.6258,288.253 36.2924,285.92 36.5,283.5C 37.791,283.737 38.791,283.404 39.5,282.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d6c0b8\",d:\"M 42.5,282.5 C 48.9049,281.406 51.2382,284.073 49.5,290.5C 47.5328,290.261 45.6995,290.594 44,291.5C 43.0467,288.568 42.5467,285.568 42.5,282.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aaa39e\",d:\"M 181.5,315.5 C 181.565,315.062 181.399,314.728 181,314.5C 178.975,316.725 176.642,317.059 174,315.5C 169.332,317.066 164.499,318.066 159.5,318.5C 158.702,318.043 158.369,317.376 158.5,316.5C 158.441,314.235 159.274,313.902 161,315.5C 170.399,313.708 170.566,312.375 161.5,311.5C 162.167,310.167 162.833,308.833 163.5,307.5C 168.498,308.44 173.165,308.773 177.5,308.5C 178.192,307.975 178.692,307.308 179,306.5C 180.961,309.709 180.127,310.709 176.5,309.5C 175.3,310.531 173.966,311.365 172.5,312C 174.676,312.163 176.509,312.996 178,314.5C 179.066,312.901 180.566,311.901 182.5,311.5C 183.809,313.24 183.476,314.573 181.5,315.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cfb9b0\",d:\"M 57.5,278.5 C 55.5,278.5 53.5,278.5 51.5,278.5C 51.7947,280.735 51.4614,282.735 50.5,284.5C 50.5,283.5 50.5,282.5 50.5,281.5C 40.4906,281.751 30.4906,282.251 20.5,283C 22.3444,285.804 23.0111,288.97 22.5,292.5C 20.8333,292.5 19.1667,292.5 17.5,292.5C 17.4249,289.794 17.0916,287.127 16.5,284.5C 17.552,284.649 18.552,284.483 19.5,284C 13.4816,283.668 7.48159,284.001 1.5,285C 3.80982,285.497 6.14316,285.663 8.5,285.5C 8.92113,291.202 9.5878,296.869 10.5,302.5C 6.5,302.833 6.5,303.167 10.5,303.5C 10.5,305.833 10.5,308.167 10.5,310.5C 8.5328,310.261 6.69946,310.594 5,311.5C 4.02304,309.26 3.52304,306.927 3.5,304.5C 7.5,304.167 7.5,303.833 3.5,303.5C 2.90843,300.873 2.5751,298.206 2.5,295.5C 6.17163,294.955 5.8383,294.622 1.5,294.5C 1.93725,302.205 2.77058,309.872 4,317.5C 4.49351,315.866 4.66018,314.199 4.5,312.5C 6.59136,312.682 8.59136,312.348 10.5,311.5C 11.8066,319.394 12.4733,319.394 12.5,311.5C 17.8333,311.167 17.8333,310.833 12.5,310.5C 12.5,308.167 12.5,305.833 12.5,303.5C 14.1667,303.5 15.8333,303.5 17.5,303.5C 17.9625,308.162 18.4625,312.829 19,317.5C 19.4966,315.19 19.6633,312.857 19.5,310.5C 21.5,310.5 23.5,310.5 25.5,310.5C 25.5,313.167 25.5,315.833 25.5,318.5C 21.8284,319.045 22.1617,319.378 26.5,319.5C 26.5,316.5 26.5,313.5 26.5,310.5C 28.1667,310.5 29.8333,310.5 31.5,310.5C 31.9577,313.394 31.291,315.894 29.5,318C 34.2627,318.622 35.2627,318.455 32.5,317.5C 32.5,314.833 32.5,312.167 32.5,309.5C 34.1667,309.5 35.8333,309.5 37.5,309.5C 38.0209,313.481 38.3542,317.481 38.5,321.5C 38.5,322.5 38.5,323.5 38.5,324.5C 36.8333,324.5 35.1667,324.5 33.5,324.5C 33.6602,322.801 33.4935,321.134 33,319.5C 32.5034,321.81 32.3367,324.143 32.5,326.5C 33.8734,326.343 35.2068,326.51 36.5,327C 33.8709,329.789 34.5375,331.789 38.5,333C 34.5528,334.108 32.3861,332.608 32,328.5C 30.9326,327.809 29.7659,327.309 28.5,327C 28.8333,326.667 29.1667,326.333 29.5,326C 28.1667,325.333 26.8333,325.333 25.5,326C 27.6192,326.342 27.9526,327.175 26.5,328.5C 23.7673,325.761 20.7673,323.427 17.5,321.5C 17.369,320.761 17.5357,320.094 18,319.5C 18.6543,320.696 19.1543,320.696 19.5,319.5C 14.5075,318.408 9.50753,318.408 4.5,319.5C 4.71955,323.044 4.71955,326.378 4.5,329.5C 2.89319,319.163 1.22652,308.829 -0.5,298.5C -0.5,293.5 -0.5,288.5 -0.5,283.5C 5.87045,283.219 12.2038,282.552 18.5,281.5C 15.6017,279.645 12.6017,277.979 9.5,276.5C 8.49367,275.604 8.49367,274.938 9.5,274.5C 14.1894,277.153 14.5228,276.653 10.5,273C 10.8333,272.833 11.1667,272.667 11.5,272.5C 13.64,273.473 15.3067,274.973 16.5,277C 18.8907,277.287 21.2241,277.787 23.5,278.5C 24.7112,279.274 24.7112,280.107 23.5,281C 28.8592,281.134 34.1925,280.634 39.5,279.5C 38.4597,277.625 36.9597,276.292 35,275.5C 33.2998,276.927 31.4665,277.76 29.5,278C 30.8613,276.416 31.528,274.582 31.5,272.5C 28.128,273.449 24.7947,273.449 21.5,272.5C 20.4291,274.325 21.0958,275.492 23.5,276C 20.5934,276.854 18.2601,276.021 16.5,273.5C 14.1352,270.005 14.8019,269.672 18.5,272.5C 24.3067,271.7 29.9734,270.366 35.5,268.5C 36.4168,269.127 37.4168,269.461 38.5,269.5C 39.1667,269.5 39.8333,269.5 40.5,269.5C 43.006,272.03 44.8394,271.364 46,267.5C 46.9234,268.759 47.7568,270.092 48.5,271.5C 48.8333,270.833 49.1667,270.167 49.5,269.5C 51.9095,270.701 53.9095,272.367 55.5,274.5C 54.5,275.167 53.5,275.833 52.5,276.5C 54.2914,277.17 55.9581,277.837 57.5,278.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aba4a1\",d:\"M 219.5,306.5 C 220.167,306.5 220.833,306.5 221.5,306.5C 221.389,307.117 221.056,307.617 220.5,308C 223.914,308.297 227.247,308.964 230.5,310C 229.159,311.295 227.826,311.795 226.5,311.5C 228.078,312.298 229.744,312.798 231.5,313C 230.167,313.667 230.167,314.333 231.5,315C 228.173,315.61 224.839,316.11 221.5,316.5C 221.5,315.5 221.5,314.5 221.5,313.5C 225.449,313.307 225.449,312.807 221.5,312C 220.126,308.59 219.459,308.757 219.5,312.5C 218.5,312.5 217.5,312.5 216.5,312.5C 216.33,311.178 216.663,310.011 217.5,309C 215.789,307.867 215.289,306.367 216,304.5C 216.667,303.167 217.333,303.167 218,304.5C 218.333,305.833 218.667,307.167 219,308.5C 219.464,307.906 219.631,307.239 219.5,306.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6e686b\",d:\"M 400.5,313.5 C 399.609,314.11 398.609,314.443 397.5,314.5C 396.662,314.158 396.328,313.492 396.5,312.5C 398.001,311.557 399.335,311.891 400.5,313.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aba09c\",d:\"M 288.5,310.5 C 290.167,310.5 291.833,310.5 293.5,310.5C 293.5,311.833 293.5,313.167 293.5,314.5C 294.5,314.5 295.5,314.5 296.5,314.5C 294.188,315.341 291.855,316.341 289.5,317.5C 287.695,315.803 285.361,314.97 282.5,315C 290.197,313.749 289.863,312.749 281.5,312C 283.92,311.71 286.254,311.21 288.5,310.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#1d1919\",d:\"M 293.5,310.5 C 295.201,311.211 296.201,312.545 296.5,314.5C 295.5,314.5 294.5,314.5 293.5,314.5C 293.5,313.167 293.5,311.833 293.5,310.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#968f91\",d:\"M 393.5,313.5 C 391.365,315.369 388.698,316.036 385.5,315.5C 384.224,314.614 384.224,313.614 385.5,312.5C 386.429,313.55 387.095,313.55 387.5,312.5C 388.75,312.423 389.583,311.756 390,310.5C 391.223,311.357 392.389,312.357 393.5,313.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#827666\",d:\"M 112.5,288.5 C 112.5,289.167 112.5,289.833 112.5,290.5C 107.481,298.983 106.481,307.983 109.5,317.5C 107.389,318.742 105.389,318.742 103.5,317.5C 104.043,317.44 104.376,317.107 104.5,316.5C 103.335,315.416 102.002,314.583 100.5,314C 100.957,313.586 101.291,313.086 101.5,312.5C 99.9547,311.548 98.288,311.215 96.5,311.5C 95.5144,307.679 93.8477,304.179 91.5,301C 89.1287,300.265 86.7954,299.432 84.5,298.5C 83.3044,298.846 83.3044,299.346 84.5,300C 83.9056,300.464 83.2389,300.631 82.5,300.5C 80.9731,300.573 79.9731,299.906 79.5,298.5C 84.6243,297.933 89.6243,296.767 94.5,295C 92.6183,294.802 90.9516,294.302 89.5,293.5C 93.3668,292.62 97.2001,292.62 101,293.5C 104.54,291.151 108.374,289.484 112.5,288.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e2d5cc\",d:\"M 175.5,299.5 C 172.625,300.358 169.625,301.358 166.5,302.5C 166.919,303.672 167.585,304.672 168.5,305.5C 174.418,304.207 180.418,303.374 186.5,303C 191.456,303.442 193.789,301.276 193.5,296.5C 194.49,302.31 194.823,308.31 194.5,314.5C 191.582,315.454 188.582,316.121 185.5,316.5C 183.955,316.489 182.622,316.156 181.5,315.5C 183.476,314.573 183.809,313.24 182.5,311.5C 180.566,311.901 179.066,312.901 178,314.5C 176.509,312.996 174.676,312.163 172.5,312C 173.966,311.365 175.3,310.531 176.5,309.5C 180.127,310.709 180.961,309.709 179,306.5C 178.692,307.308 178.192,307.975 177.5,308.5C 173.165,308.773 168.498,308.44 163.5,307.5C 162.833,308.833 162.167,310.167 161.5,311.5C 170.566,312.375 170.399,313.708 161,315.5C 159.274,313.902 158.441,314.235 158.5,316.5C 157.833,316.5 157.167,316.5 156.5,316.5C 156.03,315.307 155.03,314.64 153.5,314.5C 152.006,314.709 150.839,315.376 150,316.5C 148.893,315.288 148.393,315.621 148.5,317.5C 148.167,317.5 147.833,317.5 147.5,317.5C 146.432,316.566 145.099,316.232 143.5,316.5C 143.443,315.391 143.11,314.391 142.5,313.5C 144.629,313.516 146.462,312.849 148,311.5C 149.824,312.238 151.824,312.572 154,312.5C 154.483,311.552 154.649,310.552 154.5,309.5C 148.162,309.567 141.829,310.234 135.5,311.5C 134.244,311.904 133.077,312.571 132,313.5C 130.578,312.795 129.245,312.461 128,312.5C 127.51,313.793 127.343,315.127 127.5,316.5C 132.006,315.689 136.34,315.689 140.5,316.5C 139.923,318.652 138.756,318.985 137,317.5C 136.26,318.749 136.427,319.749 137.5,320.5C 134.647,322.109 131.647,322.776 128.5,322.5C 128.167,322.333 127.833,322.167 127.5,322C 132.843,318.852 132.509,318.019 126.5,319.5C 125.774,315.321 125.774,311.321 126.5,307.5C 126.611,308.117 126.944,308.617 127.5,309C 133.6,309.623 139.6,309.123 145.5,307.5C 146.222,307.082 146.722,306.416 147,305.5C 150.271,306.525 153.271,306.525 156,305.5C 156.626,303.009 157.459,303.009 158.5,305.5C 160.326,305.08 162.326,305.08 164.5,305.5C 164.911,302.724 164.078,302.057 162,303.5C 158.401,301.66 154.734,301.993 151,304.5C 148.738,303.831 146.571,303.498 144.5,303.5C 142.5,303.5 140.5,303.5 138.5,303.5C 143.357,302.672 148.357,301.838 153.5,301C 154.167,300.667 154.833,300.333 155.5,300C 154.207,299.51 152.873,299.343 151.5,299.5C 151.369,298.761 151.536,298.094 152,297.5C 153.566,298.061 154.899,297.394 156,295.5C 156.333,296.167 156.667,296.833 157,297.5C 158.194,296.57 159.527,295.903 161,295.5C 163.009,295.995 165.176,295.995 167.5,295.5C 167.343,296.873 167.51,298.207 168,299.5C 170.363,298.768 172.863,298.768 175.5,299.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#84807a\",d:\"M 142.5,313.5 C 140.473,313.662 138.473,313.495 136.5,313C 135.944,312.617 135.611,312.117 135.5,311.5C 141.829,310.234 148.162,309.567 154.5,309.5C 154.649,310.552 154.483,311.552 154,312.5C 151.824,312.572 149.824,312.238 148,311.5C 146.462,312.849 144.629,313.516 142.5,313.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b38a69\",d:\"M 193.5,296.5 C 193.789,301.276 191.456,303.442 186.5,303C 180.418,303.374 174.418,304.207 168.5,305.5C 167.585,304.672 166.919,303.672 166.5,302.5C 169.625,301.358 172.625,300.358 175.5,299.5C 181.572,298.871 187.572,297.871 193.5,296.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b6b5b9\",d:\"M 412.5,311.5 C 412.611,313.648 411.944,313.981 410.5,312.5C 408.465,313.041 406.465,313.708 404.5,314.5C 406.816,315.932 409.316,316.932 412,317.5C 413.281,316.353 413.614,316.687 413,318.5C 411.163,318.665 409.163,319.332 407,320.5C 406.085,319.672 405.419,318.672 405,317.5C 404.667,318.833 404.333,320.167 404,321.5C 401.276,319.237 398.443,319.237 395.5,321.5C 393.075,320.1 393.408,318.934 396.5,318C 396.167,317.667 395.833,317.333 395.5,317C 396.381,316.292 397.047,315.458 397.5,314.5C 398.609,314.443 399.609,314.11 400.5,313.5C 401.251,314.573 402.251,314.74 403.5,314C 402.167,312.16 402.334,311.66 404,312.5C 406.779,309.589 409.612,309.256 412.5,311.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a3a2a7\",d:\"M 413.5,309.5 C 414.966,310.347 415.8,311.68 416,313.5C 416.893,312.289 417.726,312.289 418.5,313.5C 418.291,314.086 417.957,314.586 417.5,315C 419.433,315.251 421.266,315.751 423,316.5C 423.483,317.448 423.649,318.448 423.5,319.5C 421.196,318.502 418.863,318.335 416.5,319C 415.167,317.667 415.167,316.333 416.5,315C 414.944,314.28 413.944,313.113 413.5,311.5C 413.5,310.833 413.5,310.167 413.5,309.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e5e1e0\",d:\"M 469.5,289.5 C 472.431,291.261 474.931,293.594 477,296.5C 477.333,295.5 477.667,294.5 478,293.5C 479.8,296.051 481.8,298.385 484,300.5C 484.333,299.833 484.667,299.167 485,298.5C 486.905,299.292 489.071,299.292 491.5,298.5C 493.499,296.507 494.999,294.173 496,291.5C 497.617,292.536 497.784,293.703 496.5,295C 497.949,296.102 499.282,297.269 500.5,298.5C 501.836,300.01 503.003,301.677 504,303.5C 506.754,303.921 509.587,303.921 512.5,303.5C 509.557,305.266 506.723,307.266 504,309.5C 502.48,308.303 501.313,306.803 500.5,305C 497.119,304.939 494.286,303.773 492,301.5C 491.167,301.833 490.333,302.167 489.5,302.5C 491.702,307.044 494.702,311.044 498.5,314.5C 497.726,315.711 496.893,315.711 496,314.5C 494.306,316.656 492.473,316.489 490.5,314C 488.741,313.202 487.074,313.369 485.5,314.5C 486.995,317.18 489.328,318.68 492.5,319C 491.207,319.49 489.873,319.657 488.5,319.5C 488.5,320.5 488.5,321.5 488.5,322.5C 483.167,323.167 483.167,323.833 488.5,324.5C 488.312,327.206 487.312,329.539 485.5,331.5C 481.342,330.502 477.342,329.002 473.5,327C 476.09,324.711 477.923,325.211 479,328.5C 480.324,327.12 481.657,326.786 483,327.5C 483.783,325.681 483.283,324.348 481.5,323.5C 480.117,326.076 479.283,325.742 479,322.5C 477.391,321.853 475.891,321.02 474.5,320C 475.374,315.874 475.374,311.708 474.5,307.5C 476.399,305.747 477.065,303.747 476.5,301.5C 474.243,297.988 471.743,294.654 469,291.5C 468.308,290.563 468.475,289.897 469.5,289.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9a999d\",d:\"M 546.5,316.5 C 546.365,314.446 547.032,312.779 548.5,311.5C 549.789,310.499 551.122,310.666 552.5,312C 551.234,312.309 550.067,312.809 549,313.5C 548.409,314.483 548.743,315.15 550,315.5C 552.27,314.725 554.437,314.392 556.5,314.5C 557.386,315.325 557.719,316.325 557.5,317.5C 558.552,317.351 559.552,317.517 560.5,318C 557.452,318.606 554.952,320.106 553,322.5C 552.25,321.874 551.416,321.374 550.5,321C 552.167,319.833 553.833,318.667 555.5,317.5C 552.572,316.516 549.572,316.183 546.5,316.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#958b89\",d:\"M 241.5,315.5 C 244.435,317.175 247.435,317.841 250.5,317.5C 249.009,318.244 247.509,318.91 246,319.5C 241.934,319.632 237.767,319.299 233.5,318.5C 236.092,317.083 238.759,316.083 241.5,315.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f1e9ea\",d:\"M 198.5,327.5 C 198.433,329.401 198.767,331.234 199.5,333C 197.672,334.506 197.338,336.173 198.5,338C 197.906,338.464 197.239,338.631 196.5,338.5C 184.539,340.133 172.539,341.466 160.5,342.5C 160.028,340.469 159.028,338.802 157.5,337.5C 170.535,334.545 183.869,332.878 197.5,332.5C 197.795,330.265 197.461,328.265 196.5,326.5C 196.5,324.167 196.5,321.833 196.5,319.5C 187.37,321.732 178.203,323.732 169,325.5C 166.724,324.355 164.557,324.688 162.5,326.5C 158.814,325.172 155.147,325.172 151.5,326.5C 149.833,326.5 148.167,326.5 146.5,326.5C 150.544,324.699 154.21,323.533 157.5,323C 155.388,321.555 153.222,321.722 151,323.5C 148.595,322.726 146.095,322.226 143.5,322C 145.167,321.667 146.833,321.333 148.5,321C 145.854,320.503 143.187,320.336 140.5,320.5C 141.278,319.844 141.944,319.011 142.5,318C 142.164,316.97 141.497,316.47 140.5,316.5C 136.34,315.689 132.006,315.689 127.5,316.5C 127.343,315.127 127.51,313.793 128,312.5C 129.245,312.461 130.578,312.795 132,313.5C 133.077,312.571 134.244,311.904 135.5,311.5C 135.611,312.117 135.944,312.617 136.5,313C 138.473,313.495 140.473,313.662 142.5,313.5C 143.11,314.391 143.443,315.391 143.5,316.5C 143.62,317.586 144.287,318.253 145.5,318.5C 146.416,318.457 147.083,318.124 147.5,317.5C 147.833,317.5 148.167,317.5 148.5,317.5C 149.822,317.67 150.989,317.337 152,316.5C 152.667,319.167 153.333,319.167 154,316.5C 154.308,317.308 154.808,317.975 155.5,318.5C 155.787,317.8 156.12,317.133 156.5,316.5C 157.167,316.5 157.833,316.5 158.5,316.5C 158.369,317.376 158.702,318.043 159.5,318.5C 164.499,318.066 169.332,317.066 174,315.5C 176.642,317.059 178.975,316.725 181,314.5C 181.399,314.728 181.565,315.062 181.5,315.5C 182.622,316.156 183.955,316.489 185.5,316.5C 188.582,316.121 191.582,315.454 194.5,314.5C 194.823,308.31 194.49,302.31 193.5,296.5C 187.572,297.871 181.572,298.871 175.5,299.5C 177.111,297.905 179.111,296.739 181.5,296C 186.646,295.655 191.646,294.989 196.5,294C 196.167,294.333 195.833,294.667 195.5,295C 197.377,303.593 198.71,312.259 199.5,321C 198.484,322.942 198.151,325.109 198.5,327.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#847975\",d:\"M 143.5,316.5 C 145.099,316.232 146.432,316.566 147.5,317.5C 147.083,318.124 146.416,318.457 145.5,318.5C 144.287,318.253 143.62,317.586 143.5,316.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#948c8a\",d:\"M 156.5,316.5 C 156.12,317.133 155.787,317.8 155.5,318.5C 154.808,317.975 154.308,317.308 154,316.5C 153.333,319.167 152.667,319.167 152,316.5C 150.989,317.337 149.822,317.67 148.5,317.5C 148.393,315.621 148.893,315.288 150,316.5C 150.839,315.376 152.006,314.709 153.5,314.5C 155.03,314.64 156.03,315.307 156.5,316.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f4f1ef\",d:\"M 290.5,257.5 C 290.721,258.735 291.388,259.735 292.5,260.5C 291.798,262.776 291.965,265.109 293,267.5C 293.414,267.957 293.914,268.291 294.5,268.5C 296.005,265.869 296.671,266.203 296.5,269.5C 295.022,269.238 293.689,269.571 292.5,270.5C 293.089,273.64 293.756,276.64 294.5,279.5C 295.522,294.766 297.522,309.766 300.5,324.5C 302.622,342.778 304.289,361.111 305.5,379.5C 303.901,379.232 302.568,379.566 301.5,380.5C 301.167,380.5 300.833,380.5 300.5,380.5C 299.178,380.33 298.011,380.663 297,381.5C 296.79,379.942 296.29,378.609 295.5,377.5C 295.5,376.833 295.5,376.167 295.5,375.5C 296.833,374.833 298.167,374.167 299.5,373.5C 300.5,373.5 301.5,373.5 302.5,373.5C 302.5,371.833 302.5,370.167 302.5,368.5C 301.5,368.5 300.5,368.5 299.5,368.5C 298.292,369.234 296.959,369.567 295.5,369.5C 295.737,368.209 295.404,367.209 294.5,366.5C 294.5,365.167 294.5,363.833 294.5,362.5C 296.733,362.656 299.067,362.322 301.5,361.5C 301.5,359.833 301.5,358.167 301.5,356.5C 300.209,356.263 299.209,356.596 298.5,357.5C 296.833,357.5 295.167,357.5 293.5,357.5C 293.201,355.396 293.534,353.396 294.5,351.5C 296.336,350.972 298.003,350.306 299.5,349.5C 299.926,348.472 299.926,347.139 299.5,345.5C 297.374,344.897 295.041,344.897 292.5,345.5C 292.5,345.167 292.5,344.833 292.5,344.5C 292.025,341.687 293.025,339.687 295.5,338.5C 296.5,338.5 297.5,338.5 298.5,338.5C 298.5,336.833 298.5,335.167 298.5,333.5C 297.041,333.433 295.708,333.766 294.5,334.5C 292.801,334.473 291.467,333.806 290.5,332.5C 290.5,330.833 290.5,329.167 290.5,327.5C 292.733,327.656 295.067,327.322 297.5,326.5C 297.5,324.833 297.5,323.167 297.5,321.5C 296.209,321.263 295.209,321.596 294.5,322.5C 292.708,322.634 291.042,322.301 289.5,321.5C 289.5,320.167 289.5,318.833 289.5,317.5C 291.855,316.341 294.188,315.341 296.5,314.5C 296.201,312.545 295.201,311.211 293.5,310.5C 291.833,310.5 290.167,310.5 288.5,310.5C 288.5,310.167 288.5,309.833 288.5,309.5C 288.342,306.478 289.675,304.478 292.5,303.5C 293.167,303.5 293.833,303.5 294.5,303.5C 295.451,302.081 295.784,300.415 295.5,298.5C 292.833,298.833 290.167,299.167 287.5,299.5C 287.185,296.789 287.852,294.456 289.5,292.5C 290.833,292.5 292.167,292.5 293.5,292.5C 293.5,290.833 293.5,289.167 293.5,287.5C 292.5,287.5 291.5,287.5 290.5,287.5C 288.708,287.634 287.042,287.301 285.5,286.5C 285.5,285.167 285.5,283.833 285.5,282.5C 286.671,281.655 288.005,280.989 289.5,280.5C 290.5,280.5 291.5,280.5 292.5,280.5C 292.923,278.219 292.256,276.552 290.5,275.5C 288.451,276.641 286.451,276.641 284.5,275.5C 284.5,274.5 284.5,273.5 284.5,272.5C 284.577,271.25 285.244,270.417 286.5,270C 288.134,269.506 289.801,269.34 291.5,269.5C 291.784,267.585 291.451,265.919 290.5,264.5C 289.209,264.263 288.209,264.596 287.5,265.5C 286.167,265.5 284.833,265.5 283.5,265.5C 283.5,265.167 283.5,264.833 283.5,264.5C 283.014,262.193 283.014,260.027 283.5,258C 285.81,257.503 288.143,257.337 290.5,257.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f5f3f4\",d:\"M 548.5,311.5 C 547.032,312.779 546.365,314.446 546.5,316.5C 545.833,316.5 545.167,316.5 544.5,316.5C 544.5,315.5 544.5,314.5 544.5,313.5C 543.402,312.603 543.402,311.77 544.5,311C 541.993,310.907 539.826,310.074 538,308.5C 537.329,309.252 536.496,309.586 535.5,309.5C 535.953,308.542 536.619,307.708 537.5,307C 537.167,306.833 536.833,306.667 536.5,306.5C 532.442,309.107 528.442,308.941 524.5,306C 527.161,302.472 526.827,301.972 523.5,304.5C 521.929,303.803 520.429,303.47 519,303.5C 517.016,305.613 514.516,306.78 511.5,307C 510.167,308 510.167,309 511.5,310C 513.087,310.862 514.754,311.529 516.5,312C 514.833,312.333 513.167,312.667 511.5,313C 512.167,313.667 512.833,314.333 513.5,315C 512.034,315.635 510.7,316.469 509.5,317.5C 506.96,316.598 504.46,315.598 502,314.5C 500.067,315.882 498.234,317.382 496.5,319C 501.473,320.945 501.139,322.445 495.5,323.5C 495.5,324.833 495.5,326.167 495.5,327.5C 498.156,328.158 500.822,328.825 503.5,329.5C 506.154,328.732 508.821,328.566 511.5,329C 516.887,332.805 522.72,334.638 529,334.5C 529.972,329.282 531.806,324.948 534.5,321.5C 535.646,322.145 536.646,322.978 537.5,324C 535.833,325 534.167,326 532.5,327C 533.167,327.333 533.833,327.667 534.5,328C 531.922,330.157 531.922,331.323 534.5,331.5C 533.833,333.167 533.167,334.833 532.5,336.5C 535.744,338.026 539.077,339.36 542.5,340.5C 542.64,339.431 542.64,338.264 542.5,337C 543.656,335.385 544.989,335.385 546.5,337C 543.833,337.667 543.833,338.333 546.5,339C 543.967,340.916 543.967,342.916 546.5,345C 551.123,345.958 555.79,346.625 560.5,347C 559.748,347.671 559.414,348.504 559.5,349.5C 554.41,349.02 549.576,347.686 545,345.5C 543.943,347.219 543.11,349.053 542.5,351C 543.788,353.466 543.788,355.966 542.5,358.5C 543,359.5 543.5,360.5 544,361.5C 544.333,361.167 544.667,360.833 545,360.5C 545.692,361.437 545.525,362.103 544.5,362.5C 543.414,362.62 542.747,363.287 542.5,364.5C 542.833,365.167 543.167,365.833 543.5,366.5C 544.527,365.209 545.527,365.209 546.5,366.5C 544.701,367.27 543.368,368.603 542.5,370.5C 545.045,388.654 541.712,405.654 532.5,421.5C 531.833,421.5 531.167,421.5 530.5,421.5C 530.5,421.167 530.5,420.833 530.5,420.5C 532.22,419.249 532.553,417.749 531.5,416C 537.082,409.651 540.082,402.151 540.5,393.5C 540.926,391.861 540.926,390.528 540.5,389.5C 542.06,387.871 541.727,386.704 539.5,386C 540.973,385.29 541.64,384.124 541.5,382.5C 539.901,382.768 538.568,382.434 537.5,381.5C 538.833,381.5 540.167,381.5 541.5,381.5C 541.737,380.209 541.404,379.209 540.5,378.5C 540.938,376.874 541.272,375.207 541.5,373.5C 541.183,370.905 540.183,369.572 538.5,369.5C 538.167,369.5 537.833,369.5 537.5,369.5C 537.607,367.621 537.107,367.288 536,368.5C 535.5,368 535,367.5 534.5,367C 536.5,366.667 538.5,366.333 540.5,366C 539.5,365.667 538.5,365.333 537.5,365C 538.737,364.768 539.737,364.268 540.5,363.5C 540.5,362.833 540.5,362.167 540.5,361.5C 540.833,360.167 541.167,358.833 541.5,357.5C 541.54,352.807 541.873,348.141 542.5,343.5C 533.186,341.615 524.186,338.948 515.5,335.5C 513.413,332.475 510.746,331.475 507.5,332.5C 502.332,332.501 497.832,330.834 494,327.5C 493.383,328.449 493.549,329.282 494.5,330C 493.552,330.483 492.552,330.649 491.5,330.5C 491.649,331.552 491.483,332.552 491,333.5C 490.349,331.765 490.515,330.098 491.5,328.5C 491.154,327.304 490.654,327.304 490,328.5C 488.168,332.321 486.834,336.321 486,340.5C 485.167,341.333 484.333,342.167 483.5,343C 483.728,343.399 484.062,343.565 484.5,343.5C 483.449,344.222 482.782,345.222 482.5,346.5C 481.833,346.5 481.167,346.5 480.5,346.5C 480.715,344.821 480.048,343.821 478.5,343.5C 479.209,342.596 480.209,342.263 481.5,342.5C 481.178,340.278 481.845,338.444 483.5,337C 483.167,336.667 482.833,336.333 482.5,336C 484.89,334.89 485.89,333.39 485.5,331.5C 487.312,329.539 488.312,327.206 488.5,324.5C 483.167,323.833 483.167,323.167 488.5,322.5C 488.5,321.5 488.5,320.5 488.5,319.5C 489.873,319.657 491.207,319.49 492.5,319C 489.328,318.68 486.995,317.18 485.5,314.5C 487.074,313.369 488.741,313.202 490.5,314C 492.473,316.489 494.306,316.656 496,314.5C 496.893,315.711 497.726,315.711 498.5,314.5C 494.702,311.044 491.702,307.044 489.5,302.5C 490.333,302.167 491.167,301.833 492,301.5C 494.286,303.773 497.119,304.939 500.5,305C 501.313,306.803 502.48,308.303 504,309.5C 506.723,307.266 509.557,305.266 512.5,303.5C 513.391,302.89 514.391,302.557 515.5,302.5C 518.596,303.093 520.929,302.093 522.5,299.5C 523.598,300.615 524.765,300.615 526,299.5C 527.676,302.16 529.343,302.16 531,299.5C 534.025,301.794 537.192,302.961 540.5,303C 543.652,306.177 546.319,309.01 548.5,311.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#949397\",d:\"M 544.5,313.5 C 540.979,312.901 537.979,311.568 535.5,309.5C 536.496,309.586 537.329,309.252 538,308.5C 539.826,310.074 541.993,310.907 544.5,311C 543.402,311.77 543.402,312.603 544.5,313.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8d8d90\",d:\"M 535.5,309.5 C 532.15,309.665 528.817,309.498 525.5,309C 522.985,308.061 522.318,306.561 523.5,304.5C 526.827,301.972 527.161,302.472 524.5,306C 528.442,308.941 532.442,309.107 536.5,306.5C 536.833,306.667 537.167,306.833 537.5,307C 536.619,307.708 535.953,308.542 535.5,309.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#665d4f\",d:\"M 120.5,340.5 C 116.877,340.351 116.543,339.184 119.5,337C 119.056,335.238 118.556,335.405 118,337.5C 117.392,335.934 116.558,334.6 115.5,333.5C 113.194,324.745 111.194,315.912 109.5,307C 109.996,301.854 111.496,297.021 114,292.5C 115.836,308.513 118.002,324.513 120.5,340.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#95908b\",d:\"M 140.5,316.5 C 141.497,316.47 142.164,316.97 142.5,318C 141.944,319.011 141.278,319.844 140.5,320.5C 139.5,320.5 138.5,320.5 137.5,320.5C 136.427,319.749 136.26,318.749 137,317.5C 138.756,318.985 139.923,318.652 140.5,316.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9b9692\",d:\"M 227.5,317.5 C 229.167,317.5 230.833,317.5 232.5,317.5C 232.646,319.942 231.813,320.609 230,319.5C 227.865,321.278 225.365,321.945 222.5,321.5C 222.413,318.402 222.913,318.068 224,320.5C 225.145,319.364 226.312,318.364 227.5,317.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#978e8c\",d:\"M 252.5,312.5 C 252.92,317.528 253.587,322.528 254.5,327.5C 254.253,328.713 253.586,329.38 252.5,329.5C 240.617,330.778 228.783,332.444 217,334.5C 216.5,334.167 216,333.833 215.5,333.5C 227.727,330.991 240.06,329.325 252.5,328.5C 251.789,322.99 251.789,317.657 252.5,312.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f2ebe5\",d:\"M 456.5,339.5 C 456.02,348.965 456.687,358.299 458.5,367.5C 458.333,368.833 458.167,370.167 458,371.5C 457.333,370.167 456.667,370.167 456,371.5C 455.223,368.571 455.39,365.737 456.5,363C 454.771,361.211 454.104,359.044 454.5,356.5C 454.666,352.154 454.499,347.821 454,343.5C 450.612,339.283 449.445,334.616 450.5,329.5C 449.826,314.765 448.492,300.099 446.5,285.5C 447.268,286.263 447.768,287.263 448,288.5C 448.175,284.789 448.675,281.122 449.5,277.5C 449.833,277.833 450.167,278.167 450.5,278.5C 449.721,286.707 449.554,295.04 450,303.5C 452.172,315.518 454.339,327.518 456.5,339.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bda59d\",d:\"M 51.5,303.5 C 51.2322,305.099 51.5655,306.432 52.5,307.5C 52.1934,313.093 52.5268,318.593 53.5,324C 49.8582,324.914 46.1915,325.748 42.5,326.5C 45.386,326.71 48.386,326.877 51.5,327C 50.7449,329.133 49.4116,330.8 47.5,332C 51.4298,333.772 51.0965,334.938 46.5,335.5C 44.1776,334.511 42.5109,332.844 41.5,330.5C 40.537,330.97 40.537,331.637 41.5,332.5C 39.6214,332.393 39.2881,332.893 40.5,334C 37.854,334.497 35.1873,334.664 32.5,334.5C 30.1667,332.833 28.1667,330.833 26.5,328.5C 27.9526,327.175 27.6192,326.342 25.5,326C 26.8333,325.333 28.1667,325.333 29.5,326C 29.1667,326.333 28.8333,326.667 28.5,327C 29.7659,327.309 30.9326,327.809 32,328.5C 32.3861,332.608 34.5528,334.108 38.5,333C 34.5375,331.789 33.8709,329.789 36.5,327C 35.2068,326.51 33.8734,326.343 32.5,326.5C 32.3367,324.143 32.5034,321.81 33,319.5C 33.4935,321.134 33.6602,322.801 33.5,324.5C 35.1667,324.5 36.8333,324.5 38.5,324.5C 38.5,323.5 38.5,322.5 38.5,321.5C 39.4345,320.432 39.7678,319.099 39.5,317.5C 41.8568,317.663 44.1902,317.497 46.5,317C 45.8095,315.933 45.3095,314.766 45,313.5C 44.5172,314.448 44.3505,315.448 44.5,316.5C 42.8333,316.5 41.1667,316.5 39.5,316.5C 39.1667,313.833 38.8333,311.167 38.5,308.5C 42.5835,308.596 44.2501,306.263 43.5,301.5C 41.8333,301.5 40.1667,301.5 38.5,301.5C 38.1667,300.833 37.8333,300.167 37.5,299.5C 39.1667,299.5 40.8333,299.5 42.5,299.5C 42.5,298.5 42.5,297.5 42.5,296.5C 42.8333,296.5 43.1667,296.5 43.5,296.5C 43.4142,297.496 43.7476,298.329 44.5,299C 46.4727,299.495 48.4727,299.662 50.5,299.5C 50.3433,298.127 50.51,296.793 51,295.5C 51.4974,298.146 51.6641,300.813 51.5,303.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9a9183\",d:\"M 93.5,316.5 C 95.3854,316.882 96.8854,318.215 98,320.5C 98.6067,324.537 98.44,328.537 97.5,332.5C 96.448,332.351 95.448,332.517 94.5,333C 96.3635,334.431 98.3635,335.597 100.5,336.5C 102.481,338.144 104.481,339.81 106.5,341.5C 105.284,342.096 103.951,342.263 102.5,342C 105.151,345.188 104.484,346.021 100.5,344.5C 97.8333,341.5 95.1667,338.5 92.5,335.5C 89.3975,330.948 86.0642,326.614 82.5,322.5C 80.7809,321.978 79.4475,320.978 78.5,319.5C 81.1281,318.466 83.7948,318.799 86.5,320.5C 88.5499,319.923 89.5499,318.59 89.5,316.5C 90.8333,316.5 92.1667,316.5 93.5,316.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9b9593\",d:\"M 213.5,309.5 C 215.403,316.594 215.903,323.927 215,331.5C 213.753,324.221 213.253,316.888 213.5,309.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#918f95\",d:\"M 378.5,319.5 C 380.01,320.728 381.51,320.728 383,319.5C 383.333,320.167 383.667,320.833 384,321.5C 385.441,320.74 386.941,320.074 388.5,319.5C 389.5,319.833 390.167,320.5 390.5,321.5C 388.52,321.303 386.52,321.97 384.5,323.5C 381.947,323.055 379.28,323.055 376.5,323.5C 376.538,321.364 377.205,320.031 378.5,319.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#91837e\",d:\"M 289.5,321.5 C 291.042,322.301 292.708,322.634 294.5,322.5C 294.5,323.833 294.5,325.167 294.5,326.5C 295.5,326.5 296.5,326.5 297.5,326.5C 295.067,327.322 292.733,327.656 290.5,327.5C 279.202,327.745 278.869,326.911 289.5,325C 286.833,324.667 284.167,324.333 281.5,324C 284.379,323.454 287.046,322.621 289.5,321.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#322e2f\",d:\"M 297.5,326.5 C 296.5,326.5 295.5,326.5 294.5,326.5C 294.5,325.167 294.5,323.833 294.5,322.5C 295.209,321.596 296.209,321.263 297.5,321.5C 297.5,323.167 297.5,324.833 297.5,326.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9b9b9c\",d:\"M 548.5,322.5 C 550.57,324.567 552.404,326.234 554,327.5C 557.811,326.034 558.311,326.7 555.5,329.5C 552.429,329.077 549.595,328.077 547,326.5C 546.516,324.807 547.016,323.473 548.5,322.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bcafa8\",d:\"M 443.5,279.5 C 444.5,281.5 445.5,283.5 446.5,285.5C 448.492,300.099 449.826,314.765 450.5,329.5C 449.732,328.737 449.232,327.737 449,326.5C 448.722,327.416 448.222,328.082 447.5,328.5C 447.831,320.14 447.498,311.807 446.5,303.5C 444.978,300.371 444.145,297.037 444,293.5C 443.501,288.845 443.334,284.179 443.5,279.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d7d2cd\",d:\"M 474.5,307.5 C 475.374,311.708 475.374,315.874 474.5,320C 475.891,321.02 477.391,321.853 479,322.5C 479.283,325.742 480.117,326.076 481.5,323.5C 483.283,324.348 483.783,325.681 483,327.5C 481.657,326.786 480.324,327.12 479,328.5C 477.923,325.211 476.09,324.711 473.5,327C 477.342,329.002 481.342,330.502 485.5,331.5C 485.89,333.39 484.89,334.89 482.5,336C 482.833,336.333 483.167,336.667 483.5,337C 481.845,338.444 481.178,340.278 481.5,342.5C 480.209,342.263 479.209,342.596 478.5,343.5C 475.702,342.9 473.035,341.9 470.5,340.5C 467.074,344.501 465.741,349.167 466.5,354.5C 464.065,346.785 462.899,338.785 463,330.5C 465.317,335.404 469.151,337.904 474.5,338C 470.383,335.552 466.883,332.385 464,328.5C 462.989,329.337 461.822,329.67 460.5,329.5C 459.913,323.399 458.747,317.399 457,311.5C 456.501,306.177 456.334,300.844 456.5,295.5C 457.953,299.291 459.119,303.291 460,307.5C 461.167,306.333 462.333,305.167 463.5,304C 461.78,299.334 460.78,294.501 460.5,289.5C 462.582,289.472 464.416,290.139 466,291.5C 466.146,295.069 466.98,298.402 468.5,301.5C 468.201,303.815 467.368,303.815 466,301.5C 465.503,303.81 465.337,306.143 465.5,308.5C 466.822,308.33 467.989,308.663 469,309.5C 470.792,307.048 471.959,304.714 472.5,302.5C 473.95,303.85 474.617,305.516 474.5,307.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#958c85\",d:\"M 237.5,321.5 C 239.359,321.461 240.692,322.294 241.5,324C 235.959,324.562 230.459,325.396 225,326.5C 222.759,326.32 222.259,325.487 223.5,324C 227.041,322.745 230.541,322.578 234,323.5C 235.302,322.915 236.469,322.249 237.5,321.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#87796c\",d:\"M 93.5,316.5 C 96.2062,316.575 98.8728,316.908 101.5,317.5C 103.465,321.339 105.132,325.339 106.5,329.5C 105.844,331.453 105.511,333.453 105.5,335.5C 103.585,335.216 101.919,335.549 100.5,336.5C 98.3635,335.597 96.3635,334.431 94.5,333C 95.448,332.517 96.448,332.351 97.5,332.5C 98.44,328.537 98.6067,324.537 98,320.5C 96.8854,318.215 95.3854,316.882 93.5,316.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b58c90\",d:\"M 196.5,326.5 C 196.5,328.167 196.5,329.833 196.5,331.5C 191.489,331.666 186.489,331.499 181.5,331C 184.833,330.667 188.167,330.333 191.5,330C 194.346,329.121 195.013,327.454 193.5,325C 188.655,324.225 184.322,325.392 180.5,328.5C 179.893,328.376 179.56,328.043 179.5,327.5C 179.649,326.448 179.483,325.448 179,324.5C 177.887,325.711 176.72,325.711 175.5,324.5C 173.517,324.815 172.184,325.815 171.5,327.5C 168.118,330.105 164.618,330.105 161,327.5C 158.763,328.056 156.763,329.056 155,330.5C 152.907,329.766 152.407,330.433 153.5,332.5C 152.5,333.833 151.5,333.833 150.5,332.5C 151.547,331.922 151.38,331.256 150,330.5C 147.701,331.58 145.534,331.246 143.5,329.5C 144.374,328.475 145.541,327.808 147,327.5C 148.422,328.205 149.755,328.539 151,328.5C 151.464,327.906 151.631,327.239 151.5,326.5C 155.147,325.172 158.814,325.172 162.5,326.5C 164.557,324.688 166.724,324.355 169,325.5C 178.203,323.732 187.37,321.732 196.5,319.5C 196.5,321.833 196.5,324.167 196.5,326.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7a4f53\",d:\"M 179.5,327.5 C 177.005,327.031 174.339,327.031 171.5,327.5C 172.184,325.815 173.517,324.815 175.5,324.5C 176.72,325.711 177.887,325.711 179,324.5C 179.483,325.448 179.649,326.448 179.5,327.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#56433d\",d:\"M 284.5,303.5 C 285.5,303.5 286.5,303.5 287.5,303.5C 287.205,305.735 287.539,307.735 288.5,309.5C 288.5,309.833 288.5,310.167 288.5,310.5C 286.254,311.21 283.92,311.71 281.5,312C 289.863,312.749 290.197,313.749 282.5,315C 285.361,314.97 287.695,315.803 289.5,317.5C 289.5,318.833 289.5,320.167 289.5,321.5C 287.046,322.621 284.379,323.454 281.5,324C 284.167,324.333 286.833,324.667 289.5,325C 278.869,326.911 279.202,327.745 290.5,327.5C 290.5,329.167 290.5,330.833 290.5,332.5C 289.051,334.164 287.051,334.998 284.5,335C 291.542,335.714 291.876,336.714 285.5,338C 287.473,338.495 289.473,338.662 291.5,338.5C 291.205,340.735 291.539,342.735 292.5,344.5C 292.5,344.833 292.5,345.167 292.5,345.5C 284.602,346.635 284.602,347.468 292.5,348C 284.704,349.762 284.704,350.595 292.5,350.5C 292.5,352.833 292.5,355.167 292.5,357.5C 286.019,358.816 286.352,359.649 293.5,360C 291.655,361.128 289.655,361.628 287.5,361.5C 285.708,361.634 284.042,361.301 282.5,360.5C 281.167,360.5 279.833,360.5 278.5,360.5C 278.5,360.167 278.5,359.833 278.5,359.5C 279.5,359.5 280.5,359.5 281.5,359.5C 281.5,356.833 281.5,354.167 281.5,351.5C 278.779,351.963 276.112,352.629 273.5,353.5C 272.549,352.081 272.216,350.415 272.5,348.5C 273.5,348.5 274.5,348.5 275.5,348.5C 276.919,347.549 278.585,347.216 280.5,347.5C 280.536,344.539 279.536,342.206 277.5,340.5C 277.5,339.833 277.167,339.5 276.5,339.5C 277.398,338.842 278.398,338.176 279.5,337.5C 275.689,336.262 275.689,335.596 279.5,335.5C 279.5,333.167 279.5,330.833 279.5,328.5C 276.068,328.757 272.734,329.424 269.5,330.5C 269.5,328.833 269.5,327.167 269.5,325.5C 272.118,325.221 274.618,324.554 277,323.5C 277.497,321.19 277.663,318.857 277.5,316.5C 274.421,316.804 271.587,317.804 269,319.5C 268.505,317.527 268.338,315.527 268.5,313.5C 271.167,313.167 273.833,312.833 276.5,312.5C 277.473,310.052 277.806,307.385 277.5,304.5C 280.059,304.802 282.393,304.468 284.5,303.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e8e0e2\",d:\"M 273.5,325.5 C 278.814,325.239 279.314,325.906 275,327.5C 273.97,327.164 273.47,326.497 273.5,325.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ccc1bf\",d:\"M 274.5,313.5 C 275.675,313.281 276.675,313.614 277.5,314.5C 275.477,315.855 273.477,316.188 271.5,315.5C 272.602,314.824 273.602,314.158 274.5,313.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f4f1f4\",d:\"M 453.5,254.5 C 453.793,260.217 454.46,265.884 455.5,271.5C 455.5,273.5 455.5,275.5 455.5,277.5C 455.5,280.167 455.5,282.833 455.5,285.5C 454.957,285.56 454.624,285.893 454.5,286.5C 455.275,289.484 455.941,292.484 456.5,295.5C 456.334,300.844 456.501,306.177 457,311.5C 458.747,317.399 459.913,323.399 460.5,329.5C 461.822,329.67 462.989,329.337 464,328.5C 466.883,332.385 470.383,335.552 474.5,338C 469.151,337.904 465.317,335.404 463,330.5C 462.899,338.785 464.065,346.785 466.5,354.5C 467.272,358.452 467.605,362.452 467.5,366.5C 468.5,366.5 469.5,366.5 470.5,366.5C 469.962,369.905 468.629,372.905 466.5,375.5C 464.689,378.444 462.856,381.444 461,384.5C 460.51,385.793 460.343,387.127 460.5,388.5C 460.5,389.167 460.167,389.5 459.5,389.5C 459.565,389.062 459.399,388.728 459,388.5C 457.121,391.461 455.621,394.627 454.5,398C 455.89,402.33 456.557,406.497 456.5,410.5C 457.685,415.425 458.351,420.425 458.5,425.5C 456.585,425.216 454.919,425.549 453.5,426.5C 450.833,426.5 448.167,426.5 445.5,426.5C 444.127,426.657 442.793,426.49 441.5,426C 442.552,424.284 441.886,423.284 439.5,423C 443.852,422.581 444.185,421.914 440.5,421C 441.167,420.667 441.833,420.333 442.5,420C 440.881,419.764 439.881,418.931 439.5,417.5C 441.527,417.662 443.527,417.495 445.5,417C 446.022,416.439 446.355,415.772 446.5,415C 442.415,387.33 438.082,359.83 433.5,332.5C 433.296,329.482 432.963,326.482 432.5,323.5C 432.539,322.417 432.873,321.417 433.5,320.5C 435.341,319.77 437.175,319.103 439,318.5C 439.414,318.957 439.914,319.291 440.5,319.5C 441.48,316.914 441.813,314.247 441.5,311.5C 441.336,308.813 441.503,306.146 442,303.5C 442.198,305.382 442.698,307.048 443.5,308.5C 443.956,316.9 444.956,325.233 446.5,333.5C 448.615,353.2 451.115,372.867 454,392.5C 455.188,391.437 455.688,390.103 455.5,388.5C 457.201,387.789 458.201,386.455 458.5,384.5C 459.167,382.833 459.833,381.167 460.5,379.5C 462.466,378.745 462.8,377.579 461.5,376C 464.54,374.622 466.54,372.289 467.5,369C 466.259,364.205 465.259,359.371 464.5,354.5C 463.683,349.109 462.683,343.776 461.5,338.5C 458.572,324.693 455.072,311.026 451,297.5C 450.179,294.446 450.345,291.446 451.5,288.5C 452.192,289.025 452.692,289.692 453,290.5C 453.5,287 454,283.5 454.5,280C 453.142,269.971 451.476,260.138 449.5,250.5C 449.5,250.167 449.5,249.833 449.5,249.5C 449.369,248.761 449.536,248.094 450,247.5C 451.044,248.623 451.71,249.956 452,251.5C 452.333,250.833 452.667,250.167 453,249.5C 453.494,251.134 453.66,252.801 453.5,254.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ccb4aa\",d:\"M 52.5,364.5 C 51.3263,363.486 50.6596,362.153 50.5,360.5C 51.5,360.5 52.5,360.5 53.5,360.5C 53.683,358.064 53.0163,355.897 51.5,354C 53.0368,352.89 53.7035,351.39 53.5,349.5C 55.8273,349.753 57.8273,349.086 59.5,347.5C 58.6083,344.716 57.4416,342.05 56,339.5C 55.7623,342.308 56.0956,344.974 57,347.5C 55.9505,348.517 54.7839,348.684 53.5,348C 55.5951,347.444 55.7618,346.944 54,346.5C 52.416,346.988 51.2494,347.988 50.5,349.5C 49.5937,347.614 48.5937,345.78 47.5,344C 49.1134,343.911 50.2801,344.745 51,346.5C 51.3333,345.5 51.6667,344.5 52,343.5C 52.7253,345.158 53.892,345.658 55.5,345C 54.7173,343.06 52.884,341.56 50,340.5C 49.8333,340.167 49.6667,339.833 49.5,339.5C 52.7973,338.858 53.1307,337.691 50.5,336C 51.7839,335.316 52.9505,335.483 54,336.5C 54.4561,335.256 53.9561,334.423 52.5,334C 53.1258,333.25 53.6258,332.416 54,331.5C 56.4533,331.941 58.9533,331.441 61.5,330C 60.0439,329.577 59.5439,328.744 60,327.5C 60.3333,327.833 60.6667,328.167 61,328.5C 64.2073,325.85 64.7073,326.016 62.5,329C 63.5,329.667 64.5,329.667 65.5,329C 65.9662,327.701 65.9662,326.201 65.5,324.5C 62.4017,324.587 62.0684,324.087 64.5,323C 67.1667,322.333 69.8333,322.333 72.5,323C 70.4233,323.192 68.4233,323.692 66.5,324.5C 67.2458,325.736 67.5792,327.07 67.5,328.5C 69.9928,328.671 71.8261,327.671 73,325.5C 73.1667,326 73.3333,326.5 73.5,327C 71.9146,328.289 70.5813,329.789 69.5,331.5C 71.1458,333.055 71.4791,334.721 70.5,336.5C 71.4978,339.028 72.3311,339.028 73,336.5C 73.3076,337.308 73.8076,337.975 74.5,338.5C 75.4287,337.311 75.762,335.978 75.5,334.5C 71.6607,334.388 71.6607,333.721 75.5,332.5C 76.2508,333.376 76.7508,334.376 77,335.5C 78.3333,334.167 79.6667,334.167 81,335.5C 81.4585,339.419 82.2918,343.252 83.5,347C 83.3072,350.154 82.3072,352.987 80.5,355.5C 80.7093,356.086 81.0426,356.586 81.5,357C 79.316,357.442 77.316,356.942 75.5,355.5C 76.376,354.749 77.376,354.249 78.5,354C 76.1088,353.309 76.1088,352.309 78.5,351C 77.1011,350.405 75.7678,350.572 74.5,351.5C 72.9954,348.869 72.3287,349.203 72.5,352.5C 71.5,352.5 70.5,352.5 69.5,352.5C 69.7251,356.056 68.8918,356.39 67,353.5C 66.5,353.667 66,353.833 65.5,354C 68.2137,356.188 68.8804,358.855 67.5,362C 64.1782,363.543 60.6782,364.709 57,365.5C 55.5603,364.852 54.0603,364.519 52.5,364.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#675b4e\",d:\"M 101.5,317.5 C 102.167,317.5 102.833,317.5 103.5,317.5C 105.389,318.742 107.389,318.742 109.5,317.5C 112.151,326.139 114.151,334.805 115.5,343.5C 115.5,343.833 115.5,344.167 115.5,344.5C 112.157,345.224 108.824,346.057 105.5,347C 107.437,347.122 108.77,347.955 109.5,349.5C 108.448,349.351 107.448,349.517 106.5,350C 107.738,350.69 107.738,351.19 106.5,351.5C 105.167,351.5 103.833,351.5 102.5,351.5C 103.38,348.875 102.713,346.542 100.5,344.5C 104.484,346.021 105.151,345.188 102.5,342C 103.951,342.263 105.284,342.096 106.5,341.5C 104.481,339.81 102.481,338.144 100.5,336.5C 101.919,335.549 103.585,335.216 105.5,335.5C 105.511,333.453 105.844,331.453 106.5,329.5C 105.132,325.339 103.465,321.339 101.5,317.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f0eff1\",d:\"M 207.5,295.5 C 209.665,307.623 211.332,319.956 212.5,332.5C 212.43,333.772 212.097,334.938 211.5,336C 217.767,335.903 223.934,335.736 230,335.5C 231.171,336.34 232.338,337.173 233.5,338C 233.043,338.414 232.709,338.914 232.5,339.5C 234.045,340.452 235.712,340.785 237.5,340.5C 237.5,338.833 237.5,337.167 237.5,335.5C 239.527,335.662 241.527,335.495 243.5,335C 242.5,334.667 241.5,334.333 240.5,334C 248.11,332.423 255.777,331.756 263.5,332C 263.043,332.414 262.709,332.914 262.5,333.5C 264.005,334.842 264.672,336.508 264.5,338.5C 265.675,338.281 266.675,338.614 267.5,339.5C 267.154,340.696 266.654,340.696 266,339.5C 260.364,340.916 254.697,342.582 249,344.5C 247.171,344.435 245.338,344.102 243.5,343.5C 242.504,342.335 241.171,341.668 239.5,341.5C 236.594,341.7 234.094,342.7 232,344.5C 230.274,343.424 228.441,343.257 226.5,344C 227.056,344.383 227.389,344.883 227.5,345.5C 226.542,345.953 225.708,346.619 225,347.5C 219.249,346.69 213.416,346.19 207.5,346C 206.333,345.5 205.5,344.667 205,343.5C 204.161,344.624 202.994,345.291 201.5,345.5C 198.073,343.4 196.74,344.4 197.5,348.5C 196.521,345.375 196.187,342.042 196.5,338.5C 197.239,338.631 197.906,338.464 198.5,338C 197.338,336.173 197.672,334.506 199.5,333C 198.767,331.234 198.433,329.401 198.5,327.5C 200.245,330.403 201.245,330.07 201.5,326.5C 200.828,324.168 200.661,321.834 201,319.5C 203.139,320.769 205.305,320.769 207.5,319.5C 205.577,318.692 203.577,318.192 201.5,318C 200.167,317.333 200.167,316.667 201.5,316C 200.833,315.667 200.167,315.333 199.5,315C 202.117,314.178 204.784,313.678 207.5,313.5C 207.5,310.167 207.5,306.833 207.5,303.5C 206.127,303.657 204.793,303.49 203.5,303C 205.002,302.417 206.335,301.584 207.5,300.5C 203.689,299.262 203.689,298.596 207.5,298.5C 207.5,297.5 207.5,296.5 207.5,295.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e9d3c0\",d:\"M 345.5,322.5 C 342.667,325.25 339.334,326.916 335.5,327.5C 327.254,329.038 318.587,330.205 309.5,331C 308.167,331.333 306.833,331.667 305.5,332C 304.304,332.654 304.304,333.154 305.5,333.5C 310.091,332.368 314.758,331.701 319.5,331.5C 319.66,333.199 319.494,334.866 319,336.5C 317.167,336.333 315.333,336.167 313.5,336C 314.731,337.183 314.731,338.349 313.5,339.5C 311.471,338.371 311.137,338.871 312.5,341C 311.128,341.402 309.795,341.902 308.5,342.5C 307.373,340.731 307.873,339.397 310,338.5C 310.402,337.128 310.902,335.795 311.5,334.5C 311.167,334.167 310.833,333.833 310.5,333.5C 308.497,335.133 307.164,337.133 306.5,339.5C 305.566,338.432 305.232,337.099 305.5,335.5C 304.5,335.5 303.5,335.5 302.5,335.5C 302.192,331.64 301.525,327.974 300.5,324.5C 300.74,321.421 300.407,318.421 299.5,315.5C 299.833,315.167 300.167,314.833 300.5,314.5C 301.258,315.811 302.258,316.311 303.5,316C 302.402,315.23 302.402,314.397 303.5,313.5C 310.509,312.747 317.509,312.247 324.5,312C 320.5,312.667 320.5,313.333 324.5,314C 320.024,315.48 315.357,316.313 310.5,316.5C 310.5,317.5 310.5,318.5 310.5,319.5C 312.331,318.948 313.997,318.948 315.5,319.5C 317.115,318.846 318.782,318.346 320.5,318C 320.167,317.667 319.833,317.333 319.5,317C 322.442,316.185 325.275,316.685 328,318.5C 328.667,317.5 328.667,316.5 328,315.5C 324.565,312.791 325.065,310.957 329.5,310C 320.776,310.062 312.109,310.895 303.5,312.5C 303.5,311.5 303.5,310.5 303.5,309.5C 304.675,309.719 305.675,309.386 306.5,308.5C 305.332,307.094 305.665,305.928 307.5,305C 305.905,305.617 304.572,305.284 303.5,304C 308.689,302.46 313.856,302.293 319,303.5C 326.88,301.373 334.88,299.706 343,298.5C 343.494,300.134 343.66,301.801 343.5,303.5C 346.167,303.5 348.833,303.5 351.5,303.5C 351.5,304.5 351.5,305.5 351.5,306.5C 344.444,307.09 337.444,308.09 330.5,309.5C 334.33,309.509 338.33,309.675 342.5,310C 340.698,311.827 338.532,312.994 336,313.5C 335.388,315.237 336.054,316.237 338,316.5C 339.333,315.833 340.667,315.167 342,314.5C 342.772,314.645 343.439,314.978 344,315.5C 344.626,313.009 345.459,313.009 346.5,315.5C 347.5,314.167 348.5,314.167 349.5,315.5C 350.167,314.833 350.833,314.167 351.5,313.5C 351.736,314.247 352.07,315.08 352.5,316C 336.171,318.444 319.838,320.777 303.5,323C 317.875,322.199 332.209,320.699 346.5,318.5C 347.167,318.667 347.833,318.833 348.5,319C 346.944,319.72 345.944,320.887 345.5,322.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#857165\",d:\"M 309.5,306.5 C 310.239,306.369 310.906,306.536 311.5,307C 310.304,307.654 310.304,308.154 311.5,308.5C 312.5,307.833 313.5,307.167 314.5,306.5C 315.711,307.274 315.711,308.107 314.5,309C 312.866,309.494 311.199,309.66 309.5,309.5C 309.5,308.5 309.5,307.5 309.5,306.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7b685e\",d:\"M 336.5,303.5 C 338.924,303.635 340.924,303.968 342.5,304.5C 342.192,305.308 341.692,305.975 341,306.5C 338.065,305.9 335.398,305.9 333,306.5C 332.833,306.167 332.667,305.833 332.5,305.5C 333.949,304.828 335.282,304.161 336.5,303.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9f9081\",d:\"M 323.5,304.5 C 325.167,304.5 326.833,304.5 328.5,304.5C 328.33,305.822 328.663,306.989 329.5,308C 326.249,307.345 323.082,307.845 320,309.5C 318.989,308.663 317.822,308.33 316.5,308.5C 316.5,307.5 316.5,306.5 316.5,305.5C 319.059,305.802 321.393,305.468 323.5,304.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c5a9a8\",d:\"M 431.5,323.5 C 431.833,323.5 432.167,323.5 432.5,323.5C 432.963,326.482 433.296,329.482 433.5,332.5C 433.649,333.552 433.483,334.552 433,335.5C 432.012,332.576 431.346,329.576 431,326.5C 430.833,328 430.667,329.5 430.5,331C 432.196,340.429 433.196,349.929 433.5,359.5C 431.551,349.009 429.884,338.343 428.5,327.5C 423.472,327.92 418.472,328.587 413.5,329.5C 410.392,330.686 410.058,332.186 412.5,334C 411.36,336.277 410.027,336.61 408.5,335C 412.449,334.193 412.449,333.693 408.5,333.5C 408.5,332.5 408.5,331.5 408.5,330.5C 397.407,330.841 386.407,332.008 375.5,334C 375.481,336.969 375.314,340.135 375,343.5C 374.281,339.855 373.781,336.188 373.5,332.5C 380.157,331.668 386.823,330.835 393.5,330C 395.744,329.95 397.411,329.117 398.5,327.5C 409.474,326.087 420.474,324.753 431.5,323.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#af9594\",d:\"M 17.5,321.5 C 16.352,322.164 15.0187,322.331 13.5,322C 11.6239,324.046 9.62395,325.879 7.5,327.5C 7.66667,327.833 7.83333,328.167 8,328.5C 9.15445,327.257 10.4878,326.257 12,325.5C 13.3513,327.019 14.8513,328.352 16.5,329.5C 17.6199,328.167 18.9532,327.667 20.5,328C 18,330.5 15.5,333 13,335.5C 12.8374,333.613 13.6707,332.113 15.5,331C 14.5,330 13.5,329 12.5,328C 10.4634,328.483 8.46338,329.316 6.5,330.5C 6.15829,329.662 5.49162,329.328 4.5,329.5C 4.71955,326.378 4.71955,323.044 4.5,319.5C 9.50753,318.408 14.5075,318.408 19.5,319.5C 19.1543,320.696 18.6543,320.696 18,319.5C 17.5357,320.094 17.369,320.761 17.5,321.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#332d2c\",d:\"M 295.5,338.5 C 295.567,337.041 295.234,335.708 294.5,334.5C 295.708,333.766 297.041,333.433 298.5,333.5C 298.5,335.167 298.5,336.833 298.5,338.5C 297.5,338.5 296.5,338.5 295.5,338.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e8e3e7\",d:\"M 82.5,322.5 C 86.0642,326.614 89.3975,330.948 92.5,335.5C 92.5654,335.938 92.3988,336.272 92,336.5C 90.8867,334.671 89.3867,333.837 87.5,334C 89.019,335.351 90.3523,336.851 91.5,338.5C 90.2889,339.72 90.2889,340.887 91.5,342C 89.4311,342.324 89.0977,343.158 90.5,344.5C 89.7695,347.109 89.2695,349.776 89,352.5C 85.9359,342.69 82.4359,333.023 78.5,323.5C 79.6888,322.571 81.0222,322.238 82.5,322.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c8a1a5\",d:\"M 196.5,326.5 C 197.461,328.265 197.795,330.265 197.5,332.5C 183.869,332.878 170.535,334.545 157.5,337.5C 148.185,338.386 138.852,339.052 129.5,339.5C 128.995,336.479 128.328,333.479 127.5,330.5C 127.608,329.558 127.941,328.725 128.5,328C 134.465,327.037 140.465,326.537 146.5,326.5C 148.167,326.5 149.833,326.5 151.5,326.5C 151.631,327.239 151.464,327.906 151,328.5C 149.755,328.539 148.422,328.205 147,327.5C 145.541,327.808 144.374,328.475 143.5,329.5C 145.534,331.246 147.701,331.58 150,330.5C 151.38,331.256 151.547,331.922 150.5,332.5C 148.821,332.892 147.154,333.392 145.5,334C 144.549,334.718 144.383,335.551 145,336.5C 146.113,335.289 147.28,335.289 148.5,336.5C 149.192,335.975 149.692,335.308 150,334.5C 152.63,334.767 155.463,334.934 158.5,335C 158.167,334.667 157.833,334.333 157.5,334C 159.044,333.71 160.377,333.044 161.5,332C 158.918,332.255 156.252,332.422 153.5,332.5C 152.407,330.433 152.907,329.766 155,330.5C 156.763,329.056 158.763,328.056 161,327.5C 164.618,330.105 168.118,330.105 171.5,327.5C 174.339,327.031 177.005,327.031 179.5,327.5C 179.56,328.043 179.893,328.376 180.5,328.5C 184.322,325.392 188.655,324.225 193.5,325C 195.013,327.454 194.346,329.121 191.5,330C 188.167,330.333 184.833,330.667 181.5,331C 186.489,331.499 191.489,331.666 196.5,331.5C 196.5,329.833 196.5,328.167 196.5,326.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#765858\",d:\"M 150.5,332.5 C 151.5,333.833 152.5,333.833 153.5,332.5C 156.252,332.422 158.918,332.255 161.5,332C 160.377,333.044 159.044,333.71 157.5,334C 157.833,334.333 158.167,334.667 158.5,335C 155.463,334.934 152.63,334.767 150,334.5C 149.692,335.308 149.192,335.975 148.5,336.5C 147.28,335.289 146.113,335.289 145,336.5C 144.383,335.551 144.549,334.718 145.5,334C 147.154,333.392 148.821,332.892 150.5,332.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#876466\",d:\"M 143.5,329.5 C 143.209,330.649 142.376,331.316 141,331.5C 139.338,331.612 138.171,330.946 137.5,329.5C 139.516,328.306 141.516,328.306 143.5,329.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ab9c95\",d:\"M 290.5,332.5 C 291.467,333.806 292.801,334.473 294.5,334.5C 295.234,335.708 295.567,337.041 295.5,338.5C 293.025,339.687 292.025,341.687 292.5,344.5C 291.539,342.735 291.205,340.735 291.5,338.5C 289.473,338.662 287.473,338.495 285.5,338C 291.876,336.714 291.542,335.714 284.5,335C 287.051,334.998 289.051,334.164 290.5,332.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#3d3635\",d:\"M 276.5,339.5 C 277.167,339.5 277.5,339.833 277.5,340.5C 275.784,340.629 274.117,340.962 272.5,341.5C 271.833,340.833 271.167,340.167 270.5,339.5C 271.184,337.815 272.517,336.815 274.5,336.5C 275.506,336.938 275.506,337.604 274.5,338.5C 274.957,339.298 275.624,339.631 276.5,339.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d6bdb7\",d:\"M 398.5,327.5 C 397.411,329.117 395.744,329.95 393.5,330C 386.823,330.835 380.157,331.668 373.5,332.5C 373.781,336.188 374.281,339.855 375,343.5C 375.314,340.135 375.481,336.969 375.5,334C 386.407,332.008 397.407,330.841 408.5,330.5C 408.5,331.5 408.5,332.5 408.5,333.5C 412.449,333.693 412.449,334.193 408.5,335C 410.027,336.61 411.36,336.277 412.5,334C 410.058,332.186 410.392,330.686 413.5,329.5C 418.472,328.587 423.472,327.92 428.5,327.5C 429.884,338.343 431.551,349.009 433.5,359.5C 433.813,362.247 433.48,364.914 432.5,367.5C 431.305,362.659 429.805,358.659 428,355.5C 427.667,359.5 427.333,363.5 427,367.5C 426.077,366.241 425.243,364.908 424.5,363.5C 422.729,364.035 422.396,364.869 423.5,366C 422.552,366.483 421.552,366.649 420.5,366.5C 418.915,365.998 418.415,364.998 419,363.5C 419.875,360.785 421.708,359.452 424.5,359.5C 424.737,358.209 424.404,357.209 423.5,356.5C 421.989,354.559 419.989,354.059 417.5,355C 416.748,355.671 416.414,356.504 416.5,357.5C 413.977,358.254 411.311,358.92 408.5,359.5C 407.081,357.664 405.914,355.664 405,353.5C 403.921,355.394 402.587,355.727 401,354.5C 400.536,355.094 400.369,355.761 400.5,356.5C 399.469,357.249 398.302,357.915 397,358.5C 396.667,358.167 396.333,357.833 396,357.5C 395.517,358.448 395.351,359.448 395.5,360.5C 400.463,360.606 400.463,361.606 395.5,363.5C 394.469,362.751 393.302,362.085 392,361.5C 391.283,362.044 390.783,362.711 390.5,363.5C 389.466,364.687 388.133,365.52 386.5,366C 386.833,366.333 387.167,366.667 387.5,367C 386.065,366.689 384.732,366.855 383.5,367.5C 382.851,369.624 382.017,371.624 381,373.5C 380.661,370.964 380.161,368.464 379.5,366C 380.842,363.306 381.842,360.473 382.5,357.5C 383.048,361.278 384.715,362.112 387.5,360C 387.043,359.586 386.709,359.086 386.5,358.5C 387.441,356.228 388.774,354.228 390.5,352.5C 387.167,351.167 383.833,351.167 380.5,352.5C 379.846,354.115 379.346,355.782 379,357.5C 378.921,355.264 378.421,353.93 377.5,353.5C 376.691,351.708 376.191,349.708 376,347.5C 375.833,349.167 375.667,350.833 375.5,352.5C 376.97,368.204 378.637,383.871 380.5,399.5C 379.5,399.5 378.5,399.5 377.5,399.5C 376.433,393.138 375.433,386.805 374.5,380.5C 372.833,363.83 371.166,347.163 369.5,330.5C 379.17,329.56 388.837,328.56 398.5,327.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b28e85\",d:\"M 391.5,332.5 C 392.693,332.97 393.36,333.97 393.5,335.5C 393.333,336.5 393.167,337.5 393,338.5C 391.575,337.788 390.075,337.621 388.5,338C 387.62,336.644 387.286,335.144 387.5,333.5C 388.822,333.33 389.989,333.663 391,334.5C 391.464,333.906 391.631,333.239 391.5,332.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#988178\",d:\"M 41.5,332.5 C 42.5557,336.938 43.889,341.271 45.5,345.5C 44.7321,346.263 44.2321,347.263 44,348.5C 39.9545,343.96 36.1212,339.293 32.5,334.5C 35.1873,334.664 37.854,334.497 40.5,334C 39.2881,332.893 39.6214,332.393 41.5,332.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#826c64\",d:\"M 423.5,339.5 C 424.559,341.07 424.059,342.403 422,343.5C 420.374,343.146 418.541,343.146 416.5,343.5C 416.351,342.448 416.517,341.448 417,340.5C 418.583,340.493 420.249,340.826 422,341.5C 422.717,340.956 423.217,340.289 423.5,339.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e7d0c2\",d:\"M 515.5,335.5 C 524.186,338.948 533.186,341.615 542.5,343.5C 541.873,348.141 541.54,352.807 541.5,357.5C 540.735,357.923 539.902,358.257 539,358.5C 534.66,356.626 530.327,354.96 526,353.5C 524.865,353.727 523.698,354.06 522.5,354.5C 522.855,355.522 523.522,356.189 524.5,356.5C 524.5,356.833 524.5,357.167 524.5,357.5C 523.833,357.5 523.167,357.5 522.5,357.5C 522.389,356.883 522.056,356.383 521.5,356C 518.207,355.174 514.874,354.674 511.5,354.5C 511.5,356.5 511.5,358.5 511.5,360.5C 510.5,360.5 509.5,360.5 508.5,360.5C 507.713,358.896 506.38,358.229 504.5,358.5C 505.446,356.11 506.779,353.944 508.5,352C 508.043,351.586 507.709,351.086 507.5,350.5C 510.304,345.951 511.304,341.117 510.5,336C 512.134,335.506 513.801,335.34 515.5,335.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e0ccbb\",d:\"M 359.5,314.5 C 360.912,326.688 362.246,339.022 363.5,351.5C 359.509,352.128 358.176,350.795 359.5,347.5C 357.735,346.539 355.735,346.205 353.5,346.5C 353.5,345.167 353.5,343.833 353.5,342.5C 351.459,342.854 349.626,342.854 348,342.5C 347.292,343.381 346.458,344.047 345.5,344.5C 347.276,344.794 349.276,344.96 351.5,345C 351.833,345.333 352.167,345.667 352.5,346C 340.074,348.14 327.407,349.974 314.5,351.5C 311.894,350.737 309.227,349.737 306.5,348.5C 306.953,347.542 307.619,346.708 308.5,346C 307.833,345.667 307.167,345.333 306.5,345C 306.854,343.374 306.854,341.541 306.5,339.5C 307.164,337.133 308.497,335.133 310.5,333.5C 310.833,333.833 311.167,334.167 311.5,334.5C 310.902,335.795 310.402,337.128 310,338.5C 307.873,339.397 307.373,340.731 308.5,342.5C 309.795,341.902 311.128,341.402 312.5,341C 311.137,338.871 311.471,338.371 313.5,339.5C 314.731,338.349 314.731,337.183 313.5,336C 315.333,336.167 317.167,336.333 319,336.5C 319.494,334.866 319.66,333.199 319.5,331.5C 329.454,329.958 339.454,329.125 349.5,329C 348.584,329.374 347.75,329.874 347,330.5C 345.612,329.446 344.112,329.28 342.5,330C 343.552,331.716 342.886,332.716 340.5,333C 339.748,333.671 339.414,334.504 339.5,335.5C 342.137,336.232 344.637,336.232 347,335.5C 348.044,334.377 348.71,333.044 349,331.5C 349.667,332.833 350.333,332.833 351,331.5C 352.113,330.24 352.28,329.073 351.5,328C 354.226,327.818 356.893,327.318 359.5,326.5C 358.167,326.167 356.833,325.833 355.5,325.5C 348.86,326.497 342.193,327.163 335.5,327.5C 339.334,326.916 342.667,325.25 345.5,322.5C 349.381,321.165 353.381,319.998 357.5,319C 357.167,318.667 356.833,318.333 356.5,318C 358.79,317.277 359.79,316.11 359.5,314.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e1d7d9\",d:\"M 277.5,340.5 C 279.536,342.206 280.536,344.539 280.5,347.5C 278.585,347.216 276.919,347.549 275.5,348.5C 274.5,348.5 273.5,348.5 272.5,348.5C 271.732,349.263 271.232,350.263 271,351.5C 270.037,347.851 270.537,344.518 272.5,341.5C 274.117,340.962 275.784,340.629 277.5,340.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#77615d\",d:\"M 412.5,341.5 C 413.552,341.351 414.552,341.517 415.5,342C 414,342.833 412.833,344 412,345.5C 408.807,345.723 405.64,345.223 402.5,344C 405.624,342.313 408.791,342.146 412,343.5C 412.464,342.906 412.631,342.239 412.5,341.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e3d1c6\",d:\"M 507.5,332.5 C 505.924,333.143 504.59,334.143 503.5,335.5C 501.273,337.229 500.273,339.562 500.5,342.5C 500.5,343.167 500.167,343.5 499.5,343.5C 497.352,343.389 497.019,344.056 498.5,345.5C 497.378,348.736 495.878,349.069 494,346.5C 492.612,347.554 491.112,347.72 489.5,347C 487.721,345.86 486.054,344.693 484.5,343.5C 484.062,343.565 483.728,343.399 483.5,343C 484.333,342.167 485.167,341.333 486,340.5C 486.834,336.321 488.168,332.321 490,328.5C 490.654,327.304 491.154,327.304 491.5,328.5C 490.515,330.098 490.349,331.765 491,333.5C 491.483,332.552 491.649,331.552 491.5,330.5C 492.552,330.649 493.552,330.483 494.5,330C 493.549,329.282 493.383,328.449 494,327.5C 497.832,330.834 502.332,332.501 507.5,332.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b8b7b9\",d:\"M 243.5,343.5 C 241.696,343.017 240.029,343.684 238.5,345.5C 234.953,345.22 231.287,345.22 227.5,345.5C 227.389,344.883 227.056,344.383 226.5,344C 228.441,343.257 230.274,343.424 232,344.5C 234.094,342.7 236.594,341.7 239.5,341.5C 241.171,341.668 242.504,342.335 243.5,343.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bb8f91\",d:\"M 270.5,339.5 C 271.167,340.167 271.833,340.833 272.5,341.5C 270.537,344.518 270.037,347.851 271,351.5C 271.232,350.263 271.732,349.263 272.5,348.5C 272.216,350.415 272.549,352.081 273.5,353.5C 273.013,354.473 272.513,355.473 272,356.5C 270.989,355.663 269.822,355.33 268.5,355.5C 265.5,355.5 262.5,355.5 259.5,355.5C 258.36,354.199 257.027,353.032 255.5,352C 258.462,350.436 261.462,350.269 264.5,351.5C 265.7,350.469 267.034,349.635 268.5,349C 264.424,348.892 260.424,349.392 256.5,350.5C 255.773,348.265 254.773,346.931 253.5,346.5C 253.833,345.833 254.167,345.167 254.5,344.5C 259.221,343.963 263.888,343.296 268.5,342.5C 270.048,342.179 270.715,341.179 270.5,339.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#937c79\",d:\"M 389.5,342.5 C 392.594,342.805 395.261,343.972 397.5,346C 395.388,347.445 393.222,347.278 391,345.5C 389.122,348.069 387.622,347.736 386.5,344.5C 387.274,343.289 388.107,343.289 389,344.5C 389.464,343.906 389.631,343.239 389.5,342.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#baa7a3\",d:\"M 195.5,359.5 C 194.532,357.393 194.198,355.059 194.5,352.5C 192.143,352.663 189.81,352.497 187.5,352C 193.374,351.074 194.874,347.908 192,342.5C 189.619,343.435 187.119,343.768 184.5,343.5C 184.649,344.552 184.483,345.552 184,346.5C 182.82,345.316 181.32,344.649 179.5,344.5C 175.906,344.363 172.24,344.697 168.5,345.5C 168.5,347.167 168.5,348.833 168.5,350.5C 167.833,350.5 167.5,350.833 167.5,351.5C 166.539,349.735 166.205,347.735 166.5,345.5C 164.5,345.5 162.5,345.5 160.5,345.5C 160.5,346.5 160.5,347.5 160.5,348.5C 159.833,348.5 159.5,348.833 159.5,349.5C 158.596,348.791 158.263,347.791 158.5,346.5C 156.076,346.192 153.743,346.526 151.5,347.5C 152.374,349.747 152.708,352.08 152.5,354.5C 154.833,354.5 157.167,354.5 159.5,354.5C 160.301,356.042 160.634,357.708 160.5,359.5C 159.596,360.209 159.263,361.209 159.5,362.5C 157.284,362.725 155.617,361.892 154.5,360C 156.294,358.527 157.96,357.694 159.5,357.5C 157.604,356.534 155.604,356.201 153.5,356.5C 153.575,359.206 153.908,361.873 154.5,364.5C 156.5,364.5 158.5,364.5 160.5,364.5C 160.833,365.167 161.167,365.833 161.5,366.5C 160.833,366.5 160.167,366.5 159.5,366.5C 157.393,365.532 155.059,365.198 152.5,365.5C 152.5,362.833 152.5,360.167 152.5,357.5C 150.167,357.5 147.833,357.5 145.5,357.5C 146.092,360.127 146.425,362.794 146.5,365.5C 147.833,365.5 149.167,365.5 150.5,365.5C 147.359,366.321 144.025,366.821 140.5,367C 139.027,367.71 138.36,368.876 138.5,370.5C 137.147,363.017 136.147,355.35 135.5,347.5C 141.824,346.704 148.158,345.871 154.5,345C 151.518,344.502 148.518,344.335 145.5,344.5C 148.962,343.518 152.629,343.185 156.5,343.5C 157.793,344.158 159.293,344.492 161,344.5C 171.825,343.139 182.658,342.306 193.5,342C 194.711,347.728 195.377,353.562 195.5,359.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#221b1b\",d:\"M 299.5,345.5 C 299.926,347.139 299.926,348.472 299.5,349.5C 298.414,349.38 297.747,348.713 297.5,347.5C 297.747,346.287 298.414,345.62 299.5,345.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ba8072\",d:\"M 503.5,335.5 C 505.199,335.34 506.866,335.506 508.5,336C 507.217,342.637 504.884,348.803 501.5,354.5C 501.062,355.506 500.396,355.506 499.5,354.5C 501.056,349.332 502.722,344.165 504.5,339C 504.333,338.5 504.167,338 504,337.5C 502.97,339.346 501.804,341.013 500.5,342.5C 500.273,339.562 501.273,337.229 503.5,335.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#835c5e\",d:\"M 253.5,346.5 C 254.773,346.931 255.773,348.265 256.5,350.5C 252.868,350.28 249.201,349.947 245.5,349.5C 244.304,349.846 244.304,350.346 245.5,351C 242.167,351.667 238.833,351.667 235.5,351C 236.649,349.256 237.983,349.089 239.5,350.5C 239.489,349.559 239.989,348.892 241,348.5C 242.011,348.892 242.511,349.559 242.5,350.5C 243.954,348.167 245.787,347.5 248,348.5C 249.9,347.923 251.733,347.256 253.5,346.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#493429\",d:\"M 115.5,344.5 C 116.333,357.815 116.666,371.149 116.5,384.5C 114.764,381.161 113.764,377.494 113.5,373.5C 112.899,369.895 112.899,366.395 113.5,363C 110.833,362.333 110.833,361.667 113.5,361C 113.263,356.976 111.93,353.142 109.5,349.5C 108.77,347.955 107.437,347.122 105.5,347C 108.824,346.057 112.157,345.224 115.5,344.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b58d90\",d:\"M 215.5,349.5 C 217.898,349.259 219.898,349.926 221.5,351.5C 220.29,351.932 219.29,352.599 218.5,353.5C 217.883,353.389 217.383,353.056 217,352.5C 215.56,354.046 213.727,354.879 211.5,355C 215.696,355.664 219.862,355.497 224,354.5C 224.833,354.667 225.667,354.833 226.5,355C 225.346,355.914 225.513,356.747 227,357.5C 230.149,356.52 233.482,355.187 237,353.5C 238.711,353.439 240.044,354.106 241,355.5C 243.444,353.738 245.944,353.071 248.5,353.5C 249.167,353.667 249.833,353.833 250.5,354C 249.635,355.359 248.635,356.526 247.5,357.5C 246.883,357.389 246.383,357.056 246,356.5C 241.802,358.022 237.469,359.022 233,359.5C 232.586,359.043 232.086,358.709 231.5,358.5C 223.055,359.893 214.555,360.893 206,361.5C 205.228,361.355 204.561,361.022 204,360.5C 203.501,356.848 203.335,353.182 203.5,349.5C 207.5,349.5 211.5,349.5 215.5,349.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e4dfde\",d:\"M 275.5,348.5 C 277.288,348.215 278.955,348.548 280.5,349.5C 279.667,349.833 278.833,350.167 278,350.5C 276.624,350.316 275.791,349.649 275.5,348.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#886364\",d:\"M 218.5,353.5 C 219.29,352.599 220.29,351.932 221.5,351.5C 224.699,351.217 227.699,350.551 230.5,349.5C 231.167,349.667 231.833,349.833 232.5,350C 231.167,350.667 231.167,351.333 232.5,352C 227.882,352.994 223.215,353.494 218.5,353.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e1ae9e\",d:\"M 515.5,335.5 C 513.801,335.34 512.134,335.506 510.5,336C 511.304,341.117 510.304,345.951 507.5,350.5C 507.709,351.086 508.043,351.586 508.5,352C 506.779,353.944 505.446,356.11 504.5,358.5C 504.167,358.5 503.833,358.5 503.5,358.5C 503.011,357.005 502.345,355.671 501.5,354.5C 504.884,348.803 507.217,342.637 508.5,336C 506.866,335.506 505.199,335.34 503.5,335.5C 504.59,334.143 505.924,333.143 507.5,332.5C 510.746,331.475 513.413,332.475 515.5,335.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d0aaae\",d:\"M 254.5,344.5 C 254.167,345.167 253.833,345.833 253.5,346.5C 251.733,347.256 249.9,347.923 248,348.5C 245.787,347.5 243.954,348.167 242.5,350.5C 242.511,349.559 242.011,348.892 241,348.5C 239.989,348.892 239.489,349.559 239.5,350.5C 237.983,349.089 236.649,349.256 235.5,351C 238.833,351.667 242.167,351.667 245.5,351C 244.304,350.346 244.304,349.846 245.5,349.5C 249.201,349.947 252.868,350.28 256.5,350.5C 260.424,349.392 264.424,348.892 268.5,349C 267.034,349.635 265.7,350.469 264.5,351.5C 261.462,350.269 258.462,350.436 255.5,352C 257.027,353.032 258.36,354.199 259.5,355.5C 256.627,355.802 253.961,356.469 251.5,357.5C 250.167,357.5 248.833,357.5 247.5,357.5C 248.635,356.526 249.635,355.359 250.5,354C 249.833,353.833 249.167,353.667 248.5,353.5C 245.944,353.071 243.444,353.738 241,355.5C 240.044,354.106 238.711,353.439 237,353.5C 233.482,355.187 230.149,356.52 227,357.5C 225.513,356.747 225.346,355.914 226.5,355C 225.667,354.833 224.833,354.667 224,354.5C 219.862,355.497 215.696,355.664 211.5,355C 213.727,354.879 215.56,354.046 217,352.5C 217.383,353.056 217.883,353.389 218.5,353.5C 223.215,353.494 227.882,352.994 232.5,352C 231.167,351.333 231.167,350.667 232.5,350C 231.833,349.833 231.167,349.667 230.5,349.5C 227.699,350.551 224.699,351.217 221.5,351.5C 219.898,349.926 217.898,349.259 215.5,349.5C 228.332,347.583 241.332,345.916 254.5,344.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8f7d7e\",d:\"M 484.5,343.5 C 486.054,344.693 487.721,345.86 489.5,347C 491.112,347.72 492.612,347.554 494,346.5C 495.878,349.069 497.378,348.736 498.5,345.5C 497.019,344.056 497.352,343.389 499.5,343.5C 499.643,345.262 499.309,346.929 498.5,348.5C 496.713,349.316 495.046,350.316 493.5,351.5C 493.846,352.696 494.346,352.696 495,351.5C 495.464,352.094 495.631,352.761 495.5,353.5C 493.323,354.279 491.656,355.613 490.5,357.5C 486.981,356.036 483.314,355.036 479.5,354.5C 479.5,353.5 479.5,352.5 479.5,351.5C 482.849,351.127 483.849,349.46 482.5,346.5C 482.782,345.222 483.449,344.222 484.5,343.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e7dcdd\",d:\"M 480.5,346.5 C 481.167,346.5 481.833,346.5 482.5,346.5C 483.849,349.46 482.849,351.127 479.5,351.5C 479.5,352.5 479.5,353.5 479.5,354.5C 483.314,355.036 486.981,356.036 490.5,357.5C 495.694,358.979 495.361,359.646 489.5,359.5C 487.368,358.273 485.034,357.273 482.5,356.5C 480.912,357.01 479.745,358.01 479,359.5C 479.263,358.049 479.096,356.716 478.5,355.5C 473.848,362.457 471.181,370.123 470.5,378.5C 471.675,378.281 472.675,378.614 473.5,379.5C 472.902,380.795 472.402,382.128 472,383.5C 471.781,382.062 471.281,380.729 470.5,379.5C 469.803,383.377 469.136,387.21 468.5,391C 469.022,391.561 469.355,392.228 469.5,393C 467.492,396.531 466.492,400.364 466.5,404.5C 466.5,405.167 466.5,405.833 466.5,406.5C 466.859,411.582 465.693,416.248 463,420.5C 462.727,418.899 462.227,417.399 461.5,416C 462.38,414.644 462.714,413.144 462.5,411.5C 462.351,410.448 462.517,409.448 463,408.5C 463.333,409.833 463.667,411.167 464,412.5C 464.78,403.88 466.28,395.38 468.5,387C 468.227,385.467 467.894,383.967 467.5,382.5C 467.802,379.941 467.468,377.607 466.5,375.5C 468.629,372.905 469.962,369.905 470.5,366.5C 472.104,362.533 473.77,358.533 475.5,354.5C 472.68,353.618 470.014,352.452 467.5,351C 470.791,351.288 474.125,351.788 477.5,352.5C 477.087,349.68 478.087,347.68 480.5,346.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#653936\",d:\"M 499.5,354.5 C 498.566,355.568 498.232,356.901 498.5,358.5C 497.85,358.804 497.183,359.137 496.5,359.5C 495.534,357.604 495.201,355.604 495.5,353.5C 495.631,352.761 495.464,352.094 495,351.5C 494.346,352.696 493.846,352.696 493.5,351.5C 495.046,350.316 496.713,349.316 498.5,348.5C 499.309,346.929 499.643,345.262 499.5,343.5C 500.167,343.5 500.5,343.167 500.5,342.5C 501.804,341.013 502.97,339.346 504,337.5C 504.167,338 504.333,338.5 504.5,339C 502.722,344.165 501.056,349.332 499.5,354.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8f7971\",d:\"M 423.5,356.5 C 422.024,358.761 420.524,358.428 419,355.5C 418.583,356.756 417.75,357.423 416.5,357.5C 416.414,356.504 416.748,355.671 417.5,355C 419.989,354.059 421.989,354.559 423.5,356.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7d6467\",d:\"M 17.5,321.5 C 20.7673,323.427 23.7673,325.761 26.5,328.5C 28.1667,330.833 30.1667,332.833 32.5,334.5C 36.1212,339.293 39.9545,343.96 44,348.5C 44.2321,347.263 44.7321,346.263 45.5,345.5C 47.9849,350.493 49.6516,355.493 50.5,360.5C 50.6596,362.153 51.3263,363.486 52.5,364.5C 52.5,365.5 52.5,366.5 52.5,367.5C 50.5259,364.23 48.5259,360.897 46.5,357.5C 44.4807,359.19 42.4807,360.856 40.5,362.5C 38.7041,361.207 37.0375,359.707 35.5,358C 35.8333,357.667 36.1667,357.333 36.5,357C 31.3655,355.966 30.6988,353.966 34.5,351C 32.8333,351.333 31.1667,351.667 29.5,352C 27.6061,350.899 26.9394,349.566 27.5,348C 21.6488,346.48 21.1488,343.98 26,340.5C 27,341.5 28,342.5 29,343.5C 28.9227,344.738 29.0894,345.738 29.5,346.5C 31.3159,345.185 32.9825,343.685 34.5,342C 33.0039,341.493 31.8373,341.993 31,343.5C 29.8333,342.333 28.6667,341.167 27.5,340C 30.1859,336.524 29.8525,336.024 26.5,338.5C 24.45,336.231 22.1167,334.731 19.5,334C 21.1667,335.833 22.8333,337.667 24.5,339.5C 23.5197,340.981 22.353,342.315 21,343.5C 20.1627,341.993 18.9961,341.493 17.5,342C 21.5,346 25.5,350 29.5,354C 26.8179,356.33 27.1512,356.83 30.5,355.5C 31.646,356.145 32.646,356.978 33.5,358C 31.9825,359.685 30.3159,361.185 28.5,362.5C 29.7598,363.382 30.9264,364.382 32,365.5C 32.8996,364.23 34.0663,363.23 35.5,362.5C 35.0233,361.522 34.3567,360.689 33.5,360C 36.1634,360.152 37.8301,361.652 38.5,364.5C 35.8333,366.833 33.1667,369.167 30.5,371.5C 30.4654,370.596 29.9654,369.93 29,369.5C 28.6613,371.322 27.1613,372.656 24.5,373.5C 23.354,372.855 22.354,372.022 21.5,371C 27.944,364.588 27.444,364.088 20,369.5C 16.7885,368.328 16.2885,366.828 18.5,365C 17.9322,363.348 16.5989,361.682 14.5,360C 15.8333,359.333 16.8333,358.333 17.5,357C 16.5509,356.383 15.7175,356.549 15,357.5C 12.7857,354.285 9.95238,351.785 6.5,350C 9.18213,347.67 8.8488,347.17 5.5,348.5C 3.99842,347.917 2.66508,347.084 1.5,346C 3.5,344 5.5,342 7.5,340C 5.13105,339.464 3.13105,338.297 1.5,336.5C 3.56,334.778 5.22667,332.778 6.5,330.5C 8.46338,329.316 10.4634,328.483 12.5,328C 13.5,329 14.5,330 15.5,331C 13.6707,332.113 12.8374,333.613 13,335.5C 15.5,333 18,330.5 20.5,328C 18.9532,327.667 17.6199,328.167 16.5,329.5C 14.8513,328.352 13.3513,327.019 12,325.5C 10.4878,326.257 9.15445,327.257 8,328.5C 7.83333,328.167 7.66667,327.833 7.5,327.5C 9.62395,325.879 11.6239,324.046 13.5,322C 15.0187,322.331 16.352,322.164 17.5,321.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9b8285\",d:\"M 40.5,362.5 C 40.1667,363.5 39.5,364.167 38.5,364.5C 37.8301,361.652 36.1634,360.152 33.5,360C 34.3567,360.689 35.0233,361.522 35.5,362.5C 34.0663,363.23 32.8996,364.23 32,365.5C 30.9264,364.382 29.7598,363.382 28.5,362.5C 30.3159,361.185 31.9825,359.685 33.5,358C 32.646,356.978 31.646,356.145 30.5,355.5C 27.1512,356.83 26.8179,356.33 29.5,354C 25.5,350 21.5,346 17.5,342C 18.9961,341.493 20.1627,341.993 21,343.5C 22.353,342.315 23.5197,340.981 24.5,339.5C 22.8333,337.667 21.1667,335.833 19.5,334C 22.1167,334.731 24.45,336.231 26.5,338.5C 29.8525,336.024 30.1859,336.524 27.5,340C 28.6667,341.167 29.8333,342.333 31,343.5C 31.8373,341.993 33.0039,341.493 34.5,342C 32.9825,343.685 31.3159,345.185 29.5,346.5C 29.0894,345.738 28.9227,344.738 29,343.5C 28,342.5 27,341.5 26,340.5C 21.1488,343.98 21.6488,346.48 27.5,348C 26.9394,349.566 27.6061,350.899 29.5,352C 31.1667,351.667 32.8333,351.333 34.5,351C 30.6988,353.966 31.3655,355.966 36.5,357C 36.1667,357.333 35.8333,357.667 35.5,358C 37.0375,359.707 38.7041,361.207 40.5,362.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8c7b7b\",d:\"M 478.5,343.5 C 480.048,343.821 480.715,344.821 480.5,346.5C 478.087,347.68 477.087,349.68 477.5,352.5C 474.125,351.788 470.791,351.288 467.5,351C 470.014,352.452 472.68,353.618 475.5,354.5C 473.77,358.533 472.104,362.533 470.5,366.5C 469.5,366.5 468.5,366.5 467.5,366.5C 467.605,362.452 467.272,358.452 466.5,354.5C 465.741,349.167 467.074,344.501 470.5,340.5C 473.035,341.9 475.702,342.9 478.5,343.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cebdb5\",d:\"M 78.5,319.5 C 79.4475,320.978 80.7809,321.978 82.5,322.5C 81.0222,322.238 79.6888,322.571 78.5,323.5C 82.4359,333.023 85.9359,342.69 89,352.5C 89.2695,349.776 89.7695,347.109 90.5,344.5C 89.0977,343.158 89.4311,342.324 91.5,342C 90.2889,340.887 90.2889,339.72 91.5,338.5C 90.3523,336.851 89.019,335.351 87.5,334C 89.3867,333.837 90.8867,334.671 92,336.5C 92.3988,336.272 92.5654,335.938 92.5,335.5C 95.1667,338.5 97.8333,341.5 100.5,344.5C 102.713,346.542 103.38,348.875 102.5,351.5C 98.3447,352.742 94.678,354.742 91.5,357.5C 88.6612,359.42 85.6612,361.087 82.5,362.5C 80.8812,361.928 79.2145,361.595 77.5,361.5C 69.6384,365.172 61.4717,367.839 53,369.5C 52.5357,368.906 52.369,368.239 52.5,367.5C 52.5,366.5 52.5,365.5 52.5,364.5C 54.0603,364.519 55.5603,364.852 57,365.5C 60.6782,364.709 64.1782,363.543 67.5,362C 68.8804,358.855 68.2137,356.188 65.5,354C 66,353.833 66.5,353.667 67,353.5C 68.8918,356.39 69.7251,356.056 69.5,352.5C 70.5,352.5 71.5,352.5 72.5,352.5C 72.3287,349.203 72.9954,348.869 74.5,351.5C 75.7678,350.572 77.1011,350.405 78.5,351C 76.1088,352.309 76.1088,353.309 78.5,354C 77.376,354.249 76.376,354.749 75.5,355.5C 77.316,356.942 79.316,357.442 81.5,357C 81.0426,356.586 80.7093,356.086 80.5,355.5C 82.3072,352.987 83.3072,350.154 83.5,347C 82.2918,343.252 81.4585,339.419 81,335.5C 79.6667,334.167 78.3333,334.167 77,335.5C 76.7508,334.376 76.2508,333.376 75.5,332.5C 71.6607,333.721 71.6607,334.388 75.5,334.5C 75.762,335.978 75.4287,337.311 74.5,338.5C 73.8076,337.975 73.3076,337.308 73,336.5C 72.3311,339.028 71.4978,339.028 70.5,336.5C 71.4791,334.721 71.1458,333.055 69.5,331.5C 70.5813,329.789 71.9146,328.289 73.5,327C 73.3333,326.5 73.1667,326 73,325.5C 71.8261,327.671 69.9928,328.671 67.5,328.5C 67.5792,327.07 67.2458,325.736 66.5,324.5C 68.4233,323.692 70.4233,323.192 72.5,323C 69.8333,322.333 67.1667,322.333 64.5,323C 62.0684,324.087 62.4017,324.587 65.5,324.5C 65.9662,326.201 65.9662,327.701 65.5,329C 64.5,329.667 63.5,329.667 62.5,329C 64.7073,326.016 64.2073,325.85 61,328.5C 60.6667,328.167 60.3333,327.833 60,327.5C 59.5439,328.744 60.0439,329.577 61.5,330C 58.9533,331.441 56.4533,331.941 54,331.5C 53.6258,332.416 53.1258,333.25 52.5,334C 53.9561,334.423 54.4561,335.256 54,336.5C 52.9505,335.483 51.7839,335.316 50.5,336C 53.1307,337.691 52.7973,338.858 49.5,339.5C 49.6667,339.833 49.8333,340.167 50,340.5C 52.884,341.56 54.7173,343.06 55.5,345C 53.892,345.658 52.7253,345.158 52,343.5C 51.6667,344.5 51.3333,345.5 51,346.5C 50.2801,344.745 49.1134,343.911 47.5,344C 48.5937,345.78 49.5937,347.614 50.5,349.5C 51.2494,347.988 52.416,346.988 54,346.5C 55.7618,346.944 55.5951,347.444 53.5,348C 54.7839,348.684 55.9505,348.517 57,347.5C 56.0956,344.974 55.7623,342.308 56,339.5C 57.4416,342.05 58.6083,344.716 59.5,347.5C 57.8273,349.086 55.8273,349.753 53.5,349.5C 53.7035,351.39 53.0368,352.89 51.5,354C 53.0163,355.897 53.683,358.064 53.5,360.5C 52.5,360.5 51.5,360.5 50.5,360.5C 49.6516,355.493 47.9849,350.493 45.5,345.5C 43.889,341.271 42.5557,336.938 41.5,332.5C 40.537,331.637 40.537,330.97 41.5,330.5C 42.5109,332.844 44.1776,334.511 46.5,335.5C 51.0965,334.938 51.4298,333.772 47.5,332C 49.4116,330.8 50.7449,329.133 51.5,327C 48.386,326.877 45.386,326.71 42.5,326.5C 46.1915,325.748 49.8582,324.914 53.5,324C 52.5268,318.593 52.1934,313.093 52.5,307.5C 53.5832,307.461 54.5832,307.127 55.5,306.5C 55.8333,306.833 56.1667,307.167 56.5,307.5C 53.9396,310.527 54.7729,312.527 59,313.5C 66.8453,311.072 74.6786,311.238 82.5,314C 75.5128,313.746 68.5128,313.746 61.5,314C 65.8107,314.906 69.6441,316.739 73,319.5C 73.5,319.333 74,319.167 74.5,319C 72.6707,317.887 71.8374,316.387 72,314.5C 74.0615,316.406 76.2282,318.073 78.5,319.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#45413e\",d:\"M 301.5,361.5 C 299.088,361.306 298.088,359.973 298.5,357.5C 299.209,356.596 300.209,356.263 301.5,356.5C 301.5,358.167 301.5,359.833 301.5,361.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7d6f6e\",d:\"M 196.5,338.5 C 196.187,342.042 196.521,345.375 197.5,348.5C 197.839,354.886 198.505,361.22 199.5,367.5C 199.946,374.182 200.613,380.849 201.5,387.5C 201.167,388.833 200.833,390.167 200.5,391.5C 198.018,392.067 195.684,392.734 193.5,393.5C 184.989,394.55 176.656,395.884 168.5,397.5C 158.842,398.61 149.176,399.61 139.5,400.5C 136.706,382.277 134.706,363.944 133.5,345.5C 137.519,345.354 141.519,345.021 145.5,344.5C 148.518,344.335 151.518,344.502 154.5,345C 148.158,345.871 141.824,346.704 135.5,347.5C 136.147,355.35 137.147,363.017 138.5,370.5C 138.542,378.918 139.375,387.251 141,395.5C 141.186,393.1 141.686,390.766 142.5,388.5C 144.198,387.319 145.865,387.319 147.5,388.5C 145.955,389.452 144.288,389.785 142.5,389.5C 142.238,390.978 142.571,392.311 143.5,393.5C 143.833,392.833 144.167,392.167 144.5,391.5C 145.197,393.385 146.197,393.718 147.5,392.5C 148.386,393.325 148.719,394.325 148.5,395.5C 145.6,395.28 142.933,395.946 140.5,397.5C 140.833,397.833 141.167,398.167 141.5,398.5C 160.58,395.965 179.58,392.965 198.5,389.5C 198.833,388.833 199.167,388.167 199.5,387.5C 198.355,377.993 197.022,368.66 195.5,359.5C 195.377,353.562 194.711,347.728 193.5,342C 182.658,342.306 171.825,343.139 161,344.5C 159.293,344.492 157.793,344.158 156.5,343.5C 158.099,343.768 159.432,343.434 160.5,342.5C 172.539,341.466 184.539,340.133 196.5,338.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#917d7a\",d:\"M 152.5,365.5 C 151.833,365.5 151.167,365.5 150.5,365.5C 149.167,365.5 147.833,365.5 146.5,365.5C 146.425,362.794 146.092,360.127 145.5,357.5C 147.833,357.5 150.167,357.5 152.5,357.5C 152.5,360.167 152.5,362.833 152.5,365.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8b7873\",d:\"M 195.5,359.5 C 193.162,361.04 190.495,361.706 187.5,361.5C 187.119,356.763 186.286,352.096 185,347.5C 184.506,349.134 184.34,350.801 184.5,352.5C 179.299,353.573 176.465,351.573 176,346.5C 175.503,348.81 175.337,351.143 175.5,353.5C 173.801,353.34 172.134,353.506 170.5,354C 172.473,354.495 174.473,354.662 176.5,354.5C 176.5,357.167 176.5,359.833 176.5,362.5C 174.533,362.261 172.699,362.594 171,363.5C 169.95,359.197 169.116,354.863 168.5,350.5C 168.5,348.833 168.5,347.167 168.5,345.5C 172.24,344.697 175.906,344.363 179.5,344.5C 181.32,344.649 182.82,345.316 184,346.5C 184.483,345.552 184.649,344.552 184.5,343.5C 187.119,343.768 189.619,343.435 192,342.5C 194.874,347.908 193.374,351.074 187.5,352C 189.81,352.497 192.143,352.663 194.5,352.5C 194.198,355.059 194.532,357.393 195.5,359.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#917b74\",d:\"M 140.5,347.5 C 141.5,347.5 142.5,347.5 143.5,347.5C 143.5,350.5 143.5,353.5 143.5,356.5C 141.5,356.5 139.5,356.5 137.5,356.5C 137.5,353.833 137.5,351.167 137.5,348.5C 138.791,348.737 139.791,348.404 140.5,347.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8e7a74\",d:\"M 144.5,347.5 C 146.5,347.5 148.5,347.5 150.5,347.5C 151.092,350.127 151.425,352.794 151.5,355.5C 149.5,355.5 147.5,355.5 145.5,355.5C 144.908,352.873 144.575,350.206 144.5,347.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8c7b73\",d:\"M 159.5,349.5 C 159.5,351.167 159.5,352.833 159.5,354.5C 157.167,354.5 154.833,354.5 152.5,354.5C 152.708,352.08 152.374,349.747 151.5,347.5C 153.743,346.526 156.076,346.192 158.5,346.5C 158.263,347.791 158.596,348.791 159.5,349.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#887871\",d:\"M 167.5,351.5 C 165.721,353.344 163.388,354.01 160.5,353.5C 160.5,351.833 160.5,350.167 160.5,348.5C 160.5,347.5 160.5,346.5 160.5,345.5C 162.5,345.5 164.5,345.5 166.5,345.5C 166.205,347.735 166.539,349.735 167.5,351.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9d918c\",d:\"M 299.5,345.5 C 298.414,345.62 297.747,346.287 297.5,347.5C 297.747,348.713 298.414,349.38 299.5,349.5C 298.003,350.306 296.336,350.972 294.5,351.5C 293.534,353.396 293.201,355.396 293.5,357.5C 295.167,357.5 296.833,357.5 298.5,357.5C 298.088,359.973 299.088,361.306 301.5,361.5C 299.067,362.322 296.733,362.656 294.5,362.5C 292.167,362.5 289.833,362.5 287.5,362.5C 287.5,362.167 287.5,361.833 287.5,361.5C 289.655,361.628 291.655,361.128 293.5,360C 286.352,359.649 286.019,358.816 292.5,357.5C 292.5,355.167 292.5,352.833 292.5,350.5C 284.704,350.595 284.704,349.762 292.5,348C 284.602,347.468 284.602,346.635 292.5,345.5C 295.041,344.897 297.374,344.897 299.5,345.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#988486\",d:\"M 464.5,354.5 C 465.259,359.371 466.259,364.205 467.5,369C 466.54,372.289 464.54,374.622 461.5,376C 462.8,377.579 462.466,378.745 460.5,379.5C 459.888,375.837 459.721,372.17 460,368.5C 461,369.5 462,370.5 463,371.5C 463.167,371.167 463.333,370.833 463.5,370.5C 462.167,368.833 460.833,367.167 459.5,365.5C 460.665,361.506 461.832,357.506 463,353.5C 463.383,354.056 463.883,354.389 464.5,354.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9c8283\",d:\"M 522.5,357.5 C 523.791,358.473 523.791,359.473 522.5,360.5C 520.694,362.507 518.694,364.174 516.5,365.5C 513.888,364.629 511.221,363.963 508.5,363.5C 508.5,362.5 508.5,361.5 508.5,360.5C 509.5,360.5 510.5,360.5 511.5,360.5C 511.5,358.5 511.5,356.5 511.5,354.5C 514.874,354.674 518.207,355.174 521.5,356C 522.056,356.383 522.389,356.883 522.5,357.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#968f8b\",d:\"M 254.5,361.5 C 253.508,361.328 252.842,361.662 252.5,362.5C 250.473,362.662 248.473,362.495 246.5,362C 245.742,360.636 246.242,359.469 248,358.5C 249.113,359.711 250.28,359.711 251.5,358.5C 253.213,358.879 254.213,359.879 254.5,361.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#1d1716\",d:\"M 273.5,360.5 C 274.5,360.5 275.5,360.5 276.5,360.5C 276.5,361.5 276.5,362.5 276.5,363.5C 275.5,363.5 274.5,363.5 273.5,363.5C 273.5,362.5 273.5,361.5 273.5,360.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#82706c\",d:\"M 160.5,359.5 C 160.5,361.167 160.5,362.833 160.5,364.5C 158.5,364.5 156.5,364.5 154.5,364.5C 153.908,361.873 153.575,359.206 153.5,356.5C 155.604,356.201 157.604,356.534 159.5,357.5C 157.96,357.694 156.294,358.527 154.5,360C 155.617,361.892 157.284,362.725 159.5,362.5C 159.263,361.209 159.596,360.209 160.5,359.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e9ded8\",d:\"M 259.5,355.5 C 262.5,355.5 265.5,355.5 268.5,355.5C 267.847,356.807 267.18,358.14 266.5,359.5C 269.105,362.089 269.105,364.589 266.5,367C 267.448,367.483 268.448,367.649 269.5,367.5C 269.5,368.5 269.5,369.5 269.5,370.5C 260.195,372.153 250.862,373.819 241.5,375.5C 238.423,373.908 235.59,374.241 233,376.5C 231.853,375.542 230.853,375.875 230,377.5C 229.275,376.941 228.442,376.608 227.5,376.5C 221.267,378.018 214.934,378.852 208.5,379C 207.944,379.383 207.611,379.883 207.5,380.5C 205.291,383.405 205.291,386.405 207.5,389.5C 209.048,390.794 211.048,391.461 213.5,391.5C 233.61,389.357 253.61,386.69 273.5,383.5C 274.376,383.369 275.043,383.702 275.5,384.5C 274.174,385.642 273.174,386.976 272.5,388.5C 264.138,388.335 255.805,388.668 247.5,389.5C 247.714,391.144 247.38,392.644 246.5,394C 244.645,394.422 242.811,394.922 241,395.5C 240.055,395.095 239.388,394.428 239,393.5C 236.885,396.318 235.052,396.151 233.5,393C 231.167,392.833 228.833,392.667 226.5,392.5C 218.118,393.786 209.951,393.786 202,392.5C 201.055,392.905 200.388,393.572 200,394.5C 197.959,393.577 195.792,393.244 193.5,393.5C 195.684,392.734 198.018,392.067 200.5,391.5C 200.833,390.167 201.167,388.833 201.5,387.5C 200.613,380.849 199.946,374.182 199.5,367.5C 201.652,368.077 201.985,369.244 200.5,371C 202.166,373.48 202.999,376.313 203,379.5C 206.03,376.354 207.196,372.688 206.5,368.5C 205.013,373.657 204.347,373.324 204.5,367.5C 210.459,366.338 216.459,365.838 222.5,366C 218.099,366.805 213.432,367.471 208.5,368C 209.833,369.333 209.833,370.667 208.5,372C 209.667,372.167 210.833,372.333 212,372.5C 218.809,371.335 225.642,370.835 232.5,371C 225.512,372.082 218.512,373.082 211.5,374C 219.295,374.401 226.962,373.567 234.5,371.5C 236.167,373.167 237.167,372.833 237.5,370.5C 237.27,366.787 236.103,366.12 234,368.5C 231.674,368.12 229.841,367.12 228.5,365.5C 229.263,364.732 230.263,364.232 231.5,364C 232.252,363.329 232.586,362.496 232.5,361.5C 235.389,362.008 238.222,362.675 241,363.5C 241.617,362.551 241.451,361.718 240.5,361C 242.46,359.061 243.793,359.561 244.5,362.5C 243.098,363.842 243.431,364.676 245.5,365C 244.476,366.367 244.976,367.2 247,367.5C 249.824,367.852 252.657,367.352 255.5,366C 254.975,365.308 254.308,364.808 253.5,364.5C 252.284,365.002 251.117,365.335 250,365.5C 249.5,365 249,364.5 248.5,364C 250.058,363.79 251.391,363.29 252.5,362.5C 252.842,361.662 253.508,361.328 254.5,361.5C 255.434,360.432 255.768,359.099 255.5,357.5C 254.167,357.5 252.833,357.5 251.5,357.5C 253.961,356.469 256.627,355.802 259.5,355.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d7cbc9\",d:\"M 278.5,359.5 C 276.585,359.216 274.919,359.549 273.5,360.5C 273.5,361.5 273.5,362.5 273.5,363.5C 273.62,364.586 274.287,365.253 275.5,365.5C 277.646,364.106 279.979,363.44 282.5,363.5C 282.5,366.167 282.5,368.833 282.5,371.5C 279.833,371.5 277.167,371.5 274.5,371.5C 274.201,373.604 274.534,375.604 275.5,377.5C 278.276,375.87 281.276,375.203 284.5,375.5C 284.5,377.833 284.5,380.167 284.5,382.5C 283.209,382.263 282.209,382.596 281.5,383.5C 279.833,383.5 278.167,383.5 276.5,383.5C 276.5,385.167 276.5,386.833 276.5,388.5C 279.527,387.491 282.527,387.491 285.5,388.5C 286.348,390.409 286.682,392.409 286.5,394.5C 283.518,394.963 280.518,395.296 277.5,395.5C 276.06,394.637 274.726,394.637 273.5,395.5C 272.867,393.004 272.534,390.671 272.5,388.5C 273.174,386.976 274.174,385.642 275.5,384.5C 275.043,383.702 274.376,383.369 273.5,383.5C 273.923,381.219 273.256,379.552 271.5,378.5C 272.742,376.389 272.742,374.389 271.5,372.5C 271.5,371.167 270.833,370.5 269.5,370.5C 269.5,369.5 269.5,368.5 269.5,367.5C 268.448,367.649 267.448,367.483 266.5,367C 269.105,364.589 269.105,362.089 266.5,359.5C 267.18,358.14 267.847,356.807 268.5,355.5C 269.822,355.33 270.989,355.663 272,356.5C 272.513,355.473 273.013,354.473 273.5,353.5C 276.112,352.629 278.779,351.963 281.5,351.5C 281.5,354.167 281.5,356.833 281.5,359.5C 280.5,359.5 279.5,359.5 278.5,359.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#796e67\",d:\"M 540.5,361.5 C 540.5,362.167 540.5,362.833 540.5,363.5C 538.801,363.66 537.134,363.494 535.5,363C 536,362.5 536.5,362 537,361.5C 537.986,362.171 539.153,362.171 540.5,361.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d4cdbc\",d:\"M -0.5,360.5 C 1.85684,360.337 4.19018,360.503 6.5,361C 5.83333,361.333 5.16667,361.667 4.5,362C 6.7148,362.17 8.7148,362.837 10.5,364C 6.84841,364.499 3.18174,364.665 -0.5,364.5C -0.5,363.167 -0.5,361.833 -0.5,360.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#44362d\",d:\"M 287.5,362.5 C 289.833,362.5 292.167,362.5 294.5,362.5C 294.5,363.833 294.5,365.167 294.5,366.5C 294.5,367.5 294.5,368.5 294.5,369.5C 291.393,369.351 288.393,369.851 285.5,371C 288.429,371.777 291.263,371.61 294,370.5C 294.528,371.816 294.028,372.483 292.5,372.5C 289.894,373.136 287.394,373.136 285,372.5C 284.502,369.518 284.335,366.518 284.5,363.5C 285.791,363.737 286.791,363.404 287.5,362.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d2c0c2\",d:\"M 450.5,329.5 C 449.445,334.616 450.612,339.283 454,343.5C 454.499,347.821 454.666,352.154 454.5,356.5C 453.504,356.586 452.671,356.252 452,355.5C 451.817,362.33 452.817,368.997 455,375.5C 455.383,374.944 455.883,374.611 456.5,374.5C 455.844,376.484 455.178,378.484 454.5,380.5C 455.269,383.115 455.603,385.781 455.5,388.5C 455.688,390.103 455.188,391.437 454,392.5C 451.115,372.867 448.615,353.2 446.5,333.5C 447.451,332.081 447.784,330.415 447.5,328.5C 448.222,328.082 448.722,327.416 449,326.5C 449.232,327.737 449.732,328.737 450.5,329.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#44332e\",d:\"M 115.5,333.5 C 116.558,334.6 117.392,335.934 118,337.5C 118.556,335.405 119.056,335.238 119.5,337C 116.543,339.184 116.877,340.351 120.5,340.5C 120.939,353.881 122.273,367.215 124.5,380.5C 122.5,381.167 120.5,381.833 118.5,382.5C 118.397,369.317 117.73,356.317 116.5,343.5C 116.54,340.119 116.207,336.786 115.5,333.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a09e97\",d:\"M 232.5,361.5 C 232.586,362.496 232.252,363.329 231.5,364C 230.263,364.232 229.263,364.732 228.5,365.5C 227.21,364.942 226.377,363.942 226,362.5C 223.822,365.468 222.656,365.135 222.5,361.5C 225.833,361.5 229.167,361.5 232.5,361.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7a7469\",d:\"M 544.5,362.5 C 544.393,364.379 544.893,364.712 546,363.5C 548.767,364.646 548.934,365.646 546.5,366.5C 545.527,365.209 544.527,365.209 543.5,366.5C 543.167,365.833 542.833,365.167 542.5,364.5C 542.747,363.287 543.414,362.62 544.5,362.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8b7c75\",d:\"M -0.5,313.5 C 0.647103,318.642 1.48044,323.975 2,329.5C 3.22587,331.548 4.72587,331.881 6.5,330.5C 5.22667,332.778 3.56,334.778 1.5,336.5C 3.13105,338.297 5.13105,339.464 7.5,340C 5.5,342 3.5,344 1.5,346C 2.66508,347.084 3.99842,347.917 5.5,348.5C 8.8488,347.17 9.18213,347.67 6.5,350C 9.95238,351.785 12.7857,354.285 15,357.5C 15.7175,356.549 16.5509,356.383 17.5,357C 16.8333,358.333 15.8333,359.333 14.5,360C 16.5989,361.682 17.9322,363.348 18.5,365C 16.2885,366.828 16.7885,368.328 20,369.5C 27.444,364.088 27.944,364.588 21.5,371C 22.354,372.022 23.354,372.855 24.5,373.5C 27.1613,372.656 28.6613,371.322 29,369.5C 29.9654,369.93 30.4654,370.596 30.5,371.5C 26.0289,377.618 21.1955,377.618 16,371.5C 10.6218,375.718 5.12175,379.718 -0.5,383.5C -0.5,379.5 -0.5,375.5 -0.5,371.5C 4.32256,371.123 8.98923,370.29 13.5,369C 12.8921,368.13 12.0588,367.63 11,367.5C 7.23888,368.619 3.40555,369.286 -0.5,369.5C -0.5,367.833 -0.5,366.167 -0.5,364.5C 3.18174,364.665 6.84841,364.499 10.5,364C 8.7148,362.837 6.7148,362.17 4.5,362C 5.16667,361.667 5.83333,361.333 6.5,361C 4.19018,360.503 1.85684,360.337 -0.5,360.5C -0.5,344.833 -0.5,329.167 -0.5,313.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a1958e\",d:\"M 294.5,366.5 C 295.404,367.209 295.737,368.209 295.5,369.5C 296.959,369.567 298.292,369.234 299.5,368.5C 299.5,370.167 299.5,371.833 299.5,373.5C 298.167,374.167 296.833,374.833 295.5,375.5C 294.9,374.1 293.9,373.1 292.5,372.5C 294.028,372.483 294.528,371.816 294,370.5C 291.263,371.61 288.429,371.777 285.5,371C 288.393,369.851 291.393,369.351 294.5,369.5C 294.5,368.5 294.5,367.5 294.5,366.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ccc3b6\",d:\"M -0.5,371.5 C -0.5,370.833 -0.5,370.167 -0.5,369.5C 3.40555,369.286 7.23888,368.619 11,367.5C 12.0588,367.63 12.8921,368.13 13.5,369C 8.98923,370.29 4.32256,371.123 -0.5,371.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6b4b45\",d:\"M 522.5,357.5 C 523.167,357.5 523.833,357.5 524.5,357.5C 524.918,358.222 525.584,358.722 526.5,359C 526.272,359.399 525.938,359.565 525.5,359.5C 523.93,363.075 521.93,366.408 519.5,369.5C 517.877,370.316 516.377,371.982 515,374.5C 514.329,375.252 513.496,375.586 512.5,375.5C 513.014,373.302 514.014,371.302 515.5,369.5C 515.291,368.914 514.957,368.414 514.5,368C 516.167,367.667 517.833,367.333 519.5,367C 518.756,365.961 517.756,365.461 516.5,365.5C 518.694,364.174 520.694,362.507 522.5,360.5C 523.791,359.473 523.791,358.473 522.5,357.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#3d3635\",d:\"M 124.5,355.5 C 125.26,362.157 125.927,368.823 126.5,375.5C 124.585,370.471 123.585,365.137 123.5,359.5C 123.232,357.901 123.566,356.568 124.5,355.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#302a28\",d:\"M 299.5,368.5 C 300.5,368.5 301.5,368.5 302.5,368.5C 302.5,370.167 302.5,371.833 302.5,373.5C 301.5,373.5 300.5,373.5 299.5,373.5C 299.5,371.833 299.5,370.167 299.5,368.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#978384\",d:\"M 516.5,365.5 C 517.756,365.461 518.756,365.961 519.5,367C 517.833,367.333 516.167,367.667 514.5,368C 514.957,368.414 515.291,368.914 515.5,369.5C 514.014,371.302 513.014,373.302 512.5,375.5C 512.833,376.167 513.167,376.833 513.5,377.5C 512.167,377.5 510.833,377.5 509.5,377.5C 509.753,379.827 509.086,381.827 507.5,383.5C 507.709,384.086 508.043,384.586 508.5,385C 506.973,386.032 505.64,387.199 504.5,388.5C 503.292,387.766 501.959,387.433 500.5,387.5C 500.671,382.669 502.338,378.502 505.5,375C 505.043,374.586 504.709,374.086 504.5,373.5C 506.373,370.816 507.373,367.816 507.5,364.5C 510.067,364.855 512.567,365.521 515,366.5C 515.765,366.43 516.265,366.097 516.5,365.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ebdccc\",d:\"M 541.5,357.5 C 541.167,358.833 540.833,360.167 540.5,361.5C 539.153,362.171 537.986,362.171 537,361.5C 536.5,362 536,362.5 535.5,363C 537.134,363.494 538.801,363.66 540.5,363.5C 539.737,364.268 538.737,364.768 537.5,365C 538.5,365.333 539.5,365.667 540.5,366C 538.5,366.333 536.5,366.667 534.5,367C 535,367.5 535.5,368 536,368.5C 537.107,367.288 537.607,367.621 537.5,369.5C 536.178,369.67 535.011,369.337 534,368.5C 533.517,369.448 533.351,370.448 533.5,371.5C 535.144,371.286 536.644,371.62 538,372.5C 538.483,371.552 538.649,370.552 538.5,369.5C 540.183,369.572 541.183,370.905 541.5,373.5C 541.272,375.207 540.938,376.874 540.5,378.5C 539.784,378.783 538.951,379.116 538,379.5C 537.632,378.09 536.799,377.09 535.5,376.5C 533.576,376.567 531.576,376.9 529.5,377.5C 532.564,378.283 535.231,379.616 537.5,381.5C 538.568,382.434 539.901,382.768 541.5,382.5C 541.64,384.124 540.973,385.29 539.5,386C 541.727,386.704 542.06,387.871 540.5,389.5C 539.778,389.918 539.278,390.584 539,391.5C 538.333,388.833 537.667,388.833 537,391.5C 535.933,390.809 534.766,390.309 533.5,390C 534.448,389.517 535.448,389.351 536.5,389.5C 536.361,384.61 534.861,384.277 532,388.5C 531.601,388.272 531.435,387.938 531.5,387.5C 532.35,384.739 531.35,384.072 528.5,385.5C 527.464,383.312 525.964,383.312 524,385.5C 522.556,383.845 520.722,383.178 518.5,383.5C 518.5,382.833 518.167,382.5 517.5,382.5C 522.878,379.081 525.878,374.081 526.5,367.5C 527.5,367.5 528.5,367.5 529.5,367.5C 529.917,364.921 529.25,362.754 527.5,361C 528.624,360.751 529.624,360.251 530.5,359.5C 528.936,357.749 526.936,356.749 524.5,356.5C 523.522,356.189 522.855,355.522 522.5,354.5C 523.698,354.06 524.865,353.727 526,353.5C 530.327,354.96 534.66,356.626 539,358.5C 539.902,358.257 540.735,357.923 541.5,357.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#887c71\",d:\"M 537.5,369.5 C 537.833,369.5 538.167,369.5 538.5,369.5C 538.649,370.552 538.483,371.552 538,372.5C 536.644,371.62 535.144,371.286 533.5,371.5C 533.351,370.448 533.517,369.448 534,368.5C 535.011,369.337 536.178,369.67 537.5,369.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dccabe\",d:\"M 357.5,287.5 C 361.653,316.724 365.487,346.057 369,375.5C 349.03,377.491 329.03,379.825 309,382.5C 307.635,382.156 306.468,381.489 305.5,380.5C 304.614,381.325 304.281,382.325 304.5,383.5C 303.9,382.1 302.9,381.1 301.5,380.5C 302.568,379.566 303.901,379.232 305.5,379.5C 304.289,361.111 302.622,342.778 300.5,324.5C 301.525,327.974 302.192,331.64 302.5,335.5C 303.5,335.5 304.5,335.5 305.5,335.5C 305.232,337.099 305.566,338.432 306.5,339.5C 306.854,341.541 306.854,343.374 306.5,345C 307.167,345.333 307.833,345.667 308.5,346C 307.619,346.708 306.953,347.542 306.5,348.5C 305.883,348.389 305.383,348.056 305,347.5C 304.668,352.854 305.001,358.187 306,363.5C 306.5,364.667 307.333,365.5 308.5,366C 307.28,367.525 306.613,369.359 306.5,371.5C 306.667,373.167 306.833,374.833 307,376.5C 309.26,377.673 311.426,379.006 313.5,380.5C 320.749,378.342 328.082,377.676 335.5,378.5C 335.5,377.5 335.5,376.5 335.5,375.5C 338.247,375.813 340.914,375.48 343.5,374.5C 343.291,373.914 342.957,373.414 342.5,373C 346.362,372.355 350.196,372.521 354,373.5C 356.185,373.079 358.351,372.579 360.5,372C 357.648,370.409 354.648,369.076 351.5,368C 355.619,367.857 359.619,367.19 363.5,366C 360.5,365.667 357.5,365.333 354.5,365C 356.087,364.138 357.754,363.471 359.5,363C 357.008,361.751 357.175,360.584 360,359.5C 360.667,358.5 360.667,357.5 360,356.5C 357.281,357.444 354.448,357.777 351.5,357.5C 351.5,356.5 351.5,355.5 351.5,354.5C 349.131,354.851 346.797,355.018 344.5,355C 344.833,354.667 345.167,354.333 345.5,354C 342.118,353.824 338.785,353.324 335.5,352.5C 341.138,351.67 346.804,351.17 352.5,351C 353.047,350.075 353.713,349.242 354.5,348.5C 355.105,351.425 356.105,351.091 357.5,347.5C 358.167,347.5 358.833,347.5 359.5,347.5C 358.176,350.795 359.509,352.128 363.5,351.5C 362.246,339.022 360.912,326.688 359.5,314.5C 358.127,311.657 357.127,308.657 356.5,305.5C 357.457,299.561 357.79,293.561 357.5,287.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e7d0bd\",d:\"M 306.5,348.5 C 309.227,349.737 311.894,350.737 314.5,351.5C 312.076,351.192 309.743,351.526 307.5,352.5C 319.432,352.542 331.266,351.209 343,348.5C 345.72,348.635 348.386,348.968 351,349.5C 352.789,347.771 354.956,347.104 357.5,347.5C 356.105,351.091 355.105,351.425 354.5,348.5C 353.713,349.242 353.047,350.075 352.5,351C 346.804,351.17 341.138,351.67 335.5,352.5C 338.785,353.324 342.118,353.824 345.5,354C 345.167,354.333 344.833,354.667 344.5,355C 346.797,355.018 349.131,354.851 351.5,354.5C 351.5,355.5 351.5,356.5 351.5,357.5C 354.448,357.777 357.281,357.444 360,356.5C 360.667,357.5 360.667,358.5 360,359.5C 357.175,360.584 357.008,361.751 359.5,363C 357.754,363.471 356.087,364.138 354.5,365C 357.5,365.333 360.5,365.667 363.5,366C 359.619,367.19 355.619,367.857 351.5,368C 354.648,369.076 357.648,370.409 360.5,372C 358.351,372.579 356.185,373.079 354,373.5C 350.196,372.521 346.362,372.355 342.5,373C 342.957,373.414 343.291,373.914 343.5,374.5C 340.914,375.48 338.247,375.813 335.5,375.5C 335.5,376.5 335.5,377.5 335.5,378.5C 328.082,377.676 320.749,378.342 313.5,380.5C 311.426,379.006 309.26,377.673 307,376.5C 306.833,374.833 306.667,373.167 306.5,371.5C 306.613,369.359 307.28,367.525 308.5,366C 307.333,365.5 306.5,364.667 306,363.5C 305.001,358.187 304.668,352.854 305,347.5C 305.383,348.056 305.883,348.389 306.5,348.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b9a490\",d:\"M 359.5,347.5 C 358.833,347.5 358.167,347.5 357.5,347.5C 354.956,347.104 352.789,347.771 351,349.5C 348.386,348.968 345.72,348.635 343,348.5C 331.266,351.209 319.432,352.542 307.5,352.5C 309.743,351.526 312.076,351.192 314.5,351.5C 327.407,349.974 340.074,348.14 352.5,346C 352.167,345.667 351.833,345.333 351.5,345C 349.276,344.96 347.276,344.794 345.5,344.5C 346.458,344.047 347.292,343.381 348,342.5C 349.626,342.854 351.459,342.854 353.5,342.5C 353.5,343.833 353.5,345.167 353.5,346.5C 355.735,346.205 357.735,346.539 359.5,347.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#887466\",d:\"M 345.5,344.5 C 343.514,343.239 341.681,343.572 340,345.5C 339.308,344.975 338.808,344.308 338.5,343.5C 340.867,342.382 343.034,341.716 345,341.5C 345.483,342.448 345.649,343.448 345.5,344.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#af9f92\",d:\"M 329.5,342.5 C 332.247,342.187 334.914,342.52 337.5,343.5C 335.009,344.541 335.009,345.374 337.5,346C 332.872,347.697 328.205,347.864 323.5,346.5C 321.598,348.151 319.598,348.484 317.5,347.5C 316.808,348.025 316.308,348.692 316,349.5C 315.691,348.234 315.191,347.067 314.5,346C 317.366,344.724 320.2,344.557 323,345.5C 325.218,344.453 327.384,343.453 329.5,342.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9a8d7e\",d:\"M 339.5,335.5 C 337.721,335.374 335.721,335.708 333.5,336.5C 333.461,334.641 334.294,333.308 336,332.5C 337.039,333.71 338.206,334.71 339.5,335.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8d8171\",d:\"M 328.5,333.5 C 332.099,333.262 332.433,334.262 329.5,336.5C 326.914,337.48 324.247,337.813 321.5,337.5C 321.5,336.5 321.5,335.5 321.5,334.5C 323.492,334.328 325.158,334.995 326.5,336.5C 326.088,335.218 326.754,334.218 328.5,333.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c9b2a2\",d:\"M 339.5,335.5 C 339.414,334.504 339.748,333.671 340.5,333C 342.886,332.716 343.552,331.716 342.5,330C 344.112,329.28 345.612,329.446 347,330.5C 347.75,329.874 348.584,329.374 349.5,329C 339.454,329.125 329.454,329.958 319.5,331.5C 314.758,331.701 310.091,332.368 305.5,333.5C 304.304,333.154 304.304,332.654 305.5,332C 306.833,331.667 308.167,331.333 309.5,331C 318.587,330.205 327.254,329.038 335.5,327.5C 342.193,327.163 348.86,326.497 355.5,325.5C 356.833,325.833 358.167,326.167 359.5,326.5C 356.893,327.318 354.226,327.818 351.5,328C 352.28,329.073 352.113,330.24 351,331.5C 350.333,332.833 349.667,332.833 349,331.5C 348.71,333.044 348.044,334.377 347,335.5C 344.637,336.232 342.137,336.232 339.5,335.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d8c0b9\",d:\"M 390.5,363.5 C 390.5,364.5 390.5,365.5 390.5,366.5C 392.959,366.69 394.626,365.69 395.5,363.5C 395.369,364.239 395.536,364.906 396,365.5C 397.356,364.62 398.856,364.286 400.5,364.5C 400.966,362.799 400.966,361.299 400.5,360C 402.134,359.506 403.801,359.34 405.5,359.5C 405.719,358.325 405.386,357.325 404.5,356.5C 404.167,357.167 403.833,357.833 403.5,358.5C 402.735,357.388 401.735,356.721 400.5,356.5C 400.369,355.761 400.536,355.094 401,354.5C 402.587,355.727 403.921,355.394 405,353.5C 405.914,355.664 407.081,357.664 408.5,359.5C 411.311,358.92 413.977,358.254 416.5,357.5C 417.75,357.423 418.583,356.756 419,355.5C 420.524,358.428 422.024,358.761 423.5,356.5C 424.404,357.209 424.737,358.209 424.5,359.5C 421.708,359.452 419.875,360.785 419,363.5C 418.415,364.998 418.915,365.998 420.5,366.5C 420.584,371.467 421.918,371.8 424.5,367.5C 425.594,368.868 425.26,370.035 423.5,371C 424.308,371.308 424.975,371.808 425.5,372.5C 424.167,372.833 422.833,373.167 421.5,373.5C 422.145,375.432 423.479,376.599 425.5,377C 423.447,378.678 423.113,380.511 424.5,382.5C 424.217,383.289 423.717,383.956 423,384.5C 421.192,384.112 419.525,384.112 418,384.5C 417.251,385.635 417.417,386.635 418.5,387.5C 419.396,386.494 420.062,386.494 420.5,387.5C 418.704,388.141 417.204,389.141 416,390.5C 412.04,389.441 408.373,389.441 405,390.5C 404.833,390.833 404.667,391.167 404.5,391.5C 405.689,392.429 407.022,392.762 408.5,392.5C 406.369,393.314 404.036,393.814 401.5,394C 404.991,393.843 406.824,395.343 407,398.5C 406.086,397.346 405.253,397.513 404.5,399C 404.728,399.399 405.062,399.565 405.5,399.5C 403.679,400.117 401.679,400.284 399.5,400C 400.736,401.085 402.069,401.918 403.5,402.5C 403.176,403.812 402.509,404.645 401.5,405C 401.743,405.902 402.077,406.735 402.5,407.5C 401.85,407.804 401.183,408.137 400.5,408.5C 398.464,406.655 396.13,406.155 393.5,407C 392.226,407.977 392.226,408.811 393.5,409.5C 393.461,410.756 393.961,411.756 395,412.5C 396.674,410.991 398.34,410.324 400,410.5C 401.236,412.538 403.069,413.705 405.5,414C 405.167,414.333 404.833,414.667 404.5,415C 406.473,415.495 408.473,415.662 410.5,415.5C 402.02,417.329 393.353,417.662 384.5,416.5C 384.709,415.914 385.043,415.414 385.5,415C 383.901,413.214 383.067,411.047 383,408.5C 382.536,409.094 382.369,409.761 382.5,410.5C 381.596,409.791 381.263,408.791 381.5,407.5C 382.468,405.393 382.802,403.059 382.5,400.5C 386.247,400.392 389.914,400.892 393.5,402C 392.549,402.718 392.383,403.551 393,404.5C 394.074,403.382 395.24,402.382 396.5,401.5C 396.167,400.5 395.5,399.833 394.5,399.5C 390.593,399.857 386.593,399.857 382.5,399.5C 380.341,384.226 378.674,368.892 377.5,353.5C 378.421,353.93 378.921,355.264 379,357.5C 379.346,355.782 379.846,354.115 380.5,352.5C 383.833,351.167 387.167,351.167 390.5,352.5C 388.774,354.228 387.441,356.228 386.5,358.5C 386.709,359.086 387.043,359.586 387.5,360C 384.715,362.112 383.048,361.278 382.5,357.5C 381.842,360.473 380.842,363.306 379.5,366C 380.161,368.464 380.661,370.964 381,373.5C 382.017,371.624 382.851,369.624 383.5,367.5C 384.732,366.855 386.065,366.689 387.5,367C 387.167,366.667 386.833,366.333 386.5,366C 388.133,365.52 389.466,364.687 390.5,363.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8c746f\",d:\"M 395.5,363.5 C 394.626,365.69 392.959,366.69 390.5,366.5C 390.5,365.5 390.5,364.5 390.5,363.5C 390.783,362.711 391.283,362.044 392,361.5C 393.302,362.085 394.469,362.751 395.5,363.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8a7471\",d:\"M 411.5,360.5 C 413.106,361.359 414.773,361.526 416.5,361C 417.784,362.297 417.617,363.464 416,364.5C 413.184,365.13 410.518,364.464 408,362.5C 407.692,363.308 407.192,363.975 406.5,364.5C 405.5,363.167 404.5,363.167 403.5,364.5C 402.692,364.192 402.025,363.692 401.5,363C 404.952,362.115 408.286,361.282 411.5,360.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9e8884\",d:\"M 400.5,356.5 C 401.735,356.721 402.735,357.388 403.5,358.5C 403.833,357.833 404.167,357.167 404.5,356.5C 405.386,357.325 405.719,358.325 405.5,359.5C 403.801,359.34 402.134,359.506 400.5,360C 400.966,361.299 400.966,362.799 400.5,364.5C 398.856,364.286 397.356,364.62 396,365.5C 395.536,364.906 395.369,364.239 395.5,363.5C 400.463,361.606 400.463,360.606 395.5,360.5C 395.351,359.448 395.517,358.448 396,357.5C 396.333,357.833 396.667,358.167 397,358.5C 398.302,357.915 399.469,357.249 400.5,356.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#735f62\",d:\"M 495.5,353.5 C 495.201,355.604 495.534,357.604 496.5,359.5C 497.183,359.137 497.85,358.804 498.5,358.5C 498.62,362.583 497.286,366.417 494.5,370C 494.493,371.583 494.826,373.249 495.5,375C 493.346,379.438 491.179,383.938 489,388.5C 488.587,391.232 487.92,393.899 487,396.5C 486.25,397.126 485.416,397.626 484.5,398C 484.833,398.333 485.167,398.667 485.5,399C 481.674,409.145 478.341,419.145 475.5,429C 475.639,430.301 476.305,431.134 477.5,431.5C 478.239,431.369 478.906,431.536 479.5,432C 480.738,432.69 480.738,433.19 479.5,433.5C 478.167,433.167 476.833,432.833 475.5,432.5C 474.432,431.566 473.099,431.232 471.5,431.5C 471.167,430.5 470.5,429.833 469.5,429.5C 469.5,429.167 469.5,428.833 469.5,428.5C 470.833,428.5 472.167,428.5 473.5,428.5C 473.726,424.708 474.56,421.041 476,417.5C 482.948,398.816 489.782,380.15 496.5,361.5C 495.311,360.571 493.978,360.238 492.5,360.5C 492.145,362.89 491.478,365.223 490.5,367.5C 490.57,368.772 490.903,369.938 491.5,371C 490.167,371.333 488.833,371.667 487.5,372C 488.022,372.561 488.355,373.228 488.5,374C 487.873,376.135 487.373,378.302 487,380.5C 486.226,382.343 484.726,384.176 482.5,386C 482.985,389.274 482.985,392.441 482.5,395.5C 480.013,398.807 478.346,402.473 477.5,406.5C 476.244,406.539 475.244,406.039 474.5,405C 474.833,404 475.167,403 475.5,402C 474.833,401.667 474.167,401.333 473.5,401C 475.929,399.645 477.262,397.978 477.5,396C 478.5,395.667 479.5,395.333 480.5,395C 477.214,393.672 473.881,392.339 470.5,391C 472.974,391.302 475.308,391.468 477.5,391.5C 479.494,388.85 480.494,385.85 480.5,382.5C 483.598,382.587 483.932,382.087 481.5,381C 483.078,378.518 484.411,375.851 485.5,373C 485.043,372.586 484.709,372.086 484.5,371.5C 485.729,370.719 487.062,370.219 488.5,370C 488.384,368.732 488.051,367.398 487.5,366C 489.25,364.246 489.917,362.079 489.5,359.5C 495.361,359.646 495.694,358.979 490.5,357.5C 491.656,355.613 493.323,354.279 495.5,353.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d9baa0\",d:\"M 524.5,356.5 C 526.936,356.749 528.936,357.749 530.5,359.5C 529.624,360.251 528.624,360.751 527.5,361C 529.25,362.754 529.917,364.921 529.5,367.5C 528.5,367.5 527.5,367.5 526.5,367.5C 525.878,374.081 522.878,379.081 517.5,382.5C 517.458,381.188 517.458,379.854 517.5,378.5C 520.757,372.986 523.757,367.32 526.5,361.5C 526.137,360.817 525.804,360.15 525.5,359.5C 525.938,359.565 526.272,359.399 526.5,359C 525.584,358.722 524.918,358.222 524.5,357.5C 524.5,357.167 524.5,356.833 524.5,356.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a8806b\",d:\"M 92.5,398.5 C 86.819,401.673 81.4856,405.339 76.5,409.5C 75.8333,409.5 75.5,409.833 75.5,410.5C 73.5355,409.218 71.5355,407.885 69.5,406.5C 70.6613,404.776 70.4947,403.11 69,401.5C 68.3109,402.357 67.4776,403.023 66.5,403.5C 64.4898,403.174 62.4898,402.841 60.5,402.5C 61.0253,401.808 61.6919,401.308 62.5,401C 60.032,399.616 57.8653,397.783 56,395.5C 56.5754,392.223 56.2421,389.223 55,386.5C 53.8139,384.323 51.9806,383.323 49.5,383.5C 60.2098,376.139 71.2098,369.139 82.5,362.5C 85.6612,361.087 88.6612,359.42 91.5,357.5C 92.4971,358.713 93.4971,358.546 94.5,357C 96.1667,356.333 97.8333,356.333 99.5,357C 98.376,357.249 97.376,357.749 96.5,358.5C 96.9377,359.506 97.6043,359.506 98.5,358.5C 99.1567,368.064 99.49,377.564 99.5,387C 98.2396,388.113 97.073,388.28 96,387.5C 95.7935,390.623 95.1268,393.623 94,396.5C 93.2825,395.549 92.4491,395.383 91.5,396C 92.2524,396.671 92.5858,397.504 92.5,398.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e4dbdc\",d:\"M 461.5,338.5 C 462.683,343.776 463.683,349.109 464.5,354.5C 463.883,354.389 463.383,354.056 463,353.5C 461.832,357.506 460.665,361.506 459.5,365.5C 460.833,367.167 462.167,368.833 463.5,370.5C 463.333,370.833 463.167,371.167 463,371.5C 462,370.5 461,369.5 460,368.5C 459.721,372.17 459.888,375.837 460.5,379.5C 459.833,381.167 459.167,382.833 458.5,384.5C 458.665,380.818 458.499,377.152 458,373.5C 456.893,372.288 456.393,372.621 456.5,374.5C 455.883,374.611 455.383,374.944 455,375.5C 452.817,368.997 451.817,362.33 452,355.5C 452.671,356.252 453.504,356.586 454.5,356.5C 454.104,359.044 454.771,361.211 456.5,363C 455.39,365.737 455.223,368.571 456,371.5C 456.667,370.167 457.333,370.167 458,371.5C 458.167,370.167 458.333,368.833 458.5,367.5C 456.687,358.299 456.02,348.965 456.5,339.5C 458.117,338.962 459.784,338.629 461.5,338.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b0acac\",d:\"M 503.5,358.5 C 503.833,358.5 504.167,358.5 504.5,358.5C 506.38,358.229 507.713,358.896 508.5,360.5C 508.5,361.5 508.5,362.5 508.5,363.5C 511.221,363.963 513.888,364.629 516.5,365.5C 516.265,366.097 515.765,366.43 515,366.5C 512.567,365.521 510.067,364.855 507.5,364.5C 507.373,367.816 506.373,370.816 504.5,373.5C 504.709,374.086 505.043,374.586 505.5,375C 502.338,378.502 500.671,382.669 500.5,387.5C 501.959,387.433 503.292,387.766 504.5,388.5C 504.048,389.657 502.048,389.657 498.5,388.5C 498.223,391.89 497.223,395.057 495.5,398C 495.833,398.333 496.167,398.667 496.5,399C 494.196,401.664 492.863,404.831 492.5,408.5C 492.453,410.038 493.12,411.038 494.5,411.5C 492.81,412.103 491.31,413.103 490,414.5C 487.545,420.719 485.711,427.052 484.5,433.5C 483.209,433.263 482.209,433.596 481.5,434.5C 480.508,434.672 479.842,434.338 479.5,433.5C 480.738,433.19 480.738,432.69 479.5,432C 478.906,431.536 478.239,431.369 477.5,431.5C 477.918,430.778 478.584,430.278 479.5,430C 479.167,429.667 478.833,429.333 478.5,429C 479.264,426.931 479.764,424.764 480,422.5C 481.229,424.947 482.729,425.113 484.5,423C 482.122,422.026 482.456,421.359 485.5,421C 483.182,419.898 482.515,418.398 483.5,416.5C 484.708,417.782 486.042,417.782 487.5,416.5C 489.69,412.79 490.69,408.79 490.5,404.5C 489.325,404.281 488.325,404.614 487.5,405.5C 486.864,407.78 485.864,409.78 484.5,411.5C 484.322,410.064 483.989,408.564 483.5,407C 489.594,395.793 494.428,383.627 498,370.5C 499.011,371.337 500.178,371.67 501.5,371.5C 501.703,369.61 501.037,368.11 499.5,367C 501.155,364.753 501.488,362.42 500.5,360C 501.737,359.768 502.737,359.268 503.5,358.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#665752\",d:\"M 273.5,360.5 C 274.919,359.549 276.585,359.216 278.5,359.5C 278.5,359.833 278.5,360.167 278.5,360.5C 277.249,361.472 277.582,362.139 279.5,362.5C 281.038,362.547 282.038,361.88 282.5,360.5C 284.042,361.301 285.708,361.634 287.5,361.5C 287.5,361.833 287.5,362.167 287.5,362.5C 286.791,363.404 285.791,363.737 284.5,363.5C 284.335,366.518 284.502,369.518 285,372.5C 287.394,373.136 289.894,373.136 292.5,372.5C 293.9,373.1 294.9,374.1 295.5,375.5C 295.5,376.167 295.5,376.833 295.5,377.5C 295.5,378.5 295.5,379.5 295.5,380.5C 292.603,380.875 289.937,380.375 287.5,379C 288.499,376.239 290.499,374.906 293.5,375C 291.19,374.503 288.857,374.337 286.5,374.5C 286.384,377.86 286.051,381.193 285.5,384.5C 284.5,384.5 283.5,384.5 282.5,384.5C 282.5,383.833 282.167,383.5 281.5,383.5C 282.209,382.596 283.209,382.263 284.5,382.5C 284.5,380.167 284.5,377.833 284.5,375.5C 281.276,375.203 278.276,375.87 275.5,377.5C 274.534,375.604 274.201,373.604 274.5,371.5C 277.167,371.5 279.833,371.5 282.5,371.5C 282.5,368.833 282.5,366.167 282.5,363.5C 279.979,363.44 277.646,364.106 275.5,365.5C 274.287,365.253 273.62,364.586 273.5,363.5C 274.5,363.5 275.5,363.5 276.5,363.5C 276.5,362.5 276.5,361.5 276.5,360.5C 275.5,360.5 274.5,360.5 273.5,360.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#eae0e1\",d:\"M 278.5,372.5 C 280.288,372.215 281.955,372.548 283.5,373.5C 282.667,373.833 281.833,374.167 281,374.5C 279.624,374.316 278.791,373.649 278.5,372.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e6dfdc\",d:\"M 278.5,360.5 C 279.833,360.5 281.167,360.5 282.5,360.5C 282.038,361.88 281.038,362.547 279.5,362.5C 277.582,362.139 277.249,361.472 278.5,360.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ead4bf\",d:\"M 269.5,370.5 C 270.833,370.5 271.5,371.167 271.5,372.5C 262.253,373.53 253.253,375.197 244.5,377.5C 243.833,377.5 243.167,377.5 242.5,377.5C 241.098,377.264 239.598,376.93 238,376.5C 227.97,378.866 217.803,380.199 207.5,380.5C 207.611,379.883 207.944,379.383 208.5,379C 214.934,378.852 221.267,378.018 227.5,376.5C 228.442,376.608 229.275,376.941 230,377.5C 230.853,375.875 231.853,375.542 233,376.5C 235.59,374.241 238.423,373.908 241.5,375.5C 250.862,373.819 260.195,372.153 269.5,370.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9d7f71\",d:\"M 525.5,359.5 C 525.804,360.15 526.137,360.817 526.5,361.5C 523.757,367.32 520.757,372.986 517.5,378.5C 517.458,379.854 517.458,381.188 517.5,382.5C 518.167,382.5 518.5,382.833 518.5,383.5C 517.5,383.5 516.5,383.5 515.5,383.5C 514.833,383.5 514.167,383.5 513.5,383.5C 513.5,383.167 513.5,382.833 513.5,382.5C 515.774,378.286 517.774,373.953 519.5,369.5C 521.93,366.408 523.93,363.075 525.5,359.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8e8379\",d:\"M 540.5,378.5 C 541.404,379.209 541.737,380.209 541.5,381.5C 540.167,381.5 538.833,381.5 537.5,381.5C 535.231,379.616 532.564,378.283 529.5,377.5C 531.576,376.9 533.576,376.567 535.5,376.5C 536.799,377.09 537.632,378.09 538,379.5C 538.951,379.116 539.784,378.783 540.5,378.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#684a3b\",d:\"M 109.5,349.5 C 111.93,353.142 113.263,356.976 113.5,361C 110.833,361.667 110.833,362.333 113.5,363C 112.899,366.395 112.899,369.895 113.5,373.5C 113.764,377.494 114.764,381.161 116.5,384.5C 116.5,387.833 116.5,391.167 116.5,394.5C 116.167,394.5 115.833,394.5 115.5,394.5C 115.754,392.599 115.42,391.933 114.5,392.5C 113.876,392.083 113.543,391.416 113.5,390.5C 114.732,388.95 115.232,387.283 115,385.5C 113.007,386.914 110.84,387.914 108.5,388.5C 107.047,387.175 107.381,386.342 109.5,386C 108.833,385.667 108.167,385.333 107.5,385C 108.428,384.612 109.095,383.945 109.5,383C 109.393,380.56 109.393,378.06 109.5,375.5C 109.192,374.692 108.692,374.025 108,373.5C 107.168,366.185 106.668,358.852 106.5,351.5C 107.738,351.19 107.738,350.69 106.5,350C 107.448,349.517 108.448,349.351 109.5,349.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f1edec\",d:\"M 151.5,299.5 C 152.873,299.343 154.207,299.51 155.5,300C 154.833,300.333 154.167,300.667 153.5,301C 148.357,301.838 143.357,302.672 138.5,303.5C 134.818,303.335 131.152,303.501 127.5,304C 126.663,305.011 126.33,306.178 126.5,307.5C 125.774,311.321 125.774,315.321 126.5,319.5C 132.509,318.019 132.843,318.852 127.5,322C 127.833,322.167 128.167,322.333 128.5,322.5C 131.647,322.776 134.647,322.109 137.5,320.5C 138.5,320.5 139.5,320.5 140.5,320.5C 143.187,320.336 145.854,320.503 148.5,321C 146.833,321.333 145.167,321.667 143.5,322C 146.095,322.226 148.595,322.726 151,323.5C 153.222,321.722 155.388,321.555 157.5,323C 154.21,323.533 150.544,324.699 146.5,326.5C 140.465,326.537 134.465,327.037 128.5,328C 127.941,328.725 127.608,329.558 127.5,330.5C 128.328,333.479 128.995,336.479 129.5,339.5C 138.852,339.052 148.185,338.386 157.5,337.5C 159.028,338.802 160.028,340.469 160.5,342.5C 159.432,343.434 158.099,343.768 156.5,343.5C 152.629,343.185 148.962,343.518 145.5,344.5C 141.519,345.021 137.519,345.354 133.5,345.5C 134.706,363.944 136.706,382.277 139.5,400.5C 149.176,399.61 158.842,398.61 168.5,397.5C 169.239,397.369 169.906,397.536 170.5,398C 166.832,398.905 165.498,401.072 166.5,404.5C 165.478,405.354 164.645,406.354 164,407.5C 161.439,406.888 158.606,406.721 155.5,407C 154.809,408.067 154.309,409.234 154,410.5C 147.326,409.759 140.993,409.426 135,409.5C 134.667,410.5 134.333,411.5 134,412.5C 134.053,410.064 133.887,407.731 133.5,405.5C 132.641,408 131.641,410.333 130.5,412.5C 130.5,411.5 130.5,410.5 130.5,409.5C 129.577,397.978 128.244,386.645 126.5,375.5C 125.927,368.823 125.26,362.157 124.5,355.5C 122.645,337.516 120.978,319.516 119.5,301.5C 119.019,297.651 120.686,295.651 124.5,295.5C 124.646,297.942 123.813,298.609 122,297.5C 122.05,299.752 123.216,301.418 125.5,302.5C 126.386,301.675 126.719,300.675 126.5,299.5C 134.833,299.5 143.167,299.5 151.5,299.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#80563f\",d:\"M 242.5,377.5 C 243.167,377.5 243.833,377.5 244.5,377.5C 244.443,378.609 244.11,379.609 243.5,380.5C 238.678,379.902 234.011,380.569 229.5,382.5C 229.775,380.242 230.775,379.908 232.5,381.5C 235.92,379.422 239.253,378.089 242.5,377.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c4966c\",d:\"M 271.5,372.5 C 272.742,374.389 272.742,376.389 271.5,378.5C 271.5,380.167 271.5,381.833 271.5,383.5C 265.833,383.5 260.167,383.5 254.5,383.5C 253.738,381.738 252.404,380.738 250.5,380.5C 247.862,381.135 245.529,381.135 243.5,380.5C 244.11,379.609 244.443,378.609 244.5,377.5C 253.253,375.197 262.253,373.53 271.5,372.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c7b4b0\",d:\"M 195.5,359.5 C 197.022,368.66 198.355,377.993 199.5,387.5C 199.167,388.167 198.833,388.833 198.5,389.5C 179.58,392.965 160.58,395.965 141.5,398.5C 141.167,398.167 140.833,397.833 140.5,397.5C 142.933,395.946 145.6,395.28 148.5,395.5C 148.719,394.325 148.386,393.325 147.5,392.5C 146.197,393.718 145.197,393.385 144.5,391.5C 144.167,392.167 143.833,392.833 143.5,393.5C 142.571,392.311 142.238,390.978 142.5,389.5C 144.288,389.785 145.955,389.452 147.5,388.5C 145.865,387.319 144.198,387.319 142.5,388.5C 141.686,390.766 141.186,393.1 141,395.5C 139.375,387.251 138.542,378.918 138.5,370.5C 138.36,368.876 139.027,367.71 140.5,367C 144.025,366.821 147.359,366.321 150.5,365.5C 151.167,365.5 151.833,365.5 152.5,365.5C 155.059,365.198 157.393,365.532 159.5,366.5C 157.833,366.5 156.167,366.5 154.5,366.5C 154.336,372.167 154.003,372.5 153.5,367.5C 151.167,367.5 148.833,367.5 146.5,367.5C 146.336,373.167 146.003,373.5 145.5,368.5C 143.5,368.5 141.5,368.5 139.5,368.5C 139.5,371.5 139.5,374.5 139.5,377.5C 142.206,377.425 144.873,377.092 147.5,376.5C 147.662,378.527 147.495,380.527 147,382.5C 146.51,381.207 146.343,379.873 146.5,378.5C 144.5,378.5 142.5,378.5 140.5,378.5C 140.5,381.167 140.5,383.833 140.5,386.5C 145.57,386.315 150.57,385.648 155.5,384.5C 155.833,377.833 156.167,377.833 156.5,384.5C 158.861,384.326 161.194,383.993 163.5,383.5C 163.326,381.139 162.993,378.806 162.5,376.5C 152.859,377.95 150.193,377.95 154.5,376.5C 154.351,375.448 154.517,374.448 155,373.5C 157.106,375.291 159.606,375.958 162.5,375.5C 162.037,372.518 161.704,369.518 161.5,366.5C 161.167,365.833 160.833,365.167 160.5,364.5C 160.5,362.833 160.5,361.167 160.5,359.5C 160.634,357.708 160.301,356.042 159.5,354.5C 159.5,352.833 159.5,351.167 159.5,349.5C 159.5,348.833 159.833,348.5 160.5,348.5C 160.5,350.167 160.5,351.833 160.5,353.5C 163.388,354.01 165.721,353.344 167.5,351.5C 167.5,350.833 167.833,350.5 168.5,350.5C 169.116,354.863 169.95,359.197 171,363.5C 172.699,362.594 174.533,362.261 176.5,362.5C 176.5,359.833 176.5,357.167 176.5,354.5C 174.473,354.662 172.473,354.495 170.5,354C 172.134,353.506 173.801,353.34 175.5,353.5C 175.337,351.143 175.503,348.81 176,346.5C 176.465,351.573 179.299,353.573 184.5,352.5C 184.34,350.801 184.506,349.134 185,347.5C 186.286,352.096 187.119,356.763 187.5,361.5C 190.495,361.706 193.162,361.04 195.5,359.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#85716e\",d:\"M 172.5,374.5 C 174.527,374.338 176.527,374.505 178.5,375C 177.531,376.758 176.364,377.258 175,376.5C 174.333,377.833 174.333,379.167 175,380.5C 176.578,380.412 178.078,380.412 179.5,380.5C 175.558,382.114 171.391,383.114 167,383.5C 166.228,383.355 165.561,383.022 165,382.5C 164.503,380.19 164.337,377.857 164.5,375.5C 166.604,375.201 168.604,375.534 170.5,376.5C 168.927,378.836 167.594,378.836 166.5,376.5C 165.167,378.167 165.167,379.833 166.5,381.5C 167.192,380.975 167.692,380.308 168,379.5C 168.423,380.956 169.256,381.456 170.5,381C 169.289,380.107 169.289,379.274 170.5,378.5C 171.251,379.376 171.751,380.376 172,381.5C 172.497,379.19 172.663,376.857 172.5,374.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9c8785\",d:\"M 159.5,366.5 C 160.167,366.5 160.833,366.5 161.5,366.5C 161.704,369.518 162.037,372.518 162.5,375.5C 159.606,375.958 157.106,375.291 155,373.5C 154.517,374.448 154.351,375.448 154.5,376.5C 150.193,377.95 152.859,377.95 162.5,376.5C 162.993,378.806 163.326,381.139 163.5,383.5C 161.194,383.993 158.861,384.326 156.5,384.5C 156.167,377.833 155.833,377.833 155.5,384.5C 150.57,385.648 145.57,386.315 140.5,386.5C 140.5,383.833 140.5,381.167 140.5,378.5C 142.5,378.5 144.5,378.5 146.5,378.5C 146.343,379.873 146.51,381.207 147,382.5C 147.495,380.527 147.662,378.527 147.5,376.5C 144.873,377.092 142.206,377.425 139.5,377.5C 139.5,374.5 139.5,371.5 139.5,368.5C 141.5,368.5 143.5,368.5 145.5,368.5C 146.003,373.5 146.336,373.167 146.5,367.5C 148.833,367.5 151.167,367.5 153.5,367.5C 154.003,372.5 154.336,372.167 154.5,366.5C 156.167,366.5 157.833,366.5 159.5,366.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8a7773\",d:\"M 180.5,373.5 C 182.5,373.5 184.5,373.5 186.5,373.5C 186.292,375.92 186.626,378.253 187.5,380.5C 185.257,381.474 182.924,381.808 180.5,381.5C 180.5,378.833 180.5,376.167 180.5,373.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7f6c69\",d:\"M 191.5,372.5 C 193.167,372.5 194.833,372.5 196.5,372.5C 196.663,374.857 196.497,377.19 196,379.5C 194.706,378.146 194.54,376.812 195.5,375.5C 193.579,374.359 191.579,374.192 189.5,375C 190.191,376.067 190.691,377.234 191,378.5C 192.249,376.008 193.416,376.175 194.5,379C 192.655,380.128 190.655,380.628 188.5,380.5C 188.5,378.167 188.5,375.833 188.5,373.5C 189.791,373.737 190.791,373.404 191.5,372.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#86706c\",d:\"M 162.5,365.5 C 164.833,365.5 167.167,365.5 169.5,365.5C 169.719,366.675 169.386,367.675 168.5,368.5C 167.264,367.754 165.93,367.421 164.5,367.5C 164.238,368.978 164.571,370.311 165.5,371.5C 166.086,371.291 166.586,370.957 167,370.5C 167.903,371.701 169.069,372.535 170.5,373C 168.26,373.977 165.927,374.477 163.5,374.5C 163.492,371.455 163.159,368.455 162.5,365.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8f7d7a\",d:\"M 178.5,363.5 C 181.167,363.5 183.833,363.5 186.5,363.5C 186.5,366.5 186.5,369.5 186.5,372.5C 184.167,372.5 181.833,372.5 179.5,372.5C 179.296,369.482 178.963,366.482 178.5,363.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8c7c76\",d:\"M 170.5,364.5 C 172.833,364.5 175.167,364.5 177.5,364.5C 177.5,367.5 177.5,370.5 177.5,373.5C 175.5,373.5 173.5,373.5 171.5,373.5C 171.632,370.43 171.299,367.43 170.5,364.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#816a6a\",d:\"M 191.5,362.5 C 192.833,362.5 194.167,362.5 195.5,362.5C 195.232,365.119 195.565,367.619 196.5,370C 194.833,370.667 193.167,370.667 191.5,370C 193.56,368.507 193.893,366.674 192.5,364.5C 191.719,365.729 191.219,367.062 191,368.5C 190.667,367.5 190.333,366.5 190,365.5C 189.349,367.235 189.515,368.902 190.5,370.5C 189.675,371.386 188.675,371.719 187.5,371.5C 187.5,368.833 187.5,366.167 187.5,363.5C 189.099,363.768 190.432,363.434 191.5,362.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8a7874\",d:\"M 161.5,355.5 C 163.833,355.5 166.167,355.5 168.5,355.5C 168.232,358.119 168.565,360.619 169.5,363C 162.831,364.825 160.165,362.325 161.5,355.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8e7b79\",d:\"M 180.5,353.5 C 181.833,353.5 183.167,353.5 184.5,353.5C 185.159,356.455 185.492,359.455 185.5,362.5C 183.167,362.5 180.833,362.5 178.5,362.5C 178.167,359.833 177.833,357.167 177.5,354.5C 178.791,354.737 179.791,354.404 180.5,353.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ad896b\",d:\"M 242.5,377.5 C 239.253,378.089 235.92,379.422 232.5,381.5C 230.775,379.908 229.775,380.242 229.5,382.5C 229.316,384.925 228.649,384.925 227.5,382.5C 224.5,383.167 221.5,383.833 218.5,384.5C 217.335,383.509 216.168,382.509 215,381.5C 213.189,382.078 211.355,382.578 209.5,383C 207.75,384.754 207.083,386.921 207.5,389.5C 205.291,386.405 205.291,383.405 207.5,380.5C 217.803,380.199 227.97,378.866 238,376.5C 239.598,376.93 241.098,377.264 242.5,377.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e6e1e0\",d:\"M 52.5,367.5 C 52.369,368.239 52.5357,368.906 53,369.5C 61.4717,367.839 69.6384,365.172 77.5,361.5C 79.2145,361.595 80.8812,361.928 82.5,362.5C 71.2098,369.139 60.2098,376.139 49.5,383.5C 48.8333,383.833 48.1667,384.167 47.5,384.5C 44.1667,386.833 40.8333,389.167 37.5,391.5C 36.8333,391.5 36.5,391.833 36.5,392.5C 35.8333,392.167 35.1667,391.833 34.5,391.5C 33.4509,388.399 32.1176,385.399 30.5,382.5C 27.5,384.167 24.5,385.833 21.5,387.5C 22.0253,388.192 22.6919,388.692 23.5,389C 21.2406,390.715 19.0739,392.548 17,394.5C 15.1154,392.285 13.2821,392.618 11.5,395.5C 10.8333,394.833 10.1667,394.167 9.5,393.5C 7.45654,395.208 5.78987,397.208 4.5,399.5C 4.16667,399.167 3.83333,398.833 3.5,398.5C 4.65082,396.191 5.98415,394.024 7.5,392C 6.12694,390.521 4.62694,390.688 3,392.5C 0.832226,391.371 0.332226,389.871 1.5,388C 0.905578,387.536 0.238911,387.369 -0.5,387.5C -0.5,386.167 -0.5,384.833 -0.5,383.5C 5.12175,379.718 10.6218,375.718 16,371.5C 21.1955,377.618 26.0289,377.618 30.5,371.5C 33.1667,369.167 35.8333,366.833 38.5,364.5C 39.5,364.167 40.1667,363.5 40.5,362.5C 42.4807,360.856 44.4807,359.19 46.5,357.5C 48.5259,360.897 50.5259,364.23 52.5,367.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a28d8c\",d:\"M 406.5,382.5 C 407.397,381.402 408.23,381.402 409,382.5C 409.308,381.692 409.808,381.025 410.5,380.5C 411.976,382.571 413.976,383.571 416.5,383.5C 414.496,388.489 411.162,389.489 406.5,386.5C 407.363,385.274 407.363,383.94 406.5,382.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#846f6b\",d:\"M 181.5,382.5 C 183.5,382.5 185.5,382.5 187.5,382.5C 187.833,385.167 188.167,387.833 188.5,390.5C 186.533,390.261 184.699,390.594 183,391.5C 181.711,388.649 181.211,385.649 181.5,382.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#856d6a\",d:\"M 190.5,381.5 C 192.833,381.5 195.167,381.5 197.5,381.5C 197.318,383.591 197.652,385.591 198.5,387.5C 190.457,392.794 187.79,390.794 190.5,381.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b2a39e\",d:\"M 295.5,377.5 C 296.29,378.609 296.79,379.942 297,381.5C 298.011,380.663 299.178,380.33 300.5,380.5C 300.5,381.833 300.5,383.167 300.5,384.5C 297.483,384.556 297.15,384.89 299.5,385.5C 298.032,386.779 297.365,388.446 297.5,390.5C 296.549,389.081 296.216,387.415 296.5,385.5C 289.959,385.462 289.959,384.796 296.5,383.5C 295.271,382.719 293.938,382.219 292.5,382C 293.737,381.768 294.737,381.268 295.5,380.5C 295.5,379.5 295.5,378.5 295.5,377.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#615955\",d:\"M 300.5,380.5 C 300.833,380.5 301.167,380.5 301.5,380.5C 302.9,381.1 303.9,382.1 304.5,383.5C 303.448,385.256 301.781,385.923 299.5,385.5C 297.15,384.89 297.483,384.556 300.5,384.5C 300.5,383.167 300.5,381.833 300.5,380.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#866e6c\",d:\"M 406.5,382.5 C 405.778,382.918 405.278,383.584 405,384.5C 403.111,383.911 401.111,383.577 399,383.5C 397.215,384.24 395.382,384.907 393.5,385.5C 392.459,383.009 391.626,383.009 391,385.5C 390.626,384.584 390.126,383.75 389.5,383C 394.511,382.201 399.345,381.368 404,380.5C 404.995,381.066 405.828,381.733 406.5,382.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#eaecf2\",d:\"M 563.5,357.5 C 563.5,381.5 563.5,405.5 563.5,429.5C 561.257,428.553 558.923,428.553 556.5,429.5C 551.897,428.012 547.23,427.179 542.5,427C 544.619,427.342 544.953,428.175 543.5,429.5C 542.504,429.414 541.671,429.748 541,430.5C 540.833,429.833 540.667,429.167 540.5,428.5C 546.464,408.063 552.464,387.896 558.5,368C 559.264,365.931 559.764,363.764 560,361.5C 561.55,360.409 562.717,359.076 563.5,357.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#99878a\",d:\"M 458.5,384.5 C 458.201,386.455 457.201,387.789 455.5,388.5C 455.603,385.781 455.269,383.115 454.5,380.5C 455.178,378.484 455.844,376.484 456.5,374.5C 456.393,372.621 456.893,372.288 458,373.5C 458.499,377.152 458.665,380.818 458.5,384.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#847a73\",d:\"M 531.5,387.5 C 529.973,387.573 528.973,386.906 528.5,385.5C 531.35,384.072 532.35,384.739 531.5,387.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#95705e\",d:\"M 102.5,351.5 C 103.833,351.5 105.167,351.5 106.5,351.5C 106.668,358.852 107.168,366.185 108,373.5C 108.692,374.025 109.192,374.692 109.5,375.5C 109.393,378.06 109.393,380.56 109.5,383C 109.095,383.945 108.428,384.612 107.5,385C 108.167,385.333 108.833,385.667 109.5,386C 107.381,386.342 107.047,387.175 108.5,388.5C 107.833,389.167 107.167,389.833 106.5,390.5C 102.074,393.594 97.407,396.261 92.5,398.5C 92.5858,397.504 92.2524,396.671 91.5,396C 92.4491,395.383 93.2825,395.549 94,396.5C 95.1268,393.623 95.7935,390.623 96,387.5C 97.073,388.28 98.2396,388.113 99.5,387C 99.49,377.564 99.1567,368.064 98.5,358.5C 97.6043,359.506 96.9377,359.506 96.5,358.5C 97.376,357.749 98.376,357.249 99.5,357C 97.8333,356.333 96.1667,356.333 94.5,357C 93.4971,358.546 92.4971,358.713 91.5,357.5C 94.678,354.742 98.3447,352.742 102.5,351.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cda887\",d:\"M 271.5,378.5 C 273.256,379.552 273.923,381.219 273.5,383.5C 253.61,386.69 233.61,389.357 213.5,391.5C 211.048,391.461 209.048,390.794 207.5,389.5C 207.083,386.921 207.75,384.754 209.5,383C 211.355,382.578 213.189,382.078 215,381.5C 216.168,382.509 217.335,383.509 218.5,384.5C 221.5,383.833 224.5,383.167 227.5,382.5C 228.649,384.925 229.316,384.925 229.5,382.5C 234.011,380.569 238.678,379.902 243.5,380.5C 245.529,381.135 247.862,381.135 250.5,380.5C 249.198,381.926 247.698,383.259 246,384.5C 243.599,383.398 241.099,383.231 238.5,384C 240.595,384.556 240.762,385.056 239,385.5C 237.108,382.61 236.275,382.944 236.5,386.5C 242.778,385.84 248.778,384.84 254.5,383.5C 260.167,383.5 265.833,383.5 271.5,383.5C 271.5,381.833 271.5,380.167 271.5,378.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8e6a54\",d:\"M 250.5,380.5 C 252.404,380.738 253.738,381.738 254.5,383.5C 248.778,384.84 242.778,385.84 236.5,386.5C 236.275,382.944 237.108,382.61 239,385.5C 240.762,385.056 240.595,384.556 238.5,384C 241.099,383.231 243.599,383.398 246,384.5C 247.698,383.259 249.198,381.926 250.5,380.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#887672\",d:\"M 370.5,383.5 C 370.5,386.167 370.5,388.833 370.5,391.5C 351.942,392.791 333.608,394.791 315.5,397.5C 312.833,397.833 310.167,398.167 307.5,398.5C 306.926,393.352 307.593,388.518 309.5,384C 329.834,381.705 350.168,379.539 370.5,377.5C 370.5,379.5 370.5,381.5 370.5,383.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d1beb9\",d:\"M 335.5,384.5 C 336.586,384.62 337.253,385.287 337.5,386.5C 336.865,387.966 336.031,389.3 335,390.5C 334.667,390.167 334.333,389.833 334,389.5C 332,390.167 330,390.833 328,391.5C 326.599,389.854 326.432,388.187 327.5,386.5C 328.086,386.709 328.586,387.043 329,387.5C 331.415,386.868 333.582,385.868 335.5,384.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#745e5b\",d:\"M 401.5,385.5 C 402.404,386.209 402.737,387.209 402.5,388.5C 400.208,388.756 398.041,388.423 396,387.5C 394.913,389.932 394.413,389.598 394.5,386.5C 397.215,388.076 399.548,387.742 401.5,385.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#917d83\",d:\"M 466.5,375.5 C 467.468,377.607 467.802,379.941 467.5,382.5C 466.076,384.515 465.41,386.848 465.5,389.5C 462.203,389.329 461.869,389.995 464.5,391.5C 464.216,393.759 463.216,395.426 461.5,396.5C 461.806,393.615 461.473,390.948 460.5,388.5C 460.343,387.127 460.51,385.793 461,384.5C 462.856,381.444 464.689,378.444 466.5,375.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#826e66\",d:\"M 175.5,383.5 C 176.833,383.5 178.167,383.5 179.5,383.5C 180.092,386.127 180.425,388.794 180.5,391.5C 178.5,391.5 176.5,391.5 174.5,391.5C 174.279,388.721 174.612,386.054 175.5,383.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e1d0ce\",d:\"M 346.5,384.5 C 348.599,385.37 348.932,386.703 347.5,388.5C 342.115,391.531 341.282,390.531 345,385.5C 346.043,389.226 346.543,388.893 346.5,384.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b9aca6\",d:\"M 357.5,383.5 C 359.864,384.842 360.53,386.675 359.5,389C 356.302,389.672 352.969,389.505 349.5,388.5C 349.5,387.167 349.5,385.833 349.5,384.5C 351.124,384.36 352.29,385.027 353,386.5C 354.57,385.451 356.07,384.451 357.5,383.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bda099\",d:\"M 377.5,353.5 C 378.674,368.892 380.341,384.226 382.5,399.5C 386.593,399.857 390.593,399.857 394.5,399.5C 395.5,399.833 396.167,400.5 396.5,401.5C 395.24,402.382 394.074,403.382 393,404.5C 392.383,403.551 392.549,402.718 393.5,402C 389.914,400.892 386.247,400.392 382.5,400.5C 382.802,403.059 382.468,405.393 381.5,407.5C 381.5,405.167 381.5,402.833 381.5,400.5C 380.041,400.433 378.708,400.766 377.5,401.5C 377.5,400.833 377.5,400.167 377.5,399.5C 378.5,399.5 379.5,399.5 380.5,399.5C 378.637,383.871 376.97,368.204 375.5,352.5C 375.667,350.833 375.833,349.167 376,347.5C 376.191,349.708 376.691,351.708 377.5,353.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#856f6b\",d:\"M 165.5,384.5 C 167.833,384.5 170.167,384.5 172.5,384.5C 172.575,387.206 172.908,389.873 173.5,392.5C 170.833,392.5 168.167,392.5 165.5,392.5C 165.5,389.833 165.5,387.167 165.5,384.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c5b0a8\",d:\"M 317.5,387.5 C 322.688,386.622 324.188,388.289 322,392.5C 321,391.167 320,391.167 319,392.5C 318,389.833 317,389.833 316,392.5C 315.333,391.167 315.333,389.833 316,388.5C 317.107,389.712 317.607,389.379 317.5,387.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#927d7a\",d:\"M 424.5,382.5 C 426.176,383.183 426.843,384.517 426.5,386.5C 425.5,386.5 424.5,386.5 423.5,386.5C 424.052,388.331 424.052,389.997 423.5,391.5C 422.5,390.167 421.5,390.167 420.5,391.5C 419.808,390.975 419.308,390.308 419,389.5C 418.915,391.085 418.749,392.418 418.5,393.5C 417.377,392.456 416.044,391.79 414.5,391.5C 412.186,392.108 410.186,392.441 408.5,392.5C 407.022,392.762 405.689,392.429 404.5,391.5C 404.667,391.167 404.833,390.833 405,390.5C 408.373,389.441 412.04,389.441 416,390.5C 417.204,389.141 418.704,388.141 420.5,387.5C 420.062,386.494 419.396,386.494 418.5,387.5C 417.417,386.635 417.251,385.635 418,384.5C 419.525,384.112 421.192,384.112 423,384.5C 423.717,383.956 424.217,383.289 424.5,382.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8b766f\",d:\"M 148.5,386.5 C 150.924,386.192 153.257,386.526 155.5,387.5C 154.41,389.003 153.243,389.336 152,388.5C 150.56,389.93 150.226,391.597 151,393.5C 154.899,390.743 156.733,391.41 156.5,395.5C 154.167,395.5 151.833,395.5 149.5,395.5C 149.296,392.482 148.963,389.482 148.5,386.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#897370\",d:\"M 157.5,385.5 C 159.527,385.338 161.527,385.505 163.5,386C 162.333,386.5 161.5,387.333 161,388.5C 160.107,387.289 159.274,387.289 158.5,388.5C 159.012,391.351 160.679,392.684 163.5,392.5C 163.34,390.801 163.506,389.134 164,387.5C 164.495,389.473 164.662,391.473 164.5,393.5C 162.139,393.674 159.806,394.007 157.5,394.5C 157.5,391.5 157.5,388.5 157.5,385.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d5bfbb\",d:\"M 433.5,332.5 C 438.082,359.83 442.415,387.33 446.5,415C 446.355,415.772 446.022,416.439 445.5,417C 443.527,417.495 441.527,417.662 439.5,417.5C 420.431,418.939 401.431,420.939 382.5,423.5C 382.404,419.689 381.738,419.689 380.5,423.5C 379.61,416.141 378.61,408.807 377.5,401.5C 378.708,400.766 380.041,400.433 381.5,400.5C 381.5,402.833 381.5,405.167 381.5,407.5C 381.263,408.791 381.596,409.791 382.5,410.5C 382.704,413.518 383.037,416.518 383.5,419.5C 403.191,418.088 422.857,416.421 442.5,414.5C 440.669,403.191 438.836,391.858 437,380.5C 436.713,382.891 436.213,385.224 435.5,387.5C 435.846,388.696 436.346,388.696 437,387.5C 438.532,395.811 439.532,404.144 440,412.5C 430.288,414.264 420.455,415.264 410.5,415.5C 408.473,415.662 406.473,415.495 404.5,415C 404.833,414.667 405.167,414.333 405.5,414C 403.069,413.705 401.236,412.538 400,410.5C 398.34,410.324 396.674,410.991 395,412.5C 393.961,411.756 393.461,410.756 393.5,409.5C 397.012,410.055 400.012,409.388 402.5,407.5C 402.077,406.735 401.743,405.902 401.5,405C 402.509,404.645 403.176,403.812 403.5,402.5C 406.472,403.386 409.472,403.053 412.5,401.5C 410.49,399.829 408.157,399.162 405.5,399.5C 405.062,399.565 404.728,399.399 404.5,399C 405.253,397.513 406.086,397.346 407,398.5C 406.824,395.343 404.991,393.843 401.5,394C 404.036,393.814 406.369,393.314 408.5,392.5C 410.186,392.441 412.186,392.108 414.5,391.5C 416.044,391.79 417.377,392.456 418.5,393.5C 418.749,392.418 418.915,391.085 419,389.5C 419.308,390.308 419.808,390.975 420.5,391.5C 421.5,390.167 422.5,390.167 423.5,391.5C 424.052,389.997 424.052,388.331 423.5,386.5C 424.5,386.5 425.5,386.5 426.5,386.5C 426.843,384.517 426.176,383.183 424.5,382.5C 423.113,380.511 423.447,378.678 425.5,377C 423.479,376.599 422.145,375.432 421.5,373.5C 422.833,373.167 424.167,372.833 425.5,372.5C 424.975,371.808 424.308,371.308 423.5,371C 425.26,370.035 425.594,368.868 424.5,367.5C 421.918,371.8 420.584,371.467 420.5,366.5C 421.552,366.649 422.552,366.483 423.5,366C 422.396,364.869 422.729,364.035 424.5,363.5C 425.243,364.908 426.077,366.241 427,367.5C 427.333,363.5 427.667,359.5 428,355.5C 429.805,358.659 431.305,362.659 432.5,367.5C 433.48,364.914 433.813,362.247 433.5,359.5C 433.196,349.929 432.196,340.429 430.5,331C 430.667,329.5 430.833,328 431,326.5C 431.346,329.576 432.012,332.576 433,335.5C 433.483,334.552 433.649,333.552 433.5,332.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a79f98\",d:\"M 301.5,397.5 C 300.5,398.833 299.5,398.833 298.5,397.5C 293.959,397.669 293.626,397.002 297.5,395.5C 296.624,394.749 295.624,394.249 294.5,394C 295.737,393.768 296.737,393.268 297.5,392.5C 300.167,392.167 302.833,391.833 305.5,391.5C 305.5,393.5 305.5,395.5 305.5,397.5C 304.167,397.5 302.833,397.5 301.5,397.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#1f1c17\",d:\"M 302.5,392.5 C 303.586,392.62 304.253,393.287 304.5,394.5C 304.167,395.167 303.833,395.833 303.5,396.5C 302.571,395.311 302.238,393.978 302.5,392.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#948e8e\",d:\"M 499.5,354.5 C 500.396,355.506 501.062,355.506 501.5,354.5C 502.345,355.671 503.011,357.005 503.5,358.5C 502.737,359.268 501.737,359.768 500.5,360C 501.488,362.42 501.155,364.753 499.5,367C 501.037,368.11 501.703,369.61 501.5,371.5C 500.178,371.67 499.011,371.337 498,370.5C 494.428,383.627 489.594,395.793 483.5,407C 483.989,408.564 484.322,410.064 484.5,411.5C 484.371,413.216 484.038,414.883 483.5,416.5C 482.515,418.398 483.182,419.898 485.5,421C 482.456,421.359 482.122,422.026 484.5,423C 482.729,425.113 481.229,424.947 480,422.5C 479.764,424.764 479.264,426.931 478.5,429C 478.833,429.333 479.167,429.667 479.5,430C 478.584,430.278 477.918,430.778 477.5,431.5C 476.305,431.134 475.639,430.301 475.5,429C 478.341,419.145 481.674,409.145 485.5,399C 485.167,398.667 484.833,398.333 484.5,398C 485.416,397.626 486.25,397.126 487,396.5C 487.92,393.899 488.587,391.232 489,388.5C 491.179,383.938 493.346,379.438 495.5,375C 494.826,373.249 494.493,371.583 494.5,370C 497.286,366.417 498.62,362.583 498.5,358.5C 498.232,356.901 498.566,355.568 499.5,354.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ebe6e8\",d:\"M 272.5,388.5 C 272.534,390.671 272.867,393.004 273.5,395.5C 274.726,394.637 276.06,394.637 277.5,395.5C 277.5,396.167 277.5,396.833 277.5,397.5C 275.5,397.5 273.5,397.5 271.5,397.5C 271.562,402.984 268.895,404.817 263.5,403C 261.231,400.977 258.564,400.144 255.5,400.5C 255.38,399.414 254.713,398.747 253.5,398.5C 251.547,399.156 249.547,399.489 247.5,399.5C 247.649,398.448 247.483,397.448 247,396.5C 246.333,397.833 245.667,397.833 245,396.5C 244.691,397.766 244.191,398.933 243.5,400C 238.791,400.469 234.291,401.635 230,403.5C 229.667,403.167 229.333,402.833 229,402.5C 228,403.833 227,405.167 226,406.5C 224.989,405.663 223.822,405.33 222.5,405.5C 220.989,403.559 218.989,403.059 216.5,404C 217.167,404.333 217.833,404.667 218.5,405C 217.62,406.356 217.286,407.856 217.5,409.5C 214.881,409.232 212.381,409.565 210,410.5C 209.667,408.5 209.333,406.5 209,404.5C 208.503,406.81 208.337,409.143 208.5,411.5C 210.512,410.986 212.512,410.82 214.5,411C 212.975,412.009 211.308,412.509 209.5,412.5C 209.212,420.145 210.212,427.478 212.5,434.5C 212.5,436.833 212.5,439.167 212.5,441.5C 218.921,440.818 225.254,439.818 231.5,438.5C 231.833,438.5 232.167,438.5 232.5,438.5C 234.167,438.5 235.833,438.5 237.5,438.5C 238.391,439.11 239.391,439.443 240.5,439.5C 241.167,440.833 241.833,440.833 242.5,439.5C 244.404,439.262 245.738,438.262 246.5,436.5C 257.48,435.302 268.48,434.302 279.5,433.5C 278.641,436.1 278.308,438.6 278.5,441C 279.784,441.684 280.951,441.517 282,440.5C 281.229,438.82 281.395,437.153 282.5,435.5C 285.5,435.5 288.5,435.5 291.5,435.5C 291.662,437.527 291.495,439.527 291,441.5C 289.933,442.191 288.766,442.691 287.5,443C 256.507,446.966 225.507,450.799 194.5,454.5C 193.5,454.5 192.5,454.5 191.5,454.5C 191.5,453.167 191.5,451.833 191.5,450.5C 190.448,450.649 189.448,450.483 188.5,450C 194.686,447.66 194.686,446.326 188.5,446C 191.167,445.667 193.833,445.333 196.5,445C 193.77,443.768 193.937,442.935 197,442.5C 200.458,441.714 203.958,441.38 207.5,441.5C 207.714,439.856 207.38,438.356 206.5,437C 207.742,436.689 208.742,437.189 209.5,438.5C 210.474,436.257 210.808,433.924 210.5,431.5C 209.5,431.5 208.5,431.5 207.5,431.5C 207.331,426.819 206.998,422.152 206.5,417.5C 206.167,413.5 205.833,409.5 205.5,405.5C 200.57,406.648 195.57,407.315 190.5,407.5C 172.882,409.02 155.382,411.353 138,414.5C 136.97,414.836 136.47,415.503 136.5,416.5C 135.732,415.737 135.232,414.737 135,413.5C 134.29,414.973 133.124,415.64 131.5,415.5C 131.5,416.5 131.5,417.5 131.5,418.5C 130.539,416.735 130.205,414.735 130.5,412.5C 131.641,410.333 132.641,408 133.5,405.5C 133.887,407.731 134.053,410.064 134,412.5C 134.333,411.5 134.667,410.5 135,409.5C 140.993,409.426 147.326,409.759 154,410.5C 154.309,409.234 154.809,408.067 155.5,407C 158.606,406.721 161.439,406.888 164,407.5C 164.645,406.354 165.478,405.354 166.5,404.5C 165.498,401.072 166.832,398.905 170.5,398C 169.906,397.536 169.239,397.369 168.5,397.5C 176.656,395.884 184.989,394.55 193.5,393.5C 195.792,393.244 197.959,393.577 200,394.5C 200.388,393.572 201.055,392.905 202,392.5C 209.951,393.786 218.118,393.786 226.5,392.5C 228.833,392.667 231.167,392.833 233.5,393C 235.052,396.151 236.885,396.318 239,393.5C 239.388,394.428 240.055,395.095 241,395.5C 242.811,394.922 244.645,394.422 246.5,394C 247.38,392.644 247.714,391.144 247.5,389.5C 255.805,388.668 264.138,388.335 272.5,388.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7d696f\",d:\"M 513.5,377.5 C 507.886,388.393 502.553,399.393 497.5,410.5C 496.209,410.263 495.209,410.596 494.5,411.5C 493.12,411.038 492.453,410.038 492.5,408.5C 492.863,404.831 494.196,401.664 496.5,399C 496.167,398.667 495.833,398.333 495.5,398C 497.223,395.057 498.223,391.89 498.5,388.5C 502.048,389.657 504.048,389.657 504.5,388.5C 505.64,387.199 506.973,386.032 508.5,385C 508.043,384.586 507.709,384.086 507.5,383.5C 509.086,381.827 509.753,379.827 509.5,377.5C 510.833,377.5 512.167,377.5 513.5,377.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8e9090\",d:\"M 323.5,401.5 C 322.25,401.423 321.417,400.756 321,399.5C 319.16,401.49 317.993,401.49 317.5,399.5C 319.117,398.962 320.784,398.629 322.5,398.5C 325.214,398.25 327.881,398.083 330.5,398C 329.833,398.333 329.167,398.667 328.5,399C 330.007,399.837 330.507,401.004 330,402.5C 328.025,402.512 325.858,402.178 323.5,401.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c49c82\",d:\"M 114.5,392.5 C 113.328,393.705 111.995,393.705 110.5,392.5C 109.231,394.695 109.231,396.861 110.5,399C 109.09,400.372 107.423,401.205 105.5,401.5C 108.045,399.066 107.379,397.232 103.5,396C 106.009,394.579 108.343,392.912 110.5,391C 109.207,390.51 107.873,390.343 106.5,390.5C 107.167,389.833 107.833,389.167 108.5,388.5C 110.84,387.914 113.007,386.914 115,385.5C 115.232,387.283 114.732,388.95 113.5,390.5C 113.543,391.416 113.876,392.083 114.5,392.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7c6561\",d:\"M 420.5,397.5 C 421.529,398.126 422.529,398.959 423.5,400C 423,400.5 422.5,401 422,401.5C 420.204,400.233 418.371,400.233 416.5,401.5C 415.614,400.675 415.281,399.675 415.5,398.5C 416.93,398.421 418.264,398.754 419.5,399.5C 420.298,399.043 420.631,398.376 420.5,397.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#977e82\",d:\"M 489.5,359.5 C 489.917,362.079 489.25,364.246 487.5,366C 488.051,367.398 488.384,368.732 488.5,370C 487.062,370.219 485.729,370.719 484.5,371.5C 484.709,372.086 485.043,372.586 485.5,373C 484.411,375.851 483.078,378.518 481.5,381C 483.932,382.087 483.598,382.587 480.5,382.5C 480.494,385.85 479.494,388.85 477.5,391.5C 475.308,391.468 472.974,391.302 470.5,391C 473.881,392.339 477.214,393.672 480.5,395C 479.5,395.333 478.5,395.667 477.5,396C 477.262,397.978 475.929,399.645 473.5,401C 474.167,401.333 474.833,401.667 475.5,402C 475.167,403 474.833,404 474.5,405C 475.244,406.039 476.244,406.539 477.5,406.5C 477.5,407.167 477.167,407.5 476.5,407.5C 473.059,406.807 469.725,405.807 466.5,404.5C 466.492,400.364 467.492,396.531 469.5,393C 469.355,392.228 469.022,391.561 468.5,391C 469.136,387.21 469.803,383.377 470.5,379.5C 471.281,380.729 471.781,382.062 472,383.5C 472.402,382.128 472.902,380.795 473.5,379.5C 472.675,378.614 471.675,378.281 470.5,378.5C 471.181,370.123 473.848,362.457 478.5,355.5C 479.096,356.716 479.263,358.049 479,359.5C 479.745,358.01 480.912,357.01 482.5,356.5C 485.034,357.273 487.368,358.273 489.5,359.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bc987c\",d:\"M 99.5,405.5 C 99.5,405.833 99.5,406.167 99.5,406.5C 95.2233,410.312 90.5566,413.645 85.5,416.5C 84.2267,415.923 84.2267,415.257 85.5,414.5C 89.772,412.226 93.772,409.559 97.5,406.5C 96.0521,405.646 94.7187,404.646 93.5,403.5C 90.972,404.517 90.972,405.684 93.5,407C 92.0039,407.507 90.8373,407.007 90,405.5C 89.6667,405.833 89.3333,406.167 89,406.5C 88.4926,405.004 88.9926,403.837 90.5,403C 93.3511,401.777 96.0178,400.277 98.5,398.5C 99.1667,398.833 99.8333,399.167 100.5,399.5C 100.833,398.833 101.167,398.167 101.5,397.5C 101.833,398 102.167,398.5 102.5,399C 101.729,401.267 100.396,403.1 98.5,404.5C 98.6236,405.107 98.9569,405.44 99.5,405.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9b9388\",d:\"M 518.5,400.5 C 517.167,400.167 517.167,399.833 518.5,399.5C 520.829,398.251 522.662,398.918 524,401.5C 525.868,400.328 527.702,400.495 529.5,402C 528.953,402.925 528.287,403.758 527.5,404.5C 524.083,403.072 521.083,401.738 518.5,400.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8e664d\",d:\"M 115.5,394.5 C 115.545,397.077 114.545,399.077 112.5,400.5C 108.147,402.536 103.814,404.536 99.5,406.5C 99.5,406.167 99.5,405.833 99.5,405.5C 101.882,404.649 103.882,403.316 105.5,401.5C 107.423,401.205 109.09,400.372 110.5,399C 109.231,396.861 109.231,394.695 110.5,392.5C 111.995,393.705 113.328,393.705 114.5,392.5C 115.42,391.933 115.754,392.599 115.5,394.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c7c7c9\",d:\"M 312.5,399.5 C 313.931,399.881 314.764,400.881 315,402.5C 315.5,402 316,401.5 316.5,401C 315.288,399.893 315.621,399.393 317.5,399.5C 317.993,401.49 319.16,401.49 321,399.5C 321.417,400.756 322.25,401.423 323.5,401.5C 322.048,402.302 320.382,402.802 318.5,403C 320.813,403.662 323.146,404.162 325.5,404.5C 324.1,405.1 323.1,406.1 322.5,407.5C 321.081,408.451 319.415,408.784 317.5,408.5C 317.707,405.255 316.207,403.255 313,402.5C 312.517,401.552 312.351,400.552 312.5,399.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#87736f\",d:\"M 405.5,399.5 C 408.157,399.162 410.49,399.829 412.5,401.5C 409.472,403.053 406.472,403.386 403.5,402.5C 402.069,401.918 400.736,401.085 399.5,400C 401.679,400.284 403.679,400.117 405.5,399.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#352224\",d:\"M 469.5,428.5 C 469.5,427.833 469.167,427.5 468.5,427.5C 469.739,425.299 471.072,423.132 472.5,421C 471.366,419.984 471.699,419.317 473.5,419C 472.978,418.439 472.645,417.772 472.5,417C 473.75,413.737 475.083,410.57 476.5,407.5C 477.167,407.5 477.5,407.167 477.5,406.5C 478.346,402.473 480.013,398.807 482.5,395.5C 482.985,392.441 482.985,389.274 482.5,386C 484.726,384.176 486.226,382.343 487,380.5C 487.373,378.302 487.873,376.135 488.5,374C 488.355,373.228 488.022,372.561 487.5,372C 488.833,371.667 490.167,371.333 491.5,371C 490.903,369.938 490.57,368.772 490.5,367.5C 491.478,365.223 492.145,362.89 492.5,360.5C 493.978,360.238 495.311,360.571 496.5,361.5C 489.782,380.15 482.948,398.816 476,417.5C 474.56,421.041 473.726,424.708 473.5,428.5C 472.167,428.5 470.833,428.5 469.5,428.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#afa4a2\",d:\"M 255.5,400.5 C 248.773,400.787 242.107,401.621 235.5,403C 236.252,403.671 236.586,404.504 236.5,405.5C 235.652,406.625 234.652,406.625 233.5,405.5C 233.565,405.062 233.399,404.728 233,404.5C 232,405.833 231,407.167 230,408.5C 227.734,404.666 227.067,404.999 228,409.5C 227.333,408.833 226.667,408.167 226,407.5C 224.663,408.765 223.163,409.265 221.5,409C 221.653,407.791 221.986,406.625 222.5,405.5C 223.822,405.33 224.989,405.663 226,406.5C 227,405.167 228,403.833 229,402.5C 229.333,402.833 229.667,403.167 230,403.5C 234.291,401.635 238.791,400.469 243.5,400C 244.191,398.933 244.691,397.766 245,396.5C 245.667,397.833 246.333,397.833 247,396.5C 247.483,397.448 247.649,398.448 247.5,399.5C 249.547,399.489 251.547,399.156 253.5,398.5C 254.713,398.747 255.38,399.414 255.5,400.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bfada6\",d:\"M 277.5,397.5 C 278.467,398.806 279.801,399.473 281.5,399.5C 278.152,401.514 275.486,404.181 273.5,407.5C 270.876,404.353 267.542,403.686 263.5,405.5C 262.808,404.975 262.308,404.308 262,403.5C 261.692,404.308 261.192,404.975 260.5,405.5C 259.289,404.726 259.289,403.893 260.5,403C 257.879,403.548 255.379,404.715 253,406.5C 252.535,405.069 251.701,403.903 250.5,403C 252.175,402.015 253.842,401.181 255.5,400.5C 258.564,400.144 261.231,400.977 263.5,403C 268.895,404.817 271.562,402.984 271.5,397.5C 273.5,397.5 275.5,397.5 277.5,397.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b9a4a8\",d:\"M 459.5,389.5 C 460.002,394.838 460.169,400.172 460,405.5C 459.794,407.936 458.627,409.602 456.5,410.5C 456.557,406.497 455.89,402.33 454.5,398C 455.621,394.627 457.121,391.461 459,388.5C 459.399,388.728 459.565,389.062 459.5,389.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ada3a4\",d:\"M 467.5,382.5 C 467.894,383.967 468.227,385.467 468.5,387C 466.28,395.38 464.78,403.88 464,412.5C 463.667,411.167 463.333,409.833 463,408.5C 462.517,409.448 462.351,410.448 462.5,411.5C 461.566,410.432 461.232,409.099 461.5,407.5C 462.715,403.967 462.715,400.301 461.5,396.5C 463.216,395.426 464.216,393.759 464.5,391.5C 461.869,389.995 462.203,389.329 465.5,389.5C 465.41,386.848 466.076,384.515 467.5,382.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7c757b\",d:\"M 513.5,382.5 C 513.5,382.833 513.5,383.167 513.5,383.5C 511.718,389.671 508.885,395.338 505,400.5C 504.226,402.403 504.56,404.07 506,405.5C 508.323,401.578 508.823,401.912 507.5,406.5C 505.822,408.852 503.489,410.186 500.5,410.5C 497.33,415.005 495.33,420.005 494.5,425.5C 493.39,427.2 492.057,428.534 490.5,429.5C 492.785,422.265 495.618,415.265 499,408.5C 503.608,399.61 508.441,390.943 513.5,382.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e2d9d0\",d:\"M 540.5,393.5 C 540.082,402.151 537.082,409.651 531.5,416C 532.553,417.749 532.22,419.249 530.5,420.5C 528.305,419.392 526.305,419.559 524.5,421C 526.483,422.707 528.483,422.874 530.5,421.5C 531.167,421.5 531.833,421.5 532.5,421.5C 532.527,423.199 533.194,424.533 534.5,425.5C 533.472,425.926 532.139,425.926 530.5,425.5C 530.483,423.972 529.816,423.472 528.5,424C 528.833,424.333 529.167,424.667 529.5,425C 527.954,426.44 527.121,428.273 527,430.5C 523.221,437.793 519.387,444.46 515.5,450.5C 512.092,448.285 508.425,447.618 504.5,448.5C 507.577,450.559 510.91,451.892 514.5,452.5C 512.882,455.805 511.216,459.139 509.5,462.5C 506.097,459.933 502.43,458.933 498.5,459.5C 499.188,454.766 500.855,450.433 503.5,446.5C 503.069,445.707 502.735,444.873 502.5,444C 503.538,439.281 505.538,435.115 508.5,431.5C 506.953,428.692 507.453,426.359 510,424.5C 510.945,424.905 511.612,425.572 512,426.5C 512.278,425.584 512.778,424.918 513.5,424.5C 512.432,423.566 511.099,423.232 509.5,423.5C 509.447,420.939 510.447,418.939 512.5,417.5C 515.505,417.68 518.505,418.68 521.5,420.5C 522.656,419.424 522.489,418.424 521,417.5C 519.391,418.15 517.891,417.65 516.5,416C 515.207,415.51 513.873,415.343 512.5,415.5C 512.172,409.632 514.339,408.299 519,411.5C 520.011,410.663 521.178,410.33 522.5,410.5C 522.351,411.552 522.517,412.552 523,413.5C 523.804,409.705 522.47,408.371 519,409.5C 517.385,408.614 515.885,407.614 514.5,406.5C 514.859,403.763 516.193,401.763 518.5,400.5C 521.083,401.738 524.083,403.072 527.5,404.5C 528.287,403.758 528.953,402.925 529.5,402C 527.702,400.495 525.868,400.328 524,401.5C 522.662,398.918 520.829,398.251 518.5,399.5C 518.539,398.417 518.873,397.417 519.5,396.5C 520.603,396.002 521.603,395.669 522.5,395.5C 521.318,393.015 521.652,390.681 523.5,388.5C 528.999,389.879 534.665,391.546 540.5,393.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a59b93\",d:\"M 524.5,391.5 C 528.71,392.573 532.71,394.239 536.5,396.5C 532.92,397.701 529.253,397.034 525.5,394.5C 524.614,393.675 524.281,392.675 524.5,391.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e2dad9\",d:\"M 255.5,400.5 C 253.842,401.181 252.175,402.015 250.5,403C 251.701,403.903 252.535,405.069 253,406.5C 255.379,404.715 257.879,403.548 260.5,403C 259.289,403.893 259.289,404.726 260.5,405.5C 261.192,404.975 261.692,404.308 262,403.5C 262.308,404.308 262.808,404.975 263.5,405.5C 267.542,403.686 270.876,404.353 273.5,407.5C 274.167,408.167 274.833,408.833 275.5,409.5C 272.617,409.641 269.617,409.975 266.5,410.5C 266.719,406.473 265.552,405.806 263,408.5C 262.667,407.833 262.333,407.167 262,406.5C 258.541,407.133 255.041,407.8 251.5,408.5C 252.109,411.837 253.276,412.17 255,409.5C 257.041,410.423 259.208,410.756 261.5,410.5C 248.299,416.798 234.299,419.965 219.5,420C 217.334,417.515 214.668,417.015 211.5,418.5C 211.5,421.833 211.5,425.167 211.5,428.5C 219.111,428.59 226.777,428.256 234.5,427.5C 234.5,427.833 234.5,428.167 234.5,428.5C 232.833,428.5 231.167,428.5 229.5,428.5C 224.199,429.177 218.866,429.677 213.5,430C 212.62,431.356 212.286,432.856 212.5,434.5C 210.212,427.478 209.212,420.145 209.5,412.5C 211.308,412.509 212.975,412.009 214.5,411C 212.512,410.82 210.512,410.986 208.5,411.5C 208.337,409.143 208.503,406.81 209,404.5C 209.333,406.5 209.667,408.5 210,410.5C 212.381,409.565 214.881,409.232 217.5,409.5C 217.286,407.856 217.62,406.356 218.5,405C 217.833,404.667 217.167,404.333 216.5,404C 218.989,403.059 220.989,403.559 222.5,405.5C 221.986,406.625 221.653,407.791 221.5,409C 223.163,409.265 224.663,408.765 226,407.5C 226.667,408.167 227.333,408.833 228,409.5C 227.067,404.999 227.734,404.666 230,408.5C 231,407.167 232,405.833 233,404.5C 233.399,404.728 233.565,405.062 233.5,405.5C 233.461,406.756 233.961,407.756 235,408.5C 237.49,407.257 239.99,406.09 242.5,405C 240.402,404.322 238.402,404.489 236.5,405.5C 236.586,404.504 236.252,403.671 235.5,403C 242.107,401.621 248.773,400.787 255.5,400.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6c6864\",d:\"M 233.5,405.5 C 234.652,406.625 235.652,406.625 236.5,405.5C 238.402,404.489 240.402,404.322 242.5,405C 239.99,406.09 237.49,407.257 235,408.5C 233.961,407.756 233.461,406.756 233.5,405.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#5a4640\",d:\"M 295.5,380.5 C 294.737,381.268 293.737,381.768 292.5,382C 293.938,382.219 295.271,382.719 296.5,383.5C 289.959,384.796 289.959,385.462 296.5,385.5C 296.216,387.415 296.549,389.081 297.5,390.5C 297.5,391.167 297.5,391.833 297.5,392.5C 296.737,393.268 295.737,393.768 294.5,394C 295.624,394.249 296.624,394.749 297.5,395.5C 293.626,397.002 293.959,397.669 298.5,397.5C 298.5,399.5 298.5,401.5 298.5,403.5C 297.411,405.117 295.744,405.95 293.5,406C 300.078,406.885 300.078,408.052 293.5,409.5C 295.326,409.92 297.326,409.92 299.5,409.5C 299.5,411.5 299.5,413.5 299.5,415.5C 299.119,416.931 298.119,417.764 296.5,418C 301.479,419.11 301.146,420.11 295.5,421C 297.134,421.494 298.801,421.66 300.5,421.5C 300.263,422.791 300.596,423.791 301.5,424.5C 301.5,425.833 301.5,427.167 301.5,428.5C 300.391,429.29 299.058,429.79 297.5,430C 298.938,430.219 300.271,430.719 301.5,431.5C 301.043,432.298 300.376,432.631 299.5,432.5C 298.07,432.421 296.736,432.754 295.5,433.5C 295.684,436.801 295.018,440.134 293.5,443.5C 294.007,440.735 293.34,438.069 291.5,435.5C 288.5,435.5 285.5,435.5 282.5,435.5C 282.579,434.07 282.246,432.736 281.5,431.5C 284.428,430.516 287.428,430.183 290.5,430.5C 290.54,427.119 290.207,423.786 289.5,420.5C 283.739,420.709 283.406,421.542 288.5,423C 286.19,423.497 283.857,423.663 281.5,423.5C 280.167,421.833 280.167,420.167 281.5,418.5C 288.836,421.164 291.169,418.831 288.5,411.5C 285.552,411.223 282.719,411.556 280,412.5C 279.505,410.527 279.338,408.527 279.5,406.5C 282.167,406.5 284.833,406.5 287.5,406.5C 287.74,403.421 287.407,400.421 286.5,397.5C 284.833,396.167 283.167,396.167 281.5,397.5C 283.925,398.649 283.925,399.316 281.5,399.5C 279.801,399.473 278.467,398.806 277.5,397.5C 277.5,396.833 277.5,396.167 277.5,395.5C 280.518,395.296 283.518,394.963 286.5,394.5C 286.682,392.409 286.348,390.409 285.5,388.5C 282.527,387.491 279.527,387.491 276.5,388.5C 276.5,386.833 276.5,385.167 276.5,383.5C 278.167,383.5 279.833,383.5 281.5,383.5C 282.167,383.5 282.5,383.833 282.5,384.5C 279.012,384.899 278.846,385.566 282,386.5C 283.699,386.613 284.866,385.947 285.5,384.5C 286.051,381.193 286.384,377.86 286.5,374.5C 288.857,374.337 291.19,374.503 293.5,375C 290.499,374.906 288.499,376.239 287.5,379C 289.937,380.375 292.603,380.875 295.5,380.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dacecf\",d:\"M 282.5,384.5 C 283.5,384.5 284.5,384.5 285.5,384.5C 284.866,385.947 283.699,386.613 282,386.5C 278.846,385.566 279.012,384.899 282.5,384.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#201e21\",d:\"M 306.5,404.5 C 306.5,405.833 306.5,407.167 306.5,408.5C 302.5,407.167 302.5,405.833 306.5,404.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#897574\",d:\"M 402.5,407.5 C 400.012,409.388 397.012,410.055 393.5,409.5C 392.226,408.811 392.226,407.977 393.5,407C 396.13,406.155 398.464,406.655 400.5,408.5C 401.183,408.137 401.85,407.804 402.5,407.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a6a1a4\",d:\"M 348.5,402.5 C 347.895,404.026 346.729,405.026 345,405.5C 344.667,404.833 344.333,404.167 344,403.5C 341.081,406.213 338.081,406.879 335,405.5C 332.225,406.944 329.392,408.277 326.5,409.5C 325.817,407.824 324.483,407.157 322.5,407.5C 323.1,406.1 324.1,405.1 325.5,404.5C 329.889,404.361 334.056,403.361 338,401.5C 339.085,402.293 340.252,402.96 341.5,403.5C 343.747,402.626 346.08,402.292 348.5,402.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a58e80\",d:\"M 115.5,394.5 C 115.833,394.5 116.167,394.5 116.5,394.5C 116.25,405.783 115.917,416.95 115.5,428C 116.804,428.804 117.471,429.971 117.5,431.5C 117.039,434.013 117.039,436.68 117.5,439.5C 116.811,440.774 115.977,440.774 115,439.5C 114.331,442.028 113.498,442.028 112.5,439.5C 113.689,438.571 115.022,438.238 116.5,438.5C 116.67,437.178 116.337,436.011 115.5,435C 113.893,435.019 112.226,435.185 110.5,435.5C 111.287,433.896 112.62,433.229 114.5,433.5C 114.649,432.448 114.483,431.448 114,430.5C 113,431.833 112,431.833 111,430.5C 110.667,431.167 110.333,431.833 110,432.5C 109.08,432.07 108.247,431.736 107.5,431.5C 108.76,430.618 109.926,429.618 111,428.5C 111.333,428.833 111.667,429.167 112,429.5C 112.645,428.354 113.478,427.354 114.5,426.5C 113.359,425.575 113.359,424.741 114.5,424C 111.854,424.625 109.187,425.291 106.5,426C 109.153,424.345 111.486,422.345 113.5,420C 110.185,420.929 107.019,422.429 104,424.5C 103.308,423.975 102.808,423.308 102.5,422.5C 103.522,421.646 104.355,420.646 105,419.5C 105.333,419.833 105.667,420.167 106,420.5C 108.258,418.57 110.758,417.07 113.5,416C 113.406,414.578 113.072,413.078 112.5,411.5C 111.126,412.711 109.626,413.711 108,414.5C 107.5,414.333 107,414.167 106.5,414C 108.116,413.385 109.449,412.385 110.5,411C 110,410.833 109.5,410.667 109,410.5C 106.374,411.955 103.874,413.622 101.5,415.5C 100.911,413.627 101.578,411.96 103.5,410.5C 106.461,408.436 109.628,406.769 113,405.5C 112.981,403.893 112.815,402.226 112.5,400.5C 114.545,399.077 115.545,397.077 115.5,394.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#61463c\",d:\"M 124.5,380.5 C 127.233,393.591 127.9,406.925 126.5,420.5C 128.379,431.439 129.712,442.439 130.5,453.5C 130.949,455.977 130.283,457.977 128.5,459.5C 127.686,457.234 127.186,454.9 127,452.5C 126.241,450.937 125.074,449.937 123.5,449.5C 122.833,449.5 122.5,449.167 122.5,448.5C 124.379,448.607 124.712,448.107 123.5,447C 125.539,444.615 125.539,442.448 123.5,440.5C 124.872,438.38 124.205,437.38 121.5,437.5C 121.357,435.738 121.691,434.071 122.5,432.5C 121.063,430.979 120.396,429.145 120.5,427C 120.463,419.727 120.629,412.227 121,404.5C 120.014,403.829 118.847,403.829 117.5,404.5C 118.038,397.178 118.371,389.845 118.5,382.5C 120.5,381.833 122.5,381.167 124.5,380.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7e7673\",d:\"M 266.5,410.5 C 264.525,410.178 262.858,410.178 261.5,410.5C 259.208,410.756 257.041,410.423 255,409.5C 253.276,412.17 252.109,411.837 251.5,408.5C 255.041,407.8 258.541,407.133 262,406.5C 262.333,407.167 262.667,407.833 263,408.5C 265.552,405.806 266.719,406.473 266.5,410.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a89b94\",d:\"M 298.5,403.5 C 301.28,404.085 303.946,404.419 306.5,404.5C 302.5,405.833 302.5,407.167 306.5,408.5C 304.393,409.468 302.059,409.802 299.5,409.5C 297.326,409.92 295.326,409.92 293.5,409.5C 300.078,408.052 300.078,406.885 293.5,406C 295.744,405.95 297.411,405.117 298.5,403.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e3dbd3\",d:\"M 559.5,349.5 C 560.66,349.437 561.994,349.77 563.5,350.5C 563.5,352.833 563.5,355.167 563.5,357.5C 562.717,359.076 561.55,360.409 560,361.5C 559.764,363.764 559.264,365.931 558.5,368C 552.464,387.896 546.464,408.063 540.5,428.5C 540.667,429.167 540.833,429.833 541,430.5C 541.671,429.748 542.504,429.414 543.5,429.5C 544.278,430.156 544.944,430.989 545.5,432C 545.167,432.5 544.833,433 544.5,433.5C 542.833,432.833 541.167,432.167 539.5,431.5C 538.738,432.628 538.071,433.795 537.5,435C 540.574,435.958 543.574,437.125 546.5,438.5C 543.525,439.116 540.525,438.783 537.5,437.5C 535.579,441.333 534.246,445.333 533.5,449.5C 534.675,449.281 535.675,449.614 536.5,450.5C 535.349,451.731 534.183,451.731 533,450.5C 531.551,453.732 530.384,457.065 529.5,460.5C 530.806,462.473 532.473,464.139 534.5,465.5C 530.842,464.606 527.175,464.606 523.5,465.5C 523.838,468.157 523.171,470.49 521.5,472.5C 518.379,472.121 515.379,470.788 512.5,468.5C 511.325,468.719 510.325,468.386 509.5,467.5C 509.833,467.167 510.167,466.833 510.5,466.5C 511.995,467.705 513.328,467.705 514.5,466.5C 517.004,467.639 519.67,468.306 522.5,468.5C 522.762,467.022 522.429,465.689 521.5,464.5C 518.984,463.67 516.65,462.67 514.5,461.5C 515.239,461.631 515.906,461.464 516.5,461C 514.717,459.933 514.217,458.433 515,456.5C 520.689,446.455 525.856,436.121 530.5,425.5C 532.139,425.926 533.472,425.926 534.5,425.5C 536.76,426.886 537.594,426.219 537,423.5C 535.67,422.418 534.17,421.751 532.5,421.5C 541.712,405.654 545.045,388.654 542.5,370.5C 543.368,368.603 544.701,367.27 546.5,366.5C 548.934,365.646 548.767,364.646 546,363.5C 544.893,364.712 544.393,364.379 544.5,362.5C 545.525,362.103 545.692,361.437 545,360.5C 544.667,360.833 544.333,361.167 544,361.5C 543.5,360.5 543,359.5 542.5,358.5C 543.788,355.966 543.788,353.466 542.5,351C 543.11,349.053 543.943,347.219 545,345.5C 549.576,347.686 554.41,349.02 559.5,349.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d6d1d1\",d:\"M 282.5,408.5 C 284.199,408.34 285.866,408.506 287.5,409C 285.415,411.139 283.749,410.972 282.5,408.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#775e57\",d:\"M 427.5,407.5 C 429.01,408.728 430.51,408.728 432,407.5C 432.692,408.025 433.192,408.692 433.5,409.5C 431.777,409.591 429.777,409.925 427.5,410.5C 427.5,409.5 427.5,408.5 427.5,407.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6b6663\",d:\"M 247.5,408.5 C 248.404,409.209 248.737,410.209 248.5,411.5C 246.774,411.815 245.107,411.981 243.5,412C 244.22,409.878 245.387,409.378 247,410.5C 247.464,409.906 247.631,409.239 247.5,408.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#947d78\",d:\"M 406.5,404.5 C 407.721,405.028 408.887,405.695 410,406.5C 411.016,405.366 411.683,405.699 412,407.5C 412.779,406.272 413.779,405.272 415,404.5C 416.235,405.615 417.402,405.615 418.5,404.5C 419.506,404.938 419.506,405.604 418.5,406.5C 417.675,407.386 416.675,407.719 415.5,407.5C 415.351,408.552 415.517,409.552 416,410.5C 419.465,407.872 422.965,407.872 426.5,410.5C 423.634,411.208 420.8,411.875 418,412.5C 417.667,412.167 417.333,411.833 417,411.5C 415.057,413.715 413.391,413.715 412,411.5C 411.667,412.167 411.333,412.833 411,413.5C 409.812,412.437 409.312,411.103 409.5,409.5C 407.833,409.5 406.167,409.5 404.5,409.5C 404.365,407.446 405.032,405.779 406.5,404.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#4b2d21\",d:\"M 76.5,409.5 C 78.5595,412.24 80.2262,415.24 81.5,418.5C 79.1468,416.14 77.1468,413.473 75.5,410.5C 75.5,409.833 75.8333,409.5 76.5,409.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c3a1a5\",d:\"M 190.5,407.5 C 187.913,409.332 185.746,410.999 184,412.5C 181.595,411.726 179.095,411.226 176.5,411C 177.696,410.346 177.696,409.846 176.5,409.5C 174.818,412.106 172.651,412.773 170,411.5C 167.528,412.742 165.028,413.908 162.5,415C 175.317,413.788 187.984,413.122 200.5,413C 195.673,413.636 191.006,414.802 186.5,416.5C 183.196,415.614 180.029,415.281 177,415.5C 176.612,416.428 175.945,417.095 175,417.5C 169.564,416.268 164.397,416.935 159.5,419.5C 159.709,420.086 160.043,420.586 160.5,421C 159.216,421.684 158.049,421.517 157,420.5C 155.961,421.244 155.461,422.244 155.5,423.5C 155.167,423.5 154.833,423.5 154.5,423.5C 154.5,422.5 154.5,421.5 154.5,420.5C 152.774,420.185 151.107,420.019 149.5,420C 148.316,421.145 148.316,422.312 149.5,423.5C 145.733,424.795 141.733,425.461 137.5,425.5C 137.492,422.455 137.159,419.455 136.5,416.5C 136.47,415.503 136.97,414.836 138,414.5C 155.382,411.353 172.882,409.02 190.5,407.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b1898c\",d:\"M 206.5,417.5 C 203.31,417.559 200.143,417.893 197,418.5C 195.342,418.325 194.009,417.658 193,416.5C 191.818,418.235 190.151,419.235 188,419.5C 186.348,419.14 184.682,418.807 183,418.5C 181.195,421.039 178.695,422.039 175.5,421.5C 168.76,421.915 162.094,422.581 155.5,423.5C 155.461,422.244 155.961,421.244 157,420.5C 158.049,421.517 159.216,421.684 160.5,421C 160.043,420.586 159.709,420.086 159.5,419.5C 164.397,416.935 169.564,416.268 175,417.5C 175.945,417.095 176.612,416.428 177,415.5C 180.029,415.281 183.196,415.614 186.5,416.5C 191.006,414.802 195.673,413.636 200.5,413C 187.984,413.122 175.317,413.788 162.5,415C 165.028,413.908 167.528,412.742 170,411.5C 172.651,412.773 174.818,412.106 176.5,409.5C 177.696,409.846 177.696,410.346 176.5,411C 179.095,411.226 181.595,411.726 184,412.5C 185.746,410.999 187.913,409.332 190.5,407.5C 195.57,407.315 200.57,406.648 205.5,405.5C 205.833,409.5 206.167,413.5 206.5,417.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#878382\",d:\"M 233.5,409.5 C 235.558,410.933 235.392,412.599 233,414.5C 231.187,414.253 229.353,413.92 227.5,413.5C 228.289,411.512 229.455,411.179 231,412.5C 231.698,411.309 232.531,410.309 233.5,409.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#726e6c\",d:\"M 237.5,410.5 C 243.391,410.605 243.725,411.605 238.5,413.5C 237.614,412.675 237.281,411.675 237.5,410.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#908a8f\",d:\"M 326.5,409.5 C 326.5,410.167 326.5,410.833 326.5,411.5C 324.213,413.66 324.046,415.994 326,418.5C 327.68,417.397 329.18,417.73 330.5,419.5C 333.428,420.484 336.428,420.817 339.5,420.5C 339.5,420.833 339.5,421.167 339.5,421.5C 338.761,421.369 338.094,421.536 337.5,422C 338.883,424.123 340.55,425.123 342.5,425C 339.331,425.997 336.664,425.33 334.5,423C 335.167,422.667 335.833,422.333 336.5,422C 331.795,421.886 327.462,420.719 323.5,418.5C 323.213,415.516 321.546,414.183 318.5,414.5C 318.12,410.843 319.453,409.843 322.5,411.5C 323.867,410.775 325.2,410.108 326.5,409.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#585b61\",d:\"M 483.5,416.5 C 484.038,414.883 484.371,413.216 484.5,411.5C 485.864,409.78 486.864,407.78 487.5,405.5C 488.325,404.614 489.325,404.281 490.5,404.5C 490.69,408.79 489.69,412.79 487.5,416.5C 486.042,417.782 484.708,417.782 483.5,416.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dddcda\",d:\"M 34.5,391.5 C 32.182,392.95 30.182,394.783 28.5,397C 29.2392,401.127 29.7392,405.294 30,409.5C 30.6667,410.833 31.3333,412.167 32,413.5C 32.8928,412.289 33.7261,412.289 34.5,413.5C 33.2889,414.72 33.2889,415.887 34.5,417C 32.0929,419.183 29.7596,421.35 27.5,423.5C 25.6889,424.822 23.6889,425.322 21.5,425C 26.2925,423.228 29.1258,420.061 30,415.5C 28.414,416.376 26.914,417.376 25.5,418.5C 23.7459,417.039 22.5793,414.706 22,411.5C 21.5172,412.448 21.3505,413.448 21.5,414.5C 19.396,414.201 17.396,414.534 15.5,415.5C 14.1092,417.89 12.1092,419.557 9.5,420.5C 8.80762,419.975 8.30762,419.308 8,418.5C 7.48735,423.197 5.48735,424.197 2,421.5C 0.988944,422.056 0.155611,422.722 -0.5,423.5C -0.5,411.5 -0.5,399.5 -0.5,387.5C 0.238911,387.369 0.905578,387.536 1.5,388C 0.332226,389.871 0.832226,391.371 3,392.5C 4.62694,390.688 6.12694,390.521 7.5,392C 5.98415,394.024 4.65082,396.191 3.5,398.5C 3.83333,398.833 4.16667,399.167 4.5,399.5C 5.78987,397.208 7.45654,395.208 9.5,393.5C 10.1667,394.167 10.8333,394.833 11.5,395.5C 13.2821,392.618 15.1154,392.285 17,394.5C 19.0739,392.548 21.2406,390.715 23.5,389C 22.6919,388.692 22.0253,388.192 21.5,387.5C 24.5,385.833 27.5,384.167 30.5,382.5C 32.1176,385.399 33.4509,388.399 34.5,391.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c7c3c0\",d:\"M 34.5,391.5 C 35.1667,391.833 35.8333,392.167 36.5,392.5C 36.1119,394.685 35.1119,396.518 33.5,398C 37.6684,403.022 41.0017,408.522 43.5,414.5C 43.2739,417.249 43.6072,419.916 44.5,422.5C 43.3864,423.776 42.3864,423.776 41.5,422.5C 40.352,421.836 39.0187,421.669 37.5,422C 40.4463,419.851 40.6129,418.018 38,416.5C 34.8722,419.474 31.3722,421.807 27.5,423.5C 29.7596,421.35 32.0929,419.183 34.5,417C 33.2889,415.887 33.2889,414.72 34.5,413.5C 33.7261,412.289 32.8928,412.289 32,413.5C 31.3333,412.167 30.6667,410.833 30,409.5C 29.7392,405.294 29.2392,401.127 28.5,397C 30.182,394.783 32.182,392.95 34.5,391.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7b7172\",d:\"M 221.5,411.5 C 222.688,412.684 223.855,412.684 225,411.5C 225.667,412.833 225.667,414.167 225,415.5C 224.15,414.576 223.15,414.576 222,415.5C 221.055,415.095 220.388,414.428 220,413.5C 219.195,415.901 218.362,415.734 217.5,413C 219.058,412.79 220.391,412.29 221.5,411.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#775f63\",d:\"M 466.5,404.5 C 469.725,405.807 473.059,406.807 476.5,407.5C 475.083,410.57 473.75,413.737 472.5,417C 472.645,417.772 472.978,418.439 473.5,419C 471.699,419.317 471.366,419.984 472.5,421C 471.072,423.132 469.739,425.299 468.5,427.5C 468.167,427.5 467.833,427.5 467.5,427.5C 465.421,427.029 463.421,426.363 461.5,425.5C 461.343,424.127 461.51,422.793 462,421.5C 462.333,422.167 462.667,422.833 463,423.5C 465.319,420.843 468.153,419.009 471.5,418C 469.754,417.529 468.087,416.862 466.5,416C 468.246,415.529 469.913,414.862 471.5,414C 471.91,411.76 471.243,409.593 469.5,407.5C 468.675,406.614 467.675,406.281 466.5,406.5C 466.5,405.833 466.5,405.167 466.5,404.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#efebef\",d:\"M 374.5,380.5 C 375.433,386.805 376.433,393.138 377.5,399.5C 377.5,400.167 377.5,400.833 377.5,401.5C 378.61,408.807 379.61,416.141 380.5,423.5C 381.738,419.689 382.404,419.689 382.5,423.5C 401.431,420.939 420.431,418.939 439.5,417.5C 439.881,418.931 440.881,419.764 442.5,420C 441.833,420.333 441.167,420.667 440.5,421C 444.185,421.914 443.852,422.581 439.5,423C 441.886,423.284 442.552,424.284 441.5,426C 442.793,426.49 444.127,426.657 445.5,426.5C 445.737,427.791 445.404,428.791 444.5,429.5C 444.631,428.761 444.464,428.094 444,427.5C 443.79,429.058 443.29,430.391 442.5,431.5C 442.5,430.167 442.5,428.833 442.5,427.5C 426.164,428.778 409.831,430.111 393.5,431.5C 392.178,431.33 391.011,431.663 390,432.5C 388.13,430.781 385.963,429.781 383.5,429.5C 382.432,428.566 381.099,428.232 379.5,428.5C 376.246,428.794 373.579,430.127 371.5,432.5C 367.05,434.138 362.383,434.971 357.5,435C 355.09,435.057 353.756,436.224 353.5,438.5C 352.842,437.602 352.176,436.602 351.5,435.5C 350.893,435.624 350.56,435.957 350.5,436.5C 347.833,436.5 345.167,436.5 342.5,436.5C 341.325,436.719 340.325,436.386 339.5,435.5C 339.058,434.261 338.391,433.261 337.5,432.5C 336.833,431.167 335.833,430.167 334.5,429.5C 334.179,427.952 333.179,427.285 331.5,427.5C 331.5,426.5 331.5,425.5 331.5,424.5C 329.297,424.065 327.297,424.065 325.5,424.5C 323.282,423.984 321.282,422.984 319.5,421.5C 321.332,420.943 322.665,419.943 323.5,418.5C 327.462,420.719 331.795,421.886 336.5,422C 335.833,422.333 335.167,422.667 334.5,423C 336.664,425.33 339.331,425.997 342.5,425C 340.55,425.123 338.883,424.123 337.5,422C 338.094,421.536 338.761,421.369 339.5,421.5C 343.907,421.289 347.907,419.956 351.5,417.5C 352.086,417.709 352.586,418.043 353,418.5C 353.781,417.056 353.614,415.723 352.5,414.5C 349.898,415.038 347.232,415.038 344.5,414.5C 344.719,415.675 344.386,416.675 343.5,417.5C 342.289,416.726 342.289,415.893 343.5,415C 340.686,414.786 340.02,415.953 341.5,418.5C 340.757,419.182 340.091,419.849 339.5,420.5C 336.428,420.817 333.428,420.484 330.5,419.5C 329.18,417.73 327.68,417.397 326,418.5C 324.046,415.994 324.213,413.66 326.5,411.5C 326.5,410.833 326.5,410.167 326.5,409.5C 329.392,408.277 332.225,406.944 335,405.5C 338.081,406.879 341.081,406.213 344,403.5C 344.333,404.167 344.667,404.833 345,405.5C 346.729,405.026 347.895,404.026 348.5,402.5C 346.08,402.292 343.747,402.626 341.5,403.5C 340.252,402.96 339.085,402.293 338,401.5C 334.056,403.361 329.889,404.361 325.5,404.5C 323.146,404.162 320.813,403.662 318.5,403C 320.382,402.802 322.048,402.302 323.5,401.5C 325.858,402.178 328.025,402.512 330,402.5C 330.507,401.004 330.007,399.837 328.5,399C 329.167,398.667 329.833,398.333 330.5,398C 327.881,398.083 325.214,398.25 322.5,398.5C 320.393,397.532 318.059,397.198 315.5,397.5C 333.608,394.791 351.942,392.791 370.5,391.5C 370.5,388.833 370.5,386.167 370.5,383.5C 371.165,381.302 371.832,378.969 372.5,376.5C 373.308,378.423 373.808,380.423 374,382.5C 374.464,381.906 374.631,381.239 374.5,380.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#89878a\",d:\"M 326.5,411.5 C 329.008,410.525 331.675,410.525 334.5,411.5C 332.854,412.66 331.021,413.327 329,413.5C 327.624,413.316 326.791,412.649 326.5,411.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#848487\",d:\"M 344.5,407.5 C 345.833,407.5 347.167,407.5 348.5,407.5C 348.884,409.665 348.217,411.332 346.5,412.5C 346.167,411.833 345.833,411.167 345.5,410.5C 344.672,411.415 343.672,412.081 342.5,412.5C 340.164,412.76 338.164,412.427 336.5,411.5C 338.012,410.138 339.512,409.804 341,410.5C 341.985,409.186 343.152,408.186 344.5,407.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9b989b\",d:\"M 360.5,406.5 C 361.376,406.369 362.043,406.702 362.5,407.5C 362.038,409.291 360.871,410.291 359,410.5C 357.331,409.834 355.831,409.834 354.5,410.5C 353.713,409.758 353.047,408.925 352.5,408C 355.365,407.817 358.031,407.317 360.5,406.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aaa5a9\",d:\"M 348.5,402.5 C 348.649,401.448 348.483,400.448 348,399.5C 345.932,400.394 343.765,401.06 341.5,401.5C 340.353,401.182 339.519,400.516 339,399.5C 337.43,399.67 335.597,400.003 333.5,400.5C 333.281,399.325 333.614,398.325 334.5,397.5C 336.581,398.035 338.747,398.369 341,398.5C 341.667,395.833 342.333,395.833 343,398.5C 344.333,397.833 345.333,396.833 346,395.5C 348.604,398.165 351.437,398.665 354.5,397C 354.043,396.586 353.709,396.086 353.5,395.5C 356.132,394.743 358.632,394.41 361,394.5C 361.5,395.5 362,396.5 362.5,397.5C 360.887,398.427 359.221,399.261 357.5,400C 359.433,400.251 361.266,400.751 363,401.5C 364.309,399.109 365.309,399.109 366,401.5C 367.153,399.503 368.653,399.17 370.5,400.5C 370.708,404.635 369.041,408.135 365.5,411C 367.313,410.954 368.979,411.12 370.5,411.5C 369.147,412.685 367.98,414.019 367,415.5C 365.413,414.273 364.079,414.606 363,416.5C 361.575,415.788 360.075,415.621 358.5,416C 357.663,414.989 357.33,413.822 357.5,412.5C 363.21,412.129 366.877,409.129 368.5,403.5C 367.167,403.167 365.833,402.833 364.5,402.5C 361.977,404.408 359.31,404.741 356.5,403.5C 355.289,402.28 355.289,401.113 356.5,400C 354.741,399.202 353.074,399.369 351.5,400.5C 352.485,402.098 352.651,403.765 352,405.5C 350.961,404.29 349.794,403.29 348.5,402.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ba9c99\",d:\"M 382.5,410.5 C 382.369,409.761 382.536,409.094 383,408.5C 383.067,411.047 383.901,413.214 385.5,415C 385.043,415.414 384.709,415.914 384.5,416.5C 393.353,417.662 402.02,417.329 410.5,415.5C 420.455,415.264 430.288,414.264 440,412.5C 439.532,404.144 438.532,395.811 437,387.5C 436.346,388.696 435.846,388.696 435.5,387.5C 436.213,385.224 436.713,382.891 437,380.5C 438.836,391.858 440.669,403.191 442.5,414.5C 422.857,416.421 403.191,418.088 383.5,419.5C 383.037,416.518 382.704,413.518 382.5,410.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cdc7c9\",d:\"M 281.5,418.5 C 280.833,418.5 280.167,418.5 279.5,418.5C 278.262,419.412 276.928,419.579 275.5,419C 276.818,415.731 276.818,412.565 275.5,409.5C 274.833,408.833 274.167,408.167 273.5,407.5C 275.486,404.181 278.152,401.514 281.5,399.5C 283.925,399.316 283.925,398.649 281.5,397.5C 283.167,396.167 284.833,396.167 286.5,397.5C 287.407,400.421 287.74,403.421 287.5,406.5C 284.833,406.5 282.167,406.5 279.5,406.5C 279.338,408.527 279.505,410.527 280,412.5C 282.719,411.556 285.552,411.223 288.5,411.5C 291.169,418.831 288.836,421.164 281.5,418.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b2abb1\",d:\"M 339.5,421.5 C 339.5,421.167 339.5,420.833 339.5,420.5C 340.091,419.849 340.757,419.182 341.5,418.5C 340.02,415.953 340.686,414.786 343.5,415C 342.289,415.893 342.289,416.726 343.5,417.5C 344.386,416.675 344.719,415.675 344.5,414.5C 347.232,415.038 349.898,415.038 352.5,414.5C 353.614,415.723 353.781,417.056 353,418.5C 352.586,418.043 352.086,417.709 351.5,417.5C 347.907,419.956 343.907,421.289 339.5,421.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#65595f\",d:\"M 494.5,411.5 C 495.043,411.56 495.376,411.893 495.5,412.5C 491.698,418.726 488.364,425.226 485.5,432C 486.577,432.47 487.577,432.303 488.5,431.5C 487.864,437.452 485.197,442.119 480.5,445.5C 482.172,442.164 483.838,438.83 485.5,435.5C 485.167,435.167 484.833,434.833 484.5,434.5C 483.818,435.243 483.151,435.909 482.5,436.5C 482.672,435.508 482.338,434.842 481.5,434.5C 482.209,433.596 483.209,433.263 484.5,433.5C 485.711,427.052 487.545,420.719 490,414.5C 491.31,413.103 492.81,412.103 494.5,411.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#2f2725\",d:\"M 305.5,415.5 C 307.256,416.552 307.923,418.219 307.5,420.5C 304.869,419.575 304.202,417.909 305.5,415.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d8c6ca\",d:\"M 460.5,388.5 C 461.473,390.948 461.806,393.615 461.5,396.5C 462.715,400.301 462.715,403.967 461.5,407.5C 460.62,409.137 459.954,410.97 459.5,413C 459.645,417.174 460.312,421.34 461.5,425.5C 463.421,426.363 465.421,427.029 467.5,427.5C 467.265,428.097 466.765,428.43 466,428.5C 461.847,427.71 457.68,427.044 453.5,426.5C 454.919,425.549 456.585,425.216 458.5,425.5C 458.351,420.425 457.685,415.425 456.5,410.5C 458.627,409.602 459.794,407.936 460,405.5C 460.169,400.172 460.002,394.838 459.5,389.5C 460.167,389.5 460.5,389.167 460.5,388.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#956d58\",d:\"M 49.5,383.5 C 51.9806,383.323 53.8139,384.323 55,386.5C 56.2421,389.223 56.5754,392.223 56,395.5C 57.8653,397.783 60.032,399.616 62.5,401C 61.6919,401.308 61.0253,401.808 60.5,402.5C 62.4898,402.841 64.4898,403.174 66.5,403.5C 67.4776,403.023 68.3109,402.357 69,401.5C 70.4947,403.11 70.6613,404.776 69.5,406.5C 71.5355,407.885 73.5355,409.218 75.5,410.5C 77.1468,413.473 79.1468,416.14 81.5,418.5C 83.2503,419.659 84.2503,421.326 84.5,423.5C 85.8278,428.165 88.1611,432.165 91.5,435.5C 96.5,444.833 101.5,454.167 106.5,463.5C 106.285,466.966 107.618,469.633 110.5,471.5C 111.48,474.086 111.813,476.753 111.5,479.5C 109.833,479.5 108.167,479.5 106.5,479.5C 105.178,479.67 104.011,479.337 103,478.5C 102,475.5 101,472.5 100,469.5C 97.6717,466.663 95.505,463.663 93.5,460.5C 90.8333,461.833 90.1667,461.167 91.5,458.5C 88.6619,457.488 87.3286,455.488 87.5,452.5C 84.5133,452.578 83.8466,451.411 85.5,449C 84.8957,446.476 84.229,443.976 83.5,441.5C 79.9886,441.087 77.6553,439.254 76.5,436C 75.5,435.667 74.5,435.333 73.5,435C 74.4506,434.282 74.6172,433.449 74,432.5C 69.3351,427.382 65.8351,421.715 63.5,415.5C 62.5,415.5 61.5,415.5 60.5,415.5C 59.9515,413.313 58.7848,412.646 57,413.5C 55.2503,410.754 54.2503,407.754 54,404.5C 50.5452,402.718 48.2118,400.052 47,396.5C 45.1267,397.089 43.46,396.422 42,394.5C 41.1766,390.801 42.6766,388.467 46.5,387.5C 47.3857,386.675 47.719,385.675 47.5,384.5C 48.1667,384.167 48.8333,383.833 49.5,383.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dec3b1\",d:\"M 112.5,400.5 C 112.815,402.226 112.981,403.893 113,405.5C 109.628,406.769 106.461,408.436 103.5,410.5C 101.578,411.96 100.911,413.627 101.5,415.5C 103.874,413.622 106.374,411.955 109,410.5C 109.5,410.667 110,410.833 110.5,411C 109.449,412.385 108.116,413.385 106.5,414C 107,414.167 107.5,414.333 108,414.5C 109.626,413.711 111.126,412.711 112.5,411.5C 113.072,413.078 113.406,414.578 113.5,416C 110.758,417.07 108.258,418.57 106,420.5C 105.667,420.167 105.333,419.833 105,419.5C 104.355,420.646 103.522,421.646 102.5,422.5C 102.808,423.308 103.308,423.975 104,424.5C 107.019,422.429 110.185,420.929 113.5,420C 111.486,422.345 109.153,424.345 106.5,426C 109.187,425.291 111.854,424.625 114.5,424C 113.359,424.741 113.359,425.575 114.5,426.5C 113.478,427.354 112.645,428.354 112,429.5C 111.667,429.167 111.333,428.833 111,428.5C 109.926,429.618 108.76,430.618 107.5,431.5C 108.247,431.736 109.08,432.07 110,432.5C 110.333,431.833 110.667,431.167 111,430.5C 112,431.833 113,431.833 114,430.5C 114.483,431.448 114.649,432.448 114.5,433.5C 112.62,433.229 111.287,433.896 110.5,435.5C 107.726,436.723 105.059,438.223 102.5,440C 103.951,439.737 105.284,439.904 106.5,440.5C 105.757,441.182 105.091,441.849 104.5,442.5C 103.194,442.121 101.861,441.788 100.5,441.5C 100.931,440.707 101.265,439.873 101.5,439C 98.9898,437.707 98.3231,435.874 99.5,433.5C 98.0692,431.536 96.0692,429.369 93.5,427C 97.1417,423.811 98.9751,424.978 99,430.5C 100.745,429.044 102.578,427.711 104.5,426.5C 103.295,424.862 101.962,424.529 100.5,425.5C 98.816,423.87 98.1493,422.203 98.5,420.5C 95.08,421.27 92.9134,423.27 92,426.5C 91.6827,424.699 91.016,424.366 90,425.5C 89.3828,424.551 89.5494,423.718 90.5,423C 86.3499,423.315 84.6832,421.148 85.5,416.5C 90.5566,413.645 95.2233,410.312 99.5,406.5C 103.814,404.536 108.147,402.536 112.5,400.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7c6162\",d:\"M 154.5,423.5 C 152.833,422.167 151.167,422.167 149.5,423.5C 148.316,422.312 148.316,421.145 149.5,420C 151.107,420.019 152.774,420.185 154.5,420.5C 154.5,421.5 154.5,422.5 154.5,423.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b4a59e\",d:\"M 299.5,415.5 C 300.222,415.918 300.722,416.584 301,417.5C 302.33,416.418 303.83,415.751 305.5,415.5C 304.202,417.909 304.869,419.575 307.5,420.5C 305.735,421.461 303.735,421.795 301.5,421.5C 301.5,422.5 301.5,423.5 301.5,424.5C 300.596,423.791 300.263,422.791 300.5,421.5C 298.801,421.66 297.134,421.494 295.5,421C 301.146,420.11 301.479,419.11 296.5,418C 298.119,417.764 299.119,416.931 299.5,415.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#958083\",d:\"M 466.5,406.5 C 467.675,406.281 468.675,406.614 469.5,407.5C 471.243,409.593 471.91,411.76 471.5,414C 469.913,414.862 468.246,415.529 466.5,416C 468.087,416.862 469.754,417.529 471.5,418C 468.153,419.009 465.319,420.843 463,423.5C 462.667,422.833 462.333,422.167 462,421.5C 461.51,422.793 461.343,424.127 461.5,425.5C 460.312,421.34 459.645,417.174 459.5,413C 459.954,410.97 460.62,409.137 461.5,407.5C 461.232,409.099 461.566,410.432 462.5,411.5C 462.714,413.144 462.38,414.644 461.5,416C 462.227,417.399 462.727,418.899 463,420.5C 465.693,416.248 466.859,411.582 466.5,406.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ede8eb\",d:\"M 266.5,410.5 C 269.617,409.975 272.617,409.641 275.5,409.5C 276.818,412.565 276.818,415.731 275.5,419C 276.928,419.579 278.262,419.412 279.5,418.5C 278.198,420.028 276.531,421.028 274.5,421.5C 270.032,422.174 265.532,423.174 261,424.5C 260.329,423.748 259.496,423.414 258.5,423.5C 253.227,424.085 248.06,425.085 243,426.5C 241.602,425.949 240.268,425.616 239,425.5C 237.89,427.037 236.39,427.703 234.5,427.5C 226.777,428.256 219.111,428.59 211.5,428.5C 211.5,425.167 211.5,421.833 211.5,418.5C 214.668,417.015 217.334,417.515 219.5,420C 234.299,419.965 248.299,416.798 261.5,410.5C 262.858,410.178 264.525,410.178 266.5,410.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#726b66\",d:\"M 530.5,420.5 C 530.5,420.833 530.5,421.167 530.5,421.5C 528.483,422.874 526.483,422.707 524.5,421C 526.305,419.559 528.305,419.392 530.5,420.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#988f89\",d:\"M 532.5,421.5 C 534.17,421.751 535.67,422.418 537,423.5C 537.594,426.219 536.76,426.886 534.5,425.5C 533.194,424.533 532.527,423.199 532.5,421.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7d7980\",d:\"M 354.5,420.5 C 356.5,420.5 358.5,420.5 360.5,420.5C 360.649,421.552 360.483,422.552 360,423.5C 358.333,423.167 356.667,422.833 355,422.5C 353.991,423.658 352.658,424.325 351,424.5C 349.128,423.965 347.462,423.965 346,424.5C 345.333,423.833 345.333,423.167 346,422.5C 348.478,421.553 350.812,421.553 353,422.5C 353.717,421.956 354.217,421.289 354.5,420.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#4c3e3c\",d:\"M 130.5,409.5 C 130.5,410.5 130.5,411.5 130.5,412.5C 130.205,414.735 130.539,416.735 131.5,418.5C 131.626,428.398 132.626,438.064 134.5,447.5C 134.5,449.833 134.5,452.167 134.5,454.5C 134.994,457.922 134.661,459.589 133.5,459.5C 132.205,446.447 130.539,433.447 128.5,420.5C 128.294,416.531 128.961,412.865 130.5,409.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#87858a\",d:\"M 331.5,427.5 C 328.402,426.367 325.235,426.367 322,427.5C 321.517,426.552 321.351,425.552 321.5,424.5C 322.833,424.5 324.167,424.5 325.5,424.5C 327.297,424.065 329.297,424.065 331.5,424.5C 331.5,425.5 331.5,426.5 331.5,427.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bcb9b9\",d:\"M 515.5,383.5 C 516.5,383.5 517.5,383.5 518.5,383.5C 520.722,383.178 522.556,383.845 524,385.5C 525.964,383.312 527.464,383.312 528.5,385.5C 528.973,386.906 529.973,387.573 531.5,387.5C 531.435,387.938 531.601,388.272 532,388.5C 534.861,384.277 536.361,384.61 536.5,389.5C 535.448,389.351 534.448,389.517 533.5,390C 534.766,390.309 535.933,390.809 537,391.5C 537.667,388.833 538.333,388.833 539,391.5C 539.278,390.584 539.778,389.918 540.5,389.5C 540.926,390.528 540.926,391.861 540.5,393.5C 534.665,391.546 528.999,389.879 523.5,388.5C 521.652,390.681 521.318,393.015 522.5,395.5C 521.603,395.669 520.603,396.002 519.5,396.5C 518.873,397.417 518.539,398.417 518.5,399.5C 517.167,399.833 517.167,400.167 518.5,400.5C 516.193,401.763 514.859,403.763 514.5,406.5C 512.313,407.049 511.646,408.215 512.5,410C 507.826,418.712 503.159,427.379 498.5,436C 499.672,436.419 500.672,437.085 501.5,438C 499.567,438.251 497.734,438.751 496,439.5C 494.478,441.741 493.145,444.074 492,446.5C 491.28,448.112 491.446,449.612 492.5,451C 490.577,453.353 488.911,455.186 487.5,456.5C 486.833,456.5 486.5,456.167 486.5,455.5C 485.267,454.024 484.267,452.357 483.5,450.5C 483.668,448.829 484.335,447.496 485.5,446.5C 485.897,447.525 486.563,447.692 487.5,447C 488.478,445.025 489.811,443.358 491.5,442C 491.192,440.541 490.525,439.374 489.5,438.5C 490.605,436.847 490.771,435.18 490,433.5C 490.333,433.833 490.667,434.167 491,434.5C 494.026,430.147 496.693,425.48 499,420.5C 502.097,418.344 504.931,415.844 507.5,413C 506.399,410.708 507.232,409.208 510,408.5C 512.136,405.309 512.636,401.975 511.5,398.5C 512.675,398.719 513.675,398.386 514.5,397.5C 515.248,395.668 516.248,394.001 517.5,392.5C 517.023,391.522 516.357,390.689 515.5,390C 516.768,387.837 516.768,385.67 515.5,383.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f4ede9\",d:\"M 43.5,414.5 C 43.8333,414.5 44.1667,414.5 44.5,414.5C 44.945,419.337 46.1117,424.004 48,428.5C 51.7728,436.399 56.2728,443.732 61.5,450.5C 68.4827,460.145 75.816,469.478 83.5,478.5C 86.8024,482.809 90.1357,487.143 93.5,491.5C 101.734,505.323 111.401,517.99 122.5,529.5C 132.396,540.935 140.563,553.602 147,567.5C 149.943,571.057 153.109,574.391 156.5,577.5C 157.914,579.598 157.248,580.598 154.5,580.5C 147.334,570.836 140.668,560.836 134.5,550.5C 128.975,540.973 122.308,532.306 114.5,524.5C 106.821,513.796 99.1545,503.129 91.5,492.5C 80.6116,479.084 69.945,465.417 59.5,451.5C 55.8622,452.541 55.5288,454.208 58.5,456.5C 57.9717,457.847 57.805,459.181 58,460.5C 70.1981,476.936 82.3648,493.269 94.5,509.5C 96.0038,513.35 98.3371,516.683 101.5,519.5C 102.246,520.736 102.579,522.07 102.5,523.5C 102.167,523.5 101.833,523.5 101.5,523.5C 100.525,521.205 99.1921,519.205 97.5,517.5C 92.2947,509.728 86.628,502.395 80.5,495.5C 78.5116,492.872 76.5116,490.205 74.5,487.5C 68.9407,478.594 62.9407,469.927 56.5,461.5C 55.1916,460.374 53.8583,460.374 52.5,461.5C 52.3979,456.556 50.0646,453.056 45.5,451C 46.4506,450.282 46.6172,449.449 46,448.5C 42.2922,447.288 39.7922,444.954 38.5,441.5C 37.6832,439.692 38.3498,438.192 40.5,437C 38.2908,436.043 38.4575,434.876 41,433.5C 41.9025,434.701 43.0692,435.535 44.5,436C 44.1667,436.333 43.8333,436.667 43.5,437C 46.0492,439.398 48.3826,442.065 50.5,445C 51.4491,445.617 52.2825,445.451 53,444.5C 50.1662,438.02 47.3329,431.853 44.5,426C 39.72,427.565 35.0533,428.899 30.5,430C 27.453,432.022 25.7863,434.855 25.5,438.5C 26.42,444.415 27.7533,450.415 29.5,456.5C 29.8333,459.833 30.1667,463.167 30.5,466.5C 30.5,467.167 30.1667,467.5 29.5,467.5C 28.596,466.791 28.2627,465.791 28.5,464.5C 25.059,464.301 21.7256,464.801 18.5,466C 13.3062,472.527 7.47287,478.36 1,483.5C 0.502577,486.146 0.33591,488.813 0.5,491.5C 0.784479,493.415 0.451145,495.081 -0.5,496.5C -0.5,491.5 -0.5,486.5 -0.5,481.5C 1.16657,477.347 3.4999,473.514 6.5,470C 12.6583,465.114 19.6583,462.947 27.5,463.5C 27.4496,455.032 26.1163,446.532 23.5,438C 24.0779,436.189 24.5779,434.355 25,432.5C 30.3169,428.125 35.8169,424.792 41.5,422.5C 42.3864,423.776 43.3864,423.776 44.5,422.5C 43.6072,419.916 43.2739,417.249 43.5,414.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d5d0d1\",d:\"M 282.5,435.5 C 281.395,437.153 281.229,438.82 282,440.5C 280.951,441.517 279.784,441.684 278.5,441C 278.308,438.6 278.641,436.1 279.5,433.5C 279.54,430.012 280.207,426.679 281.5,423.5C 283.857,423.663 286.19,423.497 288.5,423C 283.406,421.542 283.739,420.709 289.5,420.5C 290.207,423.786 290.54,427.119 290.5,430.5C 287.428,430.183 284.428,430.516 281.5,431.5C 282.246,432.736 282.579,434.07 282.5,435.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#35262b\",d:\"M 519.5,369.5 C 517.774,373.953 515.774,378.286 513.5,382.5C 508.441,390.943 503.608,399.61 499,408.5C 495.618,415.265 492.785,422.265 490.5,429.5C 489.5,429.833 488.833,430.5 488.5,431.5C 487.577,432.303 486.577,432.47 485.5,432C 488.364,425.226 491.698,418.726 495.5,412.5C 495.376,411.893 495.043,411.56 494.5,411.5C 495.209,410.596 496.209,410.263 497.5,410.5C 502.553,399.393 507.886,388.393 513.5,377.5C 513.167,376.833 512.833,376.167 512.5,375.5C 513.496,375.586 514.329,375.252 515,374.5C 516.377,371.982 517.877,370.316 519.5,369.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d6d5d4\",d:\"M 27.5,423.5 C 31.3722,421.807 34.8722,419.474 38,416.5C 40.6129,418.018 40.4463,419.851 37.5,422C 39.0187,421.669 40.352,421.836 41.5,422.5C 35.8169,424.792 30.3169,428.125 25,432.5C 24.5779,434.355 24.0779,436.189 23.5,438C 26.1163,446.532 27.4496,455.032 27.5,463.5C 19.6583,462.947 12.6583,465.114 6.5,470C 3.4999,473.514 1.16657,477.347 -0.5,481.5C -0.5,462.167 -0.5,442.833 -0.5,423.5C 0.155611,422.722 0.988944,422.056 2,421.5C 5.48735,424.197 7.48735,423.197 8,418.5C 8.30762,419.308 8.80762,419.975 9.5,420.5C 12.1092,419.557 14.1092,417.89 15.5,415.5C 17.396,414.534 19.396,414.201 21.5,414.5C 21.3505,413.448 21.5172,412.448 22,411.5C 22.5793,414.706 23.7459,417.039 25.5,418.5C 26.914,417.376 28.414,416.376 30,415.5C 29.1258,420.061 26.2925,423.228 21.5,425C 23.6889,425.322 25.6889,424.822 27.5,423.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#462c1f\",d:\"M 84.5,423.5 C 87.8389,426.835 90.1722,430.835 91.5,435.5C 88.1611,432.165 85.8278,428.165 84.5,423.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bc848a\",d:\"M 274.5,421.5 C 276.124,421.36 277.29,422.027 278,423.5C 278.821,426.554 278.655,429.554 277.5,432.5C 275.998,431.917 274.665,431.084 273.5,430C 273.833,429.667 274.167,429.333 274.5,429C 269.845,428.501 265.179,428.334 260.5,428.5C 259.402,427.603 259.402,426.77 260.5,426C 259.256,425.544 258.423,426.044 258,427.5C 257.722,426.584 257.222,425.918 256.5,425.5C 257.167,424.833 257.833,424.167 258.5,423.5C 259.496,423.414 260.329,423.748 261,424.5C 265.532,423.174 270.032,422.174 274.5,421.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#939193\",d:\"M 513.5,383.5 C 514.167,383.5 514.833,383.5 515.5,383.5C 516.768,385.67 516.768,387.837 515.5,390C 516.357,390.689 517.023,391.522 517.5,392.5C 516.248,394.001 515.248,395.668 514.5,397.5C 513.675,398.386 512.675,398.719 511.5,398.5C 512.636,401.975 512.136,405.309 510,408.5C 507.232,409.208 506.399,410.708 507.5,413C 504.931,415.844 502.097,418.344 499,420.5C 496.693,425.48 494.026,430.147 491,434.5C 490.667,434.167 490.333,433.833 490,433.5C 490.771,435.18 490.605,436.847 489.5,438.5C 487.229,440.612 485.896,443.279 485.5,446.5C 484.335,447.496 483.668,448.829 483.5,450.5C 484.267,452.357 485.267,454.024 486.5,455.5C 486.167,455.5 485.833,455.5 485.5,455.5C 484.71,454.599 483.71,453.932 482.5,453.5C 482.5,453.167 482.5,452.833 482.5,452.5C 481.286,451.374 480.286,450.041 479.5,448.5C 479.685,447.416 480.018,446.416 480.5,445.5C 485.197,442.119 487.864,437.452 488.5,431.5C 488.833,430.5 489.5,429.833 490.5,429.5C 492.057,428.534 493.39,427.2 494.5,425.5C 495.33,420.005 497.33,415.005 500.5,410.5C 503.489,410.186 505.822,408.852 507.5,406.5C 508.823,401.912 508.323,401.578 506,405.5C 504.56,404.07 504.226,402.403 505,400.5C 508.885,395.338 511.718,389.671 513.5,383.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#857e70\",d:\"M 513.5,424.5 C 516.014,424.754 518.348,425.587 520.5,427C 519.874,427.75 519.374,428.584 519,429.5C 517.829,428.107 516.329,427.273 514.5,427C 513.748,426.329 513.414,425.496 513.5,424.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b4a6a6\",d:\"M 44.5,414.5 C 48.1862,422.226 51.6862,430.226 55,438.5C 60.5391,440.83 62.7058,444.83 61.5,450.5C 56.2728,443.732 51.7728,436.399 48,428.5C 46.1117,424.004 44.945,419.337 44.5,414.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e2d4ce\",d:\"M 206.5,417.5 C 206.998,422.152 207.331,426.819 207.5,431.5C 207.773,433.451 207.107,434.951 205.5,436C 202.05,437.429 198.717,437.595 195.5,436.5C 195.783,435.784 196.116,434.951 196.5,434C 194.633,433.289 193.133,433.789 192,435.5C 190.841,434.434 190.008,434.767 189.5,436.5C 188.849,437.091 188.182,437.757 187.5,438.5C 186.893,438.376 186.56,438.043 186.5,437.5C 187.404,436.791 187.737,435.791 187.5,434.5C 187.179,432.952 186.179,432.285 184.5,432.5C 184.729,430.567 185.562,428.9 187,427.5C 190.207,430.15 190.707,429.984 188.5,427C 185.037,426.571 181.37,427.071 177.5,428.5C 176.833,428.167 176.167,427.833 175.5,427.5C 164.03,430.011 153.03,431.677 142.5,432.5C 137.783,435.701 136.283,434.367 138,428.5C 139.251,431.816 140.918,432.15 143,429.5C 143.333,430.167 143.667,430.833 144,431.5C 153.749,429.762 163.583,428.262 173.5,427C 175.192,425.599 175.859,423.766 175.5,421.5C 178.695,422.039 181.195,421.039 183,418.5C 184.682,418.807 186.348,419.14 188,419.5C 190.151,419.235 191.818,418.235 193,416.5C 194.009,417.658 195.342,418.325 197,418.5C 200.143,417.893 203.31,417.559 206.5,417.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b4a89f\",d:\"M 307.5,427.5 C 305.568,428.976 305.235,430.643 306.5,432.5C 305.432,433.434 304.099,433.768 302.5,433.5C 302.5,434.5 302.5,435.5 302.5,436.5C 301.659,435.074 300.659,433.74 299.5,432.5C 300.376,432.631 301.043,432.298 301.5,431.5C 300.271,430.719 298.938,430.219 297.5,430C 299.058,429.79 300.391,429.29 301.5,428.5C 303.5,428.167 305.5,427.833 307.5,427.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#90797e\",d:\"M 445.5,426.5 C 448.167,426.5 450.833,426.5 453.5,426.5C 457.68,427.044 461.847,427.71 466,428.5C 466.765,428.43 467.265,428.097 467.5,427.5C 467.833,427.5 468.167,427.5 468.5,427.5C 469.167,427.5 469.5,427.833 469.5,428.5C 469.5,428.833 469.5,429.167 469.5,429.5C 467.78,430.751 467.447,432.251 468.5,434C 467.552,434.483 466.552,434.649 465.5,434.5C 465.33,435.822 465.663,436.989 466.5,438C 465.257,439.154 464.257,440.488 463.5,442C 463.5,444 463.5,446 463.5,448C 461.345,450.492 460.011,452.992 459.5,455.5C 454.96,453.709 450.293,452.209 445.5,451C 444.027,450.29 443.36,449.124 443.5,447.5C 447.449,447.307 447.449,446.807 443.5,446C 447.025,445.821 450.359,445.321 453.5,444.5C 454.376,444.631 455.043,444.298 455.5,443.5C 454.333,443.167 453.167,442.833 452,442.5C 449.107,443.39 446.274,443.39 443.5,442.5C 442.047,440.356 442.38,438.523 444.5,437C 448.414,436.041 452.081,434.541 455.5,432.5C 455,432.167 454.5,431.833 454,431.5C 450.832,433.223 447.498,434.557 444,435.5C 444.135,433.575 444.302,431.575 444.5,429.5C 445.404,428.791 445.737,427.791 445.5,426.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7d6863\",d:\"M 37.5,391.5 C 37.3832,393.484 38.0499,395.15 39.5,396.5C 36.7709,398.367 37.1043,399.367 40.5,399.5C 40.3184,401.591 40.6518,403.591 41.5,405.5C 42.2739,406.711 43.1072,406.711 44,405.5C 49.9401,415.437 56.2734,425.104 63,434.5C 63.3333,436.5 63.6667,438.5 64,440.5C 66.0048,439.968 67.1714,440.968 67.5,443.5C 65.7428,444.292 64.4095,445.625 63.5,447.5C 66.9533,452.76 70.7866,457.76 75,462.5C 76.6139,468.111 79.7806,472.611 84.5,476C 83.7476,476.671 83.4142,477.504 83.5,478.5C 75.816,469.478 68.4827,460.145 61.5,450.5C 62.7058,444.83 60.5391,440.83 55,438.5C 51.6862,430.226 48.1862,422.226 44.5,414.5C 44.1667,414.5 43.8333,414.5 43.5,414.5C 41.0017,408.522 37.6684,403.022 33.5,398C 35.1119,396.518 36.1119,394.685 36.5,392.5C 36.5,391.833 36.8333,391.5 37.5,391.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#806c6c\",d:\"M 442.5,431.5 C 441.566,432.568 441.232,433.901 441.5,435.5C 440.325,435.719 439.325,435.386 438.5,434.5C 439.246,433.264 439.579,431.93 439.5,430.5C 436.15,430.335 432.817,430.502 429.5,431C 428.333,431.5 427.5,432.333 427,433.5C 426.612,432.572 425.945,431.905 425,431.5C 423.5,432 422,432.5 420.5,433C 421.993,434.156 421.826,434.99 420,435.5C 416.396,433.405 412.563,432.572 408.5,433C 409.696,433.654 409.696,434.154 408.5,434.5C 402.896,433.546 397.229,433.212 391.5,433.5C 392.167,432.833 392.833,432.167 393.5,431.5C 409.831,430.111 426.164,428.778 442.5,427.5C 442.5,428.833 442.5,430.167 442.5,431.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#816d61\",d:\"M 122.5,448.5 C 118.121,434.189 116.454,419.522 117.5,404.5C 118.847,403.829 120.014,403.829 121,404.5C 120.629,412.227 120.463,419.727 120.5,427C 120.396,429.145 121.063,430.979 122.5,432.5C 121.691,434.071 121.357,435.738 121.5,437.5C 124.205,437.38 124.872,438.38 123.5,440.5C 125.539,442.448 125.539,444.615 123.5,447C 124.712,448.107 124.379,448.607 122.5,448.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ece2e0\",d:\"M 136.5,416.5 C 137.159,419.455 137.492,422.455 137.5,425.5C 141.733,425.461 145.733,424.795 149.5,423.5C 151.167,422.167 152.833,422.167 154.5,423.5C 154.833,423.5 155.167,423.5 155.5,423.5C 162.094,422.581 168.76,421.915 175.5,421.5C 175.859,423.766 175.192,425.599 173.5,427C 163.583,428.262 153.749,429.762 144,431.5C 143.667,430.833 143.333,430.167 143,429.5C 140.918,432.15 139.251,431.816 138,428.5C 136.283,434.367 137.783,435.701 142.5,432.5C 153.03,431.677 164.03,430.011 175.5,427.5C 176.167,427.833 176.833,428.167 177.5,428.5C 181.37,427.071 185.037,426.571 188.5,427C 190.707,429.984 190.207,430.15 187,427.5C 185.562,428.9 184.729,430.567 184.5,432.5C 186.179,432.285 187.179,432.952 187.5,434.5C 184.236,435.324 180.902,435.658 177.5,435.5C 176.143,436.59 175.143,437.924 174.5,439.5C 173.617,436.327 171.784,435.994 169,438.5C 166.092,437.715 163.258,437.381 160.5,437.5C 159.374,438.808 159.374,440.142 160.5,441.5C 154.076,443.219 147.409,444.219 140.5,444.5C 140.662,446.527 140.495,448.527 140,450.5C 139.517,449.552 139.351,448.552 139.5,447.5C 138.167,447.5 136.833,447.5 135.5,447.5C 135.167,443.5 134.833,443.5 134.5,447.5C 132.626,438.064 131.626,428.398 131.5,418.5C 131.5,417.5 131.5,416.5 131.5,415.5C 133.124,415.64 134.29,414.973 135,413.5C 135.232,414.737 135.732,415.737 136.5,416.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7c7975\",d:\"M 179.5,429.5 C 180.552,429.351 181.552,429.517 182.5,430C 181.167,430.667 181.167,431.333 182.5,432C 180.782,432.346 179.115,432.846 177.5,433.5C 176.614,432.675 176.281,431.675 176.5,430.5C 177.791,430.737 178.791,430.404 179.5,429.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9d7979\",d:\"M 246.5,436.5 C 245.738,438.262 244.404,439.262 242.5,439.5C 244.002,437.825 245.335,435.992 246.5,434C 246,433.5 245.5,433 245,432.5C 243.647,433.685 242.48,435.019 241.5,436.5C 240.281,435.737 239.281,434.737 238.5,433.5C 238.167,434 237.833,434.5 237.5,435C 238.315,436.643 239.315,438.143 240.5,439.5C 239.391,439.443 238.391,439.11 237.5,438.5C 236.223,436.852 235.223,435.018 234.5,433C 228.614,432.783 222.948,432.616 217.5,432.5C 217.808,431.692 218.308,431.025 219,430.5C 221.82,430.383 224.487,430.717 227,431.5C 227.698,430.309 228.531,429.309 229.5,428.5C 231.167,428.5 232.833,428.5 234.5,428.5C 235.688,429.048 236.855,429.381 238,429.5C 239.466,427.675 241.299,427.175 243.5,428C 244.158,429.905 245.325,431.405 247,432.5C 247.579,433.928 247.412,435.262 246.5,436.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#655a56\",d:\"M 307.5,427.5 C 309.256,428.552 309.923,430.219 309.5,432.5C 308.5,432.5 307.5,432.5 306.5,432.5C 305.235,430.643 305.568,428.976 307.5,427.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ece9ed\",d:\"M 298.5,397.5 C 299.5,398.833 300.5,398.833 301.5,397.5C 303.518,398.047 305.351,399.047 307,400.5C 308.699,399.594 310.533,399.261 312.5,399.5C 312.351,400.552 312.517,401.552 313,402.5C 316.207,403.255 317.707,405.255 317.5,408.5C 319.415,408.784 321.081,408.451 322.5,407.5C 324.483,407.157 325.817,407.824 326.5,409.5C 325.2,410.108 323.867,410.775 322.5,411.5C 319.453,409.843 318.12,410.843 318.5,414.5C 321.546,414.183 323.213,415.516 323.5,418.5C 322.665,419.943 321.332,420.943 319.5,421.5C 321.282,422.984 323.282,423.984 325.5,424.5C 324.167,424.5 322.833,424.5 321.5,424.5C 321.351,425.552 321.517,426.552 322,427.5C 325.235,426.367 328.402,426.367 331.5,427.5C 333.179,427.285 334.179,427.952 334.5,429.5C 333.523,432.287 333.19,435.287 333.5,438.5C 323.146,438.873 312.813,439.539 302.5,440.5C 302.5,439.167 302.5,437.833 302.5,436.5C 302.5,435.5 302.5,434.5 302.5,433.5C 304.099,433.768 305.432,433.434 306.5,432.5C 307.5,432.5 308.5,432.5 309.5,432.5C 309.923,430.219 309.256,428.552 307.5,427.5C 305.5,427.833 303.5,428.167 301.5,428.5C 301.5,427.167 301.5,425.833 301.5,424.5C 301.5,423.5 301.5,422.5 301.5,421.5C 303.735,421.795 305.735,421.461 307.5,420.5C 307.923,418.219 307.256,416.552 305.5,415.5C 303.83,415.751 302.33,416.418 301,417.5C 300.722,416.584 300.222,415.918 299.5,415.5C 299.5,413.5 299.5,411.5 299.5,409.5C 302.059,409.802 304.393,409.468 306.5,408.5C 306.5,407.167 306.5,405.833 306.5,404.5C 303.946,404.419 301.28,404.085 298.5,403.5C 298.5,401.5 298.5,399.5 298.5,397.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8e8484\",d:\"M 169.5,430.5 C 170.5,430.5 171.5,430.5 172.5,430.5C 172.67,431.822 172.337,432.989 171.5,434C 168.806,435.488 166.472,435.321 164.5,433.5C 166.019,430.936 167.519,430.936 169,433.5C 169.483,432.552 169.649,431.552 169.5,430.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c9a4a7\",d:\"M 279.5,418.5 C 280.167,418.5 280.833,418.5 281.5,418.5C 280.167,420.167 280.167,421.833 281.5,423.5C 280.207,426.679 279.54,430.012 279.5,433.5C 268.48,434.302 257.48,435.302 246.5,436.5C 247.412,435.262 247.579,433.928 247,432.5C 245.325,431.405 244.158,429.905 243.5,428C 241.299,427.175 239.466,427.675 238,429.5C 236.855,429.381 235.688,429.048 234.5,428.5C 234.5,428.167 234.5,427.833 234.5,427.5C 236.39,427.703 237.89,427.037 239,425.5C 240.268,425.616 241.602,425.949 243,426.5C 248.06,425.085 253.227,424.085 258.5,423.5C 257.833,424.167 257.167,424.833 256.5,425.5C 254.417,426.029 252.583,427.029 251,428.5C 249.817,427.269 248.651,427.269 247.5,428.5C 252.126,427.917 256.459,427.917 260.5,428.5C 265.179,428.334 269.845,428.501 274.5,429C 274.167,429.333 273.833,429.667 273.5,430C 274.665,431.084 275.998,431.917 277.5,432.5C 278.655,429.554 278.821,426.554 278,423.5C 277.29,422.027 276.124,421.36 274.5,421.5C 276.531,421.028 278.198,420.028 279.5,418.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#794b4f\",d:\"M 256.5,425.5 C 257.222,425.918 257.722,426.584 258,427.5C 258.423,426.044 259.256,425.544 260.5,426C 259.402,426.77 259.402,427.603 260.5,428.5C 256.459,427.917 252.126,427.917 247.5,428.5C 248.651,427.269 249.817,427.269 251,428.5C 252.583,427.029 254.417,426.029 256.5,425.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ede6e2\",d:\"M 285.5,432.5 C 287.527,432.338 289.527,432.505 291.5,433C 289.121,435.142 287.121,434.976 285.5,432.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dad5d5\",d:\"M 38.5,441.5 C 37.8333,441.5 37.1667,441.5 36.5,441.5C 36.631,440.761 36.4643,440.094 36,439.5C 35.1482,440.571 34.3149,441.571 33.5,442.5C 31.5767,442.795 29.9101,443.628 28.5,445C 29.1984,445.971 29.1984,447.137 28.5,448.5C 28.9186,449.672 29.5853,450.672 30.5,451.5C 29.6906,453.071 29.3573,454.738 29.5,456.5C 27.7533,450.415 26.42,444.415 25.5,438.5C 25.7863,434.855 27.453,432.022 30.5,430C 35.0533,428.899 39.72,427.565 44.5,426C 47.3329,431.853 50.1662,438.02 53,444.5C 52.2825,445.451 51.4491,445.617 50.5,445C 48.3826,442.065 46.0492,439.398 43.5,437C 43.8333,436.667 44.1667,436.333 44.5,436C 43.0692,435.535 41.9025,434.701 41,433.5C 38.4575,434.876 38.2908,436.043 40.5,437C 38.3498,438.192 37.6832,439.692 38.5,441.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7f7a75\",d:\"M 150.5,432.5 C 151.774,434.329 153.274,434.662 155,433.5C 156.169,434.009 157.002,434.842 157.5,436C 155.888,436.72 154.388,436.554 153,435.5C 152.667,436.167 152.333,436.833 152,437.5C 150.989,436.663 149.822,436.33 148.5,436.5C 148.527,434.801 149.194,433.467 150.5,432.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#baaba7\",d:\"M 442.5,431.5 C 442.675,433.621 442.341,435.621 441.5,437.5C 441.167,437.5 440.833,437.5 440.5,437.5C 424.476,436.868 408.476,436.535 392.5,436.5C 392.443,435.391 392.11,434.391 391.5,433.5C 397.229,433.212 402.896,433.546 408.5,434.5C 409.696,434.154 409.696,433.654 408.5,433C 412.563,432.572 416.396,433.405 420,435.5C 421.826,434.99 421.993,434.156 420.5,433C 422,432.5 423.5,432 425,431.5C 425.945,431.905 426.612,432.572 427,433.5C 427.5,432.333 428.333,431.5 429.5,431C 432.817,430.502 436.15,430.335 439.5,430.5C 439.579,431.93 439.246,433.264 438.5,434.5C 439.325,435.386 440.325,435.719 441.5,435.5C 441.232,433.901 441.566,432.568 442.5,431.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#978d83\",d:\"M 509.5,431.5 C 513.184,433.67 517.184,434.67 521.5,434.5C 521.058,438.847 520.225,439.18 519,435.5C 517.691,437.891 516.691,437.891 516,435.5C 515.586,435.957 515.086,436.291 514.5,436.5C 513.15,435.05 511.484,434.383 509.5,434.5C 509.5,433.5 509.5,432.5 509.5,431.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#746d6b\",d:\"M 195.5,436.5 C 193.589,436.991 191.589,436.991 189.5,436.5C 190.008,434.767 190.841,434.434 192,435.5C 193.133,433.789 194.633,433.289 196.5,434C 196.116,434.951 195.783,435.784 195.5,436.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d1babb\",d:\"M 242.5,439.5 C 241.833,440.833 241.167,440.833 240.5,439.5C 239.315,438.143 238.315,436.643 237.5,435C 237.833,434.5 238.167,434 238.5,433.5C 239.281,434.737 240.281,435.737 241.5,436.5C 242.48,435.019 243.647,433.685 245,432.5C 245.5,433 246,433.5 246.5,434C 245.335,435.992 244.002,437.825 242.5,439.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8a8785\",d:\"M 187.5,434.5 C 187.737,435.791 187.404,436.791 186.5,437.5C 186.565,437.062 186.399,436.728 186,436.5C 185.683,438.301 185.016,438.634 184,437.5C 182.215,438.24 180.382,438.907 178.5,439.5C 177.571,438.311 177.238,436.978 177.5,435.5C 180.902,435.658 184.236,435.324 187.5,434.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c6a2a5\",d:\"M 229.5,428.5 C 228.531,429.309 227.698,430.309 227,431.5C 224.487,430.717 221.82,430.383 219,430.5C 218.308,431.025 217.808,431.692 217.5,432.5C 222.948,432.616 228.614,432.783 234.5,433C 235.223,435.018 236.223,436.852 237.5,438.5C 235.833,438.5 234.167,438.5 232.5,438.5C 232.657,437.127 232.49,435.793 232,434.5C 231.309,436.891 230.309,436.891 229,434.5C 228.259,435.641 227.425,435.641 226.5,434.5C 225.386,435.723 225.219,437.056 226,438.5C 226.691,436.109 227.691,436.109 229,438.5C 229.977,437.226 230.811,437.226 231.5,438.5C 225.254,439.818 218.921,440.818 212.5,441.5C 212.5,439.167 212.5,436.833 212.5,434.5C 212.286,432.856 212.62,431.356 213.5,430C 218.866,429.677 224.199,429.177 229.5,428.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7e595a\",d:\"M 232.5,438.5 C 232.167,438.5 231.833,438.5 231.5,438.5C 230.811,437.226 229.977,437.226 229,438.5C 227.691,436.109 226.691,436.109 226,438.5C 225.219,437.056 225.386,435.723 226.5,434.5C 227.425,435.641 228.259,435.641 229,434.5C 230.309,436.891 231.309,436.891 232,434.5C 232.49,435.793 232.657,437.127 232.5,438.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#462c26\",d:\"M 480.5,445.5 C 480.018,446.416 479.685,447.416 479.5,448.5C 480.286,450.041 481.286,451.374 482.5,452.5C 480.152,452.408 478.486,451.408 477.5,449.5C 478.922,445.003 480.589,440.67 482.5,436.5C 483.151,435.909 483.818,435.243 484.5,434.5C 484.833,434.833 485.167,435.167 485.5,435.5C 483.838,438.83 482.172,442.164 480.5,445.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ebebf0\",d:\"M 563.5,429.5 C 563.5,452.833 563.5,476.167 563.5,499.5C 560.597,499.093 557.597,498.926 554.5,499C 553.151,498.228 552.318,497.061 552,495.5C 551.667,496.167 551.333,496.833 551,497.5C 547.299,495.78 543.299,494.78 539,494.5C 537.726,495.535 536.56,496.702 535.5,498C 537.645,498.743 537.811,499.576 536,500.5C 529.384,499.277 522.884,497.611 516.5,495.5C 512.968,505.429 509.635,515.429 506.5,525.5C 504.708,532.879 502.708,540.212 500.5,547.5C 499.949,543.592 500.616,539.758 502.5,536C 501.968,533.98 500.635,533.147 498.5,533.5C 498.66,535.199 498.494,536.866 498,538.5C 496.807,537.022 496.307,535.688 496.5,534.5C 495.719,535.729 495.219,537.062 495,538.5C 493.329,536.724 491.496,536.39 489.5,537.5C 489.891,536.282 489.224,535.448 487.5,535C 489.179,534.605 490.845,534.772 492.5,535.5C 494.703,534.647 496.036,533.647 496.5,532.5C 494.498,530.73 492.164,529.397 489.5,528.5C 489.389,527.883 489.056,527.383 488.5,527C 489.833,526.667 491.167,526.333 492.5,526C 487.637,523.934 482.637,522.268 477.5,521C 478.416,520.626 479.25,520.126 480,519.5C 486.41,523.64 493.244,524.806 500.5,523C 499.263,522.768 498.263,522.268 497.5,521.5C 498.492,521.672 499.158,521.338 499.5,520.5C 500.267,519.828 500.934,518.995 501.5,518C 497.757,516.864 494.09,515.53 490.5,514C 494.194,513.722 497.861,513.722 501.5,514C 500.421,511.957 498.754,510.624 496.5,510C 498.167,509.667 499.833,509.333 501.5,509C 499.697,508.363 498.364,507.197 497.5,505.5C 496.482,506.193 495.482,506.859 494.5,507.5C 494.047,506.542 493.381,505.708 492.5,505C 493.167,504.667 493.833,504.333 494.5,504C 490.907,503.316 490.573,501.816 493.5,499.5C 494.675,500.855 495.675,500.688 496.5,499C 493.332,498.418 492.999,497.418 495.5,496C 495.167,495.667 494.833,495.333 494.5,495C 495.618,493.926 496.618,492.76 497.5,491.5C 500.057,492.82 501.724,491.987 502.5,489C 500.956,488.71 499.623,488.044 498.5,487C 500.443,487.305 502.443,487.305 504.5,487C 501.266,484.012 500.932,480.846 503.5,477.5C 506.361,477.407 509.194,477.407 512,477.5C 512.667,476.833 512.667,476.167 512,475.5C 510.16,476.833 509.66,476.666 510.5,475C 509.289,473.156 507.956,472.322 506.5,472.5C 508.073,470.164 509.406,470.164 510.5,472.5C 511.711,471.726 511.711,470.893 510.5,470C 511.416,469.722 512.082,469.222 512.5,468.5C 515.379,470.788 518.379,472.121 521.5,472.5C 523.171,470.49 523.838,468.157 523.5,465.5C 527.175,464.606 530.842,464.606 534.5,465.5C 532.473,464.139 530.806,462.473 529.5,460.5C 530.384,457.065 531.551,453.732 533,450.5C 534.183,451.731 535.349,451.731 536.5,450.5C 535.675,449.614 534.675,449.281 533.5,449.5C 534.246,445.333 535.579,441.333 537.5,437.5C 540.525,438.783 543.525,439.116 546.5,438.5C 543.574,437.125 540.574,435.958 537.5,435C 538.071,433.795 538.738,432.628 539.5,431.5C 541.167,432.167 542.833,432.833 544.5,433.5C 544.833,433 545.167,432.5 545.5,432C 544.944,430.989 544.278,430.156 543.5,429.5C 544.953,428.175 544.619,427.342 542.5,427C 547.23,427.179 551.897,428.012 556.5,429.5C 558.923,428.553 561.257,428.553 563.5,429.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a5a19b\",d:\"M 174.5,439.5 C 170.02,440.521 165.353,441.187 160.5,441.5C 159.374,440.142 159.374,438.808 160.5,437.5C 163.258,437.381 166.092,437.715 169,438.5C 171.784,435.994 173.617,436.327 174.5,439.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bba79f\",d:\"M 337.5,432.5 C 338.391,433.261 339.058,434.261 339.5,435.5C 340.325,436.386 341.325,436.719 342.5,436.5C 342.082,437.222 341.416,437.722 340.5,438C 341.126,438.75 341.626,439.584 342,440.5C 345.057,439.549 348.223,439.216 351.5,439.5C 351.737,438.209 351.404,437.209 350.5,436.5C 350.56,435.957 350.893,435.624 351.5,435.5C 352.176,436.602 352.842,437.602 353.5,438.5C 356.01,439.167 359.01,439.334 362.5,439C 360.221,439.473 358.221,440.473 356.5,442C 353.086,442.297 349.753,442.964 346.5,444C 344.292,445.047 342.626,446.547 341.5,448.5C 341.167,448.5 340.833,448.5 340.5,448.5C 339.5,448.5 338.5,448.5 337.5,448.5C 335.85,444.644 337.184,442.478 341.5,442C 338.249,439.368 336.916,436.201 337.5,432.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#74615c\",d:\"M 342.5,436.5 C 345.167,436.5 347.833,436.5 350.5,436.5C 351.404,437.209 351.737,438.209 351.5,439.5C 348.223,439.216 345.057,439.549 342,440.5C 341.626,439.584 341.126,438.75 340.5,438C 341.416,437.722 342.082,437.222 342.5,436.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#776662\",d:\"M 334.5,429.5 C 335.833,430.167 336.833,431.167 337.5,432.5C 336.916,436.201 338.249,439.368 341.5,442C 337.184,442.478 335.85,444.644 337.5,448.5C 337.586,449.496 337.252,450.329 336.5,451C 339.373,453.913 340.706,457.413 340.5,461.5C 339.857,459.924 338.857,458.59 337.5,457.5C 336.403,454.314 335.07,451.314 333.5,448.5C 334.449,445.792 334.449,443.126 333.5,440.5C 329.981,441.932 326.314,442.766 322.5,443C 317.47,443.271 312.47,443.771 307.5,444.5C 306.446,444.32 305.446,443.987 304.5,443.5C 303.361,445.396 304.027,446.396 306.5,446.5C 307.338,446.842 307.672,447.508 307.5,448.5C 303.123,447.255 298.79,446.255 294.5,445.5C 292.712,444.378 290.712,444.211 288.5,445C 274.612,450.302 260.279,451.969 245.5,450C 217.362,457.434 188.696,461.101 159.5,461C 155.57,461.242 151.903,462.075 148.5,463.5C 146.708,463.634 145.042,463.301 143.5,462.5C 160.474,459.647 177.474,456.98 194.5,454.5C 225.507,450.799 256.507,446.966 287.5,443C 288.766,442.691 289.933,442.191 291,441.5C 291.495,439.527 291.662,437.527 291.5,435.5C 293.34,438.069 294.007,440.735 293.5,443.5C 295.018,440.134 295.684,436.801 295.5,433.5C 296.736,432.754 298.07,432.421 299.5,432.5C 300.659,433.74 301.659,435.074 302.5,436.5C 302.5,437.833 302.5,439.167 302.5,440.5C 312.813,439.539 323.146,438.873 333.5,438.5C 333.19,435.287 333.523,432.287 334.5,429.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#847676\",d:\"M 440.5,437.5 C 440.833,437.5 441.167,437.5 441.5,437.5C 441.5,439.5 441.5,441.5 441.5,443.5C 439.833,443.5 438.167,443.5 436.5,443.5C 437.15,441.565 437.483,439.565 437.5,437.5C 438.5,437.5 439.5,437.5 440.5,437.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#606166\",d:\"M 489.5,438.5 C 490.525,439.374 491.192,440.541 491.5,442C 489.811,443.358 488.478,445.025 487.5,447C 486.563,447.692 485.897,447.525 485.5,446.5C 485.896,443.279 487.229,440.612 489.5,438.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#855f57\",d:\"M 371.5,432.5 C 372.404,433.209 372.737,434.209 372.5,435.5C 371.662,435.842 371.328,436.508 371.5,437.5C 370.833,438.167 370.167,438.833 369.5,439.5C 367.254,440.21 364.92,440.71 362.5,441C 361.624,442.585 360.291,443.585 358.5,444C 355.905,444.226 353.405,444.726 351,445.5C 350.586,445.043 350.086,444.709 349.5,444.5C 347.139,445.855 344.806,447.188 342.5,448.5C 342.167,448.5 341.833,448.5 341.5,448.5C 342.626,446.547 344.292,445.047 346.5,444C 349.753,442.964 353.086,442.297 356.5,442C 358.221,440.473 360.221,439.473 362.5,439C 359.01,439.334 356.01,439.167 353.5,438.5C 353.756,436.224 355.09,435.057 357.5,435C 362.383,434.971 367.05,434.138 371.5,432.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6d4e41\",d:\"M 47.5,384.5 C 47.719,385.675 47.3857,386.675 46.5,387.5C 42.6766,388.467 41.1766,390.801 42,394.5C 43.46,396.422 45.1267,397.089 47,396.5C 48.2118,400.052 50.5452,402.718 54,404.5C 54.2503,407.754 55.2503,410.754 57,413.5C 58.7848,412.646 59.9515,413.313 60.5,415.5C 59.7611,415.369 59.0944,415.536 58.5,416C 59.0293,418.429 60.3626,420.262 62.5,421.5C 63.9727,425.417 65.1394,429.417 66,433.5C 66.3333,433.167 66.6667,432.833 67,432.5C 68.2183,434.019 69.7183,435.186 71.5,436C 71.1667,437.667 70.8333,439.333 70.5,441C 72.0249,442.009 73.6916,442.509 75.5,442.5C 77.5064,445.528 78.8397,448.861 79.5,452.5C 78.8485,453.091 78.1818,453.757 77.5,454.5C 74.8434,451.853 72.6768,448.853 71,445.5C 69.8873,444.695 68.7206,444.028 67.5,443.5C 67.1714,440.968 66.0048,439.968 64,440.5C 63.6667,438.5 63.3333,436.5 63,434.5C 56.2734,425.104 49.9401,415.437 44,405.5C 43.1072,406.711 42.2739,406.711 41.5,405.5C 40.6518,403.591 40.3184,401.591 40.5,399.5C 37.1043,399.367 36.7709,398.367 39.5,396.5C 38.0499,395.15 37.3832,393.484 37.5,391.5C 40.8333,389.167 44.1667,386.833 47.5,384.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#452b1f\",d:\"M 91.5,435.5 C 99.8341,446.825 107.167,458.825 113.5,471.5C 111.167,468.833 108.833,466.167 106.5,463.5C 101.5,454.167 96.5,444.833 91.5,435.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e8e8e8\",d:\"M 207.5,431.5 C 208.5,431.5 209.5,431.5 210.5,431.5C 210.808,433.924 210.474,436.257 209.5,438.5C 208.742,437.189 207.742,436.689 206.5,437C 207.38,438.356 207.714,439.856 207.5,441.5C 203.958,441.38 200.458,441.714 197,442.5C 193.937,442.935 193.77,443.768 196.5,445C 193.833,445.333 191.167,445.667 188.5,446C 194.686,446.326 194.686,447.66 188.5,450C 189.448,450.483 190.448,450.649 191.5,450.5C 191.5,451.833 191.5,453.167 191.5,454.5C 192.5,454.5 193.5,454.5 194.5,454.5C 177.474,456.98 160.474,459.647 143.5,462.5C 140.833,462.5 138.167,462.5 135.5,462.5C 135.806,459.615 135.473,456.948 134.5,454.5C 134.5,452.167 134.5,449.833 134.5,447.5C 134.833,443.5 135.167,443.5 135.5,447.5C 136.833,447.5 138.167,447.5 139.5,447.5C 139.351,448.552 139.517,449.552 140,450.5C 140.495,448.527 140.662,446.527 140.5,444.5C 147.409,444.219 154.076,443.219 160.5,441.5C 165.353,441.187 170.02,440.521 174.5,439.5C 175.143,437.924 176.143,436.59 177.5,435.5C 177.238,436.978 177.571,438.311 178.5,439.5C 180.382,438.907 182.215,438.24 184,437.5C 185.016,438.634 185.683,438.301 186,436.5C 186.399,436.728 186.565,437.062 186.5,437.5C 186.56,438.043 186.893,438.376 187.5,438.5C 188.182,437.757 188.849,437.091 189.5,436.5C 191.589,436.991 193.589,436.991 195.5,436.5C 198.717,437.595 202.05,437.429 205.5,436C 207.107,434.951 207.773,433.451 207.5,431.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ebe0d7\",d:\"M 115.5,343.5 C 115.833,343.5 116.167,343.5 116.5,343.5C 117.73,356.317 118.397,369.317 118.5,382.5C 118.371,389.845 118.038,397.178 117.5,404.5C 116.454,419.522 118.121,434.189 122.5,448.5C 122.5,449.167 122.833,449.5 123.5,449.5C 123.433,450.959 123.766,452.292 124.5,453.5C 124.869,455.993 124.203,456.66 122.5,455.5C 121.434,449.88 119.767,444.547 117.5,439.5C 117.039,436.68 117.039,434.013 117.5,431.5C 117.471,429.971 116.804,428.804 115.5,428C 115.917,416.95 116.25,405.783 116.5,394.5C 116.5,391.167 116.5,387.833 116.5,384.5C 116.666,371.149 116.333,357.815 115.5,344.5C 115.5,344.167 115.5,343.833 115.5,343.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e4c7be\",d:\"M 383.5,429.5 C 385.963,429.781 388.13,430.781 390,432.5C 391.011,431.663 392.178,431.33 393.5,431.5C 392.833,432.167 392.167,432.833 391.5,433.5C 392.11,434.391 392.443,435.391 392.5,436.5C 391.903,436.735 391.57,437.235 391.5,438C 392.368,441.935 394.534,444.769 398,446.5C 398.375,449 399.208,451.333 400.5,453.5C 399.833,453.833 399.167,454.167 398.5,454.5C 403.468,462.807 409.134,470.474 415.5,477.5C 413.5,477.167 411.5,476.833 409.5,476.5C 409.103,472.263 406.936,469.263 403,467.5C 402.51,466.207 402.343,464.873 402.5,463.5C 401.5,463.5 400.5,463.5 399.5,463.5C 399.5,461.833 399.5,460.167 399.5,458.5C 396.728,458.405 394.728,457.071 393.5,454.5C 391.426,447.366 389.093,440.366 386.5,433.5C 385.066,432.412 384.066,431.078 383.5,429.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b6aea4\",d:\"M 333.5,448.5 C 333.5,449.5 333.5,450.5 333.5,451.5C 332.5,451.5 331.5,451.5 330.5,451.5C 328.678,451.831 327.011,452.498 325.5,453.5C 320.211,449.729 314.378,447.062 308,445.5C 307.235,445.57 306.735,445.903 306.5,446.5C 304.027,446.396 303.361,445.396 304.5,443.5C 305.446,443.987 306.446,444.32 307.5,444.5C 312.47,443.771 317.47,443.271 322.5,443C 326.314,442.766 329.981,441.932 333.5,440.5C 334.449,443.126 334.449,445.792 333.5,448.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#695f5b\",d:\"M 340.5,448.5 C 340.833,448.5 341.167,448.5 341.5,448.5C 341.833,448.5 342.167,448.5 342.5,448.5C 342.833,449.167 343.167,449.833 343.5,450.5C 343.062,450.435 342.728,450.601 342.5,451C 344.818,453.597 347.318,456.097 350,458.5C 351.511,461.796 352.677,465.129 353.5,468.5C 350.778,466.076 348.778,463.076 347.5,459.5C 346.258,457.75 344.758,456.083 343,454.5C 342.667,454.833 342.333,455.167 342,455.5C 340.798,453.323 340.298,450.989 340.5,448.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aaa295\",d:\"M 294.5,445.5 C 298.79,446.255 303.123,447.255 307.5,448.5C 310.001,448.826 311.168,450.159 311,452.5C 310,451.5 309,450.5 308,449.5C 308.398,451.631 309.398,453.631 311,455.5C 311.788,457.165 312.122,458.831 312,460.5C 306.418,462.829 302.918,460.829 301.5,454.5C 303.575,454.698 305.575,454.865 307.5,455C 303.988,453.628 300.655,451.962 297.5,450C 293.167,449.333 288.833,449.333 284.5,450C 285.056,450.383 285.389,450.883 285.5,451.5C 281.262,452.516 276.929,453.682 272.5,455C 267.648,455.815 262.981,455.648 258.5,454.5C 258.389,453.883 258.056,453.383 257.5,453C 270.167,452.1 282.5,449.6 294.5,445.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d7d0c9\",d:\"M 392.5,436.5 C 408.476,436.535 424.476,436.868 440.5,437.5C 439.5,437.5 438.5,437.5 437.5,437.5C 437.483,439.565 437.15,441.565 436.5,443.5C 430.658,442.975 424.825,442.309 419,441.5C 417.5,441.833 416,442.167 414.5,442.5C 419.872,443.355 425.205,444.355 430.5,445.5C 434.299,444.207 437.966,444.207 441.5,445.5C 439.167,445.5 436.833,445.5 434.5,445.5C 433.788,448.875 433.288,452.209 433,455.5C 433.333,455.167 433.667,454.833 434,454.5C 436.436,455.355 438.936,456.021 441.5,456.5C 440.159,458.12 438.326,459.12 436,459.5C 434.356,457.936 432.856,456.27 431.5,454.5C 430.647,452.597 430.647,450.597 431.5,448.5C 428.748,448.422 426.082,448.255 423.5,448C 422.77,450.154 422.103,452.321 421.5,454.5C 420.717,452.657 420.05,450.657 419.5,448.5C 419.167,448.167 418.833,447.833 418.5,447.5C 417.614,448.325 417.281,449.325 417.5,450.5C 416.325,450.281 415.325,450.614 414.5,451.5C 415.491,452.665 416.491,453.832 417.5,455C 417.37,456.059 416.87,456.892 416,457.5C 414.562,456.1 413.729,454.433 413.5,452.5C 411.54,451.862 409.707,451.862 408,452.5C 406.883,451.051 406.216,449.384 406,447.5C 405.692,448.308 405.192,448.975 404.5,449.5C 400.239,445.231 396.239,440.898 392.5,436.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f0c3b1\",d:\"M 475.5,432.5 C 476.833,432.833 478.167,433.167 479.5,433.5C 479.842,434.338 480.508,434.672 481.5,434.5C 482.338,434.842 482.672,435.508 482.5,436.5C 480.589,440.67 478.922,445.003 477.5,449.5C 475.98,451.89 474.98,454.557 474.5,457.5C 473.026,458.436 472.026,459.77 471.5,461.5C 468.132,461.345 465.465,460.012 463.5,457.5C 465.38,457.771 466.713,457.104 467.5,455.5C 470.254,449.081 472.92,442.581 475.5,436C 475.402,434.715 475.402,433.549 475.5,432.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#978f88\",d:\"M 515.5,450.5 C 515.672,451.492 515.338,452.158 514.5,452.5C 510.91,451.892 507.577,450.559 504.5,448.5C 508.425,447.618 512.092,448.285 515.5,450.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d9b2a8\",d:\"M 36.5,441.5 C 37.1667,441.5 37.8333,441.5 38.5,441.5C 39.7922,444.954 42.2922,447.288 46,448.5C 46.6172,449.449 46.4506,450.282 45.5,451C 50.0646,453.056 52.3979,456.556 52.5,461.5C 52.1667,461.5 51.8333,461.5 51.5,461.5C 45.7538,455.417 40.7538,448.75 36.5,441.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6f3530\",d:\"M 369.5,439.5 C 368.167,444.833 368.167,450.167 369.5,455.5C 364.259,456.969 358.926,457.469 353.5,457C 350.309,454.574 346.975,452.407 343.5,450.5C 343.167,449.833 342.833,449.167 342.5,448.5C 344.806,447.188 347.139,445.855 349.5,444.5C 350.086,444.709 350.586,445.043 351,445.5C 353.405,444.726 355.905,444.226 358.5,444C 360.291,443.585 361.624,442.585 362.5,441C 364.92,440.71 367.254,440.21 369.5,439.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9c8a8b\",d:\"M 441.5,445.5 C 441.5,449.167 441.5,452.833 441.5,456.5C 438.936,456.021 436.436,455.355 434,454.5C 433.667,454.833 433.333,455.167 433,455.5C 433.288,452.209 433.788,448.875 434.5,445.5C 436.833,445.5 439.167,445.5 441.5,445.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ceb29f\",d:\"M 117.5,439.5 C 119.767,444.547 121.434,449.88 122.5,455.5C 122.081,458.026 121.914,460.359 122,462.5C 121.586,462.957 121.086,463.291 120.5,463.5C 119.719,462.271 119.219,460.938 119,459.5C 118.578,461.426 117.411,462.426 115.5,462.5C 114.745,460.534 113.579,460.2 112,461.5C 111.383,460.551 111.549,459.718 112.5,459C 111.422,458.326 110.755,457.326 110.5,456C 111.036,452.928 112.37,450.261 114.5,448C 111.833,449 109.167,450 106.5,451C 108.731,449.39 110.731,447.557 112.5,445.5C 112.333,445.167 112.167,444.833 112,444.5C 110.087,446.187 107.92,446.687 105.5,446C 104.92,444.665 104.587,443.498 104.5,442.5C 105.091,441.849 105.757,441.182 106.5,440.5C 105.284,439.904 103.951,439.737 102.5,440C 105.059,438.223 107.726,436.723 110.5,435.5C 112.226,435.185 113.893,435.019 115.5,435C 116.337,436.011 116.67,437.178 116.5,438.5C 115.022,438.238 113.689,438.571 112.5,439.5C 113.498,442.028 114.331,442.028 115,439.5C 115.977,440.774 116.811,440.774 117.5,439.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#efecef\",d:\"M 444.5,429.5 C 444.302,431.575 444.135,433.575 444,435.5C 447.498,434.557 450.832,433.223 454,431.5C 454.5,431.833 455,432.167 455.5,432.5C 452.081,434.541 448.414,436.041 444.5,437C 442.38,438.523 442.047,440.356 443.5,442.5C 446.274,443.39 449.107,443.39 452,442.5C 453.167,442.833 454.333,443.167 455.5,443.5C 455.043,444.298 454.376,444.631 453.5,444.5C 449.833,444.5 446.167,444.5 442.5,444.5C 442.335,448.182 442.501,451.848 443,455.5C 443.278,456.416 443.778,457.082 444.5,457.5C 447.341,458.669 450.341,459.669 453.5,460.5C 455.279,461.67 456.279,463.336 456.5,465.5C 453.187,465.093 450.354,463.759 448,461.5C 447.376,463.464 447.876,465.131 449.5,466.5C 448.619,467.971 447.286,468.804 445.5,469C 446.035,471.109 447.035,471.609 448.5,470.5C 453.285,472.039 457.952,473.873 462.5,476C 461.034,476.635 459.7,477.469 458.5,478.5C 454.977,476.921 451.31,475.588 447.5,474.5C 447.167,474.833 446.833,475.167 446.5,475.5C 450.101,476.985 453.767,478.318 457.5,479.5C 458.91,479.868 459.91,480.701 460.5,482C 459.167,482.667 459.167,483.333 460.5,484C 456.936,484.316 453.603,483.483 450.5,481.5C 449.304,481.846 449.304,482.346 450.5,483C 457.272,486.107 464.272,488.107 471.5,489C 469.277,488.434 467.277,487.6 465.5,486.5C 468.407,486.425 471.073,485.591 473.5,484C 472.692,483.692 472.025,483.192 471.5,482.5C 472.515,481.319 473.681,480.319 475,479.5C 476.44,480.148 477.94,480.481 479.5,480.5C 485.567,482.018 491.567,483.852 497.5,486C 495.315,490.246 493.148,494.079 491,497.5C 488.687,495.963 486.187,495.463 483.5,496C 484.696,496.654 484.696,497.154 483.5,497.5C 480.539,496.817 480.205,495.984 482.5,495C 479.056,492.944 475.389,491.444 471.5,490.5C 469.792,490.703 468.459,491.536 467.5,493C 472.977,494.604 478.311,496.604 483.5,499C 474.345,497.118 465.345,494.284 456.5,490.5C 455.817,490.863 455.15,491.196 454.5,491.5C 452.359,490.188 450.692,488.355 449.5,486C 450.167,485.667 450.833,485.333 451.5,485C 449.667,484.5 448.5,483.333 448,481.5C 440.566,482.609 440.733,484.443 448.5,487C 446.144,487.155 443.811,487.155 441.5,487C 440.549,487.718 440.383,488.551 441,489.5C 444.599,490.809 448.099,492.309 451.5,494C 448.089,493.814 444.756,492.981 441.5,491.5C 440.833,491.667 440.167,491.833 439.5,492C 440.833,492.667 440.833,493.333 439.5,494C 444.352,496.453 449.352,498.619 454.5,500.5C 454,500.833 453.5,501.167 453,501.5C 448.365,499.298 443.531,497.632 438.5,496.5C 439.332,491.08 436.999,488.413 431.5,488.5C 430.537,487.637 430.537,486.97 431.5,486.5C 434.096,487.482 436.762,488.149 439.5,488.5C 440.138,486.54 440.138,484.707 439.5,483C 441.569,482.676 441.902,481.842 440.5,480.5C 435.232,476.967 429.565,475.8 423.5,477C 427.59,474.353 431.257,471.853 434.5,469.5C 435.5,470.167 436.5,470.833 437.5,471.5C 442.094,469.908 442.26,468.574 438,467.5C 435.901,468.287 433.734,468.62 431.5,468.5C 431.5,466.833 431.5,465.167 431.5,463.5C 428.482,463.665 425.482,463.498 422.5,463C 421.867,460.123 421.533,457.289 421.5,454.5C 422.103,452.321 422.77,450.154 423.5,448C 426.082,448.255 428.748,448.422 431.5,448.5C 430.647,450.597 430.647,452.597 431.5,454.5C 432.856,456.27 434.356,457.936 436,459.5C 438.326,459.12 440.159,458.12 441.5,456.5C 441.5,452.833 441.5,449.167 441.5,445.5C 437.966,444.207 434.299,444.207 430.5,445.5C 425.205,444.355 419.872,443.355 414.5,442.5C 416,442.167 417.5,441.833 419,441.5C 424.825,442.309 430.658,442.975 436.5,443.5C 438.167,443.5 439.833,443.5 441.5,443.5C 441.5,441.5 441.5,439.5 441.5,437.5C 442.341,435.621 442.675,433.621 442.5,431.5C 443.29,430.391 443.79,429.058 444,427.5C 444.464,428.094 444.631,428.761 444.5,429.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#976258\",d:\"M 471.5,431.5 C 473.84,433.458 473.673,435.458 471,437.5C 471.282,444.16 469.116,449.827 464.5,454.5C 465.325,455.386 466.325,455.719 467.5,455.5C 466.713,457.104 465.38,457.771 463.5,457.5C 463.338,455.473 463.505,453.473 464,451.5C 466.434,444.685 468.934,438.018 471.5,431.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cb9483\",d:\"M 471.5,431.5 C 473.099,431.232 474.432,431.566 475.5,432.5C 475.402,433.549 475.402,434.715 475.5,436C 472.92,442.581 470.254,449.081 467.5,455.5C 466.325,455.719 465.325,455.386 464.5,454.5C 469.116,449.827 471.282,444.16 471,437.5C 473.673,435.458 473.84,433.458 471.5,431.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8c6b63\",d:\"M 36.5,441.5 C 40.7538,448.75 45.7538,455.417 51.5,461.5C 51.8333,462.167 52.1667,462.833 52.5,463.5C 51.391,463.557 50.391,463.89 49.5,464.5C 48.5272,463.209 47.5272,463.209 46.5,464.5C 45.3691,466.074 45.2025,467.741 46,469.5C 47.6667,472.5 49.3333,475.5 51,478.5C 51.7504,479.126 52.5838,479.626 53.5,480C 52.5494,480.718 52.3828,481.551 53,482.5C 54.4021,484.633 56.2354,486.3 58.5,487.5C 59.2458,488.736 59.5792,490.07 59.5,491.5C 60.5,491.5 61.5,491.5 62.5,491.5C 62.9483,494.613 64.2816,497.28 66.5,499.5C 64.0968,499.607 62.2635,498.607 61,496.5C 59.4851,491.395 56.4851,487.395 52,484.5C 51.6667,483.167 51.3333,481.833 51,480.5C 49.8525,481.458 48.8525,481.125 48,479.5C 46.1001,473.754 43.9335,468.088 41.5,462.5C 40.4783,461.646 39.6449,460.646 39,459.5C 36.6935,460.39 35.5268,459.39 35.5,456.5C 38.1045,459.06 40.4379,458.727 42.5,455.5C 40.7349,452.291 38.7349,449.291 36.5,446.5C 33.2077,448.591 32.8744,451.591 35.5,455.5C 34.1667,455.5 32.8333,455.5 31.5,455.5C 31.9577,452.606 31.291,450.106 29.5,448C 31.4641,446.549 32.7974,444.716 33.5,442.5C 34.3149,441.571 35.1482,440.571 36,439.5C 36.4643,440.094 36.631,440.761 36.5,441.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b29fa3\",d:\"M 453.5,444.5 C 450.359,445.321 447.025,445.821 443.5,446C 447.449,446.807 447.449,447.307 443.5,447.5C 443.36,449.124 444.027,450.29 445.5,451C 450.293,452.209 454.96,453.709 459.5,455.5C 457.582,456.956 456.915,458.623 457.5,460.5C 453.437,459.368 449.437,458.035 445.5,456.5C 444.893,456.624 444.56,456.957 444.5,457.5C 443.778,457.082 443.278,456.416 443,455.5C 442.501,451.848 442.335,448.182 442.5,444.5C 446.167,444.5 449.833,444.5 453.5,444.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#67433c\",d:\"M 35.5,456.5 C 35.5,456.167 35.5,455.833 35.5,455.5C 32.8744,451.591 33.2077,448.591 36.5,446.5C 38.7349,449.291 40.7349,452.291 42.5,455.5C 40.4379,458.727 38.1045,459.06 35.5,456.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#70584d\",d:\"M 256.5,455.5 C 244.236,456.087 232.236,458.087 220.5,461.5C 219.4,460.395 218.733,459.062 218.5,457.5C 229.277,455.111 240.11,452.777 251,450.5C 254.281,450.616 256.115,452.283 256.5,455.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a8a091\",d:\"M 287.5,452.5 C 292.393,451.314 295.727,452.981 297.5,457.5C 296.901,460.768 296.901,463.768 297.5,466.5C 295.471,462.304 292.304,459.304 288,457.5C 287.5,458 287,458.5 286.5,459C 290.769,462.284 294.769,465.784 298.5,469.5C 298.167,469.833 297.833,470.167 297.5,470.5C 292.249,468.202 287.249,465.536 282.5,462.5C 281.522,462.977 280.689,463.643 280,464.5C 279.49,461.995 277.99,460.495 275.5,460C 275.833,459.667 276.167,459.333 276.5,459C 275.049,459.263 273.716,459.096 272.5,458.5C 273.243,457.818 273.909,457.151 274.5,456.5C 279.165,455.922 283.499,454.589 287.5,452.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#4f2827\",d:\"M 469.5,429.5 C 470.5,429.833 471.167,430.5 471.5,431.5C 468.934,438.018 466.434,444.685 464,451.5C 463.505,453.473 463.338,455.473 463.5,457.5C 465.465,460.012 468.132,461.345 471.5,461.5C 471.912,463.973 470.912,465.306 468.5,465.5C 468.611,464.883 468.944,464.383 469.5,464C 466.539,462.735 463.539,461.569 460.5,460.5C 459.246,458.741 459.579,457.241 461.5,456C 460.906,455.536 460.239,455.369 459.5,455.5C 460.011,452.992 461.345,450.492 463.5,448C 463.5,446 463.5,444 463.5,442C 464.257,440.488 465.257,439.154 466.5,438C 465.663,436.989 465.33,435.822 465.5,434.5C 466.552,434.649 467.552,434.483 468.5,434C 467.447,432.251 467.78,430.751 469.5,429.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7d6051\",d:\"M 123.5,449.5 C 125.074,449.937 126.241,450.937 127,452.5C 127.186,454.9 127.686,457.234 128.5,459.5C 130.283,457.977 130.949,455.977 130.5,453.5C 130.94,455.844 131.94,457.844 133.5,459.5C 134.661,459.589 134.994,457.922 134.5,454.5C 135.473,456.948 135.806,459.615 135.5,462.5C 138.167,462.5 140.833,462.5 143.5,462.5C 145.042,463.301 146.708,463.634 148.5,463.5C 149.952,464.302 151.618,464.802 153.5,465C 150.043,465.21 146.71,466.377 143.5,468.5C 140.953,471.013 138.287,471.013 135.5,468.5C 134.086,469.624 132.586,470.624 131,471.5C 128.555,470.023 126.388,468.19 124.5,466C 125.167,465.333 125.833,464.667 126.5,464C 124.828,460.775 124.161,457.275 124.5,453.5C 123.766,452.292 123.433,450.959 123.5,449.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#491717\",d:\"M 343.5,450.5 C 346.975,452.407 350.309,454.574 353.5,457C 358.926,457.469 364.259,456.969 369.5,455.5C 374.092,457.822 374.259,460.155 370,462.5C 368.851,465.393 368.351,468.393 368.5,471.5C 363,472.877 362.666,473.877 367.5,474.5C 367.5,475.167 367.5,475.833 367.5,476.5C 368.444,484.263 365.944,485.93 360,481.5C 359.626,479.509 358.793,477.842 357.5,476.5C 356.792,473.451 355.459,470.785 353.5,468.5C 352.677,465.129 351.511,461.796 350,458.5C 347.318,456.097 344.818,453.597 342.5,451C 342.728,450.601 343.062,450.435 343.5,450.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e6d6d2\",d:\"M 294.5,445.5 C 282.5,449.6 270.167,452.1 257.5,453C 258.056,453.383 258.389,453.883 258.5,454.5C 257.833,454.833 257.167,455.167 256.5,455.5C 256.115,452.283 254.281,450.616 251,450.5C 240.11,452.777 229.277,455.111 218.5,457.5C 206.54,459.351 194.54,461.018 182.5,462.5C 171.15,462.407 159.817,462.741 148.5,463.5C 151.903,462.075 155.57,461.242 159.5,461C 188.696,461.101 217.362,457.434 245.5,450C 260.279,451.969 274.612,450.302 288.5,445C 290.712,444.211 292.712,444.378 294.5,445.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#895043\",d:\"M 371.5,437.5 C 372.294,443.384 374.294,448.718 377.5,453.5C 375.699,461.173 374.033,468.84 372.5,476.5C 371.25,476.423 370.417,475.756 370,474.5C 369.292,475.381 368.458,476.047 367.5,476.5C 367.5,475.833 367.5,475.167 367.5,474.5C 368.404,473.791 368.737,472.791 368.5,471.5C 368.351,468.393 368.851,465.393 370,462.5C 374.259,460.155 374.092,457.822 369.5,455.5C 368.167,450.167 368.167,444.833 369.5,439.5C 370.167,438.833 370.833,438.167 371.5,437.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#72595b\",d:\"M 459.5,455.5 C 460.239,455.369 460.906,455.536 461.5,456C 459.579,457.241 459.246,458.741 460.5,460.5C 463.539,461.569 466.539,462.735 469.5,464C 468.944,464.383 468.611,464.883 468.5,465.5C 464.507,464.923 460.84,463.59 457.5,461.5C 456.167,461.167 454.833,460.833 453.5,460.5C 450.341,459.669 447.341,458.669 444.5,457.5C 444.56,456.957 444.893,456.624 445.5,456.5C 449.437,458.035 453.437,459.368 457.5,460.5C 456.915,458.623 457.582,456.956 459.5,455.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#978487\",d:\"M 514.5,406.5 C 515.885,407.614 517.385,408.614 519,409.5C 522.47,408.371 523.804,409.705 523,413.5C 522.517,412.552 522.351,411.552 522.5,410.5C 521.178,410.33 520.011,410.663 519,411.5C 514.339,408.299 512.172,409.632 512.5,415.5C 513.873,415.343 515.207,415.51 516.5,416C 517.891,417.65 519.391,418.15 521,417.5C 522.489,418.424 522.656,419.424 521.5,420.5C 518.505,418.68 515.505,417.68 512.5,417.5C 510.447,418.939 509.447,420.939 509.5,423.5C 511.099,423.232 512.432,423.566 513.5,424.5C 512.778,424.918 512.278,425.584 512,426.5C 511.612,425.572 510.945,424.905 510,424.5C 507.453,426.359 506.953,428.692 508.5,431.5C 505.538,435.115 503.538,439.281 502.5,444C 502.735,444.873 503.069,445.707 503.5,446.5C 500.855,450.433 499.188,454.766 498.5,459.5C 497.189,462.876 496.189,466.376 495.5,470C 494.667,471.5 493.5,472.667 492,473.5C 488.783,472.262 485.616,470.928 482.5,469.5C 483.417,465.153 485.417,460.986 488.5,457C 488.272,456.601 487.938,456.435 487.5,456.5C 488.911,455.186 490.577,453.353 492.5,451C 491.446,449.612 491.28,448.112 492,446.5C 493.145,444.074 494.478,441.741 496,439.5C 497.734,438.751 499.567,438.251 501.5,438C 500.672,437.085 499.672,436.419 498.5,436C 503.159,427.379 507.826,418.712 512.5,410C 511.646,408.215 512.313,407.049 514.5,406.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#af9d9a\",d:\"M 218.5,457.5 C 218.733,459.062 219.4,460.395 220.5,461.5C 216.538,463.719 212.205,464.886 207.5,465C 198.229,465.003 189.063,465.837 180,467.5C 179.098,467.257 178.265,466.923 177.5,466.5C 179.167,465.167 180.833,463.833 182.5,462.5C 194.54,461.018 206.54,459.351 218.5,457.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#efe7dc\",d:\"M 285.5,451.5 C 286.492,451.328 287.158,451.662 287.5,452.5C 283.499,454.589 279.165,455.922 274.5,456.5C 270.129,456.875 265.796,457.541 261.5,458.5C 262.612,460.419 263.946,462.086 265.5,463.5C 265.561,458.678 266.727,458.345 269,462.5C 269.333,461.833 269.667,461.167 270,460.5C 271.671,465.854 274.337,470.521 278,474.5C 282.175,475.51 284.341,478.177 284.5,482.5C 283.193,483.802 283.193,485.135 284.5,486.5C 284.167,486.833 283.833,487.167 283.5,487.5C 281.845,483.777 280.511,483.777 279.5,487.5C 281.444,489.28 282.777,491.447 283.5,494C 283.167,494.5 282.833,495 282.5,495.5C 281.818,494.757 281.151,494.091 280.5,493.5C 273.59,481.254 266.257,469.254 258.5,457.5C 255.894,456.348 253.227,456.182 250.5,457C 243.291,458.979 235.958,460.313 228.5,461C 226.372,461.655 224.372,462.489 222.5,463.5C 221.508,463.328 220.842,463.662 220.5,464.5C 210.81,467.323 200.976,467.99 191,466.5C 181.279,469.185 171.446,469.852 161.5,468.5C 159.97,468.36 158.97,467.693 158.5,466.5C 164.864,467.795 171.197,467.795 177.5,466.5C 178.265,466.923 179.098,467.257 180,467.5C 189.063,465.837 198.229,465.003 207.5,465C 212.205,464.886 216.538,463.719 220.5,461.5C 232.236,458.087 244.236,456.087 256.5,455.5C 257.167,455.167 257.833,454.833 258.5,454.5C 262.981,455.648 267.648,455.815 272.5,455C 276.929,453.682 281.262,452.516 285.5,451.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cba78c\",d:\"M 477.5,449.5 C 478.486,451.408 480.152,452.408 482.5,452.5C 482.5,452.833 482.5,453.167 482.5,453.5C 481.624,453.369 480.957,453.702 480.5,454.5C 479.751,457.91 478.751,461.244 477.5,464.5C 475.427,467.955 473.427,471.455 471.5,475C 472.167,475.667 472.833,476.333 473.5,477C 471.874,476.805 470.207,476.805 468.5,477C 469.756,477.417 470.423,478.25 470.5,479.5C 469.5,479.5 468.5,479.5 467.5,479.5C 467.5,477.833 467.5,476.167 467.5,474.5C 466.923,471.45 468.09,469.45 471,468.5C 472.026,464.71 473.193,461.043 474.5,457.5C 474.98,454.557 475.98,451.89 477.5,449.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#624942\",d:\"M 67.5,443.5 C 68.7206,444.028 69.8873,444.695 71,445.5C 72.6768,448.853 74.8434,451.853 77.5,454.5C 78.1818,453.757 78.8485,453.091 79.5,452.5C 83.4687,457.749 86.9687,463.416 90,469.5C 94.8233,470.97 96.8233,474.303 96,479.5C 97.9259,484.088 100.926,487.755 105,490.5C 106.225,496.625 109.225,501.625 114,505.5C 115.158,508.572 116.491,511.572 118,514.5C 118.333,514.167 118.667,513.833 119,513.5C 121.409,517.892 122.909,522.558 123.5,527.5C 113.933,514.714 105.1,501.38 97,487.5C 96.6667,487.167 96.3333,486.833 96,486.5C 95.9005,488.653 95.0672,490.319 93.5,491.5C 90.1357,487.143 86.8024,482.809 83.5,478.5C 83.4142,477.504 83.7476,476.671 84.5,476C 79.7806,472.611 76.6139,468.111 75,462.5C 70.7866,457.76 66.9533,452.76 63.5,447.5C 64.4095,445.625 65.7428,444.292 67.5,443.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cdb8ae\",d:\"M 325.5,458.5 C 325.649,459.552 325.483,460.552 325,461.5C 322.521,463.966 320.021,466.299 317.5,468.5C 315.832,470.479 315.166,472.812 315.5,475.5C 314.495,472.637 313.995,469.637 314,466.5C 317.841,463.678 321.675,461.011 325.5,458.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#4b2622\",d:\"M 337.5,457.5 C 338.857,458.59 339.857,459.924 340.5,461.5C 340.557,462.609 340.89,463.609 341.5,464.5C 341.675,466.621 341.341,468.621 340.5,470.5C 339.833,470.5 339.167,470.5 338.5,470.5C 338.533,466.131 338.2,461.798 337.5,457.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bab5ac\",d:\"M 74.5,487.5 C 73.8333,487.5 73.1667,487.5 72.5,487.5C 65.3605,479.883 58.6938,471.883 52.5,463.5C 52.1667,462.833 51.8333,462.167 51.5,461.5C 51.8333,461.5 52.1667,461.5 52.5,461.5C 53.8583,460.374 55.1916,460.374 56.5,461.5C 62.9407,469.927 68.9407,478.594 74.5,487.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#937c7b\",d:\"M 182.5,462.5 C 180.833,463.833 179.167,465.167 177.5,466.5C 171.197,467.795 164.864,467.795 158.5,466.5C 157.325,466.281 156.325,466.614 155.5,467.5C 157.004,470.506 156.337,471.172 153.5,469.5C 149.743,469.112 146.41,468.779 143.5,468.5C 146.71,466.377 150.043,465.21 153.5,465C 151.618,464.802 149.952,464.302 148.5,463.5C 159.817,462.741 171.15,462.407 182.5,462.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#867c7b\",d:\"M 337.5,448.5 C 338.5,448.5 339.5,448.5 340.5,448.5C 340.298,450.989 340.798,453.323 342,455.5C 342.333,455.167 342.667,454.833 343,454.5C 344.758,456.083 346.258,457.75 347.5,459.5C 346.193,458.847 344.86,458.18 343.5,457.5C 343.167,458.5 342.833,459.5 342.5,460.5C 344.911,464.471 346.244,468.804 346.5,473.5C 344.945,470.566 343.278,467.566 341.5,464.5C 340.89,463.609 340.557,462.609 340.5,461.5C 340.706,457.413 339.373,453.913 336.5,451C 337.252,450.329 337.586,449.496 337.5,448.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a3a1a5\",d:\"M 514.5,461.5 C 516.65,462.67 518.984,463.67 521.5,464.5C 522.429,465.689 522.762,467.022 522.5,468.5C 519.67,468.306 517.004,467.639 514.5,466.5C 513.77,465.288 512.77,464.288 511.5,463.5C 512.005,462.081 513.005,461.415 514.5,461.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#825d4b\",d:\"M 60.5,415.5 C 61.5,415.5 62.5,415.5 63.5,415.5C 65.8351,421.715 69.3351,427.382 74,432.5C 74.6172,433.449 74.4506,434.282 73.5,435C 74.5,435.333 75.5,435.667 76.5,436C 77.6553,439.254 79.9886,441.087 83.5,441.5C 84.229,443.976 84.8957,446.476 85.5,449C 83.8466,451.411 84.5133,452.578 87.5,452.5C 87.3286,455.488 88.6619,457.488 91.5,458.5C 90.1667,461.167 90.8333,461.833 93.5,460.5C 95.505,463.663 97.6717,466.663 100,469.5C 101,472.5 102,475.5 103,478.5C 104.011,479.337 105.178,479.67 106.5,479.5C 109.1,484.474 110.766,489.808 111.5,495.5C 112.873,495.343 114.207,495.51 115.5,496C 117.113,499.12 119.447,501.287 122.5,502.5C 123.776,505.336 124.442,508.336 124.5,511.5C 125.833,511.5 127.167,511.5 128.5,511.5C 128.704,515.437 129.704,519.104 131.5,522.5C 132.833,522.5 134.167,522.5 135.5,522.5C 135.5,524.167 135.5,525.833 135.5,527.5C 136.552,527.351 137.552,527.517 138.5,528C 136.761,532.8 138.428,535.966 143.5,537.5C 145.135,539.877 147.468,541.377 150.5,542C 149.167,542.333 147.833,542.667 146.5,543C 147.973,543.71 148.64,544.876 148.5,546.5C 149.675,546.281 150.675,546.614 151.5,547.5C 153.647,552.46 156.314,557.127 159.5,561.5C 158.833,562.833 158.167,564.167 157.5,565.5C 158.612,567.39 159.446,569.39 160,571.5C 160.333,570.833 160.667,570.167 161,569.5C 161.48,571.133 162.313,572.466 163.5,573.5C 162.71,574.401 161.71,575.068 160.5,575.5C 154.574,569.733 151.074,562.733 150,554.5C 147.429,552.647 144.762,550.981 142,549.5C 141.577,546.867 140.41,544.701 138.5,543C 139.863,540.871 139.529,540.371 137.5,541.5C 136.315,540.147 134.981,538.98 133.5,538C 133.833,537.667 134.167,537.333 134.5,537C 132.606,535.899 131.939,534.566 132.5,533C 130.893,533.019 129.226,533.185 127.5,533.5C 128.401,529.759 127.068,527.759 123.5,527.5C 122.909,522.558 121.409,517.892 119,513.5C 118.667,513.833 118.333,514.167 118,514.5C 116.491,511.572 115.158,508.572 114,505.5C 109.225,501.625 106.225,496.625 105,490.5C 100.926,487.755 97.9259,484.088 96,479.5C 96.8233,474.303 94.8233,470.97 90,469.5C 86.9687,463.416 83.4687,457.749 79.5,452.5C 78.8397,448.861 77.5064,445.528 75.5,442.5C 73.6916,442.509 72.0249,442.009 70.5,441C 70.8333,439.333 71.1667,437.667 71.5,436C 69.7183,435.186 68.2183,434.019 67,432.5C 66.6667,432.833 66.3333,433.167 66,433.5C 65.1394,429.417 63.9727,425.417 62.5,421.5C 60.3626,420.262 59.0293,418.429 58.5,416C 59.0944,415.536 59.7611,415.369 60.5,415.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ccc6c9\",d:\"M 453.5,460.5 C 454.833,460.833 456.167,461.167 457.5,461.5C 457.281,462.675 457.614,463.675 458.5,464.5C 461.039,465.115 463.539,465.782 466,466.5C 465.516,469.839 464.683,473.173 463.5,476.5C 461.319,479.263 460.985,482.263 462.5,485.5C 463.209,486.404 464.209,486.737 465.5,486.5C 467.277,487.6 469.277,488.434 471.5,489C 464.272,488.107 457.272,486.107 450.5,483C 449.304,482.346 449.304,481.846 450.5,481.5C 453.603,483.483 456.936,484.316 460.5,484C 459.167,483.333 459.167,482.667 460.5,482C 459.91,480.701 458.91,479.868 457.5,479.5C 453.767,478.318 450.101,476.985 446.5,475.5C 446.833,475.167 447.167,474.833 447.5,474.5C 451.31,475.588 454.977,476.921 458.5,478.5C 459.7,477.469 461.034,476.635 462.5,476C 457.952,473.873 453.285,472.039 448.5,470.5C 447.035,471.609 446.035,471.109 445.5,469C 447.286,468.804 448.619,467.971 449.5,466.5C 447.876,465.131 447.376,463.464 448,461.5C 450.354,463.759 453.187,465.093 456.5,465.5C 456.279,463.336 455.279,461.67 453.5,460.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aa907f\",d:\"M 124.5,453.5 C 124.161,457.275 124.828,460.775 126.5,464C 125.833,464.667 125.167,465.333 124.5,466C 126.388,468.19 128.555,470.023 131,471.5C 132.586,470.624 134.086,469.624 135.5,468.5C 138.287,471.013 140.953,471.013 143.5,468.5C 146.41,468.779 149.743,469.112 153.5,469.5C 152.34,471.203 153.007,471.869 155.5,471.5C 155.674,476.856 157.341,481.689 160.5,486C 160.333,486.5 160.167,487 160,487.5C 159.722,486.584 159.222,485.918 158.5,485.5C 156.171,480.171 153.337,475.171 150,470.5C 149.691,471.766 149.191,472.933 148.5,474C 144.325,475.584 140.659,477.918 137.5,481C 135.763,481.612 134.763,480.946 134.5,479C 134.836,477.97 135.503,477.47 136.5,477.5C 139.51,475.663 142.51,473.829 145.5,472C 144.285,469.904 143.451,470.071 143,472.5C 141.853,471.542 140.853,471.875 140,473.5C 139.667,472.833 139.333,472.167 139,471.5C 137.448,472.966 135.614,473.966 133.5,474.5C 133.167,473.833 132.833,473.167 132.5,472.5C 131.289,473.39 129.955,473.39 128.5,472.5C 126.964,473.249 125.631,474.249 124.5,475.5C 123.304,475.154 123.304,474.654 124.5,474C 123.552,473.517 122.552,473.351 121.5,473.5C 124.355,470.045 123.688,468.545 119.5,469C 120.646,466.443 119.646,465.11 116.5,465C 115.748,464.329 115.414,463.496 115.5,462.5C 117.411,462.426 118.578,461.426 119,459.5C 119.219,460.938 119.719,462.271 120.5,463.5C 121.086,463.291 121.586,462.957 122,462.5C 121.914,460.359 122.081,458.026 122.5,455.5C 124.203,456.66 124.869,455.993 124.5,453.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a4a2a0\",d:\"M 347.5,459.5 C 348.778,463.076 350.778,466.076 353.5,468.5C 355.459,470.785 356.792,473.451 357.5,476.5C 357.5,477.5 357.5,478.5 357.5,479.5C 354.961,477.455 353.127,474.789 352,471.5C 352.521,476.132 352.354,480.799 351.5,485.5C 349.888,481.529 348.221,477.529 346.5,473.5C 346.244,468.804 344.911,464.471 342.5,460.5C 342.833,459.5 343.167,458.5 343.5,457.5C 344.86,458.18 346.193,458.847 347.5,459.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#edbeaf\",d:\"M 379.5,428.5 C 381.099,428.232 382.432,428.566 383.5,429.5C 384.066,431.078 385.066,432.412 386.5,433.5C 389.093,440.366 391.426,447.366 393.5,454.5C 394.728,457.071 396.728,458.405 399.5,458.5C 399.5,460.167 399.5,461.833 399.5,463.5C 400.5,463.5 401.5,463.5 402.5,463.5C 402.343,464.873 402.51,466.207 403,467.5C 406.936,469.263 409.103,472.263 409.5,476.5C 411.5,476.833 413.5,477.167 415.5,477.5C 415.5,480.167 415.5,482.833 415.5,485.5C 414.833,488.833 414.167,492.167 413.5,495.5C 411.058,495.881 410.391,495.214 411.5,493.5C 410.294,491.851 408.961,490.351 407.5,489C 408.833,488.667 410.167,488.333 411.5,488C 412.158,485.64 412.158,482.807 411.5,479.5C 409.179,480.625 406.846,480.792 404.5,480C 408.46,481.911 408.46,483.911 404.5,486C 403.365,486.749 402.365,486.583 401.5,485.5C 402.609,484.035 402.109,483.035 400,482.5C 399.667,483.833 399.333,485.167 399,486.5C 398.23,487.598 397.397,487.598 396.5,486.5C 396.993,484.194 397.326,481.861 397.5,479.5C 396.325,479.719 395.325,479.386 394.5,478.5C 393.885,475.961 393.218,473.461 392.5,471C 390.527,470.505 388.527,470.338 386.5,470.5C 384.356,460.246 382.356,449.913 380.5,439.5C 381.357,436.159 381.69,432.992 381.5,430C 380.584,429.722 379.918,429.222 379.5,428.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d0a09a\",d:\"M 368.5,471.5 C 368.737,472.791 368.404,473.791 367.5,474.5C 362.666,473.877 363,472.877 368.5,471.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#90776e\",d:\"M 474.5,457.5 C 473.193,461.043 472.026,464.71 471,468.5C 468.09,469.45 466.923,471.45 467.5,474.5C 466.395,475.6 465.062,476.267 463.5,476.5C 464.683,473.173 465.516,469.839 466,466.5C 463.539,465.782 461.039,465.115 458.5,464.5C 457.614,463.675 457.281,462.675 457.5,461.5C 460.84,463.59 464.507,464.923 468.5,465.5C 470.912,465.306 471.912,463.973 471.5,461.5C 472.026,459.77 473.026,458.436 474.5,457.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b6b0a3\",d:\"M 265.5,463.5 C 266.721,464.028 267.887,464.695 269,465.5C 270.139,469.112 271.806,472.446 274,475.5C 274.353,474.328 274.187,473.162 273.5,472C 273.611,470.278 274.111,470.112 275,471.5C 277.601,475.95 278.934,480.617 279,485.5C 273.725,478.612 269.225,471.279 265.5,463.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e0cdb9\",d:\"M 482.5,453.5 C 483.71,453.932 484.71,454.599 485.5,455.5C 482.036,460.961 479.202,466.295 477,471.5C 476.28,473.112 476.446,474.612 477.5,476C 476.833,476.333 476.167,476.667 475.5,477C 476.731,478.405 478.064,479.571 479.5,480.5C 477.94,480.481 476.44,480.148 475,479.5C 473.681,480.319 472.515,481.319 471.5,482.5C 472.025,483.192 472.692,483.692 473.5,484C 471.073,485.591 468.407,486.425 465.5,486.5C 464.209,486.737 463.209,486.404 462.5,485.5C 465.997,486.109 468.663,484.943 470.5,482C 471.335,480.869 471.335,480.036 470.5,479.5C 470.423,478.25 469.756,477.417 468.5,477C 470.207,476.805 471.874,476.805 473.5,477C 472.833,476.333 472.167,475.667 471.5,475C 473.427,471.455 475.427,467.955 477.5,464.5C 478.751,461.244 479.751,457.91 480.5,454.5C 480.957,453.702 481.624,453.369 482.5,453.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aca1a0\",d:\"M 91.5,492.5 C 91.5,493.5 91.5,494.5 91.5,495.5C 89.9139,496.413 88.4139,496.413 87,495.5C 84.0542,489.929 80.3875,484.929 76,480.5C 75.3162,479.216 75.4829,478.049 76.5,477C 75.5509,476.383 74.7175,476.549 74,477.5C 68.7897,470.36 63.6231,463.36 58.5,456.5C 55.5288,454.208 55.8622,452.541 59.5,451.5C 69.945,465.417 80.6116,479.084 91.5,492.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cdbab9\",d:\"M 220.5,464.5 C 221.601,465.848 222.601,467.348 223.5,469C 221.122,469.974 221.456,470.641 224.5,471C 216.091,474.402 208.424,479.068 201.5,485C 207.089,482.645 212.423,479.478 217.5,475.5C 220.028,476.498 220.028,477.331 217.5,478C 217.833,478.333 218.167,478.667 218.5,479C 209.418,484.958 200.251,490.792 191,496.5C 190.282,495.549 189.449,495.383 188.5,496C 187.167,496.667 187.167,497.333 188.5,498C 187.328,498.419 186.328,499.085 185.5,500C 181.901,500.351 181.567,499.351 184.5,497C 183.216,496.316 182.049,496.483 181,497.5C 180.13,496.892 179.63,496.059 179.5,495C 182.959,492.098 186.626,489.432 190.5,487C 186.622,488.143 182.955,489.977 179.5,492.5C 176.921,491.112 176.921,489.612 179.5,488C 178.451,487.508 177.451,487.674 176.5,488.5C 174.198,487.001 174.531,485.668 177.5,484.5C 175.93,484.306 174.43,484.306 173,484.5C 175.464,491.695 178.964,498.529 183.5,505C 182.133,507.301 181.466,509.801 181.5,512.5C 179.5,513.5 177.5,514.5 175.5,515.5C 171.847,506.188 167.18,497.521 161.5,489.5C 160.127,489.343 158.793,489.51 157.5,490C 157.243,491.371 157.577,492.871 158.5,494.5C 157.865,495.966 157.031,497.3 156,498.5C 155.667,498.167 155.333,497.833 155,497.5C 155.768,494.891 156.268,492.391 156.5,490C 155.833,489.667 155.167,489.333 154.5,489C 156.093,488.051 157.426,486.885 158.5,485.5C 159.222,485.918 159.722,486.584 160,487.5C 160.167,487 160.333,486.5 160.5,486C 157.341,481.689 155.674,476.856 155.5,471.5C 153.007,471.869 152.34,471.203 153.5,469.5C 156.337,471.172 157.004,470.506 155.5,467.5C 156.325,466.614 157.325,466.281 158.5,466.5C 158.97,467.693 159.97,468.36 161.5,468.5C 171.446,469.852 181.279,469.185 191,466.5C 200.976,467.99 210.81,467.323 220.5,464.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#efebdf\",d:\"M 330.5,451.5 C 330.5,452.167 330.5,452.833 330.5,453.5C 327.833,454.167 326.167,455.833 325.5,458.5C 321.675,461.011 317.841,463.678 314,466.5C 313.995,469.637 314.495,472.637 315.5,475.5C 315.5,476.167 315.5,476.833 315.5,477.5C 315.516,483.437 315.85,489.437 316.5,495.5C 317.167,496.167 317.833,496.833 318.5,497.5C 319.152,505.126 321.485,512.126 325.5,518.5C 323.806,517.473 322.473,516.139 321.5,514.5C 320.213,511.594 319.213,508.594 318.5,505.5C 317.346,502.521 316.18,499.521 315,496.5C 308.764,493.264 304.264,488.431 301.5,482C 301.667,481.5 301.833,481 302,480.5C 304.743,482.903 307.076,485.569 309,488.5C 309.219,487.062 309.719,485.729 310.5,484.5C 311.123,486.966 311.957,489.299 313,491.5C 313.867,487.044 313.534,482.711 312,478.5C 311.28,480.112 311.446,481.612 312.5,483C 311.551,483.617 310.718,483.451 310,482.5C 308,479.167 308,475.833 310,472.5C 310.915,473.328 311.581,474.328 312,475.5C 312.752,471.92 313.252,468.253 313.5,464.5C 318.819,462.178 322.819,458.511 325.5,453.5C 327.011,452.498 328.678,451.831 330.5,451.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f7e7ce\",d:\"M 42.5,494.5 C 42.1667,494.5 41.8333,494.5 41.5,494.5C 40.2101,493.942 39.3768,492.942 39,491.5C 38.6667,492.167 38.3333,492.833 38,493.5C 35.0589,487.556 30.5589,483.389 24.5,481C 23.6426,478.981 22.3092,477.481 20.5,476.5C 23.0666,473.638 26.0666,471.305 29.5,469.5C 31.1026,468.323 32.436,468.489 33.5,470C 31.0712,470.451 30.9045,471.285 33,472.5C 34.9645,471.115 36.7979,471.282 38.5,473C 37.08,475.209 35.4133,477.209 33.5,479C 37.5,483 41.5,487 45.5,491C 44.2899,492.039 43.2899,493.206 42.5,494.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c6bfb1\",d:\"M 306.5,446.5 C 306.735,445.903 307.235,445.57 308,445.5C 314.378,447.062 320.211,449.729 325.5,453.5C 322.819,458.511 318.819,462.178 313.5,464.5C 313.252,468.253 312.752,471.92 312,475.5C 311.581,474.328 310.915,473.328 310,472.5C 308,475.833 308,479.167 310,482.5C 310.718,483.451 311.551,483.617 312.5,483C 311.446,481.612 311.28,480.112 312,478.5C 313.534,482.711 313.867,487.044 313,491.5C 311.957,489.299 311.123,486.966 310.5,484.5C 309.719,485.729 309.219,487.062 309,488.5C 307.076,485.569 304.743,482.903 302,480.5C 301.833,481 301.667,481.5 301.5,482C 304.264,488.431 308.764,493.264 315,496.5C 316.18,499.521 317.346,502.521 318.5,505.5C 317.685,506.429 316.852,507.429 316,508.5C 315.489,506.122 314.822,503.788 314,501.5C 309.559,495.679 304.559,490.346 299,485.5C 298.505,483.527 298.338,481.527 298.5,479.5C 296.516,479.617 294.85,478.95 293.5,477.5C 292.5,478 291.5,478.5 290.5,479C 291.696,479.654 291.696,480.154 290.5,480.5C 289.252,479.96 288.085,479.293 287,478.5C 286.066,479.858 285.232,481.192 284.5,482.5C 284.341,478.177 282.175,475.51 278,474.5C 274.337,470.521 271.671,465.854 270,460.5C 269.667,461.167 269.333,461.833 269,462.5C 266.727,458.345 265.561,458.678 265.5,463.5C 263.946,462.086 262.612,460.419 261.5,458.5C 265.796,457.541 270.129,456.875 274.5,456.5C 273.909,457.151 273.243,457.818 272.5,458.5C 273.716,459.096 275.049,459.263 276.5,459C 276.167,459.333 275.833,459.667 275.5,460C 277.99,460.495 279.49,461.995 280,464.5C 280.689,463.643 281.522,462.977 282.5,462.5C 287.249,465.536 292.249,468.202 297.5,470.5C 297.833,470.167 298.167,469.833 298.5,469.5C 294.769,465.784 290.769,462.284 286.5,459C 287,458.5 287.5,458 288,457.5C 292.304,459.304 295.471,462.304 297.5,466.5C 296.901,463.768 296.901,460.768 297.5,457.5C 295.727,452.981 292.393,451.314 287.5,452.5C 287.158,451.662 286.492,451.328 285.5,451.5C 285.389,450.883 285.056,450.383 284.5,450C 288.833,449.333 293.167,449.333 297.5,450C 300.655,451.962 303.988,453.628 307.5,455C 305.575,454.865 303.575,454.698 301.5,454.5C 302.918,460.829 306.418,462.829 312,460.5C 312.122,458.831 311.788,457.165 311,455.5C 309.398,453.631 308.398,451.631 308,449.5C 309,450.5 310,451.5 311,452.5C 311.168,450.159 310.001,448.826 307.5,448.5C 307.672,447.508 307.338,446.842 306.5,446.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a28e8c\",d:\"M 33.5,442.5 C 32.7974,444.716 31.4641,446.549 29.5,448C 31.291,450.106 31.9577,452.606 31.5,455.5C 32.8333,455.5 34.1667,455.5 35.5,455.5C 35.5,455.833 35.5,456.167 35.5,456.5C 35.5268,459.39 36.6935,460.39 39,459.5C 39.6449,460.646 40.4783,461.646 41.5,462.5C 43.9335,468.088 46.1001,473.754 48,479.5C 48.8525,481.125 49.8525,481.458 51,480.5C 51.3333,481.833 51.6667,483.167 52,484.5C 56.4851,487.395 59.4851,491.395 61,496.5C 62.2635,498.607 64.0968,499.607 66.5,499.5C 68.634,504.826 72.3007,508.493 77.5,510.5C 78.2389,510.369 78.9056,510.536 79.5,511C 78.5868,512.414 78.5868,513.914 79.5,515.5C 78.1733,514.2 76.84,512.867 75.5,511.5C 74.0256,512.436 73.0256,513.77 72.5,515.5C 74.6499,518.151 76.9832,520.651 79.5,523C 78.9056,523.464 78.2389,523.631 77.5,523.5C 72.7419,516.887 66.7419,512.053 59.5,509C 58.3012,507.306 56.9678,505.806 55.5,504.5C 55.9382,504.565 56.2716,504.399 56.5,504C 54.1667,501.667 51.8333,499.333 49.5,497C 50,496.833 50.5,496.667 51,496.5C 53.5137,499.005 56.347,501.171 59.5,503C 61.2932,505.795 63.4598,508.295 66,510.5C 66.956,509.421 67.7894,508.255 68.5,507C 65.5719,505.74 63.7386,503.573 63,500.5C 62.6667,500.833 62.3333,501.167 62,501.5C 60.1667,500.333 58.3333,499.167 56.5,498C 56.8333,497.667 57.1667,497.333 57.5,497C 52.6125,491.203 48.4458,485.37 45,479.5C 44.3828,478.551 44.5494,477.718 45.5,477C 44.2341,476.691 43.0674,476.191 42,475.5C 42.2688,473.277 42.4354,471.111 42.5,469C 40.7067,466.579 39.0401,464.079 37.5,461.5C 35.4084,463.605 33.0751,465.272 30.5,466.5C 30.1667,463.167 29.8333,459.833 29.5,456.5C 29.3573,454.738 29.6906,453.071 30.5,451.5C 29.5853,450.672 28.9186,449.672 28.5,448.5C 29.1984,447.137 29.1984,445.971 28.5,445C 29.9101,443.628 31.5767,442.795 33.5,442.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f3f1f3\",d:\"M 530.5,425.5 C 525.856,436.121 520.689,446.455 515,456.5C 514.217,458.433 514.717,459.933 516.5,461C 515.906,461.464 515.239,461.631 514.5,461.5C 513.005,461.415 512.005,462.081 511.5,463.5C 512.77,464.288 513.77,465.288 514.5,466.5C 513.328,467.705 511.995,467.705 510.5,466.5C 510.167,466.833 509.833,467.167 509.5,467.5C 510.325,468.386 511.325,468.719 512.5,468.5C 512.082,469.222 511.416,469.722 510.5,470C 511.711,470.893 511.711,471.726 510.5,472.5C 509.406,470.164 508.073,470.164 506.5,472.5C 507.956,472.322 509.289,473.156 510.5,475C 509.66,476.666 510.16,476.833 512,475.5C 512.667,476.167 512.667,476.833 512,477.5C 509.194,477.407 506.361,477.407 503.5,477.5C 500.932,480.846 501.266,484.012 504.5,487C 502.443,487.305 500.443,487.305 498.5,487C 499.623,488.044 500.956,488.71 502.5,489C 501.724,491.987 500.057,492.82 497.5,491.5C 496.618,492.76 495.618,493.926 494.5,495C 494.833,495.333 495.167,495.667 495.5,496C 492.999,497.418 493.332,498.418 496.5,499C 495.675,500.688 494.675,500.855 493.5,499.5C 490.573,501.816 490.907,503.316 494.5,504C 493.833,504.333 493.167,504.667 492.5,505C 493.381,505.708 494.047,506.542 494.5,507.5C 491.891,506.79 489.558,506.457 487.5,506.5C 478.167,502.833 468.833,499.167 459.5,495.5C 458.312,494.636 457.145,493.636 456,492.5C 454.927,493.28 453.76,493.113 452.5,492C 453.094,491.536 453.761,491.369 454.5,491.5C 455.15,491.196 455.817,490.863 456.5,490.5C 465.345,494.284 474.345,497.118 483.5,499C 478.311,496.604 472.977,494.604 467.5,493C 468.459,491.536 469.792,490.703 471.5,490.5C 475.389,491.444 479.056,492.944 482.5,495C 480.205,495.984 480.539,496.817 483.5,497.5C 484.696,497.154 484.696,496.654 483.5,496C 486.187,495.463 488.687,495.963 491,497.5C 493.148,494.079 495.315,490.246 497.5,486C 491.567,483.852 485.567,482.018 479.5,480.5C 478.064,479.571 476.731,478.405 475.5,477C 476.167,476.667 476.833,476.333 477.5,476C 476.446,474.612 476.28,473.112 477,471.5C 479.202,466.295 482.036,460.961 485.5,455.5C 485.833,455.5 486.167,455.5 486.5,455.5C 486.5,456.167 486.833,456.5 487.5,456.5C 487.938,456.435 488.272,456.601 488.5,457C 485.417,460.986 483.417,465.153 482.5,469.5C 485.616,470.928 488.783,472.262 492,473.5C 493.5,472.667 494.667,471.5 495.5,470C 496.189,466.376 497.189,462.876 498.5,459.5C 502.43,458.933 506.097,459.933 509.5,462.5C 511.216,459.139 512.882,455.805 514.5,452.5C 515.338,452.158 515.672,451.492 515.5,450.5C 519.387,444.46 523.221,437.793 527,430.5C 527.121,428.273 527.954,426.44 529.5,425C 529.167,424.667 528.833,424.333 528.5,424C 529.816,423.472 530.483,423.972 530.5,425.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c9c5c5\",d:\"M 58.5,456.5 C 63.6231,463.36 68.7897,470.36 74,477.5C 74.7175,476.549 75.5509,476.383 76.5,477C 75.4829,478.049 75.3162,479.216 76,480.5C 80.3875,484.929 84.0542,489.929 87,495.5C 88.4139,496.413 89.9139,496.413 91.5,495.5C 91.631,496.239 91.4643,496.906 91,497.5C 90.0805,497.93 89.2472,498.264 88.5,498.5C 89,499.5 89.5,500.5 90,501.5C 91.1011,499.606 92.4345,498.939 94,499.5C 95.3076,501.641 96.8076,503.641 98.5,505.5C 98.2907,506.086 97.9574,506.586 97.5,507C 99.1667,508.333 100.833,509.667 102.5,511C 99.59,511.637 96.9233,511.137 94.5,509.5C 82.3648,493.269 70.1981,476.936 58,460.5C 57.805,459.181 57.9717,457.847 58.5,456.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#714d44\",d:\"M 372.5,476.5 C 372.617,478.484 371.95,480.15 370.5,481.5C 370.846,482.696 371.346,482.696 372,481.5C 372.417,484.284 371.25,486.284 368.5,487.5C 367.507,492.12 367.173,496.786 367.5,501.5C 364.185,494.2 360.852,486.867 357.5,479.5C 357.5,478.5 357.5,477.5 357.5,476.5C 358.793,477.842 359.626,479.509 360,481.5C 365.944,485.93 368.444,484.263 367.5,476.5C 368.458,476.047 369.292,475.381 370,474.5C 370.417,475.756 371.25,476.423 372.5,476.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a69a98\",d:\"M 467.5,474.5 C 467.5,476.167 467.5,477.833 467.5,479.5C 468.5,479.5 469.5,479.5 470.5,479.5C 471.335,480.036 471.335,480.869 470.5,482C 468.663,484.943 465.997,486.109 462.5,485.5C 460.985,482.263 461.319,479.263 463.5,476.5C 465.062,476.267 466.395,475.6 467.5,474.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dbc7c4\",d:\"M 220.5,464.5 C 220.842,463.662 221.508,463.328 222.5,463.5C 226.168,469.167 229.002,475.167 231,481.5C 217.709,489.222 204.875,497.556 192.5,506.5C 188.38,507.726 184.713,509.726 181.5,512.5C 181.466,509.801 182.133,507.301 183.5,505C 178.964,498.529 175.464,491.695 173,484.5C 174.43,484.306 175.93,484.306 177.5,484.5C 174.531,485.668 174.198,487.001 176.5,488.5C 177.451,487.674 178.451,487.508 179.5,488C 176.921,489.612 176.921,491.112 179.5,492.5C 182.955,489.977 186.622,488.143 190.5,487C 186.626,489.432 182.959,492.098 179.5,495C 179.63,496.059 180.13,496.892 181,497.5C 182.049,496.483 183.216,496.316 184.5,497C 181.567,499.351 181.901,500.351 185.5,500C 186.328,499.085 187.328,498.419 188.5,498C 187.167,497.333 187.167,496.667 188.5,496C 189.449,495.383 190.282,495.549 191,496.5C 200.251,490.792 209.418,484.958 218.5,479C 218.167,478.667 217.833,478.333 217.5,478C 220.028,477.331 220.028,476.498 217.5,475.5C 212.423,479.478 207.089,482.645 201.5,485C 208.424,479.068 216.091,474.402 224.5,471C 221.456,470.641 221.122,469.974 223.5,469C 222.601,467.348 221.601,465.848 220.5,464.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b48472\",d:\"M 378.5,454.5 C 380.237,458.542 381.237,462.876 381.5,467.5C 382.5,467.5 383.5,467.5 384.5,467.5C 383.181,478.92 383.181,490.254 384.5,501.5C 383.116,505.756 382.116,510.089 381.5,514.5C 380.041,514.433 378.708,514.766 377.5,515.5C 375.735,514.539 373.735,514.205 371.5,514.5C 370.793,510.752 369.793,507.086 368.5,503.5C 368.338,501.473 368.505,499.473 369,497.5C 371.684,499.275 374.518,500.608 377.5,501.5C 377.5,500.5 377.5,499.5 377.5,498.5C 378.833,498.5 380.167,498.5 381.5,498.5C 381.629,488.479 381.296,478.479 380.5,468.5C 379.5,468.5 378.5,468.5 377.5,468.5C 378.127,463.859 378.46,459.193 378.5,454.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d1b3a8\",d:\"M 341.5,471.5 C 343.398,478.36 345.398,485.193 347.5,492C 347.43,492.765 347.097,493.265 346.5,493.5C 342.94,489.16 340.94,484.16 340.5,478.5C 340.682,476.409 340.348,474.409 339.5,472.5C 339.957,471.702 340.624,471.369 341.5,471.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a07866\",d:\"M 280.5,493.5 C 280.634,495.292 280.301,496.958 279.5,498.5C 278.21,499.058 277.377,500.058 277,501.5C 276.586,501.043 276.086,500.709 275.5,500.5C 273.367,502.208 271.034,503.542 268.5,504.5C 266.784,504.629 265.117,504.962 263.5,505.5C 263.297,503.61 263.963,502.11 265.5,501C 263.074,499.855 260.741,498.522 258.5,497C 260.917,495.327 260.917,493.494 258.5,491.5C 258.833,491.167 259.167,490.833 259.5,490.5C 261.549,493.025 262.882,492.525 263.5,489C 263.333,488.5 263.167,488 263,487.5C 262,488.833 261,488.833 260,487.5C 259.493,486.004 259.993,484.837 261.5,484C 259.541,480.766 257.707,480.933 256,484.5C 256.347,481.729 256.18,479.062 255.5,476.5C 255.393,474.621 255.893,474.288 257,475.5C 257.5,475 258,474.5 258.5,474C 257.576,473.15 257.576,472.15 258.5,471C 256.255,467.685 253.088,465.852 249,465.5C 248.667,465.833 248.333,466.167 248,466.5C 247.692,465.692 247.192,465.025 246.5,464.5C 245.304,464.846 245.304,465.346 246.5,466C 245.833,466.167 245.167,466.333 244.5,466.5C 243.932,464.958 242.265,464.125 239.5,464C 235.848,463.501 232.182,463.335 228.5,463.5C 228.548,466.313 229.215,468.979 230.5,471.5C 231.689,472.429 233.022,472.762 234.5,472.5C 234.5,473.833 234.5,475.167 234.5,476.5C 236.167,476.5 237.833,476.5 239.5,476.5C 239.5,477.5 239.5,478.5 239.5,479.5C 237.5,479.5 235.5,479.5 233.5,479.5C 233.034,481.201 233.034,482.701 233.5,484C 231.5,484.333 229.5,484.667 227.5,485C 219.129,490.514 210.795,496.014 202.5,501.5C 199.45,503.692 196.117,505.358 192.5,506.5C 204.875,497.556 217.709,489.222 231,481.5C 229.002,475.167 226.168,469.167 222.5,463.5C 224.372,462.489 226.372,461.655 228.5,461C 235.958,460.313 243.291,458.979 250.5,457C 253.227,456.182 255.894,456.348 258.5,457.5C 266.257,469.254 273.59,481.254 280.5,493.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b7ad9c\",d:\"M 318.5,505.5 C 319.213,508.594 320.213,511.594 321.5,514.5C 319.219,513.392 317.052,512.058 315,510.5C 312.355,506.026 309.521,501.692 306.5,497.5C 305.453,498.922 305.453,500.422 306.5,502C 308.998,504.668 311.331,507.501 313.5,510.5C 311.229,511.363 308.895,511.363 306.5,510.5C 300.287,500.426 293.787,490.426 287,480.5C 286.202,483.711 286.702,486.711 288.5,489.5C 294.647,494.66 299.313,500.994 302.5,508.5C 298.139,509.408 293.806,510.408 289.5,511.5C 289.167,511.167 288.833,510.833 288.5,510.5C 290.14,508.86 291.806,507.194 293.5,505.5C 292.349,504.269 291.183,504.269 290,505.5C 289.728,500.279 288.728,495.279 287,490.5C 287.11,494.129 287.276,497.796 287.5,501.5C 287.44,502.043 287.107,502.376 286.5,502.5C 284.041,498.65 282.874,499.316 283,504.5C 281.541,502.568 280.375,500.568 279.5,498.5C 280.301,496.958 280.634,495.292 280.5,493.5C 281.151,494.091 281.818,494.757 282.5,495.5C 282.833,495 283.167,494.5 283.5,494C 282.777,491.447 281.444,489.28 279.5,487.5C 280.511,483.777 281.845,483.777 283.5,487.5C 283.833,487.167 284.167,486.833 284.5,486.5C 283.193,485.135 283.193,483.802 284.5,482.5C 285.232,481.192 286.066,479.858 287,478.5C 288.085,479.293 289.252,479.96 290.5,480.5C 291.696,480.154 291.696,479.654 290.5,479C 291.5,478.5 292.5,478 293.5,477.5C 294.85,478.95 296.516,479.617 298.5,479.5C 298.338,481.527 298.505,483.527 299,485.5C 304.559,490.346 309.559,495.679 314,501.5C 314.822,503.788 315.489,506.122 316,508.5C 316.852,507.429 317.685,506.429 318.5,505.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dfb0a1\",d:\"M 338.5,487.5 C 338.5,487.833 338.5,488.167 338.5,488.5C 337.783,490.953 336.616,493.287 335,495.5C 331.429,487.082 328.596,478.415 326.5,469.5C 327.057,467.765 327.39,466.098 327.5,464.5C 329.904,465.008 330.571,466.175 329.5,468C 332.131,468.107 334.631,468.273 337,468.5C 336.918,474.781 337.418,481.115 338.5,487.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d4c2b7\",d:\"M 315.5,477.5 C 319.392,488.064 322.226,499.064 324,510.5C 326.593,515.361 329.427,520.028 332.5,524.5C 331.577,528.064 331.244,531.731 331.5,535.5C 330.677,532.023 330.177,528.356 330,524.5C 328.723,522.253 327.223,520.253 325.5,518.5C 321.485,512.126 319.152,505.126 318.5,497.5C 317.833,496.833 317.167,496.167 316.5,495.5C 315.85,489.437 315.516,483.437 315.5,477.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#946050\",d:\"M 372.5,435.5 C 373.674,439.701 375.341,443.701 377.5,447.5C 378.223,449.782 378.557,452.116 378.5,454.5C 378.46,459.193 378.127,463.859 377.5,468.5C 378.5,468.5 379.5,468.5 380.5,468.5C 381.296,478.479 381.629,488.479 381.5,498.5C 380.167,498.5 378.833,498.5 377.5,498.5C 377.5,499.5 377.5,500.5 377.5,501.5C 374.518,500.608 371.684,499.275 369,497.5C 368.505,499.473 368.338,501.473 368.5,503.5C 368.167,503.5 367.833,503.5 367.5,503.5C 367.5,502.833 367.5,502.167 367.5,501.5C 367.173,496.786 367.507,492.12 368.5,487.5C 371.25,486.284 372.417,484.284 372,481.5C 371.346,482.696 370.846,482.696 370.5,481.5C 371.95,480.15 372.617,478.484 372.5,476.5C 374.033,468.84 375.699,461.173 377.5,453.5C 374.294,448.718 372.294,443.384 371.5,437.5C 371.328,436.508 371.662,435.842 372.5,435.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dec3a4\",d:\"M 20.5,476.5 C 22.3092,477.481 23.6426,478.981 24.5,481C 30.5589,483.389 35.0589,487.556 38,493.5C 38.3333,492.833 38.6667,492.167 39,491.5C 39.3768,492.942 40.2101,493.942 41.5,494.5C 40.5,496.167 39.1667,497.5 37.5,498.5C 33.8953,493.226 29.562,488.559 24.5,484.5C 23.7273,481.955 22.2273,479.955 20,478.5C 19.3083,477.563 19.475,476.897 20.5,476.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e7cebc\",d:\"M 106.5,390.5 C 107.873,390.343 109.207,390.51 110.5,391C 108.343,392.912 106.009,394.579 103.5,396C 107.379,397.232 108.045,399.066 105.5,401.5C 103.882,403.316 101.882,404.649 99.5,405.5C 98.9569,405.44 98.6236,405.107 98.5,404.5C 100.396,403.1 101.729,401.267 102.5,399C 102.167,398.5 101.833,398 101.5,397.5C 101.167,398.167 100.833,398.833 100.5,399.5C 99.8333,399.167 99.1667,398.833 98.5,398.5C 96.0178,400.277 93.3511,401.777 90.5,403C 88.9926,403.837 88.4926,405.004 89,406.5C 89.3333,406.167 89.6667,405.833 90,405.5C 90.8373,407.007 92.0039,407.507 93.5,407C 90.972,405.684 90.972,404.517 93.5,403.5C 94.7187,404.646 96.0521,405.646 97.5,406.5C 93.772,409.559 89.772,412.226 85.5,414.5C 84.2267,415.257 84.2267,415.923 85.5,416.5C 84.6832,421.148 86.3499,423.315 90.5,423C 89.5494,423.718 89.3828,424.551 90,425.5C 91.016,424.366 91.6827,424.699 92,426.5C 92.9134,423.27 95.08,421.27 98.5,420.5C 98.1493,422.203 98.816,423.87 100.5,425.5C 101.962,424.529 103.295,424.862 104.5,426.5C 102.578,427.711 100.745,429.044 99,430.5C 98.9751,424.978 97.1417,423.811 93.5,427C 96.0692,429.369 98.0692,431.536 99.5,433.5C 98.3231,435.874 98.9898,437.707 101.5,439C 101.265,439.873 100.931,440.707 100.5,441.5C 101.861,441.788 103.194,442.121 104.5,442.5C 104.587,443.498 104.92,444.665 105.5,446C 107.92,446.687 110.087,446.187 112,444.5C 112.167,444.833 112.333,445.167 112.5,445.5C 110.731,447.557 108.731,449.39 106.5,451C 109.167,450 111.833,449 114.5,448C 112.37,450.261 111.036,452.928 110.5,456C 110.755,457.326 111.422,458.326 112.5,459C 111.549,459.718 111.383,460.551 112,461.5C 113.579,460.2 114.745,460.534 115.5,462.5C 115.414,463.496 115.748,464.329 116.5,465C 119.646,465.11 120.646,466.443 119.5,469C 123.688,468.545 124.355,470.045 121.5,473.5C 122.09,474.766 122.59,476.099 123,477.5C 124.666,476.66 124.833,477.16 123.5,479C 125.911,478.948 128.244,478.615 130.5,478C 129.672,478.915 128.672,479.581 127.5,480C 128.167,480.333 128.833,480.667 129.5,481C 126.682,483.869 127.348,485.369 131.5,485.5C 130.577,481.151 131.91,477.817 135.5,475.5C 136.298,475.957 136.631,476.624 136.5,477.5C 135.503,477.47 134.836,477.97 134.5,479C 134.763,480.946 135.763,481.612 137.5,481C 140.659,477.918 144.325,475.584 148.5,474C 149.191,472.933 149.691,471.766 150,470.5C 153.337,475.171 156.171,480.171 158.5,485.5C 157.426,486.885 156.093,488.051 154.5,489C 155.167,489.333 155.833,489.667 156.5,490C 156.268,492.391 155.768,494.891 155,497.5C 155.333,497.833 155.667,498.167 156,498.5C 157.031,497.3 157.865,495.966 158.5,494.5C 157.577,492.871 157.243,491.371 157.5,490C 158.793,489.51 160.127,489.343 161.5,489.5C 162.538,492.581 163.872,495.581 165.5,498.5C 159.749,502.926 153.749,506.926 147.5,510.5C 145.219,511.608 143.052,512.942 141,514.5C 132.308,499.763 123.141,485.43 113.5,471.5C 107.167,458.825 99.8341,446.825 91.5,435.5C 90.1722,430.835 87.8389,426.835 84.5,423.5C 84.2503,421.326 83.2503,419.659 81.5,418.5C 80.2262,415.24 78.5595,412.24 76.5,409.5C 81.4856,405.339 86.819,401.673 92.5,398.5C 97.407,396.261 102.074,393.594 106.5,390.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b9a091\",d:\"M 152.5,479.5 C 153.586,479.62 154.253,480.287 154.5,481.5C 150.539,487.122 145.205,490.789 138.5,492.5C 137.571,493.689 137.238,495.022 137.5,496.5C 135.41,496.55 134.077,495.55 133.5,493.5C 134.853,492.476 135.52,491.143 135.5,489.5C 137.199,489.66 138.866,489.494 140.5,489C 142.596,487.234 144.929,485.901 147.5,485C 149.766,483.574 151.432,481.74 152.5,479.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c7ab96\",d:\"M 136.5,477.5 C 136.631,476.624 136.298,475.957 135.5,475.5C 131.91,477.817 130.577,481.151 131.5,485.5C 127.348,485.369 126.682,483.869 129.5,481C 128.833,480.667 128.167,480.333 127.5,480C 128.672,479.581 129.672,478.915 130.5,478C 128.244,478.615 125.911,478.948 123.5,479C 124.833,477.16 124.666,476.66 123,477.5C 122.59,476.099 122.09,474.766 121.5,473.5C 122.552,473.351 123.552,473.517 124.5,474C 123.304,474.654 123.304,475.154 124.5,475.5C 125.631,474.249 126.964,473.249 128.5,472.5C 129.955,473.39 131.289,473.39 132.5,472.5C 132.833,473.167 133.167,473.833 133.5,474.5C 135.614,473.966 137.448,472.966 139,471.5C 139.333,472.167 139.667,472.833 140,473.5C 140.853,471.875 141.853,471.542 143,472.5C 143.451,470.071 144.285,469.904 145.5,472C 142.51,473.829 139.51,475.663 136.5,477.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#504c48\",d:\"M 72.5,487.5 C 73.1667,487.5 73.8333,487.5 74.5,487.5C 76.5116,490.205 78.5116,492.872 80.5,495.5C 80.5,496.833 80.5,498.167 80.5,499.5C 79.448,499.649 78.448,499.483 77.5,499C 75.0926,496.262 73.0926,493.262 71.5,490C 71.7432,489.098 72.0766,488.265 72.5,487.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6e5c53\",d:\"M 341.5,464.5 C 343.278,467.566 344.945,470.566 346.5,473.5C 347.61,481.833 349.943,489.833 353.5,497.5C 352.777,499.782 352.443,502.116 352.5,504.5C 351.202,501.65 350.036,498.65 349,495.5C 348.005,494.934 347.172,494.267 346.5,493.5C 347.097,493.265 347.43,492.765 347.5,492C 345.398,485.193 343.398,478.36 341.5,471.5C 341.5,470.833 341.167,470.5 340.5,470.5C 341.341,468.621 341.675,466.621 341.5,464.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c69584\",d:\"M 333.5,448.5 C 335.07,451.314 336.403,454.314 337.5,457.5C 338.2,461.798 338.533,466.131 338.5,470.5C 338.737,476.376 338.737,482.043 338.5,487.5C 337.418,481.115 336.918,474.781 337,468.5C 334.631,468.273 332.131,468.107 329.5,468C 330.571,466.175 329.904,465.008 327.5,464.5C 327.39,466.098 327.057,467.765 326.5,469.5C 328.596,478.415 331.429,487.082 335,495.5C 336.616,493.287 337.783,490.953 338.5,488.5C 340.005,494.927 339.338,501.26 336.5,507.5C 334.929,506.691 333.262,506.357 331.5,506.5C 330.849,504.174 330.182,501.841 329.5,499.5C 331.323,495.401 330.823,491.734 328,488.5C 326.184,480.87 324.684,473.203 323.5,465.5C 326.315,462.584 329.149,459.584 332,456.5C 332.585,455.002 332.085,454.002 330.5,453.5C 330.5,452.833 330.5,452.167 330.5,451.5C 331.5,451.5 332.5,451.5 333.5,451.5C 333.5,450.5 333.5,449.5 333.5,448.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#51271f\",d:\"M 340.5,478.5 C 340.94,484.16 342.94,489.16 346.5,493.5C 347.172,494.267 348.005,494.934 349,495.5C 350.036,498.65 351.202,501.65 352.5,504.5C 352.328,505.492 352.662,506.158 353.5,506.5C 353.5,508.167 353.5,509.833 353.5,511.5C 353.669,516.041 353.002,516.374 351.5,512.5C 350.289,513.274 350.289,514.107 351.5,515C 348.51,515.847 347.176,514.68 347.5,511.5C 346.5,511.5 345.5,511.5 344.5,511.5C 343.989,505.951 342.989,500.617 341.5,495.5C 340.98,490.486 340.313,485.486 339.5,480.5C 339.543,479.584 339.876,478.917 340.5,478.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#deb8a6\",d:\"M 396.5,486.5 C 397.397,487.598 398.23,487.598 399,486.5C 399.333,485.167 399.667,483.833 400,482.5C 402.109,483.035 402.609,484.035 401.5,485.5C 402.365,486.583 403.365,486.749 404.5,486C 408.46,483.911 408.46,481.911 404.5,480C 406.846,480.792 409.179,480.625 411.5,479.5C 412.158,482.807 412.158,485.64 411.5,488C 410.167,488.333 408.833,488.667 407.5,489C 408.961,490.351 410.294,491.851 411.5,493.5C 410.391,495.214 411.058,495.881 413.5,495.5C 414.167,492.167 414.833,488.833 415.5,485.5C 416.699,488.6 418.199,491.6 420,494.5C 423.204,500.985 421.537,505.652 415,508.5C 414.107,507.919 413.107,507.585 412,507.5C 408.906,509.138 405.739,510.472 402.5,511.5C 400.5,510.833 398.5,510.167 396.5,509.5C 393.17,512 389.503,513.667 385.5,514.5C 384.833,514.5 384.167,514.5 383.5,514.5C 383.786,512.723 384.453,511.056 385.5,509.5C 385.392,508.558 385.059,507.725 384.5,507C 385.182,497.808 386.348,488.641 388,479.5C 389.07,482.242 390.57,484.742 392.5,487C 394.066,487.765 395.399,487.598 396.5,486.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e1c9be\",d:\"M 415.5,477.5 C 417.707,482.179 420.207,486.846 423,491.5C 423.464,497.529 423.131,503.529 422,509.5C 417.711,510.571 413.544,511.904 409.5,513.5C 405.367,513.954 401.034,513.954 396.5,513.5C 394.311,513.594 392.311,514.261 390.5,515.5C 388.929,514.691 387.262,514.357 385.5,514.5C 389.503,513.667 393.17,512 396.5,509.5C 398.5,510.167 400.5,510.833 402.5,511.5C 405.739,510.472 408.906,509.138 412,507.5C 413.107,507.585 414.107,507.919 415,508.5C 421.537,505.652 423.204,500.985 420,494.5C 418.199,491.6 416.699,488.6 415.5,485.5C 415.5,482.833 415.5,480.167 415.5,477.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ac806b\",d:\"M 255.5,476.5 C 256.18,479.062 256.347,481.729 256,484.5C 257.707,480.933 259.541,480.766 261.5,484C 259.993,484.837 259.493,486.004 260,487.5C 261,488.833 262,488.833 263,487.5C 263.167,488 263.333,488.5 263.5,489C 262.882,492.525 261.549,493.025 259.5,490.5C 259.167,490.833 258.833,491.167 258.5,491.5C 260.917,493.494 260.917,495.327 258.5,497C 260.741,498.522 263.074,499.855 265.5,501C 263.963,502.11 263.297,503.61 263.5,505.5C 259.834,507.487 256.834,510.153 254.5,513.5C 252.657,512.061 250.99,512.228 249.5,514C 249.833,514.333 250.167,514.667 250.5,515C 246.896,516.154 243.229,516.987 239.5,517.5C 240.149,521.802 238.649,523.135 235,521.5C 232.576,522.571 230.076,523.571 227.5,524.5C 227.709,525.086 228.043,525.586 228.5,526C 226.773,529.431 224.107,531.097 220.5,531C 219.663,529.989 219.33,528.822 219.5,527.5C 217.41,527.55 216.077,526.55 215.5,524.5C 217.015,522.453 217.849,520.119 218,517.5C 219.875,518.274 221.709,519.107 223.5,520C 223.296,517.379 223.296,514.545 223.5,511.5C 226.448,511.777 229.281,511.444 232,510.5C 233.994,506.686 235.494,502.686 236.5,498.5C 236.291,497.006 235.624,495.839 234.5,495C 235.448,494.517 236.448,494.351 237.5,494.5C 237.659,491.845 238.659,489.512 240.5,487.5C 242.93,489.571 245.597,489.904 248.5,488.5C 247.391,486.615 246.557,484.615 246,482.5C 245.667,482.833 245.333,483.167 245,483.5C 242.985,481.527 243.152,479.86 245.5,478.5C 245.167,477.833 244.833,477.167 244.5,476.5C 247.719,476.057 251.386,476.057 255.5,476.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a06b5b\",d:\"M 330.5,453.5 C 332.085,454.002 332.585,455.002 332,456.5C 329.149,459.584 326.315,462.584 323.5,465.5C 324.684,473.203 326.184,480.87 328,488.5C 330.823,491.734 331.323,495.401 329.5,499.5C 330.182,501.841 330.849,504.174 331.5,506.5C 333.262,506.357 334.929,506.691 336.5,507.5C 339.338,501.26 340.005,494.927 338.5,488.5C 338.5,488.167 338.5,487.833 338.5,487.5C 338.737,482.043 338.737,476.376 338.5,470.5C 339.167,470.5 339.833,470.5 340.5,470.5C 341.167,470.5 341.5,470.833 341.5,471.5C 340.624,471.369 339.957,471.702 339.5,472.5C 340.348,474.409 340.682,476.409 340.5,478.5C 339.876,478.917 339.543,479.584 339.5,480.5C 340.313,485.486 340.98,490.486 341.5,495.5C 341.5,500.833 341.5,506.167 341.5,511.5C 340.07,511.421 338.736,511.754 337.5,512.5C 335.45,511.923 334.45,510.59 334.5,508.5C 333.022,508.762 331.689,508.429 330.5,507.5C 328.105,503.207 326.105,498.707 324.5,494C 325.409,492.211 325.576,490.377 325,488.5C 323.5,486.167 322,483.833 320.5,481.5C 320.282,476.731 319.282,472.398 317.5,468.5C 320.021,466.299 322.521,463.966 325,461.5C 325.483,460.552 325.649,459.552 325.5,458.5C 326.167,455.833 327.833,454.167 330.5,453.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bdbeba\",d:\"M 357.5,479.5 C 360.852,486.867 364.185,494.2 367.5,501.5C 367.5,502.167 367.5,502.833 367.5,503.5C 367.179,505.048 366.179,505.715 364.5,505.5C 361.753,505.813 359.086,505.48 356.5,504.5C 355.21,498.044 353.544,491.711 351.5,485.5C 352.354,480.799 352.521,476.132 352,471.5C 353.127,474.789 354.961,477.455 357.5,479.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b6b1b1\",d:\"M 91.5,492.5 C 99.1545,503.129 106.821,513.796 114.5,524.5C 113.957,524.56 113.624,524.893 113.5,525.5C 114.103,529.696 115.103,533.03 116.5,535.5C 113.521,531.568 110.521,527.568 107.5,523.5C 105.872,522.465 104.205,522.465 102.5,523.5C 102.579,522.07 102.246,520.736 101.5,519.5C 98.3371,516.683 96.0038,513.35 94.5,509.5C 96.9233,511.137 99.59,511.637 102.5,511C 100.833,509.667 99.1667,508.333 97.5,507C 97.9574,506.586 98.2907,506.086 98.5,505.5C 96.8076,503.641 95.3076,501.641 94,499.5C 92.4345,498.939 91.1011,499.606 90,501.5C 89.5,500.5 89,499.5 88.5,498.5C 89.2472,498.264 90.0805,497.93 91,497.5C 91.4643,496.906 91.631,496.239 91.5,495.5C 91.5,494.5 91.5,493.5 91.5,492.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b1b0b5\",d:\"M 459.5,495.5 C 468.833,499.167 478.167,502.833 487.5,506.5C 486.5,506.5 485.5,506.5 484.5,506.5C 474.722,502.739 464.722,499.239 454.5,496C 453.304,495.346 453.304,494.846 454.5,494.5C 456.071,495.309 457.738,495.643 459.5,495.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#7f665c\",d:\"M 24.5,484.5 C 29.562,488.559 33.8953,493.226 37.5,498.5C 37.631,499.239 37.4643,499.906 37,500.5C 33.6054,496.86 30.1054,493.36 26.5,490C 24.0937,489.221 22.427,490.054 21.5,492.5C 25.8945,496.894 30.2278,501.228 34.5,505.5C 36.1349,506.33 37.8016,506.497 39.5,506C 38.4831,508.84 39.1498,511.34 41.5,513.5C 40.8501,513.804 40.1835,514.137 39.5,514.5C 37.5592,512.166 35.8925,509.666 34.5,507C 33,505.833 31.5,504.667 30,503.5C 29.586,503.957 29.086,504.291 28.5,504.5C 27.1924,502.359 25.6924,500.359 24,498.5C 23.6667,498.833 23.3333,499.167 23,499.5C 22.0975,498.299 20.9308,497.465 19.5,497C 19.8333,496.667 20.1667,496.333 20.5,496C 17.7556,492.557 15.4223,488.724 13.5,484.5C 13.7729,481.727 15.2729,480.061 18,479.5C 20.5897,480.766 22.7564,482.432 24.5,484.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#766a66\",d:\"M 123.5,527.5 C 123.167,528.167 122.833,528.833 122.5,529.5C 111.401,517.99 101.734,505.323 93.5,491.5C 95.0672,490.319 95.9005,488.653 96,486.5C 96.3333,486.833 96.6667,487.167 97,487.5C 105.1,501.38 113.933,514.714 123.5,527.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#79493c\",d:\"M 317.5,468.5 C 319.282,472.398 320.282,476.731 320.5,481.5C 322,483.833 323.5,486.167 325,488.5C 325.576,490.377 325.409,492.211 324.5,494C 326.105,498.707 328.105,503.207 330.5,507.5C 331.689,508.429 333.022,508.762 334.5,508.5C 334.45,510.59 335.45,511.923 337.5,512.5C 338.736,511.754 340.07,511.421 341.5,511.5C 341.664,514.187 341.497,516.854 341,519.5C 339.13,521.405 337.63,523.572 336.5,526C 337.094,526.464 337.761,526.631 338.5,526.5C 337.001,527.494 335.334,527.494 333.5,526.5C 333.672,525.508 333.338,524.842 332.5,524.5C 329.427,520.028 326.593,515.361 324,510.5C 322.226,499.064 319.392,488.064 315.5,477.5C 315.5,476.833 315.5,476.167 315.5,475.5C 315.166,472.812 315.832,470.479 317.5,468.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f6f5f7\",d:\"M 454.5,491.5 C 453.761,491.369 453.094,491.536 452.5,492C 453.76,493.113 454.927,493.28 456,492.5C 457.145,493.636 458.312,494.636 459.5,495.5C 457.738,495.643 456.071,495.309 454.5,494.5C 453.304,494.846 453.304,495.346 454.5,496C 464.722,499.239 474.722,502.739 484.5,506.5C 485.122,508.335 486.456,509.502 488.5,510C 487.833,510.167 487.167,510.333 486.5,510.5C 476.951,506.964 467.284,504.131 457.5,502C 458.167,503.333 459.167,504.333 460.5,505C 459.5,505.5 458.5,506 457.5,506.5C 452.842,504.986 448.176,503.82 443.5,503C 448.201,505.008 452.867,507.008 457.5,509C 455.325,508.951 453.158,508.451 451,507.5C 450.5,507.667 450,507.833 449.5,508C 450.672,508.419 451.672,509.085 452.5,510C 452.167,510.167 451.833,510.333 451.5,510.5C 448.711,508.702 445.711,508.202 442.5,509C 445.706,509.946 448.539,511.446 451,513.5C 451.718,512.549 452.551,512.383 453.5,513C 454.833,513.667 454.833,514.333 453.5,515C 454.5,515.667 455.5,515.667 456.5,515C 455.304,514.346 455.304,513.846 456.5,513.5C 460.075,514.6 459.908,515.934 456,517.5C 454.211,516.591 452.377,516.424 450.5,517C 456.259,519.53 462.259,521.363 468.5,522.5C 471.261,524.205 474.261,525.538 477.5,526.5C 476.828,527.267 475.995,527.934 475,528.5C 471.355,527.986 467.522,527.486 463.5,527C 464.328,527.915 465.328,528.581 466.5,529C 462.5,529.667 462.5,530.333 466.5,531C 465.584,531.278 464.918,531.778 464.5,532.5C 462.932,531.527 461.265,531.36 459.5,532C 465.49,534.274 471.49,536.44 477.5,538.5C 476.909,539.151 476.243,539.818 475.5,540.5C 476.641,541.425 476.641,542.259 475.5,543C 473.714,544.293 472.047,544.793 470.5,544.5C 472.341,548.128 475.341,550.128 479.5,550.5C 479.137,551.183 478.804,551.85 478.5,552.5C 467.147,548.827 455.814,545.16 444.5,541.5C 444.5,541.167 444.5,540.833 444.5,540.5C 445.239,540.631 445.906,540.464 446.5,540C 445.437,538.812 444.103,538.312 442.5,538.5C 441.992,533.098 440.159,532.098 437,535.5C 436.833,534.833 436.667,534.167 436.5,533.5C 437.634,531.462 437.634,529.462 436.5,527.5C 437.729,526.719 439.062,526.219 440.5,526C 439.062,525.781 437.729,525.281 436.5,524.5C 437.101,520.535 437.101,516.202 436.5,511.5C 434.833,511.5 433.167,511.5 431.5,511.5C 430.414,503.846 430.414,496.179 431.5,488.5C 436.999,488.413 439.332,491.08 438.5,496.5C 443.531,497.632 448.365,499.298 453,501.5C 453.5,501.167 454,500.833 454.5,500.5C 449.352,498.619 444.352,496.453 439.5,494C 440.833,493.333 440.833,492.667 439.5,492C 440.167,491.833 440.833,491.667 441.5,491.5C 444.756,492.981 448.089,493.814 451.5,494C 448.099,492.309 444.599,490.809 441,489.5C 440.383,488.551 440.549,487.718 441.5,487C 443.811,487.155 446.144,487.155 448.5,487C 440.733,484.443 440.566,482.609 448,481.5C 448.5,483.333 449.667,484.5 451.5,485C 450.833,485.333 450.167,485.667 449.5,486C 450.692,488.355 452.359,490.188 454.5,491.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#5c4843\",d:\"M 49.5,464.5 C 59.1446,477.977 68.9779,491.31 79,504.5C 80.5123,502.043 81.8456,502.043 83,504.5C 84.6665,503.66 84.8331,504.16 83.5,506C 84.8932,507.171 85.7265,508.671 86,510.5C 87.0674,511.191 88.2341,511.691 89.5,512C 89.1667,512.333 88.8333,512.667 88.5,513C 89.8721,514.242 90.8721,515.742 91.5,517.5C 92.325,518.386 93.325,518.719 94.5,518.5C 94.762,519.978 94.4287,521.311 93.5,522.5C 88.8144,517.142 84.4811,511.475 80.5,505.5C 79.6801,507.319 78.6801,508.986 77.5,510.5C 72.3007,508.493 68.634,504.826 66.5,499.5C 64.2816,497.28 62.9483,494.613 62.5,491.5C 61.5,491.5 60.5,491.5 59.5,491.5C 59.5792,490.07 59.2458,488.736 58.5,487.5C 56.2354,486.3 54.4021,484.633 53,482.5C 52.3828,481.551 52.5494,480.718 53.5,480C 52.5838,479.626 51.7504,479.126 51,478.5C 49.3333,475.5 47.6667,472.5 46,469.5C 45.2025,467.741 45.3691,466.074 46.5,464.5C 47.5272,463.209 48.5272,463.209 49.5,464.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cd9e8d\",d:\"M 379.5,428.5 C 379.918,429.222 380.584,429.722 381.5,430C 381.69,432.992 381.357,436.159 380.5,439.5C 382.356,449.913 384.356,460.246 386.5,470.5C 388.527,470.338 390.527,470.505 392.5,471C 393.218,473.461 393.885,475.961 394.5,478.5C 395.325,479.386 396.325,479.719 397.5,479.5C 397.326,481.861 396.993,484.194 396.5,486.5C 395.399,487.598 394.066,487.765 392.5,487C 390.57,484.742 389.07,482.242 388,479.5C 386.348,488.641 385.182,497.808 384.5,507C 385.059,507.725 385.392,508.558 385.5,509.5C 384.453,511.056 383.786,512.723 383.5,514.5C 382.833,514.5 382.167,514.5 381.5,514.5C 382.116,510.089 383.116,505.756 384.5,501.5C 383.181,490.254 383.181,478.92 384.5,467.5C 383.5,467.5 382.5,467.5 381.5,467.5C 381.237,462.876 380.237,458.542 378.5,454.5C 378.557,452.116 378.223,449.782 377.5,447.5C 375.341,443.701 373.674,439.701 372.5,435.5C 372.737,434.209 372.404,433.209 371.5,432.5C 373.579,430.127 376.246,428.794 379.5,428.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ac9794\",d:\"M 29.5,467.5 C 29.5,468.167 29.5,468.833 29.5,469.5C 26.0666,471.305 23.0666,473.638 20.5,476.5C 19.475,476.897 19.3083,477.563 20,478.5C 22.2273,479.955 23.7273,481.955 24.5,484.5C 22.7564,482.432 20.5897,480.766 18,479.5C 15.2729,480.061 13.7729,481.727 13.5,484.5C 15.4223,488.724 17.7556,492.557 20.5,496C 20.1667,496.333 19.8333,496.667 19.5,497C 20.9308,497.465 22.0975,498.299 23,499.5C 23.3333,499.167 23.6667,498.833 24,498.5C 25.6924,500.359 27.1924,502.359 28.5,504.5C 29.086,504.291 29.586,503.957 30,503.5C 31.5,504.667 33,505.833 34.5,507C 35.8925,509.666 37.5592,512.166 39.5,514.5C 40.1835,514.137 40.8501,513.804 41.5,513.5C 41.4606,514.583 41.1272,515.583 40.5,516.5C 41.5217,517.354 42.3551,518.354 43,519.5C 44.073,518.72 45.2396,518.887 46.5,520C 46.1667,520.333 45.8333,520.667 45.5,521C 48.554,522.54 51.2206,524.707 53.5,527.5C 54.9479,528.354 56.2813,529.354 57.5,530.5C 58.1067,530.376 58.44,530.043 58.5,529.5C 58.8333,529.5 59.1667,529.5 59.5,529.5C 60.6282,532.462 62.6282,534.629 65.5,536C 65.2716,536.399 64.9382,536.565 64.5,536.5C 62.3502,536.905 60.3502,537.405 58.5,538C 62.2915,535.525 61.9582,533.358 57.5,531.5C 56.0815,532.005 55.4148,533.005 55.5,534.5C 53.629,534.859 52.129,535.859 51,537.5C 48.4201,532.423 45.2535,527.756 41.5,523.5C 37.4866,521.494 33.8199,518.994 30.5,516C 23.9598,514.73 18.2931,511.897 13.5,507.5C 13.0557,505.887 12.0557,504.72 10.5,504C 12.628,500.87 15.128,498.037 18,495.5C 18.4828,494.552 18.6495,493.552 18.5,492.5C 15.632,492.915 13.4653,491.915 12,489.5C 8.70263,491.795 5.70263,494.462 3,497.5C 2.15532,495.389 1.32198,493.389 0.5,491.5C 0.33591,488.813 0.502577,486.146 1,483.5C 7.47287,478.36 13.3062,472.527 18.5,466C 21.7256,464.801 25.059,464.301 28.5,464.5C 28.2627,465.791 28.596,466.791 29.5,467.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ecf0fa\",d:\"M 563.5,499.5 C 563.5,525.167 563.5,550.833 563.5,576.5C 561.409,576.682 559.409,576.348 557.5,575.5C 557.167,576.167 556.833,576.833 556.5,577.5C 553.446,576.653 550.446,575.653 547.5,574.5C 548.33,572.865 548.497,571.198 548,569.5C 548.718,570.451 549.551,570.617 550.5,570C 547.782,568.585 547.115,566.585 548.5,564C 546.305,562.627 543.971,562.294 541.5,563C 543.004,564.337 544.004,566.004 544.5,568C 543.619,569.471 542.286,570.304 540.5,570.5C 534.183,569.839 528.183,568.173 522.5,565.5C 523.376,564.749 524.376,564.249 525.5,564C 524.376,563.751 523.376,563.251 522.5,562.5C 525.54,560.487 528.873,559.153 532.5,558.5C 525.947,556.76 519.614,554.427 513.5,551.5C 511.995,554.131 511.329,553.797 511.5,550.5C 509.436,550.313 507.436,549.813 505.5,549C 507.856,548.845 510.189,548.845 512.5,549C 511.672,548.085 510.672,547.419 509.5,547C 510.167,546.667 510.833,546.333 511.5,546C 510.1,544.562 508.433,543.729 506.5,543.5C 506.073,540.212 506.74,537.212 508.5,534.5C 507.911,531.36 507.244,528.36 506.5,525.5C 509.635,515.429 512.968,505.429 516.5,495.5C 522.884,497.611 529.384,499.277 536,500.5C 537.811,499.576 537.645,498.743 535.5,498C 536.56,496.702 537.726,495.535 539,494.5C 543.299,494.78 547.299,495.78 551,497.5C 551.333,496.833 551.667,496.167 552,495.5C 552.318,497.061 553.151,498.228 554.5,499C 557.597,498.926 560.597,499.093 563.5,499.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dbd6d4\",d:\"M 13.5,507.5 C 12.8826,507.611 12.3826,507.944 12,508.5C 8.63979,504.787 5.13979,501.621 1.5,499C 3.69762,502.023 6.03096,504.856 8.5,507.5C 5.23273,509.427 2.23273,511.761 -0.5,514.5C -0.5,508.5 -0.5,502.5 -0.5,496.5C 0.451145,495.081 0.784479,493.415 0.5,491.5C 1.32198,493.389 2.15532,495.389 3,497.5C 5.70263,494.462 8.70263,491.795 12,489.5C 13.4653,491.915 15.632,492.915 18.5,492.5C 18.6495,493.552 18.4828,494.552 18,495.5C 15.128,498.037 12.628,500.87 10.5,504C 12.0557,504.72 13.0557,505.887 13.5,507.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#614f48\",d:\"M 37.5,498.5 C 39.1667,497.5 40.5,496.167 41.5,494.5C 41.8333,494.5 42.1667,494.5 42.5,494.5C 42.5,495.167 42.5,495.833 42.5,496.5C 40.4012,497.37 40.0679,498.703 41.5,500.5C 44.6449,504.313 48.3116,507.48 52.5,510C 53.305,511.113 53.9717,512.279 54.5,513.5C 51.8726,512.454 49.3726,511.12 47,509.5C 46.5,510 46,510.5 45.5,511C 46.6667,511.5 47.5,512.333 48,513.5C 48.414,513.043 48.914,512.709 49.5,512.5C 50.782,514.179 51.782,516.013 52.5,518C 54.027,519.368 55.527,519.868 57,519.5C 57.4935,521.134 57.6602,522.801 57.5,524.5C 58.9305,524.421 60.2638,524.754 61.5,525.5C 61.8333,525 62.1667,524.5 62.5,524C 60.2785,522.392 58.9451,520.225 58.5,517.5C 61.9078,518.578 63.9078,520.911 64.5,524.5C 63.1667,525.833 61.8333,527.167 60.5,528.5C 59.8333,528.5 59.5,528.833 59.5,529.5C 59.1667,529.5 58.8333,529.5 58.5,529.5C 53.7914,523.124 48.1247,517.791 41.5,513.5C 39.1498,511.34 38.4831,508.84 39.5,506C 37.8016,506.497 36.1349,506.33 34.5,505.5C 30.2278,501.228 25.8945,496.894 21.5,492.5C 22.427,490.054 24.0937,489.221 26.5,490C 30.1054,493.36 33.6054,496.86 37,500.5C 37.4643,499.906 37.631,499.239 37.5,498.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#57382d\",d:\"M 161.5,489.5 C 167.18,497.521 171.847,506.188 175.5,515.5C 174.86,517.332 173.86,517.665 172.5,516.5C 169.581,510.673 167.248,504.673 165.5,498.5C 163.872,495.581 162.538,492.581 161.5,489.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f7f5f0\",d:\"M 392.5,436.5 C 396.239,440.898 400.239,445.231 404.5,449.5C 405.192,448.975 405.692,448.308 406,447.5C 406.216,449.384 406.883,451.051 408,452.5C 409.707,451.862 411.54,451.862 413.5,452.5C 413.729,454.433 414.562,456.1 416,457.5C 416.87,456.892 417.37,456.059 417.5,455C 416.491,453.832 415.491,452.665 414.5,451.5C 415.325,450.614 416.325,450.281 417.5,450.5C 417.281,449.325 417.614,448.325 418.5,447.5C 418.833,447.833 419.167,448.167 419.5,448.5C 420.05,450.657 420.717,452.657 421.5,454.5C 421.533,457.289 421.867,460.123 422.5,463C 425.482,463.498 428.482,463.665 431.5,463.5C 431.5,465.167 431.5,466.833 431.5,468.5C 433.734,468.62 435.901,468.287 438,467.5C 442.26,468.574 442.094,469.908 437.5,471.5C 436.5,470.833 435.5,470.167 434.5,469.5C 431.257,471.853 427.59,474.353 423.5,477C 429.565,475.8 435.232,476.967 440.5,480.5C 441.902,481.842 441.569,482.676 439.5,483C 440.138,484.707 440.138,486.54 439.5,488.5C 436.762,488.149 434.096,487.482 431.5,486.5C 430.537,486.97 430.537,487.637 431.5,488.5C 430.414,496.179 430.414,503.846 431.5,511.5C 433.167,511.5 434.833,511.5 436.5,511.5C 437.101,516.202 437.101,520.535 436.5,524.5C 437.729,525.281 439.062,525.781 440.5,526C 439.062,526.219 437.729,526.719 436.5,527.5C 437.634,529.462 437.634,531.462 436.5,533.5C 436.667,534.167 436.833,534.833 437,535.5C 440.159,532.098 441.992,533.098 442.5,538.5C 444.103,538.312 445.437,538.812 446.5,540C 445.906,540.464 445.239,540.631 444.5,540.5C 441.512,540.671 439.512,539.338 438.5,536.5C 437.109,537.645 435.776,537.645 434.5,536.5C 434.174,534.49 433.841,532.49 433.5,530.5C 432.088,529.194 430.421,528.36 428.5,528C 430.436,527.187 432.436,526.687 434.5,526.5C 434.5,525.167 434.5,523.833 434.5,522.5C 433.084,521.07 430.751,520.07 427.5,519.5C 426.623,516.699 425.456,514.032 424,511.5C 421.959,512.423 419.792,512.756 417.5,512.5C 417.281,513.675 417.614,514.675 418.5,515.5C 420.403,516.947 422.07,518.614 423.5,520.5C 424.396,519.494 425.062,519.494 425.5,520.5C 421.613,521.724 419.613,524.39 419.5,528.5C 418.912,526.274 418.578,523.941 418.5,521.5C 417.548,523.045 417.215,524.712 417.5,526.5C 416.325,526.719 415.325,526.386 414.5,525.5C 414.548,521.978 414.715,518.311 415,514.5C 414.667,514.833 414.333,515.167 414,515.5C 412.378,514.901 410.878,514.234 409.5,513.5C 413.544,511.904 417.711,510.571 422,509.5C 423.131,503.529 423.464,497.529 423,491.5C 420.207,486.846 417.707,482.179 415.5,477.5C 409.134,470.474 403.468,462.807 398.5,454.5C 399.167,454.167 399.833,453.833 400.5,453.5C 399.208,451.333 398.375,449 398,446.5C 394.534,444.769 392.368,441.935 391.5,438C 391.57,437.235 391.903,436.735 392.5,436.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#998176\",d:\"M 346.5,473.5 C 348.221,477.529 349.888,481.529 351.5,485.5C 353.544,491.711 355.21,498.044 356.5,504.5C 359.086,505.48 361.753,505.813 364.5,505.5C 365.988,512.618 368.322,519.451 371.5,526C 371.011,527.138 370.678,528.305 370.5,529.5C 368.876,529.64 367.71,528.973 367,527.5C 364.096,521.027 361.762,514.36 360,507.5C 357.959,506.577 355.792,506.244 353.5,506.5C 352.662,506.158 352.328,505.492 352.5,504.5C 352.443,502.116 352.777,499.782 353.5,497.5C 349.943,489.833 347.61,481.833 346.5,473.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ccc0b0\",d:\"M 268.5,507.5 C 268.328,511.971 267.494,512.304 266,508.5C 264.676,510.5 263.009,512.167 261,513.5C 260.667,513.167 260.333,512.833 260,512.5C 259.471,514.585 259.971,516.418 261.5,518C 258.54,523.968 255.706,523.802 253,517.5C 251.706,518.854 251.54,520.188 252.5,521.5C 250.167,522.167 247.833,522.833 245.5,523.5C 246.325,524.386 247.325,524.719 248.5,524.5C 248.675,526.621 248.341,528.621 247.5,530.5C 245.082,534.333 241.748,537 237.5,538.5C 238.357,534.594 238.357,530.76 237.5,527C 238.416,526.722 239.082,526.222 239.5,525.5C 240.677,523.968 242.011,522.468 243.5,521C 250.995,517.348 258.328,512.681 265.5,507C 266.577,506.53 267.577,506.697 268.5,507.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#efeff1\",d:\"M 484.5,506.5 C 485.5,506.5 486.5,506.5 487.5,506.5C 489.558,506.457 491.891,506.79 494.5,507.5C 495.482,506.859 496.482,506.193 497.5,505.5C 498.364,507.197 499.697,508.363 501.5,509C 499.833,509.333 498.167,509.667 496.5,510C 498.754,510.624 500.421,511.957 501.5,514C 497.861,513.722 494.194,513.722 490.5,514C 494.09,515.53 497.757,516.864 501.5,518C 500.934,518.995 500.267,519.828 499.5,520.5C 495.059,519.576 490.725,518.242 486.5,516.5C 486.167,516.833 485.833,517.167 485.5,517.5C 489.444,519.037 493.444,520.37 497.5,521.5C 498.263,522.268 499.263,522.768 500.5,523C 493.244,524.806 486.41,523.64 480,519.5C 479.25,520.126 478.416,520.626 477.5,521C 482.637,522.268 487.637,523.934 492.5,526C 491.167,526.333 489.833,526.667 488.5,527C 489.056,527.383 489.389,527.883 489.5,528.5C 482.488,526.496 475.488,524.496 468.5,522.5C 462.259,521.363 456.259,519.53 450.5,517C 452.377,516.424 454.211,516.591 456,517.5C 459.908,515.934 460.075,514.6 456.5,513.5C 455.304,513.846 455.304,514.346 456.5,515C 455.5,515.667 454.5,515.667 453.5,515C 454.833,514.333 454.833,513.667 453.5,513C 452.551,512.383 451.718,512.549 451,513.5C 448.539,511.446 445.706,509.946 442.5,509C 445.711,508.202 448.711,508.702 451.5,510.5C 451.833,510.333 452.167,510.167 452.5,510C 451.672,509.085 450.672,508.419 449.5,508C 450,507.833 450.5,507.667 451,507.5C 453.158,508.451 455.325,508.951 457.5,509C 452.867,507.008 448.201,505.008 443.5,503C 448.176,503.82 452.842,504.986 457.5,506.5C 458.5,506 459.5,505.5 460.5,505C 459.167,504.333 458.167,503.333 457.5,502C 467.284,504.131 476.951,506.964 486.5,510.5C 487.167,510.333 487.833,510.167 488.5,510C 486.456,509.502 485.122,508.335 484.5,506.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b2b2b5\",d:\"M 461.5,509.5 C 462.601,508.402 463.934,508.235 465.5,509C 470.685,511.3 476.018,513.3 481.5,515C 474.649,514.109 467.983,512.276 461.5,509.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ae8771\",d:\"M 255.5,476.5 C 251.386,476.057 247.719,476.057 244.5,476.5C 244.833,477.167 245.167,477.833 245.5,478.5C 243.152,479.86 242.985,481.527 245,483.5C 245.333,483.167 245.667,482.833 246,482.5C 246.557,484.615 247.391,486.615 248.5,488.5C 245.597,489.904 242.93,489.571 240.5,487.5C 238.659,489.512 237.659,491.845 237.5,494.5C 236.448,494.351 235.448,494.517 234.5,495C 235.624,495.839 236.291,497.006 236.5,498.5C 235.494,502.686 233.994,506.686 232,510.5C 229.281,511.444 226.448,511.777 223.5,511.5C 223.296,514.545 223.296,517.379 223.5,520C 221.709,519.107 219.875,518.274 218,517.5C 217.849,520.119 217.015,522.453 215.5,524.5C 216.077,526.55 217.41,527.55 219.5,527.5C 219.33,528.822 219.663,529.989 220.5,531C 224.107,531.097 226.773,529.431 228.5,526C 228.043,525.586 227.709,525.086 227.5,524.5C 230.076,523.571 232.576,522.571 235,521.5C 238.649,523.135 240.149,521.802 239.5,517.5C 243.229,516.987 246.896,516.154 250.5,515C 250.167,514.667 249.833,514.333 249.5,514C 250.99,512.228 252.657,512.061 254.5,513.5C 256.834,510.153 259.834,507.487 263.5,505.5C 265.117,504.962 266.784,504.629 268.5,504.5C 268.5,505.5 268.5,506.5 268.5,507.5C 267.577,506.697 266.577,506.53 265.5,507C 258.328,512.681 250.995,517.348 243.5,521C 242.011,522.468 240.677,523.968 239.5,525.5C 236.048,525.448 233.881,527.115 233,530.5C 232.586,530.043 232.086,529.709 231.5,529.5C 227.573,532.438 223.24,534.438 218.5,535.5C 217.048,536.94 216.048,538.606 215.5,540.5C 215.167,540.5 214.833,540.5 214.5,540.5C 212.003,542.871 209.003,543.871 205.5,543.5C 203.958,542.837 202.291,542.17 200.5,541.5C 201.902,540.158 201.569,539.324 199.5,539C 196.854,538.503 194.187,538.336 191.5,538.5C 191.034,540.201 191.034,541.701 191.5,543C 189.193,543.779 187.193,543.279 185.5,541.5C 184.914,541.709 184.414,542.043 184,542.5C 183.3,540.968 182.134,539.968 180.5,539.5C 179.777,536.93 178.61,534.597 177,532.5C 175.657,533.214 174.324,532.88 173,531.5C 172.517,532.448 172.351,533.448 172.5,534.5C 170.801,534.62 169.135,534.954 167.5,535.5C 166.287,535.253 165.62,534.586 165.5,533.5C 167.694,531.779 168.861,529.445 169,526.5C 169.308,527.308 169.808,527.975 170.5,528.5C 171.635,526.293 172.301,523.96 172.5,521.5C 175.31,520.52 177.976,519.187 180.5,517.5C 181.328,518.415 182.328,519.081 183.5,519.5C 185.819,518.936 188.153,518.436 190.5,518C 190.167,517.667 189.833,517.333 189.5,517C 192.084,515.087 194.584,515.253 197,517.5C 197.833,517.167 198.667,516.833 199.5,516.5C 201.515,513.26 202.848,509.76 203.5,506C 202.258,505.689 201.258,506.189 200.5,507.5C 199.5,507 198.5,506.5 197.5,506C 199.708,504.953 201.374,503.453 202.5,501.5C 210.795,496.014 219.129,490.514 227.5,485C 229.5,484.667 231.5,484.333 233.5,484C 233.034,482.701 233.034,481.201 233.5,479.5C 235.5,479.5 237.5,479.5 239.5,479.5C 239.5,478.5 239.5,477.5 239.5,476.5C 237.833,476.5 236.167,476.5 234.5,476.5C 234.5,475.167 234.5,473.833 234.5,472.5C 233.022,472.762 231.689,472.429 230.5,471.5C 229.215,468.979 228.548,466.313 228.5,463.5C 232.182,463.335 235.848,463.501 239.5,464C 242.265,464.125 243.932,464.958 244.5,466.5C 245.167,466.333 245.833,466.167 246.5,466C 245.304,465.346 245.304,464.846 246.5,464.5C 247.192,465.025 247.692,465.692 248,466.5C 248.333,466.167 248.667,465.833 249,465.5C 253.088,465.852 256.255,467.685 258.5,471C 257.576,472.15 257.576,473.15 258.5,474C 258,474.5 257.5,475 257,475.5C 255.893,474.288 255.393,474.621 255.5,476.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#5f3e30\",d:\"M 341.5,495.5 C 342.989,500.617 343.989,505.951 344.5,511.5C 345.5,511.5 346.5,511.5 347.5,511.5C 347.176,514.68 348.51,515.847 351.5,515C 350.289,514.107 350.289,513.274 351.5,512.5C 353.002,516.374 353.669,516.041 353.5,511.5C 354.552,511.649 355.552,511.483 356.5,511C 355.304,510.346 355.304,509.846 356.5,509.5C 357.861,511.028 359.028,512.695 360,514.5C 360.873,520.446 362.539,526.113 365,531.5C 365.792,533.587 366.959,535.421 368.5,537C 367.529,538.204 366.529,538.704 365.5,538.5C 366.63,539.622 367.297,540.956 367.5,542.5C 364.723,540.731 362.723,538.398 361.5,535.5C 360.985,533.106 360.319,530.772 359.5,528.5C 359.411,523.824 357.078,520.991 352.5,520C 353.696,519.346 353.696,518.846 352.5,518.5C 351.41,519.727 350.076,520.56 348.5,521C 349.458,522.147 349.125,523.147 347.5,524C 344.343,524.396 341.343,525.229 338.5,526.5C 337.761,526.631 337.094,526.464 336.5,526C 337.63,523.572 339.13,521.405 341,519.5C 341.497,516.854 341.664,514.187 341.5,511.5C 341.5,506.167 341.5,500.833 341.5,495.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#463932\",d:\"M 54.5,513.5 C 54.894,515.71 56.2273,517.043 58.5,517.5C 58.9451,520.225 60.2785,522.392 62.5,524C 62.1667,524.5 61.8333,525 61.5,525.5C 60.2638,524.754 58.9305,524.421 57.5,524.5C 57.6602,522.801 57.4935,521.134 57,519.5C 55.527,519.868 54.027,519.368 52.5,518C 51.782,516.013 50.782,514.179 49.5,512.5C 48.914,512.709 48.414,513.043 48,513.5C 47.5,512.333 46.6667,511.5 45.5,511C 46,510.5 46.5,510 47,509.5C 49.3726,511.12 51.8726,512.454 54.5,513.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#acacb1\",d:\"M 499.5,520.5 C 499.158,521.338 498.492,521.672 497.5,521.5C 493.444,520.37 489.444,519.037 485.5,517.5C 485.833,517.167 486.167,516.833 486.5,516.5C 490.725,518.242 495.059,519.576 499.5,520.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#846e6a\",d:\"M 41.5,513.5 C 48.1247,517.791 53.7914,523.124 58.5,529.5C 58.44,530.043 58.1067,530.376 57.5,530.5C 56.2813,529.354 54.9479,528.354 53.5,527.5C 51.2206,524.707 48.554,522.54 45.5,521C 45.8333,520.667 46.1667,520.333 46.5,520C 45.2396,518.887 44.073,518.72 43,519.5C 42.3551,518.354 41.5217,517.354 40.5,516.5C 41.1272,515.583 41.4606,514.583 41.5,513.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bea9ab\",d:\"M 8.5,507.5 C 12.7145,510.419 17.0479,513.252 21.5,516C 23.4875,517.319 24.6541,519.152 25,521.5C 25.3826,520.944 25.8826,520.611 26.5,520.5C 29.2678,523.771 32.2678,526.938 35.5,530C 34.0625,531.241 32.5625,531.741 31,531.5C 30.3333,532.167 30.3333,532.833 31,533.5C 33.0328,532.984 33.0328,533.65 31,535.5C 30.6667,535.167 30.3333,534.833 30,534.5C 27.7545,538.383 28.2545,539.05 31.5,536.5C 31.8797,538.021 32.0464,539.687 32,541.5C 33.3961,539.192 34.0628,539.525 34,542.5C 30.375,545.623 26.875,548.956 23.5,552.5C 18.5528,549.825 18.2194,550.492 22.5,554.5C 18.1396,558.194 14.1396,562.194 10.5,566.5C 8.89828,565.45 8.06495,566.117 8,568.5C 6.33353,567.66 6.16686,568.16 7.5,570C 6.33333,571.167 5.16667,572.333 4,573.5C 3.69238,572.692 3.19238,572.025 2.5,571.5C 1.47283,572.791 0.472826,572.791 -0.5,571.5C -0.5,552.5 -0.5,533.5 -0.5,514.5C 2.23273,511.761 5.23273,509.427 8.5,507.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#736c68\",d:\"M 52.5,463.5 C 58.6938,471.883 65.3605,479.883 72.5,487.5C 72.0766,488.265 71.7432,489.098 71.5,490C 73.0926,493.262 75.0926,496.262 77.5,499C 78.448,499.483 79.448,499.649 80.5,499.5C 80.5,498.167 80.5,496.833 80.5,495.5C 86.628,502.395 92.2947,509.728 97.5,517.5C 97.2969,519.044 96.6302,520.378 95.5,521.5C 96.2458,522.736 96.5792,524.07 96.5,525.5C 97.791,525.263 98.791,525.596 99.5,526.5C 99.4326,527.959 99.7659,529.292 100.5,530.5C 99.6091,531.261 98.9424,532.261 98.5,533.5C 100.312,536.603 101.312,539.936 101.5,543.5C 104.925,543.367 105.258,544.033 102.5,545.5C 99.1667,542.833 96.1667,539.833 93.5,536.5C 93.6495,535.448 93.4828,534.448 93,533.5C 88.6052,527.292 84.1052,521.292 79.5,515.5C 78.5868,513.914 78.5868,512.414 79.5,511C 78.9056,510.536 78.2389,510.369 77.5,510.5C 78.6801,508.986 79.6801,507.319 80.5,505.5C 84.4811,511.475 88.8144,517.142 93.5,522.5C 94.4287,521.311 94.762,519.978 94.5,518.5C 93.325,518.719 92.325,518.386 91.5,517.5C 90.8721,515.742 89.8721,514.242 88.5,513C 88.8333,512.667 89.1667,512.333 89.5,512C 88.2341,511.691 87.0674,511.191 86,510.5C 85.7265,508.671 84.8932,507.171 83.5,506C 84.8331,504.16 84.6665,503.66 83,504.5C 81.8456,502.043 80.5123,502.043 79,504.5C 68.9779,491.31 59.1446,477.977 49.5,464.5C 50.391,463.89 51.391,463.557 52.5,463.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#906c57\",d:\"M 106.5,463.5 C 108.833,466.167 111.167,468.833 113.5,471.5C 123.141,485.43 132.308,499.763 141,514.5C 143.052,512.942 145.219,511.608 147.5,510.5C 147.938,510.435 148.272,510.601 148.5,511C 147.122,512.713 145.455,514.047 143.5,515C 144.974,516.316 146.641,517.316 148.5,518C 147.128,518.402 145.795,518.902 144.5,519.5C 143.25,522.272 142.917,524.939 143.5,527.5C 142.632,530.935 142.632,534.269 143.5,537.5C 138.428,535.966 136.761,532.8 138.5,528C 137.552,527.517 136.552,527.351 135.5,527.5C 135.5,525.833 135.5,524.167 135.5,522.5C 134.167,522.5 132.833,522.5 131.5,522.5C 129.704,519.104 128.704,515.437 128.5,511.5C 127.167,511.5 125.833,511.5 124.5,511.5C 124.442,508.336 123.776,505.336 122.5,502.5C 119.447,501.287 117.113,499.12 115.5,496C 114.207,495.51 112.873,495.343 111.5,495.5C 110.766,489.808 109.1,484.474 106.5,479.5C 108.167,479.5 109.833,479.5 111.5,479.5C 111.813,476.753 111.48,474.086 110.5,471.5C 107.618,469.633 106.285,466.966 106.5,463.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c8c1b1\",d:\"M 321.5,514.5 C 322.473,516.139 323.806,517.473 325.5,518.5C 326.38,521.262 327.546,523.929 329,526.5C 329.808,528.579 329.641,530.579 328.5,532.5C 325.466,529.984 322.132,527.984 318.5,526.5C 317.5,527.833 316.5,527.833 315.5,526.5C 314.289,527.274 314.289,528.107 315.5,529C 313.119,529.738 311.119,529.238 309.5,527.5C 308.62,524.738 307.454,522.071 306,519.5C 305.08,519.07 304.247,518.736 303.5,518.5C 307.257,516.78 308.257,514.113 306.5,510.5C 308.895,511.363 311.229,511.363 313.5,510.5C 311.331,507.501 308.998,504.668 306.5,502C 305.453,500.422 305.453,498.922 306.5,497.5C 309.521,501.692 312.355,506.026 315,510.5C 317.052,512.058 319.219,513.392 321.5,514.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#846558\",d:\"M 353.5,506.5 C 355.792,506.244 357.959,506.577 360,507.5C 361.762,514.36 364.096,521.027 367,527.5C 367.71,528.973 368.876,529.64 370.5,529.5C 367.782,531.423 368.116,532.756 371.5,533.5C 372.822,533.67 373.989,533.337 375,532.5C 375.638,533.609 376.138,534.775 376.5,536C 375.167,537.333 375.167,538.667 376.5,540C 375.314,541.412 373.981,542.579 372.5,543.5C 372.167,543.5 371.833,543.5 371.5,543.5C 369.901,543.768 368.568,543.434 367.5,542.5C 367.297,540.956 366.63,539.622 365.5,538.5C 366.529,538.704 367.529,538.204 368.5,537C 366.959,535.421 365.792,533.587 365,531.5C 362.539,526.113 360.873,520.446 360,514.5C 359.028,512.695 357.861,511.028 356.5,509.5C 355.304,509.846 355.304,510.346 356.5,511C 355.552,511.483 354.552,511.649 353.5,511.5C 353.5,509.833 353.5,508.167 353.5,506.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a7836d\",d:\"M 165.5,498.5 C 167.248,504.673 169.581,510.673 172.5,516.5C 173.86,517.665 174.86,517.332 175.5,515.5C 177.5,514.5 179.5,513.5 181.5,512.5C 184.713,509.726 188.38,507.726 192.5,506.5C 196.117,505.358 199.45,503.692 202.5,501.5C 201.374,503.453 199.708,504.953 197.5,506C 198.5,506.5 199.5,507 200.5,507.5C 201.258,506.189 202.258,505.689 203.5,506C 202.848,509.76 201.515,513.26 199.5,516.5C 198.667,516.833 197.833,517.167 197,517.5C 194.584,515.253 192.084,515.087 189.5,517C 189.833,517.333 190.167,517.667 190.5,518C 188.153,518.436 185.819,518.936 183.5,519.5C 182.328,519.081 181.328,518.415 180.5,517.5C 177.976,519.187 175.31,520.52 172.5,521.5C 172.301,523.96 171.635,526.293 170.5,528.5C 169.808,527.975 169.308,527.308 169,526.5C 168.861,529.445 167.694,531.779 165.5,533.5C 163.5,533.167 161.5,532.833 159.5,532.5C 158.494,528.47 155.827,526.803 151.5,527.5C 148.833,527.5 146.167,527.5 143.5,527.5C 142.917,524.939 143.25,522.272 144.5,519.5C 145.795,518.902 147.128,518.402 148.5,518C 146.641,517.316 144.974,516.316 143.5,515C 145.455,514.047 147.122,512.713 148.5,511C 148.272,510.601 147.938,510.435 147.5,510.5C 153.749,506.926 159.749,502.926 165.5,498.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d7d6d5\",d:\"M 55.5,504.5 C 56.9678,505.806 58.3012,507.306 59.5,509C 66.7419,512.053 72.7419,516.887 77.5,523.5C 82.8524,527.857 88.1857,532.19 93.5,536.5C 96.1667,539.833 99.1667,542.833 102.5,545.5C 103.167,545.5 103.5,545.833 103.5,546.5C 101.973,546.427 100.973,547.094 100.5,548.5C 99.8333,548.5 99.1667,548.5 98.5,548.5C 82.8646,533.367 67.0313,518.367 51,503.5C 50.3123,502.668 50.479,502.002 51.5,501.5C 52.8518,502.524 54.1851,503.524 55.5,504.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#beb3af\",d:\"M 55.5,504.5 C 54.1851,503.524 52.8518,502.524 51.5,501.5C 50.479,502.002 50.3123,502.668 51,503.5C 67.0313,518.367 82.8646,533.367 98.5,548.5C 98.1667,550.5 97.8333,552.5 97.5,554.5C 96.8333,554.5 96.1667,554.5 95.5,554.5C 95.6495,553.448 95.4828,552.448 95,551.5C 91.997,548.933 89.1637,546.266 86.5,543.5C 87.525,543.103 87.6917,542.437 87,541.5C 84.6506,538.76 82.3172,536.76 80,535.5C 74.3769,529.877 68.7102,524.21 63,518.5C 62.5172,517.552 62.3505,516.552 62.5,515.5C 61.0695,515.579 59.7362,515.246 58.5,514.5C 57.7717,512.807 56.7717,511.307 55.5,510C 49.574,506.91 45.2407,502.41 42.5,496.5C 42.5,495.833 42.5,495.167 42.5,494.5C 43.2899,493.206 44.2899,492.039 45.5,491C 41.5,487 37.5,483 33.5,479C 35.4133,477.209 37.08,475.209 38.5,473C 36.7979,471.282 34.9645,471.115 33,472.5C 30.9045,471.285 31.0712,470.451 33.5,470C 32.436,468.489 31.1026,468.323 29.5,469.5C 29.5,468.833 29.5,468.167 29.5,467.5C 30.1667,467.5 30.5,467.167 30.5,466.5C 33.0751,465.272 35.4084,463.605 37.5,461.5C 39.0401,464.079 40.7067,466.579 42.5,469C 42.4354,471.111 42.2688,473.277 42,475.5C 43.0674,476.191 44.2341,476.691 45.5,477C 44.5494,477.718 44.3828,478.551 45,479.5C 48.4458,485.37 52.6125,491.203 57.5,497C 57.1667,497.333 56.8333,497.667 56.5,498C 58.3333,499.167 60.1667,500.333 62,501.5C 62.3333,501.167 62.6667,500.833 63,500.5C 63.7386,503.573 65.5719,505.74 68.5,507C 67.7894,508.255 66.956,509.421 66,510.5C 63.4598,508.295 61.2932,505.795 59.5,503C 56.347,501.171 53.5137,499.005 51,496.5C 50.5,496.667 50,496.833 49.5,497C 51.8333,499.333 54.1667,501.667 56.5,504C 56.2716,504.399 55.9382,504.565 55.5,504.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a19c99\",d:\"M 97.5,517.5 C 99.1921,519.205 100.525,521.205 101.5,523.5C 101.573,525.027 100.906,526.027 99.5,526.5C 98.791,525.596 97.791,525.263 96.5,525.5C 96.5792,524.07 96.2458,522.736 95.5,521.5C 96.6302,520.378 97.2969,519.044 97.5,517.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c9c0b2\",d:\"M 279.5,498.5 C 280.375,500.568 281.541,502.568 283,504.5C 282.874,499.316 284.041,498.65 286.5,502.5C 287.107,502.376 287.44,502.043 287.5,501.5C 289.507,505.954 288.174,509.287 283.5,511.5C 282.227,515.55 282.394,519.55 284,523.5C 284.155,521.144 284.155,518.811 284,516.5C 285,518.833 286,521.167 287,523.5C 287.342,521.182 286.842,519.015 285.5,517C 289.76,516.939 292.26,519.106 293,523.5C 293.583,521.998 294.416,520.665 295.5,519.5C 295.833,519.833 296.167,520.167 296.5,520.5C 294.971,523.73 293.971,526.73 293.5,529.5C 291.166,527.559 288.666,525.893 286,524.5C 285.692,525.308 285.192,525.975 284.5,526.5C 283.742,525.189 282.742,524.689 281.5,525C 282.67,526.755 284.337,527.755 286.5,528C 288.007,528.837 288.507,530.004 288,531.5C 287.259,530.359 286.425,530.359 285.5,531.5C 282.163,528.829 278.496,526.663 274.5,525C 271.458,521.964 269.125,519.797 267.5,518.5C 268.239,516.437 269.572,514.77 271.5,513.5C 274.96,511.867 278.294,510.034 281.5,508C 282.451,507.282 282.617,506.449 282,505.5C 279.851,507.661 277.351,508.828 274.5,509C 277.284,506.92 276.951,506.253 273.5,507C 270.156,514.399 268.989,514.232 270,506.5C 269.617,507.056 269.117,507.389 268.5,507.5C 268.5,506.5 268.5,505.5 268.5,504.5C 271.034,503.542 273.367,502.208 275.5,500.5C 276.086,500.709 276.586,501.043 277,501.5C 277.377,500.058 278.21,499.058 279.5,498.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b1b1b5\",d:\"M 468.5,522.5 C 475.488,524.496 482.488,526.496 489.5,528.5C 492.164,529.397 494.498,530.73 496.5,532.5C 490.167,530.5 483.833,528.5 477.5,526.5C 474.261,525.538 471.261,524.205 468.5,522.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#baa092\",d:\"M 367.5,503.5 C 367.833,503.5 368.167,503.5 368.5,503.5C 369.793,507.086 370.793,510.752 371.5,514.5C 373.735,514.205 375.735,514.539 377.5,515.5C 375.833,515.5 374.167,515.5 372.5,515.5C 373.466,520.252 373.466,524.419 372.5,528C 375.001,529.418 374.668,530.418 371.5,531C 372.598,531.77 372.598,532.603 371.5,533.5C 368.116,532.756 367.782,531.423 370.5,529.5C 370.678,528.305 371.011,527.138 371.5,526C 368.322,519.451 365.988,512.618 364.5,505.5C 366.179,505.715 367.179,505.048 367.5,503.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#978f8a\",d:\"M 42.5,496.5 C 45.2407,502.41 49.574,506.91 55.5,510C 56.7717,511.307 57.7717,512.807 58.5,514.5C 59.7362,515.246 61.0695,515.579 62.5,515.5C 62.3505,516.552 62.5172,517.552 63,518.5C 68.7102,524.21 74.3769,529.877 80,535.5C 82.3172,536.76 84.6506,538.76 87,541.5C 87.6917,542.437 87.525,543.103 86.5,543.5C 79.1919,537.196 71.8586,530.862 64.5,524.5C 63.9078,520.911 61.9078,518.578 58.5,517.5C 56.2273,517.043 54.894,515.71 54.5,513.5C 53.9717,512.279 53.305,511.113 52.5,510C 48.3116,507.48 44.6449,504.313 41.5,500.5C 40.0679,498.703 40.4012,497.37 42.5,496.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#aeaeaf\",d:\"M 79.5,515.5 C 84.1052,521.292 88.6052,527.292 93,533.5C 93.4828,534.448 93.6495,535.448 93.5,536.5C 88.1857,532.19 82.8524,527.857 77.5,523.5C 78.2389,523.631 78.9056,523.464 79.5,523C 76.9832,520.651 74.6499,518.151 72.5,515.5C 73.0256,513.77 74.0256,512.436 75.5,511.5C 76.84,512.867 78.1733,514.2 79.5,515.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f7e6e0\",d:\"M 116.5,535.5 C 118.793,538.305 120.459,541.471 121.5,545C 121.43,545.765 121.097,546.265 120.5,546.5C 119.778,547.551 118.778,548.218 117.5,548.5C 116.736,546.26 115.902,543.927 115,541.5C 110.567,535.616 106.401,529.616 102.5,523.5C 104.205,522.465 105.872,522.465 107.5,523.5C 110.521,527.568 113.521,531.568 116.5,535.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e3ded1\",d:\"M 306.5,510.5 C 308.257,514.113 307.257,516.78 303.5,518.5C 304.247,518.736 305.08,519.07 306,519.5C 307.454,522.071 308.62,524.738 309.5,527.5C 308.637,526.537 307.97,526.537 307.5,527.5C 308.123,529.711 309.123,531.711 310.5,533.5C 310.069,534.293 309.735,535.127 309.5,536C 312.045,537.71 314.045,539.876 315.5,542.5C 314.957,542.56 314.624,542.893 314.5,543.5C 315.91,544.569 316.91,545.903 317.5,547.5C 316.508,547.328 315.842,547.662 315.5,548.5C 314.778,548.082 314.278,547.416 314,546.5C 313.107,547.711 312.274,547.711 311.5,546.5C 309.585,544.929 308.585,542.929 308.5,540.5C 307.5,540.5 306.5,540.5 305.5,540.5C 305.421,539.07 305.754,537.736 306.5,536.5C 305.055,534.937 303.389,533.604 301.5,532.5C 303.839,531.657 305.839,531.657 307.5,532.5C 305.891,530.06 303.557,528.893 300.5,529C 298.68,527.195 297.514,525.028 297,522.5C 295.313,525.624 295.146,528.791 296.5,532C 294.456,532.048 292.456,531.548 290.5,530.5C 290.167,531 289.833,531.5 289.5,532C 296.345,536.874 300.178,543.374 301,551.5C 299.748,549.999 298.748,548.332 298,546.5C 297.667,548.167 297.333,549.833 297,551.5C 294.902,547.666 293.235,543.999 292,540.5C 291.667,541.167 291.333,541.833 291,542.5C 289.128,537.584 285.961,533.751 281.5,531C 277.873,529.524 274.207,528.024 270.5,526.5C 270.167,526.833 269.833,527.167 269.5,527.5C 274.732,530.279 279.398,533.779 283.5,538C 282.975,538.692 282.308,539.192 281.5,539.5C 281.264,538.753 280.93,537.92 280.5,537C 278.553,536.009 276.553,535.675 274.5,536C 274.833,536.333 275.167,536.667 275.5,537C 273.82,537.034 272.32,537.201 271,537.5C 270.333,536.833 269.667,536.167 269,535.5C 268.426,530.719 267.426,526.052 266,521.5C 265.586,521.043 265.086,520.709 264.5,520.5C 262.814,521.857 261.148,523.19 259.5,524.5C 259.265,523.903 258.765,523.57 258,523.5C 255.2,525.299 252.7,527.466 250.5,530C 249.552,530.483 248.552,530.649 247.5,530.5C 248.341,528.621 248.675,526.621 248.5,524.5C 247.325,524.719 246.325,524.386 245.5,523.5C 247.833,522.833 250.167,522.167 252.5,521.5C 251.54,520.188 251.706,518.854 253,517.5C 255.706,523.802 258.54,523.968 261.5,518C 259.971,516.418 259.471,514.585 260,512.5C 260.333,512.833 260.667,513.167 261,513.5C 263.009,512.167 264.676,510.5 266,508.5C 267.494,512.304 268.328,511.971 268.5,507.5C 269.117,507.389 269.617,507.056 270,506.5C 268.989,514.232 270.156,514.399 273.5,507C 276.951,506.253 277.284,506.92 274.5,509C 277.351,508.828 279.851,507.661 282,505.5C 282.617,506.449 282.451,507.282 281.5,508C 278.294,510.034 274.96,511.867 271.5,513.5C 269.572,514.77 268.239,516.437 267.5,518.5C 269.125,519.797 271.458,521.964 274.5,525C 278.496,526.663 282.163,528.829 285.5,531.5C 286.425,530.359 287.259,530.359 288,531.5C 288.507,530.004 288.007,528.837 286.5,528C 284.337,527.755 282.67,526.755 281.5,525C 282.742,524.689 283.742,525.189 284.5,526.5C 285.192,525.975 285.692,525.308 286,524.5C 288.666,525.893 291.166,527.559 293.5,529.5C 293.971,526.73 294.971,523.73 296.5,520.5C 296.167,520.167 295.833,519.833 295.5,519.5C 294.416,520.665 293.583,521.998 293,523.5C 292.26,519.106 289.76,516.939 285.5,517C 286.842,519.015 287.342,521.182 287,523.5C 286,521.167 285,518.833 284,516.5C 284.155,518.811 284.155,521.144 284,523.5C 282.394,519.55 282.227,515.55 283.5,511.5C 288.174,509.287 289.507,505.954 287.5,501.5C 287.276,497.796 287.11,494.129 287,490.5C 288.728,495.279 289.728,500.279 290,505.5C 291.183,504.269 292.349,504.269 293.5,505.5C 291.806,507.194 290.14,508.86 288.5,510.5C 288.833,510.833 289.167,511.167 289.5,511.5C 293.806,510.408 298.139,509.408 302.5,508.5C 299.313,500.994 294.647,494.66 288.5,489.5C 286.702,486.711 286.202,483.711 287,480.5C 293.787,490.426 300.287,500.426 306.5,510.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f6f4eb\",d:\"M 259.5,524.5 C 255.435,528.572 251.102,532.238 246.5,535.5C 242.901,537.474 239.568,539.807 236.5,542.5C 235.128,543.512 233.795,544.512 232.5,545.5C 221.908,553.222 211.575,560.555 201.5,567.5C 198.106,569.197 194.773,570.864 191.5,572.5C 189.181,572.992 187.181,573.992 185.5,575.5C 182.475,575.877 179.475,576.044 176.5,576C 181.044,574.029 185.711,572.363 190.5,571C 195.316,568.338 199.982,565.505 204.5,562.5C 209.445,560.022 214.112,557.022 218.5,553.5C 219.506,552.604 219.506,551.938 218.5,551.5C 217.167,552.5 215.833,553.5 214.5,554.5C 213.583,553.873 212.583,553.539 211.5,553.5C 212.5,552.167 213.5,550.833 214.5,549.5C 216.547,549.489 218.547,549.156 220.5,548.5C 221.647,548.818 222.481,549.484 223,550.5C 224.397,548.93 225.897,547.596 227.5,546.5C 231.146,544.183 234.48,541.516 237.5,538.5C 241.748,537 245.082,534.333 247.5,530.5C 248.552,530.649 249.552,530.483 250.5,530C 252.7,527.466 255.2,525.299 258,523.5C 258.765,523.57 259.265,523.903 259.5,524.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#fbfaf5\",d:\"M 427.5,519.5 C 426.842,529.527 426.675,539.527 427,549.5C 428.351,551.019 429.851,552.352 431.5,553.5C 430.833,554.167 430.167,554.833 429.5,555.5C 430.531,556.7 431.365,558.034 432,559.5C 434.474,560.465 436.974,560.632 439.5,560C 441.335,560.928 441.668,562.094 440.5,563.5C 442.865,564.085 444.865,565.252 446.5,567C 442.722,568.64 442.722,569.807 446.5,570.5C 446.135,575.421 447.135,575.755 449.5,571.5C 450.382,572.76 451.382,573.926 452.5,575C 452.167,575.333 451.833,575.667 451.5,576C 452.687,577.019 453.687,578.186 454.5,579.5C 453.675,580.386 452.675,580.719 451.5,580.5C 451.5,579.5 451.5,578.5 451.5,577.5C 450.5,577.5 449.5,577.5 448.5,577.5C 448.297,579.39 448.963,580.89 450.5,582C 449.552,582.483 448.552,582.649 447.5,582.5C 447.083,579.657 446.083,576.99 444.5,574.5C 443.232,575.428 441.899,575.595 440.5,575C 438.257,572.512 436.257,569.846 434.5,567C 432.833,566.333 431.167,566.333 429.5,567C 431,568.167 432.5,569.333 434,570.5C 434.333,570.167 434.667,569.833 435,569.5C 436.495,571.11 436.661,572.776 435.5,574.5C 437.505,575.337 438.505,576.837 438.5,579C 437.715,582.388 437.381,585.722 437.5,589C 438.997,591.658 439.997,594.491 440.5,597.5C 441.325,598.386 442.325,598.719 443.5,598.5C 443.523,596.4 442.856,594.567 441.5,593C 441.833,592.5 442.167,592 442.5,591.5C 443.386,592.325 443.719,593.325 443.5,594.5C 444.833,594.5 446.167,594.5 447.5,594.5C 447.722,600.499 447.722,606.499 447.5,612.5C 446.07,612.421 444.736,612.754 443.5,613.5C 443.167,613.167 442.833,612.833 442.5,612.5C 447.109,608.039 446.109,606.372 439.5,607.5C 439.682,605.409 439.348,603.409 438.5,601.5C 439.025,600.808 439.692,600.308 440.5,600C 439.107,598.829 438.273,597.329 438,595.5C 437.667,597.167 437.333,598.833 437,600.5C 435.764,597.583 435.264,594.583 435.5,591.5C 434.943,593.332 433.943,594.665 432.5,595.5C 431.676,591.201 431.009,586.867 430.5,582.5C 430.572,580.44 430.905,578.44 431.5,576.5C 427.039,576.277 425.372,573.61 426.5,568.5C 424.712,568.785 423.045,568.452 421.5,567.5C 420.547,565.545 419.213,563.878 417.5,562.5C 416.808,563.025 416.308,563.692 416,564.5C 414.268,558.47 412.434,552.47 410.5,546.5C 411.806,544.527 413.473,542.861 415.5,541.5C 415.154,540.304 414.654,540.304 414,541.5C 412.525,537.847 410.025,536.18 406.5,536.5C 407.025,537.192 407.692,537.692 408.5,538C 406.866,538.494 405.199,538.66 403.5,538.5C 403.687,536.436 404.187,534.436 405,532.5C 406.312,534.658 407.978,534.991 410,533.5C 411.02,527.279 410.52,521.279 408.5,515.5C 408.543,514.584 408.876,513.917 409.5,513.5C 410.878,514.234 412.378,514.901 414,515.5C 414.333,515.167 414.667,514.833 415,514.5C 414.715,518.311 414.548,521.978 414.5,525.5C 415.325,526.386 416.325,526.719 417.5,526.5C 417.215,524.712 417.548,523.045 418.5,521.5C 418.578,523.941 418.912,526.274 419.5,528.5C 419.613,524.39 421.613,521.724 425.5,520.5C 425.062,519.494 424.396,519.494 423.5,520.5C 422.07,518.614 420.403,516.947 418.5,515.5C 417.614,514.675 417.281,513.675 417.5,512.5C 419.792,512.756 421.959,512.423 424,511.5C 425.456,514.032 426.623,516.699 427.5,519.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#857361\",d:\"M 359.5,528.5 C 359.176,530.964 359.009,533.631 359,536.5C 358,533.5 357,530.5 356,527.5C 356.083,533.175 356.583,538.842 357.5,544.5C 357.795,546.735 357.461,548.735 356.5,550.5C 354.815,549.816 353.815,548.483 353.5,546.5C 354.025,545.808 354.692,545.308 355.5,545C 354.584,544.626 353.75,544.126 353,543.5C 351.513,539.884 350.18,536.217 349,532.5C 348.423,537.621 347.423,537.621 346,532.5C 345.691,533.766 345.191,534.933 344.5,536C 346.675,542.529 349.008,548.363 351.5,553.5C 350.833,560.167 350.167,560.167 349.5,553.5C 348.5,553.5 347.5,553.5 346.5,553.5C 346.5,552.167 346.5,550.833 346.5,549.5C 345.5,549.5 344.5,549.5 343.5,549.5C 344.451,546.896 344.785,544.396 344.5,542C 343.068,539.78 341.068,538.28 338.5,537.5C 337.016,533.868 335.016,530.534 332.5,527.5C 332.624,526.893 332.957,526.56 333.5,526.5C 335.334,527.494 337.001,527.494 338.5,526.5C 341.343,525.229 344.343,524.396 347.5,524C 349.125,523.147 349.458,522.147 348.5,521C 350.076,520.56 351.41,519.727 352.5,518.5C 353.696,518.846 353.696,519.346 352.5,520C 357.078,520.991 359.411,523.824 359.5,528.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e8cbc3\",d:\"M 101.5,523.5 C 101.833,523.5 102.167,523.5 102.5,523.5C 106.401,529.616 110.567,535.616 115,541.5C 115.902,543.927 116.736,546.26 117.5,548.5C 117.44,549.043 117.107,549.376 116.5,549.5C 115.205,547.035 113.538,545.035 111.5,543.5C 109.167,540.833 106.833,538.167 104.5,535.5C 103.167,533.833 101.833,532.167 100.5,530.5C 99.7659,529.292 99.4326,527.959 99.5,526.5C 100.906,526.027 101.573,525.027 101.5,523.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a77d66\",d:\"M 151.5,527.5 C 155.827,526.803 158.494,528.47 159.5,532.5C 161.5,532.833 163.5,533.167 165.5,533.5C 165.62,534.586 166.287,535.253 167.5,535.5C 169.135,534.954 170.801,534.62 172.5,534.5C 172.351,533.448 172.517,532.448 173,531.5C 174.324,532.88 175.657,533.214 177,532.5C 178.61,534.597 179.777,536.93 180.5,539.5C 182.134,539.968 183.3,540.968 184,542.5C 184.414,542.043 184.914,541.709 185.5,541.5C 187.193,543.279 189.193,543.779 191.5,543C 191.034,541.701 191.034,540.201 191.5,538.5C 194.187,538.336 196.854,538.503 199.5,539C 201.569,539.324 201.902,540.158 200.5,541.5C 202.291,542.17 203.958,542.837 205.5,543.5C 203.787,544.635 203.12,546.302 203.5,548.5C 200.68,550.937 197.347,552.603 193.5,553.5C 192.05,554.85 191.383,556.516 191.5,558.5C 187.433,558.365 184.433,560.031 182.5,563.5C 181.817,563.137 181.15,562.804 180.5,562.5C 180.5,561.5 180.5,560.5 180.5,559.5C 178.833,559.5 177.167,559.5 175.5,559.5C 175.5,558.167 175.5,556.833 175.5,555.5C 172.073,555.976 168.74,555.976 165.5,555.5C 167.748,552.38 167.914,549.047 166,545.5C 165.377,549.932 164.377,550.265 163,546.5C 162.333,547.167 161.667,547.833 161,548.5C 159.798,546.323 159.298,543.989 159.5,541.5C 155.49,541.984 153.824,540.484 154.5,537C 152.398,534.194 151.398,531.027 151.5,527.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b2b2b6\",d:\"M 464.5,532.5 C 473.757,535.753 483.09,538.919 492.5,542C 493.696,542.654 493.696,543.154 492.5,543.5C 487.55,541.628 482.55,539.961 477.5,538.5C 471.49,536.44 465.49,534.274 459.5,532C 461.265,531.36 462.932,531.527 464.5,532.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b8ad9a\",d:\"M 239.5,525.5 C 239.082,526.222 238.416,526.722 237.5,527C 238.357,530.76 238.357,534.594 237.5,538.5C 234.48,541.516 231.146,544.183 227.5,546.5C 226.596,545.791 226.263,544.791 226.5,543.5C 225.5,543.5 224.5,543.5 223.5,543.5C 223.5,542.5 223.5,541.5 223.5,540.5C 221.508,540.328 219.842,540.995 218.5,542.5C 217.482,541.807 216.482,541.141 215.5,540.5C 216.048,538.606 217.048,536.94 218.5,535.5C 223.24,534.438 227.573,532.438 231.5,529.5C 232.086,529.709 232.586,530.043 233,530.5C 233.881,527.115 236.048,525.448 239.5,525.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#87645b\",d:\"M 100.5,530.5 C 101.833,532.167 103.167,533.833 104.5,535.5C 105.353,539.929 107.353,543.762 110.5,547C 108.446,548.682 108.779,550.349 111.5,552C 111.272,552.399 110.938,552.565 110.5,552.5C 108.167,550.5 105.833,548.5 103.5,546.5C 103.5,545.833 103.167,545.5 102.5,545.5C 105.258,544.033 104.925,543.367 101.5,543.5C 101.312,539.936 100.312,536.603 98.5,533.5C 98.9424,532.261 99.6091,531.261 100.5,530.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6a615c\",d:\"M 64.5,524.5 C 71.8586,530.862 79.1919,537.196 86.5,543.5C 89.1637,546.266 91.997,548.933 95,551.5C 95.4828,552.448 95.6495,553.448 95.5,554.5C 94.1667,555.833 92.8333,555.833 91.5,554.5C 88.5366,551.209 85.2033,548.209 81.5,545.5C 80.549,546.326 79.549,546.492 78.5,546C 79.3452,544.442 78.6785,543.442 76.5,543C 76.0188,540.653 74.5188,538.487 72,536.5C 71.0347,538.26 69.868,538.594 68.5,537.5C 69.0253,536.808 69.6919,536.308 70.5,536C 67.3006,532.538 63.9673,530.038 60.5,528.5C 61.8333,527.167 63.1667,525.833 64.5,524.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#888482\",d:\"M 60.5,528.5 C 63.9673,530.038 67.3006,532.538 70.5,536C 69.6919,536.308 69.0253,536.808 68.5,537.5C 69.868,538.594 71.0347,538.26 72,536.5C 74.5188,538.487 76.0188,540.653 76.5,543C 78.6785,543.442 79.3452,544.442 78.5,546C 79.549,546.492 80.549,546.326 81.5,545.5C 85.2033,548.209 88.5366,551.209 91.5,554.5C 90.5,556.167 89.1667,557.5 87.5,558.5C 85.4377,556.714 84.1043,554.381 83.5,551.5C 81.1952,550.769 79.3618,549.436 78,547.5C 76.1598,548.833 75.6598,548.666 76.5,547C 74.7409,544.729 72.7409,543.729 70.5,544C 71.727,542.413 71.3937,541.079 69.5,540C 68.1667,540 66.8333,540 65.5,540C 65.9574,539.586 66.2907,539.086 66.5,538.5C 65.7573,537.818 65.0906,537.151 64.5,536.5C 64.9382,536.565 65.2716,536.399 65.5,536C 62.6282,534.629 60.6282,532.462 59.5,529.5C 59.5,528.833 59.8333,528.5 60.5,528.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#947f73\",d:\"M 114.5,524.5 C 122.308,532.306 128.975,540.973 134.5,550.5C 133.452,552.933 132.786,552.933 132.5,550.5C 132.631,549.624 132.298,548.957 131.5,548.5C 130.52,549.981 129.353,551.315 128,552.5C 128.419,550.497 129.253,548.497 130.5,546.5C 130.167,546.167 129.833,545.833 129.5,545.5C 128.234,547.71 126.734,549.71 125,551.5C 123.048,550.28 121.548,548.613 120.5,546.5C 121.097,546.265 121.43,545.765 121.5,545C 120.459,541.471 118.793,538.305 116.5,535.5C 115.103,533.03 114.103,529.696 113.5,525.5C 113.624,524.893 113.957,524.56 114.5,524.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9c715c\",d:\"M 143.5,527.5 C 146.167,527.5 148.833,527.5 151.5,527.5C 151.398,531.027 152.398,534.194 154.5,537C 153.824,540.484 155.49,541.984 159.5,541.5C 159.298,543.989 159.798,546.323 161,548.5C 161.667,547.833 162.333,547.167 163,546.5C 164.377,550.265 165.377,549.932 166,545.5C 167.914,549.047 167.748,552.38 165.5,555.5C 168.74,555.976 172.073,555.976 175.5,555.5C 175.5,556.833 175.5,558.167 175.5,559.5C 177.167,559.5 178.833,559.5 180.5,559.5C 180.5,560.5 180.5,561.5 180.5,562.5C 179.833,563.5 179.167,564.5 178.5,565.5C 173.251,567.761 168.251,570.427 163.5,573.5C 162.313,572.466 161.48,571.133 161,569.5C 160.667,570.167 160.333,570.833 160,571.5C 159.446,569.39 158.612,567.39 157.5,565.5C 158.167,564.167 158.833,562.833 159.5,561.5C 156.314,557.127 153.647,552.46 151.5,547.5C 150.675,546.614 149.675,546.281 148.5,546.5C 148.64,544.876 147.973,543.71 146.5,543C 147.833,542.667 149.167,542.333 150.5,542C 147.468,541.377 145.135,539.877 143.5,537.5C 142.632,534.269 142.632,530.935 143.5,527.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d8d0c6\",d:\"M 214.5,540.5 C 214.833,540.5 215.167,540.5 215.5,540.5C 216.482,541.141 217.482,541.807 218.5,542.5C 219.842,540.995 221.508,540.328 223.5,540.5C 223.5,541.5 223.5,542.5 223.5,543.5C 224.5,543.5 225.5,543.5 226.5,543.5C 226.263,544.791 226.596,545.791 227.5,546.5C 225.897,547.596 224.397,548.93 223,550.5C 222.481,549.484 221.647,548.818 220.5,548.5C 218.547,549.156 216.547,549.489 214.5,549.5C 214.095,548.45 213.429,548.45 212.5,549.5C 211.738,548.372 211.071,547.205 210.5,546C 212.838,544.838 214.172,543.004 214.5,540.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d0c9bc\",d:\"M 315.5,548.5 C 315.953,549.458 316.619,550.292 317.5,551C 316.5,551.5 315.5,552 314.5,552.5C 312.684,550.183 310.684,548.016 308.5,546C 307.241,545.018 305.908,544.685 304.5,545C 308.206,550.773 311.539,556.773 314.5,563C 313.978,563.95 313.311,564.784 312.5,565.5C 314.334,568.186 315.834,570.853 317,573.5C 316.667,573.833 316.333,574.167 316,574.5C 312.818,571.314 309.985,567.814 307.5,564C 306.668,563.312 306.002,563.479 305.5,564.5C 308.474,569.576 310.974,574.909 313,580.5C 313.333,580.167 313.667,579.833 314,579.5C 317.667,584.5 321.333,589.5 325,594.5C 325.5,596.5 326,598.5 326.5,600.5C 328.602,603.264 330.436,606.264 332,609.5C 332.683,605.569 331.85,602.069 329.5,599C 329.998,597.842 330.831,597.009 332,596.5C 336.48,598.794 338.314,602.46 337.5,607.5C 337.389,608.117 337.056,608.617 336.5,609C 338.692,610.359 340.359,612.192 341.5,614.5C 338.477,616.033 336.81,618.533 336.5,622C 338.203,625.091 339.37,628.257 340,631.5C 338.173,630.341 336.507,629.008 335,627.5C 332.75,620.921 330.75,614.255 329,607.5C 328.458,610.798 328.958,613.965 330.5,617C 330.108,618.011 329.441,618.511 328.5,618.5C 330.139,619.916 330.973,621.583 331,623.5C 330.586,623.043 330.086,622.709 329.5,622.5C 329.089,623.262 328.923,624.262 329,625.5C 326.884,621.392 325.217,617.059 324,612.5C 324.038,621.6 326.705,629.933 332,637.5C 332.219,636.062 332.719,634.729 333.5,633.5C 337.118,638.276 339.784,643.609 341.5,649.5C 339.5,649.5 337.5,649.5 335.5,649.5C 329.86,640.228 324.694,630.562 320,620.5C 319.667,621.5 319.333,622.5 319,623.5C 317.026,619.066 315.859,614.399 315.5,609.5C 317.463,607.817 317.63,606.151 316,604.5C 315.667,601.167 315.333,597.833 315,594.5C 313.431,595.714 312.598,597.381 312.5,599.5C 313.012,602.186 313.179,604.853 313,607.5C 311.025,603.037 310.192,598.371 310.5,593.5C 312.908,592.685 313.741,591.019 313,588.5C 305.413,581.485 300.58,572.985 298.5,563C 298.164,561.97 297.497,561.47 296.5,561.5C 293.817,554.981 289.484,549.814 283.5,546C 281.956,544.813 280.289,544.48 278.5,545C 280.007,545.837 280.507,547.004 280,548.5C 276.423,546.051 272.59,544.384 268.5,543.5C 268.318,548.794 267.818,548.794 267,543.5C 265.555,549.411 263.721,549.745 261.5,544.5C 261.967,542.432 262.634,540.432 263.5,538.5C 261.966,537.264 260.3,536.764 258.5,537C 259.659,545.54 262.492,553.707 267,561.5C 267.333,567.5 267.667,573.5 268,579.5C 269.333,580.833 270.667,582.167 272,583.5C 272.692,584.437 272.525,585.103 271.5,585.5C 263.543,580.461 259.709,573.128 260,563.5C 258.699,561.598 258.032,559.598 258,557.5C 260.106,559.377 261.439,561.71 262,564.5C 262.667,561.167 262.667,557.833 262,554.5C 260.258,550.72 257.925,547.386 255,544.5C 253.992,544.018 252.825,543.852 251.5,544C 253.489,539.135 251.823,536.302 246.5,535.5C 251.102,532.238 255.435,528.572 259.5,524.5C 261.148,523.19 262.814,521.857 264.5,520.5C 265.086,520.709 265.586,521.043 266,521.5C 267.426,526.052 268.426,530.719 269,535.5C 269.667,536.167 270.333,536.833 271,537.5C 272.32,537.201 273.82,537.034 275.5,537C 275.167,536.667 274.833,536.333 274.5,536C 276.553,535.675 278.553,536.009 280.5,537C 280.93,537.92 281.264,538.753 281.5,539.5C 282.308,539.192 282.975,538.692 283.5,538C 279.398,533.779 274.732,530.279 269.5,527.5C 269.833,527.167 270.167,526.833 270.5,526.5C 274.207,528.024 277.873,529.524 281.5,531C 285.961,533.751 289.128,537.584 291,542.5C 291.333,541.833 291.667,541.167 292,540.5C 293.235,543.999 294.902,547.666 297,551.5C 297.333,549.833 297.667,548.167 298,546.5C 298.748,548.332 299.748,549.999 301,551.5C 300.178,543.374 296.345,536.874 289.5,532C 289.833,531.5 290.167,531 290.5,530.5C 292.456,531.548 294.456,532.048 296.5,532C 295.146,528.791 295.313,525.624 297,522.5C 297.514,525.028 298.68,527.195 300.5,529C 303.557,528.893 305.891,530.06 307.5,532.5C 305.839,531.657 303.839,531.657 301.5,532.5C 303.389,533.604 305.055,534.937 306.5,536.5C 305.754,537.736 305.421,539.07 305.5,540.5C 306.5,540.5 307.5,540.5 308.5,540.5C 308.585,542.929 309.585,544.929 311.5,546.5C 312.274,547.711 313.107,547.711 314,546.5C 314.278,547.416 314.778,548.082 315.5,548.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d8cfc3\",d:\"M 359.5,528.5 C 360.319,530.772 360.985,533.106 361.5,535.5C 361.185,539.397 362.519,542.563 365.5,545C 364.692,545.308 364.025,545.808 363.5,546.5C 365.091,548.774 366.591,551.108 368,553.5C 369.642,559.1 371.309,564.767 373,570.5C 373.645,571.646 374.478,572.646 375.5,573.5C 374.639,577.784 374.306,582.284 374.5,587C 375.334,589.306 376.334,591.473 377.5,593.5C 377.5,593.833 377.5,594.167 377.5,594.5C 377.461,596.359 378.294,597.692 380,598.5C 380.667,600.167 380.667,601.833 380,603.5C 378.362,600.696 376.529,598.029 374.5,595.5C 375.428,594.232 375.595,592.899 375,591.5C 371.867,589.914 371.034,587.58 372.5,584.5C 372.176,582.431 371.342,582.098 370,583.5C 368.204,581.598 368.037,579.598 369.5,577.5C 368.401,573.96 367.068,570.46 365.5,567C 365.528,558.585 362.861,551.085 357.5,544.5C 356.583,538.842 356.083,533.175 356,527.5C 357,530.5 358,533.5 359,536.5C 359.009,533.631 359.176,530.964 359.5,528.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ada9a4\",d:\"M 444.5,541.5 C 455.814,545.16 467.147,548.827 478.5,552.5C 496.228,558.681 513.895,565.015 531.5,571.5C 530.262,571.81 530.262,572.31 531.5,573C 528.888,573.639 526.554,574.806 524.5,576.5C 530.728,578.09 537.062,579.09 543.5,579.5C 538.104,580.27 532.604,580.603 527,580.5C 524.495,579.845 523.161,578.178 523,575.5C 522.283,576.044 521.783,576.711 521.5,577.5C 520.262,578.412 518.928,578.579 517.5,578C 512.765,575.281 508.265,572.114 504,568.5C 503.667,568.833 503.333,569.167 503,569.5C 498.277,567.127 493.777,564.294 489.5,561C 487.527,560.505 485.527,560.338 483.5,560.5C 483.762,561.978 483.429,563.311 482.5,564.5C 481.833,562.833 481.167,561.167 480.5,559.5C 476.648,557.827 472.648,556.661 468.5,556C 466.321,554.743 464.321,553.243 462.5,551.5C 461.833,551.833 461.167,552.167 460.5,552.5C 457.812,551.487 455.146,550.487 452.5,549.5C 450.628,547.396 448.295,546.063 445.5,545.5C 444.77,544.288 443.77,543.288 442.5,542.5C 442.957,541.702 443.624,541.369 444.5,541.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a9947e\",d:\"M 214.5,540.5 C 214.172,543.004 212.838,544.838 210.5,546C 211.071,547.205 211.738,548.372 212.5,549.5C 213.429,548.45 214.095,548.45 214.5,549.5C 213.5,550.833 212.5,552.167 211.5,553.5C 210.25,553.577 209.417,554.244 209,555.5C 207.755,555.539 206.422,555.205 205,554.5C 201.728,555.611 198.561,556.944 195.5,558.5C 193.633,555.771 192.633,556.104 192.5,559.5C 190.62,559.229 189.287,559.896 188.5,561.5C 185.838,564.173 182.505,565.506 178.5,565.5C 179.167,564.5 179.833,563.5 180.5,562.5C 181.15,562.804 181.817,563.137 182.5,563.5C 184.433,560.031 187.433,558.365 191.5,558.5C 191.383,556.516 192.05,554.85 193.5,553.5C 197.347,552.603 200.68,550.937 203.5,548.5C 203.12,546.302 203.787,544.635 205.5,543.5C 209.003,543.871 212.003,542.871 214.5,540.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f2f4f8\",d:\"M 506.5,525.5 C 507.244,528.36 507.911,531.36 508.5,534.5C 506.74,537.212 506.073,540.212 506.5,543.5C 508.433,543.729 510.1,544.562 511.5,546C 510.833,546.333 510.167,546.667 509.5,547C 510.672,547.419 511.672,548.085 512.5,549C 510.189,548.845 507.856,548.845 505.5,549C 507.436,549.813 509.436,550.313 511.5,550.5C 511.329,553.797 511.995,554.131 513.5,551.5C 519.614,554.427 525.947,556.76 532.5,558.5C 528.873,559.153 525.54,560.487 522.5,562.5C 523.376,563.251 524.376,563.751 525.5,564C 524.376,564.249 523.376,564.749 522.5,565.5C 528.183,568.173 534.183,569.839 540.5,570.5C 542.286,570.304 543.619,569.471 544.5,568C 544.004,566.004 543.004,564.337 541.5,563C 543.971,562.294 546.305,562.627 548.5,564C 547.115,566.585 547.782,568.585 550.5,570C 549.551,570.617 548.718,570.451 548,569.5C 548.497,571.198 548.33,572.865 547.5,574.5C 550.446,575.653 553.446,576.653 556.5,577.5C 556.833,576.833 557.167,576.167 557.5,575.5C 559.409,576.348 561.409,576.682 563.5,576.5C 563.5,578.167 563.5,579.833 563.5,581.5C 552.779,578.371 542.113,575.038 531.5,571.5C 513.895,565.015 496.228,558.681 478.5,552.5C 478.804,551.85 479.137,551.183 479.5,550.5C 475.341,550.128 472.341,548.128 470.5,544.5C 472.047,544.793 473.714,544.293 475.5,543C 476.641,542.259 476.641,541.425 475.5,540.5C 476.243,539.818 476.909,539.151 477.5,538.5C 482.55,539.961 487.55,541.628 492.5,543.5C 493.696,543.154 493.696,542.654 492.5,542C 483.09,538.919 473.757,535.753 464.5,532.5C 464.918,531.778 465.584,531.278 466.5,531C 462.5,530.333 462.5,529.667 466.5,529C 465.328,528.581 464.328,527.915 463.5,527C 467.522,527.486 471.355,527.986 475,528.5C 475.995,527.934 476.828,527.267 477.5,526.5C 483.833,528.5 490.167,530.5 496.5,532.5C 496.036,533.647 494.703,534.647 492.5,535.5C 490.845,534.772 489.179,534.605 487.5,535C 489.224,535.448 489.891,536.282 489.5,537.5C 491.496,536.39 493.329,536.724 495,538.5C 495.219,537.062 495.719,535.729 496.5,534.5C 496.307,535.688 496.807,537.022 498,538.5C 498.494,536.866 498.66,535.199 498.5,533.5C 500.635,533.147 501.968,533.98 502.5,536C 500.616,539.758 499.949,543.592 500.5,547.5C 502.708,540.212 504.708,532.879 506.5,525.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c5c3c7\",d:\"M 64.5,536.5 C 65.0906,537.151 65.7573,537.818 66.5,538.5C 66.2907,539.086 65.9574,539.586 65.5,540C 66.8333,540 68.1667,540 69.5,540C 71.3937,541.079 71.727,542.413 70.5,544C 72.7409,543.729 74.7409,544.729 76.5,547C 75.6598,548.666 76.1598,548.833 78,547.5C 79.3618,549.436 81.1952,550.769 83.5,551.5C 84.1043,554.381 85.4377,556.714 87.5,558.5C 86.8333,558.833 86.1667,559.167 85.5,559.5C 84.6868,558.347 83.6868,558.347 82.5,559.5C 82.5105,558.559 82.0105,557.892 81,557.5C 80.228,557.645 79.5613,557.978 79,558.5C 77.4095,555.405 75.2428,552.738 72.5,550.5C 72.7093,549.914 73.0426,549.414 73.5,549C 72.2986,548.097 71.4652,546.931 71,545.5C 68.5,547.333 66,549.167 63.5,551C 64.624,551.249 65.624,551.749 66.5,552.5C 65.6034,552.669 64.6034,553.002 63.5,553.5C 67.7089,554.459 68.2089,556.126 65,558.5C 62.7987,555.879 60.9653,553.046 59.5,550C 60.3081,549.692 60.9747,549.192 61.5,548.5C 60.6086,547.41 59.6086,547.41 58.5,548.5C 55.6724,547.004 54.0057,544.671 53.5,541.5C 54.2634,540.281 55.2634,539.281 56.5,538.5C 54.4197,537.472 54.0864,536.138 55.5,534.5C 55.4148,533.005 56.0815,532.005 57.5,531.5C 61.9582,533.358 62.2915,535.525 58.5,538C 60.3502,537.405 62.3502,536.905 64.5,536.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a2978a\",d:\"M 132.5,550.5 C 132.786,552.933 133.452,552.933 134.5,550.5C 140.668,560.836 147.334,570.836 154.5,580.5C 151.695,579.259 149.529,577.259 148,574.5C 146.784,576.962 146.118,579.629 146,582.5C 145.808,580.423 145.308,578.423 144.5,576.5C 141.867,575.699 140.033,574.033 139,571.5C 139.333,569.167 139.667,566.833 140,564.5C 139.028,566.305 137.861,567.972 136.5,569.5C 135.692,569.192 135.025,568.692 134.5,568C 135.109,565.942 136.109,565.109 137.5,565.5C 136.975,564.808 136.308,564.308 135.5,564C 137.329,562.887 138.163,561.387 138,559.5C 137.282,558.549 136.449,558.383 135.5,559C 133.915,562.894 132.915,563.061 132.5,559.5C 133.837,558.685 134.837,557.518 135.5,556C 134.975,555.308 134.308,554.808 133.5,554.5C 131.738,555.688 130.738,557.355 130.5,559.5C 129.115,560.574 127.949,561.907 127,563.5C 126.097,562.299 124.931,561.465 123.5,561C 125.019,559.782 126.186,558.282 127,556.5C 129.33,559.182 129.83,558.849 128.5,555.5C 129.133,553.214 130.466,551.548 132.5,550.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a98c77\",d:\"M 104.5,535.5 C 106.833,538.167 109.167,540.833 111.5,543.5C 111.722,545.607 112.722,547.274 114.5,548.5C 113.943,550.235 113.61,551.902 113.5,553.5C 117.222,553.887 120.555,554.22 123.5,554.5C 122.49,557.141 120.824,559.141 118.5,560.5C 115.527,558.194 112.86,555.527 110.5,552.5C 110.938,552.565 111.272,552.399 111.5,552C 108.779,550.349 108.446,548.682 110.5,547C 107.353,543.762 105.353,539.929 104.5,535.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cbbca9\",d:\"M 111.5,543.5 C 113.538,545.035 115.205,547.035 116.5,549.5C 117.107,549.376 117.44,549.043 117.5,548.5C 118.778,548.218 119.778,547.551 120.5,546.5C 121.548,548.613 123.048,550.28 125,551.5C 126.734,549.71 128.234,547.71 129.5,545.5C 129.833,545.833 130.167,546.167 130.5,546.5C 129.253,548.497 128.419,550.497 128,552.5C 129.353,551.315 130.52,549.981 131.5,548.5C 132.298,548.957 132.631,549.624 132.5,550.5C 130.466,551.548 129.133,553.214 128.5,555.5C 129.83,558.849 129.33,559.182 127,556.5C 126.186,558.282 125.019,559.782 123.5,561C 124.931,561.465 126.097,562.299 127,563.5C 127.949,561.907 129.115,560.574 130.5,559.5C 130.5,561.833 130.5,564.167 130.5,566.5C 129.175,567.953 128.342,567.619 128,565.5C 127.667,566.5 127.333,567.5 127,568.5C 126.282,567.549 125.449,567.383 124.5,568C 122.7,569.812 121.033,571.645 119.5,573.5C 118.5,573.5 117.5,573.5 116.5,573.5C 116.5,572.5 116.5,571.5 116.5,570.5C 116.833,570.5 117.167,570.5 117.5,570.5C 119.934,569.901 121.601,568.401 122.5,566C 120.587,564.587 119.254,562.754 118.5,560.5C 120.824,559.141 122.49,557.141 123.5,554.5C 120.555,554.22 117.222,553.887 113.5,553.5C 113.61,551.902 113.943,550.235 114.5,548.5C 112.722,547.274 111.722,545.607 111.5,543.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dddcdf\",d:\"M 49.5,539.5 C 50.649,542.104 51.4823,544.771 52,547.5C 51.3964,545.314 50.2297,545.148 48.5,547C 47.5,548 46.5,549 45.5,550C 46.9561,550.423 47.4561,551.256 47,552.5C 45.8333,553.667 44.6667,554.833 43.5,556C 44.1667,556.667 44.8333,556.667 45.5,556C 48.0594,553.733 50.7261,551.566 53.5,549.5C 55.4521,551.228 56.7854,553.395 57.5,556C 54.7082,557.953 52.0415,560.12 49.5,562.5C 50.6293,564.529 50.1293,564.863 48,563.5C 47.3109,564.357 46.4776,565.023 45.5,565.5C 44.2888,566.274 44.2888,567.107 45.5,568C 43.2908,568.957 43.4575,570.124 46,571.5C 48.3996,569.585 50.8996,567.919 53.5,566.5C 47.2114,571.286 41.3781,576.62 36,582.5C 34.6802,580.183 33.0136,578.183 31,576.5C 27.1667,580 23.3333,583.5 19.5,587C 22.6215,586.324 25.6215,585.824 28.5,585.5C 28.8333,585.667 29.1667,585.833 29.5,586C 27.7401,589.505 25.5734,590.005 23,587.5C 20.636,589.363 18.136,591.029 15.5,592.5C 15.1667,591.833 14.8333,591.167 14.5,590.5C 11.2973,593.258 7.96392,595.758 4.5,598C 6.30308,598.637 7.63641,599.803 8.5,601.5C 11.35,599.573 14.0167,597.406 16.5,595C 17.1667,594.333 17.8333,594.333 18.5,595C 14.3114,598.69 9.97805,602.19 5.5,605.5C 3.71882,602.909 1.71882,600.575 -0.5,598.5C -0.5,596.167 -0.5,593.833 -0.5,591.5C 3.61138,590.405 7.27805,588.405 10.5,585.5C 10.1667,584.833 9.83333,584.167 9.5,583.5C 11.524,581.31 13.3573,578.977 15,576.5C 26.3978,564.175 37.8978,551.842 49.5,539.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b9ae9f\",d:\"M 296.5,561.5 C 296.662,563.527 296.495,565.527 296,567.5C 295.23,568.598 294.397,568.598 293.5,567.5C 291.989,566.498 290.322,565.831 288.5,565.5C 290.678,569.195 293.511,572.528 297,575.5C 298.507,578.701 300.007,581.868 301.5,585C 300.922,586.811 300.422,588.645 300,590.5C 298.547,587.702 297.547,584.702 297,581.5C 296.163,579.156 294.829,577.156 293,575.5C 294.82,579.144 295.986,583.144 296.5,587.5C 296.333,588.833 296.167,590.167 296,591.5C 295.617,590.944 295.117,590.611 294.5,590.5C 294.662,588.473 294.495,586.473 294,584.5C 290.304,580.142 286.637,575.808 283,571.5C 282.333,569.167 282.333,566.833 283,564.5C 285.958,561.209 285.125,560.709 280.5,563C 279,564.833 277.5,566.667 276,568.5C 274.919,571.968 275.585,574.968 278,577.5C 278.667,578.5 278.667,579.5 278,580.5C 274.303,578.952 272.469,576.119 272.5,572C 274.353,568.036 275.687,563.87 276.5,559.5C 273.833,559.5 271.167,559.5 268.5,559.5C 268.933,564.833 269.433,570.166 270,575.5C 273.639,580.933 276.806,586.6 279.5,592.5C 278.1,594.925 276.934,594.592 276,591.5C 275.667,593.5 275.333,595.5 275,597.5C 274.077,596.241 273.243,594.908 272.5,593.5C 271.702,593.957 271.369,594.624 271.5,595.5C 270.746,592.658 269.412,589.991 267.5,587.5C 269.485,587.604 270.985,588.937 272,591.5C 273.554,589.511 273.387,587.511 271.5,585.5C 272.525,585.103 272.692,584.437 272,583.5C 270.667,582.167 269.333,580.833 268,579.5C 267.667,573.5 267.333,567.5 267,561.5C 262.492,553.707 259.659,545.54 258.5,537C 260.3,536.764 261.966,537.264 263.5,538.5C 262.634,540.432 261.967,542.432 261.5,544.5C 263.721,549.745 265.555,549.411 267,543.5C 267.818,548.794 268.318,548.794 268.5,543.5C 272.59,544.384 276.423,546.051 280,548.5C 280.507,547.004 280.007,545.837 278.5,545C 280.289,544.48 281.956,544.813 283.5,546C 289.484,549.814 293.817,554.981 296.5,561.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d8d2c4\",d:\"M 236.5,542.5 C 235.537,546.87 235.537,551.203 236.5,555.5C 235.833,556.167 235.167,556.833 234.5,557.5C 235.246,558.736 235.579,560.07 235.5,561.5C 241.229,562.112 246.896,563.112 252.5,564.5C 248.541,565.327 244.541,565.827 240.5,566C 239.672,566.915 238.672,567.581 237.5,568C 242.126,567.811 245.626,569.644 248,573.5C 250.167,572 251.667,572.5 252.5,575C 252.095,575.945 251.428,576.612 250.5,577C 255.846,581.526 259.846,587.026 262.5,593.5C 262.154,594.696 261.654,594.696 261,593.5C 259.141,590.436 257.308,587.436 255.5,584.5C 253.173,581.684 250.339,579.35 247,577.5C 246.577,578.956 245.744,579.456 244.5,579C 245.517,577.951 245.684,576.784 245,575.5C 242.357,573.377 239.691,572.044 237,571.5C 235.175,569.52 234.341,567.187 234.5,564.5C 232.833,564.5 231.167,564.5 229.5,564.5C 230.167,568.5 230.833,572.5 231.5,576.5C 232.5,576.5 233.5,576.5 234.5,576.5C 234.762,577.978 234.429,579.311 233.5,580.5C 232.604,579.494 231.938,579.494 231.5,580.5C 232.189,582.522 233.522,583.856 235.5,584.5C 236.5,586.5 237.5,588.5 238.5,590.5C 237.542,590.047 236.708,589.381 236,588.5C 235.667,588.833 235.333,589.167 235,589.5C 234.138,587.913 233.471,586.246 233,584.5C 232.833,585.5 232.667,586.5 232.5,587.5C 234.003,592.645 236.336,597.312 239.5,601.5C 238.25,601.423 237.417,600.756 237,599.5C 236.667,600.167 236.333,600.833 236,601.5C 234.924,598.763 233.757,596.096 232.5,593.5C 232.005,591.518 231.505,589.518 231,587.5C 228.223,583.599 225.723,579.599 223.5,575.5C 223.028,573.693 222.694,571.86 222.5,570C 223.261,567.776 223.761,565.609 224,563.5C 222.644,562.62 221.144,562.286 219.5,562.5C 219.5,563.5 219.5,564.5 219.5,565.5C 218.85,565.196 218.183,564.863 217.5,564.5C 214.459,566.235 211.792,568.235 209.5,570.5C 204.893,573.931 200.393,577.597 196,581.5C 195.536,580.906 195.369,580.239 195.5,579.5C 201.3,575.865 205.967,571.031 209.5,565C 210.646,564.355 211.646,563.522 212.5,562.5C 214.895,563.523 215.895,562.523 215.5,559.5C 221.712,559.396 227.379,557.563 232.5,554C 233.817,551.063 233.817,548.23 232.5,545.5C 233.795,544.512 235.128,543.512 236.5,542.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dad3c6\",d:\"M 204.5,562.5 C 204.217,561.711 203.717,561.044 203,560.5C 201.027,561.64 199.193,562.973 197.5,564.5C 196.833,563.833 196.167,563.167 195.5,562.5C 193.665,565.401 191.331,566.067 188.5,564.5C 188.5,563.5 188.5,562.5 188.5,561.5C 189.287,559.896 190.62,559.229 192.5,559.5C 192.633,556.104 193.633,555.771 195.5,558.5C 198.561,556.944 201.728,555.611 205,554.5C 206.422,555.205 207.755,555.539 209,555.5C 209.417,554.244 210.25,553.577 211.5,553.5C 212.583,553.539 213.583,553.873 214.5,554.5C 215.833,553.5 217.167,552.5 218.5,551.5C 219.506,551.938 219.506,552.604 218.5,553.5C 214.112,557.022 209.445,560.022 204.5,562.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f6ecd3\",d:\"M 103.5,546.5 C 105.833,548.5 108.167,550.5 110.5,552.5C 112.86,555.527 115.527,558.194 118.5,560.5C 119.254,562.754 120.587,564.587 122.5,566C 121.601,568.401 119.934,569.901 117.5,570.5C 118.626,569.142 118.626,567.808 117.5,566.5C 116.167,565.5 114.833,564.5 113.5,563.5C 112.914,563.709 112.414,564.043 112,564.5C 109.802,558.965 106.135,554.632 101,551.5C 100.517,550.552 100.351,549.552 100.5,548.5C 100.973,547.094 101.973,546.427 103.5,546.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bdb6aa\",d:\"M 232.5,545.5 C 233.817,548.23 233.817,551.063 232.5,554C 227.379,557.563 221.712,559.396 215.5,559.5C 215.895,562.523 214.895,563.523 212.5,562.5C 211.646,563.522 210.646,564.355 209.5,565C 205.967,571.031 201.3,575.865 195.5,579.5C 194.404,576.968 193.071,574.635 191.5,572.5C 194.773,570.864 198.106,569.197 201.5,567.5C 211.575,560.555 221.908,553.222 232.5,545.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cdc3ba\",d:\"M 381.5,514.5 C 382.167,514.5 382.833,514.5 383.5,514.5C 384.167,514.5 384.833,514.5 385.5,514.5C 387.153,516.67 388.653,519.003 390,521.5C 390.806,527.084 390.639,532.584 389.5,538C 390.786,540.022 391.786,542.189 392.5,544.5C 390.33,548.596 388.663,548.429 387.5,544C 389.141,542.354 388.807,541.354 386.5,541C 389.131,539.309 388.797,538.142 385.5,537.5C 386.025,536.808 386.692,536.308 387.5,536C 386.09,535.632 385.09,534.799 384.5,533.5C 385.603,533.002 386.603,532.669 387.5,532.5C 386.41,530.638 385.41,528.805 384.5,527C 385.833,527 387.167,527 388.5,527C 387.167,526.333 387.167,525.667 388.5,525C 387.049,525.263 385.716,525.096 384.5,524.5C 385.025,523.808 385.692,523.308 386.5,523C 383.237,522.131 382.904,520.797 385.5,519C 383.431,518.676 383.098,517.842 384.5,516.5C 384.167,516.167 383.833,515.833 383.5,515.5C 382.61,518.394 381.276,521.061 379.5,523.5C 378.502,520.836 377.002,518.503 375,516.5C 375.164,521.405 376.498,526.405 379,531.5C 379.212,534.758 379.712,537.924 380.5,541C 379.834,543.788 380.667,546.288 383,548.5C 384.565,553.502 386.065,558.502 387.5,563.5C 389.939,567.144 391.606,571.144 392.5,575.5C 393.833,575.5 395.167,575.5 396.5,575.5C 396.338,577.527 396.505,579.527 397,581.5C 400.049,585.647 401.716,590.313 402,595.5C 403.011,596.337 404.178,596.67 405.5,596.5C 406.968,597.779 407.635,599.446 407.5,601.5C 411.908,601.062 413.575,603.062 412.5,607.5C 414.167,607.5 415.833,607.5 417.5,607.5C 417.5,609.5 417.5,611.5 417.5,613.5C 418.5,613.5 419.5,613.5 420.5,613.5C 422.127,616.627 423.96,619.627 426,622.5C 427.992,623.328 429.492,624.661 430.5,626.5C 430.528,630.319 428.862,631.319 425.5,629.5C 424.833,629.167 424.167,628.833 423.5,628.5C 424.853,627.476 425.52,626.143 425.5,624.5C 422.821,624.327 420.487,623.327 418.5,621.5C 419.167,620.833 419.833,620.167 420.5,619.5C 417.97,618.868 415.637,617.868 413.5,616.5C 414.025,615.808 414.692,615.308 415.5,615C 413.68,614.8 412.347,613.966 411.5,612.5C 411.87,608.814 410.537,607.814 407.5,609.5C 406.596,608.791 406.263,607.791 406.5,606.5C 405.5,606.5 404.5,606.5 403.5,606.5C 403.649,603.035 401.982,601.035 398.5,600.5C 397.548,598.955 397.215,597.288 397.5,595.5C 393.562,595.157 392.562,593.157 394.5,589.5C 393.271,588.719 391.938,588.219 390.5,588C 389.07,586.12 389.404,584.62 391.5,583.5C 392.524,584.853 393.857,585.52 395.5,585.5C 395.5,584.5 395.5,583.5 395.5,582.5C 392.391,582.345 389.391,581.678 386.5,580.5C 387.429,578.362 389.096,577.196 391.5,577C 390.1,575.562 388.433,574.729 386.5,574.5C 385.846,569.822 384.179,565.489 381.5,561.5C 382.025,560.808 382.692,560.308 383.5,560C 382.1,558.562 380.433,557.729 378.5,557.5C 378.466,554.801 379.133,552.301 380.5,550C 377.333,549.5 375.5,547.667 375,544.5C 374.329,543.748 373.496,543.414 372.5,543.5C 373.981,542.579 375.314,541.412 376.5,540C 375.167,538.667 375.167,537.333 376.5,536C 376.138,534.775 375.638,533.609 375,532.5C 373.989,533.337 372.822,533.67 371.5,533.5C 372.598,532.603 372.598,531.77 371.5,531C 374.668,530.418 375.001,529.418 372.5,528C 373.466,524.419 373.466,520.252 372.5,515.5C 374.167,515.5 375.833,515.5 377.5,515.5C 378.708,514.766 380.041,514.433 381.5,514.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9a9281\",d:\"M 87.5,558.5 C 87.4142,559.496 87.7476,560.329 88.5,561C 91.7895,561.882 95.1228,562.548 98.5,563C 94.949,566.642 95.949,567.809 101.5,566.5C 101.833,566.833 102.167,567.167 102.5,567.5C 101.757,568.182 101.091,568.849 100.5,569.5C 97.0257,569.747 96.359,570.747 98.5,572.5C 94.6217,574.01 92.2883,572.676 91.5,568.5C 92.0541,566.372 93.3874,564.872 95.5,564C 95.1667,563.833 94.8333,563.667 94.5,563.5C 90.4598,565.243 86.4598,566.909 82.5,568.5C 82.8432,566.517 82.1765,565.183 80.5,564.5C 81.973,562.605 83.6397,560.939 85.5,559.5C 86.1667,559.167 86.8333,558.833 87.5,558.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b09f8f\",d:\"M 356.5,550.5 C 359.945,559.01 363.278,567.51 366.5,576C 365.615,580.115 365.448,584.282 366,588.5C 365.121,585.654 363.454,584.987 361,586.5C 361.501,583.314 361.334,580.147 360.5,577C 362.747,574.584 362.913,572.084 361,569.5C 360.346,570.696 359.846,570.696 359.5,569.5C 360.428,568.232 360.595,566.899 360,565.5C 359.683,567.301 359.016,567.634 358,566.5C 356.315,561.796 354.148,557.462 351.5,553.5C 349.008,548.363 346.675,542.529 344.5,536C 345.191,534.933 345.691,533.766 346,532.5C 347.423,537.621 348.423,537.621 349,532.5C 350.18,536.217 351.513,539.884 353,543.5C 353.75,544.126 354.584,544.626 355.5,545C 354.692,545.308 354.025,545.808 353.5,546.5C 353.815,548.483 354.815,549.816 356.5,550.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e5e4e6\",d:\"M 13.5,507.5 C 18.2931,511.897 23.9598,514.73 30.5,516C 33.8199,518.994 37.4866,521.494 41.5,523.5C 45.2535,527.756 48.4201,532.423 51,537.5C 52.129,535.859 53.629,534.859 55.5,534.5C 54.0864,536.138 54.4197,537.472 56.5,538.5C 55.2634,539.281 54.2634,540.281 53.5,541.5C 54.0057,544.671 55.6724,547.004 58.5,548.5C 59.6086,547.41 60.6086,547.41 61.5,548.5C 60.9747,549.192 60.3081,549.692 59.5,550C 60.9653,553.046 62.7987,555.879 65,558.5C 68.2089,556.126 67.7089,554.459 63.5,553.5C 64.6034,553.002 65.6034,552.669 66.5,552.5C 65.624,551.749 64.624,551.249 63.5,551C 66,549.167 68.5,547.333 71,545.5C 71.4652,546.931 72.2986,548.097 73.5,549C 73.0426,549.414 72.7093,549.914 72.5,550.5C 75.2428,552.738 77.4095,555.405 79,558.5C 79.5613,557.978 80.228,557.645 81,557.5C 82.0105,557.892 82.5105,558.559 82.5,559.5C 83.6868,558.347 84.6868,558.347 85.5,559.5C 83.6397,560.939 81.973,562.605 80.5,564.5C 76.7891,566.211 74.1224,568.877 72.5,572.5C 71.5084,572.328 70.8417,572.662 70.5,573.5C 68.2855,573.267 66.2855,574.267 64.5,576.5C 64.44,575.957 64.1067,575.624 63.5,575.5C 61.9222,576.64 60.2555,577.14 58.5,577C 57.848,574.91 57.6813,572.743 58,570.5C 57.0975,571.701 55.9308,572.535 54.5,573C 55.2583,574.364 54.7583,575.531 53,576.5C 52.6758,574.431 51.8425,574.098 50.5,575.5C 49.5,575 48.5,574.5 47.5,574C 50.628,572.22 53.2947,570.553 55.5,569C 54.9341,568.005 54.2674,567.172 53.5,566.5C 50.8996,567.919 48.3996,569.585 46,571.5C 43.4575,570.124 43.2908,568.957 45.5,568C 44.2888,567.107 44.2888,566.274 45.5,565.5C 46.4776,565.023 47.3109,564.357 48,563.5C 50.1293,564.863 50.6293,564.529 49.5,562.5C 52.0415,560.12 54.7082,557.953 57.5,556C 56.7854,553.395 55.4521,551.228 53.5,549.5C 50.7261,551.566 48.0594,553.733 45.5,556C 44.8333,556.667 44.1667,556.667 43.5,556C 44.6667,554.833 45.8333,553.667 47,552.5C 47.4561,551.256 46.9561,550.423 45.5,550C 46.5,549 47.5,548 48.5,547C 50.2297,545.148 51.3964,545.314 52,547.5C 51.4823,544.771 50.649,542.104 49.5,539.5C 44.7419,529.074 37.0752,521.741 26.5,517.5C 25.913,518.233 25.913,519.233 26.5,520.5C 25.8826,520.611 25.3826,520.944 25,521.5C 24.6541,519.152 23.4875,517.319 21.5,516C 17.0479,513.252 12.7145,510.419 8.5,507.5C 6.03096,504.856 3.69762,502.023 1.5,499C 5.13979,501.621 8.63979,504.787 12,508.5C 12.3826,507.944 12.8826,507.611 13.5,507.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e5cdb3\",d:\"M 98.5,548.5 C 99.1667,548.5 99.8333,548.5 100.5,548.5C 100.351,549.552 100.517,550.552 101,551.5C 106.135,554.632 109.802,558.965 112,564.5C 112.414,564.043 112.914,563.709 113.5,563.5C 114.833,564.5 116.167,565.5 117.5,566.5C 118.626,567.808 118.626,569.142 117.5,570.5C 117.167,570.5 116.833,570.5 116.5,570.5C 114.567,570.271 112.9,569.438 111.5,568C 106.331,563.997 101.664,559.497 97.5,554.5C 97.8333,552.5 98.1667,550.5 98.5,548.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#6e5344\",d:\"M 123.5,527.5 C 127.068,527.759 128.401,529.759 127.5,533.5C 129.226,533.185 130.893,533.019 132.5,533C 131.939,534.566 132.606,535.899 134.5,537C 134.167,537.333 133.833,537.667 133.5,538C 134.981,538.98 136.315,540.147 137.5,541.5C 139.529,540.371 139.863,540.871 138.5,543C 140.41,544.701 141.577,546.867 142,549.5C 144.762,550.981 147.429,552.647 150,554.5C 151.074,562.733 154.574,569.733 160.5,575.5C 159.395,576.6 158.062,577.267 156.5,577.5C 153.109,574.391 149.943,571.057 147,567.5C 140.563,553.602 132.396,540.935 122.5,529.5C 122.833,528.833 123.167,528.167 123.5,527.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8e7962\",d:\"M 91.5,554.5 C 92.8333,555.833 94.1667,555.833 95.5,554.5C 96.1667,554.5 96.8333,554.5 97.5,554.5C 101.664,559.497 106.331,563.997 111.5,568C 112.9,569.438 114.567,570.271 116.5,570.5C 116.5,571.5 116.5,572.5 116.5,573.5C 117.5,573.5 118.5,573.5 119.5,573.5C 119.167,574.5 118.5,575.167 117.5,575.5C 112.446,576.098 107.779,576.098 103.5,575.5C 104.483,574.15 105.816,573.15 107.5,572.5C 105.979,572.12 104.313,571.954 102.5,572C 102.833,571.667 103.167,571.333 103.5,571C 102.263,570.768 101.263,570.268 100.5,569.5C 101.091,568.849 101.757,568.182 102.5,567.5C 102.167,567.167 101.833,566.833 101.5,566.5C 95.949,567.809 94.949,566.642 98.5,563C 95.1228,562.548 91.7895,561.882 88.5,561C 87.7476,560.329 87.4142,559.496 87.5,558.5C 89.1667,557.5 90.5,556.167 91.5,554.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f2efe7\",d:\"M 409.5,513.5 C 408.876,513.917 408.543,514.584 408.5,515.5C 410.52,521.279 411.02,527.279 410,533.5C 407.978,534.991 406.312,534.658 405,532.5C 404.187,534.436 403.687,536.436 403.5,538.5C 405.199,538.66 406.866,538.494 408.5,538C 407.692,537.692 407.025,537.192 406.5,536.5C 410.025,536.18 412.525,537.847 414,541.5C 414.654,540.304 415.154,540.304 415.5,541.5C 413.473,542.861 411.806,544.527 410.5,546.5C 412.434,552.47 414.268,558.47 416,564.5C 416.308,563.692 416.808,563.025 417.5,562.5C 419.213,563.878 420.547,565.545 421.5,567.5C 423.045,568.452 424.712,568.785 426.5,568.5C 425.372,573.61 427.039,576.277 431.5,576.5C 430.905,578.44 430.572,580.44 430.5,582.5C 431.009,586.867 431.676,591.201 432.5,595.5C 433.984,596.473 434.484,597.807 434,599.5C 431.692,598.359 429.859,596.692 428.5,594.5C 429.376,593.749 430.376,593.249 431.5,593C 429.75,591.681 427.75,591.181 425.5,591.5C 425.5,589.833 425.5,588.167 425.5,586.5C 426.675,586.719 427.675,586.386 428.5,585.5C 426.577,584.692 424.577,584.192 422.5,584C 423.138,582.293 423.138,580.46 422.5,578.5C 418.696,576.548 417.696,577.548 419.5,581.5C 418.25,581.577 417.417,582.244 417,583.5C 414.722,578.413 411.889,573.746 408.5,569.5C 407.691,567.929 407.357,566.262 407.5,564.5C 406.178,564.67 405.011,564.337 404,563.5C 402.009,565.592 400.009,565.258 398,562.5C 396.909,560.282 395.743,558.116 394.5,556C 395.426,552.913 394.759,550.08 392.5,547.5C 391.354,548.145 390.354,548.978 389.5,550C 390.75,551.975 392.083,553.141 393.5,553.5C 392.833,554.5 392.167,555.5 391.5,556.5C 391.846,557.696 392.346,557.696 393,556.5C 393.684,557.784 393.517,558.951 392.5,560C 393.308,560.308 393.975,560.808 394.5,561.5C 393.167,562.833 393.167,564.167 394.5,565.5C 394,565.833 393.5,566.167 393,566.5C 391.606,565.387 390.439,564.053 389.5,562.5C 388.817,562.863 388.15,563.196 387.5,563.5C 386.065,558.502 384.565,553.502 383,548.5C 380.667,546.288 379.834,543.788 380.5,541C 379.712,537.924 379.212,534.758 379,531.5C 376.498,526.405 375.164,521.405 375,516.5C 377.002,518.503 378.502,520.836 379.5,523.5C 381.276,521.061 382.61,518.394 383.5,515.5C 383.833,515.833 384.167,516.167 384.5,516.5C 383.098,517.842 383.431,518.676 385.5,519C 382.904,520.797 383.237,522.131 386.5,523C 385.692,523.308 385.025,523.808 384.5,524.5C 385.716,525.096 387.049,525.263 388.5,525C 387.167,525.667 387.167,526.333 388.5,527C 387.167,527 385.833,527 384.5,527C 385.41,528.805 386.41,530.638 387.5,532.5C 386.603,532.669 385.603,533.002 384.5,533.5C 385.09,534.799 386.09,535.632 387.5,536C 386.692,536.308 386.025,536.808 385.5,537.5C 388.797,538.142 389.131,539.309 386.5,541C 388.807,541.354 389.141,542.354 387.5,544C 388.663,548.429 390.33,548.596 392.5,544.5C 391.786,542.189 390.786,540.022 389.5,538C 390.639,532.584 390.806,527.084 390,521.5C 388.653,519.003 387.153,516.67 385.5,514.5C 387.262,514.357 388.929,514.691 390.5,515.5C 392.311,514.261 394.311,513.594 396.5,513.5C 401.034,513.954 405.367,513.954 409.5,513.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b6afa1\",d:\"M 100.5,569.5 C 101.263,570.268 102.263,570.768 103.5,571C 103.167,571.333 102.833,571.667 102.5,572C 104.313,571.954 105.979,572.12 107.5,572.5C 105.816,573.15 104.483,574.15 103.5,575.5C 102.784,577.556 102.117,579.723 101.5,582C 98.5738,582.218 95.7405,582.718 93,583.5C 92.586,583.043 92.086,582.709 91.5,582.5C 90.3331,584.079 88.9998,585.412 87.5,586.5C 86.6906,585.531 85.6906,584.698 84.5,584C 88.1146,579.315 89.7812,574.149 89.5,568.5C 88.5702,573.812 86.4035,578.478 83,582.5C 79.6309,578.963 76.1309,575.629 72.5,572.5C 74.1224,568.877 76.7891,566.211 80.5,564.5C 82.1765,565.183 82.8432,566.517 82.5,568.5C 86.4598,566.909 90.4598,565.243 94.5,563.5C 94.8333,563.667 95.1667,563.833 95.5,564C 93.3874,564.872 92.0541,566.372 91.5,568.5C 92.2883,572.676 94.6217,574.01 98.5,572.5C 96.359,570.747 97.0257,569.747 100.5,569.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c4b1b2\",d:\"M 49.5,539.5 C 37.8978,551.842 26.3978,564.175 15,576.5C 13.3573,578.977 11.524,581.31 9.5,583.5C 9.83333,584.167 10.1667,584.833 10.5,585.5C 7.27805,588.405 3.61138,590.405 -0.5,591.5C -0.5,584.833 -0.5,578.167 -0.5,571.5C 0.472826,572.791 1.47283,572.791 2.5,571.5C 3.19238,572.025 3.69238,572.692 4,573.5C 5.16667,572.333 6.33333,571.167 7.5,570C 6.16686,568.16 6.33353,567.66 8,568.5C 8.06495,566.117 8.89828,565.45 10.5,566.5C 14.1396,562.194 18.1396,558.194 22.5,554.5C 18.2194,550.492 18.5528,549.825 23.5,552.5C 26.875,548.956 30.375,545.623 34,542.5C 34.0628,539.525 33.3961,539.192 32,541.5C 32.0464,539.687 31.8797,538.021 31.5,536.5C 28.2545,539.05 27.7545,538.383 30,534.5C 30.3333,534.833 30.6667,535.167 31,535.5C 33.0328,533.65 33.0328,532.984 31,533.5C 30.3333,532.833 30.3333,532.167 31,531.5C 32.5625,531.741 34.0625,531.241 35.5,530C 32.2678,526.938 29.2678,523.771 26.5,520.5C 25.913,519.233 25.913,518.233 26.5,517.5C 37.0752,521.741 44.7419,529.074 49.5,539.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b5ac9b\",d:\"M 246.5,535.5 C 251.823,536.302 253.489,539.135 251.5,544C 252.825,543.852 253.992,544.018 255,544.5C 257.925,547.386 260.258,550.72 262,554.5C 262.667,557.833 262.667,561.167 262,564.5C 261.439,561.71 260.106,559.377 258,557.5C 258.032,559.598 258.699,561.598 260,563.5C 259.709,573.128 263.543,580.461 271.5,585.5C 273.387,587.511 273.554,589.511 272,591.5C 270.985,588.937 269.485,587.604 267.5,587.5C 269.412,589.991 270.746,592.658 271.5,595.5C 276.295,602.006 278.295,609.339 277.5,617.5C 276.732,616.737 276.232,615.737 276,614.5C 275.722,615.416 275.222,616.082 274.5,616.5C 273.419,614.236 272.085,612.069 270.5,610C 269.207,609.51 267.873,609.343 266.5,609.5C 266.665,606.15 266.498,602.817 266,599.5C 265.385,597.884 264.385,596.551 263,595.5C 264.454,598.567 265.12,601.901 265,605.5C 263.846,604.257 262.512,603.257 261,602.5C 260.995,599.771 259.829,597.771 257.5,596.5C 259.802,595.001 259.469,593.668 256.5,592.5C 255.52,589.914 255.187,587.247 255.5,584.5C 257.308,587.436 259.141,590.436 261,593.5C 261.654,594.696 262.154,594.696 262.5,593.5C 259.846,587.026 255.846,581.526 250.5,577C 251.428,576.612 252.095,575.945 252.5,575C 251.667,572.5 250.167,572 248,573.5C 245.626,569.644 242.126,567.811 237.5,568C 238.672,567.581 239.672,566.915 240.5,566C 244.541,565.827 248.541,565.327 252.5,564.5C 246.896,563.112 241.229,562.112 235.5,561.5C 235.579,560.07 235.246,558.736 234.5,557.5C 235.167,556.833 235.833,556.167 236.5,555.5C 235.537,551.203 235.537,546.87 236.5,542.5C 239.568,539.807 242.901,537.474 246.5,535.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8e8981\",d:\"M 531.5,571.5 C 542.113,575.038 552.779,578.371 563.5,581.5C 563.5,582.833 563.5,584.167 563.5,585.5C 557.087,582.878 550.42,580.878 543.5,579.5C 537.062,579.09 530.728,578.09 524.5,576.5C 526.554,574.806 528.888,573.639 531.5,573C 530.262,572.31 530.262,571.81 531.5,571.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e5e4e7\",d:\"M 53.5,566.5 C 54.2674,567.172 54.9341,568.005 55.5,569C 53.2947,570.553 50.628,572.22 47.5,574C 48.5,574.5 49.5,575 50.5,575.5C 51.8425,574.098 52.6758,574.431 53,576.5C 54.7583,575.531 55.2583,574.364 54.5,573C 55.9308,572.535 57.0975,571.701 58,570.5C 57.6813,572.743 57.848,574.91 58.5,577C 60.2555,577.14 61.9222,576.64 63.5,575.5C 64.1067,575.624 64.44,575.957 64.5,576.5C 51.8087,586.863 39.1421,597.197 26.5,607.5C 17.2326,614.094 8.23262,621.094 -0.5,628.5C -0.5,618.5 -0.5,608.5 -0.5,598.5C 1.71882,600.575 3.71882,602.909 5.5,605.5C 9.97805,602.19 14.3114,598.69 18.5,595C 17.8333,594.333 17.1667,594.333 16.5,595C 14.0167,597.406 11.35,599.573 8.5,601.5C 7.63641,599.803 6.30308,598.637 4.5,598C 7.96392,595.758 11.2973,593.258 14.5,590.5C 14.8333,591.167 15.1667,591.833 15.5,592.5C 18.136,591.029 20.636,589.363 23,587.5C 25.5734,590.005 27.7401,589.505 29.5,586C 29.1667,585.833 28.8333,585.667 28.5,585.5C 25.6215,585.824 22.6215,586.324 19.5,587C 23.3333,583.5 27.1667,580 31,576.5C 33.0136,578.183 34.6802,580.183 36,582.5C 41.3781,576.62 47.2114,571.286 53.5,566.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ede9df\",d:\"M 325.5,518.5 C 327.223,520.253 328.723,522.253 330,524.5C 330.177,528.356 330.677,532.023 331.5,535.5C 333.889,542.719 337.722,549.052 343,554.5C 344.864,559.343 346.197,564.343 347,569.5C 349.688,572.727 351.522,576.394 352.5,580.5C 352.391,586.849 354.225,592.516 358,597.5C 359.028,604.899 360.694,612.232 363,619.5C 364.405,620.731 365.571,622.064 366.5,623.5C 369.82,632.146 373.153,640.812 376.5,649.5C 376.167,649.5 375.833,649.5 375.5,649.5C 370.483,636.465 364.65,623.799 358,611.5C 353.803,608.592 349.636,605.592 345.5,602.5C 346,602.167 346.5,601.833 347,601.5C 348.626,602.289 350.126,603.289 351.5,604.5C 351.833,604.167 352.167,603.833 352.5,603.5C 349.195,599.859 345.862,596.192 342.5,592.5C 340.544,591.452 338.544,590.952 336.5,591C 338.016,595.051 340.349,598.551 343.5,601.5C 343.154,602.696 342.654,602.696 342,601.5C 341.333,602.167 341.333,602.833 342,603.5C 345.069,606.946 348.235,610.279 351.5,613.5C 351.333,613.833 351.167,614.167 351,614.5C 347.703,612.205 344.703,609.538 342,606.5C 342.975,609.719 344.975,612.386 348,614.5C 348.849,617.561 350.349,620.228 352.5,622.5C 352.03,623.463 351.363,623.463 350.5,622.5C 346.845,616.818 342.512,611.818 337.5,607.5C 338.314,602.46 336.48,598.794 332,596.5C 330.831,597.009 329.998,597.842 329.5,599C 331.85,602.069 332.683,605.569 332,609.5C 330.436,606.264 328.602,603.264 326.5,600.5C 326,598.5 325.5,596.5 325,594.5C 321.333,589.5 317.667,584.5 314,579.5C 313.667,579.833 313.333,580.167 313,580.5C 310.974,574.909 308.474,569.576 305.5,564.5C 306.002,563.479 306.668,563.312 307.5,564C 309.985,567.814 312.818,571.314 316,574.5C 316.333,574.167 316.667,573.833 317,573.5C 315.834,570.853 314.334,568.186 312.5,565.5C 313.311,564.784 313.978,563.95 314.5,563C 311.539,556.773 308.206,550.773 304.5,545C 305.908,544.685 307.241,545.018 308.5,546C 310.684,548.016 312.684,550.183 314.5,552.5C 315.5,552 316.5,551.5 317.5,551C 316.619,550.292 315.953,549.458 315.5,548.5C 315.842,547.662 316.508,547.328 317.5,547.5C 320.377,553.059 323.71,558.393 327.5,563.5C 327.013,564.446 326.68,565.446 326.5,566.5C 328.141,572.606 330.641,578.272 334,583.5C 334.333,583.167 334.667,582.833 335,582.5C 339.801,586.299 344.301,590.466 348.5,595C 350.792,593.899 352.292,594.732 353,597.5C 352.853,594.168 352.353,590.835 351.5,587.5C 351.551,585.9 351.884,584.4 352.5,583C 346.851,575.059 343.351,566.225 342,556.5C 336.212,549.095 331.045,541.262 326.5,533C 325.069,532.535 323.903,531.701 323,530.5C 322.667,531.5 322.333,532.5 322,533.5C 320.667,530.833 319.333,530.833 318,533.5C 316.507,531.44 314.674,531.107 312.5,532.5C 314.2,535.039 315.7,537.705 317,540.5C 318.092,537.014 319.925,536.681 322.5,539.5C 329.158,547.801 334.158,557.467 337.5,568.5C 337.333,568.833 337.167,569.167 337,569.5C 334.929,566.584 333.595,566.918 333,570.5C 332.26,567.824 331.927,565.158 332,562.5C 332.811,563.96 333.645,564.293 334.5,563.5C 332.016,557.196 328.516,551.53 324,546.5C 323.667,546.833 323.333,547.167 323,547.5C 320.574,545.548 318.074,543.881 315.5,542.5C 314.045,539.876 312.045,537.71 309.5,536C 309.735,535.127 310.069,534.293 310.5,533.5C 309.123,531.711 308.123,529.711 307.5,527.5C 307.97,526.537 308.637,526.537 309.5,527.5C 311.119,529.238 313.119,529.738 315.5,529C 314.289,528.107 314.289,527.274 315.5,526.5C 316.5,527.833 317.5,527.833 318.5,526.5C 322.132,527.984 325.466,529.984 328.5,532.5C 329.641,530.579 329.808,528.579 329,526.5C 327.546,523.929 326.38,521.262 325.5,518.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cec9bd\",d:\"M 317.5,547.5 C 316.91,545.903 315.91,544.569 314.5,543.5C 314.624,542.893 314.957,542.56 315.5,542.5C 318.074,543.881 320.574,545.548 323,547.5C 323.333,547.167 323.667,546.833 324,546.5C 328.516,551.53 332.016,557.196 334.5,563.5C 333.645,564.293 332.811,563.96 332,562.5C 331.927,565.158 332.26,567.824 333,570.5C 333.595,566.918 334.929,566.584 337,569.5C 337.167,569.167 337.333,568.833 337.5,568.5C 334.158,557.467 329.158,547.801 322.5,539.5C 319.925,536.681 318.092,537.014 317,540.5C 315.7,537.705 314.2,535.039 312.5,532.5C 314.674,531.107 316.507,531.44 318,533.5C 319.333,530.833 320.667,530.833 322,533.5C 322.333,532.5 322.667,531.5 323,530.5C 323.903,531.701 325.069,532.535 326.5,533C 331.045,541.262 336.212,549.095 342,556.5C 343.351,566.225 346.851,575.059 352.5,583C 351.884,584.4 351.551,585.9 351.5,587.5C 352.353,590.835 352.853,594.168 353,597.5C 352.292,594.732 350.792,593.899 348.5,595C 344.301,590.466 339.801,586.299 335,582.5C 334.667,582.833 334.333,583.167 334,583.5C 330.641,578.272 328.141,572.606 326.5,566.5C 326.68,565.446 327.013,564.446 327.5,563.5C 323.71,558.393 320.377,553.059 317.5,547.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b3afa4\",d:\"M 70.5,573.5 C 74.8333,577.167 78.8333,581.167 82.5,585.5C 79.853,587.811 77.1864,590.144 74.5,592.5C 73.3864,589.203 72.8864,585.869 73,582.5C 73.3333,582.833 73.6667,583.167 74,583.5C 74.4935,581.866 74.6602,580.199 74.5,578.5C 68.87,577.235 64.87,579.402 62.5,585C 60.1484,585.24 58.1484,586.073 56.5,587.5C 55.8333,587.833 55.1667,588.167 54.5,588.5C 54.1034,587.475 53.4368,587.308 52.5,588C 48.8333,591 45.1667,594 41.5,597C 42.1667,597.333 42.8333,597.667 43.5,598C 40.3081,600.692 36.9748,603.192 33.5,605.5C 33.3306,607.117 32.9972,608.784 32.5,610.5C 31.6043,611.506 30.9377,611.506 30.5,610.5C 31.4847,608.902 31.6514,607.235 31,605.5C 29.6703,606.582 28.1703,607.249 26.5,607.5C 39.1421,597.197 51.8087,586.863 64.5,576.5C 66.2855,574.267 68.2855,573.267 70.5,573.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#bab2a2\",d:\"M 154.5,580.5 C 157.248,580.598 157.914,579.598 156.5,577.5C 158.062,577.267 159.395,576.6 160.5,575.5C 161.71,575.068 162.71,574.401 163.5,573.5C 168.251,570.427 173.251,567.761 178.5,565.5C 182.505,565.506 185.838,564.173 188.5,561.5C 188.5,562.5 188.5,563.5 188.5,564.5C 191.331,566.067 193.665,565.401 195.5,562.5C 196.167,563.167 196.833,563.833 197.5,564.5C 199.193,562.973 201.027,561.64 203,560.5C 203.717,561.044 204.217,561.711 204.5,562.5C 199.982,565.505 195.316,568.338 190.5,571C 185.711,572.363 181.044,574.029 176.5,576C 179.475,576.044 182.475,575.877 185.5,575.5C 187.194,579.893 189.194,584.226 191.5,588.5C 191.379,589.894 191.046,591.228 190.5,592.5C 197.688,608.056 198.188,623.722 192,639.5C 191.257,637.355 190.424,637.189 189.5,639C 190.382,642.441 190.716,645.941 190.5,649.5C 188.5,649.5 186.5,649.5 184.5,649.5C 184.223,644.767 184.557,640.1 185.5,635.5C 184.628,633.55 183.961,631.55 183.5,629.5C 184.321,626.359 184.821,623.025 185,619.5C 186.197,622.089 187.197,624.756 188,627.5C 188.519,623.434 187.519,619.767 185,616.5C 184.502,613.518 184.335,610.518 184.5,607.5C 181.316,607.668 180.816,606.334 183,603.5C 184.863,594.086 182.53,586.752 176,581.5C 175.606,579.045 174.44,577.045 172.5,575.5C 171.808,576.025 171.308,576.692 171,577.5C 170.667,575.833 170.333,574.167 170,572.5C 169.808,574.577 169.308,576.577 168.5,578.5C 167.117,575.924 166.283,576.258 166,579.5C 165.085,578.672 164.419,577.672 164,576.5C 163.221,578.807 163.721,580.807 165.5,582.5C 163.183,589.032 162.35,589.032 163,582.5C 161.956,584.715 161.29,587.048 161,589.5C 160.374,587.009 159.541,587.009 158.5,589.5C 157.749,588.624 157.249,587.624 157,586.5C 156.667,586.833 156.333,587.167 156,587.5C 155.667,585.833 155.333,584.167 155,582.5C 154.333,584.833 154.333,587.167 155,589.5C 155.953,591.592 157.286,591.925 159,590.5C 159.449,593.394 158.782,596.061 157,598.5C 155.096,592.173 152.596,586.173 149.5,580.5C 148.833,582.167 148.167,583.833 147.5,585.5C 145.183,583.758 143.683,581.424 143,578.5C 142.516,580.913 142.85,583.246 144,585.5C 146.667,590.167 149.333,594.833 152,599.5C 152.064,603.902 152.231,608.236 152.5,612.5C 152.154,613.696 151.654,613.696 151,612.5C 150.505,614.473 150.338,616.473 150.5,618.5C 150.029,619.901 149.362,621.234 148.5,622.5C 147.794,617.268 146.794,612.101 145.5,607C 146.167,605 146.833,603 147.5,601C 147.387,598.601 146.387,596.768 144.5,595.5C 144.138,587.777 141.305,581.111 136,575.5C 135.394,572.287 134.227,569.287 132.5,566.5C 131.806,564.303 131.806,561.97 132.5,559.5C 132.915,563.061 133.915,562.894 135.5,559C 136.449,558.383 137.282,558.549 138,559.5C 138.163,561.387 137.329,562.887 135.5,564C 136.308,564.308 136.975,564.808 137.5,565.5C 136.109,565.109 135.109,565.942 134.5,568C 135.025,568.692 135.692,569.192 136.5,569.5C 137.861,567.972 139.028,566.305 140,564.5C 139.667,566.833 139.333,569.167 139,571.5C 140.033,574.033 141.867,575.699 144.5,576.5C 145.308,578.423 145.808,580.423 146,582.5C 146.118,579.629 146.784,576.962 148,574.5C 149.529,577.259 151.695,579.259 154.5,580.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#918170\",d:\"M 332.5,524.5 C 333.338,524.842 333.672,525.508 333.5,526.5C 332.957,526.56 332.624,526.893 332.5,527.5C 335.016,530.534 337.016,533.868 338.5,537.5C 341.068,538.28 343.068,539.78 344.5,542C 344.785,544.396 344.451,546.896 343.5,549.5C 344.5,549.5 345.5,549.5 346.5,549.5C 346.5,550.833 346.5,552.167 346.5,553.5C 347.5,553.5 348.5,553.5 349.5,553.5C 350.167,560.167 350.833,560.167 351.5,553.5C 354.148,557.462 356.315,561.796 358,566.5C 359.016,567.634 359.683,567.301 360,565.5C 360.595,566.899 360.428,568.232 359.5,569.5C 359.846,570.696 360.346,570.696 361,569.5C 362.913,572.084 362.747,574.584 360.5,577C 361.334,580.147 361.501,583.314 361,586.5C 363.454,584.987 365.121,585.654 366,588.5C 365.448,584.282 365.615,580.115 366.5,576C 363.278,567.51 359.945,559.01 356.5,550.5C 357.461,548.735 357.795,546.735 357.5,544.5C 362.861,551.085 365.528,558.585 365.5,567C 367.068,570.46 368.401,573.96 369.5,577.5C 368.12,577.962 367.453,578.962 367.5,580.5C 367.969,587.727 369.969,594.727 373.5,601.5C 372.726,602.711 371.893,602.711 371,601.5C 368.924,598.107 367.758,594.44 367.5,590.5C 364.813,590.664 362.146,590.497 359.5,590C 358.809,588.933 358.309,587.766 358,586.5C 357.667,586.833 357.333,587.167 357,587.5C 356.536,581.825 355.869,581.492 355,586.5C 354.998,583.949 354.164,581.949 352.5,580.5C 351.522,576.394 349.688,572.727 347,569.5C 346.197,564.343 344.864,559.343 343,554.5C 337.722,549.052 333.889,542.719 331.5,535.5C 331.244,531.731 331.577,528.064 332.5,524.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f3f1eb\",d:\"M 427.5,519.5 C 430.751,520.07 433.084,521.07 434.5,522.5C 434.5,523.833 434.5,525.167 434.5,526.5C 432.436,526.687 430.436,527.187 428.5,528C 430.421,528.36 432.088,529.194 433.5,530.5C 433.841,532.49 434.174,534.49 434.5,536.5C 435.776,537.645 437.109,537.645 438.5,536.5C 439.512,539.338 441.512,540.671 444.5,540.5C 444.5,540.833 444.5,541.167 444.5,541.5C 443.624,541.369 442.957,541.702 442.5,542.5C 443.77,543.288 444.77,544.288 445.5,545.5C 445.5,546.167 445.5,546.833 445.5,547.5C 444.133,546.147 443.133,546.481 442.5,548.5C 443.077,550.55 444.41,551.55 446.5,551.5C 447.341,555.567 446.007,558.567 442.5,560.5C 445.541,563.7 449.041,566.367 453,568.5C 456.285,572.623 459.785,576.623 463.5,580.5C 465.121,584.244 467.121,587.744 469.5,591C 468.5,591.667 467.5,591.667 466.5,591C 464.274,587.272 461.274,584.439 457.5,582.5C 456.571,583.689 456.238,585.022 456.5,586.5C 457.5,586.5 458.5,586.5 459.5,586.5C 459.5,588.167 459.5,589.833 459.5,591.5C 460.978,591.238 462.311,591.571 463.5,592.5C 469.043,598.036 473.376,604.37 476.5,611.5C 476.253,612.713 475.586,613.38 474.5,613.5C 473.828,612.733 472.995,612.066 472,611.5C 469.682,607.043 467.682,602.376 466,597.5C 465.586,597.043 465.086,596.709 464.5,596.5C 463.571,597.689 463.238,599.022 463.5,600.5C 460.386,599.909 457.886,598.242 456,595.5C 454.973,592.246 453.473,589.246 451.5,586.5C 450.5,585.167 449.5,585.167 448.5,586.5C 449.236,588.541 450.069,590.541 451,592.5C 451.893,591.289 452.726,591.289 453.5,592.5C 452.975,593.192 452.308,593.692 451.5,594C 452.051,595.398 452.384,596.732 452.5,598C 451.484,598.519 450.818,599.353 450.5,600.5C 450.624,602.951 450.958,605.451 451.5,608C 450.718,610.74 450.218,613.574 450,616.5C 449.52,614.867 448.687,613.534 447.5,612.5C 447.722,606.499 447.722,600.499 447.5,594.5C 446.167,594.5 444.833,594.5 443.5,594.5C 443.719,593.325 443.386,592.325 442.5,591.5C 442.167,592 441.833,592.5 441.5,593C 442.856,594.567 443.523,596.4 443.5,598.5C 442.325,598.719 441.325,598.386 440.5,597.5C 439.997,594.491 438.997,591.658 437.5,589C 437.381,585.722 437.715,582.388 438.5,579C 438.505,576.837 437.505,575.337 435.5,574.5C 436.661,572.776 436.495,571.11 435,569.5C 434.667,569.833 434.333,570.167 434,570.5C 432.5,569.333 431,568.167 429.5,567C 431.167,566.333 432.833,566.333 434.5,567C 436.257,569.846 438.257,572.512 440.5,575C 441.899,575.595 443.232,575.428 444.5,574.5C 446.083,576.99 447.083,579.657 447.5,582.5C 448.552,582.649 449.552,582.483 450.5,582C 448.963,580.89 448.297,579.39 448.5,577.5C 449.5,577.5 450.5,577.5 451.5,577.5C 451.5,578.5 451.5,579.5 451.5,580.5C 452.675,580.719 453.675,580.386 454.5,579.5C 453.687,578.186 452.687,577.019 451.5,576C 451.833,575.667 452.167,575.333 452.5,575C 451.382,573.926 450.382,572.76 449.5,571.5C 447.135,575.755 446.135,575.421 446.5,570.5C 442.722,569.807 442.722,568.64 446.5,567C 444.865,565.252 442.865,564.085 440.5,563.5C 441.668,562.094 441.335,560.928 439.5,560C 436.974,560.632 434.474,560.465 432,559.5C 431.365,558.034 430.531,556.7 429.5,555.5C 430.167,554.833 430.833,554.167 431.5,553.5C 429.851,552.352 428.351,551.019 427,549.5C 426.675,539.527 426.842,529.527 427.5,519.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dedacd\",d:\"M 130.5,566.5 C 131.323,568.455 131.49,570.455 131,572.5C 130.667,571.833 130.333,571.167 130,570.5C 129.333,571.833 128.667,571.833 128,570.5C 127.097,571.701 125.931,572.535 124.5,573C 125.833,574 125.833,575 124.5,576C 125.577,576.47 126.577,576.303 127.5,575.5C 130.317,583.097 132.984,590.764 135.5,598.5C 134.478,599.354 133.645,600.354 133,601.5C 133.28,596.113 131.28,591.78 127,588.5C 124.509,598.755 123.676,609.088 124.5,619.5C 123.167,618.167 121.833,616.833 120.5,615.5C 121.311,611.588 122.311,607.588 123.5,603.5C 123.281,602.062 122.781,600.729 122,599.5C 121.517,600.448 121.351,601.448 121.5,602.5C 115.713,603.325 111.379,601.325 108.5,596.5C 110.662,593.535 112.162,590.202 113,586.5C 116.475,584.784 116.975,582.617 114.5,580C 116.141,578.871 117.141,577.371 117.5,575.5C 118.5,575.167 119.167,574.5 119.5,573.5C 121.033,571.645 122.7,569.812 124.5,568C 125.449,567.383 126.282,567.549 127,568.5C 127.333,567.5 127.667,566.5 128,565.5C 128.342,567.619 129.175,567.953 130.5,566.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b1a997\",d:\"M 209.5,570.5 C 214.791,577.719 219.624,585.386 224,593.5C 224.433,595.664 223.933,597.664 222.5,599.5C 223.754,615.266 222.921,615.266 220,599.5C 218.385,596.55 216.385,593.884 214,591.5C 212.848,588.56 211.848,585.56 211,582.5C 210.372,588.892 208.872,589.059 206.5,583C 204.782,582.654 203.115,582.154 201.5,581.5C 200.158,583.005 198.492,583.672 196.5,583.5C 197.036,586.846 197.703,590.18 198.5,593.5C 198.253,594.713 197.586,595.38 196.5,595.5C 192.97,588.243 191.304,580.576 191.5,572.5C 193.071,574.635 194.404,576.968 195.5,579.5C 195.369,580.239 195.536,580.906 196,581.5C 200.393,577.597 204.893,573.931 209.5,570.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d1cabd\",d:\"M 294.5,590.5 C 293.5,590.5 292.5,590.5 291.5,590.5C 291.662,592.527 291.495,594.527 291,596.5C 290.094,593.879 289.594,594.046 289.5,597C 291.123,603.377 291.956,609.877 292,616.5C 292.333,614.5 292.667,612.5 293,610.5C 293.78,619.198 294.78,627.865 296,636.5C 296.471,638.246 297.138,639.913 298,641.5C 298.333,640.5 298.667,639.5 299,638.5C 300.011,639.337 301.178,639.67 302.5,639.5C 301.859,636.779 301.359,634.112 301,631.5C 302.551,636.934 305.384,641.6 309.5,645.5C 311.415,644.291 313.248,642.958 315,641.5C 316.162,642.187 317.328,642.353 318.5,642C 317.269,640.595 315.936,639.429 314.5,638.5C 315.93,638.421 317.264,638.754 318.5,639.5C 321.053,642.864 322.72,646.198 323.5,649.5C 314.167,649.5 304.833,649.5 295.5,649.5C 295.274,646.751 295.607,644.084 296.5,641.5C 294.343,635.104 292.343,628.604 290.5,622C 287.316,619.894 284.983,617.061 283.5,613.5C 283.245,615.343 283.078,617.343 283,619.5C 281.815,617.441 280.648,617.274 279.5,619C 279.964,623.457 280.131,627.957 280,632.5C 281.431,635.927 283.598,638.76 286.5,641C 284.322,641.165 282.489,640.332 281,638.5C 280,636.167 279,633.833 278,631.5C 278.22,626.661 278.053,621.994 277.5,617.5C 278.295,609.339 276.295,602.006 271.5,595.5C 271.369,594.624 271.702,593.957 272.5,593.5C 273.243,594.908 274.077,596.241 275,597.5C 275.333,595.5 275.667,593.5 276,591.5C 276.934,594.592 278.1,594.925 279.5,592.5C 276.806,586.6 273.639,580.933 270,575.5C 269.433,570.166 268.933,564.833 268.5,559.5C 271.167,559.5 273.833,559.5 276.5,559.5C 275.687,563.87 274.353,568.036 272.5,572C 272.469,576.119 274.303,578.952 278,580.5C 278.667,579.5 278.667,578.5 278,577.5C 275.585,574.968 274.919,571.968 276,568.5C 277.5,566.667 279,564.833 280.5,563C 285.125,560.709 285.958,561.209 283,564.5C 282.333,566.833 282.333,569.167 283,571.5C 286.637,575.808 290.304,580.142 294,584.5C 294.495,586.473 294.662,588.473 294.5,590.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ab9e92\",d:\"M 361.5,535.5 C 362.723,538.398 364.723,540.731 367.5,542.5C 368.568,543.434 369.901,543.768 371.5,543.5C 371.082,544.222 370.416,544.722 369.5,545C 370.576,549.562 372.243,553.896 374.5,558C 373.077,559.412 373.244,560.579 375,561.5C 375.333,563.833 375.667,566.167 376,568.5C 377.011,569.337 378.178,569.67 379.5,569.5C 379.5,570.5 379.5,571.5 379.5,572.5C 379.173,574.488 378.84,576.488 378.5,578.5C 379.64,581.419 380.473,584.419 381,587.5C 382,588.167 383,588.833 384,589.5C 384.401,592.699 385.234,595.699 386.5,598.5C 385.504,598.586 384.671,598.252 384,597.5C 383.506,595.866 383.34,594.199 383.5,592.5C 381.738,592.643 380.071,592.309 378.5,591.5C 377.702,591.957 377.369,592.624 377.5,593.5C 376.334,591.473 375.334,589.306 374.5,587C 374.306,582.284 374.639,577.784 375.5,573.5C 374.478,572.646 373.645,571.646 373,570.5C 371.309,564.767 369.642,559.1 368,553.5C 366.591,551.108 365.091,548.774 363.5,546.5C 364.025,545.808 364.692,545.308 365.5,545C 362.519,542.563 361.185,539.397 361.5,535.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c3bcad\",d:\"M 255.5,584.5 C 255.187,587.247 255.52,589.914 256.5,592.5C 259.469,593.668 259.802,595.001 257.5,596.5C 259.829,597.771 260.995,599.771 261,602.5C 262.512,603.257 263.846,604.257 265,605.5C 265.12,601.901 264.454,598.567 263,595.5C 264.385,596.551 265.385,597.884 266,599.5C 266.498,602.817 266.665,606.15 266.5,609.5C 267.873,609.343 269.207,609.51 270.5,610C 272.085,612.069 273.419,614.236 274.5,616.5C 272.713,615.553 271.047,614.387 269.5,613C 268.5,612.333 267.5,612.333 266.5,613C 268.406,614.856 269.24,617.023 269,619.5C 268,618.5 267,617.5 266,616.5C 265.833,616.833 265.667,617.167 265.5,617.5C 267.508,619.306 269.175,621.306 270.5,623.5C 270.104,626.435 269.104,629.102 267.5,631.5C 263.752,623.42 260.918,615.087 259,606.5C 257.594,607.668 256.428,607.335 255.5,605.5C 254.702,605.957 254.369,606.624 254.5,607.5C 253.539,605.735 253.205,603.735 253.5,601.5C 255.143,601.48 256.476,602.147 257.5,603.5C 258.59,602.609 258.59,601.609 257.5,600.5C 256.478,599.646 255.645,598.646 255,597.5C 254.667,597.833 254.333,598.167 254,598.5C 253.087,593.581 250.42,590.915 246,590.5C 245.517,589.552 245.351,588.552 245.5,587.5C 242.95,587.439 241.45,586.106 241,583.5C 240.667,583.833 240.333,584.167 240,584.5C 238.036,582.312 236.536,582.312 235.5,584.5C 233.522,583.856 232.189,582.522 231.5,580.5C 231.938,579.494 232.604,579.494 233.5,580.5C 234.429,579.311 234.762,577.978 234.5,576.5C 233.5,576.5 232.5,576.5 231.5,576.5C 230.833,572.5 230.167,568.5 229.5,564.5C 231.167,564.5 232.833,564.5 234.5,564.5C 234.341,567.187 235.175,569.52 237,571.5C 239.691,572.044 242.357,573.377 245,575.5C 245.684,576.784 245.517,577.951 244.5,579C 245.744,579.456 246.577,578.956 247,577.5C 250.339,579.35 253.173,581.684 255.5,584.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cac5bd\",d:\"M 543.5,579.5 C 550.42,580.878 557.087,582.878 563.5,585.5C 563.5,586.833 563.5,588.167 563.5,589.5C 560.907,590.853 558.073,591.519 555,591.5C 548.065,590.612 541.231,589.279 534.5,587.5C 534.167,586.833 533.833,586.167 533.5,585.5C 531.505,585.017 529.505,583.85 527.5,582C 525.765,581.349 524.098,581.515 522.5,582.5C 522.057,580.713 521.724,579.046 521.5,577.5C 521.783,576.711 522.283,576.044 523,575.5C 523.161,578.178 524.495,579.845 527,580.5C 532.604,580.603 538.104,580.27 543.5,579.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f2eee5\",d:\"M 371.5,543.5 C 371.833,543.5 372.167,543.5 372.5,543.5C 373.496,543.414 374.329,543.748 375,544.5C 375.5,547.667 377.333,549.5 380.5,550C 379.133,552.301 378.466,554.801 378.5,557.5C 380.433,557.729 382.1,558.562 383.5,560C 382.692,560.308 382.025,560.808 381.5,561.5C 384.179,565.489 385.846,569.822 386.5,574.5C 388.433,574.729 390.1,575.562 391.5,577C 389.096,577.196 387.429,578.362 386.5,580.5C 389.391,581.678 392.391,582.345 395.5,582.5C 395.5,583.5 395.5,584.5 395.5,585.5C 393.857,585.52 392.524,584.853 391.5,583.5C 389.404,584.62 389.07,586.12 390.5,588C 391.938,588.219 393.271,588.719 394.5,589.5C 392.562,593.157 393.562,595.157 397.5,595.5C 397.215,597.288 397.548,598.955 398.5,600.5C 401.982,601.035 403.649,603.035 403.5,606.5C 404.5,606.5 405.5,606.5 406.5,606.5C 406.263,607.791 406.596,608.791 407.5,609.5C 406.817,611.176 405.483,611.843 403.5,611.5C 403.649,610.448 403.483,609.448 403,608.5C 402.667,608.833 402.333,609.167 402,609.5C 399.757,604.59 396.423,600.59 392,597.5C 392.225,594.175 390.892,591.842 388,590.5C 387.808,588.423 387.308,586.423 386.5,584.5C 383.526,583.226 382.859,581.226 384.5,578.5C 384.297,576.792 383.464,575.459 382,574.5C 382.821,570.762 381.821,567.429 379,564.5C 378.833,565 378.667,565.5 378.5,566C 379.394,567.396 380.061,568.896 380.5,570.5C 380.457,571.416 380.124,572.083 379.5,572.5C 379.5,571.5 379.5,570.5 379.5,569.5C 378.178,569.67 377.011,569.337 376,568.5C 375.667,566.167 375.333,563.833 375,561.5C 373.244,560.579 373.077,559.412 374.5,558C 372.243,553.896 370.576,549.562 369.5,545C 370.416,544.722 371.082,544.222 371.5,543.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e2e1dd\",d:\"M 534.5,587.5 C 541.231,589.279 548.065,590.612 555,591.5C 558.073,591.519 560.907,590.853 563.5,589.5C 563.5,609.5 563.5,629.5 563.5,649.5C 562.833,649.5 562.167,649.5 561.5,649.5C 561.123,647.742 560.456,646.075 559.5,644.5C 560.441,644.511 561.108,644.011 561.5,643C 560.34,640.838 559.174,638.671 558,636.5C 555.26,635.718 552.426,635.218 549.5,635C 548.37,632.572 546.87,630.405 545,628.5C 544.866,625.128 544.032,621.961 542.5,619C 542.966,613.809 543.299,608.642 543.5,603.5C 542.5,603.5 541.5,603.5 540.5,603.5C 540.864,600.218 540.364,596.884 539,593.5C 536.898,591.905 535.398,589.905 534.5,587.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e7e5e0\",d:\"M 452.5,549.5 C 455.146,550.487 457.812,551.487 460.5,552.5C 461.167,552.167 461.833,551.833 462.5,551.5C 464.321,553.243 466.321,554.743 468.5,556C 472.648,556.661 476.648,557.827 480.5,559.5C 481.167,561.167 481.833,562.833 482.5,564.5C 483.429,563.311 483.762,561.978 483.5,560.5C 485.527,560.338 487.527,560.505 489.5,561C 493.777,564.294 498.277,567.127 503,569.5C 503.333,569.167 503.667,568.833 504,568.5C 508.265,572.114 512.765,575.281 517.5,578C 518.928,578.579 520.262,578.412 521.5,577.5C 521.724,579.046 522.057,580.713 522.5,582.5C 524.098,581.515 525.765,581.349 527.5,582C 529.505,583.85 531.505,585.017 533.5,585.5C 532.288,587.264 532.621,588.93 534.5,590.5C 534.167,590.833 533.833,591.167 533.5,591.5C 530.535,587.39 529.201,588.057 529.5,593.5C 528.022,593.238 526.689,593.571 525.5,594.5C 526.712,596.923 528.712,597.923 531.5,597.5C 531.328,601.534 530.828,605.534 530,609.5C 528.934,607.901 527.434,606.901 525.5,606.5C 523.929,607.309 522.262,607.643 520.5,607.5C 520.5,605.833 520.5,604.167 520.5,602.5C 519.017,599.548 518.017,596.381 517.5,593C 518.723,589.497 518.723,585.997 517.5,582.5C 515.452,581.917 513.619,581.917 512,582.5C 510.913,584.932 510.413,584.598 510.5,581.5C 509.5,581.5 508.5,581.5 507.5,581.5C 505.211,576.356 501.878,571.856 497.5,568C 496.207,567.51 494.873,567.343 493.5,567.5C 493.714,569.144 493.38,570.644 492.5,572C 493.784,572.684 494.951,572.517 496,571.5C 497.376,574.053 498.543,576.72 499.5,579.5C 498.963,580.741 498.296,581.908 497.5,583C 501.401,595.115 504.735,607.282 507.5,619.5C 507.543,623.893 507.043,624.226 506,620.5C 505.196,624.816 505.696,628.982 507.5,633C 507.167,633.833 506.833,634.667 506.5,635.5C 502.434,629.786 498.434,624.119 494.5,618.5C 494.833,617.833 495.167,617.167 495.5,616.5C 492.127,615.263 491.127,613.097 492.5,610C 491.109,608.35 489.609,607.85 488,608.5C 485.929,606.545 485.262,604.212 486,601.5C 489.385,597.858 489.218,594.358 485.5,591C 486.973,590.29 487.64,589.124 487.5,587.5C 491.223,586.476 491.057,585.143 487,583.5C 486.259,584.641 485.425,584.641 484.5,583.5C 482.517,581.19 481.517,578.523 481.5,575.5C 482.833,575.5 484.167,575.5 485.5,575.5C 486.072,570.754 484.072,568.087 479.5,567.5C 479.753,565.173 479.086,563.173 477.5,561.5C 476.253,563.006 476.253,564.506 477.5,566C 476.333,566.5 475.5,567.333 475,568.5C 474.107,567.289 473.274,567.289 472.5,568.5C 473.248,570.332 474.248,571.999 475.5,573.5C 476.274,574.711 477.107,574.711 478,573.5C 480.708,578.622 481.208,583.955 479.5,589.5C 476.739,587.923 474.073,586.09 471.5,584C 474.368,581.291 475.035,578.124 473.5,574.5C 471.323,575.504 470.989,574.838 472.5,572.5C 471.985,570.775 471.318,569.108 470.5,567.5C 469.604,568.506 468.938,568.506 468.5,567.5C 469.706,565.484 469.706,563.484 468.5,561.5C 467.851,563.624 467.017,565.624 466,567.5C 464.536,563.449 462.869,559.449 461,555.5C 458.689,553.89 456.189,552.557 453.5,551.5C 452.702,551.043 452.369,550.376 452.5,549.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c3bfb1\",d:\"M 82.5,585.5 C 84.5,586.167 85.8333,587.5 86.5,589.5C 83.7606,593.304 81.2606,597.304 79,601.5C 78.6667,600.833 78.3333,600.167 78,599.5C 77.1632,605.837 76.4966,605.503 76,598.5C 75.3333,599.167 74.6667,599.833 74,600.5C 73.7837,598.616 73.117,596.949 72,595.5C 70.3005,596.406 68.4672,596.739 66.5,596.5C 66.5,595.5 66.5,594.5 66.5,593.5C 62.8581,592.92 59.1914,592.42 55.5,592C 58.2841,591.199 60.6174,589.699 62.5,587.5C 60.674,587.08 58.674,587.08 56.5,587.5C 58.1484,586.073 60.1484,585.24 62.5,585C 64.87,579.402 68.87,577.235 74.5,578.5C 74.6602,580.199 74.4935,581.866 74,583.5C 73.6667,583.167 73.3333,582.833 73,582.5C 72.8864,585.869 73.3864,589.203 74.5,592.5C 77.1864,590.144 79.853,587.811 82.5,585.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b6b09e\",d:\"M 183.5,628.5 C 181.655,624.491 180.322,624.657 179.5,629C 180.684,630.548 180.517,632.048 179,633.5C 178.617,632.944 178.117,632.611 177.5,632.5C 178.525,619.167 177.025,606.167 173,593.5C 171.819,589.637 169.986,586.137 167.5,583C 172.167,582.982 175.167,585.315 176.5,590C 176.095,590.945 175.428,591.612 174.5,592C 175.894,596.072 177.06,600.238 178,604.5C 178.703,601.287 178.536,598.121 177.5,595C 177.944,593.238 178.444,593.405 179,595.5C 179.576,593.623 179.409,591.789 178.5,590C 178.667,589.5 178.833,589 179,588.5C 181.15,591.281 182.316,594.447 182.5,598C 181.402,602.38 180.402,606.714 179.5,611C 181.113,616.694 182.446,622.527 183.5,628.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f5f5f0\",d:\"M 520.5,602.5 C 519.305,602.866 518.639,603.699 518.5,605C 519.311,608.888 520.311,612.721 521.5,616.5C 521.013,617.446 520.68,618.446 520.5,619.5C 524.009,623.858 525.842,628.858 526,634.5C 526.333,632.167 526.667,629.833 527,627.5C 527.497,630.146 527.664,632.813 527.5,635.5C 528.5,635.5 529.5,635.5 530.5,635.5C 530.357,637.262 530.691,638.929 531.5,640.5C 529.427,643.119 528.427,646.119 528.5,649.5C 528.167,649.5 527.833,649.5 527.5,649.5C 527.586,648.504 527.252,647.671 526.5,647C 523.815,646.496 521.481,645.33 519.5,643.5C 515.887,636.539 516.22,629.706 520.5,623C 519.17,617.939 517.17,613.106 514.5,608.5C 512.944,606.299 511.777,606.299 511,608.5C 510.28,606.888 510.446,605.388 511.5,604C 510.033,602.902 509.199,601.402 509,599.5C 507.749,603.708 507.249,607.874 507.5,612C 509.034,616.399 509.534,620.899 509,625.5C 508.809,623.292 508.309,621.292 507.5,619.5C 504.735,607.282 501.401,595.115 497.5,583C 498.296,581.908 498.963,580.741 499.5,579.5C 498.543,576.72 497.376,574.053 496,571.5C 494.951,572.517 493.784,572.684 492.5,572C 493.38,570.644 493.714,569.144 493.5,567.5C 494.873,567.343 496.207,567.51 497.5,568C 501.878,571.856 505.211,576.356 507.5,581.5C 508.5,581.5 509.5,581.5 510.5,581.5C 510.413,584.598 510.913,584.932 512,582.5C 513.619,581.917 515.452,581.917 517.5,582.5C 518.723,585.997 518.723,589.497 517.5,593C 518.017,596.381 519.017,599.548 520.5,602.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dbd5c8\",d:\"M 293.5,567.5 C 293.821,569.048 294.821,569.715 296.5,569.5C 296.5,570.5 296.5,571.5 296.5,572.5C 297.5,572.5 298.5,572.5 299.5,572.5C 299.421,575.271 299.921,577.937 301,580.5C 302.959,583.456 304.459,586.623 305.5,590C 304.978,590.95 304.311,591.784 303.5,592.5C 304.6,596.442 304.767,600.442 304,604.5C 302.927,602.453 301.761,600.453 300.5,598.5C 301.041,610.665 304.374,621.998 310.5,632.5C 310,632.833 309.5,633.167 309,633.5C 306.393,631.805 303.56,630.639 300.5,630C 299.874,629.25 299.374,628.416 299,627.5C 298.15,624.079 297.484,620.746 297,617.5C 299.414,620.815 301.081,624.482 302,628.5C 301.624,622.185 300.957,615.852 300,609.5C 297.239,608.501 295.906,606.501 296,603.5C 295.735,599.751 295.901,596.251 296.5,593C 295.244,592.583 294.577,591.75 294.5,590.5C 295.117,590.611 295.617,590.944 296,591.5C 296.167,590.167 296.333,588.833 296.5,587.5C 295.986,583.144 294.82,579.144 293,575.5C 294.829,577.156 296.163,579.156 297,581.5C 297.547,584.702 298.547,587.702 300,590.5C 300.422,588.645 300.922,586.811 301.5,585C 300.007,581.868 298.507,578.701 297,575.5C 293.511,572.528 290.678,569.195 288.5,565.5C 290.322,565.831 291.989,566.498 293.5,567.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e6e1d9\",d:\"M 419.5,581.5 C 420.508,584.844 421.508,588.177 422.5,591.5C 421.5,591.5 420.5,591.5 419.5,591.5C 419.66,589.801 419.494,588.134 419,586.5C 418.107,585.289 417.274,585.289 416.5,586.5C 417.269,589.51 418.103,592.51 419,595.5C 423.474,600.16 428.307,604.16 433.5,607.5C 433.517,609.565 433.85,611.565 434.5,613.5C 433.141,612.993 432.141,611.993 431.5,610.5C 430.833,610.833 430.167,611.167 429.5,611.5C 427.391,608.391 425.225,605.391 423,602.5C 419.802,601.77 418.302,599.77 418.5,596.5C 416.61,596.703 415.11,596.037 414,594.5C 412.892,591.921 411.392,589.588 409.5,587.5C 410.167,586.833 410.833,586.167 411.5,585.5C 409.844,583.671 407.844,582.337 405.5,581.5C 408.983,580.943 410.65,578.943 410.5,575.5C 409.167,575.5 407.833,575.5 406.5,575.5C 406.5,573.833 406.5,572.167 406.5,570.5C 405.167,570.5 403.833,570.5 402.5,570.5C 402.762,569.022 402.429,567.689 401.5,566.5C 399.647,567.301 397.981,567.635 396.5,567.5C 398.683,569.707 400.016,572.374 400.5,575.5C 401.167,574.5 401.833,573.5 402.5,572.5C 403.086,572.709 403.586,573.043 404,573.5C 404.091,575.796 403.924,578.13 403.5,580.5C 403.442,583.089 404.108,585.423 405.5,587.5C 402.93,590.648 403.93,591.982 408.5,591.5C 408.5,592.833 408.5,594.167 408.5,595.5C 407.209,595.263 406.209,595.596 405.5,596.5C 404.178,596.67 403.011,596.337 402,595.5C 401.716,590.313 400.049,585.647 397,581.5C 396.505,579.527 396.338,577.527 396.5,575.5C 395.167,575.5 393.833,575.5 392.5,575.5C 391.606,571.144 389.939,567.144 387.5,563.5C 388.15,563.196 388.817,562.863 389.5,562.5C 390.439,564.053 391.606,565.387 393,566.5C 393.5,566.167 394,565.833 394.5,565.5C 393.167,564.167 393.167,562.833 394.5,561.5C 393.975,560.808 393.308,560.308 392.5,560C 393.517,558.951 393.684,557.784 393,556.5C 392.346,557.696 391.846,557.696 391.5,556.5C 392.167,555.5 392.833,554.5 393.5,553.5C 392.083,553.141 390.75,551.975 389.5,550C 390.354,548.978 391.354,548.145 392.5,547.5C 394.759,550.08 395.426,552.913 394.5,556C 395.743,558.116 396.909,560.282 398,562.5C 400.009,565.258 402.009,565.592 404,563.5C 405.011,564.337 406.178,564.67 407.5,564.5C 407.357,566.262 407.691,567.929 408.5,569.5C 411.889,573.746 414.722,578.413 417,583.5C 417.417,582.244 418.25,581.577 419.5,581.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c6beaf\",d:\"M 219.5,565.5 C 220.222,565.918 220.722,566.584 221,567.5C 221.214,572.885 221.714,578.219 222.5,583.5C 220.822,587.811 222.155,590.811 226.5,592.5C 227.663,597.802 227.829,603.136 227,608.5C 225.984,607.366 225.317,607.699 225,609.5C 224,614.833 223,620.167 222,625.5C 221.997,621.433 221.83,617.433 221.5,613.5C 220.419,622.137 219.752,630.804 219.5,639.5C 221.821,639.771 223.821,639.104 225.5,637.5C 225.833,637.833 226.167,638.167 226.5,638.5C 224.381,640.4 222.047,642.066 219.5,643.5C 218.534,645.396 218.201,647.396 218.5,649.5C 214.167,649.5 209.833,649.5 205.5,649.5C 205.666,640.494 205.5,631.494 205,622.5C 204.333,620.5 203.667,618.5 203,616.5C 202.237,619.063 201.737,619.063 201.5,616.5C 201.878,614.283 202.545,612.283 203.5,610.5C 203.684,612.925 204.351,612.925 205.5,610.5C 206.757,605.969 208.091,601.469 209.5,597C 207.755,592.385 204.589,590.552 200,591.5C 199.322,593.598 199.489,595.598 200.5,597.5C 199.778,597.918 199.278,598.584 199,599.5C 198.338,598.016 197.504,596.683 196.5,595.5C 197.586,595.38 198.253,594.713 198.5,593.5C 197.703,590.18 197.036,586.846 196.5,583.5C 198.492,583.672 200.158,583.005 201.5,581.5C 203.115,582.154 204.782,582.654 206.5,583C 208.872,589.059 210.372,588.892 211,582.5C 211.848,585.56 212.848,588.56 214,591.5C 216.385,593.884 218.385,596.55 220,599.5C 222.921,615.266 223.754,615.266 222.5,599.5C 223.933,597.664 224.433,595.664 224,593.5C 219.624,585.386 214.791,577.719 209.5,570.5C 211.792,568.235 214.459,566.235 217.5,564.5C 218.183,564.863 218.85,565.196 219.5,565.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a99b8d\",d:\"M 369.5,577.5 C 368.037,579.598 368.204,581.598 370,583.5C 371.342,582.098 372.176,582.431 372.5,584.5C 371.034,587.58 371.867,589.914 375,591.5C 375.595,592.899 375.428,594.232 374.5,595.5C 376.529,598.029 378.362,600.696 380,603.5C 380.667,601.833 380.667,600.167 380,598.5C 378.294,597.692 377.461,596.359 377.5,594.5C 379.179,594.892 380.846,595.392 382.5,596C 382.7,602.147 382.2,608.314 381,614.5C 379.647,613.315 378.48,611.981 377.5,610.5C 376.749,611.376 376.249,612.376 376,613.5C 375.667,611.5 375.333,609.5 375,607.5C 373.637,605.216 372.137,605.049 370.5,607C 372.291,609.106 372.958,611.606 372.5,614.5C 371.5,614.5 370.5,614.5 369.5,614.5C 369.532,611.924 368.865,609.591 367.5,607.5C 367.282,604.634 367.115,601.634 367,598.5C 365.47,596.774 364.47,594.774 364,592.5C 362.186,591.24 360.353,591.24 358.5,592.5C 359.395,595.808 360.229,599.141 361,602.5C 364.044,604.257 364.211,606.257 361.5,608.5C 362.189,610.444 362.689,612.444 363,614.5C 365.833,616.836 367,619.836 366.5,623.5C 365.571,622.064 364.405,620.731 363,619.5C 360.694,612.232 359.028,604.899 358,597.5C 354.225,592.516 352.391,586.849 352.5,580.5C 354.164,581.949 354.998,583.949 355,586.5C 355.869,581.492 356.536,581.825 357,587.5C 357.333,587.167 357.667,586.833 358,586.5C 358.309,587.766 358.809,588.933 359.5,590C 362.146,590.497 364.813,590.664 367.5,590.5C 367.758,594.44 368.924,598.107 371,601.5C 371.893,602.711 372.726,602.711 373.5,601.5C 369.969,594.727 367.969,587.727 367.5,580.5C 367.453,578.962 368.12,577.962 369.5,577.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#dcd5cc\",d:\"M 407.5,609.5 C 410.537,607.814 411.87,608.814 411.5,612.5C 410.022,612.238 408.689,612.571 407.5,613.5C 408.325,614.386 409.325,614.719 410.5,614.5C 411.442,617.42 412.776,620.086 414.5,622.5C 416.39,622.297 417.89,622.963 419,624.5C 419.186,628.449 420.853,631.449 424,633.5C 424.393,635.716 423.893,637.716 422.5,639.5C 421.448,639.649 420.448,639.483 419.5,639C 418.971,636.571 417.637,634.738 415.5,633.5C 415.12,635.493 414.786,637.827 414.5,640.5C 418.444,641.274 418.277,641.941 414,642.5C 408.119,641.078 406.119,637.412 408,631.5C 408.9,630.23 410.066,629.23 411.5,628.5C 408.549,626.052 405.715,623.385 403,620.5C 399.407,615.212 395.907,609.878 392.5,604.5C 391.234,603.638 389.901,602.971 388.5,602.5C 388.34,600.847 387.674,599.514 386.5,598.5C 385.234,595.699 384.401,592.699 384,589.5C 383,588.833 382,588.167 381,587.5C 380.473,584.419 379.64,581.419 378.5,578.5C 378.84,576.488 379.173,574.488 379.5,572.5C 380.124,572.083 380.457,571.416 380.5,570.5C 380.061,568.896 379.394,567.396 378.5,566C 378.667,565.5 378.833,565 379,564.5C 381.821,567.429 382.821,570.762 382,574.5C 383.464,575.459 384.297,576.792 384.5,578.5C 382.859,581.226 383.526,583.226 386.5,584.5C 387.308,586.423 387.808,588.423 388,590.5C 390.892,591.842 392.225,594.175 392,597.5C 396.423,600.59 399.757,604.59 402,609.5C 402.333,609.167 402.667,608.833 403,608.5C 403.483,609.448 403.649,610.448 403.5,611.5C 405.483,611.843 406.817,611.176 407.5,609.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b0a593\",d:\"M 203.5,610.5 C 203.394,605.957 202.394,601.624 200.5,597.5C 199.489,595.598 199.322,593.598 200,591.5C 204.589,590.552 207.755,592.385 209.5,597C 208.091,601.469 206.757,605.969 205.5,610.5C 204.351,612.925 203.684,612.925 203.5,610.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d0cdc0\",d:\"M 98.5,599.5 C 108.093,606.423 116.759,614.423 124.5,623.5C 127.269,624.296 129.936,624.629 132.5,624.5C 131.167,626.5 131.167,628.5 132.5,630.5C 131.523,634.732 130.023,638.732 128,642.5C 127.13,641.892 126.63,641.059 126.5,640C 127.206,637.38 128.206,634.88 129.5,632.5C 128.58,625.258 127.08,624.925 125,631.5C 125.18,637.549 125.014,643.549 124.5,649.5C 109.833,649.5 95.1667,649.5 80.5,649.5C 82.2868,645.02 83.4535,640.353 84,635.5C 84.7175,636.451 85.5509,636.617 86.5,636C 85.2404,634.186 85.2404,632.353 86.5,630.5C 88.3974,635.114 89.0641,639.78 88.5,644.5C 89.1667,644.833 89.8333,645.167 90.5,645.5C 91.3333,643.5 92.1667,641.5 93,639.5C 92.8172,632.202 92.4839,624.869 92,617.5C 91.1696,622.143 90.5029,626.81 90,631.5C 89.3333,624.833 89.3333,618.167 90,611.5C 91.6018,606.509 94.4352,602.509 98.5,599.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c7bfb1\",d:\"M 238.5,590.5 C 239.735,590.279 240.735,589.612 241.5,588.5C 241.833,588.833 242.167,589.167 242.5,589.5C 245.198,595.382 247.698,601.382 250,607.5C 250.995,610.126 251.328,612.793 251,615.5C 250.299,613.238 249.132,612.238 247.5,612.5C 248.043,616.342 249.043,620.009 250.5,623.5C 250.561,625.721 249.895,626.054 248.5,624.5C 245.045,617.013 242.045,609.346 239.5,601.5C 236.336,597.312 234.003,592.645 232.5,587.5C 232.667,586.5 232.833,585.5 233,584.5C 233.471,586.246 234.138,587.913 235,589.5C 235.333,589.167 235.667,588.833 236,588.5C 236.708,589.381 237.542,590.047 238.5,590.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b6af9e\",d:\"M 254.5,607.5 C 257.27,612.273 259.77,617.273 262,622.5C 264.769,631.549 266.936,640.549 268.5,649.5C 266.5,649.5 264.5,649.5 262.5,649.5C 261.928,644.181 261.262,638.847 260.5,633.5C 259.288,628.935 257.455,624.602 255,620.5C 254.691,621.766 254.191,622.933 253.5,624C 254.667,630.5 255.833,637 257,643.5C 257.333,642.167 257.667,640.833 258,639.5C 258.659,642.888 258.492,646.221 257.5,649.5C 255.5,649.5 253.5,649.5 251.5,649.5C 248.81,641.283 247.81,632.949 248.5,624.5C 249.895,626.054 250.561,625.721 250.5,623.5C 249.043,620.009 248.043,616.342 247.5,612.5C 249.132,612.238 250.299,613.238 251,615.5C 251.328,612.793 250.995,610.126 250,607.5C 247.698,601.382 245.198,595.382 242.5,589.5C 242.167,589.167 241.833,588.833 241.5,588.5C 240.735,589.612 239.735,590.279 238.5,590.5C 237.5,588.5 236.5,586.5 235.5,584.5C 236.536,582.312 238.036,582.312 240,584.5C 240.333,584.167 240.667,583.833 241,583.5C 241.45,586.106 242.95,587.439 245.5,587.5C 245.351,588.552 245.517,589.552 246,590.5C 250.42,590.915 253.087,593.581 254,598.5C 254.333,598.167 254.667,597.833 255,597.5C 255.645,598.646 256.478,599.646 257.5,600.5C 258.59,601.609 258.59,602.609 257.5,603.5C 256.476,602.147 255.143,601.48 253.5,601.5C 253.205,603.735 253.539,605.735 254.5,607.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#8d7a6a\",d:\"M 386.5,598.5 C 387.674,599.514 388.34,600.847 388.5,602.5C 388.821,604.048 389.821,604.715 391.5,604.5C 390.522,607.131 389.522,609.798 388.5,612.5C 387.372,613.262 386.205,613.929 385,614.5C 383.887,618.088 382.387,621.422 380.5,624.5C 378.337,625.281 378.004,624.447 379.5,622C 378.333,621.5 377.5,620.667 377,619.5C 375.951,620.517 374.784,620.684 373.5,620C 371.887,617.723 369.72,616.223 367,615.5C 366.727,613.899 366.227,612.399 365.5,611C 366.815,609.605 366.481,608.605 364.5,608C 365.448,607.517 366.448,607.351 367.5,607.5C 368.865,609.591 369.532,611.924 369.5,614.5C 370.5,614.5 371.5,614.5 372.5,614.5C 372.958,611.606 372.291,609.106 370.5,607C 372.137,605.049 373.637,605.216 375,607.5C 375.333,609.5 375.667,611.5 376,613.5C 376.249,612.376 376.749,611.376 377.5,610.5C 378.48,611.981 379.647,613.315 381,614.5C 382.2,608.314 382.7,602.147 382.5,596C 380.846,595.392 379.179,594.892 377.5,594.5C 377.5,594.167 377.5,593.833 377.5,593.5C 377.369,592.624 377.702,591.957 378.5,591.5C 380.071,592.309 381.738,592.643 383.5,592.5C 383.34,594.199 383.506,595.866 384,597.5C 384.671,598.252 385.504,598.586 386.5,598.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#fbf9f5\",d:\"M 445.5,547.5 C 449.918,548.83 451.585,551.83 450.5,556.5C 449.448,556.351 448.448,556.517 447.5,557C 448.227,558.399 448.727,559.899 449,561.5C 454.971,568.141 460.971,574.808 467,581.5C 468.313,584.443 469.813,587.277 471.5,590C 470.476,592.178 470.643,594.345 472,596.5C 479.243,604.238 485.076,612.905 489.5,622.5C 492.607,624.206 494.274,626.872 494.5,630.5C 491.305,632.439 488.305,632.439 485.5,630.5C 484.833,631.167 484.167,631.833 483.5,632.5C 479.84,631.089 476.174,629.755 472.5,628.5C 470.884,629.115 469.551,630.115 468.5,631.5C 467.719,630.271 467.219,628.938 467,627.5C 466,626.167 465,626.167 464,627.5C 463.768,626.263 463.268,625.263 462.5,624.5C 463.038,622.883 463.371,621.216 463.5,619.5C 465.674,619.92 467.674,619.92 469.5,619.5C 467.856,616.689 465.69,614.356 463,612.5C 462.392,610.846 461.892,609.179 461.5,607.5C 462.167,603.5 462.833,603.5 463.5,607.5C 464.873,607.343 466.207,607.51 467.5,608C 467.167,608.333 466.833,608.667 466.5,609C 468.121,612.312 470.788,613.812 474.5,613.5C 475.586,613.38 476.253,612.713 476.5,611.5C 473.376,604.37 469.043,598.036 463.5,592.5C 462.311,591.571 460.978,591.238 459.5,591.5C 459.5,589.833 459.5,588.167 459.5,586.5C 458.5,586.5 457.5,586.5 456.5,586.5C 456.238,585.022 456.571,583.689 457.5,582.5C 461.274,584.439 464.274,587.272 466.5,591C 467.5,591.667 468.5,591.667 469.5,591C 467.121,587.744 465.121,584.244 463.5,580.5C 459.785,576.623 456.285,572.623 453,568.5C 449.041,566.367 445.541,563.7 442.5,560.5C 446.007,558.567 447.341,555.567 446.5,551.5C 444.41,551.55 443.077,550.55 442.5,548.5C 443.133,546.481 444.133,546.147 445.5,547.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b4aa98\",d:\"M 232.5,593.5 C 231.5,593.5 230.5,593.5 229.5,593.5C 228.922,598.774 229.088,604.107 230,609.5C 233.41,613.009 233.244,613.675 229.5,611.5C 229.167,612.167 228.833,612.833 228.5,613.5C 229.536,616.379 231.203,618.879 233.5,621C 236.345,629.293 238.178,637.793 239,646.5C 240.011,645.663 241.178,645.33 242.5,645.5C 242.5,646.833 242.5,648.167 242.5,649.5C 234.5,649.5 226.5,649.5 218.5,649.5C 218.201,647.396 218.534,645.396 219.5,643.5C 222.047,642.066 224.381,640.4 226.5,638.5C 226.167,638.167 225.833,637.833 225.5,637.5C 223.821,639.104 221.821,639.771 219.5,639.5C 219.752,630.804 220.419,622.137 221.5,613.5C 221.83,617.433 221.997,621.433 222,625.5C 223,620.167 224,614.833 225,609.5C 225.317,607.699 225.984,607.366 227,608.5C 227.829,603.136 227.663,597.802 226.5,592.5C 222.155,590.811 220.822,587.811 222.5,583.5C 221.714,578.219 221.214,572.885 221,567.5C 220.722,566.584 220.222,565.918 219.5,565.5C 219.5,564.5 219.5,563.5 219.5,562.5C 221.144,562.286 222.644,562.62 224,563.5C 223.761,565.609 223.261,567.776 222.5,570C 222.694,571.86 223.028,573.693 223.5,575.5C 225.723,579.599 228.223,583.599 231,587.5C 231.505,589.518 232.005,591.518 232.5,593.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d6d1ca\",d:\"M 375.5,649.5 C 374.5,649.5 373.5,649.5 372.5,649.5C 372.628,647.345 372.128,645.345 371,643.5C 370.333,642.167 369.667,642.167 369,643.5C 368.71,641.956 368.044,640.623 367,639.5C 364.203,639.413 361.37,639.413 358.5,639.5C 357.833,638.833 357.167,638.167 356.5,637.5C 355.692,639.423 355.192,641.423 355,643.5C 353.935,636.347 352.601,636.013 351,642.5C 349.905,637.554 349.071,632.554 348.5,627.5C 348.801,625.578 349.467,623.912 350.5,622.5C 351.363,623.463 352.03,623.463 352.5,622.5C 350.349,620.228 348.849,617.561 348,614.5C 344.975,612.386 342.975,609.719 342,606.5C 344.703,609.538 347.703,612.205 351,614.5C 351.167,614.167 351.333,613.833 351.5,613.5C 348.235,610.279 345.069,606.946 342,603.5C 341.333,602.833 341.333,602.167 342,601.5C 342.654,602.696 343.154,602.696 343.5,601.5C 340.349,598.551 338.016,595.051 336.5,591C 338.544,590.952 340.544,591.452 342.5,592.5C 345.862,596.192 349.195,599.859 352.5,603.5C 352.167,603.833 351.833,604.167 351.5,604.5C 350.126,603.289 348.626,602.289 347,601.5C 346.5,601.833 346,602.167 345.5,602.5C 349.636,605.592 353.803,608.592 358,611.5C 364.65,623.799 370.483,636.465 375.5,649.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9f927e\",d:\"M 232.5,593.5 C 233.757,596.096 234.924,598.763 236,601.5C 236.333,600.833 236.667,600.167 237,599.5C 237.417,600.756 238.25,601.423 239.5,601.5C 242.045,609.346 245.045,617.013 248.5,624.5C 247.81,632.949 248.81,641.283 251.5,649.5C 248.5,649.5 245.5,649.5 242.5,649.5C 242.5,648.167 242.5,646.833 242.5,645.5C 241.178,645.33 240.011,645.663 239,646.5C 238.178,637.793 236.345,629.293 233.5,621C 231.203,618.879 229.536,616.379 228.5,613.5C 228.833,612.833 229.167,612.167 229.5,611.5C 233.244,613.675 233.41,613.009 230,609.5C 229.088,604.107 228.922,598.774 229.5,593.5C 230.5,593.5 231.5,593.5 232.5,593.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cfcabd\",d:\"M 191.5,572.5 C 191.304,580.576 192.97,588.243 196.5,595.5C 197.504,596.683 198.338,598.016 199,599.5C 199.278,598.584 199.778,597.918 200.5,597.5C 202.394,601.624 203.394,605.957 203.5,610.5C 202.545,612.283 201.878,614.283 201.5,616.5C 201.737,619.063 202.237,619.063 203,616.5C 203.667,618.5 204.333,620.5 205,622.5C 205.5,631.494 205.666,640.494 205.5,649.5C 200.5,649.5 195.5,649.5 190.5,649.5C 190.716,645.941 190.382,642.441 189.5,639C 190.424,637.189 191.257,637.355 192,639.5C 198.188,623.722 197.688,608.056 190.5,592.5C 191.046,591.228 191.379,589.894 191.5,588.5C 189.194,584.226 187.194,579.893 185.5,575.5C 187.181,573.992 189.181,572.992 191.5,572.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c9c6b7\",d:\"M 142.5,607.5 C 143.372,612.221 144.372,617.055 145.5,622C 145.042,626.658 144.042,631.158 142.5,635.5C 142.167,635.167 141.833,634.833 141.5,634.5C 143.633,629.9 143.466,625.567 141,621.5C 140.667,628.833 140.333,636.167 140,643.5C 138.053,645.063 136.886,647.063 136.5,649.5C 133.833,649.5 131.167,649.5 128.5,649.5C 128.977,644.879 130.81,640.879 134,637.5C 134.445,634.322 134.278,631.155 133.5,628C 133.641,626.045 134.474,624.545 136,623.5C 136.802,617.569 138.969,612.235 142.5,607.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b6b1a5\",d:\"M 26.5,607.5 C 26.2519,611.771 26.7519,615.104 28,617.5C 20.669,623.281 12.669,627.947 4,631.5C 3.66667,631.167 3.33333,630.833 3,630.5C 2.5838,632.55 1.41714,633.884 -0.5,634.5C -0.5,632.5 -0.5,630.5 -0.5,628.5C 8.23262,621.094 17.2326,614.094 26.5,607.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d9d5c9\",d:\"M 86.5,589.5 C 90.1463,591.482 93.1463,594.149 95.5,597.5C 90.6385,603.886 86.8052,610.886 84,618.5C 83,619.5 82,620.5 81,621.5C 78.5675,627.373 76.4008,633.373 74.5,639.5C 73.5,639.833 72.8333,640.5 72.5,641.5C 73.6405,642.425 73.6405,643.259 72.5,644C 74.7972,644.018 77.1305,643.851 79.5,643.5C 79.5,645.167 79.5,646.833 79.5,648.5C 77.901,648.232 76.5676,648.566 75.5,649.5C 64.8333,649.5 54.1667,649.5 43.5,649.5C 45.7375,647.612 48.0708,645.612 50.5,643.5C 50.1667,643.167 49.8333,642.833 49.5,642.5C 48.086,643.624 46.586,644.624 45,645.5C 44.3076,644.975 43.8076,644.308 43.5,643.5C 46.19,641.844 48.5233,639.844 50.5,637.5C 49.3687,636.396 48.5354,636.729 48,638.5C 42.1483,636.228 35.9816,634.895 29.5,634.5C 29.4208,633.07 29.7542,631.736 30.5,630.5C 33.8514,625.308 37.5181,620.308 41.5,615.5C 41,615.167 40.5,614.833 40,614.5C 37.9497,615.791 35.783,616.291 33.5,616C 34.8343,613.34 35.6676,610.506 36,607.5C 38.0287,604.404 40.862,602.738 44.5,602.5C 44.5878,605.309 46.0878,606.642 49,606.5C 51.8123,605.556 54.479,604.223 57,602.5C 59.077,603.017 61.077,603.684 63,604.5C 62.4829,611.04 59.1496,615.706 53,618.5C 52.7265,620.329 51.8932,621.829 50.5,623C 51.7702,623.9 52.7702,625.066 53.5,626.5C 56.1432,623.209 58.8099,619.876 61.5,616.5C 61.5,618.167 61.5,619.833 61.5,621.5C 63.1563,619.54 64.823,617.54 66.5,615.5C 66.8333,615.833 67.1667,616.167 67.5,616.5C 66.5589,618.772 65.2255,620.772 63.5,622.5C 64.6888,623.429 66.0222,623.762 67.5,623.5C 67.8441,626.62 67.1775,629.453 65.5,632C 66.8524,633.964 67.6857,636.131 68,638.5C 69.7824,629.128 70.4491,619.795 70,610.5C 69.3333,611.167 68.6667,611.833 68,612.5C 67.3333,609.833 67.3333,607.167 68,604.5C 69.5,606.333 71,608.167 72.5,610C 72.1744,620.888 71.6744,631.721 71,642.5C 72.3333,637.167 73.6667,631.833 75,626.5C 75.3076,627.308 75.8076,627.975 76.5,628.5C 77.3567,627.264 78.0234,625.931 78.5,624.5C 74.7352,620.967 73.2352,616.633 74,611.5C 76.1176,616.743 76.7843,616.41 76,610.5C 75.2904,609.027 74.1238,608.36 72.5,608.5C 72.3059,605.67 71.6392,603.004 70.5,600.5C 65.4367,598.649 60.27,596.982 55,595.5C 51.4963,596.598 47.9963,597.432 44.5,598C 45.4695,596.242 46.6361,595.742 48,596.5C 47.8516,595.175 48.0183,594.008 48.5,593C 50.9494,592.275 53.2827,591.275 55.5,590C 54.944,589.617 54.6107,589.117 54.5,588.5C 55.1667,588.167 55.8333,587.833 56.5,587.5C 58.674,587.08 60.674,587.08 62.5,587.5C 60.6174,589.699 58.2841,591.199 55.5,592C 59.1914,592.42 62.8581,592.92 66.5,593.5C 66.5,594.5 66.5,595.5 66.5,596.5C 68.4672,596.739 70.3005,596.406 72,595.5C 73.117,596.949 73.7837,598.616 74,600.5C 74.6667,599.833 75.3333,599.167 76,598.5C 76.4966,605.503 77.1632,605.837 78,599.5C 78.3333,600.167 78.6667,600.833 79,601.5C 81.2606,597.304 83.7606,593.304 86.5,589.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f7f3ea\",d:\"M 434.5,613.5 C 434.586,614.496 434.252,615.329 433.5,616C 435.104,617.237 436.771,618.403 438.5,619.5C 436.901,621.729 434.901,622.062 432.5,620.5C 431.002,617.747 429.002,615.414 426.5,613.5C 425.5,613.833 424.833,614.5 424.5,615.5C 426.167,616.833 427.833,618.167 429.5,619.5C 429.167,620.167 428.833,620.833 428.5,621.5C 430.113,622.427 431.779,623.261 433.5,624C 433.988,626.176 434.988,628.009 436.5,629.5C 437.76,627.647 437.76,625.814 436.5,624C 438.488,623.82 440.488,623.986 442.5,624.5C 442.444,628.447 444.11,631.447 447.5,633.5C 446.272,635.321 444.606,636.321 442.5,636.5C 442.268,629.696 440.935,629.196 438.5,635C 439.973,635.71 440.64,636.876 440.5,638.5C 437.355,637.923 435.855,635.923 436,632.5C 433.223,631.229 431.389,629.229 430.5,626.5C 429.492,624.661 427.992,623.328 426,622.5C 423.96,619.627 422.127,616.627 420.5,613.5C 419.5,613.5 418.5,613.5 417.5,613.5C 417.5,611.5 417.5,609.5 417.5,607.5C 415.833,607.5 414.167,607.5 412.5,607.5C 413.575,603.062 411.908,601.062 407.5,601.5C 407.635,599.446 406.968,597.779 405.5,596.5C 406.209,595.596 407.209,595.263 408.5,595.5C 408.5,594.167 408.5,592.833 408.5,591.5C 403.93,591.982 402.93,590.648 405.5,587.5C 404.108,585.423 403.442,583.089 403.5,580.5C 403.924,578.13 404.091,575.796 404,573.5C 403.586,573.043 403.086,572.709 402.5,572.5C 401.833,573.5 401.167,574.5 400.5,575.5C 400.016,572.374 398.683,569.707 396.5,567.5C 397.981,567.635 399.647,567.301 401.5,566.5C 402.429,567.689 402.762,569.022 402.5,570.5C 403.833,570.5 405.167,570.5 406.5,570.5C 406.5,572.167 406.5,573.833 406.5,575.5C 407.833,575.5 409.167,575.5 410.5,575.5C 410.65,578.943 408.983,580.943 405.5,581.5C 407.844,582.337 409.844,583.671 411.5,585.5C 410.833,586.167 410.167,586.833 409.5,587.5C 411.392,589.588 412.892,591.921 414,594.5C 415.11,596.037 416.61,596.703 418.5,596.5C 418.302,599.77 419.802,601.77 423,602.5C 425.225,605.391 427.391,608.391 429.5,611.5C 430.167,611.167 430.833,610.833 431.5,610.5C 432.141,611.993 433.141,612.993 434.5,613.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f9f5ef\",d:\"M 432.5,595.5 C 433.943,594.665 434.943,593.332 435.5,591.5C 435.264,594.583 435.764,597.583 437,600.5C 437.333,598.833 437.667,597.167 438,595.5C 438.273,597.329 439.107,598.829 440.5,600C 439.692,600.308 439.025,600.808 438.5,601.5C 439.348,603.409 439.682,605.409 439.5,607.5C 446.109,606.372 447.109,608.039 442.5,612.5C 442.833,612.833 443.167,613.167 443.5,613.5C 444.736,612.754 446.07,612.421 447.5,612.5C 448.687,613.534 449.52,614.867 450,616.5C 450.218,613.574 450.718,610.74 451.5,608C 450.958,605.451 450.624,602.951 450.5,600.5C 450.818,599.353 451.484,598.519 452.5,598C 452.384,596.732 452.051,595.398 451.5,594C 452.308,593.692 452.975,593.192 453.5,592.5C 452.726,591.289 451.893,591.289 451,592.5C 450.069,590.541 449.236,588.541 448.5,586.5C 449.5,585.167 450.5,585.167 451.5,586.5C 453.473,589.246 454.973,592.246 456,595.5C 457.886,598.242 460.386,599.909 463.5,600.5C 463.238,599.022 463.571,597.689 464.5,596.5C 465.086,596.709 465.586,597.043 466,597.5C 467.682,602.376 469.682,607.043 472,611.5C 472.995,612.066 473.828,612.733 474.5,613.5C 470.788,613.812 468.121,612.312 466.5,609C 466.833,608.667 467.167,608.333 467.5,608C 466.207,607.51 464.873,607.343 463.5,607.5C 462.833,603.5 462.167,603.5 461.5,607.5C 460.078,607.25 459.078,606.417 458.5,605C 456.866,604.506 455.199,604.34 453.5,604.5C 453.5,605.5 453.5,606.5 453.5,607.5C 454.5,607.5 455.5,607.5 456.5,607.5C 456.519,609.06 456.852,610.56 457.5,612C 459.203,613.37 460.536,615.036 461.5,617C 461.22,618.395 460.553,619.562 459.5,620.5C 458.264,619.754 456.93,619.421 455.5,619.5C 455.762,620.978 455.429,622.311 454.5,623.5C 453.376,622.086 452.376,620.586 451.5,619C 450.668,618.312 450.002,618.479 449.5,619.5C 453.034,625.885 457.534,631.551 463,636.5C 463.868,641.383 463.035,641.717 460.5,637.5C 459.271,636.719 457.938,636.219 456.5,636C 457.34,634.334 456.84,634.167 455,635.5C 455.897,637.904 457.063,640.237 458.5,642.5C 453.992,641.312 451.658,638.312 451.5,633.5C 450.325,633.719 449.325,633.386 448.5,632.5C 445.569,625.976 441.902,619.976 437.5,614.5C 436.675,613.614 435.675,613.281 434.5,613.5C 433.85,611.565 433.517,609.565 433.5,607.5C 428.307,604.16 423.474,600.16 419,595.5C 418.103,592.51 417.269,589.51 416.5,586.5C 417.274,585.289 418.107,585.289 419,586.5C 419.494,588.134 419.66,589.801 419.5,591.5C 420.5,591.5 421.5,591.5 422.5,591.5C 421.508,588.177 420.508,584.844 419.5,581.5C 417.696,577.548 418.696,576.548 422.5,578.5C 423.138,580.46 423.138,582.293 422.5,584C 424.577,584.192 426.577,584.692 428.5,585.5C 427.675,586.386 426.675,586.719 425.5,586.5C 425.5,588.167 425.5,589.833 425.5,591.5C 427.75,591.181 429.75,591.681 431.5,593C 430.376,593.249 429.376,593.749 428.5,594.5C 429.859,596.692 431.692,598.359 434,599.5C 434.484,597.807 433.984,596.473 432.5,595.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#eeefeb\",d:\"M 533.5,585.5 C 533.833,586.167 534.167,586.833 534.5,587.5C 535.398,589.905 536.898,591.905 539,593.5C 540.364,596.884 540.864,600.218 540.5,603.5C 541.5,603.5 542.5,603.5 543.5,603.5C 543.299,608.642 542.966,613.809 542.5,619C 544.032,621.961 544.866,625.128 545,628.5C 546.87,630.405 548.37,632.572 549.5,635C 552.426,635.218 555.26,635.718 558,636.5C 559.174,638.671 560.34,640.838 561.5,643C 561.108,644.011 560.441,644.511 559.5,644.5C 560.456,646.075 561.123,647.742 561.5,649.5C 550.5,649.5 539.5,649.5 528.5,649.5C 528.427,646.119 529.427,643.119 531.5,640.5C 530.691,638.929 530.357,637.262 530.5,635.5C 529.5,635.5 528.5,635.5 527.5,635.5C 527.664,632.813 527.497,630.146 527,627.5C 526.667,629.833 526.333,632.167 526,634.5C 525.842,628.858 524.009,623.858 520.5,619.5C 520.68,618.446 521.013,617.446 521.5,616.5C 520.311,612.721 519.311,608.888 518.5,605C 518.639,603.699 519.305,602.866 520.5,602.5C 520.5,604.167 520.5,605.833 520.5,607.5C 522.262,607.643 523.929,607.309 525.5,606.5C 527.434,606.901 528.934,607.901 530,609.5C 530.828,605.534 531.328,601.534 531.5,597.5C 528.712,597.923 526.712,596.923 525.5,594.5C 526.689,593.571 528.022,593.238 529.5,593.5C 529.201,588.057 530.535,587.39 533.5,591.5C 533.833,591.167 534.167,590.833 534.5,590.5C 532.621,588.93 532.288,587.264 533.5,585.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d9d5c9\",d:\"M 144.5,595.5 C 146.387,596.768 147.387,598.601 147.5,601C 146.833,603 146.167,605 145.5,607C 146.794,612.101 147.794,617.268 148.5,622.5C 149.362,621.234 150.029,619.901 150.5,618.5C 150.182,623.013 150.682,627.68 152,632.5C 152.333,631.167 152.667,629.833 153,628.5C 154.438,631.821 154.605,635.154 153.5,638.5C 153.938,639.506 154.604,639.506 155.5,638.5C 156.839,642.185 158.172,645.851 159.5,649.5C 151.833,649.5 144.167,649.5 136.5,649.5C 136.886,647.063 138.053,645.063 140,643.5C 140.333,636.167 140.667,628.833 141,621.5C 143.466,625.567 143.633,629.9 141.5,634.5C 141.833,634.833 142.167,635.167 142.5,635.5C 144.042,631.158 145.042,626.658 145.5,622C 144.372,617.055 143.372,612.221 142.5,607.5C 143.486,603.557 144.152,599.557 144.5,595.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cfc8bb\",d:\"M 262.5,649.5 C 260.833,649.5 259.167,649.5 257.5,649.5C 258.492,646.221 258.659,642.888 258,639.5C 257.667,640.833 257.333,642.167 257,643.5C 255.833,637 254.667,630.5 253.5,624C 254.191,622.933 254.691,621.766 255,620.5C 257.455,624.602 259.288,628.935 260.5,633.5C 261.262,638.847 261.928,644.181 262.5,649.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c6bfb3\",d:\"M 296.5,561.5 C 297.497,561.47 298.164,561.97 298.5,563C 300.58,572.985 305.413,581.485 313,588.5C 313.741,591.019 312.908,592.685 310.5,593.5C 310.657,592.127 310.49,590.793 310,589.5C 309.667,590.167 309.333,590.833 309,591.5C 308.333,600.5 308.333,609.5 309,618.5C 309.912,622.101 311.412,625.601 313.5,629C 312.978,629.95 312.311,630.784 311.5,631.5C 311.887,634.238 312.887,636.572 314.5,638.5C 315.936,639.429 317.269,640.595 318.5,642C 317.328,642.353 316.162,642.187 315,641.5C 313.248,642.958 311.415,644.291 309.5,645.5C 305.384,641.6 302.551,636.934 301,631.5C 301.359,634.112 301.859,636.779 302.5,639.5C 301.178,639.67 300.011,639.337 299,638.5C 298.667,639.5 298.333,640.5 298,641.5C 297.138,639.913 296.471,638.246 296,636.5C 294.78,627.865 293.78,619.198 293,610.5C 292.667,612.5 292.333,614.5 292,616.5C 291.956,609.877 291.123,603.377 289.5,597C 289.594,594.046 290.094,593.879 291,596.5C 291.495,594.527 291.662,592.527 291.5,590.5C 292.5,590.5 293.5,590.5 294.5,590.5C 294.577,591.75 295.244,592.583 296.5,593C 295.901,596.251 295.735,599.751 296,603.5C 295.906,606.501 297.239,608.501 300,609.5C 300.957,615.852 301.624,622.185 302,628.5C 301.081,624.482 299.414,620.815 297,617.5C 297.484,620.746 298.15,624.079 299,627.5C 299.374,628.416 299.874,629.25 300.5,630C 303.56,630.639 306.393,631.805 309,633.5C 309.5,633.167 310,632.833 310.5,632.5C 304.374,621.998 301.041,610.665 300.5,598.5C 301.761,600.453 302.927,602.453 304,604.5C 304.767,600.442 304.6,596.442 303.5,592.5C 304.311,591.784 304.978,590.95 305.5,590C 304.459,586.623 302.959,583.456 301,580.5C 299.921,577.937 299.421,575.271 299.5,572.5C 298.5,572.5 297.5,572.5 296.5,572.5C 296.5,571.5 296.5,570.5 296.5,569.5C 294.821,569.715 293.821,569.048 293.5,567.5C 294.397,568.598 295.23,568.598 296,567.5C 296.495,565.527 296.662,563.527 296.5,561.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ece6dc\",d:\"M 310.5,593.5 C 310.192,598.371 311.025,603.037 313,607.5C 313.179,604.853 313.012,602.186 312.5,599.5C 312.598,597.381 313.431,595.714 315,594.5C 315.333,597.833 315.667,601.167 316,604.5C 317.63,606.151 317.463,607.817 315.5,609.5C 315.859,614.399 317.026,619.066 319,623.5C 319.333,622.5 319.667,621.5 320,620.5C 324.694,630.562 329.86,640.228 335.5,649.5C 331.5,649.5 327.5,649.5 323.5,649.5C 322.72,646.198 321.053,642.864 318.5,639.5C 317.264,638.754 315.93,638.421 314.5,638.5C 312.887,636.572 311.887,634.238 311.5,631.5C 312.311,630.784 312.978,629.95 313.5,629C 311.412,625.601 309.912,622.101 309,618.5C 308.333,609.5 308.333,600.5 309,591.5C 309.333,590.833 309.667,590.167 310,589.5C 310.49,590.793 310.657,592.127 310.5,593.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#9e927f\",d:\"M 367.5,607.5 C 366.448,607.351 365.448,607.517 364.5,608C 366.481,608.605 366.815,609.605 365.5,611C 366.227,612.399 366.727,613.899 367,615.5C 369.72,616.223 371.887,617.723 373.5,620C 374.784,620.684 375.951,620.517 377,619.5C 377.5,620.667 378.333,621.5 379.5,622C 378.004,624.447 378.337,625.281 380.5,624.5C 380.701,627.728 380.367,630.895 379.5,634C 379.93,635.434 380.764,636.601 382,637.5C 381.501,634.482 381.668,631.482 382.5,628.5C 384.173,626.914 386.173,626.247 388.5,626.5C 388.337,624.143 388.503,621.81 389,619.5C 389.414,619.043 389.914,618.709 390.5,618.5C 391.124,620.958 392.624,622.624 395,623.5C 395.494,625.134 395.66,626.801 395.5,628.5C 394.167,628.5 392.833,628.5 391.5,628.5C 391.671,631.797 391.005,632.131 389.5,629.5C 388.749,630.376 388.249,631.376 388,632.5C 387.667,632.167 387.333,631.833 387,631.5C 386.359,637.528 386.526,643.528 387.5,649.5C 383.833,649.5 380.167,649.5 376.5,649.5C 373.153,640.812 369.82,632.146 366.5,623.5C 367,619.836 365.833,616.836 363,614.5C 362.689,612.444 362.189,610.444 361.5,608.5C 364.211,606.257 364.044,604.257 361,602.5C 360.229,599.141 359.395,595.808 358.5,592.5C 360.353,591.24 362.186,591.24 364,592.5C 364.47,594.774 365.47,596.774 367,598.5C 367.115,601.634 367.282,604.634 367.5,607.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#f1eeea\",d:\"M 445.5,545.5 C 448.295,546.063 450.628,547.396 452.5,549.5C 452.369,550.376 452.702,551.043 453.5,551.5C 456.189,552.557 458.689,553.89 461,555.5C 462.869,559.449 464.536,563.449 466,567.5C 467.017,565.624 467.851,563.624 468.5,561.5C 469.706,563.484 469.706,565.484 468.5,567.5C 468.938,568.506 469.604,568.506 470.5,567.5C 471.318,569.108 471.985,570.775 472.5,572.5C 470.989,574.838 471.323,575.504 473.5,574.5C 475.035,578.124 474.368,581.291 471.5,584C 474.073,586.09 476.739,587.923 479.5,589.5C 481.208,583.955 480.708,578.622 478,573.5C 477.107,574.711 476.274,574.711 475.5,573.5C 474.248,571.999 473.248,570.332 472.5,568.5C 473.274,567.289 474.107,567.289 475,568.5C 475.5,567.333 476.333,566.5 477.5,566C 476.253,564.506 476.253,563.006 477.5,561.5C 479.086,563.173 479.753,565.173 479.5,567.5C 484.072,568.087 486.072,570.754 485.5,575.5C 484.167,575.5 482.833,575.5 481.5,575.5C 481.517,578.523 482.517,581.19 484.5,583.5C 485.425,584.641 486.259,584.641 487,583.5C 491.057,585.143 491.223,586.476 487.5,587.5C 487.64,589.124 486.973,590.29 485.5,591C 489.218,594.358 489.385,597.858 486,601.5C 485.262,604.212 485.929,606.545 488,608.5C 489.609,607.85 491.109,608.35 492.5,610C 491.127,613.097 492.127,615.263 495.5,616.5C 495.167,617.167 494.833,617.833 494.5,618.5C 498.434,624.119 502.434,629.786 506.5,635.5C 506.833,634.667 507.167,633.833 507.5,633C 505.696,628.982 505.196,624.816 506,620.5C 507.043,624.226 507.543,623.893 507.5,619.5C 508.309,621.292 508.809,623.292 509,625.5C 509.534,620.899 509.034,616.399 507.5,612C 507.249,607.874 507.749,603.708 509,599.5C 509.199,601.402 510.033,602.902 511.5,604C 510.446,605.388 510.28,606.888 511,608.5C 511.777,606.299 512.944,606.299 514.5,608.5C 517.17,613.106 519.17,617.939 520.5,623C 516.22,629.706 515.887,636.539 519.5,643.5C 521.481,645.33 523.815,646.496 526.5,647C 527.252,647.671 527.586,648.504 527.5,649.5C 514.833,649.5 502.167,649.5 489.5,649.5C 489.585,648.005 488.919,647.005 487.5,646.5C 486.679,643.553 486.179,640.553 486,637.5C 483.124,635.734 480.457,633.734 478,631.5C 474.637,632.681 471.637,634.348 469,636.5C 467.234,635.767 465.401,635.433 463.5,635.5C 463.579,634.07 463.246,632.736 462.5,631.5C 457.979,630.334 456.646,627.668 458.5,623.5C 459.736,624.246 461.07,624.579 462.5,624.5C 463.268,625.263 463.768,626.263 464,627.5C 465,626.167 466,626.167 467,627.5C 467.219,628.938 467.719,630.271 468.5,631.5C 469.551,630.115 470.884,629.115 472.5,628.5C 476.174,629.755 479.84,631.089 483.5,632.5C 484.167,631.833 484.833,631.167 485.5,630.5C 488.305,632.439 491.305,632.439 494.5,630.5C 494.274,626.872 492.607,624.206 489.5,622.5C 485.076,612.905 479.243,604.238 472,596.5C 470.643,594.345 470.476,592.178 471.5,590C 469.813,587.277 468.313,584.443 467,581.5C 460.971,574.808 454.971,568.141 449,561.5C 448.727,559.899 448.227,558.399 447.5,557C 448.448,556.517 449.448,556.351 450.5,556.5C 451.585,551.83 449.918,548.83 445.5,547.5C 445.5,546.833 445.5,546.167 445.5,545.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ccc5b7\",d:\"M 183.5,629.5 C 183.5,629.167 183.5,628.833 183.5,628.5C 182.446,622.527 181.113,616.694 179.5,611C 180.402,606.714 181.402,602.38 182.5,598C 182.316,594.447 181.15,591.281 179,588.5C 178.833,589 178.667,589.5 178.5,590C 179.409,591.789 179.576,593.623 179,595.5C 178.444,593.405 177.944,593.238 177.5,595C 178.536,598.121 178.703,601.287 178,604.5C 177.06,600.238 175.894,596.072 174.5,592C 175.428,591.612 176.095,590.945 176.5,590C 175.167,585.315 172.167,582.982 167.5,583C 169.986,586.137 171.819,589.637 173,593.5C 177.025,606.167 178.525,619.167 177.5,632.5C 178.354,638.121 178.687,643.788 178.5,649.5C 172.167,649.5 165.833,649.5 159.5,649.5C 158.172,645.851 156.839,642.185 155.5,638.5C 154.604,639.506 153.938,639.506 153.5,638.5C 154.605,635.154 154.438,631.821 153,628.5C 152.667,629.833 152.333,631.167 152,632.5C 150.682,627.68 150.182,623.013 150.5,618.5C 150.338,616.473 150.505,614.473 151,612.5C 151.654,613.696 152.154,613.696 152.5,612.5C 152.231,608.236 152.064,603.902 152,599.5C 149.333,594.833 146.667,590.167 144,585.5C 142.85,583.246 142.516,580.913 143,578.5C 143.683,581.424 145.183,583.758 147.5,585.5C 148.167,583.833 148.833,582.167 149.5,580.5C 152.596,586.173 155.096,592.173 157,598.5C 158.782,596.061 159.449,593.394 159,590.5C 157.286,591.925 155.953,591.592 155,589.5C 154.333,587.167 154.333,584.833 155,582.5C 155.333,584.167 155.667,585.833 156,587.5C 156.333,587.167 156.667,586.833 157,586.5C 157.249,587.624 157.749,588.624 158.5,589.5C 159.541,587.009 160.374,587.009 161,589.5C 161.29,587.048 161.956,584.715 163,582.5C 162.35,589.032 163.183,589.032 165.5,582.5C 163.721,580.807 163.221,578.807 164,576.5C 164.419,577.672 165.085,578.672 166,579.5C 166.283,576.258 167.117,575.924 168.5,578.5C 169.308,576.577 169.808,574.577 170,572.5C 170.333,574.167 170.667,575.833 171,577.5C 171.308,576.692 171.808,576.025 172.5,575.5C 174.44,577.045 175.606,579.045 176,581.5C 182.53,586.752 184.863,594.086 183,603.5C 180.816,606.334 181.316,607.668 184.5,607.5C 184.335,610.518 184.502,613.518 185,616.5C 187.519,619.767 188.519,623.434 188,627.5C 187.197,624.756 186.197,622.089 185,619.5C 184.821,623.025 184.321,626.359 183.5,629.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#b6af9e\",d:\"M 166.5,584.5 C 169.486,587.062 169.153,589.229 165.5,591C 167.41,591.408 168.41,592.575 168.5,594.5C 167.257,596.691 166.424,599.024 166,601.5C 165.667,600.833 165.333,600.167 165,599.5C 164.26,602.176 163.927,604.842 164,607.5C 164.333,606.833 164.667,606.167 165,605.5C 169.126,610.421 171.626,616.087 172.5,622.5C 172.366,630.105 172.199,637.771 172,645.5C 170.352,640.907 169.019,636.241 168,631.5C 167,634.167 166,636.833 165,639.5C 164.833,638.667 164.667,637.833 164.5,637C 166.092,630.798 167.759,624.631 169.5,618.5C 169.007,615.515 167.84,612.848 166,610.5C 165.692,611.308 165.192,611.975 164.5,612.5C 163.833,617.167 163.167,621.833 162.5,626.5C 161.066,628.22 160.233,630.22 160,632.5C 160.226,628.573 160.392,624.74 160.5,621C 158.511,619.39 158.178,617.557 159.5,615.5C 157.856,614.092 156.522,612.258 155.5,610C 156.032,607.98 157.365,607.147 159.5,607.5C 159.481,602.938 160.314,598.604 162,594.5C 162.29,596.044 162.956,597.377 164,598.5C 162.907,593.527 163.741,588.861 166.5,584.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cec9bc\",d:\"M 54.5,588.5 C 54.6107,589.117 54.944,589.617 55.5,590C 53.2827,591.275 50.9494,592.275 48.5,593C 48.0183,594.008 47.8516,595.175 48,596.5C 46.6361,595.742 45.4695,596.242 44.5,598C 47.9963,597.432 51.4963,596.598 55,595.5C 60.27,596.982 65.4367,598.649 70.5,600.5C 71.6392,603.004 72.3059,605.67 72.5,608.5C 74.1238,608.36 75.2904,609.027 76,610.5C 76.7843,616.41 76.1176,616.743 74,611.5C 73.2352,616.633 74.7352,620.967 78.5,624.5C 78.0234,625.931 77.3567,627.264 76.5,628.5C 75.8076,627.975 75.3076,627.308 75,626.5C 73.6667,631.833 72.3333,637.167 71,642.5C 71.6744,631.721 72.1744,620.888 72.5,610C 71,608.167 69.5,606.333 68,604.5C 67.3333,607.167 67.3333,609.833 68,612.5C 68.6667,611.833 69.3333,611.167 70,610.5C 70.4491,619.795 69.7824,629.128 68,638.5C 67.6857,636.131 66.8524,633.964 65.5,632C 67.1775,629.453 67.8441,626.62 67.5,623.5C 66.0222,623.762 64.6888,623.429 63.5,622.5C 65.2255,620.772 66.5589,618.772 67.5,616.5C 67.1667,616.167 66.8333,615.833 66.5,615.5C 64.823,617.54 63.1563,619.54 61.5,621.5C 61.5,619.833 61.5,618.167 61.5,616.5C 58.8099,619.876 56.1432,623.209 53.5,626.5C 52.7702,625.066 51.7702,623.9 50.5,623C 51.8932,621.829 52.7265,620.329 53,618.5C 59.1496,615.706 62.4829,611.04 63,604.5C 61.077,603.684 59.077,603.017 57,602.5C 54.479,604.223 51.8123,605.556 49,606.5C 46.0878,606.642 44.5878,605.309 44.5,602.5C 40.862,602.738 38.0287,604.404 36,607.5C 35.6676,610.506 34.8343,613.34 33.5,616C 35.783,616.291 37.9497,615.791 40,614.5C 40.5,614.833 41,615.167 41.5,615.5C 37.5181,620.308 33.8514,625.308 30.5,630.5C 29.7542,631.736 29.4208,633.07 29.5,634.5C 35.9816,634.895 42.1483,636.228 48,638.5C 48.5354,636.729 49.3687,636.396 50.5,637.5C 48.5233,639.844 46.19,641.844 43.5,643.5C 43.8076,644.308 44.3076,644.975 45,645.5C 46.586,644.624 48.086,643.624 49.5,642.5C 49.8333,642.833 50.1667,643.167 50.5,643.5C 48.0708,645.612 45.7375,647.612 43.5,649.5C 34.1667,649.5 24.8333,649.5 15.5,649.5C 15.2267,647.549 15.8934,646.049 17.5,645C 20.3106,644.089 23.1439,643.256 26,642.5C 27.0921,643.296 28.2588,643.963 29.5,644.5C 33.3403,642.079 37.3403,639.912 41.5,638C 38.2847,637.411 35.2847,637.911 32.5,639.5C 29.0569,639.279 28.7236,638.279 31.5,636.5C 31.1667,636.167 30.8333,635.833 30.5,635.5C 28.6687,636.929 26.6687,637.429 24.5,637C 26.0074,636.163 26.5074,634.996 26,633.5C 23.9437,635.319 21.7771,635.985 19.5,635.5C 19.9767,634.522 20.6433,633.689 21.5,633C 18.4914,631.735 15.4914,631.402 12.5,632C 13.1667,632.667 13.8333,633.333 14.5,634C 12.3476,635.413 10.0143,636.246 7.5,636.5C 7.5,637.5 7.5,638.5 7.5,639.5C 4.43107,640.775 1.76441,640.775 -0.5,639.5C -0.5,637.833 -0.5,636.167 -0.5,634.5C 1.41714,633.884 2.5838,632.55 3,630.5C 3.33333,630.833 3.66667,631.167 4,631.5C 12.669,627.947 20.669,623.281 28,617.5C 26.7519,615.104 26.2519,611.771 26.5,607.5C 28.1703,607.249 29.6703,606.582 31,605.5C 31.6514,607.235 31.4847,608.902 30.5,610.5C 30.9377,611.506 31.6043,611.506 32.5,610.5C 32.9972,608.784 33.3306,607.117 33.5,605.5C 36.9748,603.192 40.3081,600.692 43.5,598C 42.8333,597.667 42.1667,597.333 41.5,597C 45.1667,594 48.8333,591 52.5,588C 53.4368,587.308 54.1034,587.475 54.5,588.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ebe6dd\",d:\"M 461.5,607.5 C 461.892,609.179 462.392,610.846 463,612.5C 465.69,614.356 467.856,616.689 469.5,619.5C 467.674,619.92 465.674,619.92 463.5,619.5C 463.371,621.216 463.038,622.883 462.5,624.5C 461.07,624.579 459.736,624.246 458.5,623.5C 456.646,627.668 457.979,630.334 462.5,631.5C 463.246,632.736 463.579,634.07 463.5,635.5C 465.401,635.433 467.234,635.767 469,636.5C 471.637,634.348 474.637,632.681 478,631.5C 480.457,633.734 483.124,635.734 486,637.5C 486.179,640.553 486.679,643.553 487.5,646.5C 488.919,647.005 489.585,648.005 489.5,649.5C 469.5,649.5 449.5,649.5 429.5,649.5C 427.192,646.185 424.859,642.851 422.5,639.5C 423.893,637.716 424.393,635.716 424,633.5C 420.853,631.449 419.186,628.449 419,624.5C 417.89,622.963 416.39,622.297 414.5,622.5C 412.776,620.086 411.442,617.42 410.5,614.5C 409.325,614.719 408.325,614.386 407.5,613.5C 408.689,612.571 410.022,612.238 411.5,612.5C 412.347,613.966 413.68,614.8 415.5,615C 414.692,615.308 414.025,615.808 413.5,616.5C 415.637,617.868 417.97,618.868 420.5,619.5C 419.833,620.167 419.167,620.833 418.5,621.5C 420.487,623.327 422.821,624.327 425.5,624.5C 425.52,626.143 424.853,627.476 423.5,628.5C 424.167,628.833 424.833,629.167 425.5,629.5C 428.862,631.319 430.528,630.319 430.5,626.5C 431.389,629.229 433.223,631.229 436,632.5C 435.855,635.923 437.355,637.923 440.5,638.5C 440.64,636.876 439.973,635.71 438.5,635C 440.935,629.196 442.268,629.696 442.5,636.5C 444.606,636.321 446.272,635.321 447.5,633.5C 444.11,631.447 442.444,628.447 442.5,624.5C 440.488,623.986 438.488,623.82 436.5,624C 437.76,625.814 437.76,627.647 436.5,629.5C 434.988,628.009 433.988,626.176 433.5,624C 431.779,623.261 430.113,622.427 428.5,621.5C 428.833,620.833 429.167,620.167 429.5,619.5C 427.833,618.167 426.167,616.833 424.5,615.5C 424.833,614.5 425.5,613.833 426.5,613.5C 429.002,615.414 431.002,617.747 432.5,620.5C 434.901,622.062 436.901,621.729 438.5,619.5C 436.771,618.403 435.104,617.237 433.5,616C 434.252,615.329 434.586,614.496 434.5,613.5C 435.675,613.281 436.675,613.614 437.5,614.5C 441.902,619.976 445.569,625.976 448.5,632.5C 449.325,633.386 450.325,633.719 451.5,633.5C 451.658,638.312 453.992,641.312 458.5,642.5C 457.063,640.237 455.897,637.904 455,635.5C 456.84,634.167 457.34,634.334 456.5,636C 457.938,636.219 459.271,636.719 460.5,637.5C 463.035,641.717 463.868,641.383 463,636.5C 457.534,631.551 453.034,625.885 449.5,619.5C 450.002,618.479 450.668,618.312 451.5,619C 452.376,620.586 453.376,622.086 454.5,623.5C 455.429,622.311 455.762,620.978 455.5,619.5C 456.93,619.421 458.264,619.754 459.5,620.5C 460.553,619.562 461.22,618.395 461.5,617C 460.536,615.036 459.203,613.37 457.5,612C 456.852,610.56 456.519,609.06 456.5,607.5C 455.5,607.5 454.5,607.5 453.5,607.5C 453.5,606.5 453.5,605.5 453.5,604.5C 455.199,604.34 456.866,604.506 458.5,605C 459.078,606.417 460.078,607.25 461.5,607.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#d3cec0\",d:\"M 274.5,616.5 C 274.609,622.396 274.775,628.396 275,634.5C 278.188,639.556 281.355,644.556 284.5,649.5C 279.167,649.5 273.833,649.5 268.5,649.5C 266.936,640.549 264.769,631.549 262,622.5C 259.77,617.273 257.27,612.273 254.5,607.5C 254.369,606.624 254.702,605.957 255.5,605.5C 256.428,607.335 257.594,607.668 259,606.5C 260.918,615.087 263.752,623.42 267.5,631.5C 269.104,629.102 270.104,626.435 270.5,623.5C 269.175,621.306 267.508,619.306 265.5,617.5C 265.667,617.167 265.833,616.833 266,616.5C 267,617.5 268,618.5 269,619.5C 269.24,617.023 268.406,614.856 266.5,613C 267.5,612.333 268.5,612.333 269.5,613C 271.047,614.387 272.713,615.553 274.5,616.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#beb9aa\",d:\"M 15.5,649.5 C 10.1667,649.5 4.83333,649.5 -0.5,649.5C -0.5,646.167 -0.5,642.833 -0.5,639.5C 1.76441,640.775 4.43107,640.775 7.5,639.5C 7.5,638.5 7.5,637.5 7.5,636.5C 10.0143,636.246 12.3476,635.413 14.5,634C 13.8333,633.333 13.1667,632.667 12.5,632C 15.4914,631.402 18.4914,631.735 21.5,633C 20.6433,633.689 19.9767,634.522 19.5,635.5C 21.7771,635.985 23.9437,635.319 26,633.5C 26.5074,634.996 26.0074,636.163 24.5,637C 26.6687,637.429 28.6687,636.929 30.5,635.5C 30.8333,635.833 31.1667,636.167 31.5,636.5C 28.7236,638.279 29.0569,639.279 32.5,639.5C 35.2847,637.911 38.2847,637.411 41.5,638C 37.3403,639.912 33.3403,642.079 29.5,644.5C 28.2588,643.963 27.0921,643.296 26,642.5C 23.1439,643.256 20.3106,644.089 17.5,645C 15.8934,646.049 15.2267,647.549 15.5,649.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c6c1b6\",d:\"M 95.5,597.5 C 97.1788,597.285 98.1788,597.952 98.5,599.5C 94.4352,602.509 91.6018,606.509 90,611.5C 89.3333,618.167 89.3333,624.833 90,631.5C 90.5029,626.81 91.1696,622.143 92,617.5C 92.4839,624.869 92.8172,632.202 93,639.5C 92.1667,641.5 91.3333,643.5 90.5,645.5C 89.8333,645.167 89.1667,644.833 88.5,644.5C 89.0641,639.78 88.3974,635.114 86.5,630.5C 85.2404,632.353 85.2404,634.186 86.5,636C 85.5509,636.617 84.7175,636.451 84,635.5C 83.4535,640.353 82.2868,645.02 80.5,649.5C 78.8333,649.5 77.1667,649.5 75.5,649.5C 76.5676,648.566 77.901,648.232 79.5,648.5C 79.5,646.833 79.5,645.167 79.5,643.5C 77.1305,643.851 74.7972,644.018 72.5,644C 73.6405,643.259 73.6405,642.425 72.5,641.5C 72.8333,640.5 73.5,639.833 74.5,639.5C 76.4008,633.373 78.5675,627.373 81,621.5C 82,620.5 83,619.5 84,618.5C 86.8052,610.886 90.6385,603.886 95.5,597.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a29981\",d:\"M 183.5,628.5 C 183.5,628.833 183.5,629.167 183.5,629.5C 183.961,631.55 184.628,633.55 185.5,635.5C 184.557,640.1 184.223,644.767 184.5,649.5C 182.5,649.5 180.5,649.5 178.5,649.5C 178.687,643.788 178.354,638.121 177.5,632.5C 178.117,632.611 178.617,632.944 179,633.5C 180.517,632.048 180.684,630.548 179.5,629C 180.322,624.657 181.655,624.491 183.5,628.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c4bdaf\",d:\"M 295.5,649.5 C 291.833,649.5 288.167,649.5 284.5,649.5C 281.355,644.556 278.188,639.556 275,634.5C 274.775,628.396 274.609,622.396 274.5,616.5C 275.222,616.082 275.722,615.416 276,614.5C 276.232,615.737 276.732,616.737 277.5,617.5C 278.053,621.994 278.22,626.661 278,631.5C 279,633.833 280,636.167 281,638.5C 282.489,640.332 284.322,641.165 286.5,641C 283.598,638.76 281.431,635.927 280,632.5C 280.131,627.957 279.964,623.457 279.5,619C 280.648,617.274 281.815,617.441 283,619.5C 283.078,617.343 283.245,615.343 283.5,613.5C 284.983,617.061 287.316,619.894 290.5,622C 292.343,628.604 294.343,635.104 296.5,641.5C 295.607,644.084 295.274,646.751 295.5,649.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c4b9af\",d:\"M 388.5,602.5 C 389.901,602.971 391.234,603.638 392.5,604.5C 395.907,609.878 399.407,615.212 403,620.5C 405.715,623.385 408.549,626.052 411.5,628.5C 410.066,629.23 408.9,630.23 408,631.5C 406.119,637.412 408.119,641.078 414,642.5C 418.277,641.941 418.444,641.274 414.5,640.5C 414.786,637.827 415.12,635.493 415.5,633.5C 417.637,634.738 418.971,636.571 419.5,639C 420.448,639.483 421.448,639.649 422.5,639.5C 424.859,642.851 427.192,646.185 429.5,649.5C 421.167,649.5 412.833,649.5 404.5,649.5C 404.826,645.116 404.492,640.783 403.5,636.5C 401.717,634.977 401.051,632.977 401.5,630.5C 397.647,631.345 394.981,633.679 393.5,637.5C 394.86,639.981 395.86,639.648 396.5,636.5C 397.689,635.571 399.022,635.238 400.5,635.5C 399.986,637.698 398.986,639.698 397.5,641.5C 398.025,642.192 398.692,642.692 399.5,643C 397.624,644.017 395.624,644.851 393.5,645.5C 394.246,646.736 394.579,648.07 394.5,649.5C 392.167,649.5 389.833,649.5 387.5,649.5C 386.526,643.528 386.359,637.528 387,631.5C 387.333,631.833 387.667,632.167 388,632.5C 388.249,631.376 388.749,630.376 389.5,629.5C 391.005,632.131 391.671,631.797 391.5,628.5C 392.833,628.5 394.167,628.5 395.5,628.5C 395.66,626.801 395.494,625.134 395,623.5C 392.624,622.624 391.124,620.958 390.5,618.5C 389.914,618.709 389.414,619.043 389,619.5C 388.503,621.81 388.337,624.143 388.5,626.5C 386.173,626.247 384.173,626.914 382.5,628.5C 381.668,631.482 381.501,634.482 382,637.5C 380.764,636.601 379.93,635.434 379.5,634C 380.367,630.895 380.701,627.728 380.5,624.5C 382.387,621.422 383.887,618.088 385,614.5C 386.205,613.929 387.372,613.262 388.5,612.5C 389.522,609.798 390.522,607.131 391.5,604.5C 389.821,604.715 388.821,604.048 388.5,602.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#a8998b\",d:\"M 404.5,649.5 C 401.167,649.5 397.833,649.5 394.5,649.5C 394.579,648.07 394.246,646.736 393.5,645.5C 395.624,644.851 397.624,644.017 399.5,643C 398.692,642.692 398.025,642.192 397.5,641.5C 398.986,639.698 399.986,637.698 400.5,635.5C 399.022,635.238 397.689,635.571 396.5,636.5C 395.86,639.648 394.86,639.981 393.5,637.5C 394.981,633.679 397.647,631.345 401.5,630.5C 401.051,632.977 401.717,634.977 403.5,636.5C 404.492,640.783 404.826,645.116 404.5,649.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#e6e3db\",d:\"M 337.5,607.5 C 342.512,611.818 346.845,616.818 350.5,622.5C 349.467,623.912 348.801,625.578 348.5,627.5C 349.071,632.554 349.905,637.554 351,642.5C 352.601,636.013 353.935,636.347 355,643.5C 355.192,641.423 355.692,639.423 356.5,637.5C 357.167,638.167 357.833,638.833 358.5,639.5C 361.37,639.413 364.203,639.413 367,639.5C 368.044,640.623 368.71,641.956 369,643.5C 369.667,642.167 370.333,642.167 371,643.5C 372.128,645.345 372.628,647.345 372.5,649.5C 362.167,649.5 351.833,649.5 341.5,649.5C 339.784,643.609 337.118,638.276 333.5,633.5C 332.719,634.729 332.219,636.062 332,637.5C 326.705,629.933 324.038,621.6 324,612.5C 325.217,617.059 326.884,621.392 329,625.5C 328.923,624.262 329.089,623.262 329.5,622.5C 330.086,622.709 330.586,623.043 331,623.5C 330.973,621.583 330.139,619.916 328.5,618.5C 329.441,618.511 330.108,618.011 330.5,617C 328.958,613.965 328.458,610.798 329,607.5C 330.75,614.255 332.75,620.921 335,627.5C 336.507,629.008 338.173,630.341 340,631.5C 339.37,628.257 338.203,625.091 336.5,622C 336.81,618.533 338.477,616.033 341.5,614.5C 340.359,612.192 338.692,610.359 336.5,609C 337.056,608.617 337.389,608.117 337.5,607.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#ece9df\",d:\"M 132.5,559.5 C 131.806,561.97 131.806,564.303 132.5,566.5C 134.227,569.287 135.394,572.287 136,575.5C 141.305,581.111 144.138,587.777 144.5,595.5C 144.152,599.557 143.486,603.557 142.5,607.5C 138.969,612.235 136.802,617.569 136,623.5C 134.474,624.545 133.641,626.045 133.5,628C 134.278,631.155 134.445,634.322 134,637.5C 130.81,640.879 128.977,644.879 128.5,649.5C 127.167,649.5 125.833,649.5 124.5,649.5C 125.014,643.549 125.18,637.549 125,631.5C 127.08,624.925 128.58,625.258 129.5,632.5C 128.206,634.88 127.206,637.38 126.5,640C 126.63,641.059 127.13,641.892 128,642.5C 130.023,638.732 131.523,634.732 132.5,630.5C 131.167,628.5 131.167,626.5 132.5,624.5C 129.936,624.629 127.269,624.296 124.5,623.5C 116.759,614.423 108.093,606.423 98.5,599.5C 98.1788,597.952 97.1788,597.285 95.5,597.5C 93.1463,594.149 90.1463,591.482 86.5,589.5C 85.8333,587.5 84.5,586.167 82.5,585.5C 78.8333,581.167 74.8333,577.167 70.5,573.5C 70.8417,572.662 71.5084,572.328 72.5,572.5C 76.1309,575.629 79.6309,578.963 83,582.5C 86.4035,578.478 88.5702,573.812 89.5,568.5C 89.7812,574.149 88.1146,579.315 84.5,584C 85.6906,584.698 86.6906,585.531 87.5,586.5C 94.6674,592.909 102.001,599.076 109.5,605C 110.793,605.49 112.127,605.657 113.5,605.5C 114.196,609.881 116.529,613.214 120.5,615.5C 121.833,616.833 123.167,618.167 124.5,619.5C 124.5,620.5 124.5,621.5 124.5,622.5C 128.689,622.666 132.022,620.999 134.5,617.5C 145.434,603.319 145.101,589.485 133.5,576C 133.833,575.667 134.167,575.333 134.5,575C 132.77,573.148 131.604,573.314 131,575.5C 130.014,574.829 128.847,574.829 127.5,575.5C 126.577,576.303 125.577,576.47 124.5,576C 125.833,575 125.833,574 124.5,573C 125.931,572.535 127.097,571.701 128,570.5C 128.667,571.833 129.333,571.833 130,570.5C 130.333,571.167 130.667,571.833 131,572.5C 131.49,570.455 131.323,568.455 130.5,566.5C 130.5,564.167 130.5,561.833 130.5,559.5C 130.738,557.355 131.738,555.688 133.5,554.5C 134.308,554.808 134.975,555.308 135.5,556C 134.837,557.518 133.837,558.685 132.5,559.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#cdc9bc\",d:\"M 124.5,619.5 C 123.676,609.088 124.509,598.755 127,588.5C 131.28,591.78 133.28,596.113 133,601.5C 133.645,600.354 134.478,599.354 135.5,598.5C 132.984,590.764 130.317,583.097 127.5,575.5C 128.847,574.829 130.014,574.829 131,575.5C 131.604,573.314 132.77,573.148 134.5,575C 134.167,575.333 133.833,575.667 133.5,576C 145.101,589.485 145.434,603.319 134.5,617.5C 132.022,620.999 128.689,622.666 124.5,622.5C 124.5,621.5 124.5,620.5 124.5,619.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#c7c3b5\",d:\"M 103.5,575.5 C 107.779,576.098 112.446,576.098 117.5,575.5C 117.141,577.371 116.141,578.871 114.5,580C 116.975,582.617 116.475,584.784 113,586.5C 112.162,590.202 110.662,593.535 108.5,596.5C 111.379,601.325 115.713,603.325 121.5,602.5C 121.351,601.448 121.517,600.448 122,599.5C 122.781,600.729 123.281,602.062 123.5,603.5C 122.311,607.588 121.311,611.588 120.5,615.5C 116.529,613.214 114.196,609.881 113.5,605.5C 112.127,605.657 110.793,605.49 109.5,605C 102.001,599.076 94.6674,592.909 87.5,586.5C 88.9998,585.412 90.3331,584.079 91.5,582.5C 92.086,582.709 92.586,583.043 93,583.5C 95.7405,582.718 98.5738,582.218 101.5,582C 102.117,579.723 102.784,577.556 103.5,575.5 Z\"})),/*#__PURE__*/React.createElement(\"g\",null,/*#__PURE__*/React.createElement(\"path\",{style:{opacity:1},fill:\"#beb9a9\",d:\"M 122.5,578.5 C 123.666,580.527 124.666,582.694 125.5,585C 124.72,589.287 123.554,593.453 122,597.5C 121.504,595.965 121.67,594.465 122.5,593C 121.66,591.829 120.827,590.662 120,589.5C 118.084,592.364 115.584,593.364 112.5,592.5C 115.364,587.414 118.698,582.747 122.5,578.5 Z\"})));}const ForwardRef=/*#__PURE__*/React.forwardRef(SvgNotebook);export default __webpack_public_path__+\"static/media/notebook.a2e40d9be537a650284c81ca21a21735.svg\";export{ForwardRef as ReactComponent};","import notebook from \"../assets/images/notebook.svg\"\r\nimport { useEffect, useRef } from \"react\";\r\nimport ScrollReveal from \"scrollreveal\";\r\n\r\nexport default function NotepadPage() {\r\n    const revealRef1 = useRef(null);\r\n    const revealRef2 = useRef(null);\r\n\r\n    useEffect( () => {\r\n        ScrollReveal().reveal( revealRef1.current, {\r\n            origin: 'left',\r\n            distance: '100px',\r\n            duration: 1200,\r\n            delay: 200,\r\n            easing: 'ease-in-out',\r\n        })\r\n        ScrollReveal().reveal( revealRef2.current, {\r\n            origin: 'right',\r\n            distance: '100px',\r\n            duration: 1200,\r\n            delay: 200,\r\n            easing: 'ease-in-out',\r\n        })\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container mt-5\">\r\n                <div className=\"card border-0 text-center\">\r\n                    <div className=\"card-header bg-transparent border-bottom-0\">\r\n                        <img src={ notebook } alt=\"catatan\" className=\"img-fluid img-header\"  ref={revealRef1} />\r\n                    </div>\r\n                    <div className=\"card-body p-5\">\r\n                        <h3 className=\"card-title mt-1\" style={{ fontFamily : \"Playwrite GB S\"}} ref={revealRef2}>\r\n                            An Ode to Empty Notebooks\r\n                        </h3>\r\n                        <div ref={revealRef1}>\r\n                            <p className=\"card-text mt-5 text-center\" style={{ fontSize : \".8rem\"}}>\r\n                                In between the bindings of every empty notebook lives a\r\n                                sweet snippet of comfort. Paused, poised and balancing, in\r\n                                the stoic arms of plastic and cardboard is, like the bottomless,\r\n                                unexplored ocean, or the great expanses of enormous outer space, a realm of possibilities.\r\n                            </p>\r\n                            <p className=\"card-text mt-2 px-3\" style={{ fontSize : \".8rem\"}}>\" Empty. \"</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgSadImage1(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"400px\",\n    height: \"266px\",\n    style: {\n      shapeRendering: \"geometricPrecision\",\n      textRendering: \"geometricPrecision\",\n      imageRendering: \"optimizeQuality\",\n      fillRule: \"evenodd\",\n      clipRule: \"evenodd\"\n    },\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#223240\",\n    d: \"M -0.5,-0.5 C 8.16667,-0.5 16.8333,-0.5 25.5,-0.5C 25.5614,1.59216 26.5614,3.09216 28.5,4C 32.5313,5.49082 36.5313,6.65749 40.5,7.5C 36.2094,7.6251 32.0427,6.95843 28,5.5C 25.6751,6.18447 23.3417,5.85113 21,4.5C 20.0754,5.04651 19.2421,5.71317 18.5,6.5C 20.0415,14.0144 19.2081,14.3477 16,7.5C 15.5026,10.146 15.3359,12.8127 15.5,15.5C 14.5,15.5 13.5,15.5 12.5,15.5C 8.34664,15.2639 4.01331,15.2639 -0.5,15.5C -0.5,10.1667 -0.5,4.83333 -0.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a262f\",\n    d: \"M 383.5,-0.5 C 388.833,-0.5 394.167,-0.5 399.5,-0.5C 399.5,1.16667 399.5,2.83333 399.5,4.5C 396.545,5.15872 393.545,5.49205 390.5,5.5C 390.778,7.34642 390.111,8.67975 388.5,9.5C 387.501,6.82586 385.834,6.15919 383.5,7.5C 383.051,4.95645 383.051,2.28978 383.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#333e4a\",\n    d: \"M 194.5,-0.5 C 200.833,-0.5 207.167,-0.5 213.5,-0.5C 213.5,0.833333 213.5,2.16667 213.5,3.5C 212.167,3.5 210.833,3.5 209.5,3.5C 209.5,5.16667 209.5,6.83333 209.5,8.5C 214.161,7.65759 218.828,7.15759 223.5,7C 225.247,11.3809 224.414,12.2142 221,9.5C 219.274,10.6479 219.441,11.8145 221.5,13C 219.512,13.1805 217.512,13.0138 215.5,12.5C 215.5,13.5 215.5,14.5 215.5,15.5C 212.813,15.3359 210.146,15.5026 207.5,16C 211.097,16.8643 210.93,18.0309 207,19.5C 206.077,18.2412 205.243,16.9079 204.5,15.5C 203.784,17.482 202.617,19.1487 201,20.5C 200.433,17.8323 199.933,15.1656 199.5,12.5C 198.022,12.238 196.689,12.5713 195.5,13.5C 197.576,15.9367 197.909,18.6034 196.5,21.5C 195.135,22.8069 193.802,22.8069 192.5,21.5C 191.859,23.0423 190.859,24.3757 189.5,25.5C 187.633,22.7709 186.633,23.1043 186.5,26.5C 181.181,25.7983 178.348,28.1317 178,33.5C 177.329,34.2524 176.496,34.5858 175.5,34.5C 174.761,34.631 174.094,34.4643 173.5,34C 175.495,33.0764 175.828,31.9097 174.5,30.5C 175.049,28.2655 174.715,25.9322 173.5,23.5C 173.833,23.1667 174.167,22.8333 174.5,22.5C 175.429,23.6888 175.762,25.0222 175.5,26.5C 176.5,26.5 177.5,26.5 178.5,26.5C 178.75,23.786 178.917,21.1194 179,18.5C 177.167,21.3333 175.667,21.1667 174.5,18C 173.552,17.5172 172.552,17.3505 171.5,17.5C 171.757,14.0678 172.424,10.7345 173.5,7.5C 174.29,8.60853 174.79,9.94186 175,11.5C 177.75,10.7089 180.583,10.7089 183.5,11.5C 184.776,14.3356 185.442,17.3356 185.5,20.5C 186.5,20.5 187.5,20.5 188.5,20.5C 188.351,19.448 188.517,18.448 189,17.5C 190.765,14.9842 192.598,12.4842 194.5,10C 190.582,7.96217 190.749,6.12884 195,4.5C 195.384,2.80343 195.218,1.13676 194.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#252e36\",\n    d: \"M 61.5,-0.5 C 64.5,-0.5 67.5,-0.5 70.5,-0.5C 68.4855,0.923808 66.1522,1.59047 63.5,1.5C 63.9668,3.71104 64.9668,5.71104 66.5,7.5C 67.2621,6.37174 67.9288,5.20508 68.5,4C 73.4705,2.94564 78.4705,2.44564 83.5,2.5C 86.8293,6.12601 88.8293,10.4593 89.5,15.5C 91.6773,16.5042 92.0107,15.8375 90.5,13.5C 90.9569,12.7025 91.6236,12.3691 92.5,12.5C 94.4637,14.1274 95.797,16.1274 96.5,18.5C 96.2089,19.6491 95.3756,20.3158 94,20.5C 90.5442,18.796 87.0442,17.296 83.5,16C 82.1667,14.6667 82.1667,13.3333 83.5,12C 81.8008,11.6068 80.3008,12.1068 79,13.5C 70.1852,10.5653 61.3519,7.56528 52.5,4.5C 55.6866,3.1345 59.0199,2.30117 62.5,2C 61.7476,1.32924 61.4142,0.495904 61.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a212a\",\n    d: \"M 104.5,-0.5 C 116.167,-0.5 127.833,-0.5 139.5,-0.5C 137.849,2.15659 136.182,4.82326 134.5,7.5C 132.431,9.29225 131.097,11.6256 130.5,14.5C 129.833,14.5 129.5,14.8333 129.5,15.5C 129.167,15.5 128.833,15.5 128.5,15.5C 127.022,16.4475 126.022,17.7809 125.5,19.5C 125.489,17.9826 124.823,16.8159 123.5,16C 126.207,12.6498 125.207,10.9832 120.5,11C 121.716,9.26016 123.382,8.26016 125.5,8C 123.76,6.17302 122.093,6.33969 120.5,8.5C 119.784,7.68895 118.95,7.02229 118,6.5C 116.632,7.70263 115.132,8.70263 113.5,9.5C 113.167,9.16667 112.833,8.83333 112.5,8.5C 115.985,3.46931 114.985,3.13598 109.5,7.5C 108.548,9.04533 108.215,10.712 108.5,12.5C 109.5,12.5 110.5,12.5 111.5,12.5C 111.468,15.0758 112.135,17.4091 113.5,19.5C 113.265,20.0967 112.765,20.4301 112,20.5C 109.41,18.727 106.577,17.727 103.5,17.5C 103.646,21.5191 103.979,25.5191 104.5,29.5C 103.114,26.7847 102.447,23.7847 102.5,20.5C 104.073,13.5836 104.74,6.58361 104.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f3944\",\n    d: \"M 139.5,-0.5 C 147.5,-0.5 155.5,-0.5 163.5,-0.5C 163.53,0.497222 163.03,1.16389 162,1.5C 158.824,-0.157911 157.324,0.842089 157.5,4.5C 155.516,4.61679 153.85,3.95012 152.5,2.5C 149.902,3.68002 148.236,5.68002 147.5,8.5C 146.52,7.01862 145.353,5.68529 144,4.5C 142.904,11.4519 139.404,13.1186 133.5,9.5C 133.863,8.81654 134.196,8.14987 134.5,7.5C 136.182,4.82326 137.849,2.15659 139.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#28323c\",\n    d: \"M 163.5,-0.5 C 173.833,-0.5 184.167,-0.5 194.5,-0.5C 195.218,1.13676 195.384,2.80343 195,4.5C 190.749,6.12884 190.582,7.96217 194.5,10C 192.598,12.4842 190.765,14.9842 189,17.5C 188.517,18.448 188.351,19.448 188.5,20.5C 187.5,20.5 186.5,20.5 185.5,20.5C 185.442,17.3356 184.776,14.3356 183.5,11.5C 180.583,10.7089 177.75,10.7089 175,11.5C 174.79,9.94186 174.29,8.60853 173.5,7.5C 171.917,8.93551 170.417,10.6022 169,12.5C 168.893,15.131 168.727,17.631 168.5,20C 164.267,19.3267 159.933,18.8267 155.5,18.5C 155.215,20.288 155.548,21.9547 156.5,23.5C 157.192,22.9747 157.692,22.3081 158,21.5C 159.36,24.5511 161.527,25.2177 164.5,23.5C 165.386,24.325 165.719,25.325 165.5,26.5C 161.5,26.5 157.5,26.5 153.5,26.5C 153.719,27.675 153.386,28.675 152.5,29.5C 147.955,27.8905 143.288,26.7238 138.5,26C 136.561,25.0922 135.561,23.5922 135.5,21.5C 136.833,21.5 138.167,21.5 139.5,21.5C 139.5,22.5 139.5,23.5 139.5,24.5C 145.384,24.6097 149.384,21.943 151.5,16.5C 149.857,16.5198 148.524,15.8532 147.5,14.5C 145.884,15.1152 144.551,16.1152 143.5,17.5C 142.269,16.3493 142.269,15.1827 143.5,14C 139.129,13.3708 134.796,13.5375 130.5,14.5C 131.097,11.6256 132.431,9.29225 134.5,7.5C 134.196,8.14987 133.863,8.81654 133.5,9.5C 139.404,13.1186 142.904,11.4519 144,4.5C 145.353,5.68529 146.52,7.01862 147.5,8.5C 148.236,5.68002 149.902,3.68002 152.5,2.5C 153.85,3.95012 155.516,4.61679 157.5,4.5C 157.324,0.842089 158.824,-0.157911 162,1.5C 163.03,1.16389 163.53,0.497222 163.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161f28\",\n    d: \"M 25.5,-0.5 C 37.5,-0.5 49.5,-0.5 61.5,-0.5C 61.4142,0.495904 61.7476,1.32924 62.5,2C 59.0199,2.30117 55.6866,3.1345 52.5,4.5C 61.3519,7.56528 70.1852,10.5653 79,13.5C 80.3008,12.1068 81.8008,11.6068 83.5,12C 82.1667,13.3333 82.1667,14.6667 83.5,16C 87.0442,17.296 90.5442,18.796 94,20.5C 95.3756,20.3158 96.2089,19.6491 96.5,18.5C 97.6946,18.8656 98.3613,19.699 98.5,21C 97.8524,22.4397 97.5191,23.9397 97.5,25.5C 95.5165,25.3832 93.8498,26.0499 92.5,27.5C 91.8771,24.255 90.2104,21.755 87.5,20C 82.8649,18.5701 78.5316,16.5701 74.5,14C 72.8659,13.5065 71.1992,13.3398 69.5,13.5C 68.1667,13.1667 66.8333,12.8333 65.5,12.5C 61.2917,11.5736 57.2917,9.90689 53.5,7.5C 53.5,9.16667 53.5,10.8333 53.5,12.5C 52.1255,11.2887 50.6255,10.2887 49,9.5C 47.4029,10.8847 45.5695,11.5514 43.5,11.5C 42.6588,10.0736 41.6588,8.74029 40.5,7.5C 36.5313,6.65749 32.5313,5.49082 28.5,4C 26.5614,3.09216 25.5614,1.59216 25.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#28323d\",\n    d: \"M 213.5,-0.5 C 224.167,-0.5 234.833,-0.5 245.5,-0.5C 248.778,4.25866 247.445,6.592 241.5,6.5C 241.5,7.83333 241.5,9.16667 241.5,10.5C 238.861,10.5708 236.694,11.5708 235,13.5C 234.5,13.1667 234,12.8333 233.5,12.5C 234.326,11.549 234.492,10.549 234,9.5C 232.6,10.748 231.1,11.748 229.5,12.5C 229.762,11.0222 229.429,9.68884 228.5,8.5C 226.713,10.8584 225.713,13.525 225.5,16.5C 223.599,16.4332 221.766,16.7665 220,17.5C 218.7,16.2927 217.2,15.6261 215.5,15.5C 215.5,14.5 215.5,13.5 215.5,12.5C 217.512,13.0138 219.512,13.1805 221.5,13C 219.441,11.8145 219.274,10.6479 221,9.5C 224.414,12.2142 225.247,11.3809 223.5,7C 218.828,7.15759 214.161,7.65759 209.5,8.5C 209.5,6.83333 209.5,5.16667 209.5,3.5C 210.833,3.5 212.167,3.5 213.5,3.5C 213.5,2.16667 213.5,0.833333 213.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#11181f\",\n    d: \"M 70.5,-0.5 C 77.1667,-0.5 83.8333,-0.5 90.5,-0.5C 90.6822,1.67458 91.3489,3.67458 92.5,5.5C 92.0609,7.10429 91.3943,8.60429 90.5,10C 91.0556,11.0111 91.7222,11.8444 92.5,12.5C 91.6236,12.3691 90.9569,12.7025 90.5,13.5C 92.0107,15.8375 91.6773,16.5042 89.5,15.5C 88.8293,10.4593 86.8293,6.12601 83.5,2.5C 78.4705,2.44564 73.4705,2.94564 68.5,4C 67.9288,5.20508 67.2621,6.37174 66.5,7.5C 64.9668,5.71104 63.9668,3.71104 63.5,1.5C 66.1522,1.59047 68.4855,0.923808 70.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#13171d\",\n    d: \"M 263.5,-0.5 C 265.5,-0.5 267.5,-0.5 269.5,-0.5C 270.406,2.43585 271.072,5.43585 271.5,8.5C 267.71,8.0077 267.044,8.84103 269.5,11C 272.044,12.092 274.711,12.7586 277.5,13C 278.571,13.8518 279.571,14.6851 280.5,15.5C 279.448,15.3505 278.448,15.5172 277.5,16C 277.833,16.3333 278.167,16.6667 278.5,17C 282.5,17.3333 286.5,17.6667 290.5,18C 291.056,18.3826 291.389,18.8826 291.5,19.5C 289.876,19.3601 288.71,20.0267 288,21.5C 287.517,20.552 287.351,19.552 287.5,18.5C 284.421,18.2601 281.421,18.5934 278.5,19.5C 277.125,16.4529 274.792,15.1196 271.5,15.5C 270.078,15.2504 269.078,14.417 268.5,13C 263.189,11.9277 257.855,10.9277 252.5,10C 250.774,8.47023 248.774,7.47023 246.5,7C 248.713,6.3744 250.88,6.54106 253,7.5C 254.059,7.36992 254.892,6.86992 255.5,6C 254.09,5.63225 253.09,4.79892 252.5,3.5C 254.401,2.76911 256.401,2.76911 258.5,3.5C 258.5,4.5 258.5,5.5 258.5,6.5C 261.572,6.81741 264.572,6.48408 267.5,5.5C 265.167,4.83333 262.833,4.16667 260.5,3.5C 261.826,2.35782 262.826,1.02449 263.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#222a32\",\n    d: \"M 245.5,-0.5 C 251.5,-0.5 257.5,-0.5 263.5,-0.5C 262.826,1.02449 261.826,2.35782 260.5,3.5C 262.833,4.16667 265.167,4.83333 267.5,5.5C 264.572,6.48408 261.572,6.81741 258.5,6.5C 258.5,5.5 258.5,4.5 258.5,3.5C 256.401,2.76911 254.401,2.76911 252.5,3.5C 253.09,4.79892 254.09,5.63225 255.5,6C 254.892,6.86992 254.059,7.36992 253,7.5C 250.88,6.54106 248.713,6.3744 246.5,7C 248.774,7.47023 250.774,8.47023 252.5,10C 257.855,10.9277 263.189,11.9277 268.5,13C 269.078,14.417 270.078,15.2504 271.5,15.5C 271.5,16.8333 271.5,18.1667 271.5,19.5C 266.071,18.7129 260.738,19.3795 255.5,21.5C 255.863,22.1835 256.196,22.8501 256.5,23.5C 254.868,22.0916 253.202,20.5916 251.5,19C 250.552,18.5172 249.552,18.3505 248.5,18.5C 248.719,17.325 248.386,16.325 247.5,15.5C 246.885,18.4362 245.718,21.1029 244,23.5C 243.503,20.854 243.336,18.1873 243.5,15.5C 241.712,15.2148 240.045,15.5481 238.5,16.5C 239.705,17.9948 239.705,19.3281 238.5,20.5C 235.827,19.2974 233.16,19.2974 230.5,20.5C 229.378,18.9564 229.711,17.623 231.5,16.5C 230.675,15.6143 229.675,15.281 228.5,15.5C 228.263,14.209 228.596,13.209 229.5,12.5C 231.1,11.748 232.6,10.748 234,9.5C 234.492,10.549 234.326,11.549 233.5,12.5C 234,12.8333 234.5,13.1667 235,13.5C 236.694,11.5708 238.861,10.5708 241.5,10.5C 241.5,9.16667 241.5,7.83333 241.5,6.5C 247.445,6.592 248.778,4.25866 245.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d2328\",\n    d: \"M 269.5,-0.5 C 276.167,-0.5 282.833,-0.5 289.5,-0.5C 291.118,1.32475 292.785,3.15808 294.5,5C 294.167,5.5 293.833,6 293.5,6.5C 292.167,5.5 290.833,4.5 289.5,3.5C 288.166,5.81835 288.832,7.48501 291.5,8.5C 288.518,9.33233 285.518,9.49899 282.5,9C 284.912,11.0354 284.245,12.0354 280.5,12C 287.023,12.9429 287.023,14.1095 280.5,15.5C 279.571,14.6851 278.571,13.8518 277.5,13C 274.711,12.7586 272.044,12.092 269.5,11C 267.044,8.84103 267.71,8.0077 271.5,8.5C 271.072,5.43585 270.406,2.43585 269.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a1e23\",\n    d: \"M 303.5,7.5 C 306.232,8.866 308.899,10.1993 311.5,11.5C 310.596,12.209 310.263,13.209 310.5,14.5C 307.882,14.2208 305.382,13.5541 303,12.5C 302.517,13.448 302.351,14.448 302.5,15.5C 301.849,14.9094 301.182,14.2427 300.5,13.5C 298.929,14.3094 297.262,14.6427 295.5,14.5C 296.42,12.1191 296.42,9.78574 295.5,7.5C 298.126,6.55075 300.792,6.55075 303.5,7.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#222f38\",\n    d: \"M 379.5,-0.5 C 380.833,-0.5 382.167,-0.5 383.5,-0.5C 383.051,2.28978 383.051,4.95645 383.5,7.5C 385.834,6.15919 387.501,6.82586 388.5,9.5C 390.111,8.67975 390.778,7.34642 390.5,5.5C 393.545,5.49205 396.545,5.15872 399.5,4.5C 399.5,12.1667 399.5,19.8333 399.5,27.5C 397.699,26.2812 396.699,24.4479 396.5,22C 396.645,21.228 396.978,20.5613 397.5,20C 396.167,19.6667 394.833,19.3333 393.5,19C 393.815,15.7584 392.148,13.5917 388.5,12.5C 387.269,13.6507 387.269,14.8173 388.5,16C 384.615,18.394 381.948,17.394 380.5,13C 379.552,12.5172 378.552,12.3505 377.5,12.5C 377.802,15.0593 377.468,17.3926 376.5,19.5C 377.791,12.9688 378.791,6.30213 379.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#28323c\",\n    d: \"M 125.5,19.5 C 124.343,21.678 123.01,23.678 121.5,25.5C 121.714,23.8561 121.38,22.3561 120.5,21C 118.187,20.338 115.854,19.838 113.5,19.5C 112.135,17.4091 111.468,15.0758 111.5,12.5C 110.5,12.5 109.5,12.5 108.5,12.5C 108.215,10.712 108.548,9.04533 109.5,7.5C 114.985,3.13598 115.985,3.46931 112.5,8.5C 112.833,8.83333 113.167,9.16667 113.5,9.5C 115.132,8.70263 116.632,7.70263 118,6.5C 118.95,7.02229 119.784,7.68895 120.5,8.5C 122.093,6.33969 123.76,6.17302 125.5,8C 123.382,8.26016 121.716,9.26016 120.5,11C 125.207,10.9832 126.207,12.6498 123.5,16C 124.823,16.8159 125.489,17.9826 125.5,19.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#080b11\",\n    d: \"M 90.5,-0.5 C 91.1667,-0.5 91.8333,-0.5 92.5,-0.5C 94.7266,4.72812 96.8933,10.0615 99,15.5C 101.077,10.4343 101.911,5.10093 101.5,-0.5C 102.5,-0.5 103.5,-0.5 104.5,-0.5C 104.74,6.58361 104.073,13.5836 102.5,20.5C 102.447,23.7847 103.114,26.7847 104.5,29.5C 105.15,31.4352 105.483,33.4352 105.5,35.5C 105.716,40.854 106.716,46.0207 108.5,51C 109.449,51.6172 110.282,51.4506 111,50.5C 111.396,47.3429 112.229,44.3429 113.5,41.5C 115.862,37.7697 117.862,33.7697 119.5,29.5C 119.733,27.9382 120.4,26.6049 121.5,25.5C 123.01,23.678 124.343,21.678 125.5,19.5C 126.022,17.7809 127.022,16.4475 128.5,15.5C 128.5,18.1667 128.5,20.8333 128.5,23.5C 127.167,23.5 125.833,23.5 124.5,23.5C 124.477,25.9267 123.977,28.26 123,30.5C 120.838,32.8201 119.338,35.4867 118.5,38.5C 116.683,42.1049 115.017,45.7716 113.5,49.5C 112.691,51.0276 112.024,52.6943 111.5,54.5C 110.622,58.3357 109.956,62.3357 109.5,66.5C 109.737,67.791 109.404,68.791 108.5,69.5C 108.782,65.7036 108.782,62.0369 108.5,58.5C 106.311,60.01 104.977,62.01 104.5,64.5C 105.312,56.3293 104.312,48.3293 101.5,40.5C 100.665,39.0568 99.3316,38.0568 97.5,37.5C 97.6236,36.8933 97.9569,36.56 98.5,36.5C 99.6491,36.2089 100.316,35.3756 100.5,34C 100.303,30.7746 99.3027,27.9413 97.5,25.5C 97.5191,23.9397 97.8524,22.4397 98.5,21C 98.3613,19.699 97.6946,18.8656 96.5,18.5C 95.797,16.1274 94.4637,14.1274 92.5,12.5C 91.7222,11.8444 91.0556,11.0111 90.5,10C 91.3943,8.60429 92.0609,7.10429 92.5,5.5C 91.3489,3.67458 90.6822,1.67458 90.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#24282c\",\n    d: \"M 92.5,-0.5 C 95.5,-0.5 98.5,-0.5 101.5,-0.5C 101.911,5.10093 101.077,10.4343 99,15.5C 96.8933,10.0615 94.7266,4.72812 92.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0e1215\",\n    d: \"M 289.5,-0.5 C 293.833,-0.5 298.167,-0.5 302.5,-0.5C 303.766,1.56659 305.433,3.23326 307.5,4.5C 305.668,5.05684 304.335,6.05684 303.5,7.5C 300.792,6.55075 298.126,6.55075 295.5,7.5C 296.42,9.78574 296.42,12.1191 295.5,14.5C 297.262,14.6427 298.929,14.3094 300.5,13.5C 301.182,14.2427 301.849,14.9094 302.5,15.5C 304.114,17.0746 306.114,17.7413 308.5,17.5C 308.5,18.5 308.5,19.5 308.5,20.5C 311.131,21.4776 313.798,22.4776 316.5,23.5C 317.386,22.675 317.719,21.675 317.5,20.5C 317.842,22.8245 317.842,25.1579 317.5,27.5C 316.271,28.2811 314.938,28.7811 313.5,29C 315.058,29.21 316.391,29.71 317.5,30.5C 312.579,30.1349 312.245,31.1349 316.5,33.5C 315.058,36.5092 316.058,38.1759 319.5,38.5C 318.167,40.1667 318.167,41.8333 319.5,43.5C 318.1,42.9002 317.1,41.9002 316.5,40.5C 314.228,39.5589 312.228,38.2255 310.5,36.5C 309.833,35.1667 308.833,34.1667 307.5,33.5C 305.882,31.684 303.882,30.3507 301.5,29.5C 300.602,28.8423 299.602,28.1757 298.5,27.5C 299.879,26.1374 299.713,25.1374 298,24.5C 295.467,26.8956 294.967,26.229 296.5,22.5C 295.995,21.0815 294.995,20.4148 293.5,20.5C 292.833,20.1667 292.167,19.8333 291.5,19.5C 291.389,18.8826 291.056,18.3826 290.5,18C 286.5,17.6667 282.5,17.3333 278.5,17C 278.167,16.6667 277.833,16.3333 277.5,16C 278.448,15.5172 279.448,15.3505 280.5,15.5C 287.023,14.1095 287.023,12.9429 280.5,12C 284.245,12.0354 284.912,11.0354 282.5,9C 285.518,9.49899 288.518,9.33233 291.5,8.5C 288.832,7.48501 288.166,5.81835 289.5,3.5C 290.833,4.5 292.167,5.5 293.5,6.5C 293.833,6 294.167,5.5 294.5,5C 292.785,3.15808 291.118,1.32475 289.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#24292f\",\n    d: \"M 311.5,11.5 C 311.369,12.2389 311.536,12.9056 312,13.5C 313,12.1667 314,12.1667 315,13.5C 315.384,16.0602 316.217,18.3936 317.5,20.5C 317.719,21.675 317.386,22.675 316.5,23.5C 313.798,22.4776 311.131,21.4776 308.5,20.5C 308.5,19.5 308.5,18.5 308.5,17.5C 306.114,17.7413 304.114,17.0746 302.5,15.5C 302.351,14.448 302.517,13.448 303,12.5C 305.382,13.5541 307.882,14.2208 310.5,14.5C 310.263,13.209 310.596,12.209 311.5,11.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#222c38\",\n    d: \"M 65.5,12.5 C 62.216,13.8537 59.216,13.5204 56.5,11.5C 55.2888,12.2739 55.2888,13.1072 56.5,14C 55.2068,14.49 53.8734,14.6567 52.5,14.5C 52.1667,18.1667 50.1667,20.1667 46.5,20.5C 48.5539,24.1692 47.7205,26.8359 44,28.5C 42.2509,28.2517 41.4176,27.2517 41.5,25.5C 42.1495,23.5648 42.4828,21.5648 42.5,19.5C 43.5,19.5 44.5,19.5 45.5,19.5C 44.36,16.9752 43.6933,14.3085 43.5,11.5C 45.5695,11.5514 47.4029,10.8847 49,9.5C 50.6255,10.2887 52.1255,11.2887 53.5,12.5C 53.5,10.8333 53.5,9.16667 53.5,7.5C 57.2917,9.90689 61.2917,11.5736 65.5,12.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a3744\",\n    d: \"M 40.5,7.5 C 41.6588,8.74029 42.6588,10.0736 43.5,11.5C 43.6933,14.3085 44.36,16.9752 45.5,19.5C 44.5,19.5 43.5,19.5 42.5,19.5C 42.4828,21.5648 42.1495,23.5648 41.5,25.5C 38.1825,24.7791 34.8492,24.6124 31.5,25C 29.8934,26.049 29.2267,27.549 29.5,29.5C 28.596,28.791 28.2627,27.791 28.5,26.5C 27.5,26.5 26.5,26.5 25.5,26.5C 25.1667,24.5 24.8333,22.5 24.5,20.5C 21.7615,21.0352 19.9282,20.0352 19,17.5C 17.7637,20.4169 17.2637,23.4169 17.5,26.5C 14.7157,24.528 14.049,22.028 15.5,19C 13.9371,18.2411 12.9371,17.0744 12.5,15.5C 13.5,15.5 14.5,15.5 15.5,15.5C 15.3359,12.8127 15.5026,10.146 16,7.5C 19.2081,14.3477 20.0415,14.0144 18.5,6.5C 19.2421,5.71317 20.0754,5.04651 21,4.5C 23.3417,5.85113 25.6751,6.18447 28,5.5C 32.0427,6.95843 36.2094,7.6251 40.5,7.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#333d47\",\n    d: \"M 229.5,12.5 C 228.596,13.209 228.263,14.209 228.5,15.5C 229.675,15.281 230.675,15.6143 231.5,16.5C 229.711,17.623 229.378,18.9564 230.5,20.5C 233.16,19.2974 235.827,19.2974 238.5,20.5C 239.833,21.8333 241.167,23.1667 242.5,24.5C 241.791,25.404 240.791,25.7373 239.5,25.5C 238.969,22.2206 236.969,20.8872 233.5,21.5C 233.571,24.1391 234.571,26.3058 236.5,28C 236.167,28.5 235.833,29 235.5,29.5C 233.465,27.7063 231.298,27.3729 229,28.5C 227.287,27.8626 227.121,26.8626 228.5,25.5C 227.833,25.1667 227.167,24.8333 226.5,24.5C 224.865,25.0463 223.199,25.3796 221.5,25.5C 221.5,23.8333 221.5,22.1667 221.5,20.5C 220.167,20.5 218.833,20.5 217.5,20.5C 217.635,18.4458 216.968,16.7791 215.5,15.5C 217.2,15.6261 218.7,16.2927 220,17.5C 221.766,16.7665 223.599,16.4332 225.5,16.5C 225.713,13.525 226.713,10.8584 228.5,8.5C 229.429,9.68884 229.762,11.0222 229.5,12.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d2427\",\n    d: \"M 271.5,15.5 C 274.792,15.1196 277.125,16.4529 278.5,19.5C 281.421,18.5934 284.421,18.2601 287.5,18.5C 287.351,19.552 287.517,20.552 288,21.5C 288.71,20.0267 289.876,19.3601 291.5,19.5C 292.167,19.8333 292.833,20.1667 293.5,20.5C 295.078,22.3176 294.578,23.3176 292,23.5C 288.641,24.0597 285.308,24.7264 282,25.5C 279.83,23.3599 277.496,23.3599 275,25.5C 276.203,22.2473 275.036,20.2473 271.5,19.5C 271.5,18.1667 271.5,16.8333 271.5,15.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#323a42\",\n    d: \"M 113.5,19.5 C 115.854,19.838 118.187,20.338 120.5,21C 121.38,22.3561 121.714,23.8561 121.5,25.5C 120.4,26.6049 119.733,27.9382 119.5,29.5C 117.409,30.8654 115.076,31.5321 112.5,31.5C 112.5,32.8333 112.5,34.1667 112.5,35.5C 110.167,35.5 107.833,35.5 105.5,35.5C 105.483,33.4352 105.15,31.4352 104.5,29.5C 103.979,25.5191 103.646,21.5191 103.5,17.5C 106.577,17.727 109.41,18.727 112,20.5C 112.765,20.4301 113.265,20.0967 113.5,19.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f4a54\",\n    d: \"M 221.5,31.5 C 219.533,31.7394 217.699,31.4061 216,30.5C 215.911,32.1134 216.745,33.2801 218.5,34C 217.584,34.3742 216.75,34.8742 216,35.5C 207.217,34.7922 198.384,34.1255 189.5,33.5C 187.896,33.9391 186.396,34.6057 185,35.5C 180.206,33.1812 177.706,34.5145 177.5,39.5C 179.833,39.5 182.167,39.5 184.5,39.5C 184.5,41.1667 184.5,42.8333 184.5,44.5C 181.863,43.8359 179.197,43.1693 176.5,42.5C 175.065,43.8237 174.065,45.4904 173.5,47.5C 172.571,46.3112 172.238,44.9778 172.5,43.5C 171.5,43.5 170.5,43.5 169.5,43.5C 169.5,44.8333 169.5,46.1667 169.5,47.5C 169.167,47.5 168.833,47.5 168.5,47.5C 166.216,46.9708 164.216,45.9708 162.5,44.5C 163.833,43.1667 165.167,41.8333 166.5,40.5C 168.239,41.4339 169.905,41.4339 171.5,40.5C 170.754,39.2638 170.421,37.9305 170.5,36.5C 171.93,36.4208 173.264,36.7542 174.5,37.5C 175.386,36.675 175.719,35.675 175.5,34.5C 176.496,34.5858 177.329,34.2524 178,33.5C 178.348,28.1317 181.181,25.7983 186.5,26.5C 186.633,23.1043 187.633,22.7709 189.5,25.5C 190.859,24.3757 191.859,23.0423 192.5,21.5C 192.258,29.3381 193.591,30.0048 196.5,23.5C 199.014,30.0085 201.681,30.0085 204.5,23.5C 205.243,24.9079 206.077,26.2412 207,27.5C 207.384,24.0988 208.218,21.7655 209.5,20.5C 210.951,22.5589 212.951,23.5589 215.5,23.5C 215.5,25.5 215.5,27.5 215.5,29.5C 217.484,29.6168 219.15,28.9501 220.5,27.5C 221.429,28.6888 221.762,30.0222 221.5,31.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#252a30\",\n    d: \"M 302.5,20.5 C 303.873,20.3433 305.207,20.51 306.5,21C 309.154,23.5272 312.154,25.5272 315.5,27C 310.888,28.0778 306.722,27.2444 303,24.5C 302.51,23.2068 302.343,21.8734 302.5,20.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#060a0e\",\n    d: \"M 302.5,-0.5 C 306.833,-0.5 311.167,-0.5 315.5,-0.5C 316.265,2.09609 316.599,4.76275 316.5,7.5C 318.124,7.63993 319.29,6.97326 320,5.5C 319.979,9.89923 322.145,12.2326 326.5,12.5C 328.997,14.8711 331.997,15.8711 335.5,15.5C 336.044,10.1444 336.377,4.81105 336.5,-0.5C 338.5,-0.5 340.5,-0.5 342.5,-0.5C 341.952,2.7136 341.952,6.04693 342.5,9.5C 337.446,22.025 341.779,28.025 355.5,27.5C 355.5,28.8333 355.5,30.1667 355.5,31.5C 358.564,31.9275 361.564,32.5942 364.5,33.5C 364.5,30.1667 364.5,26.8333 364.5,23.5C 362.801,23.3796 361.135,23.0463 359.5,22.5C 357.944,23.5471 356.277,24.2137 354.5,24.5C 354.48,22.857 355.147,21.5237 356.5,20.5C 363.822,19.4184 364.155,17.0851 357.5,13.5C 359.309,12.7093 361.309,12.7093 363.5,13.5C 363.025,10.9179 363.692,8.91791 365.5,7.5C 365.595,9.7857 366.262,11.7857 367.5,13.5C 367.82,17.0841 368.987,17.7508 371,15.5C 372.439,10.2639 373.272,4.9306 373.5,-0.5C 375.5,-0.5 377.5,-0.5 379.5,-0.5C 378.791,6.30213 377.791,12.9688 376.5,19.5C 375.766,20.7079 375.433,22.0413 375.5,23.5C 374.732,24.2625 374.232,25.2625 374,26.5C 373.116,32.2998 372.616,38.1332 372.5,44C 372.308,48.7721 372.975,53.2721 374.5,57.5C 374.89,63.578 376.223,69.2447 378.5,74.5C 378.5,77.8333 378.5,81.1667 378.5,84.5C 377.842,83.6016 377.176,82.6016 376.5,81.5C 375.914,81.7093 375.414,82.0426 375,82.5C 374.501,88.5161 374.668,94.5161 375.5,100.5C 374.51,97.2613 373.51,93.928 372.5,90.5C 372.465,82.7513 371.631,75.0847 370,67.5C 366.913,60.4867 365.08,53.1534 364.5,45.5C 362.695,43.1952 361.029,40.8619 359.5,38.5C 356.4,36.7737 353.4,34.7737 350.5,32.5C 347.644,30.9556 344.644,29.9556 341.5,29.5C 341.441,34.321 342.275,38.9876 344,43.5C 345.145,44.6364 346.312,45.6364 347.5,46.5C 344.386,46.331 341.386,46.6643 338.5,47.5C 338.657,46.1266 338.49,44.7932 338,43.5C 336.005,41.8391 334.005,40.1725 332,38.5C 331.5,38.8333 331,39.1667 330.5,39.5C 331.243,40.1818 331.909,40.8485 332.5,41.5C 331.2,42.1079 329.867,42.7745 328.5,43.5C 327.287,43.2528 326.62,42.5862 326.5,41.5C 327.575,42.5624 328.575,42.5624 329.5,41.5C 327.806,39.4457 326.639,37.1123 326,34.5C 323.27,32.9335 320.436,31.6002 317.5,30.5C 316.391,29.71 315.058,29.21 313.5,29C 314.938,28.7811 316.271,28.2811 317.5,27.5C 317.842,25.1579 317.842,22.8245 317.5,20.5C 316.217,18.3936 315.384,16.0602 315,13.5C 314,12.1667 313,12.1667 312,13.5C 311.536,12.9056 311.369,12.2389 311.5,11.5C 308.899,10.1993 306.232,8.866 303.5,7.5C 304.335,6.05684 305.668,5.05684 307.5,4.5C 305.433,3.23326 303.766,1.56659 302.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#252a31\",\n    d: \"M 321.5,15.5 C 325.85,17.0116 330.017,19.0116 334,21.5C 334.399,24.686 335.232,27.686 336.5,30.5C 336.812,33.6934 335.478,34.8601 332.5,34C 331.012,32.2828 329.179,31.1161 327,30.5C 323.99,26.0021 322.157,21.0021 321.5,15.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#313b43\",\n    d: \"M 354.5,11.5 C 354.149,14.2377 353.482,16.9044 352.5,19.5C 353.52,21.4325 353.687,23.4325 353,25.5C 351.87,21.2721 350.37,17.2721 348.5,13.5C 347.5,13.5 346.5,13.5 345.5,13.5C 345.833,15.5 346.167,17.5 346.5,19.5C 344.876,19.3601 343.71,20.0267 343,21.5C 342.238,17.4126 342.404,13.4126 343.5,9.5C 347.627,8.12003 351.294,8.78669 354.5,11.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d363a\",\n    d: \"M 368.5,-0.5 C 370.167,-0.5 371.833,-0.5 373.5,-0.5C 373.272,4.9306 372.439,10.2639 371,15.5C 368.987,17.7508 367.82,17.0841 367.5,13.5C 367.603,10.7814 367.269,8.11469 366.5,5.5C 367.651,3.67458 368.318,1.67458 368.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0e151a\",\n    d: \"M 342.5,-0.5 C 344.167,-0.5 345.833,-0.5 347.5,-0.5C 348.287,1.10422 349.62,1.77089 351.5,1.5C 353.134,4.99815 355.467,8.16481 358.5,11C 359.448,11.4828 360.448,11.6495 361.5,11.5C 360.838,7.53409 360.505,3.53409 360.5,-0.5C 361.5,-0.5 362.5,-0.5 363.5,-0.5C 364.639,2.00368 365.306,4.67035 365.5,7.5C 363.692,8.91791 363.025,10.9179 363.5,13.5C 361.309,12.7093 359.309,12.7093 357.5,13.5C 356.5,12.8333 355.5,12.1667 354.5,11.5C 351.294,8.78669 347.627,8.12003 343.5,9.5C 343.167,9.5 342.833,9.5 342.5,9.5C 341.952,6.04693 341.952,2.7136 342.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#252b30\",\n    d: \"M 334.5,-0.5 C 335.167,-0.5 335.833,-0.5 336.5,-0.5C 336.377,4.81105 336.044,10.1444 335.5,15.5C 331.997,15.8711 328.997,14.8711 326.5,12.5C 326.986,9.24471 325.986,6.57804 323.5,4.5C 326.373,4.12442 329.373,4.12442 332.5,4.5C 332.831,2.67761 333.498,1.01094 334.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#182026\",\n    d: \"M 315.5,-0.5 C 321.833,-0.5 328.167,-0.5 334.5,-0.5C 333.498,1.01094 332.831,2.67761 332.5,4.5C 329.373,4.12442 326.373,4.12442 323.5,4.5C 325.986,6.57804 326.986,9.24471 326.5,12.5C 322.145,12.2326 319.979,9.89923 320,5.5C 319.29,6.97326 318.124,7.63993 316.5,7.5C 316.599,4.76275 316.265,2.09609 315.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a323a\",\n    d: \"M 347.5,-0.5 C 351.833,-0.5 356.167,-0.5 360.5,-0.5C 360.505,3.53409 360.838,7.53409 361.5,11.5C 360.448,11.6495 359.448,11.4828 358.5,11C 355.467,8.16481 353.134,4.99815 351.5,1.5C 349.62,1.77089 348.287,1.10422 347.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a252e\",\n    d: \"M 363.5,-0.5 C 365.167,-0.5 366.833,-0.5 368.5,-0.5C 368.318,1.67458 367.651,3.67458 366.5,5.5C 367.269,8.11469 367.603,10.7814 367.5,13.5C 366.262,11.7857 365.595,9.7857 365.5,7.5C 365.306,4.67035 364.639,2.00368 363.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#24303a\",\n    d: \"M 12.5,15.5 C 12.9371,17.0744 13.9371,18.2411 15.5,19C 14.049,22.028 14.7157,24.528 17.5,26.5C 17.2637,23.4169 17.7637,20.4169 19,17.5C 19.9282,20.0352 21.7615,21.0352 24.5,20.5C 24.8333,22.5 25.1667,24.5 25.5,26.5C 24.3509,26.7911 23.6842,27.6244 23.5,29C 25.115,34.559 25.2816,40.059 24,45.5C 21.2519,43.834 18.4185,42.334 15.5,41C 16.694,38.3422 15.694,37.1756 12.5,37.5C 13.5294,35.136 13.5294,32.8026 12.5,30.5C 12.9391,28.8957 13.6057,27.3957 14.5,26C 13.9681,23.9803 12.6348,23.147 10.5,23.5C 10.8942,26.8571 9.5609,29.1905 6.5,30.5C 4.1851,27.5647 3.1851,24.2313 3.5,20.5C 2.5,20.5 1.5,20.5 0.5,20.5C 0.367363,25.1832 1.36736,29.5165 3.5,33.5C 2.16667,33.5 0.833333,33.5 -0.5,33.5C -0.5,27.5 -0.5,21.5 -0.5,15.5C 4.01331,15.2639 8.34664,15.2639 12.5,15.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3a454e\",\n    d: \"M 215.5,15.5 C 216.968,16.7791 217.635,18.4458 217.5,20.5C 218.833,20.5 220.167,20.5 221.5,20.5C 221.5,22.1667 221.5,23.8333 221.5,25.5C 223.199,25.3796 224.865,25.0463 226.5,24.5C 227.167,24.8333 227.833,25.1667 228.5,25.5C 227.121,26.8626 227.287,27.8626 229,28.5C 231.298,27.3729 233.465,27.7063 235.5,29.5C 235.833,29 236.167,28.5 236.5,28C 234.571,26.3058 233.571,24.1391 233.5,21.5C 236.969,20.8872 238.969,22.2206 239.5,25.5C 240.791,25.7373 241.791,25.404 242.5,24.5C 243.376,24.3691 244.043,24.7025 244.5,25.5C 243.675,26.3857 242.675,26.719 241.5,26.5C 241.5,27.5 241.5,28.5 241.5,29.5C 246.374,30.6024 246.207,32.2691 241,34.5C 240.464,36.5672 240.964,38.4006 242.5,40C 240.579,41.2408 240.246,42.7408 241.5,44.5C 243.179,42.8955 245.179,42.2289 247.5,42.5C 247.833,39.5 246.5,38.1667 243.5,38.5C 243.5,37.1667 243.5,35.8333 243.5,34.5C 245.167,34.5 246.833,34.5 248.5,34.5C 248.5,35.8333 248.5,37.1667 248.5,38.5C 254.565,37.6047 256.232,39.6047 253.5,44.5C 252.833,43.5 252.167,42.5 251.5,41.5C 250.534,43.396 250.201,45.396 250.5,47.5C 253.487,47.652 256.154,47.9853 258.5,48.5C 256.851,49.9882 254.851,50.9882 252.5,51.5C 253.243,52.1818 253.909,52.8485 254.5,53.5C 253.178,53.33 252.011,53.6634 251,54.5C 250.964,52.0588 250.131,50.0588 248.5,48.5C 247.808,49.0253 247.308,49.6919 247,50.5C 245.817,49.269 244.651,49.269 243.5,50.5C 245.289,51.623 245.622,52.9564 244.5,54.5C 242.827,52.9137 240.827,52.2471 238.5,52.5C 238.259,50.1137 238.925,48.1137 240.5,46.5C 239.907,43.1996 239.24,39.8663 238.5,36.5C 236.189,35.7865 234.022,34.7865 232,33.5C 230.416,34.8613 228.582,35.528 226.5,35.5C 226.244,33.0876 227.244,31.4209 229.5,30.5C 228.5,30.1667 227.5,29.8333 226.5,29.5C 224.696,29.9865 223.029,30.6532 221.5,31.5C 221.762,30.0222 221.429,28.6888 220.5,27.5C 219.15,28.9501 217.484,29.6168 215.5,29.5C 215.5,27.5 215.5,25.5 215.5,23.5C 212.951,23.5589 210.951,22.5589 209.5,20.5C 208.218,21.7655 207.384,24.0988 207,27.5C 206.077,26.2412 205.243,24.9079 204.5,23.5C 201.681,30.0085 199.014,30.0085 196.5,23.5C 193.591,30.0048 192.258,29.3381 192.5,21.5C 193.802,22.8069 195.135,22.8069 196.5,21.5C 197.909,18.6034 197.576,15.9367 195.5,13.5C 196.689,12.5713 198.022,12.238 199.5,12.5C 199.933,15.1656 200.433,17.8323 201,20.5C 202.617,19.1487 203.784,17.482 204.5,15.5C 205.243,16.9079 206.077,18.2412 207,19.5C 210.93,18.0309 211.097,16.8643 207.5,16C 210.146,15.5026 212.813,15.3359 215.5,15.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#262c31\",\n    d: \"M 277.5,33.5 C 275.857,33.5198 274.524,32.8532 273.5,31.5C 270.355,30.867 267.355,31.5337 264.5,33.5C 265.438,34.5529 266.605,35.2196 268,35.5C 269.882,34.394 271.716,34.394 273.5,35.5C 270.704,37.4453 267.704,38.9453 264.5,40C 266.058,40.21 267.391,40.71 268.5,41.5C 266.418,41.472 264.584,42.1387 263,43.5C 262.666,41.1527 262.833,38.8194 263.5,36.5C 262.5,36.5 261.5,36.5 260.5,36.5C 260.354,34.0576 261.187,33.3909 263,34.5C 263.318,32.9391 264.151,31.7724 265.5,31C 264.627,29.955 263.627,29.1217 262.5,28.5C 263.113,25.9908 263.78,23.4908 264.5,21C 266.108,20.342 267.275,20.842 268,22.5C 269.011,21.6634 270.178,21.33 271.5,21.5C 271.338,23.5273 271.505,25.5273 272,27.5C 274.369,27.7266 276.869,27.8933 279.5,28C 282.051,29.5158 281.718,30.3491 278.5,30.5C 278.737,31.791 278.404,32.791 277.5,33.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171c20\",\n    d: \"M 271.5,19.5 C 275.036,20.2473 276.203,22.2473 275,25.5C 277.496,23.3599 279.83,23.3599 282,25.5C 285.308,24.7264 288.641,24.0597 292,23.5C 294.578,23.3176 295.078,22.3176 293.5,20.5C 294.995,20.4148 295.995,21.0815 296.5,22.5C 294.967,26.229 295.467,26.8956 298,24.5C 299.713,25.1374 299.879,26.1374 298.5,27.5C 299.602,28.1757 300.602,28.8423 301.5,29.5C 298.887,30.0955 298.887,30.9288 301.5,32C 297.818,31.3361 294.152,31.5028 290.5,32.5C 290.5,31.5 290.5,30.5 290.5,29.5C 292.512,30.0138 294.512,30.1805 296.5,30C 297.711,29.1072 297.711,28.2739 296.5,27.5C 293.604,27.7066 290.604,27.8733 287.5,28C 281.985,32.4844 282.318,33.9844 288.5,32.5C 288.167,33.1667 287.833,33.8333 287.5,34.5C 289.167,36.1667 290.833,37.8333 292.5,39.5C 293.429,40.6888 293.762,42.0222 293.5,43.5C 295.5,43.5 297.5,43.5 299.5,43.5C 300.833,43.5 302.167,43.5 303.5,43.5C 307.833,43.5 312.167,43.5 316.5,43.5C 316.5,42.5 316.5,41.5 316.5,40.5C 317.1,41.9002 318.1,42.9002 319.5,43.5C 320.492,43.3284 321.158,43.6618 321.5,44.5C 315.149,44.9301 308.815,45.5968 302.5,46.5C 303.668,48.2174 305.335,48.8841 307.5,48.5C 307.5,49.5 307.5,50.5 307.5,51.5C 309.833,51.5 312.167,51.5 314.5,51.5C 308.018,52.4648 308.018,53.4648 314.5,54.5C 311.63,56.1926 308.963,58.1926 306.5,60.5C 303.1,58.3216 300.1,58.9883 297.5,62.5C 295.955,63.4519 294.288,63.7852 292.5,63.5C 292.5,64.5 292.5,65.5 292.5,66.5C 290.833,66.5 289.167,66.5 287.5,66.5C 287.263,65.209 287.596,64.209 288.5,63.5C 291.312,63.2331 293.645,62.2331 295.5,60.5C 299.118,58.3887 302.618,56.0553 306,53.5C 306.617,50.8236 305.784,50.157 303.5,51.5C 302.476,50.1468 301.143,49.4802 299.5,49.5C 299.5,48.1667 299.5,46.8333 299.5,45.5C 295.154,45.3343 290.821,45.501 286.5,46C 285.833,46.6667 285.167,47.3333 284.5,48C 288.121,47.5948 291.787,47.5948 295.5,48C 296.756,48.4169 297.423,49.2502 297.5,50.5C 291.932,50.1185 286.265,50.1185 280.5,50.5C 280.5,49.5 280.5,48.5 280.5,47.5C 278.738,47.6427 277.071,47.3094 275.5,46.5C 273.362,47.4289 272.196,49.0955 272,51.5C 270.525,52.5058 268.692,52.5058 266.5,51.5C 266.5,50.5 266.5,49.5 266.5,48.5C 266.369,47.6236 266.702,46.9569 267.5,46.5C 268.736,47.2458 270.07,47.5792 271.5,47.5C 271.855,44.9333 272.521,42.4333 273.5,40C 273.095,39.0546 272.428,38.3879 271.5,38C 274.259,37.0226 276.259,37.856 277.5,40.5C 275.12,42.6032 275.787,43.7699 279.5,44C 283.568,44.3004 287.568,43.8004 291.5,42.5C 291.081,41.3279 290.415,40.3279 289.5,39.5C 286.488,38.1593 283.654,36.4926 281,34.5C 278.816,37.4566 277.649,37.1233 277.5,33.5C 278.404,32.791 278.737,31.791 278.5,30.5C 281.718,30.3491 282.051,29.5158 279.5,28C 276.869,27.8933 274.369,27.7266 272,27.5C 271.505,25.5273 271.338,23.5273 271.5,21.5C 270.178,21.33 269.011,21.6634 268,22.5C 267.275,20.842 266.108,20.342 264.5,21C 263.78,23.4908 263.113,25.9908 262.5,28.5C 262.44,29.0431 262.107,29.3764 261.5,29.5C 260.24,27.6471 260.24,25.8138 261.5,24C 259.866,23.5065 258.199,23.3398 256.5,23.5C 256.196,22.8501 255.863,22.1835 255.5,21.5C 260.738,19.3795 266.071,18.7129 271.5,19.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#363f47\",\n    d: \"M 173.5,7.5 C 172.424,10.7345 171.757,14.0678 171.5,17.5C 172.552,17.3505 173.552,17.5172 174.5,18C 175.667,21.1667 177.167,21.3333 179,18.5C 178.917,21.1194 178.75,23.786 178.5,26.5C 177.5,26.5 176.5,26.5 175.5,26.5C 175.762,25.0222 175.429,23.6888 174.5,22.5C 174.167,22.8333 173.833,23.1667 173.5,23.5C 174.715,25.9322 175.049,28.2655 174.5,30.5C 170.91,31.2977 168.577,33.4644 167.5,37C 166.207,37.49 164.873,37.6567 163.5,37.5C 164.164,35.1331 165.497,33.1331 167.5,31.5C 164.947,31.3864 162.447,31.3864 160,31.5C 159.798,33.2556 159.298,34.9223 158.5,36.5C 157.522,36.0233 156.689,35.3567 156,34.5C 155.22,36.3869 155.387,38.0536 156.5,39.5C 155.003,40.3058 153.336,40.9724 151.5,41.5C 149.657,41.2448 147.657,41.0781 145.5,41C 144.675,39.3117 143.675,39.1451 142.5,40.5C 141.155,39.6533 140.155,38.4866 139.5,37C 136.668,36.7879 134.002,36.6213 131.5,36.5C 131.709,35.914 132.043,35.414 132.5,35C 134.473,34.5045 136.473,34.3379 138.5,34.5C 138.5,33.1667 138.5,31.8333 138.5,30.5C 140.288,30.7852 141.955,30.4519 143.5,29.5C 140.973,28.7864 138.473,28.1197 136,27.5C 135.804,29.9045 134.638,31.5711 132.5,32.5C 132.93,31.2883 132.93,29.955 132.5,28.5C 131.766,27.2921 131.433,25.9587 131.5,24.5C 132.5,24.5 133.5,24.5 134.5,24.5C 134.033,22.289 133.033,20.289 131.5,18.5C 130.808,19.0253 130.308,19.6919 130,20.5C 129.506,18.8659 129.34,17.1992 129.5,15.5C 129.5,14.8333 129.833,14.5 130.5,14.5C 134.796,13.5375 139.129,13.3708 143.5,14C 142.269,15.1827 142.269,16.3493 143.5,17.5C 144.551,16.1152 145.884,15.1152 147.5,14.5C 148.524,15.8532 149.857,16.5198 151.5,16.5C 149.384,21.943 145.384,24.6097 139.5,24.5C 139.5,23.5 139.5,22.5 139.5,21.5C 138.167,21.5 136.833,21.5 135.5,21.5C 135.561,23.5922 136.561,25.0922 138.5,26C 143.288,26.7238 147.955,27.8905 152.5,29.5C 153.386,28.675 153.719,27.675 153.5,26.5C 157.5,26.5 161.5,26.5 165.5,26.5C 165.719,25.325 165.386,24.325 164.5,23.5C 161.527,25.2177 159.36,24.5511 158,21.5C 157.692,22.3081 157.192,22.9747 156.5,23.5C 155.548,21.9547 155.215,20.288 155.5,18.5C 159.933,18.8267 164.267,19.3267 168.5,20C 168.727,17.631 168.893,15.131 169,12.5C 170.417,10.6022 171.917,8.93551 173.5,7.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#282f34\",\n    d: \"M 342.5,9.5 C 342.833,9.5 343.167,9.5 343.5,9.5C 342.404,13.4126 342.238,17.4126 343,21.5C 343.71,20.0267 344.876,19.3601 346.5,19.5C 346.167,17.5 345.833,15.5 345.5,13.5C 346.5,13.5 347.5,13.5 348.5,13.5C 350.37,17.2721 351.87,21.2721 353,25.5C 353.687,23.4325 353.52,21.4325 352.5,19.5C 353.482,16.9044 354.149,14.2377 354.5,11.5C 355.5,12.1667 356.5,12.8333 357.5,13.5C 364.155,17.0851 363.822,19.4184 356.5,20.5C 355.147,21.5237 354.48,22.857 354.5,24.5C 356.277,24.2137 357.944,23.5471 359.5,22.5C 361.135,23.0463 362.801,23.3796 364.5,23.5C 364.5,26.8333 364.5,30.1667 364.5,33.5C 361.564,32.5942 358.564,31.9275 355.5,31.5C 355.5,30.1667 355.5,28.8333 355.5,27.5C 341.779,28.025 337.446,22.025 342.5,9.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f3b44\",\n    d: \"M 399.5,27.5 C 399.5,35.5 399.5,43.5 399.5,51.5C 396.795,49.7559 394.295,47.7559 392,45.5C 389.418,47.0473 387.084,46.7139 385,44.5C 384.077,45.7588 383.243,47.0921 382.5,48.5C 381.264,47.7542 379.93,47.4208 378.5,47.5C 378.575,50.2062 378.908,52.8728 379.5,55.5C 378.516,60.7997 377.516,60.7997 376.5,55.5C 376.167,56.3333 375.833,57.1667 375.5,58C 376.462,63.6118 377.462,69.1118 378.5,74.5C 376.223,69.2447 374.89,63.578 374.5,57.5C 374.28,52.264 375.613,47.5974 378.5,43.5C 376.955,42.5481 375.288,42.2148 373.5,42.5C 373.92,36.1374 374.587,29.804 375.5,23.5C 375.433,22.0413 375.766,20.7079 376.5,19.5C 377.468,17.3926 377.802,15.0593 377.5,12.5C 378.552,12.3505 379.552,12.5172 380.5,13C 381.948,17.394 384.615,18.394 388.5,16C 387.269,14.8173 387.269,13.6507 388.5,12.5C 392.148,13.5917 393.815,15.7584 393.5,19C 394.833,19.3333 396.167,19.6667 397.5,20C 396.978,20.5613 396.645,21.228 396.5,22C 396.699,24.4479 397.699,26.2812 399.5,27.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#434f58\",\n    d: \"M 240.5,46.5 C 238.369,43.6713 236.869,40.338 236,36.5C 235.767,38.7801 234.934,40.7801 233.5,42.5C 230.296,42.0851 227.129,42.7518 224,44.5C 223.215,42.714 222.049,41.214 220.5,40C 219.004,39.4926 217.837,39.9926 217,41.5C 216.097,40.2986 214.931,39.4652 213.5,39C 213.833,38.6667 214.167,38.3333 214.5,38C 206.575,38.9395 198.575,39.4395 190.5,39.5C 190.785,41.288 190.452,42.9547 189.5,44.5C 187.678,36.6681 186.011,36.6681 184.5,44.5C 184.5,42.8333 184.5,41.1667 184.5,39.5C 182.167,39.5 179.833,39.5 177.5,39.5C 177.706,34.5145 180.206,33.1812 185,35.5C 186.396,34.6057 187.896,33.9391 189.5,33.5C 198.384,34.1255 207.217,34.7922 216,35.5C 216.75,34.8742 217.584,34.3742 218.5,34C 216.745,33.2801 215.911,32.1134 216,30.5C 217.699,31.4061 219.533,31.7394 221.5,31.5C 223.029,30.6532 224.696,29.9865 226.5,29.5C 227.5,29.8333 228.5,30.1667 229.5,30.5C 227.244,31.4209 226.244,33.0876 226.5,35.5C 228.582,35.528 230.416,34.8613 232,33.5C 234.022,34.7865 236.189,35.7865 238.5,36.5C 239.24,39.8663 239.907,43.1996 240.5,46.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f3941\",\n    d: \"M 65.5,12.5 C 66.8333,12.8333 68.1667,13.1667 69.5,13.5C 69.9175,14.2216 70.5842,14.7216 71.5,15C 70.6919,15.3076 70.0253,15.8076 69.5,16.5C 70.2634,17.7193 71.2634,18.7193 72.5,19.5C 71.0706,21.3313 70.5706,23.3313 71,25.5C 72.049,23.8934 73.549,23.2267 75.5,23.5C 75.5,22.5 75.5,21.5 75.5,20.5C 78.2371,21.2129 80.9037,21.2129 83.5,20.5C 84.0522,22.0026 84.0522,23.6693 83.5,25.5C 82.0222,25.238 80.6888,25.5713 79.5,26.5C 81.1353,27.6808 82.802,27.6808 84.5,26.5C 84.8333,27.3333 85.1667,28.1667 85.5,29C 84.2744,32.6047 82.941,36.1047 81.5,39.5C 82.8221,39.67 83.9887,39.3366 85,38.5C 85.1216,40.437 85.955,41.7703 87.5,42.5C 91.0048,42.6941 91.3382,43.6941 88.5,45.5C 87.2275,46.6674 85.8942,47.5007 84.5,48C 83.2532,46.5421 83.2532,45.0421 84.5,43.5C 82.8333,42.8333 81.1667,42.1667 79.5,41.5C 77.633,39.9639 76.9663,38.2973 77.5,36.5C 75.0769,37.7118 74.0769,39.7118 74.5,42.5C 72.2341,42.8588 70.4007,42.1922 69,40.5C 70.3,36.7232 70.6333,32.7232 70,28.5C 69.221,27.2718 68.221,26.2718 67,25.5C 63.2989,27.5773 59.4655,27.9107 55.5,26.5C 55.4307,28.2781 55.0974,30.1114 54.5,32C 55.4296,32.9907 56.5962,33.4907 58,33.5C 61.2868,31.707 63.9535,32.3737 66,35.5C 65.4268,41.4258 67.9268,45.4258 73.5,47.5C 74.8333,48.8333 74.8333,50.1667 73.5,51.5C 75.0758,53.5771 77.0758,55.0771 79.5,56C 77.981,57.3513 76.6477,58.8513 75.5,60.5C 74.3493,61.731 73.1827,61.731 72,60.5C 71.3076,61.0253 70.8076,61.6919 70.5,62.5C 73.9099,64.1639 76.5766,63.4973 78.5,60.5C 79.314,64.3555 79.314,68.0221 78.5,71.5C 77.8501,71.8039 77.1835,72.1373 76.5,72.5C 71.7135,70.5349 66.7135,69.5349 61.5,69.5C 60.1486,67.4708 60.482,65.6375 62.5,64C 62.0217,62.6974 61.355,61.5307 60.5,60.5C 61.3764,60.6309 62.0431,60.2975 62.5,59.5C 63.5773,57.0877 64.744,54.7543 66,52.5C 66.2256,49.905 66.7256,47.405 67.5,45C 65.2994,43.9568 62.9661,43.1235 60.5,42.5C 57.4264,40.8764 54.593,38.8764 52,36.5C 50.662,37.5061 49.3287,38.5061 48,39.5C 47.6667,39.1667 47.3333,38.8333 47,38.5C 46.5034,40.8098 46.3367,43.1432 46.5,45.5C 47.5,45.5 48.5,45.5 49.5,45.5C 48.9101,46.766 48.4101,48.0993 48,49.5C 46.8456,47.0426 45.5123,47.0426 44,49.5C 43.5045,51.4727 43.3379,53.4727 43.5,55.5C 45.4832,55.1568 46.8166,55.8235 47.5,57.5C 46.0765,63.9045 48.7431,66.5712 55.5,65.5C 55.5,66.5 55.5,67.5 55.5,68.5C 47.972,68.3738 40.6386,67.7071 33.5,66.5C 33.6471,60.7669 34.3137,55.1002 35.5,49.5C 34.5,49.5 33.5,49.5 32.5,49.5C 32.297,47.3618 31.297,45.6951 29.5,44.5C 31.4168,43.1665 32.4168,41.3331 32.5,39C 31.9461,36.1764 31.4461,33.343 31,30.5C 30.6174,29.944 30.1174,29.6107 29.5,29.5C 29.2267,27.549 29.8934,26.049 31.5,25C 34.8492,24.6124 38.1825,24.7791 41.5,25.5C 41.4176,27.2517 42.2509,28.2517 44,28.5C 47.7205,26.8359 48.5539,24.1692 46.5,20.5C 50.1667,20.1667 52.1667,18.1667 52.5,14.5C 53.8734,14.6567 55.2068,14.49 56.5,14C 55.2888,13.1072 55.2888,12.2739 56.5,11.5C 59.216,13.5204 62.216,13.8537 65.5,12.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#282d32\",\n    d: \"M 119.5,29.5 C 117.862,33.7697 115.862,37.7697 113.5,41.5C 112.229,44.3429 111.396,47.3429 111,50.5C 110.282,51.4506 109.449,51.6172 108.5,51C 106.716,46.0207 105.716,40.854 105.5,35.5C 107.833,35.5 110.167,35.5 112.5,35.5C 112.5,34.1667 112.5,32.8333 112.5,31.5C 115.076,31.5321 117.409,30.8654 119.5,29.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#262b31\",\n    d: \"M 301.5,29.5 C 303.882,30.3507 305.882,31.684 307.5,33.5C 306.007,34.4451 304.507,35.4451 303,36.5C 300.422,33.4838 297.255,32.8171 293.5,34.5C 294.376,35.2508 295.376,35.7508 296.5,36C 295.76,37.7849 295.093,39.6183 294.5,41.5C 296.291,42.1698 297.958,42.8365 299.5,43.5C 297.5,43.5 295.5,43.5 293.5,43.5C 293.762,42.0222 293.429,40.6888 292.5,39.5C 290.833,37.8333 289.167,36.1667 287.5,34.5C 287.833,33.8333 288.167,33.1667 288.5,32.5C 282.318,33.9844 281.985,32.4844 287.5,28C 290.604,27.8733 293.604,27.7066 296.5,27.5C 297.711,28.2739 297.711,29.1072 296.5,30C 294.512,30.1805 292.512,30.0138 290.5,29.5C 290.5,30.5 290.5,31.5 290.5,32.5C 294.152,31.5028 297.818,31.3361 301.5,32C 298.887,30.9288 298.887,30.0955 301.5,29.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#273139\",\n    d: \"M 69.5,13.5 C 71.1992,13.3398 72.8659,13.5065 74.5,14C 78.5316,16.5701 82.8649,18.5701 87.5,20C 90.2104,21.755 91.8771,24.255 92.5,27.5C 93.8498,26.0499 95.5165,25.3832 97.5,25.5C 99.3027,27.9413 100.303,30.7746 100.5,34C 100.316,35.3756 99.6491,36.2089 98.5,36.5C 97.5514,35.8476 96.3847,35.5143 95,35.5C 92.2393,36.4176 89.4059,37.0843 86.5,37.5C 86.366,39.2915 86.6993,40.9582 87.5,42.5C 85.955,41.7703 85.1216,40.437 85,38.5C 83.9887,39.3366 82.8221,39.67 81.5,39.5C 82.941,36.1047 84.2744,32.6047 85.5,29C 85.1667,28.1667 84.8333,27.3333 84.5,26.5C 82.802,27.6808 81.1353,27.6808 79.5,26.5C 80.6888,25.5713 82.0222,25.238 83.5,25.5C 84.0522,23.6693 84.0522,22.0026 83.5,20.5C 80.9037,21.2129 78.2371,21.2129 75.5,20.5C 75.5,21.5 75.5,22.5 75.5,23.5C 73.549,23.2267 72.049,23.8934 71,25.5C 70.5706,23.3313 71.0706,21.3313 72.5,19.5C 71.2634,18.7193 70.2634,17.7193 69.5,16.5C 70.0253,15.8076 70.6919,15.3076 71.5,15C 70.5842,14.7216 69.9175,14.2216 69.5,13.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#232429\",\n    d: \"M 317.5,30.5 C 320.436,31.6002 323.27,32.9335 326,34.5C 326.639,37.1123 327.806,39.4457 329.5,41.5C 328.575,42.5624 327.575,42.5624 326.5,41.5C 325.881,38.8808 324.214,37.2141 321.5,36.5C 320.287,36.7472 319.62,37.4138 319.5,38.5C 316.058,38.1759 315.058,36.5092 316.5,33.5C 312.245,31.1349 312.579,30.1349 317.5,30.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b323a\",\n    d: \"M 174.5,30.5 C 175.828,31.9097 175.495,33.0764 173.5,34C 174.094,34.4643 174.761,34.631 175.5,34.5C 175.719,35.675 175.386,36.675 174.5,37.5C 173.264,36.7542 171.93,36.4208 170.5,36.5C 170.421,37.9305 170.754,39.2638 171.5,40.5C 169.905,41.4339 168.239,41.4339 166.5,40.5C 166.611,39.8826 166.944,39.3826 167.5,39C 164.953,38.3405 162.453,38.5071 160,39.5C 159.05,38.9777 158.216,38.311 157.5,37.5C 156.702,37.9569 156.369,38.6236 156.5,39.5C 155.387,38.0536 155.22,36.3869 156,34.5C 156.689,35.3567 157.522,36.0233 158.5,36.5C 159.298,34.9223 159.798,33.2556 160,31.5C 162.447,31.3864 164.947,31.3864 167.5,31.5C 165.497,33.1331 164.164,35.1331 163.5,37.5C 164.873,37.6567 166.207,37.49 167.5,37C 168.577,33.4644 170.91,31.2977 174.5,30.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#202528\",\n    d: \"M 277.5,33.5 C 277.649,37.1233 278.816,37.4566 281,34.5C 283.654,36.4926 286.488,38.1593 289.5,39.5C 290.415,40.3279 291.081,41.3279 291.5,42.5C 287.568,43.8004 283.568,44.3004 279.5,44C 275.787,43.7699 275.12,42.6032 277.5,40.5C 276.259,37.856 274.259,37.0226 271.5,38C 272.428,38.3879 273.095,39.0546 273.5,40C 272.521,42.4333 271.855,44.9333 271.5,47.5C 270.07,47.5792 268.736,47.2458 267.5,46.5C 266.702,46.9569 266.369,47.6236 266.5,48.5C 264.833,48.5 263.167,48.5 261.5,48.5C 261.5,47.5 261.5,46.5 261.5,45.5C 264.755,45.9864 267.422,44.9864 269.5,42.5C 269.376,41.8933 269.043,41.56 268.5,41.5C 267.391,40.71 266.058,40.21 264.5,40C 267.704,38.9453 270.704,37.4453 273.5,35.5C 271.716,34.394 269.882,34.394 268,35.5C 266.605,35.2196 265.438,34.5529 264.5,33.5C 267.355,31.5337 270.355,30.867 273.5,31.5C 274.524,32.8532 275.857,33.5198 277.5,33.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a2e33\",\n    d: \"M 359.5,38.5 C 359.539,41.8097 358.206,44.4763 355.5,46.5C 352.956,46.9491 350.29,46.9491 347.5,46.5C 346.312,45.6364 345.145,44.6364 344,43.5C 342.275,38.9876 341.441,34.321 341.5,29.5C 344.644,29.9556 347.644,30.9556 350.5,32.5C 353.4,34.7737 356.4,36.7737 359.5,38.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b262e\",\n    d: \"M 43.5,33.5 C 44.5251,34.3739 45.1918,35.5405 45.5,37C 42.3228,39.851 39.4894,43.0177 37,46.5C 36.7085,41.6856 38.8751,38.6856 43.5,37.5C 43.5,36.1667 43.5,34.8333 43.5,33.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3d4548\",\n    d: \"M 113.5,41.5 C 111.952,41.8212 111.285,42.8212 111.5,44.5C 110.178,44.67 109.011,44.3366 108,43.5C 107.505,41.5273 107.338,39.5273 107.5,37.5C 110.888,36.9694 112.888,38.3027 113.5,41.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#232a31\",\n    d: \"M 128.5,15.5 C 128.833,15.5 129.167,15.5 129.5,15.5C 129.34,17.1992 129.506,18.8659 130,20.5C 130.308,19.6919 130.808,19.0253 131.5,18.5C 133.033,20.289 134.033,22.289 134.5,24.5C 133.5,24.5 132.5,24.5 131.5,24.5C 131.433,25.9587 131.766,27.2921 132.5,28.5C 131.065,29.0965 129.398,29.0965 127.5,28.5C 127.762,27.0222 127.429,25.6888 126.5,24.5C 125.223,27.0341 125.223,29.5341 126.5,32C 124.503,33.1531 124.17,34.6531 125.5,36.5C 126.192,35.9747 126.692,35.3081 127,34.5C 128.884,37.3845 131.384,39.5512 134.5,41C 133.207,41.49 131.873,41.6567 130.5,41.5C 126.794,39.4887 122.794,38.4887 118.5,38.5C 119.338,35.4867 120.838,32.8201 123,30.5C 123.977,28.26 124.477,25.9267 124.5,23.5C 125.833,23.5 127.167,23.5 128.5,23.5C 128.5,20.8333 128.5,18.1667 128.5,15.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b222a\",\n    d: \"M 166.5,40.5 C 165.167,41.8333 163.833,43.1667 162.5,44.5C 162.5,43.8333 162.5,43.1667 162.5,42.5C 160.574,41.5139 158.574,40.5139 156.5,39.5C 156.369,38.6236 156.702,37.9569 157.5,37.5C 158.216,38.311 159.05,38.9777 160,39.5C 162.453,38.5071 164.953,38.3405 167.5,39C 166.944,39.3826 166.611,39.8826 166.5,40.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#49535a\",\n    d: \"M 240.5,46.5 C 238.925,48.1137 238.259,50.1137 238.5,52.5C 240.827,52.2471 242.827,52.9137 244.5,54.5C 245.622,52.9564 245.289,51.623 243.5,50.5C 244.651,49.269 245.817,49.269 247,50.5C 247.308,49.6919 247.808,49.0253 248.5,48.5C 250.131,50.0588 250.964,52.0588 251,54.5C 252.011,53.6634 253.178,53.33 254.5,53.5C 254.218,54.7777 253.551,55.7777 252.5,56.5C 252.5,57.5 252.5,58.5 252.5,59.5C 252.5,60.5 252.5,61.5 252.5,62.5C 253.5,62.5 254.5,62.5 255.5,62.5C 255.338,64.5273 255.505,66.5273 256,68.5C 258.394,67.8641 260.894,67.8641 263.5,68.5C 264.697,70.8407 264.031,72.8407 261.5,74.5C 260.201,73.91 259.368,72.91 259,71.5C 257.644,73.4089 256.144,75.0755 254.5,76.5C 252.616,76.2882 251.283,75.2882 250.5,73.5C 252.743,72.5258 255.076,72.1924 257.5,72.5C 257.5,71.5 257.5,70.5 257.5,69.5C 255.8,69.3739 254.3,68.7073 253,67.5C 251.403,68.8847 249.57,69.5514 247.5,69.5C 247.5,68.5 247.5,67.5 247.5,66.5C 248.5,66.5 249.5,66.5 250.5,66.5C 250.52,64.857 249.853,63.5237 248.5,62.5C 251.093,60.9292 252.093,58.5959 251.5,55.5C 248.187,56.0448 244.854,56.5448 241.5,57C 241,57.5 240.5,58 240,58.5C 238.187,55.6117 236.521,52.6117 235,49.5C 234.5,50 234,50.5 233.5,51C 229.311,51.3355 225.144,51.8355 221,52.5C 216.829,50.163 212.329,48.9963 207.5,49C 201.327,48.6102 195.327,48.4436 189.5,48.5C 188.808,49.0253 188.308,49.6919 188,50.5C 187,49.1667 186,49.1667 185,50.5C 184.333,49.8333 183.667,49.1667 183,48.5C 182.531,50.1083 181.865,51.7749 181,53.5C 180.784,51.6161 180.117,49.9494 179,48.5C 178.439,49.0219 177.772,49.3552 177,49.5C 174.503,48.7511 172.003,48.0845 169.5,47.5C 169.5,46.1667 169.5,44.8333 169.5,43.5C 170.5,43.5 171.5,43.5 172.5,43.5C 172.238,44.9778 172.571,46.3112 173.5,47.5C 174.065,45.4904 175.065,43.8237 176.5,42.5C 179.197,43.1693 181.863,43.8359 184.5,44.5C 186.011,36.6681 187.678,36.6681 189.5,44.5C 190.452,42.9547 190.785,41.288 190.5,39.5C 198.575,39.4395 206.575,38.9395 214.5,38C 214.167,38.3333 213.833,38.6667 213.5,39C 214.931,39.4652 216.097,40.2986 217,41.5C 217.837,39.9926 219.004,39.4926 220.5,40C 222.049,41.214 223.215,42.714 224,44.5C 227.129,42.7518 230.296,42.0851 233.5,42.5C 234.934,40.7801 235.767,38.7801 236,36.5C 236.869,40.338 238.369,43.6713 240.5,46.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#343a3f\",\n    d: \"M 307.5,33.5 C 308.833,34.1667 309.833,35.1667 310.5,36.5C 309.687,37.6527 308.687,37.6527 307.5,36.5C 305.609,38.0163 303.609,39.3496 301.5,40.5C 302.612,41.2652 303.279,42.2652 303.5,43.5C 302.167,43.5 300.833,43.5 299.5,43.5C 297.958,42.8365 296.291,42.1698 294.5,41.5C 295.093,39.6183 295.76,37.7849 296.5,36C 295.376,35.7508 294.376,35.2508 293.5,34.5C 297.255,32.8171 300.422,33.4838 303,36.5C 304.507,35.4451 306.007,34.4451 307.5,33.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c333b\",\n    d: \"M 132.5,28.5 C 132.93,29.955 132.93,31.2883 132.5,32.5C 134.638,31.5711 135.804,29.9045 136,27.5C 138.473,28.1197 140.973,28.7864 143.5,29.5C 141.955,30.4519 140.288,30.7852 138.5,30.5C 138.5,31.8333 138.5,33.1667 138.5,34.5C 136.473,34.3379 134.473,34.5045 132.5,35C 132.043,35.414 131.709,35.914 131.5,36.5C 134.002,36.6213 136.668,36.7879 139.5,37C 140.155,38.4866 141.155,39.6533 142.5,40.5C 143.675,39.1451 144.675,39.3117 145.5,41C 147.657,41.0781 149.657,41.2448 151.5,41.5C 153.336,40.9724 155.003,40.3058 156.5,39.5C 158.574,40.5139 160.574,41.5139 162.5,42.5C 158.864,43.3255 155.197,43.9922 151.5,44.5C 152.167,47.1667 152.833,49.8333 153.5,52.5C 151.517,52.8432 150.183,52.1765 149.5,50.5C 150.575,51.5624 151.575,51.5624 152.5,50.5C 150.777,48.1324 150.11,45.4658 150.5,42.5C 148.712,42.2148 147.045,42.5481 145.5,43.5C 146.325,44.3857 147.325,44.719 148.5,44.5C 148.67,45.8221 148.337,46.9887 147.5,48C 142.177,48.4994 136.844,48.666 131.5,48.5C 133.075,46.8863 133.741,44.8863 133.5,42.5C 132.209,42.7373 131.209,42.404 130.5,41.5C 131.873,41.6567 133.207,41.49 134.5,41C 131.384,39.5512 128.884,37.3845 127,34.5C 126.692,35.3081 126.192,35.9747 125.5,36.5C 124.17,34.6531 124.503,33.1531 126.5,32C 125.223,29.5341 125.223,27.0341 126.5,24.5C 127.429,25.6888 127.762,27.0222 127.5,28.5C 129.398,29.0965 131.065,29.0965 132.5,28.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#272c30\",\n    d: \"M 310.5,36.5 C 312.228,38.2255 314.228,39.5589 316.5,40.5C 316.5,41.5 316.5,42.5 316.5,43.5C 312.167,43.5 307.833,43.5 303.5,43.5C 303.279,42.2652 302.612,41.2652 301.5,40.5C 303.609,39.3496 305.609,38.0163 307.5,36.5C 308.687,37.6527 309.687,37.6527 310.5,36.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a2b2c\",\n    d: \"M 338.5,47.5 C 334.795,47.1285 332.795,45.1285 332.5,41.5C 331.909,40.8485 331.243,40.1818 330.5,39.5C 331,39.1667 331.5,38.8333 332,38.5C 334.005,40.1725 336.005,41.8391 338,43.5C 338.49,44.7932 338.657,46.1266 338.5,47.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#38454b\",\n    d: \"M 60.5,60.5 C 59.0199,56.2556 57.6866,51.9223 56.5,47.5C 55.914,47.2907 55.414,46.9574 55,46.5C 52.1629,50.7551 50.3296,50.4218 49.5,45.5C 48.5,45.5 47.5,45.5 46.5,45.5C 46.3367,43.1432 46.5034,40.8098 47,38.5C 47.3333,38.8333 47.6667,39.1667 48,39.5C 49.3287,38.5061 50.662,37.5061 52,36.5C 54.593,38.8764 57.4264,40.8764 60.5,42.5C 62.9661,43.1235 65.2994,43.9568 67.5,45C 66.7256,47.405 66.2256,49.905 66,52.5C 64.744,54.7543 63.5773,57.0877 62.5,59.5C 62.0431,60.2975 61.3764,60.6309 60.5,60.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#242b33\",\n    d: \"M 88.5,45.5 C 88.1482,47.7047 87.1482,49.5381 85.5,51C 86.0219,51.5613 86.3552,52.228 86.5,53C 82.9719,58.2763 84.3053,60.7763 90.5,60.5C 89.3778,61.9473 87.8778,62.9473 86,63.5C 85.6667,65.5 85.3333,67.5 85,69.5C 84.586,69.9574 84.086,70.2907 83.5,70.5C 83.8245,67.1046 83.1578,63.7713 81.5,60.5C 80.5,60.5 79.5,60.5 78.5,60.5C 76.5766,63.4973 73.9099,64.1639 70.5,62.5C 70.8076,61.6919 71.3076,61.0253 72,60.5C 73.1827,61.731 74.3493,61.731 75.5,60.5C 76.6477,58.8513 77.981,57.3513 79.5,56C 77.0758,55.0771 75.0758,53.5771 73.5,51.5C 74.8333,50.1667 74.8333,48.8333 73.5,47.5C 67.9268,45.4258 65.4268,41.4258 66,35.5C 63.9535,32.3737 61.2868,31.707 58,33.5C 56.5962,33.4907 55.4296,32.9907 54.5,32C 55.0974,30.1114 55.4307,28.2781 55.5,26.5C 59.4655,27.9107 63.2989,27.5773 67,25.5C 68.221,26.2718 69.221,27.2718 70,28.5C 70.6333,32.7232 70.3,36.7232 69,40.5C 70.4007,42.1922 72.2341,42.8588 74.5,42.5C 74.0769,39.7118 75.0769,37.7118 77.5,36.5C 76.9663,38.2973 77.633,39.9639 79.5,41.5C 81.1667,42.1667 82.8333,42.8333 84.5,43.5C 83.2532,45.0421 83.2532,46.5421 84.5,48C 85.8942,47.5007 87.2275,46.6674 88.5,45.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f373d\",\n    d: \"M 256.5,23.5 C 258.199,23.3398 259.866,23.5065 261.5,24C 260.24,25.8138 260.24,27.6471 261.5,29.5C 262.107,29.3764 262.44,29.0431 262.5,28.5C 263.627,29.1217 264.627,29.955 265.5,31C 264.151,31.7724 263.318,32.9391 263,34.5C 261.187,33.3909 260.354,34.0576 260.5,36.5C 261.5,36.5 262.5,36.5 263.5,36.5C 262.833,38.8194 262.666,41.1527 263,43.5C 264.584,42.1387 266.418,41.472 268.5,41.5C 269.043,41.56 269.376,41.8933 269.5,42.5C 267.422,44.9864 264.755,45.9864 261.5,45.5C 261.5,46.5 261.5,47.5 261.5,48.5C 263.167,48.5 264.833,48.5 266.5,48.5C 266.5,49.5 266.5,50.5 266.5,51.5C 266.254,54.4701 264.588,55.8034 261.5,55.5C 261.5,53.8333 261.5,52.1667 261.5,50.5C 260.448,50.3505 259.448,50.5172 258.5,51C 259.649,52.6037 259.649,54.2703 258.5,56C 259.295,57.5819 260.462,57.7485 262,56.5C 263.03,56.8361 263.53,57.5028 263.5,58.5C 262.7,60.7409 261.034,61.7409 258.5,61.5C 258.797,56.5237 256.797,54.857 252.5,56.5C 253.551,55.7777 254.218,54.7777 254.5,53.5C 253.909,52.8485 253.243,52.1818 252.5,51.5C 254.851,50.9882 256.851,49.9882 258.5,48.5C 256.154,47.9853 253.487,47.652 250.5,47.5C 250.201,45.396 250.534,43.396 251.5,41.5C 252.167,42.5 252.833,43.5 253.5,44.5C 256.232,39.6047 254.565,37.6047 248.5,38.5C 248.5,37.1667 248.5,35.8333 248.5,34.5C 246.833,34.5 245.167,34.5 243.5,34.5C 243.5,35.8333 243.5,37.1667 243.5,38.5C 246.5,38.1667 247.833,39.5 247.5,42.5C 245.179,42.2289 243.179,42.8955 241.5,44.5C 240.246,42.7408 240.579,41.2408 242.5,40C 240.964,38.4006 240.464,36.5672 241,34.5C 246.207,32.2691 246.374,30.6024 241.5,29.5C 241.5,28.5 241.5,27.5 241.5,26.5C 242.675,26.719 243.675,26.3857 244.5,25.5C 244.043,24.7025 243.376,24.3691 242.5,24.5C 241.167,23.1667 239.833,21.8333 238.5,20.5C 239.705,19.3281 239.705,17.9948 238.5,16.5C 240.045,15.5481 241.712,15.2148 243.5,15.5C 243.336,18.1873 243.503,20.854 244,23.5C 245.718,21.1029 246.885,18.4362 247.5,15.5C 248.386,16.325 248.719,17.325 248.5,18.5C 249.552,18.3505 250.552,18.5172 251.5,19C 253.202,20.5916 254.868,22.0916 256.5,23.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c3237\",\n    d: \"M 375.5,23.5 C 374.587,29.804 373.92,36.1374 373.5,42.5C 375.288,42.2148 376.955,42.5481 378.5,43.5C 375.613,47.5974 374.28,52.264 374.5,57.5C 372.975,53.2721 372.308,48.7721 372.5,44C 372.616,38.1332 373.116,32.2998 374,26.5C 374.232,25.2625 374.732,24.2625 375.5,23.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#344348\",\n    d: \"M 399.5,51.5 C 399.5,55.5 399.5,59.5 399.5,63.5C 398.03,61.8487 396.697,60.0153 395.5,58C 391.018,58.0631 386.852,57.2297 383,55.5C 382.667,56.5 382.333,57.5 382,58.5C 381.148,57.4293 380.315,56.4293 379.5,55.5C 378.908,52.8728 378.575,50.2062 378.5,47.5C 379.93,47.4208 381.264,47.7542 382.5,48.5C 383.243,47.0921 384.077,45.7588 385,44.5C 387.084,46.7139 389.418,47.0473 392,45.5C 394.295,47.7559 396.795,49.7559 399.5,51.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3c4348\",\n    d: \"M 118.5,38.5 C 122.794,38.4887 126.794,39.4887 130.5,41.5C 131.209,42.404 132.209,42.7373 133.5,42.5C 133.741,44.8863 133.075,46.8863 131.5,48.5C 126.102,48.0432 120.936,48.7098 116,50.5C 114.93,50.472 114.097,50.1386 113.5,49.5C 115.017,45.7716 116.683,42.1049 118.5,38.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#323c44\",\n    d: \"M -0.5,33.5 C 0.833333,33.5 2.16667,33.5 3.5,33.5C 5.8082,35.4707 8.14153,37.4707 10.5,39.5C 10.5,40.5 10.5,41.5 10.5,42.5C 8.87623,42.6399 7.70956,41.9733 7,40.5C 6.51722,41.448 6.35055,42.448 6.5,43.5C 4.71199,43.2148 3.04533,43.5481 1.5,44.5C 3.33767,50.3425 6.00434,55.6759 9.5,60.5C 11.8333,60.5 14.1667,60.5 16.5,60.5C 16.5,61.8333 16.5,63.1667 16.5,64.5C 10.7622,64.3767 5.09552,63.71 -0.5,62.5C -0.5,52.8333 -0.5,43.1667 -0.5,33.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#050404\",\n    d: \"M 326.5,41.5 C 326.62,42.5862 327.287,43.2528 328.5,43.5C 329.867,42.7745 331.2,42.1079 332.5,41.5C 332.795,45.1285 334.795,47.1285 338.5,47.5C 341.386,46.6643 344.386,46.331 347.5,46.5C 348.718,47.1614 350.051,47.8281 351.5,48.5C 350.443,48.9059 349.109,48.9059 347.5,48.5C 347.453,52.2829 348.953,55.2829 352,57.5C 352.5,57.1667 353,56.8333 353.5,56.5C 352.355,55.109 352.355,53.7757 353.5,52.5C 355.489,52.5211 357.489,52.5211 359.5,52.5C 358.386,57.4456 358.219,62.4456 359,67.5C 359.278,68.4158 359.778,69.0825 360.5,69.5C 361.682,71.8381 363.348,73.8381 365.5,75.5C 366.067,77.9823 366.734,80.3157 367.5,82.5C 368.273,86.1402 368.94,89.8068 369.5,93.5C 369.759,96.2718 370.759,98.6051 372.5,100.5C 374.595,106.795 375.595,106.795 375.5,100.5C 374.668,94.5161 374.501,88.5161 375,82.5C 375.414,82.0426 375.914,81.7093 376.5,81.5C 377.176,82.6016 377.842,83.6016 378.5,84.5C 379.167,85.5 379.833,86.5 380.5,87.5C 379.986,99.4067 381.986,110.74 386.5,121.5C 386.5,122.167 386.833,122.5 387.5,122.5C 387.5,122.833 387.5,123.167 387.5,123.5C 387.782,127.68 389.115,131.347 391.5,134.5C 394.034,139.115 395.368,144.115 395.5,149.5C 396.833,149.5 398.167,149.5 399.5,149.5C 399.5,152.167 399.5,154.833 399.5,157.5C 398.18,160.428 397.514,163.761 397.5,167.5C 397.514,171.239 398.18,174.572 399.5,177.5C 399.5,206.833 399.5,236.167 399.5,265.5C 319.167,265.5 238.833,265.5 158.5,265.5C 158.586,264.504 158.252,263.671 157.5,263C 152.375,260.754 147.042,260.087 141.5,261C 140.833,261.667 140.167,262.333 139.5,263C 132.808,263.831 126.142,263.664 119.5,262.5C 120,262.167 120.5,261.833 121,261.5C 131.732,260.395 142.065,258.395 152,255.5C 154.557,258.299 157.557,259.299 161,258.5C 165.187,261.749 169.187,261.749 173,258.5C 173.175,254.789 173.675,251.122 174.5,247.5C 175.468,248.489 176.635,249.156 178,249.5C 181.666,246.967 185.333,246.967 189,249.5C 189.684,250.784 189.517,251.951 188.5,253C 189.448,253.483 190.448,253.649 191.5,253.5C 192.28,248.645 190.28,245.811 185.5,245C 184.406,243.22 183.406,241.386 182.5,239.5C 177.377,241.651 177.71,243.484 183.5,245C 180.773,245.818 178.106,245.652 175.5,244.5C 172.94,243.253 170.273,242.253 167.5,241.5C 178.018,240.049 178.018,237.549 167.5,234C 165.866,233.506 164.199,233.34 162.5,233.5C 162.5,232.5 162.5,231.5 162.5,230.5C 158.251,230.308 154.251,229.308 150.5,227.5C 146.639,228.499 146.639,229.665 150.5,231C 149.167,231.667 147.833,232.333 146.5,233C 146.833,233.333 147.167,233.667 147.5,234C 150.623,234.206 153.623,234.873 156.5,236C 155.109,237.02 153.609,237.853 152,238.5C 146.116,236.731 139.95,235.898 133.5,236C 128.879,232.754 123.879,230.254 118.5,228.5C 114.913,230.268 111.247,230.601 107.5,229.5C 109.842,227.767 112.176,225.933 114.5,224C 105.546,223.265 105.879,222.431 115.5,221.5C 117.375,221.63 119.208,221.963 121,222.5C 128.181,220.551 135.181,218.218 142,215.5C 143,215.833 144,216.167 145,216.5C 146.033,216.452 146.366,216.119 146,215.5C 142.458,213.187 138.792,213.187 135,215.5C 134.508,214.451 134.674,213.451 135.5,212.5C 140.927,212.488 146.26,211.822 151.5,210.5C 152.966,211.347 153.8,212.68 154,214.5C 155,210.5 156,210.5 157,214.5C 157.29,212.956 157.956,211.623 159,210.5C 159.499,214.152 159.665,217.818 159.5,221.5C 154.167,222.167 154.167,222.833 159.5,223.5C 159.5,224.5 159.5,225.5 159.5,226.5C 161.512,227.014 163.512,227.18 165.5,227C 163.122,226.026 163.456,225.359 166.5,225C 165.167,224.667 163.833,224.333 162.5,224C 166.753,223.8 170.92,223.3 175,222.5C 177.833,223.87 180.5,223.536 183,221.5C 185.856,223.828 189.023,224.161 192.5,222.5C 193.192,223.025 193.692,223.692 194,224.5C 195.333,223.167 196.667,223.167 198,224.5C 198.591,223.517 198.257,222.85 197,222.5C 195.234,221.767 193.401,221.433 191.5,221.5C 191.5,217.5 191.5,213.5 191.5,209.5C 192.85,208.849 194.183,208.182 195.5,207.5C 198.602,207.497 198.935,207.997 196.5,209C 199.798,208.522 202.798,207.188 205.5,205C 208.554,204.179 211.554,204.345 214.5,205.5C 212.234,206.314 209.9,206.814 207.5,207C 208.833,207.167 210.167,207.333 211.5,207.5C 220.743,207.31 230.076,207.31 239.5,207.5C 239.5,205.833 239.5,204.167 239.5,202.5C 244.702,202.702 249.702,202.035 254.5,200.5C 256.167,200.667 257.833,200.833 259.5,201C 258.304,201.654 258.304,202.154 259.5,202.5C 260.468,201.511 261.635,200.844 263,200.5C 265.437,200.776 267.937,201.109 270.5,201.5C 271.802,199.554 272.469,197.721 272.5,196C 282.833,195.333 293.167,195.333 303.5,196C 300.986,197.252 298.32,197.752 295.5,197.5C 295.5,198.5 295.5,199.5 295.5,200.5C 297.144,200.714 298.644,200.38 300,199.5C 300.637,201.303 301.803,202.636 303.5,203.5C 306.997,204.723 310.497,204.723 314,203.5C 315.657,204.484 317.323,205.484 319,206.5C 321.117,203.559 323.951,201.559 327.5,200.5C 326.726,199.289 325.893,199.289 325,200.5C 324.312,199.668 324.479,199.002 325.5,198.5C 328.28,197.805 330.947,196.805 333.5,195.5C 334.971,196.381 335.804,197.714 336,199.5C 336.333,198.833 336.667,198.167 337,197.5C 340.8,200.321 344.8,199.987 349,196.5C 349.414,196.957 349.914,197.291 350.5,197.5C 356.547,195.999 362.547,195.332 368.5,195.5C 365.913,194.78 362.913,194.113 359.5,193.5C 358.106,193.621 356.772,193.954 355.5,194.5C 354.614,193.675 354.281,192.675 354.5,191.5C 362.174,191.666 369.841,191.5 377.5,191C 378.823,190.184 379.489,189.017 379.5,187.5C 380.481,185.511 381.481,183.511 382.5,181.5C 382.122,179.283 381.455,177.283 380.5,175.5C 379.669,168.928 378.002,162.595 375.5,156.5C 374.77,154.955 373.437,154.122 371.5,154C 372.381,153.292 373.047,152.458 373.5,151.5C 376.136,144.079 375.802,136.746 372.5,129.5C 372.495,124.648 370.662,120.648 367,117.5C 365.673,113.51 364.34,109.51 363,105.5C 362.292,104.619 361.458,103.953 360.5,103.5C 358.665,95.975 356.332,88.6417 353.5,81.5C 352.962,78.8111 352.295,76.1444 351.5,73.5C 350.675,72.6143 349.675,72.281 348.5,72.5C 348.784,70.5853 348.451,68.9187 347.5,67.5C 347.262,65.5956 346.262,64.2623 344.5,63.5C 344.063,61.9256 343.063,60.7589 341.5,60C 343.466,58.6534 343.799,57.1534 342.5,55.5C 341.5,53.8333 340.167,52.5 338.5,51.5C 337.07,50.4625 335.403,49.7959 333.5,49.5C 329.833,48.1667 326.167,46.8333 322.5,45.5C 322.5,44.8333 322.167,44.5 321.5,44.5C 321.158,43.6618 320.492,43.3284 319.5,43.5C 318.167,41.8333 318.167,40.1667 319.5,38.5C 319.62,37.4138 320.287,36.7472 321.5,36.5C 324.214,37.2141 325.881,38.8808 326.5,41.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e242a\",\n    d: \"M 149.5,50.5 C 148.5,50.5 147.5,50.5 146.5,50.5C 138.757,49.8701 131.424,50.5367 124.5,52.5C 123.833,52.5 123.167,52.5 122.5,52.5C 120.5,51.1667 118.5,51.1667 116.5,52.5C 114.95,53.4408 113.284,54.1075 111.5,54.5C 112.024,52.6943 112.691,51.0276 113.5,49.5C 114.097,50.1386 114.93,50.472 116,50.5C 120.936,48.7098 126.102,48.0432 131.5,48.5C 136.844,48.666 142.177,48.4994 147.5,48C 148.337,46.9887 148.67,45.8221 148.5,44.5C 147.325,44.719 146.325,44.3857 145.5,43.5C 147.045,42.5481 148.712,42.2148 150.5,42.5C 150.11,45.4658 150.777,48.1324 152.5,50.5C 151.575,51.5624 150.575,51.5624 149.5,50.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#262a2d\",\n    d: \"M 321.5,44.5 C 322.167,44.5 322.5,44.8333 322.5,45.5C 320.975,47.0358 318.975,48.0358 316.5,48.5C 315.388,49.2652 314.721,50.2652 314.5,51.5C 312.167,51.5 309.833,51.5 307.5,51.5C 307.5,50.5 307.5,49.5 307.5,48.5C 305.335,48.8841 303.668,48.2174 302.5,46.5C 308.815,45.5968 315.149,44.9301 321.5,44.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d1f23\",\n    d: \"M 322.5,45.5 C 326.167,46.8333 329.833,48.1667 333.5,49.5C 333.5,50.5 333.5,51.5 333.5,52.5C 330.549,52.2938 327.883,51.2938 325.5,49.5C 322.021,51.1618 318.354,51.8285 314.5,51.5C 314.721,50.2652 315.388,49.2652 316.5,48.5C 318.975,48.0358 320.975,47.0358 322.5,45.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f1214\",\n    d: \"M 359.5,38.5 C 361.029,40.8619 362.695,43.1952 364.5,45.5C 363.414,45.62 362.747,46.2867 362.5,47.5C 359.563,54.6452 358.896,61.9786 360.5,69.5C 359.778,69.0825 359.278,68.4158 359,67.5C 358.219,62.4456 358.386,57.4456 359.5,52.5C 357.489,52.5211 355.489,52.5211 353.5,52.5C 352.355,53.7757 352.355,55.109 353.5,56.5C 353,56.8333 352.5,57.1667 352,57.5C 348.953,55.2829 347.453,52.2829 347.5,48.5C 349.109,48.9059 350.443,48.9059 351.5,48.5C 350.051,47.8281 348.718,47.1614 347.5,46.5C 350.29,46.9491 352.956,46.9491 355.5,46.5C 358.206,44.4763 359.539,41.8097 359.5,38.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#283138\",\n    d: \"M 49.5,45.5 C 50.3296,50.4218 52.1629,50.7551 55,46.5C 55.414,46.9574 55.914,47.2907 56.5,47.5C 57.6866,51.9223 59.0199,56.2556 60.5,60.5C 59.7784,60.0825 59.2784,59.4158 59,58.5C 58.7978,60.2556 58.2978,61.9223 57.5,63.5C 56.2638,62.7542 54.9305,62.4208 53.5,62.5C 52.463,59.1727 51.2963,55.8394 50,52.5C 49.0147,54.1749 48.1814,55.8415 47.5,57.5C 46.8166,55.8235 45.4832,55.1568 43.5,55.5C 43.3379,53.4727 43.5045,51.4727 44,49.5C 45.5123,47.0426 46.8456,47.0426 48,49.5C 48.4101,48.0993 48.9101,46.766 49.5,45.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d1114\",\n    d: \"M 333.5,49.5 C 335.403,49.7959 337.07,50.4625 338.5,51.5C 337.5,51.5 336.5,51.5 335.5,51.5C 335.33,52.8221 335.663,53.9887 336.5,55C 338.421,55.3603 340.088,56.1936 341.5,57.5C 342.298,57.0431 342.631,56.3764 342.5,55.5C 343.799,57.1534 343.466,58.6534 341.5,60C 343.063,60.7589 344.063,61.9256 344.5,63.5C 342.328,62.7945 340.328,61.7945 338.5,60.5C 335.325,57.6718 331.658,55.6718 327.5,54.5C 326.167,53.1667 324.833,53.1667 323.5,54.5C 320.344,53.4489 317.344,53.4489 314.5,54.5C 308.018,53.4648 308.018,52.4648 314.5,51.5C 318.354,51.8285 322.021,51.1618 325.5,49.5C 327.883,51.2938 330.549,52.2938 333.5,52.5C 333.5,51.5 333.5,50.5 333.5,49.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#394045\",\n    d: \"M 146.5,50.5 C 145.791,51.404 144.791,51.7373 143.5,51.5C 143.5,52.5 143.5,53.5 143.5,54.5C 144.5,54.5 145.5,54.5 146.5,54.5C 145.73,60.2585 142.73,64.2585 137.5,66.5C 137.158,65.6618 136.492,65.3284 135.5,65.5C 137.788,62.6737 140.122,59.8404 142.5,57C 141.385,55.7651 141.385,54.5984 142.5,53.5C 139.141,50.3527 136.474,50.8527 134.5,55C 135.148,56.4397 135.481,57.9397 135.5,59.5C 134.5,59.5 133.5,59.5 132.5,59.5C 132.853,55.3865 131.02,52.7198 127,51.5C 126.098,51.7432 125.265,52.0766 124.5,52.5C 131.424,50.5367 138.757,49.8701 146.5,50.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#474d53\",\n    d: \"M 162.5,42.5 C 162.5,43.1667 162.5,43.8333 162.5,44.5C 164.216,45.9708 166.216,46.9708 168.5,47.5C 168.196,48.1499 167.863,48.8165 167.5,49.5C 170.167,50.1667 172.833,50.8333 175.5,51.5C 176.645,52.891 176.645,54.2243 175.5,55.5C 174.167,50.1667 172.833,50.1667 171.5,55.5C 170.108,54.3947 168.941,53.0614 168,51.5C 167.019,54.7473 164.852,56.7473 161.5,57.5C 159.983,57.5106 158.816,58.1772 158,59.5C 157.667,59.1667 157.333,58.8333 157,58.5C 155.883,59.9494 155.216,61.6161 155,63.5C 154.692,62.6919 154.192,62.0253 153.5,61.5C 152.534,63.396 152.201,65.396 152.5,67.5C 150.901,67.2322 149.568,67.5655 148.5,68.5C 147.391,68.5569 146.391,68.8902 145.5,69.5C 145.38,68.4138 144.713,67.7472 143.5,67.5C 141.5,68.1667 139.5,68.8333 137.5,69.5C 136.833,69.1667 136.167,68.8333 135.5,68.5C 136.243,67.8182 136.909,67.1515 137.5,66.5C 142.73,64.2585 145.73,60.2585 146.5,54.5C 145.5,54.5 144.5,54.5 143.5,54.5C 143.5,53.5 143.5,52.5 143.5,51.5C 144.791,51.7373 145.791,51.404 146.5,50.5C 147.5,50.5 148.5,50.5 149.5,50.5C 150.183,52.1765 151.517,52.8432 153.5,52.5C 152.833,49.8333 152.167,47.1667 151.5,44.5C 155.197,43.9922 158.864,43.3255 162.5,42.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#525a60\",\n    d: \"M 168.5,47.5 C 168.833,47.5 169.167,47.5 169.5,47.5C 172.003,48.0845 174.503,48.7511 177,49.5C 177.772,49.3552 178.439,49.0219 179,48.5C 180.117,49.9494 180.784,51.6161 181,53.5C 181.865,51.7749 182.531,50.1083 183,48.5C 183.667,49.1667 184.333,49.8333 185,50.5C 186,49.1667 187,49.1667 188,50.5C 188.308,49.6919 188.808,49.0253 189.5,48.5C 195.327,48.4436 201.327,48.6102 207.5,49C 212.329,48.9963 216.829,50.163 221,52.5C 225.144,51.8355 229.311,51.3355 233.5,51C 234,50.5 234.5,50 235,49.5C 236.521,52.6117 238.187,55.6117 240,58.5C 240.5,58 241,57.5 241.5,57C 244.854,56.5448 248.187,56.0448 251.5,55.5C 252.093,58.5959 251.093,60.9292 248.5,62.5C 249.853,63.5237 250.52,64.857 250.5,66.5C 249.5,66.5 248.5,66.5 247.5,66.5C 247.5,67.5 247.5,68.5 247.5,69.5C 243.578,68.6329 241.078,66.2996 240,62.5C 239.101,64.3266 237.767,65.66 236,66.5C 232.342,63.9301 228.175,62.9301 223.5,63.5C 223.5,62.1667 223.5,60.8333 223.5,59.5C 222.167,59.5 220.833,59.5 219.5,59.5C 219.5,60.8333 219.5,62.1667 219.5,63.5C 218.167,63.5 216.833,63.5 215.5,63.5C 215.5,62.5 215.5,61.5 215.5,60.5C 202.137,60.2416 188.804,60.5749 175.5,61.5C 175.5,62.5 175.5,63.5 175.5,64.5C 173.549,64.7733 172.049,64.1066 171,62.5C 168.777,63.7832 166.61,64.1166 164.5,63.5C 164.53,62.5028 164.03,61.8361 163,61.5C 162,62.1667 161,62.8333 160,63.5C 159.5,63.1667 159,62.8333 158.5,62.5C 159.26,60.6396 160.26,58.973 161.5,57.5C 164.852,56.7473 167.019,54.7473 168,51.5C 168.941,53.0614 170.108,54.3947 171.5,55.5C 172.833,50.1667 174.167,50.1667 175.5,55.5C 176.645,54.2243 176.645,52.891 175.5,51.5C 172.833,50.8333 170.167,50.1667 167.5,49.5C 167.863,48.8165 168.196,48.1499 168.5,47.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#303336\",\n    d: \"M 338.5,51.5 C 340.167,52.5 341.5,53.8333 342.5,55.5C 342.631,56.3764 342.298,57.0431 341.5,57.5C 340.088,56.1936 338.421,55.3603 336.5,55C 335.663,53.9887 335.33,52.8221 335.5,51.5C 336.5,51.5 337.5,51.5 338.5,51.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#464c52\",\n    d: \"M 135.5,65.5 C 134.432,66.4345 133.099,66.7678 131.5,66.5C 131.5,67.5 131.5,68.5 131.5,69.5C 130.167,69.5 128.833,69.5 127.5,69.5C 127.5,68.5 127.5,67.5 127.5,66.5C 127.663,64.1432 127.497,61.8098 127,59.5C 125.933,58.8095 124.766,58.3095 123.5,58C 122.87,56.108 121.87,54.4413 120.5,53C 121.094,52.5357 121.761,52.369 122.5,52.5C 123.167,52.5 123.833,52.5 124.5,52.5C 125.265,52.0766 126.098,51.7432 127,51.5C 131.02,52.7198 132.853,55.3865 132.5,59.5C 133.5,59.5 134.5,59.5 135.5,59.5C 135.481,57.9397 135.148,56.4397 134.5,55C 136.474,50.8527 139.141,50.3527 142.5,53.5C 141.385,54.5984 141.385,55.7651 142.5,57C 140.122,59.8404 137.788,62.6737 135.5,65.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3c464c\",\n    d: \"M 379.5,55.5 C 380.315,56.4293 381.148,57.4293 382,58.5C 382.333,57.5 382.667,56.5 383,55.5C 386.852,57.2297 391.018,58.0631 395.5,58C 396.697,60.0153 398.03,61.8487 399.5,63.5C 399.5,64.5 399.5,65.5 399.5,66.5C 397.473,66.3379 395.473,66.5045 393.5,67C 395.455,67.9533 397.122,69.2866 398.5,71C 393.23,71.3615 388.063,70.8615 383,69.5C 381.968,71.9944 380.802,74.3277 379.5,76.5C 379.672,75.5084 379.338,74.8417 378.5,74.5C 377.462,69.1118 376.462,63.6118 375.5,58C 375.833,57.1667 376.167,56.3333 376.5,55.5C 377.516,60.7997 378.516,60.7997 379.5,55.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b2f33\",\n    d: \"M 101.5,40.5 C 104.312,48.3293 105.312,56.3293 104.5,64.5C 104.565,64.9382 104.399,65.2716 104,65.5C 102.406,64.2841 100.906,62.9507 99.5,61.5C 98.7025,61.9569 98.3691,62.6236 98.5,63.5C 98.1667,63.5 97.8333,63.5 97.5,63.5C 96.1667,62.5 94.8333,61.5 93.5,60.5C 94.3764,60.6309 95.0431,60.2975 95.5,59.5C 94.7542,58.2638 94.4208,56.9305 94.5,55.5C 93.5,55.5 92.5,55.5 91.5,55.5C 91.5,56.5 91.5,57.5 91.5,58.5C 90.1667,58.5 88.8333,58.5 87.5,58.5C 88.2311,56.2506 89.2311,54.084 90.5,52C 90.2645,51.1268 89.9312,50.2935 89.5,49.5C 91.3157,47.7097 92.6491,45.7097 93.5,43.5C 95.5354,40.4911 98.2021,39.4911 101.5,40.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3d4246\",\n    d: \"M 93.5,43.5 C 94.8333,43.5 96.1667,43.5 97.5,43.5C 97.2808,47.5274 98.4475,48.1941 101,45.5C 102.958,48.3146 103.458,51.3146 102.5,54.5C 101.264,55.2458 99.9305,55.5792 98.5,55.5C 96.8396,51.5107 95.1729,47.5107 93.5,43.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#282c33\",\n    d: \"M 297.5,50.5 C 297.785,52.288 297.452,53.9547 296.5,55.5C 294.958,54.2532 293.458,54.2532 292,55.5C 291.505,57.4727 291.338,59.4727 291.5,61.5C 292.959,61.5674 294.292,61.2341 295.5,60.5C 293.645,62.2331 291.312,63.2331 288.5,63.5C 288.5,61.1667 288.5,58.8333 288.5,56.5C 287.5,56.5 286.5,56.5 285.5,56.5C 285.5,59.1667 285.5,61.8333 285.5,64.5C 284.167,64.5 282.833,64.5 281.5,64.5C 279.5,64.5 277.5,64.5 275.5,64.5C 275.674,62.139 276.007,59.8056 276.5,57.5C 277.5,57.5 278.5,57.5 279.5,57.5C 279.5,58.5 279.5,59.5 279.5,60.5C 280.5,60.5 281.5,60.5 282.5,60.5C 282.5,58.8333 282.5,57.1667 282.5,55.5C 280.5,55.5 278.5,55.5 276.5,55.5C 276.5,54.5 276.5,53.5 276.5,52.5C 273.343,52.8173 271.843,54.484 272,57.5C 272.725,55.842 273.892,55.342 275.5,56C 273.384,57.7555 271.051,59.2555 268.5,60.5C 267.15,59.0499 265.484,58.3832 263.5,58.5C 263.53,57.5028 263.03,56.8361 262,56.5C 260.462,57.7485 259.295,57.5819 258.5,56C 259.649,54.2703 259.649,52.6037 258.5,51C 259.448,50.5172 260.448,50.3505 261.5,50.5C 261.5,52.1667 261.5,53.8333 261.5,55.5C 264.588,55.8034 266.254,54.4701 266.5,51.5C 268.692,52.5058 270.525,52.5058 272,51.5C 272.196,49.0955 273.362,47.4289 275.5,46.5C 277.071,47.3094 278.738,47.6427 280.5,47.5C 280.5,48.5 280.5,49.5 280.5,50.5C 286.265,50.1185 291.932,50.1185 297.5,50.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#32373d\",\n    d: \"M 295.5,60.5 C 294.292,61.2341 292.959,61.5674 291.5,61.5C 291.338,59.4727 291.505,57.4727 292,55.5C 293.458,54.2532 294.958,54.2532 296.5,55.5C 297.452,53.9547 297.785,52.288 297.5,50.5C 297.423,49.2502 296.756,48.4169 295.5,48C 291.787,47.5948 288.121,47.5948 284.5,48C 285.167,47.3333 285.833,46.6667 286.5,46C 290.821,45.501 295.154,45.3343 299.5,45.5C 299.5,46.8333 299.5,48.1667 299.5,49.5C 301.143,49.4802 302.476,50.1468 303.5,51.5C 305.784,50.157 306.617,50.8236 306,53.5C 302.618,56.0553 299.118,58.3887 295.5,60.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c2028\",\n    d: \"M 60.5,60.5 C 61.355,61.5307 62.0217,62.6974 62.5,64C 60.482,65.6375 60.1486,67.4708 61.5,69.5C 59.8235,68.8166 59.1568,67.4832 59.5,65.5C 58.1667,65.5 56.8333,65.5 55.5,65.5C 48.7431,66.5712 46.0765,63.9045 47.5,57.5C 48.1814,55.8415 49.0147,54.1749 50,52.5C 51.2963,55.8394 52.463,59.1727 53.5,62.5C 54.9305,62.4208 56.2638,62.7542 57.5,63.5C 58.2978,61.9223 58.7978,60.2556 59,58.5C 59.2784,59.4158 59.7784,60.0825 60.5,60.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#464b4f\",\n    d: \"M 116.5,52.5 C 120.962,55.9554 120.295,58.2887 114.5,59.5C 113.583,58.8728 112.583,58.5394 111.5,58.5C 111.5,57.1667 111.5,55.8333 111.5,54.5C 113.284,54.1075 114.95,53.4408 116.5,52.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b252c\",\n    d: \"M 25.5,26.5 C 26.5,26.5 27.5,26.5 28.5,26.5C 28.2627,27.791 28.596,28.791 29.5,29.5C 30.1174,29.6107 30.6174,29.944 31,30.5C 31.4461,33.343 31.9461,36.1764 32.5,39C 32.4168,41.3331 31.4168,43.1665 29.5,44.5C 31.297,45.6951 32.297,47.3618 32.5,49.5C 33.5,49.5 34.5,49.5 35.5,49.5C 34.3137,55.1002 33.6471,60.7669 33.5,66.5C 32.8333,66.5 32.1667,66.5 31.5,66.5C 31.6653,62.8183 31.4986,59.1516 31,55.5C 27.6821,53.3413 27.8488,52.6746 31.5,53.5C 32.8333,52.5 32.8333,51.5 31.5,50.5C 28.5,49.8333 25.5,49.1667 22.5,48.5C 21.6789,51.4465 21.6789,54.4465 22.5,57.5C 24.4835,57.6168 26.1502,56.9501 27.5,55.5C 28.4656,57.396 28.7989,59.396 28.5,61.5C 25.0504,60.7564 23.3838,62.0897 23.5,65.5C 18.706,64.9031 14.3727,65.5698 10.5,67.5C 8.32298,67.4139 6.32298,66.7472 4.5,65.5C 2.92908,66.3094 1.26241,66.6427 -0.5,66.5C -0.5,65.1667 -0.5,63.8333 -0.5,62.5C 5.09552,63.71 10.7622,64.3767 16.5,64.5C 17.8195,63.0582 19.4862,62.3915 21.5,62.5C 21.5,61.1667 21.5,59.8333 21.5,58.5C 20.1266,58.6567 18.7932,58.49 17.5,58C 18.5742,57.2613 19.2409,56.2613 19.5,55C 18.7933,51.7999 17.96,48.6332 17,45.5C 15.8904,43.9632 14.3904,43.2965 12.5,43.5C 12.8432,41.5168 12.1765,40.1834 10.5,39.5C 8.14153,37.4707 5.8082,35.4707 3.5,33.5C 1.36736,29.5165 0.367363,25.1832 0.5,20.5C 1.5,20.5 2.5,20.5 3.5,20.5C 3.1851,24.2313 4.1851,27.5647 6.5,30.5C 9.5609,29.1905 10.8942,26.8571 10.5,23.5C 12.6348,23.147 13.9681,23.9803 14.5,26C 13.6057,27.3957 12.9391,28.8957 12.5,30.5C 13.5294,32.8026 13.5294,35.136 12.5,37.5C 15.694,37.1756 16.694,38.3422 15.5,41C 18.4185,42.334 21.2519,43.834 24,45.5C 25.2816,40.059 25.115,34.559 23.5,29C 23.6842,27.6244 24.3509,26.7911 25.5,26.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2e373e\",\n    d: \"M 31.5,66.5 C 28.7938,66.4249 26.1272,66.0916 23.5,65.5C 23.3838,62.0897 25.0504,60.7564 28.5,61.5C 28.7989,59.396 28.4656,57.396 27.5,55.5C 26.1502,56.9501 24.4835,57.6168 22.5,57.5C 21.6789,54.4465 21.6789,51.4465 22.5,48.5C 25.5,49.1667 28.5,49.8333 31.5,50.5C 32.8333,51.5 32.8333,52.5 31.5,53.5C 27.8488,52.6746 27.6821,53.3413 31,55.5C 31.4986,59.1516 31.6653,62.8183 31.5,66.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161b21\",\n    d: \"M 98.5,36.5 C 97.9569,36.56 97.6236,36.8933 97.5,37.5C 99.3316,38.0568 100.665,39.0568 101.5,40.5C 98.2021,39.4911 95.5354,40.4911 93.5,43.5C 92.6491,45.7097 91.3157,47.7097 89.5,49.5C 89.9312,50.2935 90.2645,51.1268 90.5,52C 89.2311,54.084 88.2311,56.2506 87.5,58.5C 88.8333,58.5 90.1667,58.5 91.5,58.5C 91.5,57.5 91.5,56.5 91.5,55.5C 92.5,55.5 93.5,55.5 94.5,55.5C 94.4208,56.9305 94.7542,58.2638 95.5,59.5C 95.0431,60.2975 94.3764,60.6309 93.5,60.5C 92.5,60.5 91.5,60.5 90.5,60.5C 84.3053,60.7763 82.9719,58.2763 86.5,53C 86.3552,52.228 86.0219,51.5613 85.5,51C 87.1482,49.5381 88.1482,47.7047 88.5,45.5C 91.3382,43.6941 91.0048,42.6941 87.5,42.5C 86.6993,40.9582 86.366,39.2915 86.5,37.5C 89.4059,37.0843 92.2393,36.4176 95,35.5C 96.3847,35.5143 97.5514,35.8476 98.5,36.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#353a3f\",\n    d: \"M 116.5,52.5 C 118.5,51.1667 120.5,51.1667 122.5,52.5C 121.761,52.369 121.094,52.5357 120.5,53C 121.87,54.4413 122.87,56.108 123.5,58C 124.766,58.3095 125.933,58.8095 127,59.5C 127.497,61.8098 127.663,64.1432 127.5,66.5C 125.801,66.6602 124.134,66.4935 122.5,66C 119.476,65.084 116.809,63.584 114.5,61.5C 111.835,62.8884 110.835,61.8884 111.5,58.5C 112.583,58.5394 113.583,58.8728 114.5,59.5C 120.295,58.2887 120.962,55.9554 116.5,52.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#262b32\",\n    d: \"M 314.5,54.5 C 317.344,53.4489 320.344,53.4489 323.5,54.5C 321.203,59.0546 318.536,63.3879 315.5,67.5C 314.481,69.5069 312.815,70.8402 310.5,71.5C 309.893,71.3764 309.56,71.0431 309.5,70.5C 310.609,67.6192 312.609,65.6192 315.5,64.5C 318.516,57.0875 317.516,56.5875 312.5,63C 310.744,63.2022 309.078,63.7022 307.5,64.5C 308.645,65.891 308.645,67.2243 307.5,68.5C 306.893,68.3764 306.56,68.0431 306.5,67.5C 305.643,66.1982 305.143,64.8649 305,63.5C 309.601,61.2047 313.767,58.3714 317.5,55C 316.552,54.5172 315.552,54.3505 314.5,54.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a343d\",\n    d: \"M 10.5,39.5 C 12.1765,40.1834 12.8432,41.5168 12.5,43.5C 14.3904,43.2965 15.8904,43.9632 17,45.5C 17.96,48.6332 18.7933,51.7999 19.5,55C 19.2409,56.2613 18.5742,57.2613 17.5,58C 18.7932,58.49 20.1266,58.6567 21.5,58.5C 21.5,59.8333 21.5,61.1667 21.5,62.5C 19.4862,62.3915 17.8195,63.0582 16.5,64.5C 16.5,63.1667 16.5,61.8333 16.5,60.5C 14.1667,60.5 11.8333,60.5 9.5,60.5C 6.00434,55.6759 3.33767,50.3425 1.5,44.5C 3.04533,43.5481 4.71199,43.2148 6.5,43.5C 6.35055,42.448 6.51722,41.448 7,40.5C 7.70956,41.9733 8.87623,42.6399 10.5,42.5C 10.5,41.5 10.5,40.5 10.5,39.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#444c52\",\n    d: \"M 327.5,54.5 C 330.319,56.4188 332.986,58.5855 335.5,61C 334.833,61.1667 334.167,61.3333 333.5,61.5C 331.952,59.6236 329.952,58.6236 327.5,58.5C 327.5,61.1667 327.5,63.8333 327.5,66.5C 329.446,66.1928 331.113,66.1928 332.5,66.5C 331.867,68.7855 330.534,70.4522 328.5,71.5C 326.167,71.5 323.833,71.5 321.5,71.5C 321.785,69.712 321.452,68.0453 320.5,66.5C 319.526,68.7427 319.192,71.076 319.5,73.5C 315.932,73.2407 314.599,71.2407 315.5,67.5C 318.536,63.3879 321.203,59.0546 323.5,54.5C 324.833,53.1667 326.167,53.1667 327.5,54.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#303439\",\n    d: \"M 252.5,59.5 C 255.096,61.059 257.763,62.7257 260.5,64.5C 262.747,63.6258 265.08,63.2924 267.5,63.5C 267.5,64.5 267.5,65.5 267.5,66.5C 266.178,66.67 265.011,66.3366 264,65.5C 263.517,66.448 263.351,67.448 263.5,68.5C 260.894,67.8641 258.394,67.8641 256,68.5C 255.505,66.5273 255.338,64.5273 255.5,62.5C 254.5,62.5 253.5,62.5 252.5,62.5C 252.5,61.5 252.5,60.5 252.5,59.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#343b3f\",\n    d: \"M 327.5,54.5 C 331.658,55.6718 335.325,57.6718 338.5,60.5C 336.352,60.3894 336.019,61.056 337.5,62.5C 335.464,67.2702 334.964,72.2702 336,77.5C 338.305,75.0695 341.138,74.0695 344.5,74.5C 344.67,73.1779 344.337,72.0113 343.5,71C 344.793,70.51 346.127,70.3433 347.5,70.5C 347.5,69.5 347.5,68.5 347.5,67.5C 348.451,68.9187 348.784,70.5853 348.5,72.5C 349.675,72.281 350.675,72.6143 351.5,73.5C 352.295,76.1444 352.962,78.8111 353.5,81.5C 351.783,79.4833 349.783,79.15 347.5,80.5C 346.41,81.3914 346.41,82.3914 347.5,83.5C 347.023,84.4776 346.357,85.3109 345.5,86C 345.833,86.3333 346.167,86.6667 346.5,87C 344.871,87.5855 343.371,88.4188 342,89.5C 339.618,86.6956 336.785,86.029 333.5,87.5C 332.438,86.5754 332.438,85.5754 333.5,84.5C 334.995,84.5852 335.995,83.9185 336.5,82.5C 334.833,81.8333 333.167,81.1667 331.5,80.5C 330.74,78.6396 329.74,76.973 328.5,75.5C 328.5,74.1667 328.5,72.8333 328.5,71.5C 330.534,70.4522 331.867,68.7855 332.5,66.5C 331.113,66.1928 329.446,66.1928 327.5,66.5C 327.5,63.8333 327.5,61.1667 327.5,58.5C 329.952,58.6236 331.952,59.6236 333.5,61.5C 334.167,61.3333 334.833,61.1667 335.5,61C 332.986,58.5855 330.319,56.4188 327.5,54.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#40444a\",\n    d: \"M 309.5,70.5 C 307.787,72.8504 305.453,73.8504 302.5,73.5C 302.212,76.9389 301.546,80.2722 300.5,83.5C 300.167,83.5 299.833,83.5 299.5,83.5C 299.489,81.9826 298.823,80.8159 297.5,80C 298.448,79.5172 299.448,79.3505 300.5,79.5C 299.859,74.7566 298.359,74.4232 296,78.5C 294.89,76.9632 293.39,76.2965 291.5,76.5C 292.209,75.596 293.209,75.2627 294.5,75.5C 296.133,71.0374 299.299,68.0374 304,66.5C 304.902,66.7432 305.735,67.0766 306.5,67.5C 306.56,68.0431 306.893,68.3764 307.5,68.5C 308.645,67.2243 308.645,65.891 307.5,64.5C 309.078,63.7022 310.744,63.2022 312.5,63C 317.516,56.5875 318.516,57.0875 315.5,64.5C 312.609,65.6192 310.609,67.6192 309.5,70.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#384042\",\n    d: \"M 338.5,60.5 C 340.328,61.7945 342.328,62.7945 344.5,63.5C 346.262,64.2623 347.262,65.5956 347.5,67.5C 347.5,68.5 347.5,69.5 347.5,70.5C 346.127,70.3433 344.793,70.51 343.5,71C 344.337,72.0113 344.67,73.1779 344.5,74.5C 341.138,74.0695 338.305,75.0695 336,77.5C 334.964,72.2702 335.464,67.2702 337.5,62.5C 336.019,61.056 336.352,60.3894 338.5,60.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#666767\",\n    d: \"M 255.5,85.5 C 255.5,87.1667 255.5,88.8333 255.5,90.5C 253.376,89.9688 251.876,88.6355 251,86.5C 248.936,87.5914 246.769,87.7581 244.5,87C 245.337,85.9887 245.67,84.8221 245.5,83.5C 243.738,83.6427 242.071,83.3094 240.5,82.5C 239.702,82.9569 239.369,83.6236 239.5,84.5C 236.518,84.0371 233.518,83.7038 230.5,83.5C 230.67,82.1779 230.337,81.0113 229.5,80C 226.833,79.6667 224.167,79.3333 221.5,79C 220,78.1667 218.833,77 218,75.5C 217.586,75.9574 217.086,76.2907 216.5,76.5C 202.906,74.1724 189.406,74.8391 176,78.5C 174.422,77.4528 172.922,77.4528 171.5,78.5C 172.588,79.9344 173.922,80.9344 175.5,81.5C 175.254,84.4701 173.588,85.8034 170.5,85.5C 171.429,84.6851 172.429,83.8518 173.5,83C 170.242,82.7883 167.076,82.2883 164,81.5C 163.51,82.7932 163.343,84.1266 163.5,85.5C 161.61,85.2965 160.11,85.9632 159,87.5C 157.205,86.2805 157.372,85.2805 159.5,84.5C 160.688,82.0564 162.021,79.723 163.5,77.5C 165.288,77.2148 166.955,77.5481 168.5,78.5C 167.391,80.2141 168.058,80.8808 170.5,80.5C 170.433,78.5992 170.767,76.7659 171.5,75C 170.728,73.779 169.728,72.779 168.5,72C 169.416,71.6258 170.25,71.1258 171,70.5C 175.479,70.9812 179.979,71.3146 184.5,71.5C 185.27,69.7282 186.603,68.7282 188.5,68.5C 199.537,69.0912 210.37,70.7579 221,73.5C 221.893,72.9186 222.893,72.5852 224,72.5C 231.214,74.337 238.214,76.6703 245,79.5C 246.326,79.2451 247.326,78.5784 248,77.5C 249.163,79.2852 249.83,81.2852 250,83.5C 251.725,84.464 253.559,85.1307 255.5,85.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#555759\",\n    d: \"M 161.5,57.5 C 160.26,58.973 159.26,60.6396 158.5,62.5C 159,62.8333 159.5,63.1667 160,63.5C 161,62.8333 162,62.1667 163,61.5C 164.03,61.8361 164.53,62.5028 164.5,63.5C 161.133,67.3478 162.133,69.0144 167.5,68.5C 167.579,71.2706 167.079,73.9373 166,76.5C 164.539,75.1175 163.706,75.4508 163.5,77.5C 162.021,79.723 160.688,82.0564 159.5,84.5C 157.833,84.5 156.167,84.5 154.5,84.5C 155.234,83.2921 155.567,81.9587 155.5,80.5C 156.913,77.7814 157.58,74.7814 157.5,71.5C 156.178,71.67 155.011,71.3366 154,70.5C 153,71.1667 152,71.8333 151,72.5C 149.887,71.2889 148.72,71.2889 147.5,72.5C 147.167,72.1667 146.833,71.8333 146.5,71.5C 147.193,70.4822 147.859,69.4822 148.5,68.5C 149.568,67.5655 150.901,67.2322 152.5,67.5C 152.201,65.396 152.534,63.396 153.5,61.5C 154.192,62.0253 154.692,62.6919 155,63.5C 155.216,61.6161 155.883,59.9494 157,58.5C 157.333,58.8333 157.667,59.1667 158,59.5C 158.816,58.1772 159.983,57.5106 161.5,57.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#303438\",\n    d: \"M 314.5,54.5 C 315.552,54.3505 316.552,54.5172 317.5,55C 313.767,58.3714 309.601,61.2047 305,63.5C 305.143,64.8649 305.643,66.1982 306.5,67.5C 305.735,67.0766 304.902,66.7432 304,66.5C 299.299,68.0374 296.133,71.0374 294.5,75.5C 293.209,75.2627 292.209,75.596 291.5,76.5C 289.468,77.0478 288.468,78.3812 288.5,80.5C 287.5,80.5 286.5,80.5 285.5,80.5C 285.5,81.5 285.5,82.5 285.5,83.5C 283.176,83.3385 281.509,82.1718 280.5,80C 281.126,79.2496 281.626,78.4162 282,77.5C 282.249,78.624 282.749,79.624 283.5,80.5C 284.132,77.9703 285.132,75.637 286.5,73.5C 285.833,73.1667 285.167,72.8333 284.5,72.5C 282.098,74.049 279.432,74.7157 276.5,74.5C 276.5,75.5 276.5,76.5 276.5,77.5C 275.5,77.5 274.5,77.5 273.5,77.5C 273.145,74.9333 272.479,72.4333 271.5,70C 272.577,68.4574 273.911,68.4574 275.5,70C 274.391,71.813 275.058,72.6463 277.5,72.5C 277.5,71.1667 277.5,69.8333 277.5,68.5C 280.321,68.4613 282.988,67.7946 285.5,66.5C 284.051,65.8281 282.718,65.1614 281.5,64.5C 282.833,64.5 284.167,64.5 285.5,64.5C 285.5,61.8333 285.5,59.1667 285.5,56.5C 286.5,56.5 287.5,56.5 288.5,56.5C 288.5,58.8333 288.5,61.1667 288.5,63.5C 287.596,64.209 287.263,65.209 287.5,66.5C 289.167,66.5 290.833,66.5 292.5,66.5C 292.5,65.5 292.5,64.5 292.5,63.5C 294.288,63.7852 295.955,63.4519 297.5,62.5C 300.1,58.9883 303.1,58.3216 306.5,60.5C 308.963,58.1926 311.63,56.1926 314.5,54.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#13171b\",\n    d: \"M 23.5,65.5 C 26.1272,66.0916 28.7938,66.4249 31.5,66.5C 32.1667,66.5 32.8333,66.5 33.5,66.5C 40.6386,67.7071 47.972,68.3738 55.5,68.5C 55.5,67.5 55.5,66.5 55.5,65.5C 56.8333,65.5 58.1667,65.5 59.5,65.5C 59.1568,67.4832 59.8235,68.8166 61.5,69.5C 66.7135,69.5349 71.7135,70.5349 76.5,72.5C 77.1835,72.1373 77.8501,71.8039 78.5,71.5C 82.3327,74.9194 86.666,77.5861 91.5,79.5C 92.0906,80.1515 92.7573,80.8182 93.5,81.5C 93.0431,82.2975 92.3764,82.6309 91.5,82.5C 88.0964,80.6259 84.7631,78.4592 81.5,76C 76.9276,74.6269 72.261,73.7935 67.5,73.5C 67.5,74.5 67.5,75.5 67.5,76.5C 69.3588,76.4609 70.6921,77.2942 71.5,79C 70.9558,79.7172 70.2891,80.2172 69.5,80.5C 69.1667,79.5 68.5,78.8333 67.5,78.5C 66.4324,77.5655 65.099,77.2322 63.5,77.5C 63.4208,76.0695 63.7542,74.7362 64.5,73.5C 62.9547,72.5481 61.288,72.2148 59.5,72.5C 59.719,73.675 59.3857,74.675 58.5,75.5C 57.9041,74.2839 57.7374,72.9506 58,71.5C 57.0228,70.2264 56.1894,70.2264 55.5,71.5C 55.1583,72.3382 54.4916,72.6716 53.5,72.5C 47.3264,71.068 40.993,70.068 34.5,69.5C 33.209,69.2627 32.209,69.596 31.5,70.5C 28.0698,68.6908 24.4031,67.6908 20.5,67.5C 17.1667,67.5 13.8333,67.5 10.5,67.5C 14.3727,65.5698 18.706,64.9031 23.5,65.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#42494c\",\n    d: \"M 399.5,66.5 C 399.5,75.5 399.5,84.5 399.5,93.5C 394.864,93.7837 390.864,92.4504 387.5,89.5C 386.566,94.1726 385.066,94.5059 383,90.5C 383.11,94.129 383.276,97.7956 383.5,101.5C 382.337,96.8626 381.337,92.1959 380.5,87.5C 380.276,83.8212 379.942,80.1545 379.5,76.5C 380.802,74.3277 381.968,71.9944 383,69.5C 388.063,70.8615 393.23,71.3615 398.5,71C 397.122,69.2866 395.455,67.9533 393.5,67C 395.473,66.5045 397.473,66.3379 399.5,66.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3b4042\",\n    d: \"M 364.5,45.5 C 365.08,53.1534 366.913,60.4867 370,67.5C 371.631,75.0847 372.465,82.7513 372.5,90.5C 371.518,87.0381 371.185,83.3714 371.5,79.5C 370.167,79.5 368.833,79.5 367.5,79.5C 367.5,80.5 367.5,81.5 367.5,82.5C 366.734,80.3157 366.067,77.9823 365.5,75.5C 363.348,73.8381 361.682,71.8381 360.5,69.5C 358.896,61.9786 359.563,54.6452 362.5,47.5C 362.747,46.2867 363.414,45.62 364.5,45.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3a4347\",\n    d: \"M -0.5,67.5 C 1.5,68.1667 3.5,68.8333 5.5,69.5C 5.5,70.5 5.5,71.5 5.5,72.5C 7.83333,72.5 10.1667,72.5 12.5,72.5C 13.449,74.7373 14.1156,77.0706 14.5,79.5C 18.0307,77.9622 21.6973,76.9622 25.5,76.5C 25.5,77.5 25.5,78.5 25.5,79.5C 24.5148,82.4556 23.5148,85.4556 22.5,88.5C 20.6696,86.9731 19.6696,87.4731 19.5,90C 19.528,91.0698 19.8614,91.9032 20.5,92.5C 19.1979,94.0276 17.5313,95.0276 15.5,95.5C 14.7093,93.6907 14.7093,91.6907 15.5,89.5C 10.8859,88.4199 6.38591,87.0866 2,85.5C 1.2917,86.3805 0.458367,87.0472 -0.5,87.5C -0.5,80.8333 -0.5,74.1667 -0.5,67.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f3439\",\n    d: \"M 315.5,67.5 C 314.599,71.2407 315.932,73.2407 319.5,73.5C 319.5,74.5 319.5,75.5 319.5,76.5C 317.071,76.1156 314.737,75.449 312.5,74.5C 313.088,79.1773 311.421,80.844 307.5,79.5C 307.5,80.5 307.5,81.5 307.5,82.5C 306.167,82.5 304.833,82.5 303.5,82.5C 303.5,84.1667 303.5,85.8333 303.5,87.5C 302.5,87.5 301.5,87.5 300.5,87.5C 300.5,86.1667 300.5,84.8333 300.5,83.5C 301.546,80.2722 302.212,76.9389 302.5,73.5C 305.453,73.8504 307.787,72.8504 309.5,70.5C 309.56,71.0431 309.893,71.3764 310.5,71.5C 312.815,70.8402 314.481,69.5069 315.5,67.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#383c3f\",\n    d: \"M 78.5,60.5 C 79.5,60.5 80.5,60.5 81.5,60.5C 83.1578,63.7713 83.8245,67.1046 83.5,70.5C 84.086,70.2907 84.586,69.9574 85,69.5C 85.3333,67.5 85.6667,65.5 86,63.5C 87.8778,62.9473 89.3778,61.9473 90.5,60.5C 91.5,60.5 92.5,60.5 93.5,60.5C 94.8333,61.5 96.1667,62.5 97.5,63.5C 96.0597,64.3629 94.7264,64.3629 93.5,63.5C 92.8333,64.1667 92.1667,64.8333 91.5,65.5C 90.2638,64.7542 88.9305,64.4208 87.5,64.5C 87.5,65.5 87.5,66.5 87.5,67.5C 88.675,67.281 89.675,67.6143 90.5,68.5C 91.1714,71.3367 91.1714,74.3367 90.5,77.5C 91.723,78.6139 93.0563,78.7805 94.5,78C 95.9647,76.107 97.6313,74.4404 99.5,73C 99.4084,70.1634 99.0751,67.3301 98.5,64.5C 100.1,65.252 101.6,66.252 103,67.5C 104.194,74.5092 103.361,81.1758 100.5,87.5C 98.9853,85.9178 97.3186,84.5845 95.5,83.5C 94.7659,82.2921 94.4326,80.9587 94.5,79.5C 93.5,79.5 92.5,79.5 91.5,79.5C 86.666,77.5861 82.3327,74.9194 78.5,71.5C 79.314,68.0221 79.314,64.3555 78.5,60.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5d6063\",\n    d: \"M 247.5,69.5 C 249.57,69.5514 251.403,68.8847 253,67.5C 254.3,68.7073 255.8,69.3739 257.5,69.5C 257.5,70.5 257.5,71.5 257.5,72.5C 255.076,72.1924 252.743,72.5258 250.5,73.5C 251.283,75.2882 252.616,76.2882 254.5,76.5C 256.833,76.4516 259.166,76.7849 261.5,77.5C 259.778,78.9999 258.112,80.6666 256.5,82.5C 255.596,83.209 255.263,84.209 255.5,85.5C 253.559,85.1307 251.725,84.464 250,83.5C 249.83,81.2852 249.163,79.2852 248,77.5C 247.326,78.5784 246.326,79.2451 245,79.5C 238.214,76.6703 231.214,74.337 224,72.5C 222.893,72.5852 221.893,72.9186 221,73.5C 210.37,70.7579 199.537,69.0912 188.5,68.5C 186.603,68.7282 185.27,69.7282 184.5,71.5C 179.979,71.3146 175.479,70.9812 171,70.5C 170.25,71.1258 169.416,71.6258 168.5,72C 169.728,72.779 170.728,73.779 171.5,75C 170.767,76.7659 170.433,78.5992 170.5,80.5C 168.058,80.8808 167.391,80.2141 168.5,78.5C 166.955,77.5481 165.288,77.2148 163.5,77.5C 163.706,75.4508 164.539,75.1175 166,76.5C 167.079,73.9373 167.579,71.2706 167.5,68.5C 162.133,69.0144 161.133,67.3478 164.5,63.5C 166.61,64.1166 168.777,63.7832 171,62.5C 172.049,64.1066 173.549,64.7733 175.5,64.5C 175.5,63.5 175.5,62.5 175.5,61.5C 188.804,60.5749 202.137,60.2416 215.5,60.5C 215.5,61.5 215.5,62.5 215.5,63.5C 216.833,63.5 218.167,63.5 219.5,63.5C 219.5,62.1667 219.5,60.8333 219.5,59.5C 220.833,59.5 222.167,59.5 223.5,59.5C 223.5,60.8333 223.5,62.1667 223.5,63.5C 228.175,62.9301 232.342,63.9301 236,66.5C 237.767,65.66 239.101,64.3266 240,62.5C 241.078,66.2996 243.578,68.6329 247.5,69.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3b4043\",\n    d: \"M 281.5,64.5 C 282.718,65.1614 284.051,65.8281 285.5,66.5C 282.988,67.7946 280.321,68.4613 277.5,68.5C 277.5,69.8333 277.5,71.1667 277.5,72.5C 275.058,72.6463 274.391,71.813 275.5,70C 273.911,68.4574 272.577,68.4574 271.5,70C 272.479,72.4333 273.145,74.9333 273.5,77.5C 271.952,77.1788 271.285,76.1788 271.5,74.5C 269.641,74.4609 268.308,75.2942 267.5,77C 265.527,77.4955 263.527,77.6621 261.5,77.5C 259.166,76.7849 256.833,76.4516 254.5,76.5C 256.144,75.0755 257.644,73.4089 259,71.5C 259.368,72.91 260.201,73.91 261.5,74.5C 264.031,72.8407 264.697,70.8407 263.5,68.5C 263.351,67.448 263.517,66.448 264,65.5C 265.011,66.3366 266.178,66.67 267.5,66.5C 267.5,65.5 267.5,64.5 267.5,63.5C 265.08,63.2924 262.747,63.6258 260.5,64.5C 257.763,62.7257 255.096,61.059 252.5,59.5C 252.5,58.5 252.5,57.5 252.5,56.5C 256.797,54.857 258.797,56.5237 258.5,61.5C 261.034,61.7409 262.7,60.7409 263.5,58.5C 265.484,58.3832 267.15,59.0499 268.5,60.5C 271.051,59.2555 273.384,57.7555 275.5,56C 273.892,55.342 272.725,55.842 272,57.5C 271.843,54.484 273.343,52.8173 276.5,52.5C 276.5,53.5 276.5,54.5 276.5,55.5C 278.5,55.5 280.5,55.5 282.5,55.5C 282.5,57.1667 282.5,58.8333 282.5,60.5C 281.5,60.5 280.5,60.5 279.5,60.5C 279.5,59.5 279.5,58.5 279.5,57.5C 278.5,57.5 277.5,57.5 276.5,57.5C 276.007,59.8056 275.674,62.139 275.5,64.5C 277.5,64.5 279.5,64.5 281.5,64.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#30383c\",\n    d: \"M 10.5,67.5 C 13.8333,67.5 17.1667,67.5 20.5,67.5C 19.9935,68.8589 18.9935,69.8589 17.5,70.5C 18.6685,72.2174 20.3352,72.8841 22.5,72.5C 22.5,73.5 22.5,74.5 22.5,75.5C 23.8333,75.5 25.1667,75.5 26.5,75.5C 26.7678,77.099 26.4345,78.4324 25.5,79.5C 25.5,78.5 25.5,77.5 25.5,76.5C 21.6973,76.9622 18.0307,77.9622 14.5,79.5C 14.1156,77.0706 13.449,74.7373 12.5,72.5C 10.1667,72.5 7.83333,72.5 5.5,72.5C 5.5,71.5 5.5,70.5 5.5,69.5C 3.5,68.8333 1.5,68.1667 -0.5,67.5C -0.5,67.1667 -0.5,66.8333 -0.5,66.5C 1.26241,66.6427 2.92908,66.3094 4.5,65.5C 6.32298,66.7472 8.32298,67.4139 10.5,67.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#282f33\",\n    d: \"M 20.5,67.5 C 24.4031,67.6908 28.0698,68.6908 31.5,70.5C 30.3061,73.4507 29.3061,76.4507 28.5,79.5C 25.9657,83.3063 24.9657,87.6396 25.5,92.5C 23.8333,92.5 22.1667,92.5 20.5,92.5C 19.8614,91.9032 19.528,91.0698 19.5,90C 19.6696,87.4731 20.6696,86.9731 22.5,88.5C 23.5148,85.4556 24.5148,82.4556 25.5,79.5C 26.4345,78.4324 26.7678,77.099 26.5,75.5C 25.1667,75.5 23.8333,75.5 22.5,75.5C 22.5,74.5 22.5,73.5 22.5,72.5C 20.3352,72.8841 18.6685,72.2174 17.5,70.5C 18.9935,69.8589 19.9935,68.8589 20.5,67.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3e464c\",\n    d: \"M 97.5,63.5 C 97.8333,63.5 98.1667,63.5 98.5,63.5C 98.5,63.8333 98.5,64.1667 98.5,64.5C 99.0751,67.3301 99.4084,70.1634 99.5,73C 97.6313,74.4404 95.9647,76.107 94.5,78C 93.0563,78.7805 91.723,78.6139 90.5,77.5C 91.1714,74.3367 91.1714,71.3367 90.5,68.5C 89.675,67.6143 88.675,67.281 87.5,67.5C 87.5,66.5 87.5,65.5 87.5,64.5C 88.9305,64.4208 90.2638,64.7542 91.5,65.5C 92.1667,64.8333 92.8333,64.1667 93.5,63.5C 94.7264,64.3629 96.0597,64.3629 97.5,63.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#272a2d\",\n    d: \"M 111.5,54.5 C 111.5,55.8333 111.5,57.1667 111.5,58.5C 110.835,61.8884 111.835,62.8884 114.5,61.5C 116.809,63.584 119.476,65.084 122.5,66C 124.134,66.4935 125.801,66.6602 127.5,66.5C 127.5,67.5 127.5,68.5 127.5,69.5C 128.833,69.5 130.167,69.5 131.5,69.5C 131.5,68.5 131.5,67.5 131.5,66.5C 133.099,66.7678 134.432,66.4345 135.5,65.5C 136.492,65.3284 137.158,65.6618 137.5,66.5C 136.909,67.1515 136.243,67.8182 135.5,68.5C 136.167,68.8333 136.833,69.1667 137.5,69.5C 139.5,68.8333 141.5,68.1667 143.5,67.5C 144.713,67.7472 145.38,68.4138 145.5,69.5C 142.778,71.602 141.111,74.4353 140.5,78C 138.939,78.1881 138.272,77.3547 138.5,75.5C 136.833,75.5 135.167,75.5 133.5,75.5C 129.858,77.7477 125.858,79.0811 121.5,79.5C 121.5,78.5 121.5,77.5 121.5,76.5C 124.278,76.9783 126.278,75.9783 127.5,73.5C 124.605,70.0468 121.105,67.3801 117,65.5C 114.496,65.6755 111.996,66.0089 109.5,66.5C 109.956,62.3357 110.622,58.3357 111.5,54.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#272c2f\",\n    d: \"M 55.5,71.5 C 56.1894,70.2264 57.0228,70.2264 58,71.5C 57.7374,72.9506 57.9041,74.2839 58.5,75.5C 59.3857,74.675 59.719,73.675 59.5,72.5C 61.288,72.2148 62.9547,72.5481 64.5,73.5C 63.7542,74.7362 63.4208,76.0695 63.5,77.5C 65.099,77.2322 66.4324,77.5655 67.5,78.5C 63.6478,78.5189 59.9812,77.6855 56.5,76C 56.1286,74.3967 55.7952,72.8967 55.5,71.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e5051\",\n    d: \"M 148.5,68.5 C 147.859,69.4822 147.193,70.4822 146.5,71.5C 146.833,71.8333 147.167,72.1667 147.5,72.5C 148.72,71.2889 149.887,71.2889 151,72.5C 152,71.8333 153,71.1667 154,70.5C 155.011,71.3366 156.178,71.67 157.5,71.5C 157.58,74.7814 156.913,77.7814 155.5,80.5C 154.304,78.0185 152.804,78.0185 151,80.5C 149.989,79.6634 148.822,79.33 147.5,79.5C 147.579,80.9305 147.246,82.2638 146.5,83.5C 141.208,84.4948 135.875,84.8282 130.5,84.5C 130.643,82.7376 130.309,81.0709 129.5,79.5C 131.188,78.4787 132.521,77.1454 133.5,75.5C 135.167,75.5 136.833,75.5 138.5,75.5C 138.272,77.3547 138.939,78.1881 140.5,78C 141.111,74.4353 142.778,71.602 145.5,69.5C 146.391,68.8902 147.391,68.5569 148.5,68.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3a4042\",\n    d: \"M 55.5,71.5 C 55.7952,72.8967 56.1286,74.3967 56.5,76C 59.9812,77.6855 63.6478,78.5189 67.5,78.5C 68.5,78.8333 69.1667,79.5 69.5,80.5C 71.4913,80.3177 73.4913,80.8177 75.5,82C 73.4845,82.4243 71.6512,83.2576 70,84.5C 68.7562,82.4236 66.9229,81.4236 64.5,81.5C 64.4208,82.9305 64.7542,84.2638 65.5,85.5C 63.2573,86.4742 60.924,86.8076 58.5,86.5C 58.719,85.325 58.3857,84.325 57.5,83.5C 54.2525,83.329 50.9191,83.6623 47.5,84.5C 46.8333,82.5 46.1667,80.5 45.5,78.5C 46.9778,78.762 48.3112,78.4287 49.5,77.5C 47.703,76.3049 46.703,74.6382 46.5,72.5C 48.8333,72.5 51.1667,72.5 53.5,72.5C 54.4916,72.6716 55.1583,72.3382 55.5,71.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#474a4b\",\n    d: \"M 291.5,76.5 C 293.39,76.2965 294.89,76.9632 296,78.5C 298.359,74.4232 299.859,74.7566 300.5,79.5C 299.448,79.3505 298.448,79.5172 297.5,80C 298.823,80.8159 299.489,81.9826 299.5,83.5C 299.762,84.9778 299.429,86.3112 298.5,87.5C 297.123,85.7105 296.123,83.7105 295.5,81.5C 294.672,80.5853 293.672,79.9186 292.5,79.5C 292.347,81.7956 292.013,84.129 291.5,86.5C 292.689,87.4287 294.022,87.762 295.5,87.5C 295.5,88.5 295.5,89.5 295.5,90.5C 292.672,88.5993 291.006,89.266 290.5,92.5C 290.919,95.3245 289.919,97.4912 287.5,99C 288.448,99.4828 289.448,99.6495 290.5,99.5C 291.152,103.56 289.485,105.56 285.5,105.5C 285.5,104.167 285.5,102.833 285.5,101.5C 286.298,97.8171 287.631,94.3171 289.5,91C 289.333,89.5 288.5,88.6667 287,88.5C 285.333,89.8333 283.667,89.8333 282,88.5C 281.055,88.9054 280.388,89.572 280,90.5C 279.503,88.1902 279.337,85.8568 279.5,83.5C 275.142,82.8462 271.309,83.8462 268,86.5C 265.204,84.8335 262.704,85.1668 260.5,87.5C 259.614,86.675 259.281,85.675 259.5,84.5C 257.821,84.7148 256.821,84.0481 256.5,82.5C 258.112,80.6666 259.778,78.9999 261.5,77.5C 263.527,77.6621 265.527,77.4955 267.5,77C 268.308,75.2942 269.641,74.4609 271.5,74.5C 271.285,76.1788 271.952,77.1788 273.5,77.5C 274.5,77.5 275.5,77.5 276.5,77.5C 276.5,76.5 276.5,75.5 276.5,74.5C 279.432,74.7157 282.098,74.049 284.5,72.5C 285.167,72.8333 285.833,73.1667 286.5,73.5C 285.132,75.637 284.132,77.9703 283.5,80.5C 282.749,79.624 282.249,78.624 282,77.5C 281.626,78.4162 281.126,79.2496 280.5,80C 281.509,82.1718 283.176,83.3385 285.5,83.5C 285.5,82.5 285.5,81.5 285.5,80.5C 286.5,80.5 287.5,80.5 288.5,80.5C 288.468,78.3812 289.468,77.0478 291.5,76.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#515558\",\n    d: \"M 117.5,79.5 C 113.545,80.9541 110.712,83.6208 109,87.5C 108.503,84.854 108.336,82.1873 108.5,79.5C 109.384,76.9768 110.218,74.3102 111,71.5C 113.57,73.8688 116.404,75.8688 119.5,77.5C 118.757,78.1818 118.091,78.8485 117.5,79.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#71716a\",\n    d: \"M 239.5,84.5 C 239.369,83.6236 239.702,82.9569 240.5,82.5C 242.071,83.3094 243.738,83.6427 245.5,83.5C 245.67,84.8221 245.337,85.9887 244.5,87C 246.769,87.7581 248.936,87.5914 251,86.5C 251.876,88.6355 253.376,89.9688 255.5,90.5C 256.167,90.5 256.833,90.5 257.5,90.5C 257.231,92.4286 257.731,94.0953 259,95.5C 260.724,92.8301 261.891,93.1634 262.5,96.5C 265.848,97.1975 267.848,99.1975 268.5,102.5C 267.504,102.414 266.671,102.748 266,103.5C 265.383,102.551 265.549,101.718 266.5,101C 257.781,100.546 250.614,97.0456 245,90.5C 242.667,93.5 241,93.1667 240,89.5C 239,90.8333 238,90.8333 237,89.5C 236.283,90.0442 235.783,90.7109 235.5,91.5C 230.696,89.6236 225.696,88.457 220.5,88C 221.711,87.1072 221.711,86.2739 220.5,85.5C 219.707,85.9312 218.873,86.2645 218,86.5C 213.406,84.732 208.572,83.732 203.5,83.5C 200.752,84.2463 198.086,84.2463 195.5,83.5C 193.617,84.0243 191.784,84.6909 190,85.5C 187.721,85.4503 185.388,85.1169 183,84.5C 180.433,85.5869 177.933,86.5869 175.5,87.5C 172.645,89.2501 169.311,90.0835 165.5,90C 164.167,90.6667 164.167,91.3333 165.5,92C 161.78,94.9849 157.447,96.1516 152.5,95.5C 152.539,94.4168 152.873,93.4168 153.5,92.5C 152.609,91.4104 151.609,91.4104 150.5,92.5C 149.167,91.5 149.167,90.5 150.5,89.5C 155.781,88.7139 161.115,88.2139 166.5,88C 168.066,87.3918 169.4,86.5585 170.5,85.5C 173.588,85.8034 175.254,84.4701 175.5,81.5C 180.774,82.0837 186.107,81.5837 191.5,80C 199.588,79.1721 207.588,79.6721 215.5,81.5C 216.167,82.8333 217.167,83.8333 218.5,84.5C 221.7,84.4336 224.867,84.4336 228,84.5C 230.53,87.7238 233.697,88.3905 237.5,86.5C 238.713,86.2528 239.38,85.5862 239.5,84.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c6d6a\",\n    d: \"M 239.5,84.5 C 239.38,85.5862 238.713,86.2528 237.5,86.5C 233.697,88.3905 230.53,87.7238 228,84.5C 224.867,84.4336 221.7,84.4336 218.5,84.5C 217.167,83.8333 216.167,82.8333 215.5,81.5C 207.588,79.6721 199.588,79.1721 191.5,80C 186.107,81.5837 180.774,82.0837 175.5,81.5C 173.922,80.9344 172.588,79.9344 171.5,78.5C 172.922,77.4528 174.422,77.4528 176,78.5C 189.406,74.8391 202.906,74.1724 216.5,76.5C 217.086,76.2907 217.586,75.9574 218,75.5C 218.833,77 220,78.1667 221.5,79C 224.167,79.3333 226.833,79.6667 229.5,80C 230.337,81.0113 230.67,82.1779 230.5,83.5C 233.518,83.7038 236.518,84.0371 239.5,84.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#303536\",\n    d: \"M 34.5,69.5 C 40.993,70.068 47.3264,71.068 53.5,72.5C 51.1667,72.5 48.8333,72.5 46.5,72.5C 46.703,74.6382 47.703,76.3049 49.5,77.5C 48.3112,78.4287 46.9778,78.762 45.5,78.5C 46.1667,80.5 46.8333,82.5 47.5,84.5C 50.9191,83.6623 54.2525,83.329 57.5,83.5C 58.3857,84.325 58.719,85.325 58.5,86.5C 60.924,86.8076 63.2573,86.4742 65.5,85.5C 64.7542,84.2638 64.4208,82.9305 64.5,81.5C 66.9229,81.4236 68.7562,82.4236 70,84.5C 71.6512,83.2576 73.4845,82.4243 75.5,82C 73.4913,80.8177 71.4913,80.3177 69.5,80.5C 70.2891,80.2172 70.9558,79.7172 71.5,79C 70.6921,77.2942 69.3588,76.4609 67.5,76.5C 67.5,75.5 67.5,74.5 67.5,73.5C 72.261,73.7935 76.9276,74.6269 81.5,76C 84.7631,78.4592 88.0964,80.6259 91.5,82.5C 92.6256,83.8583 92.6256,85.1916 91.5,86.5C 87.0948,84.2799 82.7614,84.6132 78.5,87.5C 77.1667,86.5 77.1667,85.5 78.5,84.5C 80.1173,84.3306 81.784,83.9972 83.5,83.5C 81.5128,81.6726 79.1795,80.6726 76.5,80.5C 76.5,81.5 76.5,82.5 76.5,83.5C 71.5776,83.1104 71.2443,84.2771 75.5,87C 73.4382,87.5639 71.6049,87.0639 70,85.5C 67.7084,86.9305 65.2084,87.7639 62.5,88C 63.6184,89.0736 64.6184,90.2402 65.5,91.5C 66.8745,90.2887 68.3745,89.2887 70,88.5C 72.7862,89.8675 75.6195,90.8675 78.5,91.5C 76.4727,91.3379 74.4727,91.5045 72.5,92C 68.029,93.5831 64.029,95.7498 60.5,98.5C 60.1667,98.5 59.8333,98.5 59.5,98.5C 57.7748,98.1575 57.2748,97.1575 58,95.5C 60.1761,95.0116 62.0094,94.0116 63.5,92.5C 60.4556,91.4852 57.4556,90.4852 54.5,89.5C 54.5,88.5 54.5,87.5 54.5,86.5C 52.0459,86.3205 49.8792,86.9872 48,88.5C 47.228,88.3552 46.5613,88.0219 46,87.5C 45.7978,89.2556 45.2978,90.9223 44.5,92.5C 43.8015,89.731 42.4682,87.3976 40.5,85.5C 41.3914,84.4104 42.3914,84.4104 43.5,85.5C 44.2699,81.1481 42.2699,79.1481 37.5,79.5C 37.0764,75.9882 36.0764,72.6548 34.5,69.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#444748\",\n    d: \"M 133.5,75.5 C 132.521,77.1454 131.188,78.4787 129.5,79.5C 130.309,81.0709 130.643,82.7376 130.5,84.5C 135.875,84.8282 141.208,84.4948 146.5,83.5C 147.246,82.2638 147.579,80.9305 147.5,79.5C 148.822,79.33 149.989,79.6634 151,80.5C 152.804,78.0185 154.304,78.0185 155.5,80.5C 155.567,81.9587 155.234,83.2921 154.5,84.5C 152.381,84.4677 151.048,85.4677 150.5,87.5C 142.813,87.5403 135.146,87.207 127.5,86.5C 128.85,85.3501 128.684,84.6834 127,84.5C 122.31,85.5741 117.977,87.2407 114,89.5C 112.833,89.3333 111.667,89.1667 110.5,89C 112.692,85.3078 115.692,82.4745 119.5,80.5C 119.043,79.7025 118.376,79.3691 117.5,79.5C 118.091,78.8485 118.757,78.1818 119.5,77.5C 116.404,75.8688 113.57,73.8688 111,71.5C 110.218,74.3102 109.384,76.9768 108.5,79.5C 108.5,77.8333 108.5,76.1667 108.5,74.5C 108.5,72.8333 108.5,71.1667 108.5,69.5C 109.404,68.791 109.737,67.791 109.5,66.5C 111.996,66.0089 114.496,65.6755 117,65.5C 121.105,67.3801 124.605,70.0468 127.5,73.5C 126.278,75.9783 124.278,76.9783 121.5,76.5C 121.5,77.5 121.5,78.5 121.5,79.5C 125.858,79.0811 129.858,77.7477 133.5,75.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#22262a\",\n    d: \"M 378.5,74.5 C 379.338,74.8417 379.672,75.5084 379.5,76.5C 379.942,80.1545 380.276,83.8212 380.5,87.5C 379.833,86.5 379.167,85.5 378.5,84.5C 378.5,81.1667 378.5,77.8333 378.5,74.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#79776c\",\n    d: \"M 235.5,91.5 C 241.695,94.6861 247.362,98.6861 252.5,103.5C 249.976,103.571 247.976,102.571 246.5,100.5C 245.274,101.363 243.94,101.363 242.5,100.5C 240.38,99.5494 238.714,98.0494 237.5,96C 235.527,95.5045 233.527,95.3379 231.5,95.5C 231.5,94.5 231.5,93.5 231.5,92.5C 225.507,91.1096 219.507,89.6096 213.5,88C 214.167,87.6667 214.833,87.3333 215.5,87C 208.061,86.0899 200.728,86.5899 193.5,88.5C 192.259,87.9628 191.092,87.2961 190,86.5C 185.166,87.9343 180.332,88.2676 175.5,87.5C 177.933,86.5869 180.433,85.5869 183,84.5C 185.388,85.1169 187.721,85.4503 190,85.5C 191.784,84.6909 193.617,84.0243 195.5,83.5C 198.086,84.2463 200.752,84.2463 203.5,83.5C 208.572,83.732 213.406,84.732 218,86.5C 218.873,86.2645 219.707,85.9312 220.5,85.5C 221.711,86.2739 221.711,87.1072 220.5,88C 225.696,88.457 230.696,89.6236 235.5,91.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c5152\",\n    d: \"M 328.5,75.5 C 329.74,76.973 330.74,78.6396 331.5,80.5C 333.167,81.1667 334.833,81.8333 336.5,82.5C 335.995,83.9185 334.995,84.5852 333.5,84.5C 331.824,85.1834 331.157,86.5168 331.5,88.5C 329.712,88.2148 328.045,88.5481 326.5,89.5C 329.163,90.1924 331.663,91.1924 334,92.5C 336.48,91.3981 336.98,92.0647 335.5,94.5C 332.995,93.5033 330.328,93.5033 327.5,94.5C 327.719,95.675 327.386,96.675 326.5,97.5C 324.684,96.2651 323.017,96.2651 321.5,97.5C 320.624,97.6309 319.957,97.2975 319.5,96.5C 320.325,95.6143 321.325,95.281 322.5,95.5C 322.78,92.6118 321.447,91.1118 318.5,91C 319.693,86.4259 318.359,85.5926 314.5,88.5C 313.817,88.1373 313.15,87.8039 312.5,87.5C 309.266,86.9114 307.933,84.9114 308.5,81.5C 310.873,82.2943 313.206,83.2943 315.5,84.5C 317.631,81.8051 319.631,78.9718 321.5,76C 323.828,76.8037 326.161,76.6371 328.5,75.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#505450\",\n    d: \"M 256.5,82.5 C 256.821,84.0481 257.821,84.7148 259.5,84.5C 259.281,85.675 259.614,86.675 260.5,87.5C 262.704,85.1668 265.204,84.8335 268,86.5C 271.309,83.8462 275.142,82.8462 279.5,83.5C 279.337,85.8568 279.503,88.1902 280,90.5C 280.388,89.572 281.055,88.9054 282,88.5C 283.667,89.8333 285.333,89.8333 287,88.5C 288.5,88.6667 289.333,89.5 289.5,91C 287.631,94.3171 286.298,97.8171 285.5,101.5C 282.744,102.254 280.078,102.254 277.5,101.5C 278.007,100.141 279.007,99.1411 280.5,98.5C 279.96,97.2519 279.293,96.0852 278.5,95C 274.852,94.9379 271.185,95.1046 267.5,95.5C 266.805,93.0219 265.305,91.0219 263,89.5C 261.301,90.4061 259.467,90.7394 257.5,90.5C 256.833,90.5 256.167,90.5 255.5,90.5C 255.5,88.8333 255.5,87.1667 255.5,85.5C 255.263,84.209 255.596,83.209 256.5,82.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#474c4e\",\n    d: \"M 15.5,95.5 C 16.5,96.5 17.5,97.5 18.5,98.5C 15.4121,98.6227 12.7454,97.6227 10.5,95.5C 9.81327,97.2744 8.97993,98.9411 8,100.5C 5.28186,99.9874 2.44853,99.9874 -0.5,100.5C -0.5,96.1667 -0.5,91.8333 -0.5,87.5C 0.458367,87.0472 1.2917,86.3805 2,85.5C 6.38591,87.0866 10.8859,88.4199 15.5,89.5C 14.7093,91.6907 14.7093,93.6907 15.5,95.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#807c6d\",\n    d: \"M 242.5,100.5 C 246.148,104.479 250.148,108.145 254.5,111.5C 254.53,112.497 254.03,113.164 253,113.5C 251.433,112.144 249.6,111.477 247.5,111.5C 245.5,111.5 243.5,111.5 241.5,111.5C 240.833,111.5 240.167,111.5 239.5,111.5C 239.759,108.52 238.426,106.687 235.5,106C 235.957,105.586 236.291,105.086 236.5,104.5C 232.666,102.901 229.666,100.234 227.5,96.5C 217.419,94.0504 207.252,92.0504 197,90.5C 191.794,91.1153 186.628,91.9486 181.5,93C 179.934,93.6082 178.6,94.4415 177.5,95.5C 176.833,95.5 176.167,95.5 175.5,95.5C 171.092,97.5567 167.092,100.39 163.5,104C 161.482,104.505 159.482,105.005 157.5,105.5C 156.618,103.916 155.785,102.249 155,100.5C 153.92,102.553 153.086,104.72 152.5,107C 149.776,107.27 147.109,107.77 144.5,108.5C 143.478,108.145 142.811,107.478 142.5,106.5C 144.812,105.68 147.146,104.847 149.5,104C 148.941,103.275 148.608,102.442 148.5,101.5C 149.689,99.557 150.689,97.557 151.5,95.5C 151.833,95.5 152.167,95.5 152.5,95.5C 157.447,96.1516 161.78,94.9849 165.5,92C 164.167,91.3333 164.167,90.6667 165.5,90C 169.311,90.0835 172.645,89.2501 175.5,87.5C 180.332,88.2676 185.166,87.9343 190,86.5C 191.092,87.2961 192.259,87.9628 193.5,88.5C 200.728,86.5899 208.061,86.0899 215.5,87C 214.833,87.3333 214.167,87.6667 213.5,88C 219.507,89.6096 225.507,91.1096 231.5,92.5C 231.5,93.5 231.5,94.5 231.5,95.5C 233.527,95.3379 235.527,95.5045 237.5,96C 238.714,98.0494 240.38,99.5494 242.5,100.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3a3e3f\",\n    d: \"M 328.5,71.5 C 328.5,72.8333 328.5,74.1667 328.5,75.5C 326.161,76.6371 323.828,76.8037 321.5,76C 319.631,78.9718 317.631,81.8051 315.5,84.5C 313.206,83.2943 310.873,82.2943 308.5,81.5C 307.933,84.9114 309.266,86.9114 312.5,87.5C 312.66,89.1992 312.494,90.8659 312,92.5C 310.649,90.981 309.149,89.6477 307.5,88.5C 306.548,90.0453 306.215,91.712 306.5,93.5C 303.5,92.8333 300.5,92.1667 297.5,91.5C 297.799,95.0649 296.465,96.3982 293.5,95.5C 293.5,94.5 293.5,93.5 293.5,92.5C 292.5,92.5 291.5,92.5 290.5,92.5C 291.006,89.266 292.672,88.5993 295.5,90.5C 295.5,89.5 295.5,88.5 295.5,87.5C 294.022,87.762 292.689,87.4287 291.5,86.5C 292.013,84.129 292.347,81.7956 292.5,79.5C 293.672,79.9186 294.672,80.5853 295.5,81.5C 296.123,83.7105 297.123,85.7105 298.5,87.5C 299.429,86.3112 299.762,84.9778 299.5,83.5C 299.833,83.5 300.167,83.5 300.5,83.5C 300.5,84.8333 300.5,86.1667 300.5,87.5C 301.5,87.5 302.5,87.5 303.5,87.5C 303.5,85.8333 303.5,84.1667 303.5,82.5C 304.833,82.5 306.167,82.5 307.5,82.5C 307.5,81.5 307.5,80.5 307.5,79.5C 311.421,80.844 313.088,79.1773 312.5,74.5C 314.737,75.449 317.071,76.1156 319.5,76.5C 319.5,75.5 319.5,74.5 319.5,73.5C 319.192,71.076 319.526,68.7427 320.5,66.5C 321.452,68.0453 321.785,69.712 321.5,71.5C 323.833,71.5 326.167,71.5 328.5,71.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#373735\",\n    d: \"M 108.5,74.5 C 108.5,76.1667 108.5,77.8333 108.5,79.5C 108.336,82.1873 108.503,84.854 109,87.5C 110.712,83.6208 113.545,80.9541 117.5,79.5C 118.376,79.3691 119.043,79.7025 119.5,80.5C 115.692,82.4745 112.692,85.3078 110.5,89C 111.667,89.1667 112.833,89.3333 114,89.5C 117.977,87.2407 122.31,85.5741 127,84.5C 128.684,84.6834 128.85,85.3501 127.5,86.5C 126.355,87.7927 126.689,88.9593 128.5,90C 122.023,88.8271 116.69,90.8271 112.5,96C 112.808,97.4595 113.475,98.6261 114.5,99.5C 114.649,100.552 114.483,101.552 114,102.5C 109.953,106.205 108.453,110.872 109.5,116.5C 108.593,111.178 107.926,105.678 107.5,100C 107.305,97.6477 107.972,95.6477 109.5,94C 109,93.5 108.5,93 108,92.5C 107.181,86.3188 107.347,80.3188 108.5,74.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#50514e\",\n    d: \"M 127.5,86.5 C 135.146,87.207 142.813,87.5403 150.5,87.5C 147.685,89.1621 144.685,89.6621 141.5,89C 140.233,90.7959 140.233,92.6293 141.5,94.5C 138.943,94.7822 136.277,94.9489 133.5,95C 132.667,95.8333 131.833,96.6667 131,97.5C 130.505,95.5273 130.338,93.5273 130.5,91.5C 128.076,91.1924 125.743,91.5258 123.5,92.5C 121.467,94.8679 119.133,96.8679 116.5,98.5C 115.508,98.3284 114.842,98.6618 114.5,99.5C 113.475,98.6261 112.808,97.4595 112.5,96C 116.69,90.8271 122.023,88.8271 128.5,90C 126.689,88.9593 126.355,87.7927 127.5,86.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#474b4a\",\n    d: \"M 353.5,81.5 C 356.332,88.6417 358.665,95.975 360.5,103.5C 359.356,101.9 358.189,100.233 357,98.5C 356.667,99.5 356.333,100.5 356,101.5C 354.398,99.7373 353.898,97.904 354.5,96C 353.572,94.0245 352.405,92.1911 351,90.5C 346.942,90.9021 342.775,90.9021 338.5,90.5C 338.5,92.1667 338.5,93.8333 338.5,95.5C 337.209,95.7373 336.209,95.404 335.5,94.5C 336.98,92.0647 336.48,91.3981 334,92.5C 331.663,91.1924 329.163,90.1924 326.5,89.5C 328.045,88.5481 329.712,88.2148 331.5,88.5C 331.157,86.5168 331.824,85.1834 333.5,84.5C 332.438,85.5754 332.438,86.5754 333.5,87.5C 336.785,86.029 339.618,86.6956 342,89.5C 343.371,88.4188 344.871,87.5855 346.5,87C 346.167,86.6667 345.833,86.3333 345.5,86C 346.357,85.3109 347.023,84.4776 347.5,83.5C 346.41,82.3914 346.41,81.3914 347.5,80.5C 349.783,79.15 351.783,79.4833 353.5,81.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#222423\",\n    d: \"M 91.5,79.5 C 92.5,79.5 93.5,79.5 94.5,79.5C 94.4326,80.9587 94.7659,82.2921 95.5,83.5C 94.4265,84.2506 94.2599,85.2506 95,86.5C 96.6097,88.731 98.443,90.731 100.5,92.5C 100.137,93.1835 99.8039,93.8501 99.5,94.5C 98.8333,94.5 98.1667,94.5 97.5,94.5C 94.5,93.1667 91.5,93.1667 88.5,94.5C 86.283,93.6314 83.9496,93.298 81.5,93.5C 81.1667,93.5 80.8333,93.5 80.5,93.5C 80.1667,92.5 79.5,91.8333 78.5,91.5C 75.6195,90.8675 72.7862,89.8675 70,88.5C 68.3745,89.2887 66.8745,90.2887 65.5,91.5C 64.6184,90.2402 63.6184,89.0736 62.5,88C 65.2084,87.7639 67.7084,86.9305 70,85.5C 71.6049,87.0639 73.4382,87.5639 75.5,87C 71.2443,84.2771 71.5776,83.1104 76.5,83.5C 76.5,82.5 76.5,81.5 76.5,80.5C 79.1795,80.6726 81.5128,81.6726 83.5,83.5C 81.784,83.9972 80.1173,84.3306 78.5,84.5C 77.1667,85.5 77.1667,86.5 78.5,87.5C 82.7614,84.6132 87.0948,84.2799 91.5,86.5C 92.6256,85.1916 92.6256,83.8583 91.5,82.5C 92.3764,82.6309 93.0431,82.2975 93.5,81.5C 92.7573,80.8182 92.0906,80.1515 91.5,79.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4a4a4d\",\n    d: \"M 372.5,90.5 C 373.51,93.928 374.51,97.2613 375.5,100.5C 375.595,106.795 374.595,106.795 372.5,100.5C 372.241,97.7282 371.241,95.3949 369.5,93.5C 368.94,89.8068 368.273,86.1402 367.5,82.5C 367.5,81.5 367.5,80.5 367.5,79.5C 368.833,79.5 370.167,79.5 371.5,79.5C 371.185,83.3714 371.518,87.0381 372.5,90.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#414647\",\n    d: \"M 34.5,69.5 C 36.0764,72.6548 37.0764,75.9882 37.5,79.5C 42.2699,79.1481 44.2699,81.1481 43.5,85.5C 42.3914,84.4104 41.3914,84.4104 40.5,85.5C 42.4682,87.3976 43.8015,89.731 44.5,92.5C 45.2978,90.9223 45.7978,89.2556 46,87.5C 46.5613,88.0219 47.228,88.3552 48,88.5C 49.8792,86.9872 52.0459,86.3205 54.5,86.5C 54.5,87.5 54.5,88.5 54.5,89.5C 57.4556,90.4852 60.4556,91.4852 63.5,92.5C 62.0094,94.0116 60.1761,95.0116 58,95.5C 57.2748,97.1575 57.7748,98.1575 59.5,98.5C 57.2842,99.8163 55.2842,101.483 53.5,103.5C 50.4679,102.988 49.3013,101.322 50,98.5C 51.6453,98.3068 53.4787,98.1402 55.5,98C 53.1667,96.1667 50.8333,94.3333 48.5,92.5C 46.9291,93.3094 45.2624,93.6427 43.5,93.5C 43.5,94.5 43.5,95.5 43.5,96.5C 44.8333,96.5 46.1667,96.5 47.5,96.5C 47.5,97.8333 47.5,99.1667 47.5,100.5C 45.6096,100.703 44.1096,100.037 43,98.5C 42.3946,100.481 41.3946,100.815 40,99.5C 34.6306,101.203 29.1306,102.537 23.5,103.5C 22.2867,103.253 21.62,102.586 21.5,101.5C 22.6118,99.4006 23.2785,97.0673 23.5,94.5C 27.1667,94.5 30.8333,94.5 34.5,94.5C 34.5,93.5 34.5,92.5 34.5,91.5C 32.5714,91.7692 30.9047,91.2692 29.5,90C 32.38,89.3159 35.2134,89.4826 38,90.5C 38.5,90.1667 39,89.8333 39.5,89.5C 37.2303,88.4066 36.897,86.9066 38.5,85C 37.1723,82.8335 35.5056,81.0001 33.5,79.5C 32.5713,80.6888 32.238,82.0222 32.5,83.5C 33.5,83.5 34.5,83.5 35.5,83.5C 35.5,84.5 35.5,85.5 35.5,86.5C 32.5,86.8333 31.1667,85.5 31.5,82.5C 30.5,82.5 29.5,82.5 28.5,82.5C 28.5,81.5 28.5,80.5 28.5,79.5C 29.3061,76.4507 30.3061,73.4507 31.5,70.5C 32.209,69.596 33.209,69.2627 34.5,69.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d4f4c\",\n    d: \"M 18.5,98.5 C 19.5,99.5 20.5,100.5 21.5,101.5C 17.4391,103.174 16.7724,105.674 19.5,109C 18.9747,109.692 18.3081,110.192 17.5,110.5C 14.6669,110.418 11.6669,110.252 8.5,110C 7.67209,109.085 6.67209,108.419 5.5,108C 8.12079,107.094 7.95413,106.594 5,106.5C 2.04587,106.594 1.87921,107.094 4.5,108C 3.21075,109.802 1.54408,110.969 -0.5,111.5C -0.5,107.833 -0.5,104.167 -0.5,100.5C 2.44853,99.9874 5.28186,99.9874 8,100.5C 8.97993,98.9411 9.81327,97.2744 10.5,95.5C 12.7454,97.6227 15.4121,98.6227 18.5,98.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#484945\",\n    d: \"M 321.5,97.5 C 322.833,98.5 322.833,99.5 321.5,100.5C 318.67,100.694 316.004,101.361 313.5,102.5C 312.817,98.5204 310.483,97.0204 306.5,98C 305.577,100.041 305.244,102.208 305.5,104.5C 303.282,104.614 301.282,105.28 299.5,106.5C 297.952,106.821 297.285,107.821 297.5,109.5C 295.097,109.552 292.764,109.219 290.5,108.5C 291.749,106.33 292.749,103.996 293.5,101.5C 293.278,99.9446 292.611,98.6113 291.5,97.5C 291.855,96.4777 292.522,95.811 293.5,95.5C 296.465,96.3982 297.799,95.0649 297.5,91.5C 300.5,92.1667 303.5,92.8333 306.5,93.5C 306.215,91.712 306.548,90.0453 307.5,88.5C 309.149,89.6477 310.649,90.981 312,92.5C 312.494,90.8659 312.66,89.1992 312.5,87.5C 313.15,87.8039 313.817,88.1373 314.5,88.5C 318.359,85.5926 319.693,86.4259 318.5,91C 321.447,91.1118 322.78,92.6118 322.5,95.5C 321.325,95.281 320.325,95.6143 319.5,96.5C 319.957,97.2975 320.624,97.6309 321.5,97.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#575954\",\n    d: \"M 360.5,103.5 C 361.883,105.978 362.883,108.645 363.5,111.5C 358.347,111.682 353.014,111.682 347.5,111.5C 345.183,109.035 342.85,106.535 340.5,104C 335.832,103.887 331.499,102.72 327.5,100.5C 325.327,101.582 323.327,101.582 321.5,100.5C 322.833,99.5 322.833,98.5 321.5,97.5C 323.017,96.2651 324.684,96.2651 326.5,97.5C 327.386,96.675 327.719,95.675 327.5,94.5C 330.328,93.5033 332.995,93.5033 335.5,94.5C 336.209,95.404 337.209,95.7373 338.5,95.5C 338.5,93.8333 338.5,92.1667 338.5,90.5C 342.775,90.9021 346.942,90.9021 351,90.5C 352.405,92.1911 353.572,94.0245 354.5,96C 353.898,97.904 354.398,99.7373 356,101.5C 356.333,100.5 356.667,99.5 357,98.5C 358.189,100.233 359.356,101.9 360.5,103.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#62645d\",\n    d: \"M 277.5,101.5 C 276.193,100.847 274.86,100.18 273.5,99.5C 272.06,100.952 270.394,101.952 268.5,102.5C 267.848,99.1975 265.848,97.1975 262.5,96.5C 261.891,93.1634 260.724,92.8301 259,95.5C 257.731,94.0953 257.231,92.4286 257.5,90.5C 259.467,90.7394 261.301,90.4061 263,89.5C 265.305,91.0219 266.805,93.0219 267.5,95.5C 271.185,95.1046 274.852,94.9379 278.5,95C 279.293,96.0852 279.96,97.2519 280.5,98.5C 279.007,99.1411 278.007,100.141 277.5,101.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#363b3c\",\n    d: \"M 28.5,79.5 C 28.5,80.5 28.5,81.5 28.5,82.5C 29.5,82.5 30.5,82.5 31.5,82.5C 31.1667,85.5 32.5,86.8333 35.5,86.5C 35.5,85.5 35.5,84.5 35.5,83.5C 34.5,83.5 33.5,83.5 32.5,83.5C 32.238,82.0222 32.5713,80.6888 33.5,79.5C 35.5056,81.0001 37.1723,82.8335 38.5,85C 36.897,86.9066 37.2303,88.4066 39.5,89.5C 39,89.8333 38.5,90.1667 38,90.5C 35.2134,89.4826 32.38,89.3159 29.5,90C 30.9047,91.2692 32.5714,91.7692 34.5,91.5C 34.5,92.5 34.5,93.5 34.5,94.5C 30.8333,94.5 27.1667,94.5 23.5,94.5C 23.2785,97.0673 22.6118,99.4006 21.5,101.5C 20.5,100.5 19.5,99.5 18.5,98.5C 17.5,97.5 16.5,96.5 15.5,95.5C 17.5313,95.0276 19.1979,94.0276 20.5,92.5C 22.1667,92.5 23.8333,92.5 25.5,92.5C 24.9657,87.6396 25.9657,83.3063 28.5,79.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#555551\",\n    d: \"M 97.5,94.5 C 100.905,99.1542 101.238,103.821 98.5,108.5C 97.6016,107.842 96.6016,107.176 95.5,106.5C 96.7111,105.28 96.7111,104.113 95.5,103C 93.6332,102.289 92.1332,102.789 91,104.5C 90.0567,101.155 89.2234,97.8221 88.5,94.5C 91.5,93.1667 94.5,93.1667 97.5,94.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#61615c\",\n    d: \"M 170.5,85.5 C 169.4,86.5585 168.066,87.3918 166.5,88C 161.115,88.2139 155.781,88.7139 150.5,89.5C 149.167,90.5 149.167,91.5 150.5,92.5C 151.609,91.4104 152.609,91.4104 153.5,92.5C 152.873,93.4168 152.539,94.4168 152.5,95.5C 152.167,95.5 151.833,95.5 151.5,95.5C 149.077,95.4236 147.244,96.4236 146,98.5C 145.098,98.2568 144.265,97.9234 143.5,97.5C 141.661,98.7525 139.828,98.7525 138,97.5C 134.884,99.8066 131.384,101.14 127.5,101.5C 127.659,98.8129 126.825,96.4796 125,94.5C 124.502,97.8168 124.335,101.15 124.5,104.5C 121.843,104.162 119.51,104.829 117.5,106.5C 116.52,103.914 116.187,101.247 116.5,98.5C 119.133,96.8679 121.467,94.8679 123.5,92.5C 125.743,91.5258 128.076,91.1924 130.5,91.5C 130.338,93.5273 130.505,95.5273 131,97.5C 131.833,96.6667 132.667,95.8333 133.5,95C 136.277,94.9489 138.943,94.7822 141.5,94.5C 140.233,92.6293 140.233,90.7959 141.5,89C 144.685,89.6621 147.685,89.1621 150.5,87.5C 151.048,85.4677 152.381,84.4677 154.5,84.5C 156.167,84.5 157.833,84.5 159.5,84.5C 157.372,85.2805 157.205,86.2805 159,87.5C 160.11,85.9632 161.61,85.2965 163.5,85.5C 163.343,84.1266 163.51,82.7932 164,81.5C 167.076,82.2883 170.242,82.7883 173.5,83C 172.429,83.8518 171.429,84.6851 170.5,85.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#918670\",\n    d: \"M 239.5,111.5 C 237.692,111.491 236.025,111.991 234.5,113C 236.742,114.007 236.408,114.841 233.5,115.5C 228.509,111.507 224.176,106.84 220.5,101.5C 219.942,100.21 218.942,99.3768 217.5,99C 214.041,98.209 210.707,97.209 207.5,96C 197.506,95.5002 187.506,95.3335 177.5,95.5C 178.6,94.4415 179.934,93.6082 181.5,93C 186.628,91.9486 191.794,91.1153 197,90.5C 207.252,92.0504 217.419,94.0504 227.5,96.5C 229.666,100.234 232.666,102.901 236.5,104.5C 236.291,105.086 235.957,105.586 235.5,106C 238.426,106.687 239.759,108.52 239.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#484b46\",\n    d: \"M 78.5,91.5 C 79.5,91.8333 80.1667,92.5 80.5,93.5C 78.9582,94.3007 77.2915,94.634 75.5,94.5C 74.7871,97.2371 74.7871,99.9037 75.5,102.5C 78.6157,104.009 81.2824,103.509 83.5,101C 82.552,100.517 81.552,100.351 80.5,100.5C 80.298,98.0504 80.6314,95.717 81.5,93.5C 83.9496,93.298 86.283,93.6314 88.5,94.5C 89.2234,97.8221 90.0567,101.155 91,104.5C 92.1332,102.789 93.6332,102.289 95.5,103C 96.7111,104.113 96.7111,105.28 95.5,106.5C 96.6016,107.176 97.6016,107.842 98.5,108.5C 97.1266,108.343 95.7932,108.51 94.5,109C 95.056,109.383 95.3893,109.883 95.5,110.5C 95.1667,110.5 94.8333,110.5 94.5,110.5C 88.7538,106.178 82.5871,105.511 76,108.5C 73.8154,108.079 71.6487,107.579 69.5,107C 68.0577,106.623 67.0577,105.79 66.5,104.5C 67.3351,103.057 68.6684,102.057 70.5,101.5C 67.1005,100.552 63.7672,99.5515 60.5,98.5C 64.029,95.7498 68.029,93.5831 72.5,92C 74.4727,91.5045 76.4727,91.3379 78.5,91.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#575652\",\n    d: \"M 110.5,94.5 C 111.921,97.5082 111.754,100.508 110,103.5C 107.916,100.267 108.082,97.267 110.5,94.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8b836e\",\n    d: \"M 175.5,95.5 C 175.785,97.288 175.452,98.9547 174.5,100.5C 170.897,103.812 166.897,105.645 162.5,106C 160.323,107.186 159.323,109.019 159.5,111.5C 154.481,110.643 150.815,112.309 148.5,116.5C 148.062,115.494 147.396,115.494 146.5,116.5C 146.119,115.069 145.119,114.236 143.5,114C 148.728,111.895 153.395,109.062 157.5,105.5C 159.482,105.005 161.482,104.505 163.5,104C 167.092,100.39 171.092,97.5567 175.5,95.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d2d2d\",\n    d: \"M 369.5,93.5 C 371.241,95.3949 372.241,97.7282 372.5,100.5C 370.759,98.6051 369.759,96.2718 369.5,93.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5d5f58\",\n    d: \"M 321.5,100.5 C 323.327,101.582 325.327,101.582 327.5,100.5C 331.499,102.72 335.832,103.887 340.5,104C 342.85,106.535 345.183,109.035 347.5,111.5C 347.953,112.458 348.619,113.292 349.5,114C 348.552,114.483 347.552,114.649 346.5,114.5C 341.361,111.088 336.028,110.755 330.5,113.5C 323.659,111.848 316.659,110.848 309.5,110.5C 307.765,111.057 306.098,111.39 304.5,111.5C 303.494,111.062 303.494,110.396 304.5,109.5C 302.456,108.935 300.79,107.935 299.5,106.5C 301.282,105.28 303.282,104.614 305.5,104.5C 305.244,102.208 305.577,100.041 306.5,98C 310.483,97.0204 312.817,98.5204 313.5,102.5C 316.004,101.361 318.67,100.694 321.5,100.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#565a55\",\n    d: \"M 80.5,93.5 C 80.8333,93.5 81.1667,93.5 81.5,93.5C 80.6314,95.717 80.298,98.0504 80.5,100.5C 81.552,100.351 82.552,100.517 83.5,101C 81.2824,103.509 78.6157,104.009 75.5,102.5C 74.7871,99.9037 74.7871,97.2371 75.5,94.5C 77.2915,94.634 78.9582,94.3007 80.5,93.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f201e\",\n    d: \"M 380.5,87.5 C 381.337,92.1959 382.337,96.8626 383.5,101.5C 384.503,108.172 385.503,114.839 386.5,121.5C 381.986,110.74 379.986,99.4067 380.5,87.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6f6f64\",\n    d: \"M 268.5,102.5 C 270.394,101.952 272.06,100.952 273.5,99.5C 274.86,100.18 276.193,100.847 277.5,101.5C 278.479,103.145 279.812,104.479 281.5,105.5C 279.292,107.763 279.959,109.429 283.5,110.5C 285.577,109.063 287.91,108.396 290.5,108.5C 290.715,110.179 290.048,111.179 288.5,111.5C 284.566,111.979 280.899,111.312 277.5,109.5C 275.119,111.392 272.453,111.892 269.5,111C 266.6,107.209 262.933,105.709 258.5,106.5C 256.929,104.585 254.929,103.585 252.5,103.5C 247.362,98.6861 241.695,94.6861 235.5,91.5C 235.783,90.7109 236.283,90.0442 237,89.5C 238,90.8333 239,90.8333 240,89.5C 241,93.1667 242.667,93.5 245,90.5C 250.614,97.0456 257.781,100.546 266.5,101C 265.549,101.718 265.383,102.551 266,103.5C 266.671,102.748 267.504,102.414 268.5,102.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#535550\",\n    d: \"M 59.5,98.5 C 59.8333,98.5 60.1667,98.5 60.5,98.5C 63.7672,99.5515 67.1005,100.552 70.5,101.5C 68.6684,102.057 67.3351,103.057 66.5,104.5C 60.8503,103.825 55.6836,104.825 51,107.5C 49.3943,105.016 47.8943,105.016 46.5,107.5C 45.5745,106.359 44.7412,106.359 44,107.5C 42.6841,104.972 41.5174,104.972 40.5,107.5C 39.6721,106.585 38.6721,105.919 37.5,105.5C 35.9355,106.769 34.2688,107.936 32.5,109C 33.1667,109.667 33.8333,110.333 34.5,111C 32.0995,111.186 29.7662,111.686 27.5,112.5C 26.5331,113.984 25.1998,114.984 23.5,115.5C 21.8624,116.657 20.1957,117.824 18.5,119C 20.1667,119.333 21.8333,119.667 23.5,120C 20.6529,120.944 18.1529,120.444 16,118.5C 15.586,118.957 15.086,119.291 14.5,119.5C 9.60794,118.097 4.60794,117.43 -0.5,117.5C -0.5,115.5 -0.5,113.5 -0.5,111.5C 1.54408,110.969 3.21075,109.802 4.5,108C 1.87921,107.094 2.04587,106.594 5,106.5C 7.95413,106.594 8.12079,107.094 5.5,108C 6.67209,108.419 7.67209,109.085 8.5,110C 11.6669,110.252 14.6669,110.418 17.5,110.5C 18.3081,110.192 18.9747,109.692 19.5,109C 16.7724,105.674 17.4391,103.174 21.5,101.5C 21.62,102.586 22.2867,103.253 23.5,103.5C 29.1306,102.537 34.6306,101.203 40,99.5C 41.3946,100.815 42.3946,100.481 43,98.5C 44.1096,100.037 45.6096,100.703 47.5,100.5C 47.5,99.1667 47.5,97.8333 47.5,96.5C 46.1667,96.5 44.8333,96.5 43.5,96.5C 43.5,95.5 43.5,94.5 43.5,93.5C 45.2624,93.6427 46.9291,93.3094 48.5,92.5C 50.8333,94.3333 53.1667,96.1667 55.5,98C 53.4787,98.1402 51.6453,98.3068 50,98.5C 49.3013,101.322 50.4679,102.988 53.5,103.5C 55.2842,101.483 57.2842,99.8163 59.5,98.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#595a54\",\n    d: \"M 66.5,104.5 C 67.0577,105.79 68.0577,106.623 69.5,107C 71.6487,107.579 73.8154,108.079 76,108.5C 82.5871,105.511 88.7538,106.178 94.5,110.5C 93.9232,112.652 92.7565,112.985 91,111.5C 90.5065,113.134 90.3398,114.801 90.5,116.5C 87.2136,116.071 84.0469,116.071 81,116.5C 80.0475,114.408 78.7141,114.075 77,115.5C 75,114.833 73,114.167 71,113.5C 70.1495,116.612 68.9828,116.946 67.5,114.5C 63.6757,113.103 60.009,113.436 56.5,115.5C 54.6769,114.509 53.1769,113.176 52,111.5C 51.1667,112.5 50.3333,113.5 49.5,114.5C 48.1987,113.522 47.032,113.855 46,115.5C 40.7536,113.87 36.587,114.536 33.5,117.5C 32.0505,116.72 30.5505,116.054 29,115.5C 26.9707,116.403 25.1374,116.403 23.5,115.5C 25.1998,114.984 26.5331,113.984 27.5,112.5C 29.7662,111.686 32.0995,111.186 34.5,111C 33.8333,110.333 33.1667,109.667 32.5,109C 34.2688,107.936 35.9355,106.769 37.5,105.5C 38.6721,105.919 39.6721,106.585 40.5,107.5C 41.5174,104.972 42.6841,104.972 44,107.5C 44.7412,106.359 45.5745,106.359 46.5,107.5C 47.8943,105.016 49.3943,105.016 51,107.5C 55.6836,104.825 60.8503,103.825 66.5,104.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ba9d79\",\n    d: \"M 219.5,111.5 C 216.969,109.184 213.969,107.35 210.5,106C 203.867,105.826 197.367,104.992 191,103.5C 187.167,105.333 183.333,107.167 179.5,109C 179.128,111.325 177.795,113.491 175.5,115.5C 174.675,116.386 173.675,116.719 172.5,116.5C 172.539,119.089 171.539,121.089 169.5,122.5C 168.508,122.328 167.842,122.662 167.5,123.5C 165.958,122.699 164.292,122.366 162.5,122.5C 162.5,121.5 162.5,120.5 162.5,119.5C 165.51,117.646 168.176,115.313 170.5,112.5C 172.045,111.548 173.712,111.215 175.5,111.5C 175.215,109.712 175.548,108.045 176.5,106.5C 181.473,103.339 186.807,101.339 192.5,100.5C 199.292,101.092 205.958,102.259 212.5,104C 215.739,105.736 218.073,108.236 219.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#57554d\",\n    d: \"M 143.5,97.5 C 143.33,100.676 141.663,102.676 138.5,103.5C 133.42,104.173 128.42,105.173 123.5,106.5C 122.417,107.365 122.251,108.365 123,109.5C 123.414,109.043 123.914,108.709 124.5,108.5C 125.429,109.689 125.762,111.022 125.5,112.5C 124.5,112.5 123.5,112.5 122.5,112.5C 122.5,113.5 122.5,114.5 122.5,115.5C 124.492,115.672 126.158,115.005 127.5,113.5C 128.052,115.003 128.052,116.669 127.5,118.5C 124.824,117.992 122.157,117.825 119.5,118C 119.026,119.729 118.026,120.895 116.5,121.5C 116.678,117.597 118.345,114.597 121.5,112.5C 120.675,111.614 119.675,111.281 118.5,111.5C 118.5,110.5 118.5,109.5 118.5,108.5C 117.5,108.5 116.5,108.5 115.5,108.5C 115.464,112.979 114.631,117.312 113,121.5C 112.333,122.833 111.667,122.833 111,121.5C 110.802,119.618 110.302,117.952 109.5,116.5C 108.453,110.872 109.953,106.205 114,102.5C 114.483,101.552 114.649,100.552 114.5,99.5C 114.842,98.6618 115.508,98.3284 116.5,98.5C 116.187,101.247 116.52,103.914 117.5,106.5C 119.51,104.829 121.843,104.162 124.5,104.5C 124.335,101.15 124.502,97.8168 125,94.5C 126.825,96.4796 127.659,98.8129 127.5,101.5C 131.384,101.14 134.884,99.8066 138,97.5C 139.828,98.7525 141.661,98.7525 143.5,97.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a49172\",\n    d: \"M 220.5,101.5 C 224.176,106.84 228.509,111.507 233.5,115.5C 235.265,116.461 237.265,116.795 239.5,116.5C 239.034,118.201 239.034,119.701 239.5,121C 236.422,123.857 232.756,125.357 228.5,125.5C 227.833,125.5 227.5,125.167 227.5,124.5C 231.613,120.159 231.28,115.992 226.5,112C 224.527,111.505 222.527,111.338 220.5,111.5C 220.167,111.5 219.833,111.5 219.5,111.5C 218.073,108.236 215.739,105.736 212.5,104C 205.958,102.259 199.292,101.092 192.5,100.5C 186.807,101.339 181.473,103.339 176.5,106.5C 175.548,108.045 175.215,109.712 175.5,111.5C 173.712,111.215 172.045,111.548 170.5,112.5C 168.176,115.313 165.51,117.646 162.5,119.5C 161.5,119.5 160.5,119.5 159.5,119.5C 159.343,118.127 159.51,116.793 160,115.5C 163.279,113.39 166.112,110.723 168.5,107.5C 169.425,106.359 170.259,106.359 171,107.5C 176.175,104.32 181.342,101.153 186.5,98C 193.5,97.3333 200.5,97.3333 207.5,98C 211.66,99.6242 215.993,100.791 220.5,101.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#606159\",\n    d: \"M 290.5,92.5 C 291.5,92.5 292.5,92.5 293.5,92.5C 293.5,93.5 293.5,94.5 293.5,95.5C 292.522,95.811 291.855,96.4777 291.5,97.5C 292.611,98.6113 293.278,99.9446 293.5,101.5C 292.749,103.996 291.749,106.33 290.5,108.5C 287.91,108.396 285.577,109.063 283.5,110.5C 279.959,109.429 279.292,107.763 281.5,105.5C 279.812,104.479 278.479,103.145 277.5,101.5C 280.078,102.254 282.744,102.254 285.5,101.5C 285.5,102.833 285.5,104.167 285.5,105.5C 289.485,105.56 291.152,103.56 290.5,99.5C 289.448,99.6495 288.448,99.4828 287.5,99C 289.919,97.4912 290.919,95.3245 290.5,92.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#676357\",\n    d: \"M 151.5,95.5 C 150.689,97.557 149.689,99.557 148.5,101.5C 148.608,102.442 148.941,103.275 149.5,104C 147.146,104.847 144.812,105.68 142.5,106.5C 137.667,104.448 133.667,105.448 130.5,109.5C 132.259,110.754 133.759,110.421 135,108.5C 135.483,109.448 135.649,110.448 135.5,111.5C 146.017,111.375 146.017,112.208 135.5,114C 135.033,117.465 133.033,119.132 129.5,119C 130.167,119.333 130.833,119.667 131.5,120C 129.934,120.608 128.6,121.442 127.5,122.5C 127.167,122.5 126.833,122.5 126.5,122.5C 125.185,121.524 123.852,120.524 122.5,119.5C 119.833,120.5 119.833,121.5 122.5,122.5C 120.604,123.466 118.604,123.799 116.5,123.5C 116.762,124.978 116.429,126.311 115.5,127.5C 114.614,126.675 114.281,125.675 114.5,124.5C 114.427,122.973 115.094,121.973 116.5,121.5C 118.026,120.895 119.026,119.729 119.5,118C 122.157,117.825 124.824,117.992 127.5,118.5C 128.052,116.669 128.052,115.003 127.5,113.5C 126.158,115.005 124.492,115.672 122.5,115.5C 122.5,114.5 122.5,113.5 122.5,112.5C 123.5,112.5 124.5,112.5 125.5,112.5C 125.762,111.022 125.429,109.689 124.5,108.5C 123.914,108.709 123.414,109.043 123,109.5C 122.251,108.365 122.417,107.365 123.5,106.5C 128.42,105.173 133.42,104.173 138.5,103.5C 141.663,102.676 143.33,100.676 143.5,97.5C 144.265,97.9234 145.098,98.2568 146,98.5C 147.244,96.4236 149.077,95.4236 151.5,95.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3a3936\",\n    d: \"M 97.5,94.5 C 98.1667,94.5 98.8333,94.5 99.5,94.5C 101.373,100.924 102.04,107.591 101.5,114.5C 100.33,112.721 98.6636,111.721 96.5,111.5C 95.8333,111.5 95.5,111.167 95.5,110.5C 95.3893,109.883 95.056,109.383 94.5,109C 95.7932,108.51 97.1266,108.343 98.5,108.5C 101.238,103.821 100.905,99.1542 97.5,94.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#50514c\",\n    d: \"M 399.5,93.5 C 399.5,99.5 399.5,105.5 399.5,111.5C 396.763,112.031 394.096,112.864 391.5,114C 390.167,115.333 390.167,116.667 391.5,118C 390.975,118.692 390.308,119.192 389.5,119.5C 388.719,118.271 388.219,116.938 388,115.5C 387.503,117.81 387.337,120.143 387.5,122.5C 386.833,122.5 386.5,122.167 386.5,121.5C 385.503,114.839 384.503,108.172 383.5,101.5C 383.276,97.7956 383.11,94.129 383,90.5C 385.066,94.5059 386.566,94.1726 387.5,89.5C 390.864,92.4504 394.864,93.7837 399.5,93.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#757363\",\n    d: \"M 242.5,100.5 C 243.94,101.363 245.274,101.363 246.5,100.5C 247.976,102.571 249.976,103.571 252.5,103.5C 254.929,103.585 256.929,104.585 258.5,106.5C 262.933,105.709 266.6,107.209 269.5,111C 272.453,111.892 275.119,111.392 277.5,109.5C 280.899,111.312 284.566,111.979 288.5,111.5C 286.716,114.808 287.716,116.475 291.5,116.5C 291.38,117.586 290.713,118.253 289.5,118.5C 285.407,116.057 281.073,115.39 276.5,116.5C 274.418,116.528 272.584,115.861 271,114.5C 267.39,115.954 264.557,114.954 262.5,111.5C 259.904,112.213 257.237,112.213 254.5,111.5C 250.148,108.145 246.148,104.479 242.5,100.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#656557\",\n    d: \"M 299.5,106.5 C 300.79,107.935 302.456,108.935 304.5,109.5C 303.494,110.396 303.494,111.062 304.5,111.5C 306.098,111.39 307.765,111.057 309.5,110.5C 316.659,110.848 323.659,111.848 330.5,113.5C 336.028,110.755 341.361,111.088 346.5,114.5C 346.918,115.222 347.584,115.722 348.5,116C 344.012,116.76 339.678,117.594 335.5,118.5C 335.631,119.239 335.464,119.906 335,120.5C 330.677,120.159 326.177,119.825 321.5,119.5C 316.83,119.025 312.33,118.025 308,116.5C 305.53,118.874 303.197,118.874 301,116.5C 300.676,118.569 299.842,118.902 298.5,117.5C 297.252,118.04 296.085,118.707 295,119.5C 293.961,118.29 292.794,117.29 291.5,116.5C 287.716,116.475 286.716,114.808 288.5,111.5C 290.048,111.179 290.715,110.179 290.5,108.5C 292.764,109.219 295.097,109.552 297.5,109.5C 297.285,107.821 297.952,106.821 299.5,106.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#95876c\",\n    d: \"M 175.5,95.5 C 176.167,95.5 176.833,95.5 177.5,95.5C 187.506,95.3335 197.506,95.5002 207.5,96C 210.707,97.209 214.041,98.209 217.5,99C 218.942,99.3768 219.942,100.21 220.5,101.5C 215.993,100.791 211.66,99.6242 207.5,98C 200.5,97.3333 193.5,97.3333 186.5,98C 181.342,101.153 176.175,104.32 171,107.5C 170.259,106.359 169.425,106.359 168.5,107.5C 166.112,110.723 163.279,113.39 160,115.5C 159.51,116.793 159.343,118.127 159.5,119.5C 155.594,118.165 151.928,118.498 148.5,120.5C 147.909,119.849 147.243,119.182 146.5,118.5C 147.243,117.818 147.909,117.151 148.5,116.5C 150.815,112.309 154.481,110.643 159.5,111.5C 159.323,109.019 160.323,107.186 162.5,106C 166.897,105.645 170.897,103.812 174.5,100.5C 175.452,98.9547 175.785,97.288 175.5,95.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b0956d\",\n    d: \"M 220.5,111.5 C 222.527,111.338 224.527,111.505 226.5,112C 231.28,115.992 231.613,120.159 227.5,124.5C 227.167,124.5 226.833,124.5 226.5,124.5C 226.261,122.533 226.594,120.699 227.5,119C 224.961,116.63 222.628,114.13 220.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7f7763\",\n    d: \"M 247.5,111.5 C 249.6,111.477 251.433,112.144 253,113.5C 254.03,113.164 254.53,112.497 254.5,111.5C 257.237,112.213 259.904,112.213 262.5,111.5C 264.557,114.954 267.39,115.954 271,114.5C 272.584,115.861 274.418,116.528 276.5,116.5C 276.5,117.5 276.5,118.5 276.5,119.5C 276.12,120.133 275.787,120.8 275.5,121.5C 273.349,118.794 271.182,118.46 269,120.5C 266.519,119.978 264.186,119.978 262,120.5C 258.681,118.156 255.181,117.323 251.5,118C 249.497,116.181 248.164,114.015 247.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#76705e\",\n    d: \"M 157.5,105.5 C 153.395,109.062 148.728,111.895 143.5,114C 145.119,114.236 146.119,115.069 146.5,116.5C 140.249,118.989 134.249,121.322 128.5,123.5C 127.833,123.5 127.5,123.167 127.5,122.5C 128.6,121.442 129.934,120.608 131.5,120C 130.833,119.667 130.167,119.333 129.5,119C 133.033,119.132 135.033,117.465 135.5,114C 146.017,112.208 146.017,111.375 135.5,111.5C 135.649,110.448 135.483,109.448 135,108.5C 133.759,110.421 132.259,110.754 130.5,109.5C 133.667,105.448 137.667,104.448 142.5,106.5C 142.811,107.478 143.478,108.145 144.5,108.5C 147.109,107.77 149.776,107.27 152.5,107C 153.086,104.72 153.92,102.553 155,100.5C 155.785,102.249 156.618,103.916 157.5,105.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#555348\",\n    d: \"M 399.5,111.5 C 399.5,115.5 399.5,119.5 399.5,123.5C 397.5,123.5 395.5,123.5 393.5,123.5C 391.5,123.5 389.5,123.5 387.5,123.5C 387.5,123.167 387.5,122.833 387.5,122.5C 387.337,120.143 387.503,117.81 388,115.5C 388.219,116.938 388.719,118.271 389.5,119.5C 390.308,119.192 390.975,118.692 391.5,118C 390.167,116.667 390.167,115.333 391.5,114C 394.096,112.864 396.763,112.031 399.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#edc381\",\n    d: \"M 191.5,109.5 C 194.85,109.335 198.183,109.502 201.5,110C 203.723,112.223 206.389,113.556 209.5,114C 210.787,115.41 211.954,116.91 213,118.5C 212.932,120.342 213.099,122.009 213.5,123.5C 211.585,123.216 209.919,123.549 208.5,124.5C 207.662,124.158 207.328,123.492 207.5,122.5C 208.376,122.631 209.043,122.298 209.5,121.5C 206.061,113.366 200.061,110.033 191.5,111.5C 191.5,110.833 191.5,110.167 191.5,109.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dfb57b\",\n    d: \"M 217.5,124.5 C 216.167,124.5 214.833,124.5 213.5,124.5C 213.5,124.167 213.5,123.833 213.5,123.5C 213.099,122.009 212.932,120.342 213,118.5C 211.954,116.91 210.787,115.41 209.5,114C 206.389,113.556 203.723,112.223 201.5,110C 198.183,109.502 194.85,109.335 191.5,109.5C 192.694,108.223 194.36,107.556 196.5,107.5C 200.163,107.944 203.829,108.278 207.5,108.5C 207.5,109.5 207.5,110.5 207.5,111.5C 214.851,112.471 218.185,116.804 217.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f5b4d\",\n    d: \"M 347.5,111.5 C 353.014,111.682 358.347,111.682 363.5,111.5C 364.21,113.746 364.71,116.08 365,118.5C 366.697,119.364 367.863,120.697 368.5,122.5C 367.995,123.919 366.995,124.585 365.5,124.5C 363.708,123.691 361.708,123.191 359.5,123C 361.891,122.309 361.891,121.309 359.5,120C 354.468,118.168 349.468,118.334 344.5,120.5C 341.788,118.74 338.788,118.073 335.5,118.5C 339.678,117.594 344.012,116.76 348.5,116C 347.584,115.722 346.918,115.222 346.5,114.5C 347.552,114.649 348.552,114.483 349.5,114C 348.619,113.292 347.953,112.458 347.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#595c50\",\n    d: \"M 94.5,110.5 C 94.8333,110.5 95.1667,110.5 95.5,110.5C 95.5,111.167 95.8333,111.5 96.5,111.5C 96.4809,113.06 96.1476,114.56 95.5,116C 96.741,117.731 97.741,119.564 98.5,121.5C 98.1667,121.5 97.8333,121.5 97.5,121.5C 95.509,120.971 93.509,119.638 91.5,117.5C 90.2888,118.274 90.2888,119.107 91.5,120C 91,120.167 90.5,120.333 90,120.5C 88.1444,119.264 86.3111,119.264 84.5,120.5C 83.8076,119.975 83.3076,119.308 83,118.5C 82.1841,119.823 81.0174,120.489 79.5,120.5C 79.5386,119.244 79.0386,118.244 78,117.5C 77.3828,118.449 77.5494,119.282 78.5,120C 74.7669,120.359 71.2669,119.526 68,117.5C 66.5531,117.945 65.2197,118.612 64,119.5C 63.228,119.355 62.5613,119.022 62,118.5C 62.0773,117.262 61.9106,116.262 61.5,115.5C 58.3884,116.043 55.3884,117.21 52.5,119C 53.4158,119.278 54.0825,119.778 54.5,120.5C 53.7611,120.369 53.0944,120.536 52.5,121C 53.7383,121.69 53.7383,122.19 52.5,122.5C 43.4258,124.23 34.5925,123.563 26,120.5C 22.6726,122.307 19.0059,123.307 15,123.5C 10.0644,121.71 4.89778,121.043 -0.5,121.5C -0.5,120.167 -0.5,118.833 -0.5,117.5C 4.60794,117.43 9.60794,118.097 14.5,119.5C 15.086,119.291 15.586,118.957 16,118.5C 18.1529,120.444 20.6529,120.944 23.5,120C 21.8333,119.667 20.1667,119.333 18.5,119C 20.1957,117.824 21.8624,116.657 23.5,115.5C 25.1374,116.403 26.9707,116.403 29,115.5C 30.5505,116.054 32.0505,116.72 33.5,117.5C 36.587,114.536 40.7536,113.87 46,115.5C 47.032,113.855 48.1987,113.522 49.5,114.5C 50.3333,113.5 51.1667,112.5 52,111.5C 53.1769,113.176 54.6769,114.509 56.5,115.5C 60.009,113.436 63.6757,113.103 67.5,114.5C 68.9828,116.946 70.1495,116.612 71,113.5C 73,114.167 75,114.833 77,115.5C 78.7141,114.075 80.0475,114.408 81,116.5C 84.0469,116.071 87.2136,116.071 90.5,116.5C 90.3398,114.801 90.5065,113.134 91,111.5C 92.7565,112.985 93.9232,112.652 94.5,110.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#fad591\",\n    d: \"M 207.5,122.5 C 204.534,118.34 199.867,116.007 193.5,115.5C 189.009,117.329 186.343,120.662 185.5,125.5C 185.167,125.5 184.833,125.5 184.5,125.5C 184.483,123.435 184.15,121.435 183.5,119.5C 186.193,116.703 188.859,114.037 191.5,111.5C 200.061,110.033 206.061,113.366 209.5,121.5C 209.043,122.298 208.376,122.631 207.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#616252\",\n    d: \"M 79.5,120.5 C 79.5,122.167 79.5,123.833 79.5,125.5C 78.1667,125.5 77.5,126.167 77.5,127.5C 76.5655,126.432 76.2322,125.099 76.5,123.5C 74.8212,123.285 73.8212,123.952 73.5,125.5C 71.8762,125.36 70.7096,126.027 70,127.5C 68.8118,126.437 68.3118,125.103 68.5,123.5C 63.8944,122.3 59.2277,121.3 54.5,120.5C 54.0825,119.778 53.4158,119.278 52.5,119C 55.3884,117.21 58.3884,116.043 61.5,115.5C 61.9106,116.262 62.0773,117.262 62,118.5C 62.5613,119.022 63.228,119.355 64,119.5C 65.2197,118.612 66.5531,117.945 68,117.5C 71.2669,119.526 74.7669,120.359 78.5,120C 77.5494,119.282 77.3828,118.449 78,117.5C 79.0386,118.244 79.5386,119.244 79.5,120.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dab174\",\n    d: \"M 191.5,111.5 C 188.859,114.037 186.193,116.703 183.5,119.5C 181.367,121.091 179.701,123.091 178.5,125.5C 176.04,125.699 173.707,126.365 171.5,127.5C 172.243,128.182 172.909,128.849 173.5,129.5C 171.5,129.167 169.5,128.833 167.5,128.5C 166.041,128.567 164.708,128.234 163.5,127.5C 164.833,126.167 166.167,124.833 167.5,123.5C 167.842,122.662 168.508,122.328 169.5,122.5C 171.262,122.643 172.929,122.309 174.5,121.5C 177.841,118.799 180.175,115.465 181.5,111.5C 184.833,111.5 188.167,111.5 191.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#514f49\",\n    d: \"M 96.5,111.5 C 98.6636,111.721 100.33,112.721 101.5,114.5C 101.833,114.5 102.167,114.5 102.5,114.5C 102.5,118.5 102.5,122.5 102.5,126.5C 101.167,124.833 99.8333,123.167 98.5,121.5C 97.741,119.564 96.741,117.731 95.5,116C 96.1476,114.56 96.4809,113.06 96.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#665e4a\",\n    d: \"M 335.5,118.5 C 338.788,118.073 341.788,118.74 344.5,120.5C 349.468,118.334 354.468,118.168 359.5,120C 361.891,121.309 361.891,122.309 359.5,123C 361.708,123.191 363.708,123.691 365.5,124.5C 365.5,125.167 365.167,125.5 364.5,125.5C 359.242,125.395 354.076,126.062 349,127.5C 347.5,127.333 346,127.167 344.5,127C 344.957,126.586 345.291,126.086 345.5,125.5C 343.579,124.359 341.579,124.192 339.5,125C 340.536,126.617 341.703,126.784 343,125.5C 343.464,126.094 343.631,126.761 343.5,127.5C 341.708,127.634 340.042,127.301 338.5,126.5C 338.389,125.883 338.056,125.383 337.5,125C 334.237,124.936 331.237,124.102 328.5,122.5C 327.914,122.709 327.414,123.043 327,123.5C 326.558,121.321 325.558,120.655 324,121.5C 323.005,120.934 322.172,120.267 321.5,119.5C 326.177,119.825 330.677,120.159 335,120.5C 335.464,119.906 335.631,119.239 335.5,118.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#585745\",\n    d: \"M 52.5,122.5 C 52.0825,123.222 51.4158,123.722 50.5,124C 39.6913,124.875 29.0246,126.042 18.5,127.5C 17.7945,129.672 16.7945,131.672 15.5,133.5C 10.2451,133.916 4.91178,133.916 -0.5,133.5C -0.5,129.5 -0.5,125.5 -0.5,121.5C 4.89778,121.043 10.0644,121.71 15,123.5C 19.0059,123.307 22.6726,122.307 26,120.5C 34.5925,123.563 43.4258,124.23 52.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5a5444\",\n    d: \"M 97.5,121.5 C 97.5394,122.583 97.8728,123.583 98.5,124.5C 98,124.833 97.5,125.167 97,125.5C 95.2626,124.38 93.4292,123.38 91.5,122.5C 91.1667,122.833 90.8333,123.167 90.5,123.5C 91.3467,124.845 92.5134,125.845 94,126.5C 94.6877,127.332 94.521,127.998 93.5,128.5C 90.795,126.141 87.795,124.141 84.5,122.5C 83.4376,123.425 83.4376,124.425 84.5,125.5C 83.2652,125.721 82.2652,126.388 81.5,127.5C 80.4777,127.145 79.811,126.478 79.5,125.5C 79.5,123.833 79.5,122.167 79.5,120.5C 81.0174,120.489 82.1841,119.823 83,118.5C 83.3076,119.308 83.8076,119.975 84.5,120.5C 86.3111,119.264 88.1444,119.264 90,120.5C 90.5,120.333 91,120.167 91.5,120C 90.2888,119.107 90.2888,118.274 91.5,117.5C 93.509,119.638 95.509,120.971 97.5,121.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#85755c\",\n    d: \"M 148.5,116.5 C 147.909,117.151 147.243,117.818 146.5,118.5C 147.243,119.182 147.909,119.849 148.5,120.5C 145.081,121.042 143.414,123.042 143.5,126.5C 143.5,126.833 143.5,127.167 143.5,127.5C 141.833,127.5 140.167,127.5 138.5,127.5C 138.67,126.178 138.337,125.011 137.5,124C 134.335,124.367 131.335,124.201 128.5,123.5C 134.249,121.322 140.249,118.989 146.5,116.5C 147.396,115.494 148.062,115.494 148.5,116.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#937d5c\",\n    d: \"M 159.5,119.5 C 158.047,121.229 156.047,122.229 153.5,122.5C 151.786,121.391 151.119,122.058 151.5,124.5C 148.996,125.639 146.33,126.306 143.5,126.5C 143.414,123.042 145.081,121.042 148.5,120.5C 151.928,118.498 155.594,118.165 159.5,119.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e6c277\",\n    d: \"M 183.5,119.5 C 184.15,121.435 184.483,123.435 184.5,125.5C 184.53,126.497 184.03,127.164 183,127.5C 181.7,126.293 180.2,125.626 178.5,125.5C 179.701,123.091 181.367,121.091 183.5,119.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c7a477\",\n    d: \"M 219.5,111.5 C 219.833,111.5 220.167,111.5 220.5,111.5C 222.628,114.13 224.961,116.63 227.5,119C 226.594,120.699 226.261,122.533 226.5,124.5C 223.5,124.5 220.5,124.5 217.5,124.5C 218.185,116.804 214.851,112.471 207.5,111.5C 207.5,110.5 207.5,109.5 207.5,108.5C 203.829,108.278 200.163,107.944 196.5,107.5C 194.36,107.556 192.694,108.223 191.5,109.5C 191.5,110.167 191.5,110.833 191.5,111.5C 188.167,111.5 184.833,111.5 181.5,111.5C 180.175,115.465 177.841,118.799 174.5,121.5C 172.929,122.309 171.262,122.643 169.5,122.5C 171.539,121.089 172.539,119.089 172.5,116.5C 173.675,116.719 174.675,116.386 175.5,115.5C 177.795,113.491 179.128,111.325 179.5,109C 183.333,107.167 187.167,105.333 191,103.5C 197.367,104.992 203.867,105.826 210.5,106C 213.969,107.35 216.969,109.184 219.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#807158\",\n    d: \"M 241.5,111.5 C 243.5,111.5 245.5,111.5 247.5,111.5C 248.164,114.015 249.497,116.181 251.5,118C 255.181,117.323 258.681,118.156 262,120.5C 264.186,119.978 266.519,119.978 269,120.5C 271.182,118.46 273.349,118.794 275.5,121.5C 275.787,120.8 276.12,120.133 276.5,119.5C 281.943,121.352 288.277,122.518 295.5,123C 297.285,124.163 299.285,124.83 301.5,125C 302.252,125.671 302.586,126.504 302.5,127.5C 300.906,127.92 299.406,128.586 298,129.5C 295.719,128.543 293.886,129.21 292.5,131.5C 289.243,131.361 286.076,130.694 283,129.5C 279.279,130.889 275.446,131.556 271.5,131.5C 271.5,130.167 271.5,128.833 271.5,127.5C 267.154,127.666 262.821,127.499 258.5,127C 257.061,126.009 256.061,124.676 255.5,123C 252.168,122.504 249.168,121.337 246.5,119.5C 245.733,116.373 244.067,113.707 241.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#706751\",\n    d: \"M 291.5,116.5 C 292.794,117.29 293.961,118.29 295,119.5C 296.085,118.707 297.252,118.04 298.5,117.5C 299.842,118.902 300.676,118.569 301,116.5C 303.197,118.874 305.53,118.874 308,116.5C 312.33,118.025 316.83,119.025 321.5,119.5C 322.172,120.267 323.005,120.934 324,121.5C 325.558,120.655 326.558,121.321 327,123.5C 327.414,123.043 327.914,122.709 328.5,122.5C 331.237,124.102 334.237,124.936 337.5,125C 338.056,125.383 338.389,125.883 338.5,126.5C 332.378,126.958 326.044,128.291 319.5,130.5C 319.5,129.5 319.5,128.5 319.5,127.5C 313.833,127.5 308.167,127.5 302.5,127.5C 302.586,126.504 302.252,125.671 301.5,125C 299.285,124.83 297.285,124.163 295.5,123C 288.277,122.518 281.943,121.352 276.5,119.5C 276.5,118.5 276.5,117.5 276.5,116.5C 281.073,115.39 285.407,116.057 289.5,118.5C 290.713,118.253 291.38,117.586 291.5,116.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3e3931\",\n    d: \"M 116.5,121.5 C 115.094,121.973 114.427,122.973 114.5,124.5C 114.167,124.5 113.833,124.5 113.5,124.5C 112.5,124.5 111.5,124.5 110.5,124.5C 109.527,122.052 109.194,119.385 109.5,116.5C 110.302,117.952 110.802,119.618 111,121.5C 111.667,122.833 112.333,122.833 113,121.5C 114.631,117.312 115.464,112.979 115.5,108.5C 116.5,108.5 117.5,108.5 118.5,108.5C 118.5,109.5 118.5,110.5 118.5,111.5C 119.675,111.281 120.675,111.614 121.5,112.5C 118.345,114.597 116.678,117.597 116.5,121.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#564b39\",\n    d: \"M 126.5,122.5 C 126.179,124.048 125.179,124.715 123.5,124.5C 123.864,128.409 122.53,131.409 119.5,133.5C 118.817,131.824 117.483,131.157 115.5,131.5C 114.551,129.263 113.884,126.929 113.5,124.5C 113.833,124.5 114.167,124.5 114.5,124.5C 114.281,125.675 114.614,126.675 115.5,127.5C 116.429,126.311 116.762,124.978 116.5,123.5C 118.604,123.799 120.604,123.466 122.5,122.5C 119.833,121.5 119.833,120.5 122.5,119.5C 123.852,120.524 125.185,121.524 126.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#fae2a1\",\n    d: \"M 207.5,122.5 C 207.328,123.492 207.662,124.158 208.5,124.5C 209.885,125.947 209.552,126.947 207.5,127.5C 206.566,126.432 206.232,125.099 206.5,123.5C 205.167,123.5 203.833,123.5 202.5,123.5C 202.5,123.167 202.5,122.833 202.5,122.5C 203.039,120.469 202.039,118.969 199.5,118C 191.836,116.495 187.836,119.662 187.5,127.5C 188.833,127.5 190.167,127.5 191.5,127.5C 191.886,129.937 193.053,131.937 195,133.5C 195.49,134.793 195.657,136.127 195.5,137.5C 195.5,137.833 195.5,138.167 195.5,138.5C 195.167,138.5 194.833,138.5 194.5,138.5C 194.579,137.07 194.246,135.736 193.5,134.5C 190.698,133.288 188.198,131.621 186,129.5C 185.51,128.207 185.343,126.873 185.5,125.5C 186.343,120.662 189.009,117.329 193.5,115.5C 199.867,116.007 204.534,118.34 207.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#fbe6b1\",\n    d: \"M 202.5,122.5 C 200.804,122.315 199.471,121.481 198.5,120C 192.588,118.838 190.254,121.338 191.5,127.5C 190.167,127.5 188.833,127.5 187.5,127.5C 187.836,119.662 191.836,116.495 199.5,118C 202.039,118.969 203.039,120.469 202.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e8e1c1\",\n    d: \"M 202.5,122.5 C 202.5,122.833 202.5,123.167 202.5,123.5C 200.533,123.261 198.699,123.594 197,124.5C 196.643,128.51 196.81,132.51 197.5,136.5C 196.833,136.833 196.167,137.167 195.5,137.5C 195.657,136.127 195.49,134.793 195,133.5C 193.053,131.937 191.886,129.937 191.5,127.5C 190.254,121.338 192.588,118.838 198.5,120C 199.471,121.481 200.804,122.315 202.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#46422f\",\n    d: \"M 97.5,121.5 C 97.8333,121.5 98.1667,121.5 98.5,121.5C 99.8333,123.167 101.167,124.833 102.5,126.5C 102.179,128.048 101.179,128.715 99.5,128.5C 99.5,130.167 99.5,131.833 99.5,133.5C 99.1667,133.5 98.8333,133.5 98.5,133.5C 97.5,133.5 96.5,133.5 95.5,133.5C 91.2711,131.604 87.6044,128.937 84.5,125.5C 83.4376,124.425 83.4376,123.425 84.5,122.5C 87.795,124.141 90.795,126.141 93.5,128.5C 94.521,127.998 94.6877,127.332 94,126.5C 92.5134,125.845 91.3467,124.845 90.5,123.5C 90.8333,123.167 91.1667,122.833 91.5,122.5C 93.4292,123.38 95.2626,124.38 97,125.5C 97.5,125.167 98,124.833 98.5,124.5C 97.8728,123.583 97.5394,122.583 97.5,121.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#947f60\",\n    d: \"M 239.5,111.5 C 240.167,111.5 240.833,111.5 241.5,111.5C 244.067,113.707 245.733,116.373 246.5,119.5C 247.601,124.224 250.601,126.224 255.5,125.5C 255.5,127.167 255.5,128.833 255.5,130.5C 254.5,130.5 253.5,130.5 252.5,130.5C 251.5,130.5 250.5,130.5 249.5,130.5C 248.761,130.631 248.094,130.464 247.5,130C 248.623,128.956 249.956,128.29 251.5,128C 249.236,127.764 247.069,127.264 245,126.5C 239.593,127.473 234.093,127.807 228.5,127.5C 227.494,127.062 227.494,126.396 228.5,125.5C 232.756,125.357 236.422,123.857 239.5,121C 239.034,119.701 239.034,118.201 239.5,116.5C 237.265,116.795 235.265,116.461 233.5,115.5C 236.408,114.841 236.742,114.007 234.5,113C 236.025,111.991 237.692,111.491 239.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#39352a\",\n    d: \"M 387.5,123.5 C 389.5,123.5 391.5,123.5 393.5,123.5C 394.806,124.467 395.473,125.801 395.5,127.5C 390.549,127.53 389.216,129.863 391.5,134.5C 389.115,131.347 387.782,127.68 387.5,123.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#453e31\",\n    d: \"M 360.5,103.5 C 361.458,103.953 362.292,104.619 363,105.5C 364.34,109.51 365.673,113.51 367,117.5C 370.662,120.648 372.495,124.648 372.5,129.5C 369.368,129.216 366.368,128.383 363.5,127C 364.056,126.617 364.389,126.117 364.5,125.5C 365.167,125.5 365.5,125.167 365.5,124.5C 366.995,124.585 367.995,123.919 368.5,122.5C 367.863,120.697 366.697,119.364 365,118.5C 364.71,116.08 364.21,113.746 363.5,111.5C 362.883,108.645 361.883,105.978 360.5,103.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#645c49\",\n    d: \"M 54.5,120.5 C 59.2277,121.3 63.8944,122.3 68.5,123.5C 68.3118,125.103 68.8118,126.437 70,127.5C 70.7096,126.027 71.8762,125.36 73.5,125.5C 75.3123,128.368 76.9789,131.368 78.5,134.5C 78,134.833 77.5,135.167 77,135.5C 73.7127,135.13 70.7127,134.13 68,132.5C 67.4806,133.516 66.6473,134.182 65.5,134.5C 64.1331,133.775 62.7997,133.108 61.5,132.5C 58.0011,132.633 54.3344,132.8 50.5,133C 51.1667,133.333 51.8333,133.667 52.5,134C 46.8252,134.464 46.4919,135.131 51.5,136C 47.5,136.667 43.5,136.667 39.5,136C 41.8333,135.667 44.1667,135.333 46.5,135C 42.5138,134.501 38.5138,134.334 34.5,134.5C 33.0813,133.549 31.4147,133.216 29.5,133.5C 29.5,132.5 29.5,131.5 29.5,130.5C 26.4017,130.413 26.0684,130.913 28.5,132C 24.3004,133.367 19.9671,133.867 15.5,133.5C 16.7945,131.672 17.7945,129.672 18.5,127.5C 29.0246,126.042 39.6913,124.875 50.5,124C 51.4158,123.722 52.0825,123.222 52.5,122.5C 53.7383,122.19 53.7383,121.69 52.5,121C 53.0944,120.536 53.7611,120.369 54.5,120.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f7d885\",\n    d: \"M 178.5,125.5 C 180.2,125.626 181.7,126.293 183,127.5C 184.03,127.164 184.53,126.497 184.5,125.5C 184.833,125.5 185.167,125.5 185.5,125.5C 185.343,126.873 185.51,128.207 186,129.5C 188.198,131.621 190.698,133.288 193.5,134.5C 194.246,135.736 194.579,137.07 194.5,138.5C 194.167,138.5 193.833,138.5 193.5,138.5C 193.586,137.504 193.252,136.671 192.5,136C 189.426,134.59 186.426,133.09 183.5,131.5C 183.649,130.448 183.483,129.448 183,128.5C 179.943,129.451 176.777,129.784 173.5,129.5C 172.909,128.849 172.243,128.182 171.5,127.5C 173.707,126.365 176.04,125.699 178.5,125.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#897152\",\n    d: \"M 246.5,119.5 C 249.168,121.337 252.168,122.504 255.5,123C 256.061,124.676 257.061,126.009 258.5,127C 262.821,127.499 267.154,127.666 271.5,127.5C 271.5,128.833 271.5,130.167 271.5,131.5C 271.07,133.38 271.07,135.38 271.5,137.5C 270.833,137.833 270.167,138.167 269.5,138.5C 267.416,137.752 265.416,137.752 263.5,138.5C 261.743,135.703 259.41,134.703 256.5,135.5C 255.422,133.539 254.089,131.872 252.5,130.5C 253.5,130.5 254.5,130.5 255.5,130.5C 255.5,128.833 255.5,127.167 255.5,125.5C 250.601,126.224 247.601,124.224 246.5,119.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b08f61\",\n    d: \"M 162.5,122.5 C 164.292,122.366 165.958,122.699 167.5,123.5C 166.167,124.833 164.833,126.167 163.5,127.5C 160.784,127.678 158.117,128.178 155.5,129C 156.609,130.813 155.942,131.646 153.5,131.5C 153.473,129.801 152.806,128.467 151.5,127.5C 154.923,125.675 158.59,124.008 162.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9b875b\",\n    d: \"M 203.5,125.5 C 205.323,128.016 206.323,131.016 206.5,134.5C 206.167,134.5 205.833,134.5 205.5,134.5C 205.011,133.005 204.345,131.671 203.5,130.5C 203.5,128.833 203.5,127.167 203.5,125.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e0b671\",\n    d: \"M 208.5,124.5 C 209.919,123.549 211.585,123.216 213.5,123.5C 213.5,123.833 213.5,124.167 213.5,124.5C 212.5,124.5 211.5,124.5 210.5,124.5C 210.5,125.5 210.5,126.5 210.5,127.5C 211.833,127.5 213.167,127.5 214.5,127.5C 214.5,128.5 214.5,129.5 214.5,130.5C 213.209,130.263 212.209,130.596 211.5,131.5C 210.64,135.434 210.307,139.434 210.5,143.5C 209.833,141.5 209.167,139.5 208.5,137.5C 208.672,136.508 208.338,135.842 207.5,135.5C 207.5,132.833 207.5,130.167 207.5,127.5C 209.552,126.947 209.885,125.947 208.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#63543c\",\n    d: \"M 364.5,125.5 C 364.389,126.117 364.056,126.617 363.5,127C 366.368,128.383 369.368,129.216 372.5,129.5C 373.397,134.14 373.564,138.806 373,143.5C 372.626,145.491 371.793,147.158 370.5,148.5C 372.771,143.826 371.771,140.16 367.5,137.5C 362.451,138.782 357.118,139.782 351.5,140.5C 349.473,140.662 347.473,140.495 345.5,140C 349.272,138.611 349.272,137.611 345.5,137C 346.056,136.617 346.389,136.117 346.5,135.5C 348.225,135.157 348.725,134.157 348,132.5C 346.295,131.237 344.628,130.903 343,131.5C 342.805,130.181 342.972,128.847 343.5,127.5C 343.631,126.761 343.464,126.094 343,125.5C 341.703,126.784 340.536,126.617 339.5,125C 341.579,124.192 343.579,124.359 345.5,125.5C 345.291,126.086 344.957,126.586 344.5,127C 346,127.167 347.5,127.333 349,127.5C 354.076,126.062 359.242,125.395 364.5,125.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#312e25\",\n    d: \"M 102.5,114.5 C 104.435,120.976 104.769,127.642 103.5,134.5C 103.167,134.5 102.833,134.5 102.5,134.5C 101.609,133.89 100.609,133.557 99.5,133.5C 99.5,131.833 99.5,130.167 99.5,128.5C 101.179,128.715 102.179,128.048 102.5,126.5C 102.5,122.5 102.5,118.5 102.5,114.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9c7d58\",\n    d: \"M 159.5,119.5 C 160.5,119.5 161.5,119.5 162.5,119.5C 162.5,120.5 162.5,121.5 162.5,122.5C 158.59,124.008 154.923,125.675 151.5,127.5C 150.761,127.369 150.094,127.536 149.5,128C 151.921,131.71 152.087,135.21 150,138.5C 145.702,138.669 142.202,140.336 139.5,143.5C 138.833,143.5 138.167,143.5 137.5,143.5C 138.942,142.18 139.608,140.514 139.5,138.5C 140.222,138.082 140.722,137.416 141,136.5C 141.414,136.957 141.914,137.291 142.5,137.5C 143.487,134.232 143.82,130.898 143.5,127.5C 143.5,127.167 143.5,126.833 143.5,126.5C 146.33,126.306 148.996,125.639 151.5,124.5C 151.119,122.058 151.786,121.391 153.5,122.5C 156.047,122.229 158.047,121.229 159.5,119.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c69d68\",\n    d: \"M 216.5,127.5 C 220.726,127.516 224.726,128.516 228.5,130.5C 226.955,131.452 225.288,131.785 223.5,131.5C 219.778,132.32 217.445,130.987 216.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7b6b4b\",\n    d: \"M 292.5,131.5 C 293.043,131.56 293.376,131.893 293.5,132.5C 292.624,133.251 291.624,133.751 290.5,134C 291.872,134.402 293.205,134.902 294.5,135.5C 296.536,133.655 298.87,133.155 301.5,134C 301.167,134.333 300.833,134.667 300.5,135C 302.119,135.236 303.119,136.069 303.5,137.5C 298.187,138.362 292.854,138.529 287.5,138C 286.034,137.365 284.7,136.531 283.5,135.5C 279.783,137.344 275.783,138.011 271.5,137.5C 271.07,135.38 271.07,133.38 271.5,131.5C 275.446,131.556 279.279,130.889 283,129.5C 286.076,130.694 289.243,131.361 292.5,131.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#726346\",\n    d: \"M 338.5,126.5 C 340.042,127.301 341.708,127.634 343.5,127.5C 342.972,128.847 342.805,130.181 343,131.5C 344.628,130.903 346.295,131.237 348,132.5C 348.725,134.157 348.225,135.157 346.5,135.5C 343.552,135.777 340.719,135.444 338,134.5C 336.581,135.46 335.081,136.293 333.5,137C 323.481,137.726 313.481,138.56 303.5,139.5C 303.5,138.833 303.5,138.167 303.5,137.5C 303.119,136.069 302.119,135.236 300.5,135C 300.833,134.667 301.167,134.333 301.5,134C 298.87,133.155 296.536,133.655 294.5,135.5C 293.205,134.902 291.872,134.402 290.5,134C 291.624,133.751 292.624,133.251 293.5,132.5C 293.376,131.893 293.043,131.56 292.5,131.5C 293.886,129.21 295.719,128.543 298,129.5C 299.406,128.586 300.906,127.92 302.5,127.5C 308.167,127.5 313.833,127.5 319.5,127.5C 319.5,128.5 319.5,129.5 319.5,130.5C 326.044,128.291 332.378,126.958 338.5,126.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c614c\",\n    d: \"M 79.5,125.5 C 79.811,126.478 80.4777,127.145 81.5,127.5C 82.2652,126.388 83.2652,125.721 84.5,125.5C 87.6044,128.937 91.2711,131.604 95.5,133.5C 94.6586,135.379 94.3253,137.379 94.5,139.5C 92.8014,139.62 91.1347,139.954 89.5,140.5C 87.6663,139.246 85.6663,138.579 83.5,138.5C 81.4981,134.832 79.4981,131.166 77.5,127.5C 77.5,126.167 78.1667,125.5 79.5,125.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#efc06a\",\n    d: \"M 183.5,131.5 C 183.557,132.609 183.89,133.609 184.5,134.5C 184.167,134.5 183.833,134.5 183.5,134.5C 180.744,135.254 178.078,135.254 175.5,134.5C 175.635,132.446 174.968,130.779 173.5,129.5C 176.777,129.784 179.943,129.451 183,128.5C 183.483,129.448 183.649,130.448 183.5,131.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dac18f\",\n    d: \"M 202.5,123.5 C 203.833,123.5 205.167,123.5 206.5,123.5C 206.232,125.099 206.566,126.432 207.5,127.5C 207.5,130.167 207.5,132.833 207.5,135.5C 206.833,135.5 206.5,135.167 206.5,134.5C 206.323,131.016 205.323,128.016 203.5,125.5C 203.167,124.833 202.833,124.167 202.5,123.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#201c14\",\n    d: \"M 202.5,123.5 C 202.833,124.167 203.167,124.833 203.5,125.5C 203.5,127.167 203.5,128.833 203.5,130.5C 202.522,130.811 201.855,131.478 201.5,132.5C 202.167,134.167 202.833,135.833 203.5,137.5C 203.376,138.107 203.043,138.44 202.5,138.5C 201.391,138.557 200.391,138.89 199.5,139.5C 198.833,141.167 198.167,142.833 197.5,144.5C 196.746,141.744 196.746,139.078 197.5,136.5C 196.81,132.51 196.643,128.51 197,124.5C 198.699,123.594 200.533,123.261 202.5,123.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#705e43\",\n    d: \"M 126.5,122.5 C 126.833,122.5 127.167,122.5 127.5,122.5C 127.5,123.167 127.833,123.5 128.5,123.5C 131.335,124.201 134.335,124.367 137.5,124C 138.337,125.011 138.67,126.178 138.5,127.5C 134.335,129.5 131.335,132.667 129.5,137C 131.437,137.122 132.77,137.955 133.5,139.5C 132.833,140.167 132.167,140.833 131.5,141.5C 128.843,141.162 126.51,141.829 124.5,143.5C 122.712,140.891 121.045,140.891 119.5,143.5C 118.642,146.953 117.642,147.12 116.5,144C 116.672,141.83 117.672,140.163 119.5,139C 119.164,137.97 118.497,137.47 117.5,137.5C 117.66,135.847 118.326,134.514 119.5,133.5C 122.53,131.409 123.864,128.409 123.5,124.5C 125.179,124.715 126.179,124.048 126.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#866e51\",\n    d: \"M 138.5,127.5 C 140.167,127.5 141.833,127.5 143.5,127.5C 143.82,130.898 143.487,134.232 142.5,137.5C 141.914,137.291 141.414,136.957 141,136.5C 140.722,137.416 140.222,138.082 139.5,138.5C 137.435,138.517 135.435,138.85 133.5,139.5C 132.77,137.955 131.437,137.122 129.5,137C 131.335,132.667 134.335,129.5 138.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a98256\",\n    d: \"M 151.5,127.5 C 152.806,128.467 153.473,129.801 153.5,131.5C 155.942,131.646 156.609,130.813 155.5,129C 158.117,128.178 160.784,127.678 163.5,127.5C 163.306,129.912 161.973,130.912 159.5,130.5C 159.16,133.144 159.827,135.477 161.5,137.5C 160.757,138.182 160.091,138.849 159.5,139.5C 157.871,138.375 156.371,137.041 155,135.5C 153.357,137.977 151.524,140.31 149.5,142.5C 146.232,143.487 142.898,143.82 139.5,143.5C 142.202,140.336 145.702,138.669 150,138.5C 152.087,135.21 151.921,131.71 149.5,128C 150.094,127.536 150.761,127.369 151.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#62523b\",\n    d: \"M 77.5,127.5 C 79.4981,131.166 81.4981,134.832 83.5,138.5C 85.6663,138.579 87.6663,139.246 89.5,140.5C 91.1347,139.954 92.8014,139.62 94.5,139.5C 94.3253,137.379 94.6586,135.379 95.5,133.5C 96.5,133.5 97.5,133.5 98.5,133.5C 97.645,134.531 96.9783,135.697 96.5,137C 98.1785,138.875 99.1785,141.042 99.5,143.5C 94.7999,143.985 90.1333,143.318 85.5,141.5C 86.3326,144.831 88.3326,147.164 91.5,148.5C 91.5858,149.496 91.2524,150.329 90.5,151C 87.657,151.446 84.8236,151.946 82,152.5C 72.5376,153.124 63.0376,152.457 53.5,150.5C 62.1731,150.666 70.8397,150.5 79.5,150C 80.5981,149.23 80.5981,148.397 79.5,147.5C 79.33,146.178 79.6634,145.011 80.5,144C 79.552,143.517 78.552,143.351 77.5,143.5C 75.3782,140.009 72.3782,137.342 68.5,135.5C 67.8333,136.5 67.1667,137.5 66.5,138.5C 65.0878,137.194 63.4211,136.36 61.5,136C 60.3157,134.855 60.3157,133.688 61.5,132.5C 62.7997,133.108 64.1331,133.775 65.5,134.5C 66.6473,134.182 67.4806,133.516 68,132.5C 70.7127,134.13 73.7127,135.13 77,135.5C 77.5,135.167 78,134.833 78.5,134.5C 76.9789,131.368 75.3123,128.368 73.5,125.5C 73.8212,123.952 74.8212,123.285 76.5,123.5C 76.2322,125.099 76.5655,126.432 77.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#fdda78\",\n    d: \"M 183.5,131.5 C 186.426,133.09 189.426,134.59 192.5,136C 193.252,136.671 193.586,137.504 193.5,138.5C 193.5,139.5 193.5,140.5 193.5,141.5C 191.824,140.817 191.157,139.483 191.5,137.5C 189.105,136.684 186.771,135.684 184.5,134.5C 183.89,133.609 183.557,132.609 183.5,131.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6f593c\",\n    d: \"M 346.5,135.5 C 346.389,136.117 346.056,136.617 345.5,137C 349.272,137.611 349.272,138.611 345.5,140C 347.473,140.495 349.473,140.662 351.5,140.5C 351.5,141.5 351.5,142.5 351.5,143.5C 349.167,143.5 346.833,143.5 344.5,143.5C 344.167,139.5 343.833,139.5 343.5,143.5C 341.876,143.64 340.71,142.973 340,141.5C 337.544,143.321 334.711,143.988 331.5,143.5C 322.167,143.5 312.833,143.5 303.5,143.5C 303.5,142.5 303.5,141.5 303.5,140.5C 303.5,140.167 303.5,139.833 303.5,139.5C 313.481,138.56 323.481,137.726 333.5,137C 335.081,136.293 336.581,135.46 338,134.5C 340.719,135.444 343.552,135.777 346.5,135.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c614d\",\n    d: \"M 115.5,131.5 C 117.483,131.157 118.817,131.824 119.5,133.5C 118.326,134.514 117.66,135.847 117.5,137.5C 116.518,138.141 115.518,138.807 114.5,139.5C 113.534,137.604 113.201,135.604 113.5,133.5C 113.833,132.5 114.5,131.833 115.5,131.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dea461\",\n    d: \"M 167.5,129.5 C 167.5,129.167 167.5,128.833 167.5,128.5C 169.5,128.833 171.5,129.167 173.5,129.5C 174.968,130.779 175.635,132.446 175.5,134.5C 175.5,136.5 175.5,138.5 175.5,140.5C 174.036,141.405 172.702,141.405 171.5,140.5C 171.107,137.584 170.107,134.917 168.5,132.5C 171.007,130.952 170.674,129.952 167.5,129.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ab8151\",\n    d: \"M 213.5,124.5 C 214.833,124.5 216.167,124.5 217.5,124.5C 220.5,124.5 223.5,124.5 226.5,124.5C 226.833,124.5 227.167,124.5 227.5,124.5C 227.5,125.167 227.833,125.5 228.5,125.5C 227.494,126.396 227.494,127.062 228.5,127.5C 229.57,131.12 231.737,132.787 235,132.5C 235.624,134.754 236.957,136.421 239,137.5C 239.495,139.473 239.662,141.473 239.5,143.5C 238.167,143.5 236.833,143.5 235.5,143.5C 234.167,143.5 232.833,143.5 231.5,143.5C 230.724,138.595 228.057,135.262 223.5,133.5C 223.5,132.833 223.5,132.167 223.5,131.5C 225.288,131.785 226.955,131.452 228.5,130.5C 224.726,128.516 220.726,127.516 216.5,127.5C 215.833,127.5 215.167,127.5 214.5,127.5C 213.167,127.5 211.833,127.5 210.5,127.5C 210.5,126.5 210.5,125.5 210.5,124.5C 211.5,124.5 212.5,124.5 213.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7d6544\",\n    d: \"M 303.5,137.5 C 303.5,138.167 303.5,138.833 303.5,139.5C 303.5,139.833 303.5,140.167 303.5,140.5C 301.179,140.229 299.179,140.896 297.5,142.5C 293.896,140.895 290.063,139.895 286,139.5C 283.53,140.278 281.864,141.278 281,142.5C 277.875,141.744 274.709,141.411 271.5,141.5C 270.449,140.778 269.782,139.778 269.5,138.5C 270.167,138.167 270.833,137.833 271.5,137.5C 275.783,138.011 279.783,137.344 283.5,135.5C 284.7,136.531 286.034,137.365 287.5,138C 292.854,138.529 298.187,138.362 303.5,137.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c5c43\",\n    d: \"M 61.5,132.5 C 60.3157,133.688 60.3157,134.855 61.5,136C 63.4211,136.36 65.0878,137.194 66.5,138.5C 67.1667,137.5 67.8333,136.5 68.5,135.5C 72.3782,137.342 75.3782,140.009 77.5,143.5C 69.1667,143.5 60.8333,143.5 52.5,143.5C 47.1667,143.5 41.8333,143.5 36.5,143.5C 36.7733,141.549 36.1066,140.049 34.5,139C 35.3081,138.692 35.9747,138.192 36.5,137.5C 35.0878,136.194 33.4211,135.36 31.5,135C 32.448,134.517 33.448,134.351 34.5,134.5C 38.5138,134.334 42.5138,134.501 46.5,135C 44.1667,135.333 41.8333,135.667 39.5,136C 43.5,136.667 47.5,136.667 51.5,136C 46.4919,135.131 46.8252,134.464 52.5,134C 51.8333,133.667 51.1667,133.333 50.5,133C 54.3344,132.8 58.0011,132.633 61.5,132.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9a794e\",\n    d: \"M 249.5,130.5 C 249.859,132.766 249.192,134.599 247.5,136C 249.02,137.885 250.02,140.051 250.5,142.5C 250.957,143.298 251.624,143.631 252.5,143.5C 251.313,145.975 249.313,146.975 246.5,146.5C 246.423,145.25 245.756,144.417 244.5,144C 242.866,143.506 241.199,143.34 239.5,143.5C 239.662,141.473 239.495,139.473 239,137.5C 236.957,136.421 235.624,134.754 235,132.5C 231.737,132.787 229.57,131.12 228.5,127.5C 234.093,127.807 239.593,127.473 245,126.5C 247.069,127.264 249.236,127.764 251.5,128C 249.956,128.29 248.623,128.956 247.5,130C 248.094,130.464 248.761,130.631 249.5,130.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#534838\",\n    d: \"M 393.5,123.5 C 395.5,123.5 397.5,123.5 399.5,123.5C 399.5,132.167 399.5,140.833 399.5,149.5C 398.167,149.5 396.833,149.5 395.5,149.5C 395.368,144.115 394.034,139.115 391.5,134.5C 389.216,129.863 390.549,127.53 395.5,127.5C 395.473,125.801 394.806,124.467 393.5,123.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#372d1f\",\n    d: \"M 110.5,124.5 C 111.5,124.5 112.5,124.5 113.5,124.5C 113.884,126.929 114.551,129.263 115.5,131.5C 114.5,131.833 113.833,132.5 113.5,133.5C 112.789,138.657 112.789,143.99 113.5,149.5C 111.389,142.025 111.056,134.358 112.5,126.5C 111.757,125.818 111.091,125.151 110.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#be8d58\",\n    d: \"M 163.5,127.5 C 164.708,128.234 166.041,128.567 167.5,128.5C 167.5,128.833 167.5,129.167 167.5,129.5C 166.293,132.814 166.293,136.148 167.5,139.5C 164.794,139.575 162.127,139.908 159.5,140.5C 159.5,140.167 159.5,139.833 159.5,139.5C 160.091,138.849 160.757,138.182 161.5,137.5C 159.827,135.477 159.16,133.144 159.5,130.5C 161.973,130.912 163.306,129.912 163.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#62543d\",\n    d: \"M 34.5,134.5 C 33.448,134.351 32.448,134.517 31.5,135C 33.4211,135.36 35.0878,136.194 36.5,137.5C 35.9747,138.192 35.3081,138.692 34.5,139C 36.1066,140.049 36.7733,141.549 36.5,143.5C 31.4376,143.274 26.4376,143.608 21.5,144.5C 16.8642,143.851 12.1976,143.351 7.5,143C 8.36853,141.535 7.86853,140.369 6,139.5C 3.95339,140.609 1.78672,141.276 -0.5,141.5C -0.5,138.833 -0.5,136.167 -0.5,133.5C 4.91178,133.916 10.2451,133.916 15.5,133.5C 19.9671,133.867 24.3004,133.367 28.5,132C 26.0684,130.913 26.4017,130.413 29.5,130.5C 29.5,131.5 29.5,132.5 29.5,133.5C 31.4147,133.216 33.0813,133.549 34.5,134.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#fcc75e\",\n    d: \"M 183.5,134.5 C 183.833,134.5 184.167,134.5 184.5,134.5C 186.771,135.684 189.105,136.684 191.5,137.5C 191.157,139.483 191.824,140.817 193.5,141.5C 193.5,141.833 193.5,142.167 193.5,142.5C 189.99,142.309 186.823,140.643 184,137.5C 183.517,136.552 183.351,135.552 183.5,134.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8c6d47\",\n    d: \"M 249.5,130.5 C 250.5,130.5 251.5,130.5 252.5,130.5C 254.089,131.872 255.422,133.539 256.5,135.5C 259.41,134.703 261.743,135.703 263.5,138.5C 265.416,137.752 267.416,137.752 269.5,138.5C 269.782,139.778 270.449,140.778 271.5,141.5C 271.5,142.167 271.5,142.833 271.5,143.5C 271.423,144.75 270.756,145.583 269.5,146C 267.866,146.494 266.199,146.66 264.5,146.5C 263.909,145.849 263.243,145.182 262.5,144.5C 259.232,143.513 255.898,143.18 252.5,143.5C 251.624,143.631 250.957,143.298 250.5,142.5C 250.02,140.051 249.02,137.885 247.5,136C 249.192,134.599 249.859,132.766 249.5,130.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#614d34\",\n    d: \"M 21.5,144.5 C 23.631,145.314 25.9644,145.814 28.5,146C 29.1667,146.667 29.8333,147.333 30.5,148C 35.6566,148.179 40.6566,149.013 45.5,150.5C 38.1029,150.624 30.6029,150.957 23,151.5C 15.2736,150.148 7.44031,149.481 -0.5,149.5C -0.5,146.833 -0.5,144.167 -0.5,141.5C 1.78672,141.276 3.95339,140.609 6,139.5C 7.86853,140.369 8.36853,141.535 7.5,143C 12.1976,143.351 16.8642,143.851 21.5,144.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#695e4a\",\n    d: \"M 98.5,133.5 C 98.8333,133.5 99.1667,133.5 99.5,133.5C 100.609,133.557 101.609,133.89 102.5,134.5C 102.662,136.527 102.495,138.527 102,140.5C 101.764,142.119 100.931,143.119 99.5,143.5C 99.1785,141.042 98.1785,138.875 96.5,137C 96.9783,135.697 97.645,134.531 98.5,133.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f5b459\",\n    d: \"M 175.5,134.5 C 178.078,135.254 180.744,135.254 183.5,134.5C 183.351,135.552 183.517,136.552 184,137.5C 186.823,140.643 189.99,142.309 193.5,142.5C 193.5,144.833 193.5,147.167 193.5,149.5C 193.5,149.833 193.5,150.167 193.5,150.5C 192.833,150.5 192.167,150.5 191.5,150.5C 191.5,148.5 191.5,146.5 191.5,144.5C 186.122,143.27 180.789,143.27 175.5,144.5C 175.5,143.167 175.5,141.833 175.5,140.5C 175.5,138.5 175.5,136.5 175.5,134.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c78e51\",\n    d: \"M 167.5,129.5 C 170.674,129.952 171.007,130.952 168.5,132.5C 170.107,134.917 171.107,137.584 171.5,140.5C 167.464,140.282 166.13,141.949 167.5,145.5C 166.178,145.33 165.011,145.663 164,146.5C 162.804,144.714 161.304,143.381 159.5,142.5C 159.5,141.833 159.5,141.167 159.5,140.5C 162.127,139.908 164.794,139.575 167.5,139.5C 166.293,136.148 166.293,132.814 167.5,129.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#544923\",\n    d: \"M 197.5,136.5 C 196.746,139.078 196.746,141.744 197.5,144.5C 197.5,144.833 197.5,145.167 197.5,145.5C 197.167,145.5 196.833,145.5 196.5,145.5C 196.483,143.435 196.15,141.435 195.5,139.5C 195.5,139.167 195.5,138.833 195.5,138.5C 195.5,138.167 195.5,137.833 195.5,137.5C 196.167,137.167 196.833,136.833 197.5,136.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ecae56\",\n    d: \"M 211.5,131.5 C 213.03,132.067 214.53,132.733 216,133.5C 217.316,136.688 217.816,140.022 217.5,143.5C 215.5,143.5 213.5,143.5 211.5,143.5C 211.167,143.5 210.833,143.5 210.5,143.5C 210.307,139.434 210.64,135.434 211.5,131.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#695337\",\n    d: \"M 36.5,143.5 C 41.8333,143.5 47.1667,143.5 52.5,143.5C 55.0175,145.735 58.0175,147.235 61.5,148C 67.6326,148.106 73.6326,147.939 79.5,147.5C 80.5981,148.397 80.5981,149.23 79.5,150C 70.8397,150.5 62.1731,150.666 53.5,150.5C 50.8333,150.5 48.1667,150.5 45.5,150.5C 40.6566,149.013 35.6566,148.179 30.5,148C 29.8333,147.333 29.1667,146.667 28.5,146C 25.9644,145.814 23.631,145.314 21.5,144.5C 26.4376,143.608 31.4376,143.274 36.5,143.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#735b3c\",\n    d: \"M 52.5,143.5 C 60.8333,143.5 69.1667,143.5 77.5,143.5C 78.552,143.351 79.552,143.517 80.5,144C 79.6634,145.011 79.33,146.178 79.5,147.5C 73.6326,147.939 67.6326,148.106 61.5,148C 58.0175,147.235 55.0175,145.735 52.5,143.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#775739\",\n    d: \"M 303.5,140.5 C 303.5,141.5 303.5,142.5 303.5,143.5C 312.833,143.5 322.167,143.5 331.5,143.5C 329.21,146.22 326.21,147.72 322.5,148C 310.631,148.682 298.964,149.849 287.5,151.5C 281.949,151.527 276.616,152.194 271.5,153.5C 257.841,154.073 244.174,154.406 230.5,154.5C 228.167,154.5 225.833,154.5 223.5,154.5C 224.919,153.549 226.585,153.216 228.5,153.5C 233.167,153.5 237.833,153.5 242.5,153.5C 254.785,152.044 267.118,151.044 279.5,150.5C 279.5,149.5 279.5,148.5 279.5,147.5C 282.187,147.664 284.854,147.497 287.5,147C 285.833,146.667 284.167,146.333 282.5,146C 284.952,145.71 287.285,145.044 289.5,144C 283.509,143.501 277.509,143.334 271.5,143.5C 271.5,142.833 271.5,142.167 271.5,141.5C 274.709,141.411 277.875,141.744 281,142.5C 281.864,141.278 283.53,140.278 286,139.5C 290.063,139.895 293.896,140.895 297.5,142.5C 299.179,140.896 301.179,140.229 303.5,140.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#806134\",\n    d: \"M 195.5,139.5 C 196.15,141.435 196.483,143.435 196.5,145.5C 195.656,149.099 195.323,152.766 195.5,156.5C 194.833,156.5 194.5,156.167 194.5,155.5C 194.5,153.5 194.5,151.5 194.5,149.5C 195.158,146.027 195.492,142.694 195.5,139.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d39552\",\n    d: \"M 214.5,127.5 C 215.167,127.5 215.833,127.5 216.5,127.5C 217.445,130.987 219.778,132.32 223.5,131.5C 223.5,132.167 223.5,132.833 223.5,133.5C 223.5,134.5 223.5,135.5 223.5,136.5C 227.068,136.759 228.401,138.759 227.5,142.5C 226.363,143.789 225.03,144.789 223.5,145.5C 222.082,143.692 220.082,143.025 217.5,143.5C 217.816,140.022 217.316,136.688 216,133.5C 214.53,132.733 213.03,132.067 211.5,131.5C 212.209,130.596 213.209,130.263 214.5,130.5C 214.5,129.5 214.5,128.5 214.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bc7f49\",\n    d: \"M 223.5,133.5 C 228.057,135.262 230.724,138.595 231.5,143.5C 232.833,143.5 234.167,143.5 235.5,143.5C 235.528,145.582 234.861,147.416 233.5,149C 228.324,150.75 222.991,151.583 217.5,151.5C 221.22,150.758 224.886,149.591 228.5,148C 230.037,146.89 230.703,145.39 230.5,143.5C 229.209,143.737 228.209,143.404 227.5,142.5C 228.401,138.759 227.068,136.759 223.5,136.5C 223.5,135.5 223.5,134.5 223.5,133.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#484132\",\n    d: \"M 372.5,129.5 C 375.802,136.746 376.136,144.079 373.5,151.5C 371.685,152.63 369.685,153.296 367.5,153.5C 367.5,153.167 367.5,152.833 367.5,152.5C 367.5,151.5 367.5,150.5 367.5,149.5C 367.5,149.167 367.5,148.833 367.5,148.5C 368.5,148.5 369.5,148.5 370.5,148.5C 371.793,147.158 372.626,145.491 373,143.5C 373.564,138.806 373.397,134.14 372.5,129.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c3722\",\n    d: \"M 99.5,143.5 C 99.5,145.167 99.5,146.833 99.5,148.5C 97.5168,148.157 96.1834,148.824 95.5,150.5C 94.1667,149.833 92.8333,149.167 91.5,148.5C 88.3326,147.164 86.3326,144.831 85.5,141.5C 90.1333,143.318 94.7999,143.985 99.5,143.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0806\",\n    d: \"M 108.5,69.5 C 108.5,71.1667 108.5,72.8333 108.5,74.5C 107.347,80.3188 107.181,86.3188 108,92.5C 108.5,93 109,93.5 109.5,94C 107.972,95.6477 107.305,97.6477 107.5,100C 107.926,105.678 108.593,111.178 109.5,116.5C 109.194,119.385 109.527,122.052 110.5,124.5C 111.091,125.151 111.757,125.818 112.5,126.5C 111.056,134.358 111.389,142.025 113.5,149.5C 113.232,151.099 113.566,152.432 114.5,153.5C 114.737,154.791 114.404,155.791 113.5,156.5C 113.607,154.621 113.107,154.288 112,155.5C 111.167,154.5 110.333,153.5 109.5,152.5C 108.5,153.833 107.5,153.833 106.5,152.5C 106.232,158.395 105.899,164.395 105.5,170.5C 104.305,170.134 103.639,169.301 103.5,168C 104.287,165.901 104.62,163.734 104.5,161.5C 104.5,160.167 104.5,158.833 104.5,157.5C 103.908,154.873 103.575,152.206 103.5,149.5C 104.8,144.6 104.8,139.6 103.5,134.5C 104.769,127.642 104.435,120.976 102.5,114.5C 102.167,114.5 101.833,114.5 101.5,114.5C 102.04,107.591 101.373,100.924 99.5,94.5C 99.8039,93.8501 100.137,93.1835 100.5,92.5C 98.443,90.731 96.6097,88.731 95,86.5C 94.2599,85.2506 94.4265,84.2506 95.5,83.5C 97.3186,84.5845 98.9853,85.9178 100.5,87.5C 103.361,81.1758 104.194,74.5092 103,67.5C 101.6,66.252 100.1,65.252 98.5,64.5C 98.5,64.1667 98.5,63.8333 98.5,63.5C 98.3691,62.6236 98.7025,61.9569 99.5,61.5C 100.906,62.9507 102.406,64.2841 104,65.5C 104.399,65.2716 104.565,64.9382 104.5,64.5C 104.977,62.01 106.311,60.01 108.5,58.5C 108.782,62.0369 108.782,65.7036 108.5,69.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#705137\",\n    d: \"M 131.5,141.5 C 131.292,143.92 131.626,146.253 132.5,148.5C 130.956,149.622 129.623,149.289 128.5,147.5C 127.548,149.045 127.215,150.712 127.5,152.5C 130.385,152.194 133.052,152.527 135.5,153.5C 131.167,153.5 126.833,153.5 122.5,153.5C 121.624,153.631 120.957,153.298 120.5,152.5C 121.833,150.833 121.833,149.167 120.5,147.5C 123.413,145.099 123.079,143.766 119.5,143.5C 121.045,140.891 122.712,140.891 124.5,143.5C 126.51,141.829 128.843,141.162 131.5,141.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#371f0e\",\n    d: \"M 205.5,134.5 C 205.833,134.5 206.167,134.5 206.5,134.5C 206.5,135.167 206.833,135.5 207.5,135.5C 207.767,143.222 207.434,150.889 206.5,158.5C 206.5,158.833 206.5,159.167 206.5,159.5C 206.167,159.5 205.833,159.5 205.5,159.5C 206.68,151.139 206.68,142.805 205.5,134.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d09a65\",\n    d: \"M 208.5,137.5 C 209.167,139.5 209.833,141.5 210.5,143.5C 210.152,147.085 210.819,150.418 212.5,153.5C 211.833,153.5 211.167,153.5 210.5,153.5C 208.554,148.604 207.887,143.271 208.5,137.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#845d3a\",\n    d: \"M 271.5,143.5 C 277.509,143.334 283.509,143.501 289.5,144C 287.285,145.044 284.952,145.71 282.5,146C 284.167,146.333 285.833,146.667 287.5,147C 284.854,147.497 282.187,147.664 279.5,147.5C 279.5,148.5 279.5,149.5 279.5,150.5C 267.118,151.044 254.785,152.044 242.5,153.5C 249.67,150.843 257.003,148.51 264.5,146.5C 266.199,146.66 267.866,146.494 269.5,146C 270.756,145.583 271.423,144.75 271.5,143.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a77544\",\n    d: \"M 159.5,139.5 C 159.5,139.833 159.5,140.167 159.5,140.5C 159.5,141.167 159.5,141.833 159.5,142.5C 150.4,143.417 150.4,144.75 159.5,146.5C 159.281,147.675 159.614,148.675 160.5,149.5C 163.708,150.609 166.708,151.942 169.5,153.5C 165.167,153.5 160.833,153.5 156.5,153.5C 156.167,153.5 155.833,153.5 155.5,153.5C 155.5,153.167 155.5,152.833 155.5,152.5C 150.488,150.315 145.155,148.815 139.5,148C 137.893,146.951 137.227,145.451 137.5,143.5C 138.167,143.5 138.833,143.5 139.5,143.5C 142.898,143.82 146.232,143.487 149.5,142.5C 151.524,140.31 153.357,137.977 155,135.5C 156.371,137.041 157.871,138.375 159.5,139.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d59049\",\n    d: \"M 171.5,140.5 C 172.702,141.405 174.036,141.405 175.5,140.5C 175.5,141.833 175.5,143.167 175.5,144.5C 179.222,146.929 183.222,149.096 187.5,151C 189.066,151.765 190.399,151.598 191.5,150.5C 192.167,150.5 192.833,150.5 193.5,150.5C 193.5,151.5 193.5,152.5 193.5,153.5C 188.833,153.5 184.167,153.5 179.5,153.5C 174.913,151.744 170.913,149.078 167.5,145.5C 166.13,141.949 167.464,140.282 171.5,140.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d5a762\",\n    d: \"M 193.5,138.5 C 193.833,138.5 194.167,138.5 194.5,138.5C 194.833,138.5 195.167,138.5 195.5,138.5C 195.5,138.833 195.5,139.167 195.5,139.5C 195.492,142.694 195.158,146.027 194.5,149.5C 194.167,149.5 193.833,149.5 193.5,149.5C 193.5,147.167 193.5,144.833 193.5,142.5C 193.5,142.167 193.5,141.833 193.5,141.5C 193.5,140.5 193.5,139.5 193.5,138.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#84572b\",\n    d: \"M 207.5,135.5 C 208.338,135.842 208.672,136.508 208.5,137.5C 207.887,143.271 208.554,148.604 210.5,153.5C 212.607,154.468 214.941,154.802 217.5,154.5C 216.449,155.222 215.782,156.222 215.5,157.5C 212.391,157.264 209.391,157.597 206.5,158.5C 207.434,150.889 207.767,143.222 207.5,135.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#956840\",\n    d: \"M 252.5,143.5 C 255.898,143.18 259.232,143.513 262.5,144.5C 263.243,145.182 263.909,145.849 264.5,146.5C 257.003,148.51 249.67,150.843 242.5,153.5C 237.833,153.5 233.167,153.5 228.5,153.5C 234.086,152.618 239.752,151.451 245.5,150C 247.727,149.296 248.06,148.129 246.5,146.5C 249.313,146.975 251.313,145.975 252.5,143.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b87e44\",\n    d: \"M 159.5,142.5 C 161.304,143.381 162.804,144.714 164,146.5C 165.011,145.663 166.178,145.33 167.5,145.5C 170.913,149.078 174.913,151.744 179.5,153.5C 176.5,153.5 173.5,153.5 170.5,153.5C 170.167,153.5 169.833,153.5 169.5,153.5C 166.708,151.942 163.708,150.609 160.5,149.5C 159.614,148.675 159.281,147.675 159.5,146.5C 150.4,144.75 150.4,143.417 159.5,142.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#f2a448\",\n    d: \"M 191.5,150.5 C 190.399,151.598 189.066,151.765 187.5,151C 183.222,149.096 179.222,146.929 175.5,144.5C 180.789,143.27 186.122,143.27 191.5,144.5C 191.5,146.5 191.5,148.5 191.5,150.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#684f32\",\n    d: \"M 370.5,148.5 C 369.5,148.5 368.5,148.5 367.5,148.5C 364.765,147.057 361.765,146.057 358.5,145.5C 356.792,145.703 355.459,146.536 354.5,148C 344.031,149.804 333.531,150.304 323,149.5C 311.173,150.291 299.34,150.958 287.5,151.5C 298.964,149.849 310.631,148.682 322.5,148C 326.21,147.72 329.21,146.22 331.5,143.5C 334.711,143.988 337.544,143.321 340,141.5C 340.71,142.973 341.876,143.64 343.5,143.5C 343.833,139.5 344.167,139.5 344.5,143.5C 346.833,143.5 349.167,143.5 351.5,143.5C 351.5,142.5 351.5,141.5 351.5,140.5C 357.118,139.782 362.451,138.782 367.5,137.5C 371.771,140.16 372.771,143.826 370.5,148.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#936840\",\n    d: \"M 137.5,143.5 C 137.227,145.451 137.893,146.951 139.5,148C 145.155,148.815 150.488,150.315 155.5,152.5C 149.075,152.87 142.742,152.37 136.5,151C 135.892,149.769 135.559,148.436 135.5,147C 135.608,145.319 136.275,144.152 137.5,143.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#281508\",\n    d: \"M 196.5,145.5 C 196.833,145.5 197.167,145.5 197.5,145.5C 197.244,149.65 197.244,153.65 197.5,157.5C 197.167,157.5 196.833,157.5 196.5,157.5C 196.167,157.5 195.833,157.5 195.5,157.5C 195.5,157.167 195.5,156.833 195.5,156.5C 195.323,152.766 195.656,149.099 196.5,145.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#594935\",\n    d: \"M 113.5,133.5 C 113.201,135.604 113.534,137.604 114.5,139.5C 115.518,138.807 116.518,138.141 117.5,137.5C 118.497,137.47 119.164,137.97 119.5,139C 117.672,140.163 116.672,141.83 116.5,144C 117.642,147.12 118.642,146.953 119.5,143.5C 123.079,143.766 123.413,145.099 120.5,147.5C 121.833,149.167 121.833,150.833 120.5,152.5C 120.957,153.298 121.624,153.631 122.5,153.5C 122.5,153.833 122.5,154.167 122.5,154.5C 120.194,154.007 117.861,153.674 115.5,153.5C 115.167,153.5 114.833,153.5 114.5,153.5C 113.566,152.432 113.232,151.099 113.5,149.5C 112.789,143.99 112.789,138.657 113.5,133.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cc8445\",\n    d: \"M 227.5,142.5 C 228.209,143.404 229.209,143.737 230.5,143.5C 230.703,145.39 230.037,146.89 228.5,148C 224.886,149.591 221.22,150.758 217.5,151.5C 216.22,152.931 214.553,153.598 212.5,153.5C 210.819,150.418 210.152,147.085 210.5,143.5C 210.833,143.5 211.167,143.5 211.5,143.5C 211.033,146.38 211.866,148.713 214,150.5C 216.668,147.991 219.835,146.325 223.5,145.5C 225.03,144.789 226.363,143.789 227.5,142.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#e49146\",\n    d: \"M 211.5,143.5 C 213.5,143.5 215.5,143.5 217.5,143.5C 220.082,143.025 222.082,143.692 223.5,145.5C 219.835,146.325 216.668,147.991 214,150.5C 211.866,148.713 211.033,146.38 211.5,143.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a67042\",\n    d: \"M 235.5,143.5 C 236.833,143.5 238.167,143.5 239.5,143.5C 241.199,143.34 242.866,143.506 244.5,144C 245.756,144.417 246.423,145.25 246.5,146.5C 248.06,148.129 247.727,149.296 245.5,150C 239.752,151.451 234.086,152.618 228.5,153.5C 226.585,153.216 224.919,153.549 223.5,154.5C 221.5,154.5 219.5,154.5 217.5,154.5C 214.941,154.802 212.607,154.468 210.5,153.5C 211.167,153.5 211.833,153.5 212.5,153.5C 214.553,153.598 216.22,152.931 217.5,151.5C 222.991,151.583 228.324,150.75 233.5,149C 234.861,147.416 235.528,145.582 235.5,143.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#654d35\",\n    d: \"M 367.5,148.5 C 367.5,148.833 367.5,149.167 367.5,149.5C 362.177,148.898 356.844,149.398 351.5,151C 343.324,151.36 335.157,151.86 327,152.5C 321.762,151.693 316.596,152.026 311.5,153.5C 306.167,153.5 300.833,153.5 295.5,153.5C 287.5,153.5 279.5,153.5 271.5,153.5C 276.616,152.194 281.949,151.527 287.5,151.5C 299.34,150.958 311.173,150.291 323,149.5C 333.531,150.304 344.031,149.804 354.5,148C 355.459,146.536 356.792,145.703 358.5,145.5C 361.765,146.057 364.765,147.057 367.5,148.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5c4b37\",\n    d: \"M 91.5,148.5 C 92.8333,149.167 94.1667,149.833 95.5,150.5C 95.5,151.5 95.5,152.5 95.5,153.5C 63.5,153.5 31.5,153.5 -0.5,153.5C -0.5,152.167 -0.5,150.833 -0.5,149.5C 7.44031,149.481 15.2736,150.148 23,151.5C 30.6029,150.957 38.1029,150.624 45.5,150.5C 48.1667,150.5 50.8333,150.5 53.5,150.5C 63.0376,152.457 72.5376,153.124 82,152.5C 84.8236,151.946 87.657,151.446 90.5,151C 91.2524,150.329 91.5858,149.496 91.5,148.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#584533\",\n    d: \"M 367.5,149.5 C 367.5,150.5 367.5,151.5 367.5,152.5C 348.831,152.745 330.165,153.078 311.5,153.5C 316.596,152.026 321.762,151.693 327,152.5C 335.157,151.86 343.324,151.36 351.5,151C 356.844,149.398 362.177,148.898 367.5,149.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#815f3e\",\n    d: \"M 139.5,138.5 C 139.608,140.514 138.942,142.18 137.5,143.5C 136.275,144.152 135.608,145.319 135.5,147C 135.559,148.436 135.892,149.769 136.5,151C 142.742,152.37 149.075,152.87 155.5,152.5C 155.5,152.833 155.5,153.167 155.5,153.5C 148.833,153.5 142.167,153.5 135.5,153.5C 133.052,152.527 130.385,152.194 127.5,152.5C 127.215,150.712 127.548,149.045 128.5,147.5C 129.623,149.289 130.956,149.622 132.5,148.5C 131.626,146.253 131.292,143.92 131.5,141.5C 132.167,140.833 132.833,140.167 133.5,139.5C 135.435,138.85 137.435,138.517 139.5,138.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#090b13\",\n    d: \"M 202.5,138.5 C 204.092,145.698 203.425,152.698 200.5,159.5C 199.077,157.223 198.411,154.723 198.5,152C 199.123,147.853 199.456,143.686 199.5,139.5C 200.391,138.89 201.391,138.557 202.5,138.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f3224\",\n    d: \"M 102.5,134.5 C 102.833,134.5 103.167,134.5 103.5,134.5C 104.8,139.6 104.8,144.6 103.5,149.5C 102.404,151.103 101.07,152.603 99.5,154C 66.1683,154.5 32.835,154.667 -0.5,154.5C -0.5,154.167 -0.5,153.833 -0.5,153.5C 31.5,153.5 63.5,153.5 95.5,153.5C 95.5,152.5 95.5,151.5 95.5,150.5C 96.1834,148.824 97.5168,148.157 99.5,148.5C 99.5,146.833 99.5,145.167 99.5,143.5C 100.931,143.119 101.764,142.119 102,140.5C 102.495,138.527 102.662,136.527 102.5,134.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#503318\",\n    d: \"M 122.5,154.5 C 122.5,154.167 122.5,153.833 122.5,153.5C 126.833,153.5 131.167,153.5 135.5,153.5C 142.167,153.5 148.833,153.5 155.5,153.5C 155.833,153.5 156.167,153.5 156.5,153.5C 159.477,153.902 162.143,154.902 164.5,156.5C 161.167,156.5 157.833,156.5 154.5,156.5C 144.219,154.524 133.552,153.857 122.5,154.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9e642b\",\n    d: \"M 193.5,149.5 C 193.833,149.5 194.167,149.5 194.5,149.5C 194.5,151.5 194.5,153.5 194.5,155.5C 192.447,155.402 190.78,156.069 189.5,157.5C 188.167,157.5 186.833,157.5 185.5,157.5C 184.833,157.5 184.167,157.5 183.5,157.5C 184.091,156.849 184.757,156.182 185.5,155.5C 183.257,154.526 180.924,154.192 178.5,154.5C 175.615,154.806 172.948,154.473 170.5,153.5C 173.5,153.5 176.5,153.5 179.5,153.5C 184.167,153.5 188.833,153.5 193.5,153.5C 193.5,152.5 193.5,151.5 193.5,150.5C 193.5,150.167 193.5,149.833 193.5,149.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#191209\",\n    d: \"M 373.5,151.5 C 373.047,152.458 372.381,153.292 371.5,154C 373.437,154.122 374.77,154.955 375.5,156.5C 362.167,156.5 348.833,156.5 335.5,156.5C 332.482,156.665 329.482,156.498 326.5,156C 327.167,155.667 327.833,155.333 328.5,155C 341.47,153.763 354.47,153.263 367.5,153.5C 369.685,153.296 371.685,152.63 373.5,151.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#382613\",\n    d: \"M 115.5,153.5 C 117.861,153.674 120.194,154.007 122.5,154.5C 133.552,153.857 144.219,154.524 154.5,156.5C 144.319,156.173 134.319,156.506 124.5,157.5C 121.661,157.031 118.995,157.031 116.5,157.5C 116.567,156.041 116.234,154.708 115.5,153.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#67431d\",\n    d: \"M 156.5,153.5 C 160.833,153.5 165.167,153.5 169.5,153.5C 169.833,153.5 170.167,153.5 170.5,153.5C 172.948,154.473 175.615,154.806 178.5,154.5C 177.167,155.5 177.167,156.5 178.5,157.5C 177.5,157.5 176.5,157.5 175.5,157.5C 172.167,157.5 168.833,157.5 165.5,157.5C 165.5,156.833 165.167,156.5 164.5,156.5C 162.143,154.902 159.477,153.902 156.5,153.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#723c0c\",\n    d: \"M 178.5,154.5 C 180.924,154.192 183.257,154.526 185.5,155.5C 184.757,156.182 184.091,156.849 183.5,157.5C 182.833,157.5 182.167,157.5 181.5,157.5C 180.5,157.5 179.5,157.5 178.5,157.5C 177.167,156.5 177.167,155.5 178.5,154.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#684120\",\n    d: \"M 217.5,154.5 C 219.5,154.5 221.5,154.5 223.5,154.5C 225.833,154.5 228.167,154.5 230.5,154.5C 227.841,154.917 225.508,155.917 223.5,157.5C 221.167,157.5 218.833,157.5 216.5,157.5C 216.167,157.5 215.833,157.5 215.5,157.5C 215.782,156.222 216.449,155.222 217.5,154.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#50381f\",\n    d: \"M 271.5,153.5 C 279.5,153.5 287.5,153.5 295.5,153.5C 281.336,154.523 267.002,155.357 252.5,156C 253.737,156.232 254.737,156.732 255.5,157.5C 244.833,157.5 234.167,157.5 223.5,157.5C 225.508,155.917 227.841,154.917 230.5,154.5C 244.174,154.406 257.841,154.073 271.5,153.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#362a1a\",\n    d: \"M 367.5,152.5 C 367.5,152.833 367.5,153.167 367.5,153.5C 354.47,153.263 341.47,153.763 328.5,155C 327.833,155.333 327.167,155.667 326.5,156C 329.482,156.498 332.482,156.665 335.5,156.5C 335.5,156.833 335.5,157.167 335.5,157.5C 314.167,157.5 292.833,157.5 271.5,157.5C 266.167,157.5 260.833,157.5 255.5,157.5C 254.737,156.732 253.737,156.232 252.5,156C 267.002,155.357 281.336,154.523 295.5,153.5C 300.833,153.5 306.167,153.5 311.5,153.5C 330.165,153.078 348.831,152.745 367.5,152.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#251f15\",\n    d: \"M 103.5,149.5 C 103.575,152.206 103.908,154.873 104.5,157.5C 87.2576,157.356 69.9242,157.356 52.5,157.5C 34.8333,157.5 17.1667,157.5 -0.5,157.5C -0.5,156.5 -0.5,155.5 -0.5,154.5C 32.835,154.667 66.1683,154.5 99.5,154C 101.07,152.603 102.404,151.103 103.5,149.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c8a875\",\n    d: \"M 194.5,155.5 C 194.5,156.167 194.833,156.5 195.5,156.5C 195.5,156.833 195.5,157.167 195.5,157.5C 193.5,157.5 191.5,157.5 189.5,157.5C 190.78,156.069 192.447,155.402 194.5,155.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#32322d\",\n    d: \"M -0.5,158.5 C -0.5,158.167 -0.5,157.833 -0.5,157.5C 17.1667,157.5 34.8333,157.5 52.5,157.5C 59.867,158.806 67.367,159.806 75,160.5C 77.078,162.681 76.9114,164.681 74.5,166.5C 68.4738,166.401 62.4738,166.901 56.5,168C 58.1667,168.333 59.8333,168.667 61.5,169C 60.9515,170.596 61.6182,171.763 63.5,172.5C 55.3159,172.174 47.3159,172.508 39.5,173.5C 38.4324,174.434 37.099,174.768 35.5,174.5C 35.4142,173.504 35.7476,172.671 36.5,172C 38.8947,171.319 41.228,170.485 43.5,169.5C 43.2907,168.914 42.9574,168.414 42.5,168C 45.5535,167.821 48.5535,167.321 51.5,166.5C 50.91,165.201 49.91,164.368 48.5,164C 50.4812,163.395 50.8146,162.395 49.5,161C 46.341,159.439 43.1743,159.272 40,160.5C 26.5677,159.624 13.0677,158.957 -0.5,158.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#292a29\",\n    d: \"M -0.5,158.5 C 13.0677,158.957 26.5677,159.624 40,160.5C 43.1743,159.272 46.341,159.439 49.5,161C 50.8146,162.395 50.4812,163.395 48.5,164C 49.91,164.368 50.91,165.201 51.5,166.5C 48.5535,167.321 45.5535,167.821 42.5,168C 42.9574,168.414 43.2907,168.914 43.5,169.5C 41.228,170.485 38.8947,171.319 36.5,172C 35.7476,172.671 35.4142,173.504 35.5,174.5C 32.0542,173.293 28.7209,173.46 25.5,175C 25.8333,175.333 26.1667,175.667 26.5,176C 25.5,176.833 24.5,177.667 23.5,178.5C 31.6464,182.928 31.3131,184.261 22.5,182.5C 22.5,181.167 22.5,179.833 22.5,178.5C 20.4727,178.662 18.4727,178.495 16.5,178C 19.3278,177.363 21.3278,175.696 22.5,173C 22.1667,172.667 21.8333,172.333 21.5,172C 14.293,173.11 6.95963,173.61 -0.5,173.5C -0.5,168.5 -0.5,163.5 -0.5,158.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#363630\",\n    d: \"M 104.5,157.5 C 104.5,158.833 104.5,160.167 104.5,161.5C 102.283,162.369 99.9496,162.702 97.5,162.5C 97.2389,159.367 95.5723,158.2 92.5,159C 93.2546,161.175 94.088,163.341 95,165.5C 96.9717,166.305 98.4717,167.639 99.5,169.5C 95.4033,171.239 91.2367,171.573 87,170.5C 85.6739,170.755 84.6739,171.422 84,172.5C 83.5,172 83,171.5 82.5,171C 77.8439,170.335 73.1772,169.835 68.5,169.5C 68.5,170.5 68.5,171.5 68.5,172.5C 66.8333,172.5 65.1667,172.5 63.5,172.5C 61.6182,171.763 60.9515,170.596 61.5,169C 59.8333,168.667 58.1667,168.333 56.5,168C 62.4738,166.901 68.4738,166.401 74.5,166.5C 76.9114,164.681 77.078,162.681 75,160.5C 67.367,159.806 59.867,158.806 52.5,157.5C 69.9242,157.356 87.2576,157.356 104.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a644b\",\n    d: \"M 216.5,157.5 C 218.833,157.5 221.167,157.5 223.5,157.5C 223.5,158.167 223.5,158.833 223.5,159.5C 221.264,160.389 219.264,161.722 217.5,163.5C 218.263,164.719 219.263,165.719 220.5,166.5C 219.624,167.251 218.624,167.751 217.5,168C 220.194,170.552 219.527,171.719 215.5,171.5C 215.5,172.833 215.5,174.167 215.5,175.5C 213.712,175.215 212.045,175.548 210.5,176.5C 212.8,177.278 214.966,178.278 217,179.5C 218,178.833 219,178.167 220,177.5C 220.5,177.833 221,178.167 221.5,178.5C 220.626,180.747 220.292,183.08 220.5,185.5C 217.369,187.358 214.869,186.691 213,183.5C 211.989,184.337 210.822,184.67 209.5,184.5C 208.912,181.39 208.245,178.39 207.5,175.5C 207.167,174.167 206.833,172.833 206.5,171.5C 209.054,170.612 211.721,170.279 214.5,170.5C 214.649,169.448 214.483,168.448 214,167.5C 211.877,167.034 210.377,165.867 209.5,164C 209.667,163.5 209.833,163 210,162.5C 213.903,163.458 216.07,161.791 216.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#444136\",\n    d: \"M 271.5,157.5 C 292.833,157.5 314.167,157.5 335.5,157.5C 334.923,159.652 333.756,159.985 332,158.5C 324.579,159.316 317.079,159.816 309.5,160C 310.977,161.884 312.31,163.884 313.5,166C 317.709,167.189 321.376,166.356 324.5,163.5C 325.148,165.149 326.148,166.482 327.5,167.5C 329.429,166.62 331.263,165.62 333,164.5C 334.059,164.63 334.892,165.13 335.5,166C 334.167,166.667 334.167,167.333 335.5,168C 330.568,168.266 325.734,168.433 321,168.5C 320.5,168.833 320,169.167 319.5,169.5C 320.665,170.584 321.998,171.417 323.5,172C 320.808,172.743 318.475,173.91 316.5,175.5C 317.903,176.931 319.569,178.098 321.5,179C 317.082,179.208 312.749,179.874 308.5,181C 307.542,182.147 307.875,183.147 309.5,184C 307.974,185.887 305.974,186.887 303.5,187C 288.037,185.723 272.704,186.723 257.5,190C 258.833,190.333 260.167,190.667 261.5,191C 260.5,191.167 259.5,191.333 258.5,191.5C 254.962,189.863 251.296,189.363 247.5,190C 248.167,190.333 248.833,190.667 249.5,191C 246.693,191.037 244.026,191.204 241.5,191.5C 239.84,190.828 238.507,189.828 237.5,188.5C 241.144,188.141 244.477,186.975 247.5,185C 254.144,184.113 260.811,183.446 267.5,183C 268.641,182.259 268.641,181.425 267.5,180.5C 268.167,180.167 268.833,179.833 269.5,179.5C 270.949,180.28 272.449,180.946 274,181.5C 278.441,180.378 282.941,179.711 287.5,179.5C 286.629,176.938 286.629,174.272 287.5,171.5C 279.399,172.819 271.399,173.153 263.5,172.5C 263.5,171.5 263.5,170.5 263.5,169.5C 267.015,169.712 270.348,169.712 273.5,169.5C 270.833,167.833 268.167,166.167 265.5,164.5C 270.013,164.257 272.013,161.924 271.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#31302b\",\n    d: \"M 335.5,157.5 C 335.5,157.167 335.5,156.833 335.5,156.5C 348.833,156.5 362.167,156.5 375.5,156.5C 378.002,162.595 379.669,168.928 380.5,175.5C 378.78,173.342 377.947,170.675 378,167.5C 377.667,167.167 377.333,166.833 377,166.5C 376.517,167.448 376.351,168.448 376.5,169.5C 375.325,169.719 374.325,169.386 373.5,168.5C 372.781,165.687 372.114,162.854 371.5,160C 371.095,159.055 370.428,158.388 369.5,158C 363.509,157.501 357.509,157.334 351.5,157.5C 346.167,157.5 340.833,157.5 335.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cfa979\",\n    d: \"M 185.5,157.5 C 186.833,157.5 188.167,157.5 189.5,157.5C 191.046,159.882 191.713,162.549 191.5,165.5C 189.856,165.714 188.356,165.38 187,164.5C 186.56,162.134 186.06,159.801 185.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ecd2aa\",\n    d: \"M 189.5,157.5 C 191.5,157.5 193.5,157.5 195.5,157.5C 195.833,157.5 196.167,157.5 196.5,157.5C 195.908,160.127 195.575,162.794 195.5,165.5C 195.5,166.167 195.5,166.833 195.5,167.5C 194.5,168.833 193.5,170.167 192.5,171.5C 192.459,169.534 192.125,167.534 191.5,165.5C 191.713,162.549 191.046,159.882 189.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b1a794\",\n    d: \"M 196.5,157.5 C 196.833,157.5 197.167,157.5 197.5,157.5C 197.5,159.5 197.5,161.5 197.5,163.5C 196.662,163.842 196.328,164.508 196.5,165.5C 196.167,165.5 195.833,165.5 195.5,165.5C 195.575,162.794 195.908,160.127 196.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#474239\",\n    d: \"M 124.5,157.5 C 128.167,157.5 131.833,157.5 135.5,157.5C 135.141,159.766 135.808,161.599 137.5,163C 140.305,163.442 142.972,162.942 145.5,161.5C 148.115,162.269 150.781,162.603 153.5,162.5C 153.5,163.5 153.5,164.5 153.5,165.5C 150.68,165.248 148.014,165.748 145.5,167C 147.833,167.333 150.167,167.667 152.5,168C 153.38,169.356 153.714,170.856 153.5,172.5C 151.473,172.338 149.473,172.505 147.5,173C 149.002,173.583 150.335,174.416 151.5,175.5C 148.574,176.875 145.574,178.042 142.5,179C 146.664,179.813 150.664,179.313 154.5,177.5C 155.087,178.233 155.087,179.233 154.5,180.5C 149.833,180.5 145.167,180.5 140.5,180.5C 140.5,179.167 140.5,177.833 140.5,176.5C 143.187,176.664 145.854,176.497 148.5,176C 148.167,175.667 147.833,175.333 147.5,175C 141.58,173.739 135.58,172.739 129.5,172C 126.766,171.002 125.099,169.168 124.5,166.5C 125.995,166.585 126.995,165.919 127.5,164.5C 125.955,163.548 124.288,163.215 122.5,163.5C 122.649,162.448 122.483,161.448 122,160.5C 119.853,159.887 117.686,159.221 115.5,158.5C 115.624,157.893 115.957,157.56 116.5,157.5C 118.995,157.031 121.661,157.031 124.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#120805\",\n    d: \"M 203.5,130.5 C 204.345,131.671 205.011,133.005 205.5,134.5C 206.68,142.805 206.68,151.139 205.5,159.5C 204.833,159.5 204.5,159.833 204.5,160.5C 203.679,163.641 203.179,166.975 203,170.5C 201.482,171.163 200.315,172.163 199.5,173.5C 198.883,173.389 198.383,173.056 198,172.5C 197.502,169.518 197.335,166.518 197.5,163.5C 197.5,161.5 197.5,159.5 197.5,157.5C 197.244,153.65 197.244,149.65 197.5,145.5C 197.5,145.167 197.5,144.833 197.5,144.5C 198.167,142.833 198.833,141.167 199.5,139.5C 199.456,143.686 199.123,147.853 198.5,152C 198.411,154.723 199.077,157.223 200.5,159.5C 203.425,152.698 204.092,145.698 202.5,138.5C 203.043,138.44 203.376,138.107 203.5,137.5C 202.833,135.833 202.167,134.167 201.5,132.5C 201.855,131.478 202.522,130.811 203.5,130.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#957959\",\n    d: \"M 215.5,157.5 C 215.833,157.5 216.167,157.5 216.5,157.5C 216.07,161.791 213.903,163.458 210,162.5C 209.833,163 209.667,163.5 209.5,164C 210.377,165.867 211.877,167.034 214,167.5C 214.483,168.448 214.649,169.448 214.5,170.5C 211.721,170.279 209.054,170.612 206.5,171.5C 206.5,167.5 206.5,163.5 206.5,159.5C 206.5,159.167 206.5,158.833 206.5,158.5C 209.391,157.597 212.391,157.264 215.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#514b3c\",\n    d: \"M 255.5,157.5 C 260.833,157.5 266.167,157.5 271.5,157.5C 272.013,161.924 270.013,164.257 265.5,164.5C 268.167,166.167 270.833,167.833 273.5,169.5C 270.348,169.712 267.015,169.712 263.5,169.5C 263.5,170.5 263.5,171.5 263.5,172.5C 264.091,173.151 264.757,173.818 265.5,174.5C 262.798,175.039 260.631,176.372 259,178.5C 255.843,179.637 252.677,179.637 249.5,178.5C 249.5,177.5 249.5,176.5 249.5,175.5C 252.247,175.813 254.914,175.48 257.5,174.5C 258.791,172.41 258.124,171.076 255.5,170.5C 253.958,171.747 252.458,171.747 251,170.5C 251.51,168.62 251.343,166.787 250.5,165C 252.665,164.008 252.499,162.842 250,161.5C 248.37,162.713 246.536,163.546 244.5,164C 245.728,164.779 246.728,165.779 247.5,167C 246.524,170.789 244.358,173.623 241,175.5C 238.566,174.284 238.066,172.617 239.5,170.5C 239.5,166.833 239.5,163.167 239.5,159.5C 245.114,159.927 250.447,159.26 255.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#715b44\",\n    d: \"M 164.5,157.5 C 164.833,157.5 165.167,157.5 165.5,157.5C 168.833,157.5 172.167,157.5 175.5,157.5C 175.5,159.167 175.5,160.833 175.5,162.5C 175.31,166.923 174.643,171.256 173.5,175.5C 171.5,175.5 169.5,175.5 167.5,175.5C 168.566,171.998 167.899,168.831 165.5,166C 166.886,163.348 166.552,160.514 164.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3e3b34\",\n    d: \"M 335.5,157.5 C 340.833,157.5 346.167,157.5 351.5,157.5C 355.312,158.324 359.312,158.824 363.5,159C 362.167,159.333 360.833,159.667 359.5,160C 362.226,160.182 364.893,160.682 367.5,161.5C 360.8,162.168 354.133,163.001 347.5,164C 353.877,166.322 360.544,167.155 367.5,166.5C 367.5,168.833 367.5,171.167 367.5,173.5C 355.6,175.473 343.6,175.973 331.5,175C 330.377,173.956 329.044,173.29 327.5,173C 331.807,171.979 332.141,170.812 328.5,169.5C 326.644,170.276 325.311,171.609 324.5,173.5C 321.803,174.169 319.137,174.836 316.5,175.5C 318.475,173.91 320.808,172.743 323.5,172C 321.998,171.417 320.665,170.584 319.5,169.5C 320,169.167 320.5,168.833 321,168.5C 325.734,168.433 330.568,168.266 335.5,168C 334.167,167.333 334.167,166.667 335.5,166C 334.892,165.13 334.059,164.63 333,164.5C 331.263,165.62 329.429,166.62 327.5,167.5C 326.148,166.482 325.148,165.149 324.5,163.5C 321.376,166.356 317.709,167.189 313.5,166C 312.31,163.884 310.977,161.884 309.5,160C 317.079,159.816 324.579,159.316 332,158.5C 333.756,159.985 334.923,159.652 335.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#262626\",\n    d: \"M 399.5,157.5 C 399.5,164.167 399.5,170.833 399.5,177.5C 398.18,174.572 397.514,171.239 397.5,167.5C 397.514,163.761 398.18,160.428 399.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#644b3c\",\n    d: \"M 205.5,159.5 C 205.833,159.5 206.167,159.5 206.5,159.5C 206.5,163.5 206.5,167.5 206.5,171.5C 205.883,171.389 205.383,171.056 205,170.5C 204.502,167.183 204.335,163.85 204.5,160.5C 204.5,159.833 204.833,159.5 205.5,159.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d5b599\",\n    d: \"M 195.5,167.5 C 195.813,171.042 195.479,174.375 194.5,177.5C 193.167,177.5 191.833,177.5 190.5,177.5C 191.72,175.718 192.386,173.718 192.5,171.5C 193.5,170.167 194.5,168.833 195.5,167.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#635341\",\n    d: \"M 164.5,157.5 C 166.552,160.514 166.886,163.348 165.5,166C 167.899,168.831 168.566,171.998 167.5,175.5C 169.503,177.982 172.169,178.982 175.5,178.5C 175.5,179.833 175.5,181.167 175.5,182.5C 172.615,182.806 169.948,182.473 167.5,181.5C 170.403,179.755 170.07,178.755 166.5,178.5C 164.182,178.997 161.848,179.33 159.5,179.5C 159.715,177.226 160.382,175.059 161.5,173C 161.507,171.188 160.84,169.688 159.5,168.5C 160.603,168.002 161.603,167.669 162.5,167.5C 161.939,165.574 161.773,163.574 162,161.5C 157.941,160.051 153.774,158.884 149.5,158C 154.489,157.501 159.489,157.334 164.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b48b64\",\n    d: \"M 181.5,157.5 C 182.167,157.5 182.833,157.5 183.5,157.5C 184.167,157.5 184.833,157.5 185.5,157.5C 186.06,159.801 186.56,162.134 187,164.5C 188.356,165.38 189.856,165.714 191.5,165.5C 192.125,167.534 192.459,169.534 192.5,171.5C 192.386,173.718 191.72,175.718 190.5,177.5C 190.5,177.833 190.5,178.167 190.5,178.5C 187.539,178.536 185.206,177.536 183.5,175.5C 184.672,174.295 186.005,174.295 187.5,175.5C 188.452,173.955 188.785,172.288 188.5,170.5C 180.788,170.511 180.788,169.511 188.5,167.5C 186.168,164.182 183.834,160.849 181.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9c7551\",\n    d: \"M 175.5,157.5 C 176.5,157.5 177.5,157.5 178.5,157.5C 179.5,157.5 180.5,157.5 181.5,157.5C 183.834,160.849 186.168,164.182 188.5,167.5C 180.788,169.511 180.788,170.511 188.5,170.5C 188.785,172.288 188.452,173.955 187.5,175.5C 186.005,174.295 184.672,174.295 183.5,175.5C 182.624,175.631 181.957,175.298 181.5,174.5C 182.248,172.584 182.248,170.584 181.5,168.5C 182.043,168.44 182.376,168.107 182.5,167.5C 181.675,166.614 180.675,166.281 179.5,166.5C 179.33,165.178 179.663,164.011 180.5,163C 178.866,162.506 177.199,162.34 175.5,162.5C 175.5,160.833 175.5,159.167 175.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d2e2a\",\n    d: \"M 104.5,161.5 C 104.62,163.734 104.287,165.901 103.5,168C 103.639,169.301 104.305,170.134 105.5,170.5C 105.5,173.833 105.5,177.167 105.5,180.5C 100.833,180.5 96.1667,180.5 91.5,180.5C 78.3515,179.519 78.3515,178.686 91.5,178C 92.7596,176.186 92.7596,174.353 91.5,172.5C 90.5,172.833 89.8333,173.5 89.5,174.5C 81.7058,175.242 74.0391,175.576 66.5,175.5C 67.1055,181.61 64.9388,182.944 60,179.5C 59.1667,179.833 58.3333,180.167 57.5,180.5C 59.2882,181.283 60.2882,182.616 60.5,184.5C 59.8333,184.5 59.1667,184.5 58.5,184.5C 51.1686,184.048 43.8353,183.548 36.5,183C 37.6174,181.108 39.2841,180.275 41.5,180.5C 41.5,178.833 41.5,177.167 41.5,175.5C 43.1033,175.688 44.4366,175.188 45.5,174C 43.5273,173.505 41.5273,173.338 39.5,173.5C 47.3159,172.508 55.3159,172.174 63.5,172.5C 65.1667,172.5 66.8333,172.5 68.5,172.5C 68.5,171.5 68.5,170.5 68.5,169.5C 73.1772,169.835 77.8439,170.335 82.5,171C 83,171.5 83.5,172 84,172.5C 84.6739,171.422 85.6739,170.755 87,170.5C 91.2367,171.573 95.4033,171.239 99.5,169.5C 98.4717,167.639 96.9717,166.305 95,165.5C 94.088,163.341 93.2546,161.175 92.5,159C 95.5723,158.2 97.2389,159.367 97.5,162.5C 99.9496,162.702 102.283,162.369 104.5,161.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#262625\",\n    d: \"M 91.5,180.5 C 84.0017,181.086 76.3351,181.253 68.5,181C 65.7627,182.076 63.096,183.243 60.5,184.5C 60.2882,182.616 59.2882,181.283 57.5,180.5C 58.3333,180.167 59.1667,179.833 60,179.5C 64.9388,182.944 67.1055,181.61 66.5,175.5C 74.0391,175.576 81.7058,175.242 89.5,174.5C 89.8333,173.5 90.5,172.833 91.5,172.5C 92.7596,174.353 92.7596,176.186 91.5,178C 78.3515,178.686 78.3515,179.519 91.5,180.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#554b3d\",\n    d: \"M 124.5,157.5 C 134.319,156.506 144.319,156.173 154.5,156.5C 157.833,156.5 161.167,156.5 164.5,156.5C 165.167,156.5 165.5,156.833 165.5,157.5C 165.167,157.5 164.833,157.5 164.5,157.5C 159.489,157.334 154.489,157.501 149.5,158C 153.774,158.884 157.941,160.051 162,161.5C 161.773,163.574 161.939,165.574 162.5,167.5C 161.603,167.669 160.603,168.002 159.5,168.5C 160.84,169.688 161.507,171.188 161.5,173C 160.382,175.059 159.715,177.226 159.5,179.5C 161.848,179.33 164.182,178.997 166.5,178.5C 170.07,178.755 170.403,179.755 167.5,181.5C 163.19,180.92 158.857,180.586 154.5,180.5C 155.087,179.233 155.087,178.233 154.5,177.5C 150.664,179.313 146.664,179.813 142.5,179C 145.574,178.042 148.574,176.875 151.5,175.5C 150.335,174.416 149.002,173.583 147.5,173C 149.473,172.505 151.473,172.338 153.5,172.5C 153.714,170.856 153.38,169.356 152.5,168C 150.167,167.667 147.833,167.333 145.5,167C 148.014,165.748 150.68,165.248 153.5,165.5C 153.5,164.5 153.5,163.5 153.5,162.5C 150.781,162.603 148.115,162.269 145.5,161.5C 142.972,162.942 140.305,163.442 137.5,163C 135.808,161.599 135.141,159.766 135.5,157.5C 131.833,157.5 128.167,157.5 124.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#242625\",\n    d: \"M 35.5,174.5 C 37.099,174.768 38.4324,174.434 39.5,173.5C 41.5273,173.338 43.5273,173.505 45.5,174C 44.4366,175.188 43.1033,175.688 41.5,175.5C 41.5,177.167 41.5,178.833 41.5,180.5C 39.2841,180.275 37.6174,181.108 36.5,183C 43.8353,183.548 51.1686,184.048 58.5,184.5C 55.8112,186.117 52.8112,187.117 49.5,187.5C 34.1348,187.152 18.8014,186.985 3.5,187C 3.95735,186.586 4.29069,186.086 4.5,185.5C 2.95467,184.548 1.28801,184.215 -0.5,184.5C -0.5,180.833 -0.5,177.167 -0.5,173.5C 6.95963,173.61 14.293,173.11 21.5,172C 21.8333,172.333 22.1667,172.667 22.5,173C 21.3278,175.696 19.3278,177.363 16.5,178C 18.4727,178.495 20.4727,178.662 22.5,178.5C 22.5,179.833 22.5,181.167 22.5,182.5C 31.3131,184.261 31.6464,182.928 23.5,178.5C 24.5,177.667 25.5,176.833 26.5,176C 26.1667,175.667 25.8333,175.333 25.5,175C 28.7209,173.46 32.0542,173.293 35.5,174.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c2a24\",\n    d: \"M 114.5,153.5 C 114.833,153.5 115.167,153.5 115.5,153.5C 116.234,154.708 116.567,156.041 116.5,157.5C 115.957,157.56 115.624,157.893 115.5,158.5C 117.686,159.221 119.853,159.887 122,160.5C 122.483,161.448 122.649,162.448 122.5,163.5C 124.288,163.215 125.955,163.548 127.5,164.5C 126.995,165.919 125.995,166.585 124.5,166.5C 121.959,167.754 120.292,169.754 119.5,172.5C 120.592,175.298 122.425,175.965 125,174.5C 126.059,174.63 126.892,175.13 127.5,176C 125.715,177.163 123.715,177.83 121.5,178C 119.854,179.555 119.521,181.221 120.5,183C 122.568,183.687 124.568,183.52 126.5,182.5C 130.621,184.169 134.954,185.336 139.5,186C 148.494,186.5 157.494,186.666 166.5,186.5C 167.167,186.5 167.5,186.833 167.5,187.5C 155.162,187.667 142.829,187.5 130.5,187C 127.093,185.065 123.426,184.232 119.5,184.5C 117.249,175.248 115.249,165.915 113.5,156.5C 114.404,155.791 114.737,154.791 114.5,153.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#20120c\",\n    d: \"M 204.5,160.5 C 204.335,163.85 204.502,167.183 205,170.5C 205.383,171.056 205.883,171.389 206.5,171.5C 206.833,172.833 207.167,174.167 207.5,175.5C 207.5,178.833 207.5,182.167 207.5,185.5C 206.041,185.433 204.708,185.766 203.5,186.5C 203.665,182.818 203.499,179.152 203,175.5C 202.29,174.027 201.124,173.36 199.5,173.5C 200.315,172.163 201.482,171.163 203,170.5C 203.179,166.975 203.679,163.641 204.5,160.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#806549\",\n    d: \"M 175.5,162.5 C 177.199,162.34 178.866,162.506 180.5,163C 179.663,164.011 179.33,165.178 179.5,166.5C 180.675,166.281 181.675,166.614 182.5,167.5C 182.376,168.107 182.043,168.44 181.5,168.5C 178.795,168.38 178.128,169.38 179.5,171.5C 178.315,172.853 176.981,174.02 175.5,175C 176.793,175.49 178.127,175.657 179.5,175.5C 179.421,176.93 179.754,178.264 180.5,179.5C 179.007,180.141 178.007,181.141 177.5,182.5C 176.833,182.5 176.167,182.5 175.5,182.5C 175.5,181.167 175.5,179.833 175.5,178.5C 172.169,178.982 169.503,177.982 167.5,175.5C 169.5,175.5 171.5,175.5 173.5,175.5C 174.643,171.256 175.31,166.923 175.5,162.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6a5943\",\n    d: \"M 223.5,159.5 C 224.5,159.5 225.5,159.5 226.5,159.5C 226.33,160.822 226.663,161.989 227.5,163C 224.463,166.265 222.463,170.098 221.5,174.5C 220.127,174.343 218.793,174.51 217.5,175C 220.167,175.333 222.833,175.667 225.5,176C 222.736,178.699 223.403,180.366 227.5,181C 222.387,182.731 222.387,184.064 227.5,185C 225.19,185.497 222.857,185.663 220.5,185.5C 220.292,183.08 220.626,180.747 221.5,178.5C 221,178.167 220.5,177.833 220,177.5C 219,178.167 218,178.833 217,179.5C 214.966,178.278 212.8,177.278 210.5,176.5C 212.045,175.548 213.712,175.215 215.5,175.5C 215.5,174.167 215.5,172.833 215.5,171.5C 219.527,171.719 220.194,170.552 217.5,168C 218.624,167.751 219.624,167.251 220.5,166.5C 219.263,165.719 218.263,164.719 217.5,163.5C 219.264,161.722 221.264,160.389 223.5,159.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4f4739\",\n    d: \"M 263.5,172.5 C 271.399,173.153 279.399,172.819 287.5,171.5C 286.629,174.272 286.629,176.938 287.5,179.5C 282.941,179.711 278.441,180.378 274,181.5C 272.449,180.946 270.949,180.28 269.5,179.5C 268.833,179.833 268.167,180.167 267.5,180.5C 268.641,181.425 268.641,182.259 267.5,183C 260.811,183.446 254.144,184.113 247.5,185C 244.477,186.975 241.144,188.141 237.5,188.5C 234.167,188.5 230.833,188.5 227.5,188.5C 227.47,187.503 227.97,186.836 229,186.5C 231.12,187.459 233.287,187.626 235.5,187C 234.341,185.173 233.008,183.507 231.5,182C 233.376,180.983 235.376,180.149 237.5,179.5C 234.503,178.752 231.503,178.085 228.5,177.5C 226.829,175.49 226.162,173.157 226.5,170.5C 227.833,170.5 229.167,170.5 230.5,170.5C 230.5,171.833 230.5,173.167 230.5,174.5C 233.95,175.244 235.616,173.91 235.5,170.5C 236.833,170.5 238.167,170.5 239.5,170.5C 238.066,172.617 238.566,174.284 241,175.5C 244.358,173.623 246.524,170.789 247.5,167C 246.728,165.779 245.728,164.779 244.5,164C 246.536,163.546 248.37,162.713 250,161.5C 252.499,162.842 252.665,164.008 250.5,165C 251.343,166.787 251.51,168.62 251,170.5C 252.458,171.747 253.958,171.747 255.5,170.5C 258.124,171.076 258.791,172.41 257.5,174.5C 254.914,175.48 252.247,175.813 249.5,175.5C 249.5,176.5 249.5,177.5 249.5,178.5C 252.677,179.637 255.843,179.637 259,178.5C 260.631,176.372 262.798,175.039 265.5,174.5C 264.757,173.818 264.091,173.151 263.5,172.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f6f50\",\n    d: \"M 181.5,168.5 C 182.248,170.584 182.248,172.584 181.5,174.5C 181.957,175.298 182.624,175.631 183.5,175.5C 185.206,177.536 187.539,178.536 190.5,178.5C 191.376,178.369 192.043,178.702 192.5,179.5C 190.577,180.308 188.577,180.808 186.5,181C 187.416,181.278 188.082,181.778 188.5,182.5C 186.5,182.5 184.5,182.5 182.5,182.5C 180.833,182.5 179.167,182.5 177.5,182.5C 178.007,181.141 179.007,180.141 180.5,179.5C 179.754,178.264 179.421,176.93 179.5,175.5C 178.127,175.657 176.793,175.49 175.5,175C 176.981,174.02 178.315,172.853 179.5,171.5C 178.128,169.38 178.795,168.38 181.5,168.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#615142\",\n    d: \"M 223.5,157.5 C 234.167,157.5 244.833,157.5 255.5,157.5C 250.447,159.26 245.114,159.927 239.5,159.5C 239.5,163.167 239.5,166.833 239.5,170.5C 238.167,170.5 236.833,170.5 235.5,170.5C 235.616,173.91 233.95,175.244 230.5,174.5C 230.5,173.167 230.5,171.833 230.5,170.5C 229.167,170.5 227.833,170.5 226.5,170.5C 226.162,173.157 226.829,175.49 228.5,177.5C 231.503,178.085 234.503,178.752 237.5,179.5C 235.376,180.149 233.376,180.983 231.5,182C 233.008,183.507 234.341,185.173 235.5,187C 233.287,187.626 231.12,187.459 229,186.5C 227.97,186.836 227.47,187.503 227.5,188.5C 226.508,188.328 225.842,188.662 225.5,189.5C 220.167,189.5 214.833,189.5 209.5,189.5C 209.5,187.833 209.5,186.167 209.5,184.5C 210.822,184.67 211.989,184.337 213,183.5C 214.869,186.691 217.369,187.358 220.5,185.5C 222.857,185.663 225.19,185.497 227.5,185C 222.387,184.064 222.387,182.731 227.5,181C 223.403,180.366 222.736,178.699 225.5,176C 222.833,175.667 220.167,175.333 217.5,175C 218.793,174.51 220.127,174.343 221.5,174.5C 222.463,170.098 224.463,166.265 227.5,163C 226.663,161.989 226.33,160.822 226.5,159.5C 225.5,159.5 224.5,159.5 223.5,159.5C 223.5,158.833 223.5,158.167 223.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#34312b\",\n    d: \"M 380.5,175.5 C 381.455,177.283 382.122,179.283 382.5,181.5C 381.481,183.511 380.481,185.511 379.5,187.5C 371.996,189.207 364.329,190.207 356.5,190.5C 353.881,190.651 351.547,191.485 349.5,193C 340.833,193.667 332.167,193.667 323.5,193C 319.703,191.576 315.703,191.076 311.5,191.5C 315.379,190.816 318.712,188.983 321.5,186C 324.7,185.899 327.7,185.232 330.5,184C 338.522,184.503 346.522,184.336 354.5,183.5C 354.64,181.876 353.973,180.71 352.5,180C 355.379,179.043 357.879,179.543 360,181.5C 366.428,179.31 372.928,179.31 379.5,181.5C 380.466,179.604 380.799,177.604 380.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#403c33\",\n    d: \"M 124.5,166.5 C 125.099,169.168 126.766,171.002 129.5,172C 135.58,172.739 141.58,173.739 147.5,175C 147.833,175.333 148.167,175.667 148.5,176C 145.854,176.497 143.187,176.664 140.5,176.5C 140.5,177.833 140.5,179.167 140.5,180.5C 145.167,180.5 149.833,180.5 154.5,180.5C 158.857,180.586 163.19,180.92 167.5,181.5C 169.948,182.473 172.615,182.806 175.5,182.5C 176.167,182.5 176.833,182.5 177.5,182.5C 176.817,184.176 175.483,184.843 173.5,184.5C 166.159,184.334 158.826,184.5 151.5,185C 156.684,185.174 161.684,185.674 166.5,186.5C 157.494,186.666 148.494,186.5 139.5,186C 134.954,185.336 130.621,184.169 126.5,182.5C 124.568,183.52 122.568,183.687 120.5,183C 119.521,181.221 119.854,179.555 121.5,178C 123.715,177.83 125.715,177.163 127.5,176C 126.892,175.13 126.059,174.63 125,174.5C 122.425,175.965 120.592,175.298 119.5,172.5C 120.292,169.754 121.959,167.754 124.5,166.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b0967f\",\n    d: \"M 190.5,178.5 C 190.5,178.167 190.5,177.833 190.5,177.5C 191.833,177.5 193.167,177.5 194.5,177.5C 194.938,181.908 192.938,183.575 188.5,182.5C 188.082,181.778 187.416,181.278 186.5,181C 188.577,180.808 190.577,180.308 192.5,179.5C 192.043,178.702 191.376,178.369 190.5,178.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#67564d\",\n    d: \"M 199.5,173.5 C 201.124,173.36 202.29,174.027 203,175.5C 203.499,179.152 203.665,182.818 203.5,186.5C 203.167,186.5 202.833,186.5 202.5,186.5C 202.209,185.351 201.376,184.684 200,184.5C 196.846,185.434 197.012,186.101 200.5,186.5C 199.817,188.176 198.483,188.843 196.5,188.5C 196.288,184.655 197.288,181.321 199.5,178.5C 199.5,176.833 199.5,175.167 199.5,173.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c2b2a7\",\n    d: \"M 199.5,178.5 C 200.151,177.909 200.818,177.243 201.5,176.5C 202.452,178.045 202.785,179.712 202.5,181.5C 201.5,181.5 200.5,181.5 199.5,181.5C 199.5,180.5 199.5,179.5 199.5,178.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#746251\",\n    d: \"M 177.5,182.5 C 179.167,182.5 180.833,182.5 182.5,182.5C 183.568,183.434 184.901,183.768 186.5,183.5C 186.5,184.5 186.5,185.5 186.5,186.5C 181.156,186.666 175.823,186.499 170.5,186C 171.737,185.768 172.737,185.268 173.5,184.5C 175.483,184.843 176.817,184.176 177.5,182.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#20140d\",\n    d: \"M 197.5,163.5 C 197.335,166.518 197.502,169.518 198,172.5C 198.383,173.056 198.883,173.389 199.5,173.5C 199.5,175.167 199.5,176.833 199.5,178.5C 197.288,181.321 196.288,184.655 196.5,188.5C 195.626,186.31 193.959,185.31 191.5,185.5C 191.5,186.833 191.5,188.167 191.5,189.5C 183.346,188.964 175.346,188.297 167.5,187.5C 174.5,187.5 181.5,187.5 188.5,187.5C 188.5,186.167 188.5,184.833 188.5,183.5C 190.527,183.662 192.527,183.495 194.5,183C 195.126,182.25 195.626,181.416 196,180.5C 196.499,175.511 196.666,170.511 196.5,165.5C 196.328,164.508 196.662,163.842 197.5,163.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#998b82\",\n    d: \"M 202.5,186.5 C 201.833,186.5 201.167,186.5 200.5,186.5C 197.012,186.101 196.846,185.434 200,184.5C 201.376,184.684 202.209,185.351 202.5,186.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5c4d42\",\n    d: \"M 195.5,165.5 C 195.833,165.5 196.167,165.5 196.5,165.5C 196.666,170.511 196.499,175.511 196,180.5C 195.626,181.416 195.126,182.25 194.5,183C 192.527,183.495 190.527,183.662 188.5,183.5C 188.5,184.833 188.5,186.167 188.5,187.5C 181.5,187.5 174.5,187.5 167.5,187.5C 167.5,186.833 167.167,186.5 166.5,186.5C 161.684,185.674 156.684,185.174 151.5,185C 158.826,184.5 166.159,184.334 173.5,184.5C 172.737,185.268 171.737,185.768 170.5,186C 175.823,186.499 181.156,186.666 186.5,186.5C 186.5,185.5 186.5,184.5 186.5,183.5C 184.901,183.768 183.568,183.434 182.5,182.5C 184.5,182.5 186.5,182.5 188.5,182.5C 192.938,183.575 194.938,181.908 194.5,177.5C 195.479,174.375 195.813,171.042 195.5,167.5C 195.5,166.833 195.5,166.167 195.5,165.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#090504\",\n    d: \"M 119.5,184.5 C 123.426,184.232 127.093,185.065 130.5,187C 142.829,187.5 155.162,187.667 167.5,187.5C 175.346,188.297 183.346,188.964 191.5,189.5C 191.5,188.167 191.5,186.833 191.5,185.5C 193.959,185.31 195.626,186.31 196.5,188.5C 198.483,188.843 199.817,188.176 200.5,186.5C 201.167,186.5 201.833,186.5 202.5,186.5C 202.833,186.5 203.167,186.5 203.5,186.5C 204.708,185.766 206.041,185.433 207.5,185.5C 207.286,187.144 207.62,188.644 208.5,190C 213.308,191.893 218.308,192.727 223.5,192.5C 243.161,193.614 263.161,194.28 283.5,194.5C 292.34,194.5 301.007,194.166 309.5,193.5C 310.833,193.5 311.5,192.833 311.5,191.5C 315.703,191.076 319.703,191.576 323.5,193C 332.167,193.667 340.833,193.667 349.5,193C 351.547,191.485 353.881,190.651 356.5,190.5C 364.329,190.207 371.996,189.207 379.5,187.5C 379.489,189.017 378.823,190.184 377.5,191C 369.841,191.5 362.174,191.666 354.5,191.5C 354.281,192.675 354.614,193.675 355.5,194.5C 356.772,193.954 358.106,193.621 359.5,193.5C 362.913,194.113 365.913,194.78 368.5,195.5C 362.547,195.332 356.547,195.999 350.5,197.5C 349.914,197.291 349.414,196.957 349,196.5C 344.8,199.987 340.8,200.321 337,197.5C 336.667,198.167 336.333,198.833 336,199.5C 335.804,197.714 334.971,196.381 333.5,195.5C 330.947,196.805 328.28,197.805 325.5,198.5C 324.479,199.002 324.312,199.668 325,200.5C 325.893,199.289 326.726,199.289 327.5,200.5C 323.951,201.559 321.117,203.559 319,206.5C 317.323,205.484 315.657,204.484 314,203.5C 310.497,204.723 306.997,204.723 303.5,203.5C 301.803,202.636 300.637,201.303 300,199.5C 298.644,200.38 297.144,200.714 295.5,200.5C 295.5,199.5 295.5,198.5 295.5,197.5C 298.32,197.752 300.986,197.252 303.5,196C 293.167,195.333 282.833,195.333 272.5,196C 272.469,197.721 271.802,199.554 270.5,201.5C 267.937,201.109 265.437,200.776 263,200.5C 261.635,200.844 260.468,201.511 259.5,202.5C 258.304,202.154 258.304,201.654 259.5,201C 257.833,200.833 256.167,200.667 254.5,200.5C 249.702,202.035 244.702,202.702 239.5,202.5C 239.5,204.167 239.5,205.833 239.5,207.5C 230.076,207.31 220.743,207.31 211.5,207.5C 210.167,207.333 208.833,207.167 207.5,207C 209.9,206.814 212.234,206.314 214.5,205.5C 211.554,204.345 208.554,204.179 205.5,205C 202.798,207.188 199.798,208.522 196.5,209C 198.935,207.997 198.602,207.497 195.5,207.5C 194.183,208.182 192.85,208.849 191.5,209.5C 191.5,213.5 191.5,217.5 191.5,221.5C 193.401,221.433 195.234,221.767 197,222.5C 198.257,222.85 198.591,223.517 198,224.5C 196.667,223.167 195.333,223.167 194,224.5C 193.692,223.692 193.192,223.025 192.5,222.5C 189.023,224.161 185.856,223.828 183,221.5C 180.5,223.536 177.833,223.87 175,222.5C 170.92,223.3 166.753,223.8 162.5,224C 163.833,224.333 165.167,224.667 166.5,225C 163.456,225.359 163.122,226.026 165.5,227C 163.512,227.18 161.512,227.014 159.5,226.5C 159.5,225.5 159.5,224.5 159.5,223.5C 154.167,222.833 154.167,222.167 159.5,221.5C 159.665,217.818 159.499,214.152 159,210.5C 157.956,211.623 157.29,212.956 157,214.5C 156,210.5 155,210.5 154,214.5C 153.8,212.68 152.966,211.347 151.5,210.5C 151.082,209.778 150.416,209.278 149.5,209C 151.681,206.922 153.681,207.089 155.5,209.5C 156.5,208.833 157.5,208.167 158.5,207.5C 159.496,201.537 159.829,195.537 159.5,189.5C 153.871,188.329 144.204,188.163 130.5,189C 132.715,189.17 134.715,189.837 136.5,191C 131.782,191.312 127.115,191.478 122.5,191.5C 122.5,190.5 122.5,189.5 122.5,188.5C 123.873,188.657 125.207,188.49 126.5,188C 124.142,186.724 121.808,185.558 119.5,184.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#191b1a\",\n    d: \"M -0.5,184.5 C 1.28801,184.215 2.95467,184.548 4.5,185.5C 4.29069,186.086 3.95735,186.586 3.5,187C 18.8014,186.985 34.1348,187.152 49.5,187.5C 40.676,188.33 31.676,188.83 22.5,189C 20.913,189.862 19.2464,190.529 17.5,191C 11.4669,191.302 5.46691,191.802 -0.5,192.5C -0.5,189.833 -0.5,187.167 -0.5,184.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3a3830\",\n    d: \"M 351.5,157.5 C 357.509,157.334 363.509,157.501 369.5,158C 370.428,158.388 371.095,159.055 371.5,160C 372.114,162.854 372.781,165.687 373.5,168.5C 374.325,169.386 375.325,169.719 376.5,169.5C 376.351,168.448 376.517,167.448 377,166.5C 377.333,166.833 377.667,167.167 378,167.5C 377.947,170.675 378.78,173.342 380.5,175.5C 380.799,177.604 380.466,179.604 379.5,181.5C 372.928,179.31 366.428,179.31 360,181.5C 357.879,179.543 355.379,179.043 352.5,180C 353.973,180.71 354.64,181.876 354.5,183.5C 346.522,184.336 338.522,184.503 330.5,184C 327.7,185.232 324.7,185.899 321.5,186C 318.712,188.983 315.379,190.816 311.5,191.5C 311.5,192.833 310.833,193.5 309.5,193.5C 284.5,193.184 259.5,192.851 234.5,192.5C 234.5,191.5 234.5,190.5 234.5,189.5C 232.833,189.5 231.167,189.5 229.5,189.5C 228.167,189.5 226.833,189.5 225.5,189.5C 225.842,188.662 226.508,188.328 227.5,188.5C 230.833,188.5 234.167,188.5 237.5,188.5C 238.507,189.828 239.84,190.828 241.5,191.5C 244.026,191.204 246.693,191.037 249.5,191C 248.833,190.667 248.167,190.333 247.5,190C 251.296,189.363 254.962,189.863 258.5,191.5C 259.5,191.333 260.5,191.167 261.5,191C 260.167,190.667 258.833,190.333 257.5,190C 272.704,186.723 288.037,185.723 303.5,187C 305.974,186.887 307.974,185.887 309.5,184C 307.875,183.147 307.542,182.147 308.5,181C 312.749,179.874 317.082,179.208 321.5,179C 319.569,178.098 317.903,176.931 316.5,175.5C 319.137,174.836 321.803,174.169 324.5,173.5C 325.311,171.609 326.644,170.276 328.5,169.5C 332.141,170.812 331.807,171.979 327.5,173C 329.044,173.29 330.377,173.956 331.5,175C 343.6,175.973 355.6,175.473 367.5,173.5C 367.5,171.167 367.5,168.833 367.5,166.5C 360.544,167.155 353.877,166.322 347.5,164C 354.133,163.001 360.8,162.168 367.5,161.5C 364.893,160.682 362.226,160.182 359.5,160C 360.833,159.667 362.167,159.333 363.5,159C 359.312,158.824 355.312,158.324 351.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#382d22\",\n    d: \"M 207.5,175.5 C 208.245,178.39 208.912,181.39 209.5,184.5C 209.5,186.167 209.5,187.833 209.5,189.5C 214.833,189.5 220.167,189.5 225.5,189.5C 226.833,189.5 228.167,189.5 229.5,189.5C 229.5,190.5 229.5,191.5 229.5,192.5C 227.5,192.5 225.5,192.5 223.5,192.5C 218.308,192.727 213.308,191.893 208.5,190C 207.62,188.644 207.286,187.144 207.5,185.5C 207.5,182.167 207.5,178.833 207.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b2622\",\n    d: \"M 229.5,189.5 C 231.167,189.5 232.833,189.5 234.5,189.5C 234.5,190.5 234.5,191.5 234.5,192.5C 259.5,192.851 284.5,193.184 309.5,193.5C 301.007,194.166 292.34,194.5 283.5,194.5C 263.161,194.28 243.161,193.614 223.5,192.5C 225.5,192.5 227.5,192.5 229.5,192.5C 229.5,191.5 229.5,190.5 229.5,189.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#060405\",\n    d: \"M 113.5,156.5 C 115.249,165.915 117.249,175.248 119.5,184.5C 121.808,185.558 124.142,186.724 126.5,188C 125.207,188.49 123.873,188.657 122.5,188.5C 122.5,189.5 122.5,190.5 122.5,191.5C 127.115,191.478 131.782,191.312 136.5,191C 134.715,189.837 132.715,189.17 130.5,189C 144.204,188.163 153.871,188.329 159.5,189.5C 159.829,195.537 159.496,201.537 158.5,207.5C 157.5,208.167 156.5,208.833 155.5,209.5C 153.681,207.089 151.681,206.922 149.5,209C 150.416,209.278 151.082,209.778 151.5,210.5C 146.26,211.822 140.927,212.488 135.5,212.5C 134.674,213.451 134.508,214.451 135,215.5C 138.792,213.187 142.458,213.187 146,215.5C 146.366,216.119 146.033,216.452 145,216.5C 144,216.167 143,215.833 142,215.5C 135.181,218.218 128.181,220.551 121,222.5C 119.208,221.963 117.375,221.63 115.5,221.5C 105.879,222.431 105.546,223.265 114.5,224C 112.176,225.933 109.842,227.767 107.5,229.5C 111.247,230.601 114.913,230.268 118.5,228.5C 123.879,230.254 128.879,232.754 133.5,236C 139.95,235.898 146.116,236.731 152,238.5C 153.609,237.853 155.109,237.02 156.5,236C 153.623,234.873 150.623,234.206 147.5,234C 147.167,233.667 146.833,233.333 146.5,233C 147.833,232.333 149.167,231.667 150.5,231C 146.639,229.665 146.639,228.499 150.5,227.5C 154.251,229.308 158.251,230.308 162.5,230.5C 162.5,231.5 162.5,232.5 162.5,233.5C 164.199,233.34 165.866,233.506 167.5,234C 178.018,237.549 178.018,240.049 167.5,241.5C 170.273,242.253 172.94,243.253 175.5,244.5C 178.106,245.652 180.773,245.818 183.5,245C 177.71,243.484 177.377,241.651 182.5,239.5C 183.406,241.386 184.406,243.22 185.5,245C 190.28,245.811 192.28,248.645 191.5,253.5C 190.448,253.649 189.448,253.483 188.5,253C 189.517,251.951 189.684,250.784 189,249.5C 185.333,246.967 181.666,246.967 178,249.5C 176.635,249.156 175.468,248.489 174.5,247.5C 173.675,251.122 173.175,254.789 173,258.5C 169.187,261.749 165.187,261.749 161,258.5C 157.557,259.299 154.557,258.299 152,255.5C 142.065,258.395 131.732,260.395 121,261.5C 120.5,261.833 120,262.167 119.5,262.5C 126.142,263.664 132.808,263.831 139.5,263C 140.167,262.333 140.833,261.667 141.5,261C 147.042,260.087 152.375,260.754 157.5,263C 158.252,263.671 158.586,264.504 158.5,265.5C 105.5,265.5 52.5,265.5 -0.5,265.5C -0.5,241.167 -0.5,216.833 -0.5,192.5C 5.46691,191.802 11.4669,191.302 17.5,191C 19.2464,190.529 20.913,189.862 22.5,189C 31.676,188.83 40.676,188.33 49.5,187.5C 52.8112,187.117 55.8112,186.117 58.5,184.5C 59.1667,184.5 59.8333,184.5 60.5,184.5C 63.096,183.243 65.7627,182.076 68.5,181C 76.3351,181.253 84.0017,181.086 91.5,180.5C 96.1667,180.5 100.833,180.5 105.5,180.5C 105.5,177.167 105.5,173.833 105.5,170.5C 105.899,164.395 106.232,158.395 106.5,152.5C 107.5,153.833 108.5,153.833 109.5,152.5C 110.333,153.5 111.167,154.5 112,155.5C 113.107,154.288 113.607,154.621 113.5,156.5 Z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSadImage1);\nexport default __webpack_public_path__ + \"static/media/sad-image1.2984f464a5efbb1fc52f2ef005ff9a40.svg\";\nexport { ForwardRef as ReactComponent };","function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgSadImage2(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"400px\",\n    height: \"266px\",\n    style: {\n      shapeRendering: \"geometricPrecision\",\n      textRendering: \"geometricPrecision\",\n      imageRendering: \"optimizeQuality\",\n      fillRule: \"evenodd\",\n      clipRule: \"evenodd\"\n    },\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bbc5b8\",\n    d: \"M 261.5,-0.5 C 264.167,-0.5 266.833,-0.5 269.5,-0.5C 269.489,1.01739 268.823,2.18405 267.5,3C 265.5,3.33333 263.5,3.66667 261.5,4C 258.652,7.01459 255.985,10.1813 253.5,13.5C 253.167,13.5 252.833,13.5 252.5,13.5C 251.209,13.7373 250.209,13.404 249.5,12.5C 250.822,12.67 251.989,12.3366 253,11.5C 254.221,7.83084 256.554,5.16417 260,3.5C 260.791,2.25501 261.291,0.921673 261.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#435354\",\n    d: \"M 319.5,-0.5 C 326.167,-0.5 332.833,-0.5 339.5,-0.5C 340.218,3.66048 338.885,5.99381 335.5,6.5C 338.118,12.4702 340.118,18.3035 341.5,24C 339.333,27.5 337.5,27.3333 336,23.5C 332.39,26.498 328.723,29.498 325,32.5C 324.946,39.569 324.446,44.569 323.5,47.5C 318.81,49.0578 314.143,50.0578 309.5,50.5C 310.021,53.6363 309.021,55.9696 306.5,57.5C 307.537,55.3452 308.203,53.0119 308.5,50.5C 307.346,43.2694 307.346,36.1027 308.5,29C 311.222,30.0703 313.388,29.237 315,26.5C 316.353,27.6853 317.52,29.0186 318.5,30.5C 316.197,34.5177 315.363,38.8511 316,43.5C 318.432,44.4496 320.932,44.4496 323.5,43.5C 323.011,38.1986 321.844,33.1986 320,28.5C 321.61,26.4689 323.443,26.4689 325.5,28.5C 327.272,27.6401 328.605,26.3068 329.5,24.5C 330.689,23.5713 332.022,23.238 333.5,23.5C 334.428,20.8704 335.428,18.2037 336.5,15.5C 334.624,13.952 333.624,11.952 333.5,9.5C 330.813,9.33591 328.146,9.50258 325.5,10C 324.134,11.5998 323.134,13.4332 322.5,15.5C 321.05,14.1502 320.383,12.4835 320.5,10.5C 319.5,10.5 318.5,10.5 317.5,10.5C 317.631,6.71496 318.298,3.04829 319.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d1d5ce\",\n    d: \"M 247.5,-0.5 C 252.167,-0.5 256.833,-0.5 261.5,-0.5C 261.291,0.921673 260.791,2.25501 260,3.5C 256.554,5.16417 254.221,7.83084 253,11.5C 251.989,12.3366 250.822,12.67 249.5,12.5C 247.722,8.4347 247.055,4.10136 247.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c393a\",\n    d: \"M 36.5,-0.5 C 46.8333,-0.5 57.1667,-0.5 67.5,-0.5C 64.9365,4.28676 62.1032,8.95342 59,13.5C 56.466,20.7051 58.966,24.0384 66.5,23.5C 66.8064,26.3854 66.4731,29.0521 65.5,31.5C 65.6621,29.4727 65.4955,27.4727 65,25.5C 64.3109,26.3567 63.4776,27.0233 62.5,27.5C 59.2094,26.6182 55.876,25.9516 52.5,25.5C 52.3379,23.4727 52.5045,21.4727 53,19.5C 54.4866,18.8448 55.6533,17.8448 56.5,16.5C 56.3764,15.8933 56.0431,15.56 55.5,15.5C 56.1078,10.7904 54.4412,7.12372 50.5,4.5C 49.914,4.70931 49.414,5.04265 49,5.5C 48.6667,8.5 48.3333,11.5 48,14.5C 47.7401,10.7502 47.0734,7.08356 46,3.5C 45.0853,4.32791 44.4186,5.32791 44,6.5C 42.8403,4.203 41.8403,4.53633 41,7.5C 40.3333,6.16667 39.6667,6.16667 39,7.5C 37.8822,9.76541 37.0488,12.0987 36.5,14.5C 34.6096,14.2965 33.1096,14.9632 32,16.5C 31.1301,15.8921 30.6301,15.0588 30.5,14C 31.4091,12.2108 31.5758,10.3774 31,8.5C 30.3457,9.69559 29.8457,9.69559 29.5,8.5C 33.0787,6.27967 35.412,3.27967 36.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#929891\",\n    d: \"M 207.5,-0.5 C 215.5,-0.5 223.5,-0.5 231.5,-0.5C 230.761,5.13962 232.095,10.1396 235.5,14.5C 238.293,15.9547 240.626,15.4547 242.5,13C 244.81,12.5034 247.143,12.3367 249.5,12.5C 250.209,13.404 251.209,13.7373 252.5,13.5C 246.615,14.2675 240.948,15.9342 235.5,18.5C 234.554,16.1105 233.221,13.9438 231.5,12C 223.601,10.181 215.601,9.34762 207.5,9.5C 207.5,20.5 207.5,31.5 207.5,42.5C 206.883,42.6107 206.383,42.944 206,43.5C 205.863,52.0031 206.363,60.3365 207.5,68.5C 207.733,74.0345 208.9,79.3678 211,84.5C 212.011,85.3366 213.178,85.67 214.5,85.5C 214.009,88.0103 213.009,90.3436 211.5,92.5C 210.479,90.812 209.145,89.4787 207.5,88.5C 207.5,88.1667 207.5,87.8333 207.5,87.5C 208.22,80.8532 207.386,74.1866 205,67.5C 204.721,60.4799 204.221,53.4799 203.5,46.5C 204.795,42.9117 205.795,39.245 206.5,35.5C 206.415,33.6672 205.748,32.3339 204.5,31.5C 204.334,24.4921 204.5,17.4921 205,10.5C 207.209,7.21097 208.042,3.54431 207.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bdc3be\",\n    d: \"M 231.5,-0.5 C 232.167,-0.5 232.833,-0.5 233.5,-0.5C 232.593,5.05532 234.093,9.72198 238,13.5C 239.338,12.4939 240.671,11.4939 242,10.5C 242.45,6.81246 242.283,3.1458 241.5,-0.5C 243.5,-0.5 245.5,-0.5 247.5,-0.5C 247.055,4.10136 247.722,8.4347 249.5,12.5C 247.143,12.3367 244.81,12.5034 242.5,13C 240.626,15.4547 238.293,15.9547 235.5,14.5C 232.095,10.1396 230.761,5.13962 231.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5c6c63\",\n    d: \"M 279.5,-0.5 C 289.833,-0.5 300.167,-0.5 310.5,-0.5C 311.474,1.08527 312.974,2.08527 315,2.5C 315.167,3.33333 315.333,4.16667 315.5,5C 313.803,8.2629 312.803,11.7629 312.5,15.5C 308.818,15.3347 305.152,15.5014 301.5,16C 296.883,16.9859 292.216,18.4859 287.5,20.5C 291.453,16.6591 296.119,13.4924 301.5,11C 303.994,8.5769 303.994,6.24357 301.5,4C 299.04,3.01875 296.54,2.18541 294,1.5C 292.158,3.16048 289.991,4.16048 287.5,4.5C 287.5,5.5 287.5,6.5 287.5,7.5C 286.5,7.5 285.5,7.5 284.5,7.5C 284.649,8.55198 284.483,9.55198 284,10.5C 282.075,12.2132 279.908,13.5465 277.5,14.5C 278.223,16.1639 277.89,17.8306 276.5,19.5C 278.661,23.0709 281.327,23.4043 284.5,20.5C 285.107,20.6236 285.44,20.9569 285.5,21.5C 285.167,22.5 284.5,23.1667 283.5,23.5C 282.423,24.0184 281.256,24.3517 280,24.5C 275.938,23.6468 272.105,22.3135 268.5,20.5C 260.983,18.3527 255.649,20.686 252.5,27.5C 252.5,24.5 252.5,21.5 252.5,18.5C 259.96,19.4561 264.627,16.4561 266.5,9.5C 271.543,9.59103 274.543,7.2577 275.5,2.5C 277.973,2.91176 279.306,1.91176 279.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#465552\",\n    d: \"M 95.5,-0.5 C 101.833,-0.5 108.167,-0.5 114.5,-0.5C 113.167,2.83333 113.167,6.16667 114.5,9.5C 111.72,9.9452 109.053,9.9452 106.5,9.5C 104.45,10.0766 103.45,11.4099 103.5,13.5C 102.5,13.5 101.5,13.5 100.5,13.5C 100.667,8.24996 98.6667,7.24996 94.5,10.5C 93.1126,6.61383 93.4459,2.94716 95.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d262c\",\n    d: \"M 3.5,-0.5 C 7.83333,-0.5 12.1667,-0.5 16.5,-0.5C 16.7229,2.11422 15.5562,3.78089 13,4.5C 12.1859,6.90179 12.3526,9.23512 13.5,11.5C 15.2608,12.0784 17.2608,12.0784 19.5,11.5C 21.7984,14.1114 23.4651,13.6114 24.5,10C 25.1667,9.33333 25.8333,9.33333 26.5,10C 28.29,14.7589 28.9566,19.5922 28.5,24.5C 27.08,26.7089 25.4133,28.7089 23.5,30.5C 20.9135,31.48 18.2469,31.8134 15.5,31.5C 15.5708,34.1391 16.5708,36.3058 18.5,38C 17.8993,39.605 16.8993,40.9384 15.5,42C 12.1308,42.6626 8.79748,42.4959 5.5,41.5C 3.19917,41.9837 1.19917,42.9837 -0.5,44.5C -0.5,43.1667 -0.5,41.8333 -0.5,40.5C 2.87875,40.112 6.21208,39.4453 9.5,38.5C 10.9318,36.1838 11.9318,33.6838 12.5,31C 11.6721,30.0853 10.6721,29.4186 9.5,29C 6.18323,28.5017 2.8499,28.335 -0.5,28.5C -0.5,26.5 -0.5,24.5 -0.5,22.5C 2.69305,17.8149 4.69305,12.4815 5.5,6.5C 4.53305,4.23833 3.86639,1.905 3.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f3b3f\",\n    d: \"M 351.5,-0.5 C 356.167,-0.5 360.833,-0.5 365.5,-0.5C 365.8,4.09858 365.467,8.59858 364.5,13C 360.664,16.1356 356.664,16.3022 352.5,13.5C 351.749,14.376 351.249,15.376 351,16.5C 349.989,15.6634 348.822,15.33 347.5,15.5C 344.21,13.3614 343.043,10.3614 344,6.5C 348.206,9.0057 351.372,7.83903 353.5,3C 352.695,1.88732 352.028,0.72065 351.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f6e66\",\n    d: \"M 165.5,-0.5 C 166.167,-0.5 166.833,-0.5 167.5,-0.5C 167.5,0.166667 167.5,0.833333 167.5,1.5C 169.091,2.21886 170.591,3.21886 172,4.5C 172.114,8.56846 173.28,12.2351 175.5,15.5C 171.652,13.8159 169.819,10.8159 170,6.5C 169.667,8.16667 169.333,9.83333 169,11.5C 168.333,12.8333 167.667,12.8333 167,11.5C 166.172,7.53404 165.672,3.53404 165.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c8cec9\",\n    d: \"M 233.5,-0.5 C 236.167,-0.5 238.833,-0.5 241.5,-0.5C 242.283,3.1458 242.45,6.81246 242,10.5C 240.671,11.4939 239.338,12.4939 238,13.5C 234.093,9.72198 232.593,5.05532 233.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#acaea4\",\n    d: \"M 188.5,-0.5 C 194.833,-0.5 201.167,-0.5 207.5,-0.5C 208.042,3.54431 207.209,7.21097 205,10.5C 204.5,17.4921 204.334,24.4921 204.5,31.5C 204.024,28.5976 202.691,26.0976 200.5,24C 201.167,21.3333 201.833,18.6667 202.5,16C 200.5,13.3333 198.5,10.6667 196.5,8C 193.518,7.50204 190.518,7.33537 187.5,7.5C 187.575,4.79384 187.908,2.12717 188.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3d4d4c\",\n    d: \"M 88.5,-0.5 C 90.8333,-0.5 93.1667,-0.5 95.5,-0.5C 93.4459,2.94716 93.1126,6.61383 94.5,10.5C 98.6667,7.24996 100.667,8.24996 100.5,13.5C 101.5,13.5 102.5,13.5 103.5,13.5C 103.45,11.4099 104.45,10.0766 106.5,9.5C 109.053,9.9452 111.72,9.9452 114.5,9.5C 116.861,9.32588 119.194,8.99255 121.5,8.5C 121.5,7.5 121.5,6.5 121.5,5.5C 128.986,5.36243 136.319,4.36243 143.5,2.5C 144.037,7.26645 143.037,11.5998 140.5,15.5C 138.554,16.1988 136.554,15.8655 134.5,14.5C 135.645,13.109 135.645,11.7757 134.5,10.5C 132.207,12.0846 129.873,13.5846 127.5,15C 125.793,15.1953 124.126,15.1953 122.5,15C 121.874,15.7504 121.374,16.5838 121,17.5C 120,14.8333 119,14.8333 118,17.5C 117.184,16.1772 116.017,15.5106 114.5,15.5C 114.213,13.8793 113.213,12.8793 111.5,12.5C 108.075,13.0912 105.075,14.4245 102.5,16.5C 100.865,16.1223 99.3651,15.4556 98,14.5C 93.4791,17.531 88.6458,19.8643 83.5,21.5C 84.2436,18.0504 82.9103,16.3838 79.5,16.5C 78.4303,19.8717 76.5969,19.8717 74,16.5C 73.0853,17.3279 72.4186,18.3279 72,19.5C 71.1923,17.4213 71.359,15.4213 72.5,13.5C 73.1667,14.1667 73.8333,14.8333 74.5,15.5C 76.1792,14.218 78.0126,13.218 80,12.5C 80.6667,13.1667 81.3333,13.8333 82,14.5C 83.5624,11.2797 85.3957,8.27973 87.5,5.5C 88.1556,3.54662 88.4889,1.54662 88.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9da99a\",\n    d: \"M 269.5,-0.5 C 270.833,-0.5 272.167,-0.5 273.5,-0.5C 272.423,4.21452 269.423,6.21452 264.5,5.5C 261.069,7.09522 258.402,9.59522 256.5,13C 255.552,13.4828 254.552,13.6495 253.5,13.5C 255.985,10.1813 258.652,7.01459 261.5,4C 263.5,3.66667 265.5,3.33333 267.5,3C 268.823,2.18405 269.489,1.01739 269.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4f605e\",\n    d: \"M 114.5,-0.5 C 131.5,-0.5 148.5,-0.5 165.5,-0.5C 165.672,3.53404 166.172,7.53404 167,11.5C 167.667,12.8333 168.333,12.8333 169,11.5C 169.333,9.83333 169.667,8.16667 170,6.5C 169.819,10.8159 171.652,13.8159 175.5,15.5C 177.548,17.8976 179.381,20.5643 181,23.5C 181.292,25.3261 181.125,27.1595 180.5,29C 183.245,38.1087 181.578,46.2754 175.5,53.5C 177.936,48.8934 179.269,44.2267 179.5,39.5C 176.671,39.3249 175.004,40.6582 174.5,43.5C 172.939,42.6527 171.439,42.9861 170,44.5C 167.289,43.0744 164.789,43.4077 162.5,45.5C 160.728,44.7303 159.728,43.3969 159.5,41.5C 161,39.1667 162.5,36.8333 164,34.5C 165.828,36.8073 167.494,36.474 169,33.5C 170.402,28.025 169.069,23.3583 165,19.5C 164.51,18.2068 164.343,16.8734 164.5,15.5C 160.522,14.9656 157.522,16.4656 155.5,20C 152.159,20.0595 149.325,21.2261 147,23.5C 143.956,22.2186 142.79,19.8852 143.5,16.5C 142.791,15.596 141.791,15.2627 140.5,15.5C 143.037,11.5998 144.037,7.26645 143.5,2.5C 136.319,4.36243 128.986,5.36243 121.5,5.5C 121.5,6.5 121.5,7.5 121.5,8.5C 119.194,8.99255 116.861,9.32588 114.5,9.5C 113.167,6.16667 113.167,2.83333 114.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#64756b\",\n    d: \"M 287.5,20.5 C 286.833,20.8333 286.167,21.1667 285.5,21.5C 285.44,20.9569 285.107,20.6236 284.5,20.5C 281.327,23.4043 278.661,23.0709 276.5,19.5C 277.89,17.8306 278.223,16.1639 277.5,14.5C 279.908,13.5465 282.075,12.2132 284,10.5C 284.483,9.55198 284.649,8.55198 284.5,7.5C 285.5,7.5 286.5,7.5 287.5,7.5C 287.5,6.5 287.5,5.5 287.5,4.5C 289.991,4.16048 292.158,3.16048 294,1.5C 296.54,2.18541 299.04,3.01875 301.5,4C 303.994,6.24357 303.994,8.5769 301.5,11C 296.119,13.4924 291.453,16.6591 287.5,20.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#747f75\",\n    d: \"M 167.5,1.5 C 169.722,1.17798 171.556,1.84464 173,3.5C 173.938,6.65303 175.438,9.48637 177.5,12C 180.633,12.3925 183.633,13.2259 186.5,14.5C 187.374,16.7466 187.708,19.0799 187.5,21.5C 186.521,24.6248 186.187,27.9581 186.5,31.5C 187.5,31.5 188.5,31.5 189.5,31.5C 190.546,38.9037 188.046,44.5704 182,48.5C 181.109,51.4976 181.609,54.1643 183.5,56.5C 180.691,56.4122 179.358,54.9122 179.5,52C 179.797,48.3702 181.63,45.8702 185,44.5C 185.056,41.2198 185.889,38.2198 187.5,35.5C 186.5,34.1667 185.5,32.8333 184.5,31.5C 183.842,26.0454 182.842,20.7121 181.5,15.5C 179.5,15.5 177.5,15.5 175.5,15.5C 173.28,12.2351 172.114,8.56846 172,4.5C 170.591,3.21886 169.091,2.21886 167.5,1.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141d24\",\n    d: \"M -0.5,-0.5 C 0.833333,-0.5 2.16667,-0.5 3.5,-0.5C 3.86639,1.905 4.53305,4.23833 5.5,6.5C 4.69305,12.4815 2.69305,17.8149 -0.5,22.5C -0.5,14.8333 -0.5,7.16667 -0.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#637371\",\n    d: \"M 233.5,19.5 C 231.109,22.917 227.775,24.2503 223.5,23.5C 221.896,22.713 221.229,21.3797 221.5,19.5C 218.833,19.5 216.167,19.5 213.5,19.5C 213.337,21.8568 213.503,24.1902 214,26.5C 214.75,27.1258 215.584,27.6258 216.5,28C 215.663,29.0113 215.33,30.1779 215.5,31.5C 213.389,32.3799 211.389,32.3799 209.5,31.5C 209.19,25.2424 209.524,19.0758 210.5,13C 217.487,12.9979 224.487,13.1646 231.5,13.5C 231.704,15.6854 232.37,17.6854 233.5,19.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#334143\",\n    d: \"M 67.5,-0.5 C 74.5,-0.5 81.5,-0.5 88.5,-0.5C 88.4889,1.54662 88.1556,3.54662 87.5,5.5C 85.3957,8.27973 83.5624,11.2797 82,14.5C 81.3333,13.8333 80.6667,13.1667 80,12.5C 78.0126,13.218 76.1792,14.218 74.5,15.5C 73.8333,14.8333 73.1667,14.1667 72.5,13.5C 71.359,15.4213 71.1923,17.4213 72,19.5C 72.4186,18.3279 73.0853,17.3279 74,16.5C 76.5969,19.8717 78.4303,19.8717 79.5,16.5C 82.9103,16.3838 84.2436,18.0504 83.5,21.5C 88.6458,19.8643 93.4791,17.531 98,14.5C 99.3651,15.4556 100.865,16.1223 102.5,16.5C 105.075,14.4245 108.075,13.0912 111.5,12.5C 113.213,12.8793 114.213,13.8793 114.5,15.5C 114.5,18.1667 114.5,20.8333 114.5,23.5C 109.189,21.1497 106.522,22.8163 106.5,28.5C 104.833,28.5 103.167,28.5 101.5,28.5C 101.785,26.712 101.452,25.0453 100.5,23.5C 99.52,26.0865 99.1866,28.7531 99.5,31.5C 98.8333,34.1667 98.1667,36.8333 97.5,39.5C 97.1667,39.5 96.8333,39.5 96.5,39.5C 95.2974,36.8265 95.2974,34.1599 96.5,31.5C 94.6465,29.3086 94.3132,26.9752 95.5,24.5C 94.1667,23.1667 92.8333,23.1667 91.5,24.5C 92.1272,25.4168 92.4606,26.4168 92.5,27.5C 91.1147,26.3862 89.6147,25.3862 88,24.5C 86.647,25.6853 85.4803,27.0186 84.5,28.5C 83.8506,26.3759 83.0173,24.3759 82,22.5C 80.3005,23.4061 78.4672,23.7394 76.5,23.5C 76.5,22.1667 76.5,20.8333 76.5,19.5C 72.1488,19.5413 70.8155,21.5413 72.5,25.5C 71.7579,26.2868 70.9246,26.9535 70,27.5C 69.502,30.4816 69.3354,33.4816 69.5,36.5C 68.1667,36.5 66.8333,36.5 65.5,36.5C 65.5,34.8333 65.5,33.1667 65.5,31.5C 66.4731,29.0521 66.8064,26.3854 66.5,23.5C 58.966,24.0384 56.466,20.7051 59,13.5C 62.1032,8.95342 64.9365,4.28676 67.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#93968a\",\n    d: \"M 167.5,-0.5 C 170.167,-0.5 172.833,-0.5 175.5,-0.5C 174.822,3.27267 176.156,6.10601 179.5,8C 185.158,8.73978 190.825,9.40645 196.5,10C 200.551,15.5538 199.717,20.3871 194,24.5C 193.667,31.1667 193.333,37.8333 193,44.5C 191.961,45.2438 191.461,46.2438 191.5,47.5C 190.158,48.793 188.491,49.6264 186.5,50C 185.663,51.0113 185.33,52.1779 185.5,53.5C 183.775,53.1575 183.275,52.1575 184,50.5C 186.303,48.607 188.47,46.607 190.5,44.5C 191.494,39.544 191.827,34.544 191.5,29.5C 190.5,29.5 189.5,29.5 188.5,29.5C 187.908,26.8728 187.575,24.2062 187.5,21.5C 187.708,19.0799 187.374,16.7466 186.5,14.5C 183.633,13.2259 180.633,12.3925 177.5,12C 175.438,9.48637 173.938,6.65303 173,3.5C 171.556,1.84464 169.722,1.17798 167.5,1.5C 167.5,0.833333 167.5,0.166667 167.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#415053\",\n    d: \"M 140.5,15.5 C 141.791,15.2627 142.791,15.596 143.5,16.5C 142.178,16.33 141.011,16.6634 140,17.5C 137.999,23.6731 137.166,30.0064 137.5,36.5C 139.5,36.5 141.5,36.5 143.5,36.5C 143.263,37.791 143.596,38.791 144.5,39.5C 145.167,40.1667 145.833,40.8333 146.5,41.5C 146.189,42.4778 145.522,43.1445 144.5,43.5C 142.772,38.9978 139.772,37.6645 135.5,39.5C 138.496,30.1726 135.496,27.506 126.5,31.5C 123.768,30.0202 121.268,30.3535 119,32.5C 118.21,30.2102 116.876,29.8769 115,31.5C 112.991,32.4821 112.491,33.8154 113.5,35.5C 112.917,37.0016 112.084,38.3349 111,39.5C 110.818,36.7737 110.318,34.1071 109.5,31.5C 106.373,33.2498 104.04,35.7498 102.5,39C 101.552,39.4828 100.552,39.6495 99.5,39.5C 99.5,36.8333 99.5,34.1667 99.5,31.5C 99.1866,28.7531 99.52,26.0865 100.5,23.5C 101.452,25.0453 101.785,26.712 101.5,28.5C 103.167,28.5 104.833,28.5 106.5,28.5C 106.522,22.8163 109.189,21.1497 114.5,23.5C 114.5,20.8333 114.5,18.1667 114.5,15.5C 116.017,15.5106 117.184,16.1772 118,17.5C 119,14.8333 120,14.8333 121,17.5C 121.374,16.5838 121.874,15.7504 122.5,15C 124.126,15.1953 125.793,15.1953 127.5,15C 129.873,13.5846 132.207,12.0846 134.5,10.5C 135.645,11.7757 135.645,13.109 134.5,14.5C 136.554,15.8655 138.554,16.1988 140.5,15.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f4e53\",\n    d: \"M 339.5,-0.5 C 339.833,-0.5 340.167,-0.5 340.5,-0.5C 340.184,3.52457 340.017,7.52457 340,11.5C 341.278,14.155 343.278,16.155 346,17.5C 346.167,18.3333 346.333,19.1667 346.5,20C 344.819,23.5883 344.152,27.4216 344.5,31.5C 339.953,32.1325 335.453,32.1325 331,31.5C 328.849,31.6431 327.182,32.6431 326,34.5C 324.514,44.5126 326.347,53.8459 331.5,62.5C 329.949,65.359 328.949,68.359 328.5,71.5C 326.088,71.244 324.421,72.244 323.5,74.5C 322.453,71.9337 321.786,69.267 321.5,66.5C 322.727,61.8778 323.227,57.2111 323,52.5C 322.311,51.6433 321.478,50.9767 320.5,50.5C 318.224,51.2132 315.891,51.7132 313.5,52C 312.299,52.9025 311.465,54.0692 311,55.5C 311.3,61.1474 311.3,66.8141 311,72.5C 310.333,71.8333 309.667,71.1667 309,70.5C 308.502,73.4816 308.335,76.4816 308.5,79.5C 307.167,79.5 305.833,79.5 304.5,79.5C 304.73,72.1232 305.396,64.7899 306.5,57.5C 309.021,55.9696 310.021,53.6363 309.5,50.5C 314.143,50.0578 318.81,49.0578 323.5,47.5C 324.446,44.569 324.946,39.569 325,32.5C 328.723,29.498 332.39,26.498 336,23.5C 337.5,27.3333 339.333,27.5 341.5,24C 340.118,18.3035 338.118,12.4702 335.5,6.5C 338.885,5.99381 340.218,3.66048 339.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#859285\",\n    d: \"M 264.5,5.5 C 261.477,8.52574 258.81,11.8591 256.5,15.5C 252.324,17.7099 247.991,18.0432 243.5,16.5C 243.719,17.675 243.386,18.675 242.5,19.5C 240.201,20.6351 238.034,21.9684 236,23.5C 235.209,22.255 234.709,20.9217 234.5,19.5C 235.167,19.5 235.5,19.1667 235.5,18.5C 240.948,15.9342 246.615,14.2675 252.5,13.5C 252.833,13.5 253.167,13.5 253.5,13.5C 254.552,13.6495 255.552,13.4828 256.5,13C 258.402,9.59522 261.069,7.09522 264.5,5.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6f8075\",\n    d: \"M 273.5,-0.5 C 275.5,-0.5 277.5,-0.5 279.5,-0.5C 279.306,1.91176 277.973,2.91176 275.5,2.5C 274.543,7.2577 271.543,9.59103 266.5,9.5C 264.627,16.4561 259.96,19.4561 252.5,18.5C 252.5,21.5 252.5,24.5 252.5,27.5C 247.67,28.7657 243.336,30.7657 239.5,33.5C 235.095,36.3958 231.095,39.8958 227.5,44C 229.875,46.5376 230.542,49.3709 229.5,52.5C 230.167,53.1667 230.833,53.8333 231.5,54.5C 230.147,55.5237 229.48,56.857 229.5,58.5C 228.5,58.5 227.5,58.5 226.5,58.5C 226.67,57.1779 226.337,56.0113 225.5,55C 221.519,55.1923 218.519,53.6923 216.5,50.5C 214.338,48.9802 212.005,47.9802 209.5,47.5C 209.37,51.8682 209.703,56.2015 210.5,60.5C 208.338,66.3386 208.671,72.0053 211.5,77.5C 212.552,79.256 214.219,79.9227 216.5,79.5C 219.698,78.9644 222.365,79.631 224.5,81.5C 220.521,79.7152 217.521,80.7152 215.5,84.5C 214.833,84.5 214.5,84.8333 214.5,85.5C 213.178,85.67 212.011,85.3366 211,84.5C 208.9,79.3678 207.733,74.0345 207.5,68.5C 207.5,60.8333 207.5,53.1667 207.5,45.5C 211.614,45.7492 215.28,47.2492 218.5,50C 219.337,51.0113 219.67,52.1779 219.5,53.5C 220.833,53.5 222.167,53.5 223.5,53.5C 223.72,49.0555 224.554,44.7222 226,40.5C 229.72,38.2334 232.887,35.4 235.5,32C 234.5,31.6667 233.5,31.3333 232.5,31C 231.167,30.3333 231.167,29.6667 232.5,29C 230.939,28.6824 229.772,27.8491 229,26.5C 227.224,27.5361 225.391,27.5361 223.5,26.5C 223.5,25.5 223.5,24.5 223.5,23.5C 227.775,24.2503 231.109,22.917 233.5,19.5C 233.833,19.5 234.167,19.5 234.5,19.5C 234.709,20.9217 235.209,22.255 236,23.5C 238.034,21.9684 240.201,20.6351 242.5,19.5C 243.386,18.675 243.719,17.675 243.5,16.5C 247.991,18.0432 252.324,17.7099 256.5,15.5C 258.81,11.8591 261.477,8.52574 264.5,5.5C 269.423,6.21452 272.423,4.21452 273.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#39474c\",\n    d: \"M 340.5,-0.5 C 344.167,-0.5 347.833,-0.5 351.5,-0.5C 352.028,0.72065 352.695,1.88732 353.5,3C 351.372,7.83903 348.206,9.0057 344,6.5C 343.043,10.3614 344.21,13.3614 347.5,15.5C 347.787,17.1207 348.787,18.1207 350.5,18.5C 353.421,17.5934 356.421,17.2601 359.5,17.5C 358.948,19.3307 358.948,20.9974 359.5,22.5C 359.023,23.931 358.357,25.2643 357.5,26.5C 352.776,28.0681 349.109,30.9014 346.5,35C 340.695,38.0589 335.528,37.5589 331,33.5C 330.085,34.3279 329.419,35.3279 329,36.5C 328.333,40.5 328.333,44.5 329,48.5C 331.391,49.6025 331.891,48.9358 330.5,46.5C 330.808,45.6919 331.308,45.0253 332,44.5C 333.85,50.0881 336.017,55.4214 338.5,60.5C 338.222,63.0666 338.056,65.7333 338,68.5C 337.623,69.9423 336.79,70.9423 335.5,71.5C 333.374,70.8968 331.041,70.8968 328.5,71.5C 328.949,68.359 329.949,65.359 331.5,62.5C 326.347,53.8459 324.514,44.5126 326,34.5C 327.182,32.6431 328.849,31.6431 331,31.5C 335.453,32.1325 339.953,32.1325 344.5,31.5C 344.152,27.4216 344.819,23.5883 346.5,20C 346.333,19.1667 346.167,18.3333 346,17.5C 343.278,16.155 341.278,14.155 340,11.5C 340.017,7.52457 340.184,3.52457 340.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#242e32\",\n    d: \"M 16.5,-0.5 C 23.1667,-0.5 29.8333,-0.5 36.5,-0.5C 35.412,3.27967 33.0787,6.27967 29.5,8.5C 29.8457,9.69559 30.3457,9.69559 31,8.5C 31.5758,10.3774 31.4091,12.2108 30.5,14C 30.6301,15.0588 31.1301,15.8921 32,16.5C 33.1096,14.9632 34.6096,14.2965 36.5,14.5C 37.0488,12.0987 37.8822,9.76541 39,7.5C 39.6667,6.16667 40.3333,6.16667 41,7.5C 41.8403,4.53633 42.8403,4.203 44,6.5C 44.4186,5.32791 45.0853,4.32791 46,3.5C 47.0734,7.08356 47.7401,10.7502 48,14.5C 48.3333,11.5 48.6667,8.5 49,5.5C 49.414,5.04265 49.914,4.70931 50.5,4.5C 54.4412,7.12372 56.1078,10.7904 55.5,15.5C 52.7284,16.3715 50.0618,16.3715 47.5,15.5C 47.5,17.1667 47.5,18.8333 47.5,20.5C 48.5,20.5 49.5,20.5 50.5,20.5C 50.2067,26.5528 52.8733,28.8861 58.5,27.5C 58.5618,33.5345 60.8951,38.3679 65.5,42C 67.8617,41.9115 70.0284,41.0781 72,39.5C 73.8613,40.6087 74.6947,42.2753 74.5,44.5C 74.1385,47.2795 73.4718,49.9462 72.5,52.5C 71.603,53.5981 70.7697,53.5981 70,52.5C 69.5172,53.448 69.3505,54.448 69.5,55.5C 65.6685,55.1902 64.1685,56.8569 65,60.5C 67.6073,61.1233 70.1073,61.79 72.5,62.5C 71.3121,63.6843 70.1455,63.6843 69,62.5C 68.3109,63.3567 67.4776,64.0233 66.5,64.5C 64.4044,62.1222 62.4044,59.6222 60.5,57C 57.1832,56.5017 53.8499,56.335 50.5,56.5C 50.5,56.1667 50.5,55.8333 50.5,55.5C 52.0481,55.1788 52.7148,54.1788 52.5,52.5C 55.1411,53.2631 57.8078,53.4298 60.5,53C 59.3078,51.0548 59.3078,49.0548 60.5,47C 58.1605,44.996 56.6605,42.496 56,39.5C 55.7837,41.3839 55.117,43.0506 54,44.5C 53.0438,41.6229 51.7105,38.9562 50,36.5C 49.3076,37.0253 48.8076,37.6919 48.5,38.5C 49.4476,43.4351 49.781,48.4351 49.5,53.5C 47.4149,50.8806 45.9149,47.8806 45,44.5C 44.4532,47.7024 43.4532,50.7024 42,53.5C 40.9563,52.3774 40.2896,51.0441 40,49.5C 37.5941,52.1522 35.7608,51.6522 34.5,48C 36.2935,45.1542 38.1268,44.9875 40,47.5C 40.5992,41.4083 41.2658,35.4083 42,29.5C 41.586,29.0426 41.086,28.7093 40.5,28.5C 37.1027,30.5218 33.4361,31.5218 29.5,31.5C 29.2035,34.7239 29.8702,37.7239 31.5,40.5C 26.1092,42.2823 21.1092,44.6157 16.5,47.5C 16.5,48.5 16.5,49.5 16.5,50.5C 14.712,50.7852 13.0453,50.4519 11.5,49.5C 10.7884,47.9541 9.62173,46.9541 8,46.5C 5.90115,47.2865 3.73448,47.6199 1.5,47.5C 0.833333,47.5 0.166667,47.5 -0.5,47.5C -0.5,46.5 -0.5,45.5 -0.5,44.5C 1.19917,42.9837 3.19917,41.9837 5.5,41.5C 8.79748,42.4959 12.1308,42.6626 15.5,42C 16.8993,40.9384 17.8993,39.605 18.5,38C 16.5708,36.3058 15.5708,34.1391 15.5,31.5C 18.2469,31.8134 20.9135,31.48 23.5,30.5C 25.4133,28.7089 27.08,26.7089 28.5,24.5C 28.9566,19.5922 28.29,14.7589 26.5,10C 25.8333,9.33333 25.1667,9.33333 24.5,10C 23.4651,13.6114 21.7984,14.1114 19.5,11.5C 17.2608,12.0784 15.2608,12.0784 13.5,11.5C 12.3526,9.23512 12.1859,6.90179 13,4.5C 15.5562,3.78089 16.7229,2.11422 16.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#728482\",\n    d: \"M 223.5,23.5 C 223.5,24.5 223.5,25.5 223.5,26.5C 223.5,26.8333 223.5,27.1667 223.5,27.5C 222.735,27.0766 221.902,26.7432 221,26.5C 219.415,28.9521 217.582,31.2855 215.5,33.5C 211.848,36.6437 209.848,35.977 209.5,31.5C 211.389,32.3799 213.389,32.3799 215.5,31.5C 215.33,30.1779 215.663,29.0113 216.5,28C 215.584,27.6258 214.75,27.1258 214,26.5C 213.503,24.1902 213.337,21.8568 213.5,19.5C 216.167,19.5 218.833,19.5 221.5,19.5C 221.229,21.3797 221.896,22.713 223.5,23.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4a5c5c\",\n    d: \"M 310.5,-0.5 C 313.5,-0.5 316.5,-0.5 319.5,-0.5C 318.298,3.04829 317.631,6.71496 317.5,10.5C 318.5,10.5 319.5,10.5 320.5,10.5C 320.383,12.4835 321.05,14.1502 322.5,15.5C 323.134,13.4332 324.134,11.5998 325.5,10C 328.146,9.50258 330.813,9.33591 333.5,9.5C 333.624,11.952 334.624,13.952 336.5,15.5C 335.428,18.2037 334.428,20.8704 333.5,23.5C 332.022,23.238 330.689,23.5713 329.5,24.5C 328.605,26.3068 327.272,27.6401 325.5,28.5C 323.443,26.4689 321.61,26.4689 320,28.5C 321.844,33.1986 323.011,38.1986 323.5,43.5C 320.932,44.4496 318.432,44.4496 316,43.5C 315.363,38.8511 316.197,34.5177 318.5,30.5C 317.52,29.0186 316.353,27.6853 315,26.5C 313.388,29.237 311.222,30.0703 308.5,29C 307.346,36.1027 307.346,43.2694 308.5,50.5C 308.203,53.0119 307.537,55.3452 306.5,57.5C 305.396,64.7899 304.73,72.1232 304.5,79.5C 303.833,79.5 303.5,79.8333 303.5,80.5C 302.5,80.5 301.5,80.5 300.5,80.5C 300.993,82.8056 301.326,85.139 301.5,87.5C 299.98,85.1098 298.98,82.4432 298.5,79.5C 299.353,74.1961 300.52,74.1961 302,79.5C 303.69,73.1856 303.857,66.8522 302.5,60.5C 305.921,56.5878 307.254,52.2545 306.5,47.5C 304.325,47.3178 302.325,46.6511 300.5,45.5C 296.743,47.4184 292.743,47.9184 288.5,47C 287.966,43.505 286.633,40.3383 284.5,37.5C 280.897,39.1852 277.063,40.1852 273,40.5C 272.055,40.9054 271.388,41.572 271,42.5C 270.842,38.1393 272.008,34.1393 274.5,30.5C 277.109,29.7695 279.776,29.2695 282.5,29C 283.406,27.3005 283.739,25.4672 283.5,23.5C 284.5,23.1667 285.167,22.5 285.5,21.5C 286.167,21.1667 286.833,20.8333 287.5,20.5C 292.216,18.4859 296.883,16.9859 301.5,16C 305.152,15.5014 308.818,15.3347 312.5,15.5C 312.803,11.7629 313.803,8.2629 315.5,5C 315.333,4.16667 315.167,3.33333 315,2.5C 312.974,2.08527 311.474,1.08527 310.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d3941\",\n    d: \"M 96.5,39.5 C 97.058,41.5635 98.2246,43.2302 100,44.5C 103.513,41.6673 106.513,42.0006 109,45.5C 108.781,50.4848 108.781,55.4848 109,60.5C 114.931,63.6903 117.764,68.6903 117.5,75.5C 118.425,76.6405 119.259,76.6405 120,75.5C 120.5,76.5 121,77.5 121.5,78.5C 120.756,81.443 120.256,84.443 120,87.5C 117.391,86.0915 115.558,86.7582 114.5,89.5C 111.488,90.4309 108.988,89.4309 107,86.5C 105.924,89.3595 105.091,92.3595 104.5,95.5C 102.584,96.2483 100.584,96.2483 98.5,95.5C 98.762,96.9778 98.4287,98.3112 97.5,99.5C 96.4104,98.6086 96.4104,97.6086 97.5,96.5C 95.7282,95.7303 94.7282,94.3969 94.5,92.5C 94.9404,89.1036 95.9404,85.937 97.5,83C 97.0376,80.3231 96.2043,77.8231 95,75.5C 93.9535,78.4985 91.7868,79.9985 88.5,80C 85.5,80.6667 82.5,80.6667 79.5,80C 78.6195,79.2917 77.9528,78.4584 77.5,77.5C 87.9139,78.5856 92.4139,73.9189 91,63.5C 90,62.1667 89,62.1667 88,63.5C 84.9124,59.5148 82.9124,60.1815 82,65.5C 80.6453,61.5914 79.6453,57.5914 79,53.5C 77.5873,55.6524 76.7539,57.9857 76.5,60.5C 75.5,60.5 74.5,60.5 73.5,60.5C 72.7682,57.7342 72.7682,55.0675 73.5,52.5C 74.9986,51.3218 75.9986,49.6551 76.5,47.5C 77.5272,46.2086 78.5272,46.2086 79.5,47.5C 79.2837,49.6807 80.117,51.3474 82,52.5C 85.075,52.3677 87.7416,53.701 90,56.5C 91.1203,54.9698 91.9536,53.3032 92.5,51.5C 93.4232,52.3029 94.4232,52.4696 95.5,52C 95.1667,51.6667 94.8333,51.3333 94.5,51C 98.3352,47.2715 98.3352,43.4381 94.5,39.5C 93.2175,36.6281 93.2175,33.7947 94.5,31C 93.9152,29.6976 93.2485,28.531 92.5,27.5C 92.4606,26.4168 92.1272,25.4168 91.5,24.5C 92.8333,23.1667 94.1667,23.1667 95.5,24.5C 94.3132,26.9752 94.6465,29.3086 96.5,31.5C 95.2974,34.1599 95.2974,36.8265 96.5,39.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#212c32\",\n    d: \"M 399.5,31.5 C 399.5,46.1667 399.5,60.8333 399.5,75.5C 397.339,71.8272 395.672,67.8272 394.5,63.5C 393.167,63.5 391.833,63.5 390.5,63.5C 390.74,60.4212 390.407,57.4212 389.5,54.5C 390.04,53.2519 390.707,52.0852 391.5,51C 390.464,49.3831 389.297,49.2164 388,50.5C 387.121,52.8961 386.454,55.2294 386,57.5C 384.764,56.6008 383.93,55.4341 383.5,54C 384.196,51.5933 384.529,49.2599 384.5,47C 381.129,43.2332 380.796,39.2332 383.5,35C 383.333,34.1667 383.167,33.3333 383,32.5C 382.333,33.8333 381.667,33.8333 381,32.5C 379.746,28.8886 380.912,27.3886 384.5,28C 386.002,30.5741 387.002,33.4074 387.5,36.5C 389.693,38.7206 392.36,40.054 395.5,40.5C 396.308,40.1924 396.975,39.6924 397.5,39C 396.313,37.9805 395.313,36.8139 394.5,35.5C 396.185,34.0473 397.851,32.714 399.5,31.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141d22\",\n    d: \"M -0.5,28.5 C 2.8499,28.335 6.18323,28.5017 9.5,29C 10.6721,29.4186 11.6721,30.0853 12.5,31C 11.9318,33.6838 10.9318,36.1838 9.5,38.5C 6.21208,39.4453 2.87875,40.112 -0.5,40.5C -0.5,36.5 -0.5,32.5 -0.5,28.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#303b41\",\n    d: \"M 367.5,-0.5 C 372.167,-0.5 376.833,-0.5 381.5,-0.5C 379.272,4.50031 378.939,9.66698 380.5,15C 378.819,18.5883 378.152,22.4216 378.5,26.5C 377.5,26.5 376.5,26.5 375.5,26.5C 375.5,28.1667 375.5,29.8333 375.5,31.5C 376.833,31.5 378.167,31.5 379.5,31.5C 379.813,34.2469 379.48,36.9135 378.5,39.5C 377.083,41.8345 376.083,44.3345 375.5,47C 377.414,51.3236 379.414,55.4902 381.5,59.5C 383.484,59.3832 385.15,60.0499 386.5,61.5C 388.574,59.1723 389.574,59.8389 389.5,63.5C 386.182,63.9392 383.016,63.9392 380,63.5C 378.107,64.0077 376.607,65.0077 375.5,66.5C 375.414,65.5041 375.748,64.6708 376.5,64C 373.331,63.0218 370.497,63.5218 368,65.5C 366.599,63.8078 364.766,63.1412 362.5,63.5C 363.605,61.2869 363.605,59.1203 362.5,57C 361.551,56.3828 360.718,56.5494 360,57.5C 357.579,55.4063 354.912,53.7396 352,52.5C 351.667,53.5 351.333,54.5 351,55.5C 349.255,54.0443 347.422,52.711 345.5,51.5C 344.209,53.0971 342.709,54.4304 341,55.5C 337.027,51.6988 335.36,47.3655 336,42.5C 336.833,41.5 337.667,40.5 338.5,39.5C 342.711,37.9649 347.044,36.9649 351.5,36.5C 351.833,34.5 352.167,32.5 352.5,30.5C 354.833,30.5 357.167,30.5 359.5,30.5C 360.544,27.8349 361.711,25.1683 363,22.5C 364.587,21.273 365.921,21.6063 367,23.5C 367.915,22.6721 368.581,21.6721 369,20.5C 367.925,13.681 367.425,6.68095 367.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#364248\",\n    d: \"M 365.5,-0.5 C 366.167,-0.5 366.833,-0.5 367.5,-0.5C 367.425,6.68095 367.925,13.681 369,20.5C 368.581,21.6721 367.915,22.6721 367,23.5C 365.921,21.6063 364.587,21.273 363,22.5C 361.711,25.1683 360.544,27.8349 359.5,30.5C 357.167,30.5 354.833,30.5 352.5,30.5C 352.167,32.5 351.833,34.5 351.5,36.5C 347.044,36.9649 342.711,37.9649 338.5,39.5C 337.667,40.5 336.833,41.5 336,42.5C 335.36,47.3655 337.027,51.6988 341,55.5C 342.709,54.4304 344.209,53.0971 345.5,51.5C 347.422,52.711 349.255,54.0443 351,55.5C 351.333,54.5 351.667,53.5 352,52.5C 354.912,53.7396 357.579,55.4063 360,57.5C 360.718,56.5494 361.551,56.3828 362.5,57C 363.605,59.1203 363.605,61.2869 362.5,63.5C 361.193,64.1534 359.86,64.8201 358.5,65.5C 357.158,63.9951 355.492,63.3285 353.5,63.5C 353.309,66.9827 352.643,70.3161 351.5,73.5C 350.127,73.6567 348.793,73.49 347.5,73C 343.025,67.0649 339.692,67.2316 337.5,73.5C 336.287,73.2528 335.62,72.5862 335.5,71.5C 336.79,70.9423 337.623,69.9423 338,68.5C 338.056,65.7333 338.222,63.0666 338.5,60.5C 336.017,55.4214 333.85,50.0881 332,44.5C 331.308,45.0253 330.808,45.6919 330.5,46.5C 331.891,48.9358 331.391,49.6025 329,48.5C 328.333,44.5 328.333,40.5 329,36.5C 329.419,35.3279 330.085,34.3279 331,33.5C 335.528,37.5589 340.695,38.0589 346.5,35C 349.109,30.9014 352.776,28.0681 357.5,26.5C 358.357,25.2643 359.023,23.931 359.5,22.5C 358.948,20.9974 358.948,19.3307 359.5,17.5C 356.421,17.2601 353.421,17.5934 350.5,18.5C 348.787,18.1207 347.787,17.1207 347.5,15.5C 348.822,15.33 349.989,15.6634 351,16.5C 351.249,15.376 351.749,14.376 352.5,13.5C 356.664,16.3022 360.664,16.1356 364.5,13C 365.467,8.59858 365.8,4.09858 365.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#556867\",\n    d: \"M 268.5,20.5 C 272.105,22.3135 275.938,23.6468 280,24.5C 281.256,24.3517 282.423,24.0184 283.5,23.5C 283.739,25.4672 283.406,27.3005 282.5,29C 279.776,29.2695 277.109,29.7695 274.5,30.5C 272.008,34.1393 270.842,38.1393 271,42.5C 271.388,41.572 272.055,40.9054 273,40.5C 277.063,40.1852 280.897,39.1852 284.5,37.5C 286.633,40.3383 287.966,43.505 288.5,47C 292.743,47.9184 296.743,47.4184 300.5,45.5C 302.325,46.6511 304.325,47.3178 306.5,47.5C 305.115,50.6591 304.115,53.9925 303.5,57.5C 302.167,57.5 300.833,57.5 299.5,57.5C 298.833,80.1667 298.167,80.1667 297.5,57.5C 296.5,57.5 295.5,57.5 294.5,57.5C 294.671,60.7973 294.005,61.1306 292.5,58.5C 289.028,57.4235 285.528,56.4235 282,55.5C 281.055,55.0946 280.388,54.428 280,53.5C 279.15,55.01 278.317,56.51 277.5,58C 280.126,62.5255 280.126,67.0255 277.5,71.5C 276.671,66.1975 276.171,60.8642 276,55.5C 275.529,53.7536 274.862,52.087 274,50.5C 270.997,55.9935 267.33,56.6601 263,52.5C 262.202,55.2393 260.535,57.2393 258,58.5C 257.572,61.0729 257.906,63.4062 259,65.5C 257.887,66.7111 256.72,66.7111 255.5,65.5C 255.167,66 254.833,66.5 254.5,67C 255.484,69.3909 257.15,71.2242 259.5,72.5C 260.298,74.0777 260.798,75.7444 261,77.5C 262.581,74.446 263.414,71.446 263.5,68.5C 264.799,69.09 265.632,70.09 266,71.5C 266.771,74.1897 267.604,76.8564 268.5,79.5C 269.687,80.6527 270.687,80.6527 271.5,79.5C 274.8,80.7286 277.8,82.3952 280.5,84.5C 281.341,86.3792 281.675,88.3792 281.5,90.5C 279.507,88.5332 277.507,86.5332 275.5,84.5C 272.282,83.9091 269.116,82.9091 266,81.5C 263.901,82.2865 261.734,82.6199 259.5,82.5C 259.663,80.1432 259.497,77.8098 259,75.5C 258.623,74.0577 257.79,73.0577 256.5,72.5C 253.117,70.8952 251.783,68.3952 252.5,65C 251.576,60.2872 250.076,59.7872 248,63.5C 247.506,65.1341 247.34,66.8008 247.5,68.5C 243.035,68.0338 240.035,65.7005 238.5,61.5C 240.708,60.1064 242.208,58.1064 243,55.5C 243.544,52.3754 244.377,49.3754 245.5,46.5C 247.792,46.2436 249.959,46.5769 252,47.5C 253.333,50.8333 254.667,54.1667 256,57.5C 257.512,56.7433 258.846,55.7433 260,54.5C 261.152,47.2066 262.152,39.8732 263,32.5C 263.144,35.8957 264.977,38.5624 268.5,40.5C 269.69,37.3692 270.69,34.2025 271.5,31C 270.06,27.6358 269.06,24.1358 268.5,20.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a6a89a\",\n    d: \"M 175.5,-0.5 C 179.833,-0.5 184.167,-0.5 188.5,-0.5C 187.908,2.12717 187.575,4.79384 187.5,7.5C 190.518,7.33537 193.518,7.50204 196.5,8C 198.5,10.6667 200.5,13.3333 202.5,16C 201.833,18.6667 201.167,21.3333 200.5,24C 202.691,26.0976 204.024,28.5976 204.5,31.5C 205.748,32.3339 206.415,33.6672 206.5,35.5C 205.795,39.245 204.795,42.9117 203.5,46.5C 204.221,53.4799 204.721,60.4799 205,67.5C 207.386,74.1866 208.22,80.8532 207.5,87.5C 206.34,86.3886 205.007,85.3886 203.5,84.5C 204.638,79.524 204.638,74.524 203.5,69.5C 201.618,55.2149 201.284,40.8815 202.5,26.5C 198.5,25.8333 196.833,27.5 197.5,31.5C 196.5,31.5 195.5,31.5 194.5,31.5C 194.34,34.8835 194.673,38.2169 195.5,41.5C 195.123,44.2862 193.789,46.2862 191.5,47.5C 191.461,46.2438 191.961,45.2438 193,44.5C 193.333,37.8333 193.667,31.1667 194,24.5C 199.717,20.3871 200.551,15.5538 196.5,10C 190.825,9.40645 185.158,8.73978 179.5,8C 176.156,6.10601 174.822,3.27267 175.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5a6e6b\",\n    d: \"M 268.5,20.5 C 269.06,24.1358 270.06,27.6358 271.5,31C 270.69,34.2025 269.69,37.3692 268.5,40.5C 264.977,38.5624 263.144,35.8957 263,32.5C 262.152,39.8732 261.152,47.2066 260,54.5C 258.846,55.7433 257.512,56.7433 256,57.5C 254.667,54.1667 253.333,50.8333 252,47.5C 249.959,46.5769 247.792,46.2436 245.5,46.5C 244.377,49.3754 243.544,52.3754 243,55.5C 242.208,58.1064 240.708,60.1064 238.5,61.5C 239.181,54.5274 241.181,48.0274 244.5,42C 242.833,41.6667 241.167,41.3333 239.5,41C 243.449,40.1932 243.449,39.6932 239.5,39.5C 239.5,37.5 239.5,35.5 239.5,33.5C 243.336,30.7657 247.67,28.7657 252.5,27.5C 255.649,20.686 260.983,18.3527 268.5,20.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#657a77\",\n    d: \"M 258.5,28.5 C 259.822,31.7681 260.489,35.4348 260.5,39.5C 260.333,43.1667 260.167,46.8333 260,50.5C 258.688,52.6576 257.022,52.9909 255,51.5C 254.833,50.6667 254.667,49.8333 254.5,49C 256.586,42.2842 257.919,35.4509 258.5,28.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a897c\",\n    d: \"M 223.5,26.5 C 225.391,27.5361 227.224,27.5361 229,26.5C 229.772,27.8491 230.939,28.6824 232.5,29C 231.167,29.6667 231.167,30.3333 232.5,31C 233.5,31.3333 234.5,31.6667 235.5,32C 232.887,35.4 229.72,38.2334 226,40.5C 224.554,44.7222 223.72,49.0555 223.5,53.5C 222.167,53.5 220.833,53.5 219.5,53.5C 219.67,52.1779 219.337,51.0113 218.5,50C 215.28,47.2492 211.614,45.7492 207.5,45.5C 207.5,53.1667 207.5,60.8333 207.5,68.5C 206.363,60.3365 205.863,52.0031 206,43.5C 206.383,42.944 206.883,42.6107 207.5,42.5C 207.435,42.9382 207.601,43.2716 208,43.5C 211.252,40.5498 214.085,40.8831 216.5,44.5C 217.732,43.8555 219.065,43.6888 220.5,44C 219.332,42.1291 219.832,40.6291 222,39.5C 223.015,35.5598 223.515,31.5598 223.5,27.5C 223.5,27.1667 223.5,26.8333 223.5,26.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#293439\",\n    d: \"M 381.5,-0.5 C 387.5,-0.5 393.5,-0.5 399.5,-0.5C 399.5,10.1667 399.5,20.8333 399.5,31.5C 397.851,32.714 396.185,34.0473 394.5,35.5C 395.313,36.8139 396.313,37.9805 397.5,39C 396.975,39.6924 396.308,40.1924 395.5,40.5C 392.36,40.054 389.693,38.7206 387.5,36.5C 387.002,33.4074 386.002,30.5741 384.5,28C 380.912,27.3886 379.746,28.8886 381,32.5C 381.667,33.8333 382.333,33.8333 383,32.5C 383.167,33.3333 383.333,34.1667 383.5,35C 380.796,39.2332 381.129,43.2332 384.5,47C 384.529,49.2599 384.196,51.5933 383.5,54C 383.93,55.4341 384.764,56.6008 386,57.5C 386.454,55.2294 387.121,52.8961 388,50.5C 389.297,49.2164 390.464,49.3831 391.5,51C 390.707,52.0852 390.04,53.2519 389.5,54.5C 390.407,57.4212 390.74,60.4212 390.5,63.5C 390.167,63.5 389.833,63.5 389.5,63.5C 389.574,59.8389 388.574,59.1723 386.5,61.5C 385.15,60.0499 383.484,59.3832 381.5,59.5C 379.414,55.4902 377.414,51.3236 375.5,47C 376.083,44.3345 377.083,41.8345 378.5,39.5C 379.48,36.9135 379.813,34.2469 379.5,31.5C 378.167,31.5 376.833,31.5 375.5,31.5C 375.5,29.8333 375.5,28.1667 375.5,26.5C 376.5,26.5 377.5,26.5 378.5,26.5C 378.152,22.4216 378.819,18.5883 380.5,15C 378.939,9.66698 379.272,4.50031 381.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b373b\",\n    d: \"M 55.5,15.5 C 56.0431,15.56 56.3764,15.8933 56.5,16.5C 55.6533,17.8448 54.4866,18.8448 53,19.5C 52.5045,21.4727 52.3379,23.4727 52.5,25.5C 55.876,25.9516 59.2094,26.6182 62.5,27.5C 63.4776,27.0233 64.3109,26.3567 65,25.5C 65.4955,27.4727 65.6621,29.4727 65.5,31.5C 65.5,33.1667 65.5,34.8333 65.5,36.5C 66.8333,36.5 68.1667,36.5 69.5,36.5C 69.3354,33.4816 69.502,30.4816 70,27.5C 70.9246,26.9535 71.7579,26.2868 72.5,25.5C 70.8155,21.5413 72.1488,19.5413 76.5,19.5C 76.5,20.8333 76.5,22.1667 76.5,23.5C 78.4672,23.7394 80.3005,23.4061 82,22.5C 83.0173,24.3759 83.8506,26.3759 84.5,28.5C 85.4803,27.0186 86.647,25.6853 88,24.5C 89.6147,25.3862 91.1147,26.3862 92.5,27.5C 93.2485,28.531 93.9152,29.6976 94.5,31C 93.2175,33.7947 93.2175,36.6281 94.5,39.5C 98.3352,43.4381 98.3352,47.2715 94.5,51C 94.8333,51.3333 95.1667,51.6667 95.5,52C 94.4232,52.4696 93.4232,52.3029 92.5,51.5C 92.5,50.1667 92.5,48.8333 92.5,47.5C 91.325,47.719 90.325,47.3857 89.5,46.5C 88.9744,44.7697 87.9744,43.4363 86.5,42.5C 84.2534,43.3742 81.9201,43.7076 79.5,43.5C 79.5,44.8333 79.5,46.1667 79.5,47.5C 78.5272,46.2086 77.5272,46.2086 76.5,47.5C 75.9986,49.6551 74.9986,51.3218 73.5,52.5C 73.1667,52.5 72.8333,52.5 72.5,52.5C 73.4718,49.9462 74.1385,47.2795 74.5,44.5C 74.6947,42.2753 73.8613,40.6087 72,39.5C 70.0284,41.0781 67.8617,41.9115 65.5,42C 60.8951,38.3679 58.5618,33.5345 58.5,27.5C 52.8733,28.8861 50.2067,26.5528 50.5,20.5C 49.5,20.5 48.5,20.5 47.5,20.5C 47.5,18.8333 47.5,17.1667 47.5,15.5C 50.0618,16.3715 52.7284,16.3715 55.5,15.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3c4b4e\",\n    d: \"M 146.5,41.5 C 147.404,40.791 147.737,39.791 147.5,38.5C 148.822,38.67 149.989,38.3366 151,37.5C 151.662,39.8127 152.162,42.146 152.5,44.5C 149.026,45.7406 146.026,47.7406 143.5,50.5C 142.326,48.766 140.66,47.766 138.5,47.5C 137.006,47.7092 135.839,48.3759 135,49.5C 133.328,46.0331 130.828,43.6998 127.5,42.5C 127.719,46.5274 126.552,47.1941 124,44.5C 123.517,43.552 123.351,42.552 123.5,41.5C 122.167,41.5 120.833,41.5 119.5,41.5C 119.5,39.8333 119.5,38.1667 119.5,36.5C 118.167,36.5 116.833,36.5 115.5,36.5C 114.087,41.8836 113.087,47.3836 112.5,53C 112.514,54.3847 112.848,55.5514 113.5,56.5C 113.484,58.4841 114.484,59.4841 116.5,59.5C 119.115,58.7308 121.781,58.3975 124.5,58.5C 124.31,60.9589 125.31,62.6255 127.5,63.5C 122.977,64.1261 118.811,64.1261 115,63.5C 114.311,62.6433 113.478,61.9767 112.5,61.5C 111.671,56.1975 111.171,50.8642 111,45.5C 110.051,42.6447 108.384,40.3114 106,38.5C 104.307,40.0267 102.473,41.3601 100.5,42.5C 99.1451,41.8118 98.1451,40.8118 97.5,39.5C 98.1667,36.8333 98.8333,34.1667 99.5,31.5C 99.5,34.1667 99.5,36.8333 99.5,39.5C 100.552,39.6495 101.552,39.4828 102.5,39C 104.04,35.7498 106.373,33.2498 109.5,31.5C 110.318,34.1071 110.818,36.7737 111,39.5C 112.084,38.3349 112.917,37.0016 113.5,35.5C 112.491,33.8154 112.991,32.4821 115,31.5C 116.876,29.8769 118.21,30.2102 119,32.5C 121.268,30.3535 123.768,30.0202 126.5,31.5C 135.496,27.506 138.496,30.1726 135.5,39.5C 139.772,37.6645 142.772,38.9978 144.5,43.5C 145.522,43.1445 146.189,42.4778 146.5,41.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#818c87\",\n    d: \"M 235.5,18.5 C 235.5,19.1667 235.167,19.5 234.5,19.5C 234.167,19.5 233.833,19.5 233.5,19.5C 232.37,17.6854 231.704,15.6854 231.5,13.5C 224.487,13.1646 217.487,12.9979 210.5,13C 209.524,19.0758 209.19,25.2424 209.5,31.5C 209.848,35.977 211.848,36.6437 215.5,33.5C 217.582,31.2855 219.415,28.9521 221,26.5C 221.902,26.7432 222.735,27.0766 223.5,27.5C 223.515,31.5598 223.015,35.5598 222,39.5C 219.832,40.6291 219.332,42.1291 220.5,44C 219.065,43.6888 217.732,43.8555 216.5,44.5C 214.085,40.8831 211.252,40.5498 208,43.5C 207.601,43.2716 207.435,42.9382 207.5,42.5C 207.5,31.5 207.5,20.5 207.5,9.5C 215.601,9.34762 223.601,10.181 231.5,12C 233.221,13.9438 234.554,16.1105 235.5,18.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#47595b\",\n    d: \"M 175.5,53.5 C 175.586,54.4959 175.252,55.3292 174.5,56C 172.899,56.2734 171.399,56.7734 170,57.5C 169.667,64.1667 169.333,70.8333 169,77.5C 168.29,78.9733 167.124,79.6399 165.5,79.5C 166.122,78.3734 166.955,77.3734 168,76.5C 168.648,71.7959 168.481,67.1292 167.5,62.5C 165.856,62.2865 164.356,62.6198 163,63.5C 161.615,62.4495 160.615,61.1161 160,59.5C 160.349,51.639 158.849,44.3057 155.5,37.5C 157.435,35.2728 159.268,32.9394 161,30.5C 163.041,31.4231 165.208,31.7564 167.5,31.5C 167.324,25.8277 164.824,21.4944 160,18.5C 159.727,20.1012 159.227,21.6012 158.5,23C 154.37,23.0309 150.37,23.8642 146.5,25.5C 148.031,30.5062 147.364,35.1729 144.5,39.5C 143.596,38.791 143.263,37.791 143.5,36.5C 141.5,36.5 139.5,36.5 137.5,36.5C 137.166,30.0064 137.999,23.6731 140,17.5C 141.011,16.6634 142.178,16.33 143.5,16.5C 142.79,19.8852 143.956,22.2186 147,23.5C 149.325,21.2261 152.159,20.0595 155.5,20C 157.522,16.4656 160.522,14.9656 164.5,15.5C 164.343,16.8734 164.51,18.2068 165,19.5C 169.069,23.3583 170.402,28.025 169,33.5C 167.494,36.474 165.828,36.8073 164,34.5C 162.5,36.8333 161,39.1667 159.5,41.5C 159.728,43.3969 160.728,44.7303 162.5,45.5C 164.789,43.4077 167.289,43.0744 170,44.5C 171.439,42.9861 172.939,42.6527 174.5,43.5C 175.004,40.6582 176.671,39.3249 179.5,39.5C 179.269,44.2267 177.936,48.8934 175.5,53.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#828b81\",\n    d: \"M 187.5,21.5 C 187.575,24.2062 187.908,26.8728 188.5,29.5C 189.5,29.5 190.5,29.5 191.5,29.5C 191.827,34.544 191.494,39.544 190.5,44.5C 188.47,46.607 186.303,48.607 184,50.5C 183.275,52.1575 183.775,53.1575 185.5,53.5C 185.733,55.0618 186.4,56.3951 187.5,57.5C 186.167,57.1667 184.833,56.8333 183.5,56.5C 181.609,54.1643 181.109,51.4976 182,48.5C 188.046,44.5704 190.546,38.9037 189.5,31.5C 188.5,31.5 187.5,31.5 186.5,31.5C 186.187,27.9581 186.521,24.6248 187.5,21.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d373b\",\n    d: \"M 50.5,55.5 C 49.6618,55.1583 49.3284,54.4916 49.5,53.5C 49.781,48.4351 49.4476,43.4351 48.5,38.5C 48.8076,37.6919 49.3076,37.0253 50,36.5C 51.7105,38.9562 53.0438,41.6229 54,44.5C 55.117,43.0506 55.7837,41.3839 56,39.5C 56.6605,42.496 58.1605,44.996 60.5,47C 59.3078,49.0548 59.3078,51.0548 60.5,53C 57.8078,53.4298 55.1411,53.2631 52.5,52.5C 52.7148,54.1788 52.0481,55.1788 50.5,55.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#374547\",\n    d: \"M 92.5,51.5 C 91.9536,53.3032 91.1203,54.9698 90,56.5C 87.7416,53.701 85.075,52.3677 82,52.5C 80.117,51.3474 79.2837,49.6807 79.5,47.5C 79.5,46.1667 79.5,44.8333 79.5,43.5C 81.9201,43.7076 84.2534,43.3742 86.5,42.5C 87.9744,43.4363 88.9744,44.7697 89.5,46.5C 90.325,47.3857 91.325,47.719 92.5,47.5C 92.5,48.8333 92.5,50.1667 92.5,51.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#435356\",\n    d: \"M 165.5,79.5 C 162.265,80.7327 159.265,82.3994 156.5,84.5C 156.414,83.5041 156.748,82.6708 157.5,82C 160.51,80.3828 163.343,78.5494 166,76.5C 166.667,74.5 166.667,72.5 166,70.5C 164.989,69.6634 163.822,69.33 162.5,69.5C 162.714,67.8561 162.38,66.3561 161.5,65C 156.949,63.7852 152.282,63.1186 147.5,63C 147.002,61.8419 146.169,61.0085 145,60.5C 143.011,62.313 140.844,63.9797 138.5,65.5C 136.538,64.3655 134.538,64.3655 132.5,65.5C 130.823,64.8131 129.156,64.1465 127.5,63.5C 125.31,62.6255 124.31,60.9589 124.5,58.5C 121.781,58.3975 119.115,58.7308 116.5,59.5C 114.484,59.4841 113.484,58.4841 113.5,56.5C 112.848,55.5514 112.514,54.3847 112.5,53C 113.087,47.3836 114.087,41.8836 115.5,36.5C 116.833,36.5 118.167,36.5 119.5,36.5C 119.5,38.1667 119.5,39.8333 119.5,41.5C 120.833,41.5 122.167,41.5 123.5,41.5C 123.351,42.552 123.517,43.552 124,44.5C 126.552,47.1941 127.719,46.5274 127.5,42.5C 130.828,43.6998 133.328,46.0331 135,49.5C 135.839,48.3759 137.006,47.7092 138.5,47.5C 140.66,47.766 142.326,48.766 143.5,50.5C 146.026,47.7406 149.026,45.7406 152.5,44.5C 152.162,42.146 151.662,39.8127 151,37.5C 149.989,38.3366 148.822,38.67 147.5,38.5C 147.737,39.791 147.404,40.791 146.5,41.5C 145.833,40.8333 145.167,40.1667 144.5,39.5C 147.364,35.1729 148.031,30.5062 146.5,25.5C 150.37,23.8642 154.37,23.0309 158.5,23C 159.227,21.6012 159.727,20.1012 160,18.5C 164.824,21.4944 167.324,25.8277 167.5,31.5C 165.208,31.7564 163.041,31.4231 161,30.5C 159.268,32.9394 157.435,35.2728 155.5,37.5C 158.849,44.3057 160.349,51.639 160,59.5C 160.615,61.1161 161.615,62.4495 163,63.5C 164.356,62.6198 165.856,62.2865 167.5,62.5C 168.481,67.1292 168.648,71.7959 168,76.5C 166.955,77.3734 166.122,78.3734 165.5,79.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e5d60\",\n    d: \"M 113.5,56.5 C 113.13,51.424 114.964,47.424 119,44.5C 122.271,46.7342 125.771,48.5676 129.5,50C 132.144,52.9426 134.144,56.276 135.5,60C 131.732,61.2091 128.732,60.2091 126.5,57C 124.109,56.7132 121.776,56.2132 119.5,55.5C 117.719,57.5463 115.719,57.8796 113.5,56.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b1b1a1\",\n    d: \"M 203.5,69.5 C 202.833,69.5 202.167,69.5 201.5,69.5C 200.837,66.5185 200.17,63.5185 199.5,60.5C 202.519,55.9462 202.019,51.9462 198,48.5C 194.192,49.7756 192.692,52.4423 193.5,56.5C 197.5,56.8333 197.5,57.1667 193.5,57.5C 190.565,56.6994 187.899,55.3661 185.5,53.5C 185.33,52.1779 185.663,51.0113 186.5,50C 188.491,49.6264 190.158,48.793 191.5,47.5C 193.789,46.2862 195.123,44.2862 195.5,41.5C 194.673,38.2169 194.34,34.8835 194.5,31.5C 195.5,31.5 196.5,31.5 197.5,31.5C 196.833,27.5 198.5,25.8333 202.5,26.5C 201.284,40.8815 201.618,55.2149 203.5,69.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f6c68\",\n    d: \"M 175.5,15.5 C 177.5,15.5 179.5,15.5 181.5,15.5C 182.842,20.7121 183.842,26.0454 184.5,31.5C 185.5,32.8333 186.5,34.1667 187.5,35.5C 185.889,38.2198 185.056,41.2198 185,44.5C 181.63,45.8702 179.797,48.3702 179.5,52C 179.358,54.9122 180.691,56.4122 183.5,56.5C 184.833,56.8333 186.167,57.1667 187.5,57.5C 188.17,60.5904 187.003,62.257 184,62.5C 180.694,60.8817 177.361,59.215 174,57.5C 173.127,57.7355 172.293,58.0688 171.5,58.5C 171.069,65.7223 170.735,73.0556 170.5,80.5C 166.288,80.5959 162.622,81.9292 159.5,84.5C 158.883,84.6107 158.383,84.944 158,85.5C 157.667,89.1667 157.333,92.8333 157,96.5C 155.989,97.3366 154.822,97.67 153.5,97.5C 153.5,97.1667 153.5,96.8333 153.5,96.5C 154.496,96.5858 155.329,96.2524 156,95.5C 156.499,91.8484 156.665,88.1817 156.5,84.5C 159.265,82.3994 162.265,80.7327 165.5,79.5C 167.124,79.6399 168.29,78.9733 169,77.5C 169.333,70.8333 169.667,64.1667 170,57.5C 171.399,56.7734 172.899,56.2734 174.5,56C 175.252,55.3292 175.586,54.4959 175.5,53.5C 181.578,46.2754 183.245,38.1087 180.5,29C 181.125,27.1595 181.292,25.3261 181,23.5C 179.381,20.5643 177.548,17.8976 175.5,15.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b5e60\",\n    d: \"M 306.5,47.5 C 307.254,52.2545 305.921,56.5878 302.5,60.5C 303.857,66.8522 303.69,73.1856 302,79.5C 300.52,74.1961 299.353,74.1961 298.5,79.5C 297.398,82.0044 297.731,84.5044 299.5,87C 297.3,86.4156 295.133,86.5823 293,87.5C 292.536,86.9056 292.369,86.2389 292.5,85.5C 293.507,78.6126 294.84,71.7793 296.5,65C 296.354,63.2729 295.687,63.1062 294.5,64.5C 292.136,62.6372 289.636,60.9705 287,59.5C 285.924,62.3595 285.091,65.3595 284.5,68.5C 283.205,69.0983 281.872,69.5983 280.5,70C 280.167,71 279.833,72 279.5,73C 276.657,72.8846 274.157,71.718 272,69.5C 271.997,72.6521 271.83,75.9854 271.5,79.5C 270.687,80.6527 269.687,80.6527 268.5,79.5C 267.604,76.8564 266.771,74.1897 266,71.5C 265.632,70.09 264.799,69.09 263.5,68.5C 263.414,71.446 262.581,74.446 261,77.5C 260.798,75.7444 260.298,74.0777 259.5,72.5C 257.15,71.2242 255.484,69.3909 254.5,67C 254.833,66.5 255.167,66 255.5,65.5C 256.72,66.7111 257.887,66.7111 259,65.5C 257.906,63.4062 257.572,61.0729 258,58.5C 260.535,57.2393 262.202,55.2393 263,52.5C 267.33,56.6601 270.997,55.9935 274,50.5C 274.862,52.087 275.529,53.7536 276,55.5C 276.171,60.8642 276.671,66.1975 277.5,71.5C 280.126,67.0255 280.126,62.5255 277.5,58C 278.317,56.51 279.15,55.01 280,53.5C 280.388,54.428 281.055,55.0946 282,55.5C 285.528,56.4235 289.028,57.4235 292.5,58.5C 294.005,61.1306 294.671,60.7973 294.5,57.5C 295.5,57.5 296.5,57.5 297.5,57.5C 298.167,80.1667 298.833,80.1667 299.5,57.5C 300.833,57.5 302.167,57.5 303.5,57.5C 304.115,53.9925 305.115,50.6591 306.5,47.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151d26\",\n    d: \"M -0.5,100.5 C -0.5,98.8333 -0.5,97.1667 -0.5,95.5C 3.1219,96.076 6.1219,95.076 8.5,92.5C 12.5222,95.2117 14.5222,93.8784 14.5,88.5C 14.3793,87.1055 14.046,85.7722 13.5,84.5C 10.8929,83.6816 8.22626,83.1816 5.5,83C 3.91071,80.9052 1.91071,79.4052 -0.5,78.5C -0.5,72.1667 -0.5,65.8333 -0.5,59.5C 2.26676,58.9493 4.6001,57.6159 6.5,55.5C 10.3646,56.8061 14.1979,56.8061 18,55.5C 18.3599,57.6079 19.0266,59.6079 20,61.5C 26.396,66.1521 25.896,68.3187 18.5,68C 17.6433,68.6891 16.9767,69.5224 16.5,70.5C 17.624,71.914 18.624,73.414 19.5,75C 21.1667,75.3333 22.8333,75.6667 24.5,76C 25.7015,79.2101 27.7015,81.8767 30.5,84C 27.9915,87.3481 24.6581,89.5148 20.5,90.5C 19.2309,92.6948 19.2309,94.8615 20.5,97C 17.5475,97.8925 14.8808,97.3925 12.5,95.5C 8.74187,97.1699 4.74187,98.0032 0.5,98C 7.11701,98.3568 13.7837,98.8568 20.5,99.5C 13.5316,100.497 6.53157,100.83 -0.5,100.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e282e\",\n    d: \"M 49.5,53.5 C 49.3284,54.4916 49.6618,55.1583 50.5,55.5C 50.5,55.8333 50.5,56.1667 50.5,56.5C 49.8333,56.5 49.1667,56.5 48.5,56.5C 48.0377,55.1201 47.0377,54.4534 45.5,54.5C 42.5514,55.3022 39.5514,55.6355 36.5,55.5C 36.5,58.1667 36.5,60.8333 36.5,63.5C 37.675,63.281 38.675,63.6143 39.5,64.5C 37.3671,64.5808 35.3671,65.0808 33.5,66C 36.7718,68.3462 39.4384,67.8462 41.5,64.5C 49.1242,61.3281 53.6242,63.6614 55,71.5C 55.0002,67.0733 56.1668,66.5733 58.5,70C 55.8333,70.6667 55.8333,71.3333 58.5,72C 55.8184,74.3172 55.985,76.4839 59,78.5C 59.0566,75.1888 59.8899,72.1888 61.5,69.5C 63.6569,70.0533 63.4903,71.0533 61,72.5C 60.7652,76.32 59.9318,79.9867 58.5,83.5C 57.1476,82.4825 56.1476,81.1492 55.5,79.5C 49.8711,76.1085 47.2044,77.7752 47.5,84.5C 42.8333,84.5 38.1667,84.5 33.5,84.5C 33.5979,86.5529 32.9313,88.2196 31.5,89.5C 30.7691,85.3966 31.7691,81.8966 34.5,79C 33.9747,78.3076 33.3081,77.8076 32.5,77.5C 28.837,80.31 26.5037,79.31 25.5,74.5C 24.0878,73.1936 22.4211,72.3603 20.5,72C 22.5,71.6667 24.5,71.3333 26.5,71C 26.2238,67.0228 25.5571,62.8562 24.5,58.5C 23.914,58.7093 23.414,59.0426 23,59.5C 21.13,57.5947 19.63,55.4281 18.5,53C 15.8333,52.6667 13.1667,52.3333 10.5,52C 9.59971,48.7209 7.76638,47.8876 5,49.5C 3.30085,49.6134 2.13419,48.9468 1.5,47.5C 3.73448,47.6199 5.90115,47.2865 8,46.5C 9.62173,46.9541 10.7884,47.9541 11.5,49.5C 13.0453,50.4519 14.712,50.7852 16.5,50.5C 16.5,49.5 16.5,48.5 16.5,47.5C 21.1092,44.6157 26.1092,42.2823 31.5,40.5C 29.8702,37.7239 29.2035,34.7239 29.5,31.5C 33.4361,31.5218 37.1027,30.5218 40.5,28.5C 41.086,28.7093 41.586,29.0426 42,29.5C 41.2658,35.4083 40.5992,41.4083 40,47.5C 38.1268,44.9875 36.2935,45.1542 34.5,48C 35.7608,51.6522 37.5941,52.1522 40,49.5C 40.2896,51.0441 40.9563,52.3774 42,53.5C 43.4532,50.7024 44.4532,47.7024 45,44.5C 45.9149,47.8806 47.4149,50.8806 49.5,53.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b232b\",\n    d: \"M -0.5,47.5 C 0.166667,47.5 0.833333,47.5 1.5,47.5C 2.13419,48.9468 3.30085,49.6134 5,49.5C 7.76638,47.8876 9.59971,48.7209 10.5,52C 13.1667,52.3333 15.8333,52.6667 18.5,53C 19.63,55.4281 21.13,57.5947 23,59.5C 23.414,59.0426 23.914,58.7093 24.5,58.5C 25.5571,62.8562 26.2238,67.0228 26.5,71C 24.5,71.3333 22.5,71.6667 20.5,72C 22.4211,72.3603 24.0878,73.1936 25.5,74.5C 26.5037,79.31 28.837,80.31 32.5,77.5C 33.3081,77.8076 33.9747,78.3076 34.5,79C 31.7691,81.8966 30.7691,85.3966 31.5,89.5C 24.9341,88.0623 21.6007,90.729 21.5,97.5C 22.8333,98.8333 22.8333,100.167 21.5,101.5C 14.1667,101.5 6.83333,101.5 -0.5,101.5C -0.5,101.167 -0.5,100.833 -0.5,100.5C 6.53157,100.83 13.5316,100.497 20.5,99.5C 13.7837,98.8568 7.11701,98.3568 0.5,98C 4.74187,98.0032 8.74187,97.1699 12.5,95.5C 14.8808,97.3925 17.5475,97.8925 20.5,97C 19.2309,94.8615 19.2309,92.6948 20.5,90.5C 24.6581,89.5148 27.9915,87.3481 30.5,84C 27.7015,81.8767 25.7015,79.2101 24.5,76C 22.8333,75.6667 21.1667,75.3333 19.5,75C 18.624,73.414 17.624,71.914 16.5,70.5C 16.9767,69.5224 17.6433,68.6891 18.5,68C 25.896,68.3187 26.396,66.1521 20,61.5C 19.0266,59.6079 18.3599,57.6079 18,55.5C 14.1979,56.8061 10.3646,56.8061 6.5,55.5C 4.6001,57.6159 2.26676,58.9493 -0.5,59.5C -0.5,55.5 -0.5,51.5 -0.5,47.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#18222a\",\n    d: \"M 48.5,56.5 C 53.6807,56.8549 57.8474,59.1882 61,63.5C 61.4955,65.4727 61.6621,67.4727 61.5,69.5C 59.8899,72.1888 59.0566,75.1888 59,78.5C 55.985,76.4839 55.8184,74.3172 58.5,72C 55.8333,71.3333 55.8333,70.6667 58.5,70C 56.1668,66.5733 55.0002,67.0733 55,71.5C 53.6242,63.6614 49.1242,61.3281 41.5,64.5C 39.4384,67.8462 36.7718,68.3462 33.5,66C 35.3671,65.0808 37.3671,64.5808 39.5,64.5C 38.675,63.6143 37.675,63.281 36.5,63.5C 36.5,60.8333 36.5,58.1667 36.5,55.5C 39.5514,55.6355 42.5514,55.3022 45.5,54.5C 47.0377,54.4534 48.0377,55.1201 48.5,56.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bab5a4\",\n    d: \"M 201.5,69.5 C 201.833,72.8333 202.167,76.1667 202.5,79.5C 198.833,79.5 195.167,79.5 191.5,79.5C 191.5,78.1667 191.5,76.8333 191.5,75.5C 188.988,75.4228 186.988,76.4228 185.5,78.5C 186.729,79.2811 188.062,79.7811 189.5,80C 187.225,81.858 184.725,83.358 182,84.5C 181.275,86.1575 181.775,87.1575 183.5,87.5C 183.5,87.8333 183.5,88.1667 183.5,88.5C 182.833,88.5 182.5,88.8333 182.5,89.5C 179.55,91.7275 177.884,94.7275 177.5,98.5C 177.5,99.1667 177.167,99.5 176.5,99.5C 170.133,100.945 166.3,98.6112 165,92.5C 164.329,91.7476 163.496,91.4142 162.5,91.5C 162.167,91.5 161.833,91.5 161.5,91.5C 161.196,85.3159 164.196,82.8159 170.5,84C 173.878,82.2119 174.878,79.7119 173.5,76.5C 173.986,74.6958 174.653,73.0291 175.5,71.5C 179.129,70.2043 182.629,70.5376 186,72.5C 188.772,69.8983 191.939,67.8983 195.5,66.5C 197.083,62.9309 196.416,59.9309 193.5,57.5C 197.5,57.1667 197.5,56.8333 193.5,56.5C 192.692,52.4423 194.192,49.7756 198,48.5C 202.019,51.9462 202.519,55.9462 199.5,60.5C 200.17,63.5185 200.837,66.5185 201.5,69.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#263038\",\n    d: \"M 72.5,52.5 C 72.8333,52.5 73.1667,52.5 73.5,52.5C 72.7682,55.0675 72.7682,57.7342 73.5,60.5C 74.5,60.5 75.5,60.5 76.5,60.5C 76.7539,57.9857 77.5873,55.6524 79,53.5C 79.6453,57.5914 80.6453,61.5914 82,65.5C 82.9124,60.1815 84.9124,59.5148 88,63.5C 89,62.1667 90,62.1667 91,63.5C 92.4139,73.9189 87.9139,78.5856 77.5,77.5C 72.1659,79.7548 67.6659,78.7548 64,74.5C 63.6667,78.5 63.3333,82.5 63,86.5C 62.3645,87.9663 61.5312,89.2997 60.5,90.5C 61.9501,91.8498 62.6168,93.5165 62.5,95.5C 65.1569,95.838 67.4902,95.1713 69.5,93.5C 70.9787,95.6782 72.312,98.0115 73.5,100.5C 56.1795,101.5 38.8461,101.833 21.5,101.5C 22.8333,100.167 22.8333,98.8333 21.5,97.5C 22.2389,97.631 22.9056,97.4643 23.5,97C 23.0338,95.7012 23.0338,94.2012 23.5,92.5C 25.4672,92.2606 27.3005,92.5939 29,93.5C 29.1992,95.4025 30.0325,96.9025 31.5,98C 30.3279,98.4186 29.3279,99.0853 28.5,100C 36.1883,100.831 43.855,100.665 51.5,99.5C 53.0347,95.9256 55.2013,95.5923 58,98.5C 58.6924,97.9747 59.1924,97.3081 59.5,96.5C 55.8585,96.2053 53.0252,94.5387 51,91.5C 50.6082,87.4724 50.1082,83.4724 49.5,79.5C 50.8333,79.5 52.1667,79.5 53.5,79.5C 54.0023,83.8741 56.3356,86.5407 60.5,87.5C 61.1306,83.1962 61.6306,78.8629 62,74.5C 64.1744,72.2883 66.0077,72.7883 67.5,76C 69.1667,76.6667 70.8333,76.6667 72.5,76C 73.5,74.3333 74.5,72.6667 75.5,71C 73.5029,68.5084 72.5029,65.675 72.5,62.5C 70.1073,61.79 67.6073,61.1233 65,60.5C 64.1685,56.8569 65.6685,55.1902 69.5,55.5C 69.3505,54.448 69.5172,53.448 70,52.5C 70.7697,53.5981 71.603,53.5981 72.5,52.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4f6362\",\n    d: \"M 247.5,77.5 C 244.392,75.7782 241.725,76.2782 239.5,79C 233.128,79.9386 226.961,79.4386 221,77.5C 218.992,77.3068 217.492,77.9735 216.5,79.5C 214.219,79.9227 212.552,79.256 211.5,77.5C 211.181,72.6367 211.514,67.97 212.5,63.5C 213.172,64.2674 214.005,64.9341 215,65.5C 216.774,61.0273 219.94,59.1939 224.5,60C 226.001,63.3322 225.335,66.1656 222.5,68.5C 222.977,69.4776 223.643,70.3109 224.5,71C 226.952,71.2895 229.285,71.9562 231.5,73C 233.552,77.3403 236.219,77.6736 239.5,74C 243.246,72.7777 245.913,73.9443 247.5,77.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#627672\",\n    d: \"M 239.5,33.5 C 239.5,35.5 239.5,37.5 239.5,39.5C 243.449,39.6932 243.449,40.1932 239.5,41C 241.167,41.3333 242.833,41.6667 244.5,42C 241.181,48.0274 239.181,54.5274 238.5,61.5C 237.518,62.1408 236.518,62.8075 235.5,63.5C 231.91,62.1458 230.244,63.4791 230.5,67.5C 229.5,67.5 228.5,67.5 227.5,67.5C 228.538,59.0454 225.038,56.3787 217,59.5C 215.301,60.7044 213.801,62.0378 212.5,63.5C 211.514,67.97 211.181,72.6367 211.5,77.5C 208.671,72.0053 208.338,66.3386 210.5,60.5C 209.703,56.2015 209.37,51.8682 209.5,47.5C 212.005,47.9802 214.338,48.9802 216.5,50.5C 218.519,53.6923 221.519,55.1923 225.5,55C 226.337,56.0113 226.67,57.1779 226.5,58.5C 227.5,58.5 228.5,58.5 229.5,58.5C 229.48,56.857 230.147,55.5237 231.5,54.5C 230.833,53.8333 230.167,53.1667 229.5,52.5C 230.542,49.3709 229.875,46.5376 227.5,44C 231.095,39.8958 235.095,36.3958 239.5,33.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#323b44\",\n    d: \"M 362.5,63.5 C 364.766,63.1412 366.599,63.8078 368,65.5C 370.497,63.5218 373.331,63.0218 376.5,64C 375.748,64.6708 375.414,65.5041 375.5,66.5C 375.5,68.1667 375.5,69.8333 375.5,71.5C 372.566,70.7106 370.732,68.7106 370,65.5C 367.722,70.864 366.889,76.5307 367.5,82.5C 366.167,82.5 364.833,82.5 363.5,82.5C 363.11,87.4224 364.277,87.7557 367,83.5C 367.179,86.5535 367.679,89.5535 368.5,92.5C 375.276,90.3379 380.276,92.6712 383.5,99.5C 380.833,99.5 378.167,99.5 375.5,99.5C 368.5,99.5 361.5,99.5 354.5,99.5C 354.769,97.5714 354.269,95.9047 353,94.5C 352.667,94.8333 352.333,95.1667 352,95.5C 348.264,93.724 344.264,92.3907 340,91.5C 337.455,93.1858 334.622,94.1858 331.5,94.5C 328.827,94.3155 328.16,93.1489 329.5,91C 327.709,90.5848 326.376,89.5848 325.5,88C 326.449,87.3828 327.282,87.5494 328,88.5C 328.944,87.737 329.444,86.737 329.5,85.5C 328.615,80.8781 328.282,76.2115 328.5,71.5C 331.041,70.8968 333.374,70.8968 335.5,71.5C 335.62,72.5862 336.287,73.2528 337.5,73.5C 339.692,67.2316 343.025,67.0649 347.5,73C 348.793,73.49 350.127,73.6567 351.5,73.5C 352.643,70.3161 353.309,66.9827 353.5,63.5C 355.492,63.3285 357.158,63.9951 358.5,65.5C 359.86,64.8201 361.193,64.1534 362.5,63.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#29333c\",\n    d: \"M 389.5,63.5 C 389.833,63.5 390.167,63.5 390.5,63.5C 391.833,63.5 393.167,63.5 394.5,63.5C 395.672,67.8272 397.339,71.8272 399.5,75.5C 399.5,83.8333 399.5,92.1667 399.5,100.5C 394.203,99.7255 388.87,99.3921 383.5,99.5C 380.276,92.6712 375.276,90.3379 368.5,92.5C 367.679,89.5535 367.179,86.5535 367,83.5C 364.277,87.7557 363.11,87.4224 363.5,82.5C 364.833,82.5 366.167,82.5 367.5,82.5C 366.889,76.5307 367.722,70.864 370,65.5C 370.732,68.7106 372.566,70.7106 375.5,71.5C 375.5,69.8333 375.5,68.1667 375.5,66.5C 376.607,65.0077 378.107,64.0077 380,63.5C 383.016,63.9392 386.182,63.9392 389.5,63.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#344349\",\n    d: \"M 127.5,63.5 C 129.156,64.1465 130.823,64.8131 132.5,65.5C 134.538,64.3655 136.538,64.3655 138.5,65.5C 140.844,63.9797 143.011,62.313 145,60.5C 146.169,61.0085 147.002,61.8419 147.5,63C 152.282,63.1186 156.949,63.7852 161.5,65C 162.38,66.3561 162.714,67.8561 162.5,69.5C 163.822,69.33 164.989,69.6634 166,70.5C 166.667,72.5 166.667,74.5 166,76.5C 163.343,78.5494 160.51,80.3828 157.5,82C 156.748,82.6708 156.414,83.5041 156.5,84.5C 155.358,86.9717 153.358,87.9717 150.5,87.5C 149.899,81.804 148.899,81.4707 147.5,86.5C 146.675,87.3857 145.675,87.719 144.5,87.5C 146.054,86.1054 145.721,85.4387 143.5,85.5C 140.978,86.762 138.311,87.4287 135.5,87.5C 135.649,86.448 135.483,85.448 135,84.5C 134.282,85.4506 133.449,85.6172 132.5,85C 133.38,83.6439 133.714,82.1439 133.5,80.5C 132.178,80.33 131.011,80.6634 130,81.5C 129.667,83.1667 129.333,84.8333 129,86.5C 128.517,85.552 128.351,84.552 128.5,83.5C 127.448,83.3505 126.448,83.5172 125.5,84C 123.667,86.1667 121.833,88.3333 120,90.5C 118.951,89.4829 117.784,89.3162 116.5,90C 115.167,92 115.167,94 116.5,96C 115.584,96.2784 114.918,96.7784 114.5,97.5C 113.325,97.719 112.325,97.3857 111.5,96.5C 113.074,94.3967 114.074,92.0633 114.5,89.5C 115.558,86.7582 117.391,86.0915 120,87.5C 120.256,84.443 120.756,81.443 121.5,78.5C 121,77.5 120.5,76.5 120,75.5C 119.259,76.6405 118.425,76.6405 117.5,75.5C 117.764,68.6903 114.931,63.6903 109,60.5C 108.781,55.4848 108.781,50.4848 109,45.5C 106.513,42.0006 103.513,41.6673 100,44.5C 98.2246,43.2302 97.058,41.5635 96.5,39.5C 96.8333,39.5 97.1667,39.5 97.5,39.5C 98.1451,40.8118 99.1451,41.8118 100.5,42.5C 102.473,41.3601 104.307,40.0267 106,38.5C 108.384,40.3114 110.051,42.6447 111,45.5C 111.171,50.8642 111.671,56.1975 112.5,61.5C 113.478,61.9767 114.311,62.6433 115,63.5C 118.811,64.1261 122.977,64.1261 127.5,63.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5a6e6d\",\n    d: \"M 238.5,61.5 C 240.035,65.7005 243.035,68.0338 247.5,68.5C 247.34,66.8008 247.506,65.1341 248,63.5C 250.076,59.7872 251.576,60.2872 252.5,65C 251.783,68.3952 253.117,70.8952 256.5,72.5C 254.621,73.3414 252.621,73.6747 250.5,73.5C 250.698,75.5753 250.865,77.5753 251,79.5C 249.421,80.172 248.254,79.5053 247.5,77.5C 245.913,73.9443 243.246,72.7777 239.5,74C 236.219,77.6736 233.552,77.3403 231.5,73C 229.285,71.9562 226.952,71.2895 224.5,71C 223.643,70.3109 222.977,69.4776 222.5,68.5C 225.335,66.1656 226.001,63.3322 224.5,60C 219.94,59.1939 216.774,61.0273 215,65.5C 214.005,64.9341 213.172,64.2674 212.5,63.5C 213.801,62.0378 215.301,60.7044 217,59.5C 225.038,56.3787 228.538,59.0454 227.5,67.5C 228.5,67.5 229.5,67.5 230.5,67.5C 230.244,63.4791 231.91,62.1458 235.5,63.5C 236.518,62.8075 237.518,62.1408 238.5,61.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a5a492\",\n    d: \"M 185.5,53.5 C 187.899,55.3661 190.565,56.6994 193.5,57.5C 196.416,59.9309 197.083,62.9309 195.5,66.5C 191.939,67.8983 188.772,69.8983 186,72.5C 182.629,70.5376 179.129,70.2043 175.5,71.5C 175.5,70.5 175.5,69.5 175.5,68.5C 176.429,67.6851 177.429,66.8518 178.5,66C 183.02,66.2375 187.02,65.0708 190.5,62.5C 191.719,59.6878 190.719,58.0211 187.5,57.5C 186.4,56.3951 185.733,55.0618 185.5,53.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#44565b\",\n    d: \"M 292.5,85.5 C 291.739,86.3909 290.739,87.0576 289.5,87.5C 286.684,86.0435 283.684,85.0435 280.5,84.5C 277.8,82.3952 274.8,80.7286 271.5,79.5C 271.83,75.9854 271.997,72.6521 272,69.5C 274.157,71.718 276.657,72.8846 279.5,73C 279.833,72 280.167,71 280.5,70C 281.872,69.5983 283.205,69.0983 284.5,68.5C 285.091,65.3595 285.924,62.3595 287,59.5C 289.636,60.9705 292.136,62.6372 294.5,64.5C 295.687,63.1062 296.354,63.2729 296.5,65C 294.84,71.7793 293.507,78.6126 292.5,85.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#36434b\",\n    d: \"M 328.5,71.5 C 328.282,76.2115 328.615,80.8781 329.5,85.5C 329.444,86.737 328.944,87.737 328,88.5C 327.282,87.5494 326.449,87.3828 325.5,88C 326.376,89.5848 327.709,90.5848 329.5,91C 328.16,93.1489 328.827,94.3155 331.5,94.5C 327.689,95.6453 323.689,95.8119 319.5,95C 316.668,92.462 313.334,90.7953 309.5,90C 307.676,86.6854 305.676,83.5187 303.5,80.5C 303.5,79.8333 303.833,79.5 304.5,79.5C 305.833,79.5 307.167,79.5 308.5,79.5C 308.335,76.4816 308.502,73.4816 309,70.5C 309.667,71.1667 310.333,71.8333 311,72.5C 311.3,66.8141 311.3,61.1474 311,55.5C 311.465,54.0692 312.299,52.9025 313.5,52C 315.891,51.7132 318.224,51.2132 320.5,50.5C 321.478,50.9767 322.311,51.6433 323,52.5C 323.227,57.2111 322.727,61.8778 321.5,66.5C 321.786,69.267 322.453,71.9337 323.5,74.5C 324.421,72.244 326.088,71.244 328.5,71.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5d696a\",\n    d: \"M 256.5,72.5 C 257.79,73.0577 258.623,74.0577 259,75.5C 259.497,77.8098 259.663,80.1432 259.5,82.5C 261.734,82.6199 263.901,82.2865 266,81.5C 269.116,82.9091 272.282,83.9091 275.5,84.5C 269.289,84.3903 263.289,84.3903 257.5,84.5C 255.908,83.3984 255.075,84.065 255,86.5C 253.186,85.2404 251.353,85.2404 249.5,86.5C 245.831,88.5271 242.497,90.8604 239.5,93.5C 241.7,91.7376 242.867,89.4042 243,86.5C 244.444,84.8446 246.278,84.178 248.5,84.5C 248.35,80.0197 246.017,78.0197 241.5,78.5C 241.714,80.1439 241.38,81.6439 240.5,83C 237.706,84.4644 235.206,86.2978 233,88.5C 232.228,88.3552 231.561,88.0219 231,87.5C 230.057,90.2507 229.224,92.9174 228.5,95.5C 228.5,91.8333 228.5,88.1667 228.5,84.5C 227.5,84.5 226.5,84.5 225.5,84.5C 225.737,83.209 225.404,82.209 224.5,81.5C 222.365,79.631 219.698,78.9644 216.5,79.5C 217.492,77.9735 218.992,77.3068 221,77.5C 226.961,79.4386 233.128,79.9386 239.5,79C 241.725,76.2782 244.392,75.7782 247.5,77.5C 248.254,79.5053 249.421,80.172 251,79.5C 250.865,77.5753 250.698,75.5753 250.5,73.5C 252.621,73.6747 254.621,73.3414 256.5,72.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e252f\",\n    d: \"M -0.5,78.5 C 1.91071,79.4052 3.91071,80.9052 5.5,83C 8.22626,83.1816 10.8929,83.6816 13.5,84.5C 14.046,85.7722 14.3793,87.1055 14.5,88.5C 14.5222,93.8784 12.5222,95.2117 8.5,92.5C 6.1219,95.076 3.1219,96.076 -0.5,95.5C -0.5,89.8333 -0.5,84.1667 -0.5,78.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#222c34\",\n    d: \"M 378.5,65.5 C 381.127,66.0916 383.794,66.4249 386.5,66.5C 386.685,70.244 387.352,73.9106 388.5,77.5C 386.784,79.9151 386.284,82.5818 387,85.5C 387.333,85.1667 387.667,84.8333 388,84.5C 389.144,86.9171 390.81,87.5838 393,86.5C 395.347,90.4549 394.347,93.1216 390,94.5C 384.082,94.2233 380.249,91.39 378.5,86C 377.451,85.5078 376.451,85.6744 375.5,86.5C 374.808,85.9747 374.308,85.3081 374,84.5C 374.903,78.0261 376.403,71.6928 378.5,65.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#82857e\",\n    d: \"M 187.5,57.5 C 190.719,58.0211 191.719,59.6878 190.5,62.5C 187.02,65.0708 183.02,66.2375 178.5,66C 177.429,66.8518 176.429,67.6851 175.5,68.5C 174.503,68.4701 173.836,68.9701 173.5,70C 172.95,73.9145 172.117,77.7479 171,81.5C 168.595,82.2744 166.095,82.7744 163.5,83C 160.52,85.4142 159.853,88.2475 161.5,91.5C 162.254,94.0777 162.254,96.7444 161.5,99.5C 159.473,99.3379 157.473,99.5045 155.5,100C 154.727,102.597 153.727,105.097 152.5,107.5C 150.421,107.971 148.421,108.637 146.5,109.5C 146.5,108.833 146.5,108.167 146.5,107.5C 147.708,106.766 149.041,106.433 150.5,106.5C 150.357,104.738 150.691,103.071 151.5,101.5C 153.834,99.5592 156.334,97.8925 159,96.5C 158.387,92.4764 158.553,88.4764 159.5,84.5C 162.622,81.9292 166.288,80.5959 170.5,80.5C 170.735,73.0556 171.069,65.7223 171.5,58.5C 172.293,58.0688 173.127,57.7355 174,57.5C 177.361,59.215 180.694,60.8817 184,62.5C 187.003,62.257 188.17,60.5904 187.5,57.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b9b6ab\",\n    d: \"M 201.5,69.5 C 202.167,69.5 202.833,69.5 203.5,69.5C 204.638,74.524 204.638,79.524 203.5,84.5C 205.007,85.3886 206.34,86.3886 207.5,87.5C 207.5,87.8333 207.5,88.1667 207.5,88.5C 206.292,89.2341 204.959,89.5674 203.5,89.5C 199.705,88.3833 195.705,87.7167 191.5,87.5C 188.939,86.2329 186.272,86.2329 183.5,87.5C 181.775,87.1575 181.275,86.1575 182,84.5C 184.725,83.358 187.225,81.858 189.5,80C 188.062,79.7811 186.729,79.2811 185.5,78.5C 186.988,76.4228 188.988,75.4228 191.5,75.5C 191.5,76.8333 191.5,78.1667 191.5,79.5C 195.167,79.5 198.833,79.5 202.5,79.5C 202.167,76.1667 201.833,72.8333 201.5,69.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9c9d96\",\n    d: \"M 175.5,68.5 C 175.5,69.5 175.5,70.5 175.5,71.5C 174.653,73.0291 173.986,74.6958 173.5,76.5C 174.878,79.7119 173.878,82.2119 170.5,84C 164.196,82.8159 161.196,85.3159 161.5,91.5C 159.853,88.2475 160.52,85.4142 163.5,83C 166.095,82.7744 168.595,82.2744 171,81.5C 172.117,77.7479 172.95,73.9145 173.5,70C 173.836,68.9701 174.503,68.4701 175.5,68.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a2a499\",\n    d: \"M 223.5,97.5 C 224.074,93.7334 222.907,90.7334 220,88.5C 216.485,89.495 214.319,91.8283 213.5,95.5C 211.286,93.0762 210.286,93.7429 210.5,97.5C 209.199,94.1986 206.865,91.8653 203.5,90.5C 203.5,90.1667 203.5,89.8333 203.5,89.5C 204.959,89.5674 206.292,89.2341 207.5,88.5C 209.145,89.4787 210.479,90.812 211.5,92.5C 213.009,90.3436 214.009,88.0103 214.5,85.5C 214.5,84.8333 214.833,84.5 215.5,84.5C 218.13,83.5269 220.63,83.1935 223,83.5C 223.301,86.9801 224.135,90.3134 225.5,93.5C 225.332,95.1705 224.665,96.5039 223.5,97.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#737974\",\n    d: \"M 257.5,84.5 C 257.47,85.4972 257.97,86.1639 259,86.5C 264.619,84.9958 270.119,85.3292 275.5,87.5C 276.298,87.9569 276.631,88.6236 276.5,89.5C 274.244,88.0768 271.744,87.4101 269,87.5C 264.425,88.7419 259.758,89.7419 255,90.5C 254.196,89.1955 253.029,88.5288 251.5,88.5C 248.573,89.1109 246.24,90.4442 244.5,92.5C 241.908,94.0361 240.908,96.3695 241.5,99.5C 239.72,98.0101 239.054,96.0101 239.5,93.5C 242.497,90.8604 245.831,88.5271 249.5,86.5C 251.353,85.2404 253.186,85.2404 255,86.5C 255.075,84.065 255.908,83.3984 257.5,84.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#747878\",\n    d: \"M 191.5,87.5 C 188.763,87.4013 186.096,87.7347 183.5,88.5C 183.5,88.1667 183.5,87.8333 183.5,87.5C 186.272,86.2329 188.939,86.2329 191.5,87.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#202933\",\n    d: \"M 48.5,56.5 C 49.1667,56.5 49.8333,56.5 50.5,56.5C 53.8499,56.335 57.1832,56.5017 60.5,57C 62.4044,59.6222 64.4044,62.1222 66.5,64.5C 67.4776,64.0233 68.3109,63.3567 69,62.5C 70.1455,63.6843 71.3121,63.6843 72.5,62.5C 72.5029,65.675 73.5029,68.5084 75.5,71C 74.5,72.6667 73.5,74.3333 72.5,76C 70.8333,76.6667 69.1667,76.6667 67.5,76C 66.0077,72.7883 64.1744,72.2883 62,74.5C 61.6306,78.8629 61.1306,83.1962 60.5,87.5C 56.3356,86.5407 54.0023,83.8741 53.5,79.5C 52.1667,79.5 50.8333,79.5 49.5,79.5C 50.1082,83.4724 50.6082,87.4724 51,91.5C 53.0252,94.5387 55.8585,96.2053 59.5,96.5C 59.1924,97.3081 58.6924,97.9747 58,98.5C 55.2013,95.5923 53.0347,95.9256 51.5,99.5C 43.855,100.665 36.1883,100.831 28.5,100C 29.3279,99.0853 30.3279,98.4186 31.5,98C 30.0325,96.9025 29.1992,95.4025 29,93.5C 27.3005,92.5939 25.4672,92.2606 23.5,92.5C 23.0338,94.2012 23.0338,95.7012 23.5,97C 22.9056,97.4643 22.2389,97.631 21.5,97.5C 21.6007,90.729 24.9341,88.0623 31.5,89.5C 32.9313,88.2196 33.5979,86.5529 33.5,84.5C 38.1667,84.5 42.8333,84.5 47.5,84.5C 47.2044,77.7752 49.8711,76.1085 55.5,79.5C 56.1476,81.1492 57.1476,82.4825 58.5,83.5C 59.9318,79.9867 60.7652,76.32 61,72.5C 63.4903,71.0533 63.6569,70.0533 61.5,69.5C 61.6621,67.4727 61.4955,65.4727 61,63.5C 57.8474,59.1882 53.6807,56.8549 48.5,56.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d5456\",\n    d: \"M 191.5,87.5 C 195.705,87.7167 199.705,88.3833 203.5,89.5C 203.5,89.8333 203.5,90.1667 203.5,90.5C 202.602,91.1577 201.602,91.8243 200.5,92.5C 201.243,93.1818 201.909,93.8485 202.5,94.5C 199.126,91.62 195.126,89.62 190.5,88.5C 187.873,89.0916 185.206,89.4249 182.5,89.5C 182.5,88.8333 182.833,88.5 183.5,88.5C 186.096,87.7347 188.763,87.4013 191.5,87.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#212933\",\n    d: \"M 190.5,88.5 C 190.218,89.7777 189.551,90.7777 188.5,91.5C 186.833,92.8333 185.167,94.1667 183.5,95.5C 182.209,95.7373 181.209,95.404 180.5,94.5C 181.441,92.9505 182.107,91.2838 182.5,89.5C 185.206,89.4249 187.873,89.0916 190.5,88.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4f585d\",\n    d: \"M 239.5,93.5 C 238.281,95.9276 236.781,98.2609 235,100.5C 233.984,99.3659 233.317,99.6992 233,101.5C 232.085,100.672 231.419,99.6721 231,98.5C 230.329,99.2524 229.496,99.5858 228.5,99.5C 228.5,99.1667 228.5,98.8333 228.5,98.5C 228.5,97.5 228.5,96.5 228.5,95.5C 229.224,92.9174 230.057,90.2507 231,87.5C 231.561,88.0219 232.228,88.3552 233,88.5C 235.206,86.2978 237.706,84.4644 240.5,83C 241.38,81.6439 241.714,80.1439 241.5,78.5C 246.017,78.0197 248.35,80.0197 248.5,84.5C 246.278,84.178 244.444,84.8446 243,86.5C 242.867,89.4042 241.7,91.7376 239.5,93.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f4951\",\n    d: \"M 144.5,87.5 C 143.178,87.33 142.011,87.6634 141,88.5C 140.667,92.1667 140.333,95.8333 140,99.5C 138.644,100.38 137.144,100.714 135.5,100.5C 135.99,98.0516 135.157,96.385 133,95.5C 130.608,97.809 127.775,99.4757 124.5,100.5C 122.626,100.61 121.126,99.9436 120,98.5C 117.257,100.788 114.423,102.955 111.5,105C 107.682,105.372 104.015,106.206 100.5,107.5C 100.5,106.167 100.5,104.833 100.5,103.5C 104.036,102.242 107.703,101.409 111.5,101C 112.71,99.9609 113.71,98.7942 114.5,97.5C 114.918,96.7784 115.584,96.2784 116.5,96C 115.167,94 115.167,92 116.5,90C 117.784,89.3162 118.951,89.4829 120,90.5C 121.833,88.3333 123.667,86.1667 125.5,84C 126.448,83.5172 127.448,83.3505 128.5,83.5C 128.351,84.552 128.517,85.552 129,86.5C 129.333,84.8333 129.667,83.1667 130,81.5C 131.011,80.6634 132.178,80.33 133.5,80.5C 133.714,82.1439 133.38,83.6439 132.5,85C 133.449,85.6172 134.282,85.4506 135,84.5C 135.483,85.448 135.649,86.448 135.5,87.5C 138.311,87.4287 140.978,86.762 143.5,85.5C 145.721,85.4387 146.054,86.1054 144.5,87.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#777774\",\n    d: \"M 224.5,81.5 C 225.404,82.209 225.737,83.209 225.5,84.5C 226.5,84.5 227.5,84.5 228.5,84.5C 228.5,88.1667 228.5,91.8333 228.5,95.5C 228.5,96.5 228.5,97.5 228.5,98.5C 227.833,98.5 227.167,98.5 226.5,98.5C 226.79,92.6784 226.123,87.0117 224.5,81.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#464d52\",\n    d: \"M 303.5,80.5 C 305.676,83.5187 307.676,86.6854 309.5,90C 313.334,90.7953 316.668,92.462 319.5,95C 323.689,95.8119 327.689,95.6453 331.5,94.5C 334.622,94.1858 337.455,93.1858 340,91.5C 344.264,92.3907 348.264,93.724 352,95.5C 352.333,95.1667 352.667,94.8333 353,94.5C 354.269,95.9047 354.769,97.5714 354.5,99.5C 361.5,99.5 368.5,99.5 375.5,99.5C 375.5,99.8333 375.5,100.167 375.5,100.5C 363.833,100.5 352.167,100.5 340.5,100.5C 339.833,100.5 339.167,100.5 338.5,100.5C 338.662,98.4727 338.495,96.4727 338,94.5C 336.731,95.9047 336.231,97.5714 336.5,99.5C 324.931,98.6141 313.598,96.7808 302.5,94C 301.577,91.9592 301.244,89.7925 301.5,87.5C 301.326,85.139 300.993,82.8056 300.5,80.5C 301.5,80.5 302.5,80.5 303.5,80.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#656960\",\n    d: \"M 182.5,89.5 C 182.107,91.2838 181.441,92.9505 180.5,94.5C 179.857,96.0764 178.857,97.4097 177.5,98.5C 177.884,94.7275 179.55,91.7275 182.5,89.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f6365\",\n    d: \"M 203.5,90.5 C 206.865,91.8653 209.199,94.1986 210.5,97.5C 211.234,98.7079 211.567,100.041 211.5,101.5C 212.369,103.717 212.702,106.05 212.5,108.5C 209.924,108.532 207.591,107.865 205.5,106.5C 204.4,105.442 203.066,104.608 201.5,104C 203.651,103.735 205.318,102.735 206.5,101C 205.273,98.7021 203.94,96.5354 202.5,94.5C 201.909,93.8485 201.243,93.1818 200.5,92.5C 201.602,91.8243 202.602,91.1577 203.5,90.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#546171\",\n    d: \"M 188.5,91.5 C 189.675,91.281 190.675,91.6143 191.5,92.5C 190.123,94.2895 189.123,96.2895 188.5,98.5C 187.675,99.3857 186.675,99.719 185.5,99.5C 185.5,99.1667 185.5,98.8333 185.5,98.5C 184.737,97.7321 183.737,97.2321 182.5,97C 183.056,96.6174 183.389,96.1174 183.5,95.5C 185.167,94.1667 186.833,92.8333 188.5,91.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#333c44\",\n    d: \"M 77.5,77.5 C 77.9528,78.4584 78.6195,79.2917 79.5,80C 82.5,80.6667 85.5,80.6667 88.5,80C 91.7868,79.9985 93.9535,78.4985 95,75.5C 96.2043,77.8231 97.0376,80.3231 97.5,83C 95.9404,85.937 94.9404,89.1036 94.5,92.5C 94.7282,94.3969 95.7282,95.7303 97.5,96.5C 96.4104,97.6086 96.4104,98.6086 97.5,99.5C 98.4287,98.3112 98.762,96.9778 98.5,95.5C 100.584,96.2483 102.584,96.2483 104.5,95.5C 105.091,92.3595 105.924,89.3595 107,86.5C 108.988,89.4309 111.488,90.4309 114.5,89.5C 114.074,92.0633 113.074,94.3967 111.5,96.5C 112.325,97.3857 113.325,97.719 114.5,97.5C 113.71,98.7942 112.71,99.9609 111.5,101C 107.703,101.409 104.036,102.242 100.5,103.5C 99.2905,103.068 98.2905,102.401 97.5,101.5C 96.0813,100.549 94.4147,100.216 92.5,100.5C 93.7279,95.4577 93.0612,90.6243 90.5,86C 88.8659,85.5065 87.1992,85.3398 85.5,85.5C 85.1667,85.5 84.8333,85.5 84.5,85.5C 83.0813,84.5489 81.4147,84.2155 79.5,84.5C 79.5,83.5 79.5,82.5 79.5,81.5C 75.4757,82.4691 71.4757,82.6357 67.5,82C 66.7178,84.7405 66.2178,87.5738 66,90.5C 62.9429,92.1376 62.9429,93.4709 66,94.5C 69.5861,90.3576 72.4194,90.8576 74.5,96C 77.4601,95.6799 80.4601,95.6799 83.5,96C 84.8613,97.5843 85.528,99.4176 85.5,101.5C 85.5,101.833 85.5,102.167 85.5,102.5C 75.5,102.5 65.5,102.5 55.5,102.5C 36.8333,102.5 18.1667,102.5 -0.5,102.5C -0.5,102.167 -0.5,101.833 -0.5,101.5C 6.83333,101.5 14.1667,101.5 21.5,101.5C 38.8461,101.833 56.1795,101.5 73.5,100.5C 72.312,98.0115 70.9787,95.6782 69.5,93.5C 67.4902,95.1713 65.1569,95.838 62.5,95.5C 62.6168,93.5165 61.9501,91.8498 60.5,90.5C 61.5312,89.2997 62.3645,87.9663 63,86.5C 63.3333,82.5 63.6667,78.5 64,74.5C 67.6659,78.7548 72.1659,79.7548 77.5,77.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3b434b\",\n    d: \"M 84.5,85.5 C 81.5,85.5 78.5,85.5 75.5,85.5C 75.3418,88.5455 76.0085,91.3788 77.5,94C 81.2222,94.2382 84.8889,94.7382 88.5,95.5C 90.2518,91.1419 89.2518,87.8085 85.5,85.5C 87.1992,85.3398 88.8659,85.5065 90.5,86C 93.0612,90.6243 93.7279,95.4577 92.5,100.5C 94.4147,100.216 96.0813,100.549 97.5,101.5C 93.5,101.5 89.5,101.5 85.5,101.5C 85.528,99.4176 84.8613,97.5843 83.5,96C 80.4601,95.6799 77.4601,95.6799 74.5,96C 72.4194,90.8576 69.5861,90.3576 66,94.5C 62.9429,93.4709 62.9429,92.1376 66,90.5C 66.2178,87.5738 66.7178,84.7405 67.5,82C 71.4757,82.6357 75.4757,82.4691 79.5,81.5C 79.5,82.5 79.5,83.5 79.5,84.5C 81.4147,84.2155 83.0813,84.5489 84.5,85.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4a535c\",\n    d: \"M 84.5,85.5 C 84.8333,85.5 85.1667,85.5 85.5,85.5C 89.2518,87.8085 90.2518,91.1419 88.5,95.5C 84.8889,94.7382 81.2222,94.2382 77.5,94C 76.0085,91.3788 75.3418,88.5455 75.5,85.5C 78.5,85.5 81.5,85.5 84.5,85.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#444a48\",\n    d: \"M 180.5,94.5 C 181.209,95.404 182.209,95.7373 183.5,95.5C 183.389,96.1174 183.056,96.6174 182.5,97C 183.737,97.2321 184.737,97.7321 185.5,98.5C 182.253,98.4152 179.419,99.4152 177,101.5C 175.985,105.44 175.485,109.44 175.5,113.5C 174.662,113.158 174.328,112.492 174.5,111.5C 174.529,107.36 175.196,103.36 176.5,99.5C 177.167,99.5 177.5,99.1667 177.5,98.5C 178.857,97.4097 179.857,96.0764 180.5,94.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#555c60\",\n    d: \"M 298.5,79.5 C 298.98,82.4432 299.98,85.1098 301.5,87.5C 301.244,89.7925 301.577,91.9592 302.5,94C 313.598,96.7808 324.931,98.6141 336.5,99.5C 336.231,97.5714 336.731,95.9047 338,94.5C 338.495,96.4727 338.662,98.4727 338.5,100.5C 325.421,100.814 312.421,100.48 299.5,99.5C 298.609,98.7387 297.942,97.7387 297.5,96.5C 293.541,95.6735 289.541,95.1735 285.5,95C 283.249,94.2525 281.916,92.7525 281.5,90.5C 281.675,88.3792 281.341,86.3792 280.5,84.5C 283.684,85.0435 286.684,86.0435 289.5,87.5C 290.739,87.0576 291.739,86.3909 292.5,85.5C 292.369,86.2389 292.536,86.9056 293,87.5C 295.133,86.5823 297.3,86.4156 299.5,87C 297.731,84.5044 297.398,82.0044 298.5,79.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b1aca2\",\n    d: \"M 223.5,97.5 C 221.115,98.9171 218.615,100.25 216,101.5C 215.055,101.095 214.388,100.428 214,99.5C 213.583,100.756 212.75,101.423 211.5,101.5C 211.567,100.041 211.234,98.7079 210.5,97.5C 210.286,93.7429 211.286,93.0762 213.5,95.5C 214.319,91.8283 216.485,89.495 220,88.5C 222.907,90.7334 224.074,93.7334 223.5,97.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a4a295\",\n    d: \"M 245.5,93.5 C 248.764,94.3242 252.098,94.6576 255.5,94.5C 255.488,97.142 256.821,98.4754 259.5,98.5C 259.586,99.4959 259.252,100.329 258.5,101C 253.771,101.996 249.271,101.496 245,99.5C 244.322,97.4024 244.489,95.4024 245.5,93.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6a6d69\",\n    d: \"M 275.5,84.5 C 277.507,86.5332 279.507,88.5332 281.5,90.5C 281.916,92.7525 283.249,94.2525 285.5,95C 289.541,95.1735 293.541,95.6735 297.5,96.5C 297.942,97.7387 298.609,98.7387 299.5,99.5C 299.785,102.829 299.118,105.829 297.5,108.5C 297.192,104.553 296.359,100.887 295,97.5C 292.456,100.08 289.956,100.08 287.5,97.5C 286.416,98.6651 285.583,99.9984 285,101.5C 283.853,100.542 282.853,100.875 282,102.5C 281.333,101.833 280.667,101.167 280,100.5C 279.667,97.5 279.333,94.5 279,91.5C 278.722,90.5842 278.222,89.9175 277.5,89.5C 277.167,89.5 276.833,89.5 276.5,89.5C 276.631,88.6236 276.298,87.9569 275.5,87.5C 270.119,85.3292 264.619,84.9958 259,86.5C 257.97,86.1639 257.47,85.4972 257.5,84.5C 263.289,84.3903 269.289,84.3903 275.5,84.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#727978\",\n    d: \"M 159.5,84.5 C 158.553,88.4764 158.387,92.4764 159,96.5C 156.334,97.8925 153.834,99.5592 151.5,101.5C 150.691,103.071 150.357,104.738 150.5,106.5C 149.041,106.433 147.708,106.766 146.5,107.5C 146.167,107.5 145.833,107.5 145.5,107.5C 145.694,105.088 147.027,104.088 149.5,104.5C 149.253,102.142 149.919,100.142 151.5,98.5C 151.842,97.6618 152.508,97.3284 153.5,97.5C 154.822,97.67 155.989,97.3366 157,96.5C 157.333,92.8333 157.667,89.1667 158,85.5C 158.383,84.944 158.883,84.6107 159.5,84.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#939087\",\n    d: \"M 244.5,92.5 C 244.833,92.5 245.167,92.5 245.5,92.5C 245.5,92.8333 245.5,93.1667 245.5,93.5C 244.489,95.4024 244.322,97.4024 245,99.5C 249.271,101.496 253.771,101.996 258.5,101C 259.252,100.329 259.586,99.4959 259.5,98.5C 262.931,100.804 264.264,104.137 263.5,108.5C 263.44,109.043 263.107,109.376 262.5,109.5C 261.158,107.995 259.492,107.328 257.5,107.5C 254.857,106.021 252.357,106.354 250,108.5C 249.699,111.507 249.865,114.507 250.5,117.5C 249.5,117.5 248.5,117.5 247.5,117.5C 246.763,114.588 245.763,111.755 244.5,109C 246.67,104.595 245.67,101.428 241.5,99.5C 240.908,96.3695 241.908,94.0361 244.5,92.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b545b\",\n    d: \"M 156.5,84.5 C 156.665,88.1817 156.499,91.8484 156,95.5C 155.329,96.2524 154.496,96.5858 153.5,96.5C 148.772,96.3755 145.439,98.5421 143.5,103C 142.167,103.667 140.833,104.333 139.5,105C 133.973,105.711 128.473,106.545 123,107.5C 121.739,107.241 120.739,106.574 120,105.5C 117.217,107.061 114.383,108.394 111.5,109.5C 107.561,110.328 103.561,109.994 99.5,108.5C 98.6906,106.929 98.3573,105.262 98.5,103.5C 94.2147,102.705 89.8814,102.372 85.5,102.5C 85.5,102.167 85.5,101.833 85.5,101.5C 89.5,101.5 93.5,101.5 97.5,101.5C 98.2905,102.401 99.2905,103.068 100.5,103.5C 100.5,104.833 100.5,106.167 100.5,107.5C 104.015,106.206 107.682,105.372 111.5,105C 114.423,102.955 117.257,100.788 120,98.5C 121.126,99.9436 122.626,100.61 124.5,100.5C 127.775,99.4757 130.608,97.809 133,95.5C 135.157,96.385 135.99,98.0516 135.5,100.5C 137.144,100.714 138.644,100.38 140,99.5C 140.333,95.8333 140.667,92.1667 141,88.5C 142.011,87.6634 143.178,87.33 144.5,87.5C 145.675,87.719 146.675,87.3857 147.5,86.5C 148.899,81.4707 149.899,81.804 150.5,87.5C 153.358,87.9717 155.358,86.9717 156.5,84.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#27333e\",\n    d: \"M 190.5,88.5 C 195.126,89.62 199.126,91.62 202.5,94.5C 203.94,96.5354 205.273,98.7021 206.5,101C 205.318,102.735 203.651,103.735 201.5,104C 203.066,104.608 204.4,105.442 205.5,106.5C 203.5,106.167 201.5,105.833 199.5,105.5C 198.665,104.057 197.332,103.057 195.5,102.5C 192.047,101.487 188.713,100.487 185.5,99.5C 186.675,99.719 187.675,99.3857 188.5,98.5C 189.123,96.2895 190.123,94.2895 191.5,92.5C 190.675,91.6143 189.675,91.281 188.5,91.5C 189.551,90.7777 190.218,89.7777 190.5,88.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#928b7d\",\n    d: \"M 274.5,99.5 C 273.883,99.3893 273.383,99.056 273,98.5C 272.5,99.6667 271.667,100.5 270.5,101C 271.617,104.073 271.784,107.24 271,110.5C 270.261,109.426 269.261,108.759 268,108.5C 266.545,109.58 265.045,109.58 263.5,108.5C 264.264,104.137 262.931,100.804 259.5,98.5C 256.821,98.4754 255.488,97.142 255.5,94.5C 252.098,94.6576 248.764,94.3242 245.5,93.5C 245.5,93.1667 245.5,92.8333 245.5,92.5C 247.156,91.8535 248.823,91.1869 250.5,90.5C 251.91,90.8678 252.91,91.7011 253.5,93C 257.961,95.1308 261.961,94.6308 265.5,91.5C 273.732,88.739 276.732,91.4057 274.5,99.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6d767c\",\n    d: \"M 332.5,101.5 C 335.167,101.5 337.833,101.5 340.5,101.5C 354.516,101.167 368.516,101.501 382.5,102.5C 366.772,102.855 351.105,104.189 335.5,106.5C 327.167,106.5 318.833,106.5 310.5,106.5C 315.681,105.833 321.015,105.167 326.5,104.5C 328.282,103.016 330.282,102.016 332.5,101.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a8a49f\",\n    d: \"M 162.5,91.5 C 163.496,91.4142 164.329,91.7476 165,92.5C 166.3,98.6112 170.133,100.945 176.5,99.5C 175.196,103.36 174.529,107.36 174.5,111.5C 174.167,111.5 173.833,111.5 173.5,111.5C 173.167,111.5 172.833,111.5 172.5,111.5C 171.032,109.084 170.365,106.417 170.5,103.5C 169.178,103.67 168.011,103.337 167,102.5C 164.635,99.2492 163.135,95.5825 162.5,91.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#747d7e\",\n    d: \"M 332.5,101.5 C 330.282,102.016 328.282,103.016 326.5,104.5C 321.015,105.167 315.681,105.833 310.5,106.5C 305.904,108.395 302.571,107.062 300.5,102.5C 311.146,101.501 321.813,101.168 332.5,101.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#95958c\",\n    d: \"M 161.5,91.5 C 161.833,91.5 162.167,91.5 162.5,91.5C 163.135,95.5825 164.635,99.2492 167,102.5C 168.011,103.337 169.178,103.67 170.5,103.5C 170.365,106.417 171.032,109.084 172.5,111.5C 171.549,112.919 171.216,114.585 171.5,116.5C 170.5,116.5 169.5,116.5 168.5,116.5C 168.663,114.143 168.497,111.81 168,109.5C 166.441,107.783 165.608,105.783 165.5,103.5C 163.5,103.5 161.5,103.5 159.5,103.5C 160.663,109.334 158.329,112 152.5,111.5C 152.5,110.167 152.5,108.833 152.5,107.5C 153.727,105.097 154.727,102.597 155.5,100C 157.473,99.5045 159.473,99.3379 161.5,99.5C 162.254,96.7444 162.254,94.0777 161.5,91.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#77766c\",\n    d: \"M 277.5,89.5 C 278.222,89.9175 278.722,90.5842 279,91.5C 279.333,94.5 279.667,97.5 280,100.5C 280.667,101.167 281.333,101.833 282,102.5C 282.853,100.875 283.853,100.542 285,101.5C 285.583,99.9984 286.416,98.6651 287.5,97.5C 289.956,100.08 292.456,100.08 295,97.5C 296.359,100.887 297.192,104.553 297.5,108.5C 297.5,109.5 297.5,110.5 297.5,111.5C 296.178,111.33 295.011,111.663 294,112.5C 292.643,115.527 292.476,118.527 293.5,121.5C 292.5,121.5 291.5,121.5 290.5,121.5C 290.5,121.167 290.5,120.833 290.5,120.5C 288.497,118.018 285.831,117.018 282.5,117.5C 281.928,115.777 281.928,114.277 282.5,113C 284.025,111.991 285.692,111.491 287.5,111.5C 287.657,110.127 287.49,108.793 287,107.5C 286.667,107.833 286.333,108.167 286,108.5C 284.899,106.606 283.566,105.939 282,106.5C 280.592,110.169 278.925,110.169 277,106.5C 277.03,100.852 277.197,95.1849 277.5,89.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6d747b\",\n    d: \"M -0.5,102.5 C 18.1667,102.5 36.8333,102.5 55.5,102.5C 57.9479,103.473 60.6146,103.806 63.5,103.5C 63.5,104.5 63.5,105.5 63.5,106.5C 58.1667,106.5 52.8333,106.5 47.5,106.5C 49.9686,105.683 52.6353,105.183 55.5,105C 55.1667,104.667 54.8333,104.333 54.5,104C 46.8406,103.5 39.1739,103.334 31.5,103.5C 23.1667,103.5 14.8333,103.5 6.5,103.5C 4.71199,103.215 3.04533,103.548 1.5,104.5C 2.24269,105.182 2.90935,105.849 3.5,106.5C 2.16667,106.5 0.833333,106.5 -0.5,106.5C -0.5,105.167 -0.5,103.833 -0.5,102.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#81868c\",\n    d: \"M 6.5,103.5 C 6.38929,104.117 6.05596,104.617 5.5,105C 15.5,105.667 25.5,105.667 35.5,105C 33.9419,104.79 32.6085,104.29 31.5,103.5C 39.1739,103.334 46.8406,103.5 54.5,104C 54.8333,104.333 55.1667,104.667 55.5,105C 52.6353,105.183 49.9686,105.683 47.5,106.5C 32.8333,106.5 18.1667,106.5 3.5,106.5C 2.90935,105.849 2.24269,105.182 1.5,104.5C 3.04533,103.548 4.71199,103.215 6.5,103.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#93989e\",\n    d: \"M 6.5,103.5 C 14.8333,103.5 23.1667,103.5 31.5,103.5C 32.6085,104.29 33.9419,104.79 35.5,105C 25.5,105.667 15.5,105.667 5.5,105C 6.05596,104.617 6.38929,104.117 6.5,103.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#555f5e\",\n    d: \"M 239.5,93.5 C 239.054,96.0101 239.72,98.0101 241.5,99.5C 241.5,100.167 241.5,100.833 241.5,101.5C 241.431,104.084 240.265,106.084 238,107.5C 237.433,110.168 236.933,112.834 236.5,115.5C 234.408,115.439 232.908,114.439 232,112.5C 231.667,113.167 231.333,113.833 231,114.5C 229.989,113.663 228.822,113.33 227.5,113.5C 227.833,108.833 228.167,104.167 228.5,99.5C 229.496,99.5858 230.329,99.2524 231,98.5C 231.419,99.6721 232.085,100.672 233,101.5C 233.317,99.6992 233.984,99.3659 235,100.5C 236.781,98.2609 238.281,95.9276 239.5,93.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#636b70\",\n    d: \"M 63.5,103.5 C 68.8333,103.5 74.1667,103.5 79.5,103.5C 79.5,104.5 79.5,105.5 79.5,106.5C 74.6367,106.181 69.97,106.514 65.5,107.5C 44.1667,107.5 22.8333,107.5 1.5,107.5C 0.833333,107.5 0.166667,107.5 -0.5,107.5C -0.5,107.167 -0.5,106.833 -0.5,106.5C 0.833333,106.5 2.16667,106.5 3.5,106.5C 18.1667,106.5 32.8333,106.5 47.5,106.5C 52.8333,106.5 58.1667,106.5 63.5,106.5C 63.5,105.5 63.5,104.5 63.5,103.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#868174\",\n    d: \"M 276.5,89.5 C 276.833,89.5 277.167,89.5 277.5,89.5C 277.197,95.1849 277.03,100.852 277,106.5C 278.925,110.169 280.592,110.169 282,106.5C 283.566,105.939 284.899,106.606 286,108.5C 286.333,108.167 286.667,107.833 287,107.5C 287.49,108.793 287.657,110.127 287.5,111.5C 285.692,111.491 284.025,111.991 282.5,113C 281.928,114.277 281.928,115.777 282.5,117.5C 278.932,117.241 277.599,115.241 278.5,111.5C 276.876,111.64 275.71,110.973 275,109.5C 274.502,106.183 274.335,102.85 274.5,99.5C 276.732,91.4057 273.732,88.739 265.5,91.5C 261.961,94.6308 257.961,95.1308 253.5,93C 252.91,91.7011 251.91,90.8678 250.5,90.5C 248.823,91.1869 247.156,91.8535 245.5,92.5C 245.167,92.5 244.833,92.5 244.5,92.5C 246.24,90.4442 248.573,89.1109 251.5,88.5C 253.029,88.5288 254.196,89.1955 255,90.5C 259.758,89.7419 264.425,88.7419 269,87.5C 271.744,87.4101 274.244,88.0768 276.5,89.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#586269\",\n    d: \"M 340.5,101.5 C 340.5,101.167 340.5,100.833 340.5,100.5C 352.167,100.5 363.833,100.5 375.5,100.5C 381.842,100.334 388.175,100.5 394.5,101C 395.337,102.011 395.67,103.178 395.5,104.5C 381.788,104.884 368.122,105.884 354.5,107.5C 356.922,108.711 358.922,109.711 360.5,110.5C 348.916,112.486 337.249,113.486 325.5,113.5C 325.62,112.414 326.287,111.747 327.5,111.5C 330.115,110.731 332.781,110.397 335.5,110.5C 335.5,109.167 335.5,107.833 335.5,106.5C 351.105,104.189 366.772,102.855 382.5,102.5C 368.516,101.501 354.516,101.167 340.5,101.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#566068\",\n    d: \"M 55.5,102.5 C 65.5,102.5 75.5,102.5 85.5,102.5C 89.8814,102.372 94.2147,102.705 98.5,103.5C 98.3573,105.262 98.6906,106.929 99.5,108.5C 103.561,109.994 107.561,110.328 111.5,109.5C 110.665,110.943 109.332,111.943 107.5,112.5C 108.833,113.833 108.833,115.167 107.5,116.5C 108.5,117.833 109.5,119.167 110.5,120.5C 109.37,121.622 108.703,122.956 108.5,124.5C 108.665,127.518 108.498,130.518 108,133.5C 106.333,134.833 104.667,134.833 103,133.5C 102.09,126.274 97.9229,123.274 90.5,124.5C 91.9187,123.549 93.5853,123.216 95.5,123.5C 95.7852,121.712 95.4519,120.045 94.5,118.5C 91.3596,117.911 88.3596,117.244 85.5,116.5C 89.5138,116.666 93.5138,116.499 97.5,116C 99.3249,114.534 99.8249,112.701 99,110.5C 93.9283,109.529 88.7616,109.195 83.5,109.5C 80.8333,109.5 78.1667,109.5 75.5,109.5C 72.4928,107.825 69.1595,107.159 65.5,107.5C 69.97,106.514 74.6367,106.181 79.5,106.5C 79.5,105.5 79.5,104.5 79.5,103.5C 74.1667,103.5 68.8333,103.5 63.5,103.5C 60.6146,103.806 57.9479,103.473 55.5,102.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e6462\",\n    d: \"M 153.5,96.5 C 153.5,96.8333 153.5,97.1667 153.5,97.5C 152.508,97.3284 151.842,97.6618 151.5,98.5C 150.5,98.5 149.5,98.5 148.5,98.5C 147.909,101.614 146.242,104.114 143.5,106C 135.212,107.353 127.212,109.52 119.5,112.5C 117.86,115.722 115.193,117.056 111.5,116.5C 111.48,118.143 112.147,119.476 113.5,120.5C 112.757,121.182 112.091,121.849 111.5,122.5C 110.5,122.833 109.833,123.5 109.5,124.5C 109.167,124.5 108.833,124.5 108.5,124.5C 108.703,122.956 109.37,121.622 110.5,120.5C 109.5,119.167 108.5,117.833 107.5,116.5C 108.833,115.167 108.833,113.833 107.5,112.5C 109.332,111.943 110.665,110.943 111.5,109.5C 114.383,108.394 117.217,107.061 120,105.5C 120.739,106.574 121.739,107.241 123,107.5C 128.473,106.545 133.973,105.711 139.5,105C 140.833,104.333 142.167,103.667 143.5,103C 145.439,98.5421 148.772,96.3755 153.5,96.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a1a299\",\n    d: \"M 257.5,107.5 C 256.298,111.048 255.631,114.715 255.5,118.5C 260.762,118.195 265.928,118.529 271,119.5C 272.009,118.342 273.342,117.675 275,117.5C 280.07,119.071 285.236,120.071 290.5,120.5C 290.5,120.833 290.5,121.167 290.5,121.5C 278.86,120.612 267.193,120.279 255.5,120.5C 248.191,121.248 240.858,121.582 233.5,121.5C 233.5,121.167 233.5,120.833 233.5,120.5C 238.511,120.666 243.511,120.499 248.5,120C 249.381,119.292 250.047,118.458 250.5,117.5C 249.865,114.507 249.699,111.507 250,108.5C 252.357,106.354 254.857,106.021 257.5,107.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#444b4f\",\n    d: \"M 1.5,107.5 C 22.8333,107.5 44.1667,107.5 65.5,107.5C 69.1595,107.159 72.4928,107.825 75.5,109.5C 51.8333,109.5 28.1667,109.5 4.5,109.5C 4.5,110.5 4.5,111.5 4.5,112.5C 2.95302,111.232 1.95302,109.565 1.5,107.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#656d68\",\n    d: \"M 226.5,98.5 C 227.167,98.5 227.833,98.5 228.5,98.5C 228.5,98.8333 228.5,99.1667 228.5,99.5C 228.167,104.167 227.833,108.833 227.5,113.5C 228.822,113.33 229.989,113.663 231,114.5C 231.333,113.833 231.667,113.167 232,112.5C 232.908,114.439 234.408,115.439 236.5,115.5C 236.933,112.834 237.433,110.168 238,107.5C 240.265,106.084 241.431,104.084 241.5,101.5C 241.724,105.303 241.89,109.303 242,113.5C 243.883,114.653 244.716,116.319 244.5,118.5C 236.112,118.773 227.779,118.44 219.5,117.5C 220.968,115.084 221.635,112.417 221.5,109.5C 220.5,109.5 219.5,109.5 218.5,109.5C 218.5,107.5 218.5,105.5 218.5,103.5C 222.505,103.837 225.172,102.17 226.5,98.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#939181\",\n    d: \"M 274.5,99.5 C 274.335,102.85 274.502,106.183 275,109.5C 275.71,110.973 276.876,111.64 278.5,111.5C 277.599,115.241 278.932,117.241 282.5,117.5C 285.831,117.018 288.497,118.018 290.5,120.5C 285.236,120.071 280.07,119.071 275,117.5C 273.342,117.675 272.009,118.342 271,119.5C 265.928,118.529 260.762,118.195 255.5,118.5C 255.631,114.715 256.298,111.048 257.5,107.5C 259.492,107.328 261.158,107.995 262.5,109.5C 263.107,109.376 263.44,109.043 263.5,108.5C 265.045,109.58 266.545,109.58 268,108.5C 269.261,108.759 270.261,109.426 271,110.5C 271.784,107.24 271.617,104.073 270.5,101C 271.667,100.5 272.5,99.6667 273,98.5C 273.383,99.056 273.883,99.3893 274.5,99.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#626b70\",\n    d: \"M 299.5,99.5 C 312.421,100.48 325.421,100.814 338.5,100.5C 339.167,100.5 339.833,100.5 340.5,100.5C 340.5,100.833 340.5,101.167 340.5,101.5C 337.833,101.5 335.167,101.5 332.5,101.5C 321.813,101.168 311.146,101.501 300.5,102.5C 302.571,107.062 305.904,108.395 310.5,106.5C 318.833,106.5 327.167,106.5 335.5,106.5C 335.5,107.833 335.5,109.167 335.5,110.5C 332.781,110.397 330.115,110.731 327.5,111.5C 326.287,111.747 325.62,112.414 325.5,113.5C 325.5,113.833 325.5,114.167 325.5,114.5C 321.301,115.384 317.134,115.717 313,115.5C 310.401,114.323 307.734,113.323 305,112.5C 302.429,113.324 299.929,113.324 297.5,112.5C 296.914,112.709 296.414,113.043 296,113.5C 295.503,116.146 295.336,118.813 295.5,121.5C 294.833,121.5 294.167,121.5 293.5,121.5C 292.476,118.527 292.643,115.527 294,112.5C 295.011,111.663 296.178,111.33 297.5,111.5C 297.5,110.5 297.5,109.5 297.5,108.5C 299.118,105.829 299.785,102.829 299.5,99.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#475259\",\n    d: \"M 395.5,104.5 C 395.389,105.117 395.056,105.617 394.5,106C 390.129,106.172 385.796,106.672 381.5,107.5C 384.659,108.71 387.826,108.71 391,107.5C 393.341,108.007 393.841,109.174 392.5,111C 386.167,112 379.833,113 373.5,114C 372.953,114.925 372.287,115.758 371.5,116.5C 367.273,115.546 363.273,114.213 359.5,112.5C 359.5,113.5 359.5,114.5 359.5,115.5C 351.226,112.99 342.892,112.99 334.5,115.5C 333.754,116.736 333.421,118.07 333.5,119.5C 330.956,119.896 328.789,119.229 327,117.5C 326.5,118 326,118.5 325.5,119C 335.578,122.007 345.911,123.174 356.5,122.5C 362.271,121.887 367.604,122.554 372.5,124.5C 363.845,123.917 355.178,123.584 346.5,123.5C 337.167,122.833 327.833,122.167 318.5,121.5C 317.194,120.533 316.527,119.199 316.5,117.5C 318.857,117.663 321.19,117.497 323.5,117C 324.381,116.292 325.047,115.458 325.5,114.5C 325.5,114.167 325.5,113.833 325.5,113.5C 337.249,113.486 348.916,112.486 360.5,110.5C 358.922,109.711 356.922,108.711 354.5,107.5C 368.122,105.884 381.788,104.884 395.5,104.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141921\",\n    d: \"M 185.5,98.5 C 185.5,98.8333 185.5,99.1667 185.5,99.5C 188.713,100.487 192.047,101.487 195.5,102.5C 197.332,103.057 198.665,104.057 199.5,105.5C 197.313,106.049 196.646,107.215 197.5,109C 196.207,109.49 194.873,109.657 193.5,109.5C 193.5,110.5 193.5,111.5 193.5,112.5C 197.702,112.183 201.702,112.517 205.5,113.5C 200.833,113.5 196.167,113.5 191.5,113.5C 190.833,113.5 190.167,113.5 189.5,113.5C 188.026,112.325 186.36,111.325 184.5,110.5C 185.833,109.833 187.167,109.167 188.5,108.5C 184.893,107.511 181.226,107.177 177.5,107.5C 177.517,109.565 177.85,111.565 178.5,113.5C 177.5,113.5 176.5,113.5 175.5,113.5C 175.485,109.44 175.985,105.44 177,101.5C 179.419,99.4152 182.253,98.4152 185.5,98.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#323a42\",\n    d: \"M 189.5,113.5 C 185.833,113.5 182.167,113.5 178.5,113.5C 177.85,111.565 177.517,109.565 177.5,107.5C 181.226,107.177 184.893,107.511 188.5,108.5C 187.167,109.167 185.833,109.833 184.5,110.5C 186.36,111.325 188.026,112.325 189.5,113.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0a1017\",\n    d: \"M 199.5,105.5 C 201.5,105.833 203.5,106.167 205.5,106.5C 207.591,107.865 209.924,108.532 212.5,108.5C 212.5,109.167 212.5,109.833 212.5,110.5C 212.5,111.833 212.5,113.167 212.5,114.5C 210.139,114.326 207.806,113.993 205.5,113.5C 201.702,112.517 197.702,112.183 193.5,112.5C 193.5,111.5 193.5,110.5 193.5,109.5C 194.873,109.657 196.207,109.49 197.5,109C 196.646,107.215 197.313,106.049 199.5,105.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e666b\",\n    d: \"M 75.5,109.5 C 78.1667,109.5 80.8333,109.5 83.5,109.5C 75.4316,111.687 75.7649,113.02 84.5,113.5C 84.5,114.5 84.5,115.5 84.5,116.5C 76.4323,116.218 68.4323,116.218 60.5,116.5C 56.3842,114.135 52.2175,114.135 48,116.5C 46.0289,116.532 44.5289,115.698 43.5,114C 31.1667,113.667 18.8333,113.333 6.5,113C 6.04265,112.586 5.70931,112.086 5.5,111.5C 28.9965,110.833 52.3298,110.167 75.5,109.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c6d68\",\n    d: \"M 151.5,98.5 C 149.919,100.142 149.253,102.142 149.5,104.5C 147.027,104.088 145.694,105.088 145.5,107.5C 144.448,107.351 143.448,107.517 142.5,108C 138.417,113.375 133.083,116.042 126.5,116C 125.975,115.308 125.308,114.808 124.5,114.5C 122.695,116.593 120.362,117.76 117.5,118C 116.748,118.671 116.414,119.504 116.5,120.5C 115.18,121.942 113.514,122.608 111.5,122.5C 112.091,121.849 112.757,121.182 113.5,120.5C 112.147,119.476 111.48,118.143 111.5,116.5C 115.193,117.056 117.86,115.722 119.5,112.5C 127.212,109.52 135.212,107.353 143.5,106C 146.242,104.114 147.909,101.614 148.5,98.5C 149.5,98.5 150.5,98.5 151.5,98.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7e7c73\",\n    d: \"M 145.5,107.5 C 145.833,107.5 146.167,107.5 146.5,107.5C 146.5,108.167 146.5,108.833 146.5,109.5C 146.179,111.048 145.179,111.715 143.5,111.5C 143.5,113.5 143.5,115.5 143.5,117.5C 138.333,117.09 133.333,117.757 128.5,119.5C 127.167,118.5 125.833,117.5 124.5,116.5C 123.614,117.325 123.281,118.325 123.5,119.5C 121.05,119.298 118.717,119.631 116.5,120.5C 116.414,119.504 116.748,118.671 117.5,118C 120.362,117.76 122.695,116.593 124.5,114.5C 125.308,114.808 125.975,115.308 126.5,116C 133.083,116.042 138.417,113.375 142.5,108C 143.448,107.517 144.448,107.351 145.5,107.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#767d73\",\n    d: \"M 241.5,99.5 C 245.67,101.428 246.67,104.595 244.5,109C 245.763,111.755 246.763,114.588 247.5,117.5C 246.791,118.404 245.791,118.737 244.5,118.5C 244.716,116.319 243.883,114.653 242,113.5C 241.89,109.303 241.724,105.303 241.5,101.5C 241.5,100.833 241.5,100.167 241.5,99.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#898a7e\",\n    d: \"M 168.5,116.5 C 165.493,118.938 161.993,119.938 158,119.5C 146.409,118.407 134.909,118.407 123.5,119.5C 123.281,118.325 123.614,117.325 124.5,116.5C 125.833,117.5 127.167,118.5 128.5,119.5C 133.333,117.757 138.333,117.09 143.5,117.5C 143.5,115.5 143.5,113.5 143.5,111.5C 145.179,111.715 146.179,111.048 146.5,109.5C 148.421,108.637 150.421,107.971 152.5,107.5C 152.5,108.833 152.5,110.167 152.5,111.5C 158.329,112 160.663,109.334 159.5,103.5C 161.5,103.5 163.5,103.5 165.5,103.5C 165.608,105.783 166.441,107.783 168,109.5C 168.497,111.81 168.663,114.143 168.5,116.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#858784\",\n    d: \"M 224.5,81.5 C 226.123,87.0117 226.79,92.6784 226.5,98.5C 225.172,102.17 222.505,103.837 218.5,103.5C 218.5,105.5 218.5,107.5 218.5,109.5C 219.5,109.5 220.5,109.5 221.5,109.5C 221.635,112.417 220.968,115.084 219.5,117.5C 217.589,117.426 216.422,116.426 216,114.5C 213.869,115.615 212.035,116.948 210.5,118.5C 208.202,117.69 205.868,116.856 203.5,116C 204.793,115.51 206.127,115.343 207.5,115.5C 209.5,115.5 211.5,115.5 213.5,115.5C 213.784,113.585 213.451,111.919 212.5,110.5C 212.5,109.833 212.5,109.167 212.5,108.5C 212.702,106.05 212.369,103.717 211.5,101.5C 212.75,101.423 213.583,100.756 214,99.5C 214.388,100.428 215.055,101.095 216,101.5C 218.615,100.25 221.115,98.9171 223.5,97.5C 224.665,96.5039 225.332,95.1705 225.5,93.5C 224.135,90.3134 223.301,86.9801 223,83.5C 220.63,83.1935 218.13,83.5269 215.5,84.5C 217.521,80.7152 220.521,79.7152 224.5,81.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#384148\",\n    d: \"M 212.5,110.5 C 213.451,111.919 213.784,113.585 213.5,115.5C 211.5,115.5 209.5,115.5 207.5,115.5C 204.038,114.518 200.371,114.185 196.5,114.5C 194.585,114.784 192.919,114.451 191.5,113.5C 196.167,113.5 200.833,113.5 205.5,113.5C 207.806,113.993 210.139,114.326 212.5,114.5C 212.5,113.167 212.5,111.833 212.5,110.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#69747a\",\n    d: \"M 83.5,109.5 C 88.7616,109.195 93.9283,109.529 99,110.5C 99.8249,112.701 99.3249,114.534 97.5,116C 93.5138,116.499 89.5138,116.666 85.5,116.5C 85.1667,116.5 84.8333,116.5 84.5,116.5C 84.5,115.5 84.5,114.5 84.5,113.5C 75.7649,113.02 75.4316,111.687 83.5,109.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#626d75\",\n    d: \"M 196.5,114.5 C 200.371,114.185 204.038,114.518 207.5,115.5C 206.127,115.343 204.793,115.51 203.5,116C 205.868,116.856 208.202,117.69 210.5,118.5C 212.415,118.216 214.081,118.549 215.5,119.5C 209.112,119.688 202.778,119.188 196.5,118C 195.316,116.855 195.316,115.688 196.5,114.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c5960\",\n    d: \"M 325.5,114.5 C 325.047,115.458 324.381,116.292 323.5,117C 321.19,117.497 318.857,117.663 316.5,117.5C 316.527,119.199 317.194,120.533 318.5,121.5C 311.285,121.052 304.285,121.718 297.5,123.5C 296.5,123.167 295.833,122.5 295.5,121.5C 295.336,118.813 295.503,116.146 296,113.5C 296.414,113.043 296.914,112.709 297.5,112.5C 299.929,113.324 302.429,113.324 305,112.5C 307.734,113.323 310.401,114.323 313,115.5C 317.134,115.717 321.301,115.384 325.5,114.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3a444d\",\n    d: \"M 375.5,100.5 C 375.5,100.167 375.5,99.8333 375.5,99.5C 378.167,99.5 380.833,99.5 383.5,99.5C 388.87,99.3921 394.203,99.7255 399.5,100.5C 399.5,106.167 399.5,111.833 399.5,117.5C 391.653,117.419 383.986,117.419 376.5,117.5C 375.833,116.833 375.167,116.167 374.5,115.5C 373.5,116.833 372.5,118.167 371.5,119.5C 370.713,118.758 370.047,117.925 369.5,117C 366.301,116.599 363.301,115.766 360.5,114.5C 360.5,115.5 360.5,116.5 360.5,117.5C 357.61,117.722 354.943,117.055 352.5,115.5C 349.233,116.712 345.899,117.712 342.5,118.5C 341.45,120.102 342.117,120.935 344.5,121C 348.688,121.176 352.688,121.676 356.5,122.5C 345.911,123.174 335.578,122.007 325.5,119C 326,118.5 326.5,118 327,117.5C 328.789,119.229 330.956,119.896 333.5,119.5C 333.421,118.07 333.754,116.736 334.5,115.5C 342.892,112.99 351.226,112.99 359.5,115.5C 359.5,114.5 359.5,113.5 359.5,112.5C 363.273,114.213 367.273,115.546 371.5,116.5C 372.287,115.758 372.953,114.925 373.5,114C 379.833,113 386.167,112 392.5,111C 393.841,109.174 393.341,108.007 391,107.5C 387.826,108.71 384.659,108.71 381.5,107.5C 385.796,106.672 390.129,106.172 394.5,106C 395.056,105.617 395.389,105.117 395.5,104.5C 395.67,103.178 395.337,102.011 394.5,101C 388.175,100.5 381.842,100.334 375.5,100.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#68747d\",\n    d: \"M 173.5,111.5 C 173.833,111.5 174.167,111.5 174.5,111.5C 174.328,112.492 174.662,113.158 175.5,113.5C 176.5,113.5 177.5,113.5 178.5,113.5C 182.167,113.5 185.833,113.5 189.5,113.5C 189.5,114.833 189.5,116.167 189.5,117.5C 183.064,118.828 176.73,120.162 170.5,121.5C 168.379,121.325 166.379,121.659 164.5,122.5C 164.577,121.25 165.244,120.417 166.5,120C 170.594,119.443 174.594,118.61 178.5,117.5C 178.5,116.5 178.5,115.5 178.5,114.5C 176.833,114.5 175.167,114.5 173.5,114.5C 173.5,113.5 173.5,112.5 173.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d545a\",\n    d: \"M 75.5,109.5 C 52.3298,110.167 28.9965,110.833 5.5,111.5C 5.70931,112.086 6.04265,112.586 6.5,113C 18.8333,113.333 31.1667,113.667 43.5,114C 44.5289,115.698 46.0289,116.532 48,116.5C 52.2175,114.135 56.3842,114.135 60.5,116.5C 68.4323,116.218 76.4323,116.218 84.5,116.5C 84.8333,116.5 85.1667,116.5 85.5,116.5C 88.3596,117.244 91.3596,117.911 94.5,118.5C 95.4519,120.045 95.7852,121.712 95.5,123.5C 93.5853,123.216 91.9187,123.549 90.5,124.5C 89.5,124.5 88.5,124.5 87.5,124.5C 83.8333,124.5 80.1667,124.5 76.5,124.5C 80.6472,123.675 84.9805,123.175 89.5,123C 90.3567,122.311 91.0233,121.478 91.5,120.5C 89.2338,119.686 86.9005,119.186 84.5,119C 79.6667,118.833 74.8333,118.667 70,118.5C 64.7503,118.53 59.7503,119.196 55,120.5C 53.9914,119.342 52.6581,118.675 51,118.5C 41.0934,117.109 31.2601,117.442 21.5,119.5C 17.8098,119.308 14.1431,118.975 10.5,118.5C 10.5,117.5 10.5,116.5 10.5,115.5C 8.7839,115.371 7.11723,115.038 5.5,114.5C 5.16667,113.833 4.83333,113.167 4.5,112.5C 4.5,111.5 4.5,110.5 4.5,109.5C 28.1667,109.5 51.8333,109.5 75.5,109.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#303d47\",\n    d: \"M 399.5,117.5 C 399.5,122.5 399.5,127.5 399.5,132.5C 398.522,132.189 397.855,131.522 397.5,130.5C 398.98,128.456 398.48,127.122 396,126.5C 393.278,128.215 391.111,127.715 389.5,125C 384.511,124.501 379.511,124.334 374.5,124.5C 373.833,124.5 373.167,124.5 372.5,124.5C 367.604,122.554 362.271,121.887 356.5,122.5C 352.688,121.676 348.688,121.176 344.5,121C 342.117,120.935 341.45,120.102 342.5,118.5C 345.899,117.712 349.233,116.712 352.5,115.5C 354.943,117.055 357.61,117.722 360.5,117.5C 360.5,116.5 360.5,115.5 360.5,114.5C 363.301,115.766 366.301,116.599 369.5,117C 370.047,117.925 370.713,118.758 371.5,119.5C 372.5,118.167 373.5,116.833 374.5,115.5C 375.167,116.167 375.833,116.833 376.5,117.5C 383.986,117.419 391.653,117.419 399.5,117.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111822\",\n    d: \"M -0.5,107.5 C 0.166667,107.5 0.833333,107.5 1.5,107.5C 1.95302,109.565 2.95302,111.232 4.5,112.5C 4.83333,113.167 5.16667,113.833 5.5,114.5C 7.19958,116.21 8.53292,118.21 9.5,120.5C 10.325,121.386 11.325,121.719 12.5,121.5C 13.062,124.293 14.3954,126.626 16.5,128.5C 11.412,128.263 8.41204,130.597 7.5,135.5C 6.83652,137.042 6.16985,138.709 5.5,140.5C 4.99432,132.385 3.82765,124.385 2,116.5C 1.32924,115.748 0.495904,115.414 -0.5,115.5C -0.5,112.833 -0.5,110.167 -0.5,107.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#343f48\",\n    d: \"M 5.5,114.5 C 7.11723,115.038 8.7839,115.371 10.5,115.5C 10.5,116.5 10.5,117.5 10.5,118.5C 14.1431,118.975 17.8098,119.308 21.5,119.5C 31.2601,117.442 41.0934,117.109 51,118.5C 52.6581,118.675 53.9914,119.342 55,120.5C 59.7503,119.196 64.7503,118.53 70,118.5C 74.8333,118.667 79.6667,118.833 84.5,119C 86.9005,119.186 89.2338,119.686 91.5,120.5C 91.0233,121.478 90.3567,122.311 89.5,123C 84.9805,123.175 80.6472,123.675 76.5,124.5C 66.8278,125.134 57.1611,125.8 47.5,126.5C 47.5,126.167 47.5,125.833 47.5,125.5C 49.2646,124.539 51.2646,124.205 53.5,124.5C 53.5,123.5 53.5,122.5 53.5,121.5C 39.8852,121.221 26.2185,121.221 12.5,121.5C 11.325,121.719 10.325,121.386 9.5,120.5C 8.53292,118.21 7.19958,116.21 5.5,114.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#989d9a\",\n    d: \"M 172.5,111.5 C 172.833,111.5 173.167,111.5 173.5,111.5C 173.5,112.5 173.5,113.5 173.5,114.5C 175.167,114.5 176.833,114.5 178.5,114.5C 178.5,115.5 178.5,116.5 178.5,117.5C 174.594,118.61 170.594,119.443 166.5,120C 165.244,120.417 164.577,121.25 164.5,122.5C 162.833,122.5 161.167,122.5 159.5,122.5C 142.854,120.735 126.187,121.402 109.5,124.5C 109.833,123.5 110.5,122.833 111.5,122.5C 113.514,122.608 115.18,121.942 116.5,120.5C 118.717,119.631 121.05,119.298 123.5,119.5C 134.909,118.407 146.409,118.407 158,119.5C 161.993,119.938 165.493,118.938 168.5,116.5C 169.5,116.5 170.5,116.5 171.5,116.5C 171.216,114.585 171.549,112.919 172.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8a9491\",\n    d: \"M 219.5,117.5 C 227.779,118.44 236.112,118.773 244.5,118.5C 245.791,118.737 246.791,118.404 247.5,117.5C 248.5,117.5 249.5,117.5 250.5,117.5C 250.047,118.458 249.381,119.292 248.5,120C 243.511,120.499 238.511,120.666 233.5,120.5C 230.15,120.665 226.817,120.498 223.5,120C 221.68,119.8 220.347,118.966 219.5,117.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a9b3b5\",\n    d: \"M 219.5,117.5 C 220.347,118.966 221.68,119.8 223.5,120C 226.817,120.498 230.15,120.665 233.5,120.5C 233.5,120.833 233.5,121.167 233.5,121.5C 229.818,121.335 226.152,121.501 222.5,122C 224.392,122.973 226.392,123.64 228.5,124C 229.381,124.708 230.047,125.542 230.5,126.5C 228.784,126.371 227.117,126.038 225.5,125.5C 223.1,123.8 220.434,122.467 217.5,121.5C 216.833,120.833 216.167,120.167 215.5,119.5C 214.081,118.549 212.415,118.216 210.5,118.5C 212.035,116.948 213.869,115.615 216,114.5C 216.422,116.426 217.589,117.426 219.5,117.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#acb1ad\",\n    d: \"M 255.5,120.5 C 267.193,120.279 278.86,120.612 290.5,121.5C 291.5,121.5 292.5,121.5 293.5,121.5C 293.5,122.167 293.5,122.833 293.5,123.5C 280.708,122.222 268.041,121.222 255.5,120.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c343d\",\n    d: \"M 47.5,125.5 C 38.4483,125.193 29.4483,125.693 20.5,127C 18.9963,128.337 17.9963,130.004 17.5,132C 15.236,132.236 13.0693,132.736 11,133.5C 10.6124,136.849 10.7791,140.183 11.5,143.5C 9.58533,143.216 7.91866,143.549 6.5,144.5C 4.4727,144.662 2.4727,144.495 0.5,144C 1.92121,137.958 2.58788,131.791 2.5,125.5C 3.32669,130.651 3.82669,135.984 4,141.5C 5.90154,142.386 7.73487,142.053 9.5,140.5C 8.54355,138.925 7.87688,137.258 7.5,135.5C 8.41204,130.597 11.412,128.263 16.5,128.5C 14.3954,126.626 13.062,124.293 12.5,121.5C 26.2185,121.221 39.8852,121.221 53.5,121.5C 53.5,122.5 53.5,123.5 53.5,124.5C 51.2646,124.205 49.2646,124.539 47.5,125.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#303e48\",\n    d: \"M 206.5,130.5 C 204.916,131.382 203.249,132.215 201.5,133C 196.511,133.499 191.511,133.666 186.5,133.5C 185.636,128.307 184.303,128.307 182.5,133.5C 178.979,131.969 175.312,130.969 171.5,130.5C 171.38,129.414 170.713,128.747 169.5,128.5C 164.148,129.359 159.981,132.026 157,136.5C 156.333,137.5 156.333,138.5 157,139.5C 157.708,138.619 158.542,137.953 159.5,137.5C 159.573,139.027 158.906,140.027 157.5,140.5C 156.85,140.804 156.183,141.137 155.5,141.5C 154.262,138.832 154.262,136.166 155.5,133.5C 154.575,132.438 153.575,132.438 152.5,133.5C 152.833,132.167 153.167,130.833 153.5,129.5C 154.5,129.5 155.5,129.5 156.5,129.5C 156.351,130.552 156.517,131.552 157,132.5C 158.48,129.337 160.98,127.504 164.5,127C 166.763,125.383 168.763,123.55 170.5,121.5C 173.841,120.995 177.174,120.828 180.5,121C 181.453,122.955 182.787,124.622 184.5,126C 190.447,125.829 196.447,126.329 202.5,127.5C 203.901,128.521 205.235,129.521 206.5,130.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#434e55\",\n    d: \"M 217.5,121.5 C 220.434,122.467 223.1,123.8 225.5,125.5C 225.953,126.458 226.619,127.292 227.5,128C 229.586,128.315 231.586,128.815 233.5,129.5C 234.906,129.973 235.573,130.973 235.5,132.5C 235.833,133.833 236.167,135.167 236.5,136.5C 234.551,135.275 233.218,135.942 232.5,138.5C 230.501,137.492 228.834,136.159 227.5,134.5C 225.781,133.978 224.448,132.978 223.5,131.5C 224.774,130.811 224.774,129.977 223.5,129C 221.292,128.809 219.292,128.309 217.5,127.5C 214.287,127.109 210.953,126.775 207.5,126.5C 208.767,124.629 208.767,122.796 207.5,121C 209.579,120.192 211.579,120.359 213.5,121.5C 212.106,122.687 212.273,123.354 214,123.5C 215.077,122.571 216.244,121.904 217.5,121.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#63727c\",\n    d: \"M 318.5,121.5 C 327.833,122.167 337.167,122.833 346.5,123.5C 346.611,124.117 346.944,124.617 347.5,125C 359.943,125.728 360.277,127.061 348.5,129C 347.027,129.71 346.36,130.876 346.5,132.5C 344.143,132.663 341.81,132.497 339.5,132C 338.663,130.989 338.33,129.822 338.5,128.5C 341.518,128.665 344.518,128.498 347.5,128C 344.561,125.925 341.227,124.759 337.5,124.5C 327.969,124.33 318.469,123.664 309,122.5C 307.167,122.667 305.333,122.833 303.5,123C 302.748,123.671 302.414,124.504 302.5,125.5C 301.549,126.919 301.216,128.585 301.5,130.5C 300.167,130.5 298.833,130.5 297.5,130.5C 297.5,128.167 297.5,125.833 297.5,123.5C 304.285,121.718 311.285,121.052 318.5,121.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b5c3c3\",\n    d: \"M 157.5,124.5 C 157.167,125.167 156.833,125.833 156.5,126.5C 155.833,126.833 155.167,127.167 154.5,127.5C 154.423,126.25 153.756,125.417 152.5,125C 147.005,124.069 141.671,124.569 136.5,126.5C 138.015,127.591 138.848,128.924 139,130.5C 133.007,133.884 126.507,135.384 119.5,135C 116.113,138.018 112.113,139.518 107.5,139.5C 107.634,141.292 107.301,142.958 106.5,144.5C 104.243,144.962 102.243,145.962 100.5,147.5C 98.9291,146.691 97.2624,146.357 95.5,146.5C 95.822,144.278 95.1554,142.444 93.5,141C 94.4158,140.722 95.0825,140.222 95.5,139.5C 99.5705,138.823 103.571,137.823 107.5,136.5C 111.376,134.822 115.376,133.322 119.5,132C 122.146,131.503 124.813,131.336 127.5,131.5C 127.5,130.167 127.5,128.833 127.5,127.5C 129.857,127.663 132.19,127.497 134.5,127C 133.663,125.989 133.33,124.822 133.5,123.5C 138.314,123.01 143.147,122.676 148,122.5C 151.576,122.515 154.742,123.182 157.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e7177\",\n    d: \"M 159.5,122.5 C 161.167,122.5 162.833,122.5 164.5,122.5C 162.427,124.87 159.76,126.203 156.5,126.5C 156.833,125.833 157.167,125.167 157.5,124.5C 158.5,124.167 159.167,123.5 159.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f4f59\",\n    d: \"M 170.5,121.5 C 168.763,123.55 166.763,125.383 164.5,127C 160.98,127.504 158.48,129.337 157,132.5C 156.517,131.552 156.351,130.552 156.5,129.5C 155.5,129.5 154.5,129.5 153.5,129.5C 153.833,128.833 154.167,128.167 154.5,127.5C 155.167,127.167 155.833,126.833 156.5,126.5C 159.76,126.203 162.427,124.87 164.5,122.5C 166.379,121.659 168.379,121.325 170.5,121.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#515e66\",\n    d: \"M 76.5,124.5 C 80.1667,124.5 83.8333,124.5 87.5,124.5C 87.5,124.833 87.5,125.167 87.5,125.5C 82.1301,125.392 76.7968,125.725 71.5,126.5C 64.3846,126.075 57.3846,126.575 50.5,128C 50.213,132.042 50.213,136.209 50.5,140.5C 49.209,140.263 48.209,140.596 47.5,141.5C 42.187,142.098 36.8537,142.431 31.5,142.5C 31.5,142.167 31.5,141.833 31.5,141.5C 35.4724,140.892 39.4724,140.392 43.5,140C 44.713,137.313 45.3797,134.48 45.5,131.5C 40.1212,131.229 34.7879,130.562 29.5,129.5C 30.2427,128.818 30.9094,128.151 31.5,127.5C 36.8333,127.167 42.1667,126.833 47.5,126.5C 57.1611,125.8 66.8278,125.134 76.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#33434a\",\n    d: \"M 97.5,120.5 C 100.565,119.182 103.731,119.182 107,120.5C 107.17,124.493 107.004,128.493 106.5,132.5C 105.5,132.5 104.5,132.5 103.5,132.5C 103.662,130.473 103.495,128.473 103,126.5C 100.223,125.229 98.3894,123.229 97.5,120.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a5b2b6\",\n    d: \"M 159.5,122.5 C 159.167,123.5 158.5,124.167 157.5,124.5C 154.742,123.182 151.576,122.515 148,122.5C 143.147,122.676 138.314,123.01 133.5,123.5C 133.33,124.822 133.663,125.989 134.5,127C 132.19,127.497 129.857,127.663 127.5,127.5C 127.5,128.833 127.5,130.167 127.5,131.5C 124.813,131.336 122.146,131.503 119.5,132C 115.376,133.322 111.376,134.822 107.5,136.5C 109.343,132.813 110.01,128.813 109.5,124.5C 126.187,121.402 142.854,120.735 159.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b5862\",\n    d: \"M 189.5,113.5 C 190.167,113.5 190.833,113.5 191.5,113.5C 192.919,114.451 194.585,114.784 196.5,114.5C 195.316,115.688 195.316,116.855 196.5,118C 202.778,119.188 209.112,119.688 215.5,119.5C 216.167,120.167 216.833,120.833 217.5,121.5C 216.244,121.904 215.077,122.571 214,123.5C 212.273,123.354 212.106,122.687 213.5,121.5C 211.579,120.359 209.579,120.192 207.5,121C 208.767,122.796 208.767,124.629 207.5,126.5C 210.953,126.775 214.287,127.109 217.5,127.5C 214.161,127.89 210.827,128.39 207.5,129C 211.688,129.176 215.688,129.676 219.5,130.5C 215.5,130.5 211.5,130.5 207.5,130.5C 207.167,130.5 206.833,130.5 206.5,130.5C 205.235,129.521 203.901,128.521 202.5,127.5C 196.447,126.329 190.447,125.829 184.5,126C 182.787,124.622 181.453,122.955 180.5,121C 177.174,120.828 173.841,120.995 170.5,121.5C 176.73,120.162 183.064,118.828 189.5,117.5C 189.5,116.167 189.5,114.833 189.5,113.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#616a72\",\n    d: \"M 225.5,125.5 C 227.117,126.038 228.784,126.371 230.5,126.5C 231.167,126.833 231.833,127.167 232.5,127.5C 233.338,127.842 233.672,128.508 233.5,129.5C 231.586,128.815 229.586,128.315 227.5,128C 226.619,127.292 225.953,126.458 225.5,125.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a878e\",\n    d: \"M 293.5,121.5 C 294.167,121.5 294.833,121.5 295.5,121.5C 295.833,122.5 296.5,123.167 297.5,123.5C 297.5,125.833 297.5,128.167 297.5,130.5C 298.833,130.5 300.167,130.5 301.5,130.5C 301.216,128.585 301.549,126.919 302.5,125.5C 303.906,130.931 301.906,133.265 296.5,132.5C 296.664,129.813 296.497,127.146 296,124.5C 295.329,123.748 294.496,123.414 293.5,123.5C 293.5,122.833 293.5,122.167 293.5,121.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#828b95\",\n    d: \"M 217.5,127.5 C 219.292,128.309 221.292,128.809 223.5,129C 224.774,129.977 224.774,130.811 223.5,131.5C 222.041,131.567 220.708,131.234 219.5,130.5C 215.688,129.676 211.688,129.176 207.5,129C 210.827,128.39 214.161,127.89 217.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9fadb2\",\n    d: \"M 293.5,123.5 C 294.496,123.414 295.329,123.748 296,124.5C 296.497,127.146 296.664,129.813 296.5,132.5C 301.906,133.265 303.906,130.931 302.5,125.5C 307.774,122.697 312.774,123.031 317.5,126.5C 315.535,128.519 315.369,130.519 317,132.5C 319.672,133.282 322.172,134.282 324.5,135.5C 325.5,136.167 326.5,136.833 327.5,137.5C 317.129,136.772 306.796,135.605 296.5,134C 296,133.5 295.5,133 295,132.5C 294.741,129.413 294.241,126.413 293.5,123.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#85979d\",\n    d: \"M 87.5,124.5 C 88.5,124.5 89.5,124.5 90.5,124.5C 97.9229,123.274 102.09,126.274 103,133.5C 104.667,134.833 106.333,134.833 108,133.5C 108.498,130.518 108.665,127.518 108.5,124.5C 108.833,124.5 109.167,124.5 109.5,124.5C 110.01,128.813 109.343,132.813 107.5,136.5C 100.82,136.612 94.1531,136.946 87.5,137.5C 87.9368,134.193 87.2702,131.193 85.5,128.5C 86.2427,127.818 86.9094,127.151 87.5,126.5C 87.5,126.167 87.5,125.833 87.5,125.5C 87.5,125.167 87.5,124.833 87.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d7dde1\",\n    d: \"M 247.5,124.5 C 254.841,124.334 262.174,124.5 269.5,125C 271.833,126.667 273.833,128.667 275.5,131C 279.491,131.642 283.491,132.142 287.5,132.5C 289.31,136.795 291.31,140.961 293.5,145C 296.688,146.316 300.022,146.816 303.5,146.5C 303.5,147.5 303.5,148.5 303.5,149.5C 300.15,149.335 296.817,149.502 293.5,150C 292.833,152.667 292.167,155.333 291.5,158C 287.755,158.302 284.422,159.469 281.5,161.5C 279.833,161.5 278.167,161.5 276.5,161.5C 269.485,161.578 262.485,161.911 255.5,162.5C 254.28,160.337 254.28,158.17 255.5,156C 254.899,154.395 253.899,153.062 252.5,152C 258.729,150.43 265.062,149.596 271.5,149.5C 271.5,146.5 271.5,143.5 271.5,140.5C 263.652,140.415 263.652,139.749 271.5,138.5C 271.405,135.728 270.071,133.728 267.5,132.5C 266.914,132.709 266.414,133.043 266,133.5C 264.562,132.1 263.729,130.433 263.5,128.5C 258.141,128.33 252.808,127.83 247.5,127C 246.402,126.23 246.402,125.397 247.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f4d5a\",\n    d: \"M 374.5,124.5 C 379.511,124.334 384.511,124.501 389.5,125C 391.111,127.715 393.278,128.215 396,126.5C 398.48,127.122 398.98,128.456 397.5,130.5C 397.855,131.522 398.522,132.189 399.5,132.5C 399.5,133.167 399.5,133.833 399.5,134.5C 393.579,133.537 387.579,132.87 381.5,132.5C 381.993,130.194 382.326,127.861 382.5,125.5C 379.615,125.806 376.948,125.473 374.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#202a33\",\n    d: \"M -0.5,115.5 C 0.495904,115.414 1.32924,115.748 2,116.5C 3.82765,124.385 4.99432,132.385 5.5,140.5C 6.16985,138.709 6.83652,137.042 7.5,135.5C 7.87688,137.258 8.54355,138.925 9.5,140.5C 7.73487,142.053 5.90154,142.386 4,141.5C 3.82669,135.984 3.32669,130.651 2.5,125.5C 2.17876,123.952 1.17876,123.285 -0.5,123.5C -0.5,120.833 -0.5,118.167 -0.5,115.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3b454e\",\n    d: \"M 47.5,125.5 C 47.5,125.833 47.5,126.167 47.5,126.5C 42.1667,126.833 36.8333,127.167 31.5,127.5C 27.8581,128.08 24.1914,128.58 20.5,129C 19.6634,130.011 19.33,131.178 19.5,132.5C 25.8251,132.496 26.1585,133.829 20.5,136.5C 20.7093,137.086 21.0426,137.586 21.5,138C 24.8168,138.498 28.1501,138.665 31.5,138.5C 31.5,139.5 31.5,140.5 31.5,141.5C 31.5,141.833 31.5,142.167 31.5,142.5C 23.1737,143.249 14.8403,143.916 6.5,144.5C 7.91866,143.549 9.58533,143.216 11.5,143.5C 10.7791,140.183 10.6124,136.849 11,133.5C 13.0693,132.736 15.236,132.236 17.5,132C 17.9963,130.004 18.9963,128.337 20.5,127C 29.4483,125.693 38.4483,125.193 47.5,125.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5b6b73\",\n    d: \"M 71.5,126.5 C 69.0521,127.473 66.3854,127.806 63.5,127.5C 60.1667,127.5 56.8333,127.5 53.5,127.5C 53.238,128.978 53.5713,130.311 54.5,131.5C 56.1667,130.167 57.8333,130.167 59.5,131.5C 60.8023,133.446 61.469,135.279 61.5,137C 58.3092,138.483 55.3092,139.983 52.5,141.5C 50.8333,141.5 49.1667,141.5 47.5,141.5C 48.209,140.596 49.209,140.263 50.5,140.5C 50.213,136.209 50.213,132.042 50.5,128C 57.3846,126.575 64.3846,126.075 71.5,126.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#65777d\",\n    d: \"M 63.5,127.5 C 63.0472,128.458 62.3805,129.292 61.5,130C 65.5305,131.173 69.5305,132.34 73.5,133.5C 73.5,134.5 73.5,135.5 73.5,136.5C 71.8212,136.285 70.8212,136.952 70.5,138.5C 64.4061,139.091 58.4061,140.091 52.5,141.5C 55.3092,139.983 58.3092,138.483 61.5,137C 61.469,135.279 60.8023,133.446 59.5,131.5C 57.8333,130.167 56.1667,130.167 54.5,131.5C 53.5713,130.311 53.238,128.978 53.5,127.5C 56.8333,127.5 60.1667,127.5 63.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#708188\",\n    d: \"M 87.5,125.5 C 87.5,125.833 87.5,126.167 87.5,126.5C 82.7858,126.353 78.1191,126.686 73.5,127.5C 73.5,128.5 73.5,129.5 73.5,130.5C 76.9099,130.457 80.2432,130.957 83.5,132C 86.1242,132.576 86.7908,133.91 85.5,136C 80.6007,137.45 75.6007,138.284 70.5,138.5C 70.8212,136.952 71.8212,136.285 73.5,136.5C 73.5,135.5 73.5,134.5 73.5,133.5C 69.5305,132.34 65.5305,131.173 61.5,130C 62.3805,129.292 63.0472,128.458 63.5,127.5C 66.3854,127.806 69.0521,127.473 71.5,126.5C 76.7968,125.725 82.1301,125.392 87.5,125.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#56636b\",\n    d: \"M 171.5,130.5 C 170.508,130.328 169.842,130.662 169.5,131.5C 168.508,131.328 167.842,131.662 167.5,132.5C 163.859,132.652 161.193,134.318 159.5,137.5C 158.542,137.953 157.708,138.619 157,139.5C 156.333,138.5 156.333,137.5 157,136.5C 159.981,132.026 164.148,129.359 169.5,128.5C 170.713,128.747 171.38,129.414 171.5,130.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f4a54\",\n    d: \"M -0.5,123.5 C 1.17876,123.285 2.17876,123.952 2.5,125.5C 2.58788,131.791 1.92121,137.958 0.5,144C 2.4727,144.495 4.4727,144.662 6.5,144.5C 4.67956,146.448 2.34623,147.448 -0.5,147.5C -0.5,139.5 -0.5,131.5 -0.5,123.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5a6c77\",\n    d: \"M 346.5,123.5 C 355.178,123.584 363.845,123.917 372.5,124.5C 373.065,127.348 373.398,130.181 373.5,133C 378.156,133.665 382.823,134.165 387.5,134.5C 387.201,136.604 387.534,138.604 388.5,140.5C 389.167,140.167 389.833,139.833 390.5,139.5C 393.484,140.275 396.484,140.941 399.5,141.5C 399.5,142.5 399.5,143.5 399.5,144.5C 393.518,143.916 387.518,143.25 381.5,142.5C 378.596,139.212 374.929,137.212 370.5,136.5C 371.641,135.575 371.641,134.741 370.5,134C 366.151,133.464 361.818,133.631 357.5,134.5C 353.63,134.191 349.963,133.524 346.5,132.5C 346.36,130.876 347.027,129.71 348.5,129C 360.277,127.061 359.943,125.728 347.5,125C 346.944,124.617 346.611,124.117 346.5,123.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#454f58\",\n    d: \"M 31.5,127.5 C 30.9094,128.151 30.2427,128.818 29.5,129.5C 34.7879,130.562 40.1212,131.229 45.5,131.5C 45.3797,134.48 44.713,137.313 43.5,140C 39.4724,140.392 35.4724,140.892 31.5,141.5C 31.5,140.5 31.5,139.5 31.5,138.5C 28.1501,138.665 24.8168,138.498 21.5,138C 21.0426,137.586 20.7093,137.086 20.5,136.5C 26.1585,133.829 25.8251,132.496 19.5,132.5C 19.33,131.178 19.6634,130.011 20.5,129C 24.1914,128.58 27.8581,128.08 31.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8d9298\",\n    d: \"M 235.5,132.5 C 237.213,133.635 237.88,135.302 237.5,137.5C 236.833,137.5 236.5,137.167 236.5,136.5C 236.167,135.167 235.833,133.833 235.5,132.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7d8e96\",\n    d: \"M 337.5,124.5 C 338.171,125.847 338.171,127.014 337.5,128C 334.629,128.118 331.962,128.784 329.5,130C 340.457,134.123 351.79,136.79 363.5,138C 365.611,138.845 367.611,139.678 369.5,140.5C 354.655,137.638 339.655,135.972 324.5,135.5C 322.172,134.282 319.672,133.282 317,132.5C 315.369,130.519 315.535,128.519 317.5,126.5C 312.774,123.031 307.774,122.697 302.5,125.5C 302.414,124.504 302.748,123.671 303.5,123C 305.333,122.833 307.167,122.667 309,122.5C 318.469,123.664 327.969,124.33 337.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#26313b\",\n    d: \"M 206.5,130.5 C 206.833,130.5 207.167,130.5 207.5,130.5C 207.377,133.588 208.377,136.255 210.5,138.5C 202.962,141.4 195.628,141.066 188.5,137.5C 182.518,141.684 178.851,140.017 177.5,132.5C 174.794,132.425 172.127,132.092 169.5,131.5C 169.842,130.662 170.508,130.328 171.5,130.5C 175.312,130.969 178.979,131.969 182.5,133.5C 184.303,128.307 185.636,128.307 186.5,133.5C 191.511,133.666 196.511,133.499 201.5,133C 203.249,132.215 204.916,131.382 206.5,130.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#495965\",\n    d: \"M 372.5,124.5 C 373.167,124.5 373.833,124.5 374.5,124.5C 376.948,125.473 379.615,125.806 382.5,125.5C 382.326,127.861 381.993,130.194 381.5,132.5C 387.579,132.87 393.579,133.537 399.5,134.5C 399.5,136.833 399.5,139.167 399.5,141.5C 396.484,140.941 393.484,140.275 390.5,139.5C 389.833,139.833 389.167,140.167 388.5,140.5C 387.534,138.604 387.201,136.604 387.5,134.5C 382.823,134.165 378.156,133.665 373.5,133C 373.398,130.181 373.065,127.348 372.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#646a71\",\n    d: \"M 153.5,129.5 C 153.167,130.833 152.833,132.167 152.5,133.5C 152.88,135.698 152.213,137.365 150.5,138.5C 151.105,135.873 151.605,133.207 152,130.5C 152.383,129.944 152.883,129.611 153.5,129.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e2630\",\n    d: \"M 207.5,130.5 C 211.5,130.5 215.5,130.5 219.5,130.5C 220.708,131.234 222.041,131.567 223.5,131.5C 224.448,132.978 225.781,133.978 227.5,134.5C 226.127,134.343 224.793,134.51 223.5,135C 224.191,136.067 224.691,137.234 225,138.5C 227.172,139.585 229.172,140.919 231,142.5C 231.499,146.486 231.666,150.486 231.5,154.5C 231.5,156.5 231.5,158.5 231.5,160.5C 230.292,161.234 228.959,161.567 227.5,161.5C 227.219,158.183 227.219,155.017 227.5,152C 224.482,153.053 222.148,152.053 220.5,149C 224.894,149.497 227.228,147.664 227.5,143.5C 225.856,143.286 224.356,143.62 223,144.5C 222.167,143 221,141.833 219.5,141C 220.308,140.692 220.975,140.192 221.5,139.5C 219.235,138.353 216.902,138.186 214.5,139C 216.708,139.936 218.042,141.602 218.5,144C 215.653,144.944 213.153,144.444 211,142.5C 210.51,143.793 210.343,145.127 210.5,146.5C 206.459,145.598 202.459,145.598 198.5,146.5C 194.899,142.405 191.565,142.572 188.5,147C 186.888,147.72 185.388,147.554 184,146.5C 183.433,149.168 182.933,151.834 182.5,154.5C 182.167,154.5 181.833,154.5 181.5,154.5C 181.5,153.167 180.833,152.5 179.5,152.5C 178.88,150.023 177.88,150.023 176.5,152.5C 175.833,152.167 175.167,151.833 174.5,151.5C 172.667,153.167 170.833,154.833 169,156.5C 167.813,158.044 167.48,159.711 168,161.5C 170.237,159.796 172.737,158.796 175.5,158.5C 175.279,159.735 174.612,160.735 173.5,161.5C 174,161.833 174.5,162.167 175,162.5C 176.962,161.239 178.462,159.572 179.5,157.5C 180.733,158.976 181.733,160.643 182.5,162.5C 181.954,164.135 181.62,165.801 181.5,167.5C 180.412,170.057 179.412,172.724 178.5,175.5C 177.5,175.5 176.5,175.5 175.5,175.5C 174.391,175.557 173.391,175.89 172.5,176.5C 172.389,175.883 172.056,175.383 171.5,175C 175.673,173.666 177.673,170.832 177.5,166.5C 173.627,168.472 169.627,169.138 165.5,168.5C 165.167,168.167 164.833,167.833 164.5,167.5C 167.263,166.896 169.597,165.562 171.5,163.5C 168.627,163.124 165.627,163.124 162.5,163.5C 161.738,156.006 161.405,148.673 161.5,141.5C 162.243,140.818 162.909,140.151 163.5,139.5C 165.206,136.796 167.539,134.796 170.5,133.5C 169.675,132.614 168.675,132.281 167.5,132.5C 167.842,131.662 168.508,131.328 169.5,131.5C 172.127,132.092 174.794,132.425 177.5,132.5C 178.851,140.017 182.518,141.684 188.5,137.5C 195.628,141.066 202.962,141.4 210.5,138.5C 208.377,136.255 207.377,133.588 207.5,130.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c2cccf\",\n    d: \"M 255.5,120.5 C 268.041,121.222 280.708,122.222 293.5,123.5C 294.241,126.413 294.741,129.413 295,132.5C 295.5,133 296,133.5 296.5,134C 306.796,135.605 317.129,136.772 327.5,137.5C 327.611,138.117 327.944,138.617 328.5,139C 330.764,139.236 332.931,139.736 335,140.5C 335.909,143.513 336.742,146.513 337.5,149.5C 331.473,150.057 325.473,150.724 319.5,151.5C 319.511,149.983 320.177,148.816 321.5,148C 320.965,145.891 319.965,145.391 318.5,146.5C 317.571,145.311 317.238,143.978 317.5,142.5C 315.208,142.244 313.041,142.577 311,143.5C 309.812,142.437 309.312,141.103 309.5,139.5C 304.905,138.352 300.238,137.519 295.5,137C 292.941,135.223 290.274,133.723 287.5,132.5C 283.491,132.142 279.491,131.642 275.5,131C 273.833,128.667 271.833,126.667 269.5,125C 262.174,124.5 254.841,124.334 247.5,124.5C 241.87,123.699 236.37,123.032 231,122.5C 230.5,122.667 230,122.833 229.5,123C 231.141,124.129 232.141,125.629 232.5,127.5C 231.833,127.167 231.167,126.833 230.5,126.5C 230.047,125.542 229.381,124.708 228.5,124C 226.392,123.64 224.392,122.973 222.5,122C 226.152,121.501 229.818,121.335 233.5,121.5C 240.858,121.582 248.191,121.248 255.5,120.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#72848d\",\n    d: \"M 337.5,124.5 C 341.227,124.759 344.561,125.925 347.5,128C 344.518,128.498 341.518,128.665 338.5,128.5C 338.33,129.822 338.663,130.989 339.5,132C 341.81,132.497 344.143,132.663 346.5,132.5C 349.963,133.524 353.63,134.191 357.5,134.5C 361.818,133.631 366.151,133.464 370.5,134C 371.641,134.741 371.641,135.575 370.5,136.5C 374.929,137.212 378.596,139.212 381.5,142.5C 387.518,143.25 393.518,143.916 399.5,144.5C 399.5,145.833 399.5,147.167 399.5,148.5C 397.608,147.149 395.442,146.482 393,146.5C 391.284,146.748 389.784,147.415 388.5,148.5C 386.596,144.556 385.596,144.89 385.5,149.5C 376.147,149.421 366.813,148.921 357.5,148C 356.833,147.333 356.167,146.667 355.5,146C 362.089,144.386 368.755,143.219 375.5,142.5C 373.369,141.831 371.369,141.165 369.5,140.5C 367.611,139.678 365.611,138.845 363.5,138C 351.79,136.79 340.457,134.123 329.5,130C 331.962,128.784 334.629,128.118 337.5,128C 338.171,127.014 338.171,125.847 337.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a0a5ab\",\n    d: \"M 237.5,137.5 C 239.655,139.617 240.655,142.284 240.5,145.5C 238.903,143.152 237.903,140.486 237.5,137.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#92a4ac\",\n    d: \"M 324.5,135.5 C 339.655,135.972 354.655,137.638 369.5,140.5C 371.369,141.165 373.369,141.831 375.5,142.5C 368.755,143.219 362.089,144.386 355.5,146C 356.167,146.667 356.833,147.333 357.5,148C 366.813,148.921 376.147,149.421 385.5,149.5C 385.596,144.89 386.596,144.556 388.5,148.5C 389.784,147.415 391.284,146.748 393,146.5C 395.442,146.482 397.608,147.149 399.5,148.5C 399.5,151.833 399.5,155.167 399.5,158.5C 386.163,158.667 372.829,158.5 359.5,158C 358.376,157.751 357.376,157.251 356.5,156.5C 359.086,155.52 361.753,155.187 364.5,155.5C 363.448,153.744 361.781,153.077 359.5,153.5C 359.5,152.5 359.5,151.5 359.5,150.5C 352.5,150.5 345.5,150.5 338.5,150.5C 339.952,149.698 341.618,149.198 343.5,149C 342.207,148.51 340.873,148.343 339.5,148.5C 339.5,146.833 339.5,145.167 339.5,143.5C 340.833,143.5 342.167,143.5 343.5,143.5C 343.5,142.167 343.5,140.833 343.5,139.5C 338.167,138.833 332.833,138.167 327.5,137.5C 326.5,136.833 325.5,136.167 324.5,135.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7c8e95\",\n    d: \"M 87.5,126.5 C 86.9094,127.151 86.2427,127.818 85.5,128.5C 87.2702,131.193 87.9368,134.193 87.5,137.5C 80.7148,138.913 73.7148,139.746 66.5,140C 61.7758,141.494 57.1091,142.661 52.5,143.5C 50.7215,144.67 49.7215,146.336 49.5,148.5C 51.7354,148.205 53.7354,148.539 55.5,149.5C 50.1563,149.666 44.8229,149.499 39.5,149C 36.6383,148.73 33.9716,147.896 31.5,146.5C 36.7568,144.287 42.0901,142.621 47.5,141.5C 49.1667,141.5 50.8333,141.5 52.5,141.5C 58.4061,140.091 64.4061,139.091 70.5,138.5C 75.6007,138.284 80.6007,137.45 85.5,136C 86.7908,133.91 86.1242,132.576 83.5,132C 80.2432,130.957 76.9099,130.457 73.5,130.5C 73.5,129.5 73.5,128.5 73.5,127.5C 78.1191,126.686 82.7858,126.353 87.5,126.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#dde2e6\",\n    d: \"M 247.5,124.5 C 246.402,125.397 246.402,126.23 247.5,127C 252.808,127.83 258.141,128.33 263.5,128.5C 263.729,130.433 264.562,132.1 266,133.5C 266.414,133.043 266.914,132.709 267.5,132.5C 270.071,133.728 271.405,135.728 271.5,138.5C 263.652,139.749 263.652,140.415 271.5,140.5C 271.5,143.5 271.5,146.5 271.5,149.5C 265.062,149.596 258.729,150.43 252.5,152C 253.899,153.062 254.899,154.395 255.5,156C 254.28,158.17 254.28,160.337 255.5,162.5C 255.5,162.833 255.5,163.167 255.5,163.5C 254.801,165.556 253.801,167.556 252.5,169.5C 251.319,167.865 251.319,166.198 252.5,164.5C 251.675,163.614 250.675,163.281 249.5,163.5C 249.665,166.518 249.498,169.518 249,172.5C 248.617,171.944 248.117,171.611 247.5,171.5C 247.678,167.878 247.011,164.544 245.5,161.5C 245.946,158.99 245.28,156.99 243.5,155.5C 243.5,154.833 243.5,154.167 243.5,153.5C 243.741,151.102 243.074,149.102 241.5,147.5C 240.662,147.158 240.328,146.492 240.5,145.5C 240.655,142.284 239.655,139.617 237.5,137.5C 237.88,135.302 237.213,133.635 235.5,132.5C 235.573,130.973 234.906,129.973 233.5,129.5C 233.672,128.508 233.338,127.842 232.5,127.5C 232.141,125.629 231.141,124.129 229.5,123C 230,122.833 230.5,122.667 231,122.5C 236.37,123.032 241.87,123.699 247.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ced7d9\",\n    d: \"M 287.5,132.5 C 290.274,133.723 292.941,135.223 295.5,137C 300.238,137.519 304.905,138.352 309.5,139.5C 309.312,141.103 309.812,142.437 311,143.5C 313.041,142.577 315.208,142.244 317.5,142.5C 317.238,143.978 317.571,145.311 318.5,146.5C 319.965,145.391 320.965,145.891 321.5,148C 320.177,148.816 319.511,149.983 319.5,151.5C 318.833,151.5 318.167,151.5 317.5,151.5C 313.107,153.429 308.441,154.429 303.5,154.5C 303.5,156.167 303.5,157.833 303.5,159.5C 296.035,159.091 288.702,159.757 281.5,161.5C 284.422,159.469 287.755,158.302 291.5,158C 292.167,155.333 292.833,152.667 293.5,150C 296.817,149.502 300.15,149.335 303.5,149.5C 303.5,148.5 303.5,147.5 303.5,146.5C 300.022,146.816 296.688,146.316 293.5,145C 291.31,140.961 289.31,136.795 287.5,132.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171e28\",\n    d: \"M 231.5,160.5 C 232.026,164.25 231.026,167.416 228.5,170C 229.466,176.28 230.466,182.446 231.5,188.5C 234.455,189.159 237.455,189.492 240.5,189.5C 240.5,190.167 240.167,190.5 239.5,190.5C 235.615,191.905 231.615,192.905 227.5,193.5C 227.5,191.167 227.5,188.833 227.5,186.5C 224.941,186.61 222.608,185.944 220.5,184.5C 220.833,183.5 221.5,182.833 222.5,182.5C 224.071,183.309 225.738,183.643 227.5,183.5C 227.433,176.828 226.1,170.495 223.5,164.5C 225.315,165.63 227.315,166.296 229.5,166.5C 229.719,165.325 229.386,164.325 228.5,163.5C 224.83,162.322 221.83,160.155 219.5,157C 218.251,156.26 217.251,156.427 216.5,157.5C 215.279,156.972 214.113,156.305 213,155.5C 210.869,152.898 209.035,150.232 207.5,147.5C 202.091,147.435 197.091,148.768 192.5,151.5C 188.364,150.103 185.031,151.103 182.5,154.5C 182.933,151.834 183.433,149.168 184,146.5C 185.388,147.554 186.888,147.72 188.5,147C 191.565,142.572 194.899,142.405 198.5,146.5C 202.459,145.598 206.459,145.598 210.5,146.5C 210.343,145.127 210.51,143.793 211,142.5C 213.153,144.444 215.653,144.944 218.5,144C 218.042,141.602 216.708,139.936 214.5,139C 216.902,138.186 219.235,138.353 221.5,139.5C 220.975,140.192 220.308,140.692 219.5,141C 221,141.833 222.167,143 223,144.5C 224.356,143.62 225.856,143.286 227.5,143.5C 227.228,147.664 224.894,149.497 220.5,149C 222.148,152.053 224.482,153.053 227.5,152C 227.219,155.017 227.219,158.183 227.5,161.5C 228.959,161.567 230.292,161.234 231.5,160.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#10151c\",\n    d: \"M 227.5,134.5 C 228.834,136.159 230.501,137.492 232.5,138.5C 233.218,135.942 234.551,135.275 236.5,136.5C 236.5,137.167 236.833,137.5 237.5,137.5C 237.903,140.486 238.903,143.152 240.5,145.5C 240.328,146.492 240.662,147.158 241.5,147.5C 241.5,148.167 241.5,148.833 241.5,149.5C 240.188,151.743 239.522,154.41 239.5,157.5C 239.244,165.094 239.744,172.761 241,180.5C 243.081,174.674 244.247,168.674 244.5,162.5C 244.833,162.5 245.167,162.5 245.5,162.5C 246.22,168.138 246.553,173.804 246.5,179.5C 244.415,181.684 243.415,184.351 243.5,187.5C 243.5,187.833 243.5,188.167 243.5,188.5C 243.167,188.5 242.833,188.5 242.5,188.5C 242.66,186.801 242.494,185.134 242,183.5C 241.667,184.167 241.333,184.833 241,185.5C 240,184.167 239,182.833 238,181.5C 237.135,170.109 235.801,158.776 234,147.5C 232.957,149.833 232.124,152.166 231.5,154.5C 231.666,150.486 231.499,146.486 231,142.5C 229.172,140.919 227.172,139.585 225,138.5C 224.691,137.234 224.191,136.067 223.5,135C 224.793,134.51 226.127,134.343 227.5,134.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6d7e88\",\n    d: \"M 47.5,141.5 C 42.0901,142.621 36.7568,144.287 31.5,146.5C 33.9716,147.896 36.6383,148.73 39.5,149C 44.8229,149.499 50.1563,149.666 55.5,149.5C 55.5106,151.017 56.1772,152.184 57.5,153C 63.4611,153.997 69.4611,154.663 75.5,155C 80.8367,156.863 86.3367,158.363 92,159.5C 93.0299,159.836 93.5299,160.503 93.5,161.5C 85.877,161.339 78.5436,159.839 71.5,157C 63.2082,155.816 54.8749,155.316 46.5,155.5C 47.3007,153.958 47.634,152.292 47.5,150.5C 41.127,150.247 34.7937,150.581 28.5,151.5C 27.2588,150.963 26.0921,150.296 25,149.5C 21.2002,150.741 17.5336,150.408 14,148.5C 10.9435,152.613 8.4435,152.279 6.5,147.5C 13.1052,146.218 19.7719,145.384 26.5,145C 28.744,144.95 30.4107,144.117 31.5,142.5C 36.8537,142.431 42.187,142.098 47.5,141.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c5cfd2\",\n    d: \"M 154.5,127.5 C 154.167,128.167 153.833,128.833 153.5,129.5C 152.883,129.611 152.383,129.944 152,130.5C 151.605,133.207 151.105,135.873 150.5,138.5C 150.5,139.167 150.167,139.5 149.5,139.5C 149.5,137.167 149.5,134.833 149.5,132.5C 146.15,132.335 142.817,132.502 139.5,133C 137.831,134.669 135.831,135.502 133.5,135.5C 133.146,137.541 133.146,139.374 133.5,141C 130.179,143.849 126.846,144.016 123.5,141.5C 122.28,141.887 121.613,142.72 121.5,144C 124.242,147.071 126.576,150.404 128.5,154C 131.365,154.183 134.031,154.683 136.5,155.5C 132.833,155.5 129.167,155.5 125.5,155.5C 125.167,155.5 124.833,155.5 124.5,155.5C 116.579,154.449 108.579,153.949 100.5,154C 97.8581,150.916 98.6914,149.083 103,148.5C 105.553,150.153 107.387,149.486 108.5,146.5C 108.145,145.478 107.478,144.811 106.5,144.5C 107.301,142.958 107.634,141.292 107.5,139.5C 112.113,139.518 116.113,138.018 119.5,135C 126.507,135.384 133.007,133.884 139,130.5C 138.848,128.924 138.015,127.591 136.5,126.5C 141.671,124.569 147.005,124.069 152.5,125C 153.756,125.417 154.423,126.25 154.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#989ea3\",\n    d: \"M 148.5,141.5 C 148.741,143.898 148.074,145.898 146.5,147.5C 146.595,145.214 147.262,143.214 148.5,141.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d6dbe0\",\n    d: \"M 149.5,139.5 C 149.672,140.492 149.338,141.158 148.5,141.5C 147.262,143.214 146.595,145.214 146.5,147.5C 146.167,148.833 145.833,150.167 145.5,151.5C 144.094,151.973 143.427,152.973 143.5,154.5C 143.5,154.833 143.5,155.167 143.5,155.5C 143.167,155.5 142.833,155.5 142.5,155.5C 140.5,155.5 138.5,155.5 136.5,155.5C 134.031,154.683 131.365,154.183 128.5,154C 126.576,150.404 124.242,147.071 121.5,144C 121.613,142.72 122.28,141.887 123.5,141.5C 126.846,144.016 130.179,143.849 133.5,141C 133.146,139.374 133.146,137.541 133.5,135.5C 135.831,135.502 137.831,134.669 139.5,133C 142.817,132.502 146.15,132.335 149.5,132.5C 149.5,134.833 149.5,137.167 149.5,139.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9fb1b6\",\n    d: \"M 107.5,136.5 C 103.571,137.823 99.5705,138.823 95.5,139.5C 90.5324,138.31 87.5324,140.144 86.5,145C 87.7989,146.326 89.1322,147.66 90.5,149C 89.6198,150.356 89.2865,151.856 89.5,153.5C 101.046,155.23 112.713,155.896 124.5,155.5C 124.833,155.5 125.167,155.5 125.5,155.5C 127.042,156.163 128.709,156.83 130.5,157.5C 126.384,159.281 122.051,159.947 117.5,159.5C 117.36,161.124 118.027,162.29 119.5,163C 122.833,163.333 126.167,163.667 129.5,164C 131.833,165.243 132.5,166.909 131.5,169C 129.19,169.497 126.857,169.663 124.5,169.5C 124.5,169.167 124.5,168.833 124.5,168.5C 126.604,168.799 128.604,168.466 130.5,167.5C 130.291,166.914 129.957,166.414 129.5,166C 125.637,164.646 121.637,164.146 117.5,164.5C 117.389,163.883 117.056,163.383 116.5,163C 111.511,162.501 106.511,162.334 101.5,162.5C 101.082,161.778 100.416,161.278 99.5,161C 100.793,160.51 102.127,160.343 103.5,160.5C 103.5,159.5 103.5,158.5 103.5,157.5C 94.9204,157.397 86.5871,156.23 78.5,154C 77.5838,153.626 76.7504,153.126 76,152.5C 76.1484,151.175 75.9817,150.008 75.5,149C 73.6447,148.578 71.8114,148.078 70,147.5C 65.8886,148.404 61.722,148.737 57.5,148.5C 57.5,146.833 57.5,145.167 57.5,143.5C 55.8333,143.5 54.1667,143.5 52.5,143.5C 57.1091,142.661 61.7758,141.494 66.5,140C 73.7148,139.746 80.7148,138.913 87.5,137.5C 94.1531,136.946 100.82,136.612 107.5,136.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8c9ea6\",\n    d: \"M 52.5,143.5 C 54.1667,143.5 55.8333,143.5 57.5,143.5C 57.5,145.167 57.5,146.833 57.5,148.5C 61.722,148.737 65.8886,148.404 70,147.5C 71.8114,148.078 73.6447,148.578 75.5,149C 75.9817,150.008 76.1484,151.175 76,152.5C 76.7504,153.126 77.5838,153.626 78.5,154C 86.5871,156.23 94.9204,157.397 103.5,157.5C 103.5,158.5 103.5,159.5 103.5,160.5C 102.127,160.343 100.793,160.51 99.5,161C 100.416,161.278 101.082,161.778 101.5,162.5C 98.8333,162.167 96.1667,161.833 93.5,161.5C 93.5299,160.503 93.0299,159.836 92,159.5C 86.3367,158.363 80.8367,156.863 75.5,155C 69.4611,154.663 63.4611,153.997 57.5,153C 56.1772,152.184 55.5106,151.017 55.5,149.5C 53.7354,148.539 51.7354,148.205 49.5,148.5C 49.7215,146.336 50.7215,144.67 52.5,143.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5d6b78\",\n    d: \"M 31.5,142.5 C 30.4107,144.117 28.744,144.95 26.5,145C 19.7719,145.384 13.1052,146.218 6.5,147.5C 8.4435,152.279 10.9435,152.613 14,148.5C 17.5336,150.408 21.2002,150.741 25,149.5C 26.0921,150.296 27.2588,150.963 28.5,151.5C 34.7937,150.581 41.127,150.247 47.5,150.5C 47.634,152.292 47.3007,153.958 46.5,155.5C 30.9162,153.815 15.2496,153.148 -0.5,153.5C -0.5,151.5 -0.5,149.5 -0.5,147.5C 2.34623,147.448 4.67956,146.448 6.5,144.5C 14.8403,143.916 23.1737,143.249 31.5,142.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b3bfc5\",\n    d: \"M 95.5,139.5 C 95.0825,140.222 94.4158,140.722 93.5,141C 95.1554,142.444 95.822,144.278 95.5,146.5C 97.2624,146.357 98.9291,146.691 100.5,147.5C 102.243,145.962 104.243,144.962 106.5,144.5C 107.478,144.811 108.145,145.478 108.5,146.5C 107.387,149.486 105.553,150.153 103,148.5C 98.6914,149.083 97.8581,150.916 100.5,154C 108.579,153.949 116.579,154.449 124.5,155.5C 112.713,155.896 101.046,155.23 89.5,153.5C 89.2865,151.856 89.6198,150.356 90.5,149C 89.1322,147.66 87.7989,146.326 86.5,145C 87.5324,140.144 90.5324,138.31 95.5,139.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8799a0\",\n    d: \"M 338.5,150.5 C 345.5,150.5 352.5,150.5 359.5,150.5C 359.5,151.5 359.5,152.5 359.5,153.5C 361.781,153.077 363.448,153.744 364.5,155.5C 361.753,155.187 359.086,155.52 356.5,156.5C 357.376,157.251 358.376,157.751 359.5,158C 372.829,158.5 386.163,158.667 399.5,158.5C 399.5,158.833 399.5,159.167 399.5,159.5C 383.325,159.83 367.325,159.496 351.5,158.5C 351.5,156.5 351.5,154.5 351.5,152.5C 341.468,152.271 331.468,152.604 321.5,153.5C 321.024,157.389 322.024,160.722 324.5,163.5C 321.187,162.955 317.854,162.455 314.5,162C 316.134,161.506 317.801,161.34 319.5,161.5C 319.5,158.5 319.5,155.5 319.5,152.5C 326,152.064 332.334,151.398 338.5,150.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9fb2ba\",\n    d: \"M 364.5,155.5 C 365.404,154.791 365.737,153.791 365.5,152.5C 371.805,151.513 378.138,151.347 384.5,152C 385.87,153.441 386.87,155.108 387.5,157C 383.667,157.167 379.833,157.333 376,157.5C 371.771,157.49 367.938,156.823 364.5,155.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#686d71\",\n    d: \"M 241.5,147.5 C 243.074,149.102 243.741,151.102 243.5,153.5C 242.326,152.486 241.66,151.153 241.5,149.5C 241.5,148.833 241.5,148.167 241.5,147.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#777c80\",\n    d: \"M 145.5,151.5 C 145.573,153.027 144.906,154.027 143.5,154.5C 143.427,152.973 144.094,151.973 145.5,151.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6e7f87\",\n    d: \"M 351.5,158.5 C 349.744,157.448 349.077,155.781 349.5,153.5C 345.167,153.5 340.833,153.5 336.5,153.5C 336.663,155.857 336.497,158.19 336,160.5C 332.606,159.544 329.106,159.211 325.5,159.5C 325.527,161.199 326.194,162.533 327.5,163.5C 326.5,163.5 325.5,163.5 324.5,163.5C 322.024,160.722 321.024,157.389 321.5,153.5C 331.468,152.604 341.468,152.271 351.5,152.5C 351.5,154.5 351.5,156.5 351.5,158.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#47555f\",\n    d: \"M -0.5,154.5 C -0.5,154.167 -0.5,153.833 -0.5,153.5C 15.2496,153.148 30.9162,153.815 46.5,155.5C 51.3165,156.326 56.3165,156.826 61.5,157C 64.3029,157.615 66.6363,158.782 68.5,160.5C 61.6826,158.875 54.6826,157.875 47.5,157.5C 38.4938,157.666 29.4938,157.5 20.5,157C 18.1728,155.185 15.6728,155.018 13,156.5C 8.70477,154.701 4.20477,154.035 -0.5,154.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#131b24\",\n    d: \"M 179.5,152.5 C 177.748,154.246 176.415,156.246 175.5,158.5C 172.737,158.796 170.237,159.796 168,161.5C 167.48,159.711 167.813,158.044 169,156.5C 170.833,154.833 172.667,153.167 174.5,151.5C 175.167,151.833 175.833,152.167 176.5,152.5C 177.88,150.023 178.88,150.023 179.5,152.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#586c73\",\n    d: \"M 351.5,158.5 C 367.325,159.496 383.325,159.83 399.5,159.5C 399.5,159.833 399.5,160.167 399.5,160.5C 382.298,160.813 365.132,160.479 348,159.5C 343.764,160.233 339.597,161.233 335.5,162.5C 339.647,163.167 343.647,163.834 347.5,164.5C 342.167,164.5 336.833,164.5 331.5,164.5C 330.167,164.167 328.833,163.833 327.5,163.5C 326.194,162.533 325.527,161.199 325.5,159.5C 329.106,159.211 332.606,159.544 336,160.5C 336.497,158.19 336.663,155.857 336.5,153.5C 340.833,153.5 345.167,153.5 349.5,153.5C 349.077,155.781 349.744,157.448 351.5,158.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#424650\",\n    d: \"M 223.5,164.5 C 220.833,162.5 218.5,160.167 216.5,157.5C 217.251,156.427 218.251,156.26 219.5,157C 221.83,160.155 224.83,162.322 228.5,163.5C 229.386,164.325 229.719,165.325 229.5,166.5C 227.315,166.296 225.315,165.63 223.5,164.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#364751\",\n    d: \"M 47.5,157.5 C 54.6826,157.875 61.6826,158.875 68.5,160.5C 71.7848,161.089 72.1181,162.256 69.5,164C 67.2922,164.191 65.2922,164.691 63.5,165.5C 59.1667,165.5 54.8333,165.5 50.5,165.5C 51.3686,163.283 51.702,160.95 51.5,158.5C 49.901,158.768 48.5676,158.434 47.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#26313a\",\n    d: \"M -0.5,157.5 C 7.05301,157.656 14.553,158.323 22,159.5C 29.1874,158.156 36.3541,158.323 43.5,160C 44.2567,161.512 45.2567,162.846 46.5,164C 30.8768,165.401 15.2101,165.901 -0.5,165.5C -0.5,162.833 -0.5,160.167 -0.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#303e47\",\n    d: \"M -0.5,154.5 C 4.20477,154.035 8.70477,154.701 13,156.5C 15.6728,155.018 18.1728,155.185 20.5,157C 29.4938,157.5 38.4938,157.666 47.5,157.5C 48.5676,158.434 49.901,158.768 51.5,158.5C 51.702,160.95 51.3686,163.283 50.5,165.5C 44.9082,167.101 39.0749,168.101 33,168.5C 21.9112,166.712 10.7446,166.046 -0.5,166.5C -0.5,166.167 -0.5,165.833 -0.5,165.5C 15.2101,165.901 30.8768,165.401 46.5,164C 45.2567,162.846 44.2567,161.512 43.5,160C 36.3541,158.323 29.1874,158.156 22,159.5C 14.553,158.323 7.05301,157.656 -0.5,157.5C -0.5,156.5 -0.5,155.5 -0.5,154.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#080d12\",\n    d: \"M 241.5,149.5 C 241.66,151.153 242.326,152.486 243.5,153.5C 243.5,154.167 243.5,154.833 243.5,155.5C 244.219,157.764 244.552,160.097 244.5,162.5C 244.247,168.674 243.081,174.674 241,180.5C 239.744,172.761 239.244,165.094 239.5,157.5C 239.522,154.41 240.188,151.743 241.5,149.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b5e67\",\n    d: \"M 46.5,155.5 C 54.8749,155.316 63.2082,155.816 71.5,157C 78.5436,159.839 85.877,161.339 93.5,161.5C 94.5137,162.674 95.847,163.34 97.5,163.5C 97.5,164.167 97.5,164.833 97.5,165.5C 91.5,165.5 85.5,165.5 79.5,165.5C 74.1667,165.5 68.8333,165.5 63.5,165.5C 65.2922,164.691 67.2922,164.191 69.5,164C 72.1181,162.256 71.7848,161.089 68.5,160.5C 66.6363,158.782 64.3029,157.615 61.5,157C 56.3165,156.826 51.3165,156.326 46.5,155.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b5c2c6\",\n    d: \"M 125.5,155.5 C 129.167,155.5 132.833,155.5 136.5,155.5C 138.5,155.5 140.5,155.5 142.5,155.5C 141.597,158.391 141.264,161.391 141.5,164.5C 140.698,163.048 140.198,161.382 140,159.5C 139.612,160.428 138.945,161.095 138,161.5C 135.001,160.015 132.168,160.181 129.5,162C 132.729,164.237 136.063,166.404 139.5,168.5C 134.482,170.596 129.482,170.929 124.5,169.5C 126.857,169.663 129.19,169.497 131.5,169C 132.5,166.909 131.833,165.243 129.5,164C 126.167,163.667 122.833,163.333 119.5,163C 118.027,162.29 117.36,161.124 117.5,159.5C 122.051,159.947 126.384,159.281 130.5,157.5C 128.709,156.83 127.042,156.163 125.5,155.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#12151c\",\n    d: \"M 157.5,140.5 C 157.414,141.496 157.748,142.329 158.5,143C 157.552,143.483 156.552,143.649 155.5,143.5C 155.701,155.171 154.035,166.505 150.5,177.5C 150.167,177.167 149.833,176.833 149.5,176.5C 150.825,171.236 151.325,165.903 151,160.5C 150.115,163 148.948,165.333 147.5,167.5C 146.863,163.429 146.029,159.429 145,155.5C 145.055,160.838 144.555,166.172 143.5,171.5C 142.63,166.122 142.63,160.789 143.5,155.5C 143.5,155.167 143.5,154.833 143.5,154.5C 144.906,154.027 145.573,153.027 145.5,151.5C 145.833,150.167 146.167,148.833 146.5,147.5C 148.074,145.898 148.741,143.898 148.5,141.5C 149.338,141.158 149.672,140.492 149.5,139.5C 150.167,139.5 150.5,139.167 150.5,138.5C 152.213,137.365 152.88,135.698 152.5,133.5C 153.575,132.438 154.575,132.438 155.5,133.5C 154.262,136.166 154.262,138.832 155.5,141.5C 156.183,141.137 156.85,140.804 157.5,140.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#485b63\",\n    d: \"M 399.5,160.5 C 399.5,161.167 399.5,161.833 399.5,162.5C 382.133,162.452 364.8,163.119 347.5,164.5C 343.647,163.834 339.647,163.167 335.5,162.5C 339.597,161.233 343.764,160.233 348,159.5C 365.132,160.479 382.298,160.813 399.5,160.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#384049\",\n    d: \"M 179.5,152.5 C 180.833,152.5 181.5,153.167 181.5,154.5C 181.068,155.71 180.401,156.71 179.5,157.5C 178.462,159.572 176.962,161.239 175,162.5C 174.5,162.167 174,161.833 173.5,161.5C 174.612,160.735 175.279,159.735 175.5,158.5C 176.415,156.246 177.748,154.246 179.5,152.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#54595e\",\n    d: \"M 243.5,155.5 C 245.28,156.99 245.946,158.99 245.5,161.5C 245.5,161.833 245.5,162.167 245.5,162.5C 245.167,162.5 244.833,162.5 244.5,162.5C 244.552,160.097 244.219,157.764 243.5,155.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#78898f\",\n    d: \"M 93.5,161.5 C 96.1667,161.833 98.8333,162.167 101.5,162.5C 106.511,162.334 111.511,162.501 116.5,163C 117.056,163.383 117.389,163.883 117.5,164.5C 110.863,163.724 104.196,163.391 97.5,163.5C 95.847,163.34 94.5137,162.674 93.5,161.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d8dfe3\",\n    d: \"M 255.5,163.5 C 260.745,165.292 266.412,166.126 272.5,166C 272.957,166.414 273.291,166.914 273.5,167.5C 270.833,168.167 268.167,168.833 265.5,169.5C 264.196,172.092 262.196,173.925 259.5,175C 260.672,175.419 261.672,176.085 262.5,177C 268.393,177.117 274.059,178.283 279.5,180.5C 274.094,181.915 268.761,183.582 263.5,185.5C 264.376,186.251 265.376,186.751 266.5,187C 264.561,187.908 263.561,189.408 263.5,191.5C 265.262,191.357 266.929,191.691 268.5,192.5C 269.739,192.058 270.739,191.391 271.5,190.5C 277.488,191.852 283.488,192.352 289.5,192C 283.071,194.099 276.571,195.932 270,197.5C 267.453,197.238 264.953,196.738 262.5,196C 262.833,195.667 263.167,195.333 263.5,195C 261.5,194.333 259.5,194.333 257.5,195C 258.328,195.915 259.328,196.581 260.5,197C 258.432,197.687 256.432,197.52 254.5,196.5C 253.05,197.85 252.383,199.516 252.5,201.5C 254.833,201.5 257.167,201.5 259.5,201.5C 261.833,201.5 264.167,201.5 266.5,201.5C 266.585,202.995 265.919,203.995 264.5,204.5C 261.562,203.425 258.562,203.259 255.5,204C 254.663,205.011 254.33,206.178 254.5,207.5C 256.167,207.5 257.833,207.5 259.5,207.5C 259.62,210.205 258.62,210.872 256.5,209.5C 255.288,211.836 255.621,214.003 257.5,216C 257.355,216.772 257.022,217.439 256.5,218C 258.059,218.98 259.726,219.813 261.5,220.5C 256.88,221.493 252.214,221.827 247.5,221.5C 247.813,217.958 247.479,214.625 246.5,211.5C 246.011,210.005 245.345,208.671 244.5,207.5C 245.497,204.672 245.497,202.005 244.5,199.5C 243.251,197.33 242.251,194.996 241.5,192.5C 241.752,190.927 242.418,189.594 243.5,188.5C 243.5,188.167 243.5,187.833 243.5,187.5C 245.585,185.316 246.585,182.649 246.5,179.5C 247.473,177.052 247.806,174.385 247.5,171.5C 248.117,171.611 248.617,171.944 249,172.5C 249.498,169.518 249.665,166.518 249.5,163.5C 250.675,163.281 251.675,163.614 252.5,164.5C 251.319,166.198 251.319,167.865 252.5,169.5C 253.801,167.556 254.801,165.556 255.5,163.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#859499\",\n    d: \"M 117.5,164.5 C 121.637,164.146 125.637,164.646 129.5,166C 129.957,166.414 130.291,166.914 130.5,167.5C 128.604,168.466 126.604,168.799 124.5,168.5C 119.167,167.833 113.833,167.167 108.5,166.5C 112.012,167.055 115.012,166.388 117.5,164.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0a0f15\",\n    d: \"M 218.5,192.5 C 220.336,194.588 222.669,195.921 225.5,196.5C 227.63,197.711 229.63,199.044 231.5,200.5C 231.187,203.247 231.52,205.914 232.5,208.5C 233.183,208.863 233.85,209.196 234.5,209.5C 235.398,210.158 236.398,210.824 237.5,211.5C 235.865,213.646 236.199,214.813 238.5,215C 238.193,210.505 238.693,206.005 240,201.5C 241.414,202.413 242.914,202.413 244.5,201.5C 244.443,202.609 244.11,203.609 243.5,204.5C 242.34,206.169 242.34,208.003 243.5,210C 243.108,211.011 242.441,211.511 241.5,211.5C 242.325,212.386 243.325,212.719 244.5,212.5C 244.5,215.167 244.5,217.833 244.5,220.5C 243.265,220.279 242.265,219.612 241.5,218.5C 238.916,219.393 236.249,219.726 233.5,219.5C 235.292,218.691 237.292,218.191 239.5,218C 238.207,217.51 236.873,217.343 235.5,217.5C 235.439,212.678 234.273,212.345 232,216.5C 231.833,216.167 231.667,215.833 231.5,215.5C 232.52,213.568 232.687,211.568 232,209.5C 231.667,210.5 231.333,211.5 231,212.5C 228.833,210.536 226.499,210.202 224,211.5C 223.862,208.531 222.362,206.865 219.5,206.5C 215.547,207.362 211.547,207.695 207.5,207.5C 207.5,206.167 207.5,204.833 207.5,203.5C 204.833,203.5 202.167,203.5 199.5,203.5C 199.5,204.833 199.5,206.167 199.5,207.5C 196.833,207.5 194.167,207.5 191.5,207.5C 191.5,206.167 191.5,204.833 191.5,203.5C 185.907,203.193 180.407,203.527 175,204.5C 172.977,202.987 173.144,201.654 175.5,200.5C 174.095,197.148 172.761,196.982 171.5,200C 167.807,200.551 167.64,200.051 171,198.5C 171.884,196.359 171.384,194.693 169.5,193.5C 168.828,194.949 168.161,196.282 167.5,197.5C 168.167,192.833 168.833,188.167 169.5,183.5C 172.687,181.656 174.687,178.989 175.5,175.5C 176.5,175.5 177.5,175.5 178.5,175.5C 179.412,172.724 180.412,170.057 181.5,167.5C 183.13,165.974 183.963,163.974 184,161.5C 184.561,162.022 185.228,162.355 186,162.5C 187.168,161.491 188.335,160.491 189.5,159.5C 190.192,160.025 190.692,160.692 191,161.5C 191.308,160.692 191.808,160.025 192.5,159.5C 192.778,164.709 193.112,170.042 193.5,175.5C 194.5,175.5 195.5,175.5 196.5,175.5C 196.483,172.08 196.317,168.746 196,165.5C 198.153,163.556 200.653,163.056 203.5,164C 204.337,165.011 204.67,166.178 204.5,167.5C 203.167,167.5 201.833,167.5 200.5,167.5C 200.5,170.167 200.5,172.833 200.5,175.5C 202.5,175.5 204.5,175.5 206.5,175.5C 206.336,172.813 206.503,170.146 207,167.5C 207.772,166.151 208.939,165.318 210.5,165C 207.628,162.468 207.961,160.635 211.5,159.5C 213.056,160.547 214.723,161.214 216.5,161.5C 216.33,165.091 215.997,168.424 215.5,171.5C 217.126,172.99 218.792,174.49 220.5,176C 219.095,177.269 217.429,177.769 215.5,177.5C 215.5,178.833 215.5,180.167 215.5,181.5C 210.633,182.168 210.466,183.168 215,184.5C 216.495,186.11 216.661,187.776 215.5,189.5C 216.188,190.855 217.188,191.855 218.5,192.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d2d9dd\",\n    d: \"M 276.5,161.5 C 275.192,162.232 273.858,163.066 272.5,164C 272.833,164.333 273.167,164.667 273.5,165C 278.486,165.127 283.486,164.96 288.5,164.5C 291.955,164.421 295.288,164.921 298.5,166C 297.328,166.419 296.328,167.085 295.5,168C 301.922,170.526 301.922,173.193 295.5,176C 298.146,176.497 300.813,176.664 303.5,176.5C 302.948,178.331 302.948,179.997 303.5,181.5C 302.271,182.281 300.938,182.781 299.5,183C 301.583,184.32 301.249,185.654 298.5,187C 293.137,187.264 287.803,187.764 282.5,188.5C 281.558,188.392 280.725,188.059 280,187.5C 277.595,188.274 275.095,188.774 272.5,189C 271.944,189.383 271.611,189.883 271.5,190.5C 270.739,191.391 269.739,192.058 268.5,192.5C 266.929,191.691 265.262,191.357 263.5,191.5C 263.561,189.408 264.561,187.908 266.5,187C 265.376,186.751 264.376,186.251 263.5,185.5C 268.761,183.582 274.094,181.915 279.5,180.5C 274.059,178.283 268.393,177.117 262.5,177C 261.672,176.085 260.672,175.419 259.5,175C 262.196,173.925 264.196,172.092 265.5,169.5C 268.167,168.833 270.833,168.167 273.5,167.5C 273.291,166.914 272.957,166.414 272.5,166C 266.412,166.126 260.745,165.292 255.5,163.5C 255.5,163.167 255.5,162.833 255.5,162.5C 262.485,161.911 269.485,161.578 276.5,161.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#73868d\",\n    d: \"M 399.5,162.5 C 399.5,163.167 399.5,163.833 399.5,164.5C 393.167,164.5 386.833,164.5 380.5,164.5C 376.958,164.187 373.625,164.521 370.5,165.5C 366.833,165.5 363.167,165.5 359.5,165.5C 349.985,165.827 340.652,165.494 331.5,164.5C 336.833,164.5 342.167,164.5 347.5,164.5C 364.8,163.119 382.133,162.452 399.5,162.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5c6e77\",\n    d: \"M 63.5,165.5 C 68.8333,165.5 74.1667,165.5 79.5,165.5C 72.6494,166.33 65.6494,167.163 58.5,168C 56.8421,169.663 54.8421,170.496 52.5,170.5C 48.3656,169.515 44.0323,169.182 39.5,169.5C 47.4866,168.073 55.4866,166.74 63.5,165.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e7075\",\n    d: \"M 97.5,163.5 C 104.196,163.391 110.863,163.724 117.5,164.5C 115.012,166.388 112.012,167.055 108.5,166.5C 106.833,166.5 105.167,166.5 103.5,166.5C 101.735,165.539 99.7354,165.205 97.5,165.5C 97.5,164.833 97.5,164.167 97.5,163.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#070b14\",\n    d: \"M 242.5,188.5 C 241.833,188.833 241.167,189.167 240.5,189.5C 237.455,189.492 234.455,189.159 231.5,188.5C 230.466,182.446 229.466,176.28 228.5,170C 231.026,167.416 232.026,164.25 231.5,160.5C 231.5,158.5 231.5,156.5 231.5,154.5C 232.124,152.166 232.957,149.833 234,147.5C 235.801,158.776 237.135,170.109 238,181.5C 239,182.833 240,184.167 241,185.5C 241.333,184.833 241.667,184.167 242,183.5C 242.494,185.134 242.66,186.801 242.5,188.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6f787c\",\n    d: \"M 142.5,155.5 C 142.833,155.5 143.167,155.5 143.5,155.5C 142.63,160.789 142.63,166.122 143.5,171.5C 142.518,174.962 142.185,178.629 142.5,182.5C 142.167,182.5 141.833,182.5 141.5,182.5C 141.5,179.167 141.5,175.833 141.5,172.5C 141.5,169.833 141.5,167.167 141.5,164.5C 141.264,161.391 141.597,158.391 142.5,155.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c6d1d4\",\n    d: \"M 317.5,151.5 C 312.188,152.934 311.521,155.434 315.5,159C 312.21,160.264 308.876,161.43 305.5,162.5C 306.729,163.281 308.062,163.781 309.5,164C 315.5,164.333 321.5,164.667 327.5,165C 329.002,165.583 330.335,166.416 331.5,167.5C 324.277,168.183 317.11,168.849 310,169.5C 309.192,171.579 309.359,173.579 310.5,175.5C 314.765,176.439 319.098,176.772 323.5,176.5C 324.5,176.5 325.5,176.5 326.5,176.5C 326.329,179.797 326.995,180.131 328.5,177.5C 330.271,178.035 330.604,178.869 329.5,180C 327.575,181.595 325.575,181.762 323.5,180.5C 321.729,181.035 321.396,181.869 322.5,183C 319.69,183.782 317.023,184.616 314.5,185.5C 309.197,186.884 303.864,188.051 298.5,189C 304.491,189.499 310.491,189.666 316.5,189.5C 327.341,190.167 338.341,190.833 349.5,191.5C 345.338,192.256 341.171,192.923 337,193.5C 336.5,193.833 336,194.167 335.5,194.5C 336.127,195.417 336.461,196.417 336.5,197.5C 328.283,198.968 319.95,199.635 311.5,199.5C 311.5,199.167 311.5,198.833 311.5,198.5C 295.501,198.881 279.334,198.881 263,198.5C 261.5,198.667 260,198.833 258.5,199C 259.252,199.671 259.586,200.504 259.5,201.5C 257.167,201.5 254.833,201.5 252.5,201.5C 252.383,199.516 253.05,197.85 254.5,196.5C 256.432,197.52 258.432,197.687 260.5,197C 259.328,196.581 258.328,195.915 257.5,195C 259.5,194.333 261.5,194.333 263.5,195C 263.167,195.333 262.833,195.667 262.5,196C 264.953,196.738 267.453,197.238 270,197.5C 276.571,195.932 283.071,194.099 289.5,192C 283.488,192.352 277.488,191.852 271.5,190.5C 271.611,189.883 271.944,189.383 272.5,189C 275.095,188.774 277.595,188.274 280,187.5C 280.725,188.059 281.558,188.392 282.5,188.5C 287.803,187.764 293.137,187.264 298.5,187C 301.249,185.654 301.583,184.32 299.5,183C 300.938,182.781 302.271,182.281 303.5,181.5C 302.948,179.997 302.948,178.331 303.5,176.5C 300.813,176.664 298.146,176.497 295.5,176C 301.922,173.193 301.922,170.526 295.5,168C 296.328,167.085 297.328,166.419 298.5,166C 295.288,164.921 291.955,164.421 288.5,164.5C 283.486,164.96 278.486,165.127 273.5,165C 273.167,164.667 272.833,164.333 272.5,164C 273.858,163.066 275.192,162.232 276.5,161.5C 278.167,161.5 279.833,161.5 281.5,161.5C 288.702,159.757 296.035,159.091 303.5,159.5C 303.5,157.833 303.5,156.167 303.5,154.5C 308.441,154.429 313.107,153.429 317.5,151.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6b7d86\",\n    d: \"M 79.5,165.5 C 85.5,165.5 91.5,165.5 97.5,165.5C 99.7354,165.205 101.735,165.539 103.5,166.5C 100.167,166.5 96.8333,166.5 93.5,166.5C 83.9345,166.637 74.6011,167.637 65.5,169.5C 61.6521,169.24 57.9855,169.906 54.5,171.5C 53.5836,171.457 52.9169,171.124 52.5,170.5C 54.8421,170.496 56.8421,169.663 58.5,168C 65.6494,167.163 72.6494,166.33 79.5,165.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f6c76\",\n    d: \"M 39.5,169.5 C 39.5,169.833 39.5,170.167 39.5,170.5C 32.8333,170.5 26.1667,170.5 19.5,170.5C 19.5,171.5 19.5,172.5 19.5,173.5C 26.1477,174.139 32.8144,174.473 39.5,174.5C 39.5,174.833 39.5,175.167 39.5,175.5C 31.8333,175.5 24.1667,175.5 16.5,175.5C 16.5,174.167 16.5,172.833 16.5,171.5C 13.4578,170.459 10.4578,170.459 7.5,171.5C 6.19376,170.533 5.52709,169.199 5.5,167.5C 9.92913,167.022 14.0958,167.688 18,169.5C 25.123,168.965 32.2897,168.965 39.5,169.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b0c2c8\",\n    d: \"M 120.5,168.5 C 118.566,169.532 116.4,170.198 114,170.5C 109.874,169.671 105.707,169.337 101.5,169.5C 101.5,170.5 101.5,171.5 101.5,172.5C 95.2026,173.32 88.8692,173.653 82.5,173.5C 82.5,172.167 82.5,170.833 82.5,169.5C 95.1533,168.772 107.82,168.439 120.5,168.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a7b8be\",\n    d: \"M 327.5,137.5 C 332.833,138.167 338.167,138.833 343.5,139.5C 343.5,140.833 343.5,142.167 343.5,143.5C 342.167,143.5 340.833,143.5 339.5,143.5C 339.5,145.167 339.5,146.833 339.5,148.5C 340.873,148.343 342.207,148.51 343.5,149C 341.618,149.198 339.952,149.698 338.5,150.5C 332.334,151.398 326,152.064 319.5,152.5C 319.5,155.5 319.5,158.5 319.5,161.5C 317.801,161.34 316.134,161.506 314.5,162C 317.854,162.455 321.187,162.955 324.5,163.5C 325.5,163.5 326.5,163.5 327.5,163.5C 328.833,163.833 330.167,164.167 331.5,164.5C 340.652,165.494 349.985,165.827 359.5,165.5C 359.082,166.222 358.416,166.722 357.5,167C 354.5,167.333 351.5,167.667 348.5,168C 351.603,168.604 354.27,169.937 356.5,172C 353.481,173.179 350.481,174.513 347.5,176C 339.296,176.342 331.296,176.508 323.5,176.5C 319.098,176.772 314.765,176.439 310.5,175.5C 309.359,173.579 309.192,171.579 310,169.5C 317.11,168.849 324.277,168.183 331.5,167.5C 330.335,166.416 329.002,165.583 327.5,165C 321.5,164.667 315.5,164.333 309.5,164C 308.062,163.781 306.729,163.281 305.5,162.5C 308.876,161.43 312.21,160.264 315.5,159C 311.521,155.434 312.188,152.934 317.5,151.5C 318.167,151.5 318.833,151.5 319.5,151.5C 325.473,150.724 331.473,150.057 337.5,149.5C 336.742,146.513 335.909,143.513 335,140.5C 332.931,139.736 330.764,139.236 328.5,139C 327.944,138.617 327.611,138.117 327.5,137.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6d7c85\",\n    d: \"M 39.5,170.5 C 36.9174,171.224 34.2507,172.057 31.5,173C 34.3647,173.183 37.0314,173.683 39.5,174.5C 32.8144,174.473 26.1477,174.139 19.5,173.5C 19.5,172.5 19.5,171.5 19.5,170.5C 26.1667,170.5 32.8333,170.5 39.5,170.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7b8d95\",\n    d: \"M 39.5,169.5 C 44.0323,169.182 48.3656,169.515 52.5,170.5C 52.9169,171.124 53.5836,171.457 54.5,171.5C 57.9855,169.906 61.6521,169.24 65.5,169.5C 63.461,170.911 62.461,172.911 62.5,175.5C 68.1667,175.5 73.8333,175.5 79.5,175.5C 74.9507,175.997 70.4507,176.997 66,178.5C 63.76,177.964 61.9266,176.797 60.5,175C 53.5079,174.5 46.5079,174.334 39.5,174.5C 37.0314,173.683 34.3647,173.183 31.5,173C 34.2507,172.057 36.9174,171.224 39.5,170.5C 39.5,170.167 39.5,169.833 39.5,169.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bfced3\",\n    d: \"M 141.5,164.5 C 141.5,167.167 141.5,169.833 141.5,172.5C 128.167,172.5 114.833,172.5 101.5,172.5C 101.5,171.5 101.5,170.5 101.5,169.5C 105.707,169.337 109.874,169.671 114,170.5C 116.4,170.198 118.566,169.532 120.5,168.5C 121.833,168.5 123.167,168.5 124.5,168.5C 124.5,168.833 124.5,169.167 124.5,169.5C 129.482,170.929 134.482,170.596 139.5,168.5C 136.063,166.404 132.729,164.237 129.5,162C 132.168,160.181 135.001,160.015 138,161.5C 138.945,161.095 139.612,160.428 140,159.5C 140.198,161.382 140.698,163.048 141.5,164.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#94a6b0\",\n    d: \"M 380.5,164.5 C 386.833,164.5 393.167,164.5 399.5,164.5C 399.5,168.5 399.5,172.5 399.5,176.5C 395.143,176.414 390.81,176.08 386.5,175.5C 386.233,177.971 387.233,179.638 389.5,180.5C 392.783,181.327 396.116,181.66 399.5,181.5C 399.5,182.833 399.5,184.167 399.5,185.5C 392.465,185.674 385.465,185.341 378.5,184.5C 378.5,184.167 378.5,183.833 378.5,183.5C 380.467,183.261 382.301,183.594 384,184.5C 384.845,181.87 384.345,179.536 382.5,177.5C 379.5,176.667 376.5,175.833 373.5,175C 374.973,174.29 375.64,173.124 375.5,171.5C 377.167,171.5 378.833,171.5 380.5,171.5C 380.222,173.346 380.889,174.68 382.5,175.5C 384.982,174.103 387.648,173.269 390.5,173C 389.594,171.301 389.261,169.467 389.5,167.5C 390.978,167.762 392.311,167.429 393.5,166.5C 389.018,165.833 384.684,165.166 380.5,164.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9baeb5\",\n    d: \"M 93.5,166.5 C 96.8333,166.5 100.167,166.5 103.5,166.5C 105.167,166.5 106.833,166.5 108.5,166.5C 113.833,167.167 119.167,167.833 124.5,168.5C 123.167,168.5 121.833,168.5 120.5,168.5C 107.82,168.439 95.1533,168.772 82.5,169.5C 82.5,170.833 82.5,172.167 82.5,173.5C 88.8692,173.653 95.2026,173.32 101.5,172.5C 107.31,173.49 113.31,173.823 119.5,173.5C 104.64,174.792 89.6401,174.792 74.5,173.5C 74.33,172.178 74.6634,171.011 75.5,170C 81.581,168.503 87.581,167.336 93.5,166.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#111720\",\n    d: \"M 163.5,139.5 C 162.909,140.151 162.243,140.818 161.5,141.5C 161.405,148.673 161.738,156.006 162.5,163.5C 165.627,163.124 168.627,163.124 171.5,163.5C 169.597,165.562 167.263,166.896 164.5,167.5C 164.833,167.833 165.167,168.167 165.5,168.5C 169.627,169.138 173.627,168.472 177.5,166.5C 177.673,170.832 175.673,173.666 171.5,175C 172.056,175.383 172.389,175.883 172.5,176.5C 170.858,177.803 169.191,179.136 167.5,180.5C 166.378,178.712 166.211,176.712 167,174.5C 168.706,173.692 169.539,172.359 169.5,170.5C 167.5,170.5 165.5,170.5 163.5,170.5C 163.784,172.415 163.451,174.081 162.5,175.5C 162.413,167.063 161.413,158.73 159.5,150.5C 160.169,146.719 160.502,143.052 160.5,139.5C 161.5,139.5 162.5,139.5 163.5,139.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#83888e\",\n    d: \"M 245.5,161.5 C 247.011,164.544 247.678,167.878 247.5,171.5C 247.806,174.385 247.473,177.052 246.5,179.5C 246.553,173.804 246.22,168.138 245.5,162.5C 245.5,162.167 245.5,161.833 245.5,161.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8e9aa0\",\n    d: \"M 316.5,173.5 C 313.827,173.316 313.16,172.149 314.5,170C 318.833,169.333 323.167,169.333 327.5,170C 330.124,170.576 330.791,171.91 329.5,174C 326.139,174.337 322.806,174.837 319.5,175.5C 317.962,175.547 316.962,174.88 316.5,173.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#737f85\",\n    d: \"M 316.5,173.5 C 316.414,172.504 316.748,171.671 317.5,171C 320.167,170.333 322.833,170.333 325.5,171C 325.957,171.414 326.291,171.914 326.5,172.5C 323.232,173.487 319.898,173.82 316.5,173.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#45545c\",\n    d: \"M 50.5,165.5 C 54.8333,165.5 59.1667,165.5 63.5,165.5C 55.4866,166.74 47.4866,168.073 39.5,169.5C 32.2897,168.965 25.123,168.965 18,169.5C 14.0958,167.688 9.92913,167.022 5.5,167.5C 5.52709,169.199 6.19376,170.533 7.5,171.5C 7.33003,172.822 7.66337,173.989 8.5,175C 14.521,175.683 20.1877,176.849 25.5,178.5C 16.825,178.344 8.1583,178.011 -0.5,177.5C -0.5,173.833 -0.5,170.167 -0.5,166.5C 10.7446,166.046 21.9112,166.712 33,168.5C 39.0749,168.101 44.9082,167.101 50.5,165.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8c9ea5\",\n    d: \"M 93.5,166.5 C 87.581,167.336 81.581,168.503 75.5,170C 74.6634,171.011 74.33,172.178 74.5,173.5C 89.6401,174.792 104.64,174.792 119.5,173.5C 123.884,173.174 128.217,173.508 132.5,174.5C 125.189,175.331 117.856,175.831 110.5,176C 109.584,176.278 108.918,176.778 108.5,177.5C 106.335,177.116 104.668,177.783 103.5,179.5C 105.045,180.452 106.712,180.785 108.5,180.5C 108.5,181.5 108.5,182.5 108.5,183.5C 107.167,183.5 105.833,183.5 104.5,183.5C 103.167,183.5 101.833,183.5 100.5,183.5C 100.33,182.178 100.663,181.011 101.5,180C 99.1667,179.333 96.8333,179.333 94.5,180C 93.87,181.892 92.87,183.559 91.5,185C 87.9748,185.179 84.6414,185.679 81.5,186.5C 80.2241,185.614 80.2241,184.614 81.5,183.5C 84.7453,183.974 88.0786,183.974 91.5,183.5C 91.3915,181.486 92.0582,179.82 93.5,178.5C 94.404,177.791 94.7373,176.791 94.5,175.5C 89.5,175.5 84.5,175.5 79.5,175.5C 73.8333,175.5 68.1667,175.5 62.5,175.5C 62.461,172.911 63.461,170.911 65.5,169.5C 74.6011,167.637 83.9345,166.637 93.5,166.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aab6b9\",\n    d: \"M 101.5,172.5 C 114.833,172.5 128.167,172.5 141.5,172.5C 141.5,175.833 141.5,179.167 141.5,182.5C 140.835,180.302 140.168,177.969 139.5,175.5C 138.817,175.863 138.15,176.196 137.5,176.5C 136.883,176.389 136.383,176.056 136,175.5C 126.901,176.381 117.734,177.048 108.5,177.5C 108.918,176.778 109.584,176.278 110.5,176C 117.856,175.831 125.189,175.331 132.5,174.5C 128.217,173.508 123.884,173.174 119.5,173.5C 113.31,173.823 107.31,173.49 101.5,172.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8597a1\",\n    d: \"M 399.5,176.5 C 399.5,178.167 399.5,179.833 399.5,181.5C 396.116,181.66 392.783,181.327 389.5,180.5C 387.233,179.638 386.233,177.971 386.5,175.5C 390.81,176.08 395.143,176.414 399.5,176.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d252d\",\n    d: \"M 167.5,180.5 C 165.721,182.344 163.388,183.01 160.5,182.5C 160.884,180.071 161.551,177.737 162.5,175.5C 163.451,174.081 163.784,172.415 163.5,170.5C 165.5,170.5 167.5,170.5 169.5,170.5C 169.539,172.359 168.706,173.692 167,174.5C 166.211,176.712 166.378,178.712 167.5,180.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#10151d\",\n    d: \"M 216.5,157.5 C 218.5,160.167 220.833,162.5 223.5,164.5C 226.1,170.495 227.433,176.828 227.5,183.5C 225.738,183.643 224.071,183.309 222.5,182.5C 221.5,182.833 220.833,183.5 220.5,184.5C 222.608,185.944 224.941,186.61 227.5,186.5C 227.5,188.833 227.5,191.167 227.5,193.5C 224.72,193.193 222.22,192.193 220,190.5C 218.97,190.836 218.47,191.503 218.5,192.5C 217.188,191.855 216.188,190.855 215.5,189.5C 216.661,187.776 216.495,186.11 215,184.5C 210.466,183.168 210.633,182.168 215.5,181.5C 215.5,180.167 215.5,178.833 215.5,177.5C 217.429,177.769 219.095,177.269 220.5,176C 218.792,174.49 217.126,172.99 215.5,171.5C 215.997,168.424 216.33,165.091 216.5,161.5C 214.723,161.214 213.056,160.547 211.5,159.5C 207.961,160.635 207.628,162.468 210.5,165C 208.939,165.318 207.772,166.151 207,167.5C 206.503,170.146 206.336,172.813 206.5,175.5C 204.5,175.5 202.5,175.5 200.5,175.5C 200.5,172.833 200.5,170.167 200.5,167.5C 201.833,167.5 203.167,167.5 204.5,167.5C 204.67,166.178 204.337,165.011 203.5,164C 200.653,163.056 198.153,163.556 196,165.5C 196.317,168.746 196.483,172.08 196.5,175.5C 195.5,175.5 194.5,175.5 193.5,175.5C 193.112,170.042 192.778,164.709 192.5,159.5C 191.808,160.025 191.308,160.692 191,161.5C 190.692,160.692 190.192,160.025 189.5,159.5C 188.335,160.491 187.168,161.491 186,162.5C 185.228,162.355 184.561,162.022 184,161.5C 183.963,163.974 183.13,165.974 181.5,167.5C 181.62,165.801 181.954,164.135 182.5,162.5C 181.733,160.643 180.733,158.976 179.5,157.5C 180.401,156.71 181.068,155.71 181.5,154.5C 181.833,154.5 182.167,154.5 182.5,154.5C 185.031,151.103 188.364,150.103 192.5,151.5C 197.091,148.768 202.091,147.435 207.5,147.5C 209.035,150.232 210.869,152.898 213,155.5C 214.113,156.305 215.279,156.972 216.5,157.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a9bbc3\",\n    d: \"M 374.5,165.5 C 377.487,165.998 380.487,166.498 383.5,167C 383.957,167.414 384.291,167.914 384.5,168.5C 378.079,169.431 372.079,171.264 366.5,174C 365.663,175.011 365.33,176.178 365.5,177.5C 367.527,177.338 369.527,177.505 371.5,178C 372.72,179.63 374.72,180.63 377.5,181C 373.848,181.499 370.182,181.665 366.5,181.5C 365.402,180.603 365.402,179.77 366.5,179C 364.285,178.83 362.285,178.163 360.5,177C 361.448,176.517 362.448,176.351 363.5,176.5C 363.351,175.448 363.517,174.448 364,173.5C 367.212,169.643 371.379,167.476 376.5,167C 375.584,166.722 374.918,166.222 374.5,165.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9eb0b8\",\n    d: \"M 370.5,165.5 C 373.625,164.521 376.958,164.187 380.5,164.5C 384.684,165.166 389.018,165.833 393.5,166.5C 392.311,167.429 390.978,167.762 389.5,167.5C 389.261,169.467 389.594,171.301 390.5,173C 387.648,173.269 384.982,174.103 382.5,175.5C 380.889,174.68 380.222,173.346 380.5,171.5C 378.833,171.5 377.167,171.5 375.5,171.5C 375.64,173.124 374.973,174.29 373.5,175C 376.5,175.833 379.5,176.667 382.5,177.5C 384.345,179.536 384.845,181.87 384,184.5C 382.301,183.594 380.467,183.261 378.5,183.5C 376.167,183.5 373.833,183.5 371.5,183.5C 367.5,183.5 363.5,183.5 359.5,183.5C 356.833,183.5 354.167,183.5 351.5,183.5C 356.056,181.558 361.056,180.892 366.5,181.5C 370.182,181.665 373.848,181.499 377.5,181C 374.72,180.63 372.72,179.63 371.5,178C 369.527,177.505 367.527,177.338 365.5,177.5C 365.33,176.178 365.663,175.011 366.5,174C 372.079,171.264 378.079,169.431 384.5,168.5C 384.291,167.914 383.957,167.414 383.5,167C 380.487,166.498 377.487,165.998 374.5,165.5C 373.167,165.5 371.833,165.5 370.5,165.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#080d15\",\n    d: \"M 167.5,132.5 C 168.675,132.281 169.675,132.614 170.5,133.5C 167.539,134.796 165.206,136.796 163.5,139.5C 162.5,139.5 161.5,139.5 160.5,139.5C 160.502,143.052 160.169,146.719 159.5,150.5C 161.413,158.73 162.413,167.063 162.5,175.5C 161.551,177.737 160.884,180.071 160.5,182.5C 159.167,183.833 159.167,185.167 160.5,186.5C 160.628,188.655 160.128,190.655 159,192.5C 156.379,191.009 153.545,190.342 150.5,190.5C 150.5,189.833 150.167,189.5 149.5,189.5C 147.589,188.925 145.922,187.925 144.5,186.5C 144.34,184.847 143.674,183.514 142.5,182.5C 142.185,178.629 142.518,174.962 143.5,171.5C 144.555,166.172 145.055,160.838 145,155.5C 146.029,159.429 146.863,163.429 147.5,167.5C 148.948,165.333 150.115,163 151,160.5C 151.325,165.903 150.825,171.236 149.5,176.5C 149.833,176.833 150.167,177.167 150.5,177.5C 154.035,166.505 155.701,155.171 155.5,143.5C 156.552,143.649 157.552,143.483 158.5,143C 157.748,142.329 157.414,141.496 157.5,140.5C 158.906,140.027 159.573,139.027 159.5,137.5C 161.193,134.318 163.859,132.652 167.5,132.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#253139\",\n    d: \"M -0.5,177.5 C 8.1583,178.011 16.825,178.344 25.5,178.5C 30.2085,179.045 34.8752,180.212 39.5,182C 30.173,182.755 20.8397,183.422 11.5,184C 7.77612,185.981 3.77612,187.148 -0.5,187.5C -0.5,184.167 -0.5,180.833 -0.5,177.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b6c6cd\",\n    d: \"M 359.5,165.5 C 363.167,165.5 366.833,165.5 370.5,165.5C 371.833,165.5 373.167,165.5 374.5,165.5C 374.918,166.222 375.584,166.722 376.5,167C 371.379,167.476 367.212,169.643 364,173.5C 363.517,174.448 363.351,175.448 363.5,176.5C 362.448,176.351 361.448,176.517 360.5,177C 362.285,178.163 364.285,178.83 366.5,179C 365.402,179.77 365.402,180.603 366.5,181.5C 361.056,180.892 356.056,181.558 351.5,183.5C 348.833,183.5 346.167,183.5 343.5,183.5C 333.819,183.978 324.152,184.645 314.5,185.5C 317.023,184.616 319.69,183.782 322.5,183C 321.396,181.869 321.729,181.035 323.5,180.5C 325.575,181.762 327.575,181.595 329.5,180C 330.604,178.869 330.271,178.035 328.5,177.5C 326.995,180.131 326.329,179.797 326.5,176.5C 325.5,176.5 324.5,176.5 323.5,176.5C 331.296,176.508 339.296,176.342 347.5,176C 350.481,174.513 353.481,173.179 356.5,172C 354.27,169.937 351.603,168.604 348.5,168C 351.5,167.667 354.5,167.333 357.5,167C 358.416,166.722 359.082,166.222 359.5,165.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6b7e87\",\n    d: \"M 39.5,175.5 C 39.5,175.167 39.5,174.833 39.5,174.5C 46.5079,174.334 53.5079,174.5 60.5,175C 61.9266,176.797 63.76,177.964 66,178.5C 70.4507,176.997 74.9507,175.997 79.5,175.5C 84.5,175.5 89.5,175.5 94.5,175.5C 94.7373,176.791 94.404,177.791 93.5,178.5C 88.1563,178.334 82.8229,178.501 77.5,179C 76.3271,181.26 74.9938,183.426 73.5,185.5C 75.6309,186.169 77.6309,186.835 79.5,187.5C 76.7531,187.187 74.0865,187.52 71.5,188.5C 73.6667,188.833 75.8333,189.167 78,189.5C 80.6103,189.467 82.777,188.8 84.5,187.5C 89.504,187.889 94.504,188.389 99.5,189C 99.1667,189.333 98.8333,189.667 98.5,190C 92.1406,190.169 85.8072,190.669 79.5,191.5C 82.8333,192.167 86.1667,192.833 89.5,193.5C 82.8665,194.497 76.1998,194.83 69.5,194.5C 69.9175,193.778 70.5842,193.278 71.5,193C 66.6394,192.452 61.9728,191.285 57.5,189.5C 57.0825,188.778 56.4158,188.278 55.5,188C 58.2731,186.881 60.7731,185.381 63,183.5C 65.1704,183.672 66.8371,184.672 68,186.5C 69.4397,185.852 70.9397,185.519 72.5,185.5C 72.5792,184.07 72.2458,182.736 71.5,181.5C 72.325,180.614 73.325,180.281 74.5,180.5C 74.5,179.5 74.5,178.5 74.5,177.5C 71.6034,177.788 68.7701,178.455 66,179.5C 62.0439,177.655 57.8772,176.322 53.5,175.5C 48.3379,175.562 48.3379,176.229 53.5,177.5C 49.8927,178.489 46.226,178.823 42.5,178.5C 42.5,177.5 42.5,176.5 42.5,175.5C 41.5,175.5 40.5,175.5 39.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3c434b\",\n    d: \"M 175.5,175.5 C 174.687,178.989 172.687,181.656 169.5,183.5C 166.879,185.485 163.879,186.485 160.5,186.5C 159.167,185.167 159.167,183.833 160.5,182.5C 163.388,183.01 165.721,182.344 167.5,180.5C 169.191,179.136 170.858,177.803 172.5,176.5C 173.391,175.89 174.391,175.557 175.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#566670\",\n    d: \"M 39.5,175.5 C 40.5,175.5 41.5,175.5 42.5,175.5C 42.5,176.5 42.5,177.5 42.5,178.5C 46.226,178.823 49.8927,178.489 53.5,177.5C 48.3379,176.229 48.3379,175.562 53.5,175.5C 57.8772,176.322 62.0439,177.655 66,179.5C 68.7701,178.455 71.6034,177.788 74.5,177.5C 74.5,178.5 74.5,179.5 74.5,180.5C 73.325,180.281 72.325,180.614 71.5,181.5C 72.2458,182.736 72.5792,184.07 72.5,185.5C 70.9397,185.519 69.4397,185.852 68,186.5C 66.8371,184.672 65.1704,183.672 63,183.5C 60.7731,185.381 58.2731,186.881 55.5,188C 56.4158,188.278 57.0825,188.778 57.5,189.5C 51.5283,190.474 45.5283,190.641 39.5,190C 42.2121,189.361 44.2121,187.861 45.5,185.5C 46.8333,185.5 48.1667,185.5 49.5,185.5C 49.5,184.5 49.5,183.5 49.5,182.5C 53.4102,182.737 57.0769,181.904 60.5,180C 48.8404,179.272 37.1737,178.772 25.5,178.5C 20.1877,176.849 14.521,175.683 8.5,175C 7.66337,173.989 7.33003,172.822 7.5,171.5C 10.4578,170.459 13.4578,170.459 16.5,171.5C 16.5,172.833 16.5,174.167 16.5,175.5C 24.1667,175.5 31.8333,175.5 39.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a1b3b9\",\n    d: \"M 104.5,183.5 C 104.383,185.484 105.05,187.15 106.5,188.5C 105.975,189.192 105.308,189.692 104.5,190C 108.486,190.499 112.486,190.666 116.5,190.5C 111.652,191.814 106.652,191.814 101.5,190.5C 102.167,189.5 102.833,188.5 103.5,187.5C 96.1968,186.503 88.8635,186.169 81.5,186.5C 84.6414,185.679 87.9748,185.179 91.5,185C 92.87,183.559 93.87,181.892 94.5,180C 96.8333,179.333 99.1667,179.333 101.5,180C 100.663,181.011 100.33,182.178 100.5,183.5C 101.833,183.5 103.167,183.5 104.5,183.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a4b0b5\",\n    d: \"M 343.5,183.5 C 341.833,184.167 340.167,184.833 338.5,185.5C 331.179,186.083 323.846,186.583 316.5,187C 315.402,187.77 315.402,188.603 316.5,189.5C 310.491,189.666 304.491,189.499 298.5,189C 303.864,188.051 309.197,186.884 314.5,185.5C 324.152,184.645 333.819,183.978 343.5,183.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#73838b\",\n    d: \"M 343.5,183.5 C 346.167,183.5 348.833,183.5 351.5,183.5C 354.167,183.5 356.833,183.5 359.5,183.5C 354.971,184.273 350.305,184.94 345.5,185.5C 343.167,185.5 340.833,185.5 338.5,185.5C 340.167,184.833 341.833,184.167 343.5,183.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#898e94\",\n    d: \"M 246.5,179.5 C 246.585,182.649 245.585,185.316 243.5,187.5C 243.415,184.351 244.415,181.684 246.5,179.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#44555d\",\n    d: \"M 359.5,183.5 C 363.5,183.5 367.5,183.5 371.5,183.5C 372.718,184.161 374.051,184.828 375.5,185.5C 374.5,185.833 373.5,186.167 372.5,186.5C 363.352,186.241 354.352,185.907 345.5,185.5C 350.305,184.94 354.971,184.273 359.5,183.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ced7da\",\n    d: \"M 141.5,182.5 C 141.833,182.5 142.167,182.5 142.5,182.5C 143.674,183.514 144.34,184.847 144.5,186.5C 144.5,187.5 144.5,188.5 144.5,189.5C 138.833,189.5 133.167,189.5 127.5,189.5C 125.708,188.691 123.708,188.191 121.5,188C 121.957,187.586 122.291,187.086 122.5,186.5C 120.257,185.526 117.924,185.192 115.5,185.5C 115.387,182.951 116.054,180.618 117.5,178.5C 124.321,177.833 130.988,177.167 137.5,176.5C 138.15,176.196 138.817,175.863 139.5,175.5C 140.168,177.969 140.835,180.302 141.5,182.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#79878d\",\n    d: \"M 338.5,185.5 C 345.76,187.465 353.427,188.132 361.5,187.5C 361.5,187.833 361.5,188.167 361.5,188.5C 351.794,188.245 342.127,188.579 332.5,189.5C 330.429,188.191 327.929,187.525 325,187.5C 322.5,187.667 320,187.833 317.5,188C 318.416,188.278 319.082,188.778 319.5,189.5C 318.5,189.5 317.5,189.5 316.5,189.5C 315.402,188.603 315.402,187.77 316.5,187C 323.846,186.583 331.179,186.083 338.5,185.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#879aa3\",\n    d: \"M 378.5,184.5 C 385.465,185.341 392.465,185.674 399.5,185.5C 399.5,185.833 399.5,186.167 399.5,186.5C 396.15,186.335 392.817,186.502 389.5,187C 388.167,187.667 388.167,188.333 389.5,189C 391.256,189.202 392.922,189.702 394.5,190.5C 394.291,191.086 393.957,191.586 393.5,192C 387.843,192.499 382.176,192.666 376.5,192.5C 379.358,191.834 382.358,191.167 385.5,190.5C 384.975,189.808 384.308,189.308 383.5,189C 376.174,188.5 368.841,188.334 361.5,188.5C 361.5,188.167 361.5,187.833 361.5,187.5C 368.841,187.666 376.174,187.5 383.5,187C 381.685,186.243 380.019,185.41 378.5,184.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b8c5c9\",\n    d: \"M 137.5,176.5 C 130.988,177.167 124.321,177.833 117.5,178.5C 116.054,180.618 115.387,182.951 115.5,185.5C 117.924,185.192 120.257,185.526 122.5,186.5C 122.291,187.086 121.957,187.586 121.5,188C 123.708,188.191 125.708,188.691 127.5,189.5C 123.958,189.187 120.625,189.521 117.5,190.5C 117.167,190.5 116.833,190.5 116.5,190.5C 112.486,190.666 108.486,190.499 104.5,190C 105.308,189.692 105.975,189.192 106.5,188.5C 105.05,187.15 104.383,185.484 104.5,183.5C 105.833,183.5 107.167,183.5 108.5,183.5C 108.5,182.5 108.5,181.5 108.5,180.5C 106.712,180.785 105.045,180.452 103.5,179.5C 104.668,177.783 106.335,177.116 108.5,177.5C 117.734,177.048 126.901,176.381 136,175.5C 136.383,176.056 136.883,176.389 137.5,176.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#607279\",\n    d: \"M 371.5,183.5 C 373.833,183.5 376.167,183.5 378.5,183.5C 378.5,183.833 378.5,184.167 378.5,184.5C 380.019,185.41 381.685,186.243 383.5,187C 376.174,187.5 368.841,187.666 361.5,187.5C 353.427,188.132 345.76,187.465 338.5,185.5C 340.833,185.5 343.167,185.5 345.5,185.5C 354.352,185.907 363.352,186.241 372.5,186.5C 373.5,186.167 374.5,185.833 375.5,185.5C 374.051,184.828 372.718,184.161 371.5,183.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e6169\",\n    d: \"M 79.5,187.5 C 81.1667,187.5 82.8333,187.5 84.5,187.5C 82.777,188.8 80.6103,189.467 78,189.5C 75.8333,189.167 73.6667,188.833 71.5,188.5C 74.0865,187.52 76.7531,187.187 79.5,187.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#353e48\",\n    d: \"M 25.5,178.5 C 37.1737,178.772 48.8404,179.272 60.5,180C 57.0769,181.904 53.4102,182.737 49.5,182.5C 49.5,183.5 49.5,184.5 49.5,185.5C 48.1667,185.5 46.8333,185.5 45.5,185.5C 34.7945,185.824 24.1278,185.824 13.5,185.5C 13.5,186.5 13.5,187.5 13.5,188.5C 17.81,187.92 22.1434,187.586 26.5,187.5C 26.5,188.5 26.5,189.5 26.5,190.5C 23.9407,190.198 21.6074,190.532 19.5,191.5C 13.7394,191.886 8.07275,192.719 2.5,194C 9.46653,194.998 16.4665,195.664 23.5,196C 25.5689,196.324 25.9023,197.158 24.5,198.5C 25.3333,198.833 26.1667,199.167 27,199.5C 28.825,199.057 30.6583,198.723 32.5,198.5C 32.5,199.833 32.5,201.167 32.5,202.5C 27.8333,202.5 23.1667,202.5 18.5,202.5C 12.4056,200.906 6.07225,200.239 -0.5,200.5C -0.5,196.167 -0.5,191.833 -0.5,187.5C 3.77612,187.148 7.77612,185.981 11.5,184C 20.8397,183.422 30.173,182.755 39.5,182C 34.8752,180.212 30.2085,179.045 25.5,178.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#657278\",\n    d: \"M 332.5,189.5 C 328.167,189.5 323.833,189.5 319.5,189.5C 319.082,188.778 318.416,188.278 317.5,188C 320,187.833 322.5,187.667 325,187.5C 327.929,187.525 330.429,188.191 332.5,189.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a8b0b3\",\n    d: \"M 144.5,186.5 C 145.922,187.925 147.589,188.925 149.5,189.5C 149.819,194.363 149.486,199.03 148.5,203.5C 148.5,202.167 148.5,200.833 148.5,199.5C 148.817,196.428 148.484,193.428 147.5,190.5C 142.225,191.531 136.892,192.197 131.5,192.5C 130.167,192.5 128.833,192.5 127.5,192.5C 124.663,190.598 121.329,189.931 117.5,190.5C 120.625,189.521 123.958,189.187 127.5,189.5C 133.167,189.5 138.833,189.5 144.5,189.5C 144.5,188.5 144.5,187.5 144.5,186.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f272e\",\n    d: \"M 169.5,183.5 C 168.833,188.167 168.167,192.833 167.5,197.5C 167.5,198.167 167.167,198.5 166.5,198.5C 166.762,197.022 166.429,195.689 165.5,194.5C 163.511,195.632 161.844,196.965 160.5,198.5C 157.538,198.117 156.538,199.117 157.5,201.5C 155.589,202.477 153.589,203.143 151.5,203.5C 150.705,199.215 150.372,194.881 150.5,190.5C 153.545,190.342 156.379,191.009 159,192.5C 160.128,190.655 160.628,188.655 160.5,186.5C 163.879,186.485 166.879,185.485 169.5,183.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#47515a\",\n    d: \"M 45.5,185.5 C 44.2121,187.861 42.2121,189.361 39.5,190C 45.5283,190.641 51.5283,190.474 57.5,189.5C 61.9728,191.285 66.6394,192.452 71.5,193C 70.5842,193.278 69.9175,193.778 69.5,194.5C 63.6155,193.861 58.1155,194.861 53,197.5C 50.5217,196.668 48.0217,196.501 45.5,197C 46.3081,197.308 46.9747,197.808 47.5,198.5C 46.3112,199.429 44.9778,199.762 43.5,199.5C 39.2379,197.872 34.5713,196.872 29.5,196.5C 30,196.167 30.5,195.833 31,195.5C 38.5078,195.641 46.0078,195.641 53.5,195.5C 55.4405,195.196 57.1072,194.363 58.5,193C 58,192.833 57.5,192.667 57,192.5C 48.0366,192.885 39.0366,192.885 30,192.5C 26.7191,193.965 23.2191,194.632 19.5,194.5C 19.5,193.5 19.5,192.5 19.5,191.5C 21.6074,190.532 23.9407,190.198 26.5,190.5C 26.5,189.5 26.5,188.5 26.5,187.5C 22.1434,187.586 17.81,187.92 13.5,188.5C 13.5,187.5 13.5,186.5 13.5,185.5C 24.1278,185.824 34.7945,185.824 45.5,185.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3b424b\",\n    d: \"M 227.5,193.5 C 231.615,192.905 235.615,191.905 239.5,190.5C 238.833,192.167 238.167,193.833 237.5,195.5C 235.805,194.174 234.472,194.507 233.5,196.5C 232.666,195.252 231.333,194.585 229.5,194.5C 227.667,194.585 226.334,195.252 225.5,196.5C 222.669,195.921 220.336,194.588 218.5,192.5C 218.47,191.503 218.97,190.836 220,190.5C 222.22,192.193 224.72,193.193 227.5,193.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#414a53\",\n    d: \"M 19.5,191.5 C 19.5,192.5 19.5,193.5 19.5,194.5C 23.2191,194.632 26.7191,193.965 30,192.5C 39.0366,192.885 48.0366,192.885 57,192.5C 57.5,192.667 58,192.833 58.5,193C 57.1072,194.363 55.4405,195.196 53.5,195.5C 46.0078,195.641 38.5078,195.641 31,195.5C 30.5,195.833 30,196.167 29.5,196.5C 34.5713,196.872 39.2379,197.872 43.5,199.5C 41.3043,199.565 39.3043,200.232 37.5,201.5C 43.6535,202.167 49.6535,202.833 55.5,203.5C 54.8333,203.5 54.1667,203.5 53.5,203.5C 50.1667,203.5 46.8333,203.5 43.5,203.5C 40.5,203.5 37.5,203.5 34.5,203.5C 34.9227,201.219 34.256,199.552 32.5,198.5C 30.6583,198.723 28.825,199.057 27,199.5C 26.1667,199.167 25.3333,198.833 24.5,198.5C 25.9023,197.158 25.5689,196.324 23.5,196C 16.4665,195.664 9.46653,194.998 2.5,194C 8.07275,192.719 13.7394,191.886 19.5,191.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#636a74\",\n    d: \"M 242.5,188.5 C 242.833,188.5 243.167,188.5 243.5,188.5C 242.418,189.594 241.752,190.927 241.5,192.5C 242.251,194.996 243.251,197.33 244.5,199.5C 241.343,200.079 239.009,198.746 237.5,195.5C 238.167,193.833 238.833,192.167 239.5,190.5C 240.167,190.5 240.5,190.167 240.5,189.5C 241.167,189.167 241.833,188.833 242.5,188.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8a9a9f\",\n    d: \"M 93.5,178.5 C 92.0582,179.82 91.3915,181.486 91.5,183.5C 88.0786,183.974 84.7453,183.974 81.5,183.5C 80.2241,184.614 80.2241,185.614 81.5,186.5C 88.8635,186.169 96.1968,186.503 103.5,187.5C 102.833,188.5 102.167,189.5 101.5,190.5C 106.652,191.814 111.652,191.814 116.5,190.5C 116.833,190.5 117.167,190.5 117.5,190.5C 121.329,189.931 124.663,190.598 127.5,192.5C 126.5,192.5 125.5,192.5 124.5,192.5C 114.447,192.808 104.447,192.475 94.5,191.5C 90.251,194.896 85.251,196.396 79.5,196C 84.036,197.379 88.7027,197.879 93.5,197.5C 100.191,197.546 106.857,197.212 113.5,196.5C 113.5,197.5 113.5,198.5 113.5,199.5C 115.924,199.192 118.257,199.526 120.5,200.5C 117.141,202.567 113.474,203.9 109.5,204.5C 110.949,205.172 112.282,205.839 113.5,206.5C 111.833,206.5 110.167,206.5 108.5,206.5C 108.5,206.167 108.5,205.833 108.5,205.5C 107.803,203.929 107.47,202.429 107.5,201C 104.279,200.722 101.279,199.889 98.5,198.5C 93.8333,198.5 89.1667,198.5 84.5,198.5C 77.5293,199.29 70.5293,199.623 63.5,199.5C 63.5,200.5 63.5,201.5 63.5,202.5C 60.6786,202.461 58.0119,201.795 55.5,200.5C 59.5771,196.989 64.2438,194.989 69.5,194.5C 76.1998,194.83 82.8665,194.497 89.5,193.5C 86.1667,192.833 82.8333,192.167 79.5,191.5C 85.8072,190.669 92.1406,190.169 98.5,190C 98.8333,189.667 99.1667,189.333 99.5,189C 94.504,188.389 89.504,187.889 84.5,187.5C 82.8333,187.5 81.1667,187.5 79.5,187.5C 77.6309,186.835 75.6309,186.169 73.5,185.5C 74.9938,183.426 76.3271,181.26 77.5,179C 82.8229,178.501 88.1563,178.334 93.5,178.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f6771\",\n    d: \"M 233.5,196.5 C 230.974,197.657 228.307,197.657 225.5,196.5C 226.334,195.252 227.667,194.585 229.5,194.5C 231.333,194.585 232.666,195.252 233.5,196.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#788b93\",\n    d: \"M 399.5,186.5 C 399.5,189.5 399.5,192.5 399.5,195.5C 391.908,196.241 384.242,196.241 376.5,195.5C 376.5,194.5 376.5,193.5 376.5,192.5C 382.176,192.666 387.843,192.499 393.5,192C 393.957,191.586 394.291,191.086 394.5,190.5C 392.922,189.702 391.256,189.202 389.5,189C 388.167,188.333 388.167,187.667 389.5,187C 392.817,186.502 396.15,186.335 399.5,186.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a4b6bb\",\n    d: \"M 124.5,192.5 C 114.992,193.167 105.325,193.833 95.5,194.5C 94.3881,195.265 93.7214,196.265 93.5,197.5C 88.7027,197.879 84.036,197.379 79.5,196C 85.251,196.396 90.251,194.896 94.5,191.5C 104.447,192.475 114.447,192.808 124.5,192.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#444b51\",\n    d: \"M 166.5,198.5 C 165.833,198.833 165.167,199.167 164.5,199.5C 162.901,199.768 161.568,199.434 160.5,198.5C 161.844,196.965 163.511,195.632 165.5,194.5C 166.429,195.689 166.762,197.022 166.5,198.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#ced8da\",\n    d: \"M 148.5,199.5 C 140.821,200.047 133.154,200.713 125.5,201.5C 125.5,200.5 125.5,199.5 125.5,198.5C 122.482,198.665 119.482,198.498 116.5,198C 117.833,197 117.833,196 116.5,195C 119.179,194.566 121.846,194.732 124.5,195.5C 126.072,194.132 128.405,193.132 131.5,192.5C 136.892,192.197 142.225,191.531 147.5,190.5C 148.484,193.428 148.817,196.428 148.5,199.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#677278\",\n    d: \"M 69.5,194.5 C 64.2438,194.989 59.5771,196.989 55.5,200.5C 58.0119,201.795 60.6786,202.461 63.5,202.5C 63.5,201.5 63.5,200.5 63.5,199.5C 70.5293,199.623 77.5293,199.29 84.5,198.5C 84.5,198.833 84.5,199.167 84.5,199.5C 81.075,199.367 80.7417,200.033 83.5,201.5C 74.3958,202.532 74.3958,203.532 83.5,204.5C 76.8333,204.5 70.1667,204.5 63.5,204.5C 60.8333,204.167 58.1667,203.833 55.5,203.5C 49.6535,202.833 43.6535,202.167 37.5,201.5C 39.3043,200.232 41.3043,199.565 43.5,199.5C 44.9778,199.762 46.3112,199.429 47.5,198.5C 46.9747,197.808 46.3081,197.308 45.5,197C 48.0217,196.501 50.5217,196.668 53,197.5C 58.1155,194.861 63.6155,193.861 69.5,194.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e6063\",\n    d: \"M 84.5,199.5 C 84.5,199.167 84.5,198.833 84.5,198.5C 89.1667,198.5 93.8333,198.5 98.5,198.5C 98.5,199.5 98.5,200.5 98.5,201.5C 97.1667,201.5 95.8333,201.5 94.5,201.5C 91.6627,199.598 88.3293,198.931 84.5,199.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#93a6ac\",\n    d: \"M 376.5,192.5 C 376.5,193.5 376.5,194.5 376.5,195.5C 384.242,196.241 391.908,196.241 399.5,195.5C 399.5,197.167 399.5,198.833 399.5,200.5C 394.456,200.173 389.456,200.506 384.5,201.5C 385.824,202.935 387.49,203.935 389.5,204.5C 383.193,205.331 376.859,205.831 370.5,206C 370.167,206.333 369.833,206.667 369.5,207C 375.3,209.151 381.3,209.984 387.5,209.5C 388.69,211.826 390.69,212.993 393.5,213C 390.32,214.692 387.153,214.526 384,212.5C 382.833,212.667 381.667,212.833 380.5,213C 381.579,215.043 383.246,216.376 385.5,217C 383.336,217.914 381.336,219.081 379.5,220.5C 379.08,218.674 379.08,216.674 379.5,214.5C 376.833,214.5 374.167,214.5 371.5,214.5C 370.167,214.5 368.833,214.5 367.5,214.5C 367.5,214.167 367.5,213.833 367.5,213.5C 373.767,213.191 373.6,212.191 367,210.5C 367.43,208.873 367.596,207.373 367.5,206C 357.833,205.667 348.167,205.333 338.5,205C 341.5,204.667 344.5,204.333 347.5,204C 348.056,203.617 348.389,203.117 348.5,202.5C 349.209,201.596 350.209,201.263 351.5,201.5C 355.982,200.674 360.649,200.174 365.5,200C 361.952,198.897 362.285,197.73 366.5,196.5C 371.163,197.836 375.829,198.17 380.5,197.5C 376.321,196.538 372.321,195.204 368.5,193.5C 371.086,192.52 373.753,192.187 376.5,192.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#334348\",\n    d: \"M 84.5,199.5 C 88.3293,198.931 91.6627,199.598 94.5,201.5C 90.8333,201.5 87.1667,201.5 83.5,201.5C 80.7417,200.033 81.075,199.367 84.5,199.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#434b50\",\n    d: \"M 149.5,189.5 C 150.167,189.5 150.5,189.833 150.5,190.5C 150.372,194.881 150.705,199.215 151.5,203.5C 148.52,204.829 147.187,207.163 147.5,210.5C 146.522,210.189 145.855,209.522 145.5,208.5C 146.18,207.14 146.847,205.807 147.5,204.5C 148.167,204.5 148.5,204.167 148.5,203.5C 149.486,199.03 149.819,194.363 149.5,189.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#181e28\",\n    d: \"M 237.5,195.5 C 239.009,198.746 241.343,200.079 244.5,199.5C 244.5,200.167 244.5,200.833 244.5,201.5C 242.914,202.413 241.414,202.413 240,201.5C 238.693,206.005 238.193,210.505 238.5,215C 236.199,214.813 235.865,213.646 237.5,211.5C 236.398,210.824 235.398,210.158 234.5,209.5C 235.5,209.5 236.5,209.5 237.5,209.5C 237.5,207.833 237.5,206.167 237.5,204.5C 236.5,204.5 235.5,204.5 234.5,204.5C 234.5,203.167 234.5,201.833 234.5,200.5C 233.5,200.5 232.5,200.5 231.5,200.5C 229.63,199.044 227.63,197.711 225.5,196.5C 228.307,197.657 230.974,197.657 233.5,196.5C 234.472,194.507 235.805,194.174 237.5,195.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b222a\",\n    d: \"M -0.5,200.5 C 6.07225,200.239 12.4056,200.906 18.5,202.5C 12.3554,203.49 6.02207,203.823 -0.5,203.5C -0.5,202.5 -0.5,201.5 -0.5,200.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b1bcbf\",\n    d: \"M 311.5,198.5 C 307.486,198.334 303.486,198.501 299.5,199C 301.764,199.236 303.931,199.736 306,200.5C 306.167,200.833 306.333,201.167 306.5,201.5C 305.311,202.429 303.978,202.762 302.5,202.5C 290.644,202.015 278.644,201.682 266.5,201.5C 264.167,201.5 261.833,201.5 259.5,201.5C 259.586,200.504 259.252,199.671 258.5,199C 260,198.833 261.5,198.667 263,198.5C 279.334,198.881 295.501,198.881 311.5,198.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#768589\",\n    d: \"M 351.5,201.5 C 367.458,202.521 367.458,203.521 351.5,204.5C 351.5,203.5 351.5,202.5 351.5,201.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6e767a\",\n    d: \"M 244.5,199.5 C 245.497,202.005 245.497,204.672 244.5,207.5C 243.596,206.791 243.263,205.791 243.5,204.5C 244.11,203.609 244.443,202.609 244.5,201.5C 244.5,200.833 244.5,200.167 244.5,199.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a0b0b4\",\n    d: \"M 348.5,202.5 C 348.389,203.117 348.056,203.617 347.5,204C 344.5,204.333 341.5,204.667 338.5,205C 348.167,205.333 357.833,205.667 367.5,206C 367.596,207.373 367.43,208.873 367,210.5C 373.6,212.191 373.767,213.191 367.5,213.5C 361.167,213.5 354.833,213.5 348.5,213.5C 348.957,211.253 349.957,209.253 351.5,207.5C 338.801,206.148 326.134,204.815 313.5,203.5C 313.715,205.179 313.048,206.179 311.5,206.5C 311.03,205.307 310.03,204.64 308.5,204.5C 303.49,203.332 298.49,203.332 293.5,204.5C 293.863,205.183 294.196,205.85 294.5,206.5C 294.167,206.5 293.833,206.5 293.5,206.5C 293.167,206.5 292.833,206.5 292.5,206.5C 292.047,205.542 291.381,204.708 290.5,204C 290.833,203.667 291.167,203.333 291.5,203C 295.152,202.501 298.818,202.335 302.5,202.5C 303.978,202.762 305.311,202.429 306.5,201.5C 306.333,201.167 306.167,200.833 306,200.5C 303.931,199.736 301.764,199.236 299.5,199C 303.486,198.501 307.486,198.334 311.5,198.5C 311.5,198.833 311.5,199.167 311.5,199.5C 319.95,199.635 328.283,198.968 336.5,197.5C 337.158,196.602 337.824,195.602 338.5,194.5C 344.147,195.332 349.813,196.166 355.5,197C 356.634,198.016 356.301,198.683 354.5,199C 346.806,200.4 339.139,201.733 331.5,203C 337.218,203.74 342.885,203.573 348.5,202.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#748286\",\n    d: \"M 311.5,199.5 C 316.681,200.167 322.015,200.833 327.5,201.5C 321.202,202.496 314.868,202.83 308.5,202.5C 308.5,201.5 308.5,200.5 308.5,199.5C 309.5,199.5 310.5,199.5 311.5,199.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#adbcc2\",\n    d: \"M 361.5,188.5 C 368.841,188.334 376.174,188.5 383.5,189C 384.308,189.308 384.975,189.808 385.5,190.5C 382.358,191.167 379.358,191.834 376.5,192.5C 373.753,192.187 371.086,192.52 368.5,193.5C 372.321,195.204 376.321,196.538 380.5,197.5C 375.829,198.17 371.163,197.836 366.5,196.5C 362.285,197.73 361.952,198.897 365.5,200C 360.649,200.174 355.982,200.674 351.5,201.5C 350.209,201.263 349.209,201.596 348.5,202.5C 342.885,203.573 337.218,203.74 331.5,203C 339.139,201.733 346.806,200.4 354.5,199C 356.301,198.683 356.634,198.016 355.5,197C 349.813,196.166 344.147,195.332 338.5,194.5C 337.824,195.602 337.158,196.602 336.5,197.5C 336.461,196.417 336.127,195.417 335.5,194.5C 336,194.167 336.5,193.833 337,193.5C 341.171,192.923 345.338,192.256 349.5,191.5C 338.341,190.833 327.341,190.167 316.5,189.5C 317.5,189.5 318.5,189.5 319.5,189.5C 323.833,189.5 328.167,189.5 332.5,189.5C 342.127,188.579 351.794,188.245 361.5,188.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#778689\",\n    d: \"M 98.5,198.5 C 101.279,199.889 104.279,200.722 107.5,201C 107.47,202.429 107.803,203.929 108.5,205.5C 104.839,205.71 101.339,205.044 98,203.5C 93.2052,204.358 88.3719,204.691 83.5,204.5C 74.3958,203.532 74.3958,202.532 83.5,201.5C 87.1667,201.5 90.8333,201.5 94.5,201.5C 95.8333,201.5 97.1667,201.5 98.5,201.5C 98.5,200.5 98.5,199.5 98.5,198.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#707f7f\",\n    d: \"M 311.5,206.5 C 305.833,206.5 300.167,206.5 294.5,206.5C 294.196,205.85 293.863,205.183 293.5,204.5C 298.49,203.332 303.49,203.332 308.5,204.5C 310.03,204.64 311.03,205.307 311.5,206.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#59686b\",\n    d: \"M 108.5,205.5 C 108.5,205.833 108.5,206.167 108.5,206.5C 105.449,206.364 102.449,206.698 99.5,207.5C 98.2867,207.747 97.62,208.414 97.5,209.5C 96.0047,209.585 95.0047,208.919 94.5,207.5C 89.544,206.506 84.544,206.173 79.5,206.5C 80.8333,205.833 82.1667,205.167 83.5,204.5C 88.3719,204.691 93.2052,204.358 98,203.5C 101.339,205.044 104.839,205.71 108.5,205.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bac6c9\",\n    d: \"M 124.5,192.5 C 125.5,192.5 126.5,192.5 127.5,192.5C 128.833,192.5 130.167,192.5 131.5,192.5C 128.405,193.132 126.072,194.132 124.5,195.5C 121.846,194.732 119.179,194.566 116.5,195C 117.833,196 117.833,197 116.5,198C 119.482,198.498 122.482,198.665 125.5,198.5C 125.5,199.5 125.5,200.5 125.5,201.5C 133.154,200.713 140.821,200.047 148.5,199.5C 148.5,200.833 148.5,202.167 148.5,203.5C 148.5,204.167 148.167,204.5 147.5,204.5C 146.847,205.807 146.18,207.14 145.5,208.5C 145.855,209.522 146.522,210.189 147.5,210.5C 147.833,211.167 148.167,211.833 148.5,212.5C 149.568,213.434 150.901,213.768 152.5,213.5C 152.5,214.5 152.5,215.5 152.5,216.5C 151.167,216.5 150.5,217.167 150.5,218.5C 143.584,218.688 136.751,218.021 130,216.5C 129.167,216.667 128.333,216.833 127.5,217C 129.119,217.236 130.119,218.069 130.5,219.5C 126.154,219.666 121.821,219.499 117.5,219C 120.583,217.128 123.916,215.795 127.5,215C 128.047,214.075 128.713,213.242 129.5,212.5C 133.288,214.256 137.288,214.922 141.5,214.5C 141.5,213.5 141.5,212.5 141.5,211.5C 133.471,211.656 125.471,211.323 117.5,210.5C 117.5,209.5 117.5,208.5 117.5,207.5C 116.5,207.5 115.5,207.5 114.5,207.5C 114.5,206.833 114.167,206.5 113.5,206.5C 112.282,205.839 110.949,205.172 109.5,204.5C 113.474,203.9 117.141,202.567 120.5,200.5C 118.257,199.526 115.924,199.192 113.5,199.5C 113.5,198.5 113.5,197.5 113.5,196.5C 106.857,197.212 100.191,197.546 93.5,197.5C 93.7214,196.265 94.3881,195.265 95.5,194.5C 105.325,193.833 114.992,193.167 124.5,192.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#151922\",\n    d: \"M 160.5,198.5 C 161.568,199.434 162.901,199.768 164.5,199.5C 162.592,201.967 160.259,203.967 157.5,205.5C 155.599,206.935 155.266,208.602 156.5,210.5C 155.757,211.182 155.091,211.849 154.5,212.5C 152.5,212.5 150.5,212.5 148.5,212.5C 148.167,211.833 147.833,211.167 147.5,210.5C 147.187,207.163 148.52,204.829 151.5,203.5C 153.589,203.143 155.589,202.477 157.5,201.5C 156.538,199.117 157.538,198.117 160.5,198.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3a4049\",\n    d: \"M 231.5,200.5 C 232.5,200.5 233.5,200.5 234.5,200.5C 234.5,201.833 234.5,203.167 234.5,204.5C 235.5,204.5 236.5,204.5 237.5,204.5C 237.5,206.167 237.5,207.833 237.5,209.5C 236.5,209.5 235.5,209.5 234.5,209.5C 233.85,209.196 233.183,208.863 232.5,208.5C 231.52,205.914 231.187,203.247 231.5,200.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3d4b4d\",\n    d: \"M 108.5,206.5 C 110.167,206.5 111.833,206.5 113.5,206.5C 114.167,206.5 114.5,206.833 114.5,207.5C 114.179,209.048 113.179,209.715 111.5,209.5C 106.833,209.5 102.167,209.5 97.5,209.5C 97.62,208.414 98.2867,207.747 99.5,207.5C 102.449,206.698 105.449,206.364 108.5,206.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c8d2d4\",\n    d: \"M 147.5,204.5 C 145.396,204.201 143.396,204.534 141.5,205.5C 142.325,206.386 143.325,206.719 144.5,206.5C 144.67,207.822 144.337,208.989 143.5,210C 138.167,210.667 132.833,210.667 127.5,210C 128.711,209.107 128.711,208.274 127.5,207.5C 125.29,208.982 123.624,208.482 122.5,206C 125.894,205.248 129.227,205.415 132.5,206.5C 136.248,204.917 140.082,203.584 144,202.5C 145.681,202.608 146.848,203.275 147.5,204.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#758284\",\n    d: \"M 79.5,206.5 C 84.544,206.173 89.544,206.506 94.5,207.5C 95.0047,208.919 96.0047,209.585 97.5,209.5C 102.167,209.5 106.833,209.5 111.5,209.5C 106.36,210.488 101.026,210.821 95.5,210.5C 95.5,211.833 95.5,213.167 95.5,214.5C 97.099,214.232 98.4324,214.566 99.5,215.5C 96.8127,215.664 94.146,215.497 91.5,215C 92.4158,214.722 93.0825,214.222 93.5,213.5C 93.5,211.5 92.5,210.5 90.5,210.5C 84.3208,209.833 77.9875,209.167 71.5,208.5C 73.9329,206.946 76.5995,206.28 79.5,206.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#060910\",\n    d: \"M 233.5,219.5 C 230.837,220.752 228.17,221.752 225.5,222.5C 224.833,222.5 224.167,222.5 223.5,222.5C 201.952,224.599 180.618,223.433 159.5,219C 157.627,217.296 155.96,215.463 154.5,213.5C 154.5,213.167 154.5,212.833 154.5,212.5C 155.091,211.849 155.757,211.182 156.5,210.5C 155.266,208.602 155.599,206.935 157.5,205.5C 160.259,203.967 162.592,201.967 164.5,199.5C 165.167,199.167 165.833,198.833 166.5,198.5C 167.167,198.5 167.5,198.167 167.5,197.5C 168.161,196.282 168.828,194.949 169.5,193.5C 171.384,194.693 171.884,196.359 171,198.5C 167.64,200.051 167.807,200.551 171.5,200C 172.761,196.982 174.095,197.148 175.5,200.5C 173.144,201.654 172.977,202.987 175,204.5C 180.407,203.527 185.907,203.193 191.5,203.5C 191.5,204.833 191.5,206.167 191.5,207.5C 194.167,207.5 196.833,207.5 199.5,207.5C 199.5,206.167 199.5,204.833 199.5,203.5C 202.167,203.5 204.833,203.5 207.5,203.5C 207.5,204.833 207.5,206.167 207.5,207.5C 211.547,207.695 215.547,207.362 219.5,206.5C 222.362,206.865 223.862,208.531 224,211.5C 226.499,210.202 228.833,210.536 231,212.5C 231.333,211.5 231.667,210.5 232,209.5C 232.687,211.568 232.52,213.568 231.5,215.5C 231.667,215.833 231.833,216.167 232,216.5C 234.273,212.345 235.439,212.678 235.5,217.5C 236.873,217.343 238.207,217.51 239.5,218C 237.292,218.191 235.292,218.691 233.5,219.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b4c3c7\",\n    d: \"M 348.5,213.5 C 347.5,213.5 346.5,213.5 345.5,213.5C 344.306,212.223 342.64,211.556 340.5,211.5C 338.571,211.54 336.738,211.873 335,212.5C 334.336,208.243 331.836,206.576 327.5,207.5C 322.786,207.173 318.12,207.507 313.5,208.5C 314.852,209.524 316.185,210.524 317.5,211.5C 317.083,212.124 316.416,212.457 315.5,212.5C 312.833,211.833 310.167,211.167 307.5,210.5C 295.885,211.936 284.218,212.603 272.5,212.5C 272.196,211.85 271.863,211.183 271.5,210.5C 276.709,209.461 281.876,209.794 287,211.5C 292.129,210.631 297.296,210.298 302.5,210.5C 302.5,209.5 302.5,208.5 302.5,207.5C 299.287,207.81 296.287,207.477 293.5,206.5C 293.833,206.5 294.167,206.5 294.5,206.5C 300.167,206.5 305.833,206.5 311.5,206.5C 313.048,206.179 313.715,205.179 313.5,203.5C 326.134,204.815 338.801,206.148 351.5,207.5C 349.957,209.253 348.957,211.253 348.5,213.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#829096\",\n    d: \"M 327.5,207.5 C 329.386,208.065 331.053,209.065 332.5,210.5C 327.544,211.494 322.544,211.827 317.5,211.5C 316.185,210.524 314.852,209.524 313.5,208.5C 318.12,207.507 322.786,207.173 327.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#434d50\",\n    d: \"M 63.5,204.5 C 70.1667,204.5 76.8333,204.5 83.5,204.5C 82.1667,205.167 80.8333,205.833 79.5,206.5C 76.5995,206.28 73.9329,206.946 71.5,208.5C 77.9875,209.167 84.3208,209.833 90.5,210.5C 92.5,210.5 93.5,211.5 93.5,213.5C 77.6466,213.911 77.6466,214.911 93.5,216.5C 92.0813,217.451 90.4147,217.784 88.5,217.5C 85.5,217.5 82.5,217.5 79.5,217.5C 76.6313,215.941 73.6313,214.274 70.5,212.5C 68.5914,213.348 66.5914,213.682 64.5,213.5C 65.1667,212.833 65.8333,212.167 66.5,211.5C 67.3764,211.631 68.0431,211.298 68.5,210.5C 66.9547,209.548 65.288,209.215 63.5,209.5C 63.5,207.833 63.5,206.167 63.5,204.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f6d72\",\n    d: \"M 317.5,208.5 C 320.572,208.183 323.572,208.516 326.5,209.5C 325,209.833 323.5,210.167 322,210.5C 320.014,210.431 318.514,209.765 317.5,208.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6f8289\",\n    d: \"M 399.5,200.5 C 399.5,202.833 399.5,205.167 399.5,207.5C 395.818,207.335 392.152,207.501 388.5,208C 387.944,208.383 387.611,208.883 387.5,209.5C 381.3,209.984 375.3,209.151 369.5,207C 369.833,206.667 370.167,206.333 370.5,206C 376.859,205.831 383.193,205.331 389.5,204.5C 387.49,203.935 385.824,202.935 384.5,201.5C 389.456,200.506 394.456,200.173 399.5,200.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c6d5d6\",\n    d: \"M 292.5,206.5 C 292.833,206.5 293.167,206.5 293.5,206.5C 296.287,207.477 299.287,207.81 302.5,207.5C 302.5,208.5 302.5,209.5 302.5,210.5C 297.296,210.298 292.129,210.631 287,211.5C 281.876,209.794 276.709,209.461 271.5,210.5C 271.863,211.183 272.196,211.85 272.5,212.5C 271.167,212.5 269.833,212.5 268.5,212.5C 266.824,211.817 266.157,210.483 266.5,208.5C 271.695,208.821 276.695,208.487 281.5,207.5C 282.167,207.5 282.833,207.5 283.5,207.5C 286.391,206.597 289.391,206.264 292.5,206.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#23282e\",\n    d: \"M 15.5,207.5 C 15.4357,209.975 15.6023,212.641 16,215.5C 11.9341,214.536 7.76746,214.203 3.5,214.5C 2.16667,214.5 0.833333,214.5 -0.5,214.5C -0.5,212.833 -0.5,211.167 -0.5,209.5C 4.57582,210.593 9.57582,210.426 14.5,209C 15.056,208.617 15.3893,208.117 15.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f676a\",\n    d: \"M 63.5,209.5 C 65.288,209.215 66.9547,209.548 68.5,210.5C 68.0431,211.298 67.3764,211.631 66.5,211.5C 64.712,211.785 63.0453,211.452 61.5,210.5C 61.9569,209.702 62.6236,209.369 63.5,209.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#253133\",\n    d: \"M 90.5,210.5 C 86.1116,212.368 81.2783,213.368 76,213.5C 74.0448,213.359 72.5448,212.526 71.5,211C 77.8246,210.5 84.1579,210.334 90.5,210.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#242b31\",\n    d: \"M 243.5,204.5 C 243.263,205.791 243.596,206.791 244.5,207.5C 245.2,211.798 245.533,216.131 245.5,220.5C 245.167,220.5 244.833,220.5 244.5,220.5C 244.5,217.833 244.5,215.167 244.5,212.5C 243.325,212.719 242.325,212.386 241.5,211.5C 242.441,211.511 243.108,211.011 243.5,210C 242.34,208.003 242.34,206.169 243.5,204.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3b4045\",\n    d: \"M 32.5,198.5 C 34.256,199.552 34.9227,201.219 34.5,203.5C 37.5,203.5 40.5,203.5 43.5,203.5C 38.0644,203.906 32.7311,205.072 27.5,207C 28.1079,207.87 28.9412,208.37 30,208.5C 34.1114,207.596 38.278,207.263 42.5,207.5C 42.5,208.5 42.5,209.5 42.5,210.5C 46.9495,210.579 51.2829,209.912 55.5,208.5C 53.5,207.833 51.5,207.167 49.5,206.5C 50.6243,205.141 51.9577,204.141 53.5,203.5C 54.1667,203.5 54.8333,203.5 55.5,203.5C 58.1667,203.833 60.8333,204.167 63.5,204.5C 63.5,206.167 63.5,207.833 63.5,209.5C 62.6236,209.369 61.9569,209.702 61.5,210.5C 63.0453,211.452 64.712,211.785 66.5,211.5C 65.8333,212.167 65.1667,212.833 64.5,213.5C 65.9757,215.23 65.6424,216.563 63.5,217.5C 59.0013,214.613 54.0013,213.78 48.5,215C 48.0037,216.996 47.0037,218.663 45.5,220C 51.1569,220.499 56.8236,220.666 62.5,220.5C 49.6127,221.619 36.6127,222.952 23.5,224.5C 21.4357,224.687 19.4357,225.187 17.5,226C 14.193,227.997 10.8597,229.997 7.5,232C 11.1568,231.892 14.8235,231.892 18.5,232C 16.9991,233.252 15.3325,234.252 13.5,235C 8.8262,235.333 4.15953,235.167 -0.5,234.5C -0.5,233.833 -0.5,233.167 -0.5,232.5C 1.04814,232.179 1.71481,231.179 1.5,229.5C 6.03796,227.864 10.7046,226.531 15.5,225.5C 15.9863,223.193 15.9863,221.027 15.5,219C 21.8333,218.667 28.1667,218.333 34.5,218C 36.1012,217.727 37.6012,217.227 39,216.5C 38.0435,214.806 36.8768,212.973 35.5,211C 31.4724,210.608 27.4724,210.108 23.5,209.5C 23.5,208.5 23.5,207.5 23.5,206.5C 20.6146,206.194 17.9479,206.527 15.5,207.5C 15.3893,208.117 15.056,208.617 14.5,209C 9.57582,210.426 4.57582,210.593 -0.5,209.5C -0.5,207.5 -0.5,205.5 -0.5,203.5C 6.02207,203.823 12.3554,203.49 18.5,202.5C 23.1667,202.5 27.8333,202.5 32.5,202.5C 32.5,201.167 32.5,199.833 32.5,198.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#272d32\",\n    d: \"M 43.5,203.5 C 46.8333,203.5 50.1667,203.5 53.5,203.5C 51.9577,204.141 50.6243,205.141 49.5,206.5C 51.5,207.167 53.5,207.833 55.5,208.5C 51.2829,209.912 46.9495,210.579 42.5,210.5C 42.5,209.5 42.5,208.5 42.5,207.5C 38.278,207.263 34.1114,207.596 30,208.5C 28.9412,208.37 28.1079,207.87 27.5,207C 32.7311,205.072 38.0644,203.906 43.5,203.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a0aeb3\",\n    d: \"M 327.5,207.5 C 331.836,206.576 334.336,208.243 335,212.5C 336.738,211.873 338.571,211.54 340.5,211.5C 342.64,211.556 344.306,212.223 345.5,213.5C 335.555,213.209 325.555,213.209 315.5,213.5C 315.737,214.791 315.404,215.791 314.5,216.5C 314.586,215.504 314.252,214.671 313.5,214C 307.804,213.17 302.137,213.337 296.5,214.5C 297.949,215.172 299.282,215.839 300.5,216.5C 296.436,214.653 292.102,213.653 287.5,213.5C 284.833,213.5 282.167,213.5 279.5,213.5C 276.15,213.335 272.817,213.502 269.5,214C 268.748,214.671 268.414,215.504 268.5,216.5C 268.167,216.5 267.833,216.5 267.5,216.5C 266.957,216.44 266.624,216.107 266.5,215.5C 267.193,214.482 267.859,213.482 268.5,212.5C 269.833,212.5 271.167,212.5 272.5,212.5C 284.218,212.603 295.885,211.936 307.5,210.5C 310.167,211.167 312.833,211.833 315.5,212.5C 316.416,212.457 317.083,212.124 317.5,211.5C 322.544,211.827 327.544,211.494 332.5,210.5C 331.053,209.065 329.386,208.065 327.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9daaaf\",\n    d: \"M 114.5,207.5 C 115.5,207.5 116.5,207.5 117.5,207.5C 117.5,208.5 117.5,209.5 117.5,210.5C 125.471,211.323 133.471,211.656 141.5,211.5C 141.5,212.5 141.5,213.5 141.5,214.5C 137.288,214.922 133.288,214.256 129.5,212.5C 128.713,213.242 128.047,214.075 127.5,215C 123.916,215.795 120.583,217.128 117.5,219C 121.821,219.499 126.154,219.666 130.5,219.5C 123.326,220.269 115.993,220.936 108.5,221.5C 106.97,221.36 105.97,220.693 105.5,219.5C 105.5,218.5 105.5,217.5 105.5,216.5C 103.5,216.167 101.5,215.833 99.5,215.5C 98.4324,214.566 97.099,214.232 95.5,214.5C 95.5,213.167 95.5,211.833 95.5,210.5C 101.026,210.821 106.36,210.488 111.5,209.5C 113.179,209.715 114.179,209.048 114.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#81888e\",\n    d: \"M 244.5,207.5 C 245.345,208.671 246.011,210.005 246.5,211.5C 246.81,214.713 246.477,217.713 245.5,220.5C 245.533,216.131 245.2,211.798 244.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#51555d\",\n    d: \"M 148.5,212.5 C 150.5,212.5 152.5,212.5 154.5,212.5C 154.5,212.833 154.5,213.167 154.5,213.5C 154.573,215.027 153.906,216.027 152.5,216.5C 152.5,215.5 152.5,214.5 152.5,213.5C 150.901,213.768 149.568,213.434 148.5,212.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c575c\",\n    d: \"M 279.5,213.5 C 282.167,213.5 284.833,213.5 287.5,213.5C 287.842,214.338 288.508,214.672 289.5,214.5C 287.603,215.805 285.269,216.471 282.5,216.5C 280.167,216.167 277.833,215.833 275.5,215.5C 276.949,214.828 278.282,214.161 279.5,213.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5b686f\",\n    d: \"M 367.5,214.5 C 368.833,214.5 370.167,214.5 371.5,214.5C 371.611,215.117 371.944,215.617 372.5,216C 370.866,216.494 369.199,216.66 367.5,216.5C 362.26,216.094 357.26,216.76 352.5,218.5C 347.167,218.5 341.833,218.5 336.5,218.5C 336.5,217.5 336.5,216.5 336.5,215.5C 338.5,215.5 340.5,215.5 342.5,215.5C 350.809,214.712 359.142,214.379 367.5,214.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3c4147\",\n    d: \"M -0.5,214.5 C 0.833333,214.5 2.16667,214.5 3.5,214.5C 6.68934,215.166 10.0227,215.833 13.5,216.5C 13.3333,216.833 13.1667,217.167 13,217.5C 8.70625,219.248 4.20625,219.915 -0.5,219.5C -0.5,217.833 -0.5,216.167 -0.5,214.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#657278\",\n    d: \"M 93.5,213.5 C 93.0825,214.222 92.4158,214.722 91.5,215C 94.146,215.497 96.8127,215.664 99.5,215.5C 101.5,215.833 103.5,216.167 105.5,216.5C 105.5,217.5 105.5,218.5 105.5,219.5C 101.6,220.43 97.6002,220.763 93.5,220.5C 106.502,218.838 106.502,217.505 93.5,216.5C 77.6466,214.911 77.6466,213.911 93.5,213.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c3137\",\n    d: \"M 15.5,207.5 C 17.9479,206.527 20.6146,206.194 23.5,206.5C 23.5,207.5 23.5,208.5 23.5,209.5C 27.4724,210.108 31.4724,210.608 35.5,211C 36.8768,212.973 38.0435,214.806 39,216.5C 37.6012,217.227 36.1012,217.727 34.5,218C 28.1667,218.333 21.8333,218.667 15.5,219C 15.9863,221.027 15.9863,223.193 15.5,225.5C 10.7046,226.531 6.03796,227.864 1.5,229.5C 1.71481,231.179 1.04814,232.179 -0.5,232.5C -0.5,228.167 -0.5,223.833 -0.5,219.5C 4.20625,219.915 8.70625,219.248 13,217.5C 13.1667,217.167 13.3333,216.833 13.5,216.5C 10.0227,215.833 6.68934,215.166 3.5,214.5C 7.76746,214.203 11.9341,214.536 16,215.5C 15.6023,212.641 15.4357,209.975 15.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#657075\",\n    d: \"M 279.5,213.5 C 278.282,214.161 276.949,214.828 275.5,215.5C 277.833,215.833 280.167,216.167 282.5,216.5C 285.269,216.471 287.603,215.805 289.5,214.5C 291.346,214.222 292.68,214.889 293.5,216.5C 287.202,217.496 280.868,217.83 274.5,217.5C 272.735,216.539 270.735,216.205 268.5,216.5C 268.414,215.504 268.748,214.671 269.5,214C 272.817,213.502 276.15,213.335 279.5,213.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#69767c\",\n    d: \"M 342.5,215.5 C 340.5,215.5 338.5,215.5 336.5,215.5C 336.5,216.5 336.5,217.5 336.5,218.5C 334.886,220.075 332.886,220.741 330.5,220.5C 330.768,218.901 330.434,217.568 329.5,216.5C 328.022,216.762 326.689,216.429 325.5,215.5C 331.32,214.184 336.987,214.184 342.5,215.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#82939a\",\n    d: \"M 399.5,207.5 C 399.5,210.833 399.5,214.167 399.5,217.5C 396.934,217.656 394.434,217.322 392,216.5C 391.5,216.833 391,217.167 390.5,217.5C 391.356,220.479 390.023,221.812 386.5,221.5C 381.661,221.778 376.994,221.112 372.5,219.5C 370.011,219.702 367.677,219.202 365.5,218C 366.416,217.722 367.082,217.222 367.5,216.5C 369.199,216.66 370.866,216.494 372.5,216C 371.944,215.617 371.611,215.117 371.5,214.5C 374.167,214.5 376.833,214.5 379.5,214.5C 379.08,216.674 379.08,218.674 379.5,220.5C 381.336,219.081 383.336,217.914 385.5,217C 383.246,216.376 381.579,215.043 380.5,213C 381.667,212.833 382.833,212.667 384,212.5C 387.153,214.526 390.32,214.692 393.5,213C 390.69,212.993 388.69,211.826 387.5,209.5C 387.611,208.883 387.944,208.383 388.5,208C 392.152,207.501 395.818,207.335 399.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d2a30\",\n    d: \"M 93.5,216.5 C 106.502,217.505 106.502,218.838 93.5,220.5C 92.1667,220.5 90.8333,220.5 89.5,220.5C 86.4281,220.817 83.4281,220.484 80.5,219.5C 83.3056,218.832 85.9723,218.166 88.5,217.5C 90.4147,217.784 92.0813,217.451 93.5,216.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#595e65\",\n    d: \"M 79.5,217.5 C 76.658,219.017 73.658,220.017 70.5,220.5C 67.8333,220.5 65.1667,220.5 62.5,220.5C 56.8236,220.666 51.1569,220.499 45.5,220C 47.0037,218.663 48.0037,216.996 48.5,215C 54.0013,213.78 59.0013,214.613 63.5,217.5C 65.6424,216.563 65.9757,215.23 64.5,213.5C 66.5914,213.682 68.5914,213.348 70.5,212.5C 73.6313,214.274 76.6313,215.941 79.5,217.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#808c93\",\n    d: \"M 329.5,216.5 C 330.434,217.568 330.768,218.901 330.5,220.5C 332.886,220.741 334.886,220.075 336.5,218.5C 341.833,218.5 347.167,218.5 352.5,218.5C 356.353,219.166 360.353,219.833 364.5,220.5C 364.167,221.167 363.833,221.833 363.5,222.5C 364.949,223.172 366.282,223.839 367.5,224.5C 363.818,224.665 360.152,224.499 356.5,224C 357.337,222.989 357.67,221.822 357.5,220.5C 351.48,219.587 345.48,219.587 339.5,220.5C 342.704,221.204 345.871,221.87 349,222.5C 349.239,224.725 348.405,225.058 346.5,223.5C 345.378,224.63 344.044,225.297 342.5,225.5C 342.167,225.5 341.833,225.5 341.5,225.5C 341.389,224.883 341.056,224.383 340.5,224C 328.211,222.576 315.878,221.743 303.5,221.5C 302.5,221.5 301.5,221.5 300.5,221.5C 299.048,220.698 297.382,220.198 295.5,220C 300.183,219.434 304.85,219.601 309.5,220.5C 313.382,220.28 317.049,219.28 320.5,217.5C 322.5,217.833 324.5,218.167 326.5,218.5C 328.03,218.36 329.03,217.693 329.5,216.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#39424b\",\n    d: \"M 79.5,217.5 C 82.5,217.5 85.5,217.5 88.5,217.5C 85.9723,218.166 83.3056,218.832 80.5,219.5C 83.4281,220.484 86.4281,220.817 89.5,220.5C 89.5,221.167 89.1667,221.5 88.5,221.5C 85.1445,221.091 82.1445,221.758 79.5,223.5C 76.3752,222.521 73.0419,222.187 69.5,222.5C 69.8333,221.833 70.1667,221.167 70.5,220.5C 73.658,220.017 76.658,219.017 79.5,217.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a7b0b7\",\n    d: \"M 150.5,218.5 C 150.158,219.338 149.492,219.672 148.5,219.5C 146.952,219.821 146.285,220.821 146.5,222.5C 144.167,222.5 141.833,222.5 139.5,222.5C 136.482,222.335 133.482,222.502 130.5,223C 131.712,224.107 131.379,224.607 129.5,224.5C 129.5,223.5 129.5,222.5 129.5,221.5C 132.119,221.768 134.619,221.435 137,220.5C 137.167,220.167 137.333,219.833 137.5,219.5C 135.141,218.286 132.808,218.286 130.5,219.5C 130.119,218.069 129.119,217.236 127.5,217C 128.333,216.833 129.167,216.667 130,216.5C 136.751,218.021 143.584,218.688 150.5,218.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b0bac2\",\n    d: \"M 267.5,216.5 C 267.833,216.5 268.167,216.5 268.5,216.5C 270.735,216.205 272.735,216.539 274.5,217.5C 283.215,218.34 291.882,219.673 300.5,221.5C 301.5,221.5 302.5,221.5 303.5,221.5C 302.498,223.011 301.831,224.678 301.5,226.5C 300.5,226.5 299.5,226.5 298.5,226.5C 298.737,227.791 298.404,228.791 297.5,229.5C 297.631,228.624 297.298,227.957 296.5,227.5C 294.56,228.095 292.56,228.428 290.5,228.5C 288.36,228.444 286.694,227.777 285.5,226.5C 288.689,225.834 292.023,225.167 295.5,224.5C 288.014,223.667 280.514,223.001 273,222.5C 270.176,222.885 267.676,223.552 265.5,224.5C 264.933,221.652 265.6,218.985 267.5,216.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8d9aa0\",\n    d: \"M 345.5,213.5 C 346.5,213.5 347.5,213.5 348.5,213.5C 354.833,213.5 361.167,213.5 367.5,213.5C 367.5,213.833 367.5,214.167 367.5,214.5C 359.142,214.379 350.809,214.712 342.5,215.5C 336.987,214.184 331.32,214.184 325.5,215.5C 326.689,216.429 328.022,216.762 329.5,216.5C 329.03,217.693 328.03,218.36 326.5,218.5C 324.5,218.167 322.5,217.833 320.5,217.5C 317.049,219.28 313.382,220.28 309.5,220.5C 304.85,219.601 300.183,219.434 295.5,220C 297.382,220.198 299.048,220.698 300.5,221.5C 291.882,219.673 283.215,218.34 274.5,217.5C 280.868,217.83 287.202,217.496 293.5,216.5C 292.68,214.889 291.346,214.222 289.5,214.5C 288.508,214.672 287.842,214.338 287.5,213.5C 292.102,213.653 296.436,214.653 300.5,216.5C 305.167,216.5 309.833,216.5 314.5,216.5C 315.404,215.791 315.737,214.791 315.5,213.5C 325.555,213.209 335.555,213.209 345.5,213.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aebec0\",\n    d: \"M 314.5,216.5 C 309.833,216.5 305.167,216.5 300.5,216.5C 299.282,215.839 297.949,215.172 296.5,214.5C 302.137,213.337 307.804,213.17 313.5,214C 314.252,214.671 314.586,215.504 314.5,216.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c3ccd0\",\n    d: \"M 266.5,201.5 C 278.644,201.682 290.644,202.015 302.5,202.5C 298.818,202.335 295.152,202.501 291.5,203C 291.167,203.333 290.833,203.667 290.5,204C 291.381,204.708 292.047,205.542 292.5,206.5C 289.391,206.264 286.391,206.597 283.5,207.5C 278.852,205.106 273.852,204.94 268.5,207C 272.821,207.499 277.154,207.666 281.5,207.5C 276.695,208.487 271.695,208.821 266.5,208.5C 266.157,210.483 266.824,211.817 268.5,212.5C 267.859,213.482 267.193,214.482 266.5,215.5C 266.624,216.107 266.957,216.44 267.5,216.5C 265.6,218.985 264.933,221.652 265.5,224.5C 259.206,224.059 253.206,225.059 247.5,227.5C 247.5,228.5 247.5,229.5 247.5,230.5C 249.5,230.5 251.5,230.5 253.5,230.5C 253.5,231.833 253.5,233.167 253.5,234.5C 251.5,234.5 249.5,234.5 247.5,234.5C 247.802,237.059 247.468,239.393 246.5,241.5C 246.247,237.96 245.581,234.627 244.5,231.5C 246.592,228.966 246.926,226.299 245.5,223.5C 245.5,222.5 245.5,221.5 245.5,220.5C 246.477,217.713 246.81,214.713 246.5,211.5C 247.479,214.625 247.813,217.958 247.5,221.5C 252.214,221.827 256.88,221.493 261.5,220.5C 259.726,219.813 258.059,218.98 256.5,218C 257.022,217.439 257.355,216.772 257.5,216C 255.621,214.003 255.288,211.836 256.5,209.5C 258.62,210.872 259.62,210.205 259.5,207.5C 257.833,207.5 256.167,207.5 254.5,207.5C 254.33,206.178 254.663,205.011 255.5,204C 258.562,203.259 261.562,203.425 264.5,204.5C 265.919,203.995 266.585,202.995 266.5,201.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9da8ac\",\n    d: \"M 283.5,207.5 C 282.833,207.5 282.167,207.5 281.5,207.5C 277.154,207.666 272.821,207.499 268.5,207C 273.852,204.94 278.852,205.106 283.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#727f87\",\n    d: \"M 367.5,216.5 C 367.082,217.222 366.416,217.722 365.5,218C 367.677,219.202 370.011,219.702 372.5,219.5C 372.389,220.117 372.056,220.617 371.5,221C 373.297,223.232 375.63,224.398 378.5,224.5C 381.77,223.945 385.104,223.778 388.5,224C 387.619,223.292 386.953,222.458 386.5,221.5C 390.023,221.812 391.356,220.479 390.5,217.5C 391,217.167 391.5,216.833 392,216.5C 394.434,217.322 396.934,217.656 399.5,217.5C 399.5,219.5 399.5,221.5 399.5,223.5C 389.573,225.008 379.573,225.675 369.5,225.5C 368.508,225.672 367.842,225.338 367.5,224.5C 366.282,223.839 364.949,223.172 363.5,222.5C 363.833,221.833 364.167,221.167 364.5,220.5C 360.353,219.833 356.353,219.166 352.5,218.5C 357.26,216.76 362.26,216.094 367.5,216.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#55646b\",\n    d: \"M 372.5,219.5 C 376.994,221.112 381.661,221.778 386.5,221.5C 386.953,222.458 387.619,223.292 388.5,224C 385.104,223.778 381.77,223.945 378.5,224.5C 375.63,224.398 373.297,223.232 371.5,221C 372.056,220.617 372.389,220.117 372.5,219.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#84919a\",\n    d: \"M 129.5,224.5 C 126.127,223.213 122.46,223.213 118.5,224.5C 112.643,223.281 106.643,223.281 100.5,224.5C 100.662,226.527 100.495,228.527 100,230.5C 95.9986,231.45 92.4986,233.283 89.5,236C 90.1476,237.44 90.4809,238.94 90.5,240.5C 89.8333,240.5 89.1667,240.5 88.5,240.5C 86.6309,239.835 84.6309,239.169 82.5,238.5C 82.8151,236.069 82.8151,233.736 82.5,231.5C 81.1667,230.833 79.8333,230.167 78.5,229.5C 80.5734,227.344 82.2401,225.011 83.5,222.5C 85.4147,222.784 87.0813,222.451 88.5,221.5C 89.1667,221.5 89.5,221.167 89.5,220.5C 90.8333,220.5 92.1667,220.5 93.5,220.5C 97.6002,220.763 101.6,220.43 105.5,219.5C 105.97,220.693 106.97,221.36 108.5,221.5C 115.993,220.936 123.326,220.269 130.5,219.5C 132.808,218.286 135.141,218.286 137.5,219.5C 137.333,219.833 137.167,220.167 137,220.5C 134.619,221.435 132.119,221.768 129.5,221.5C 129.5,222.5 129.5,223.5 129.5,224.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c1f22\",\n    d: \"M 154.5,213.5 C 155.96,215.463 157.627,217.296 159.5,219C 180.618,223.433 201.952,224.599 223.5,222.5C 211.557,222.97 199.557,223.97 187.5,225.5C 178.467,224.923 169.467,224.257 160.5,223.5C 159.817,223.863 159.15,224.196 158.5,224.5C 157.448,224.649 156.448,224.483 155.5,224C 155.347,222.791 155.014,221.625 154.5,220.5C 153.602,219.842 152.602,219.176 151.5,218.5C 151.863,217.817 152.196,217.15 152.5,216.5C 153.906,216.027 154.573,215.027 154.5,213.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#596165\",\n    d: \"M 244.5,220.5 C 244.833,220.5 245.167,220.5 245.5,220.5C 245.5,221.5 245.5,222.5 245.5,223.5C 244.952,225.626 244.285,227.626 243.5,229.5C 243.5,227.833 243.5,226.167 243.5,224.5C 242.5,224.5 241.5,224.5 240.5,224.5C 241.833,223.167 243.167,221.833 244.5,220.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1f252c\",\n    d: \"M 62.5,220.5 C 65.1667,220.5 67.8333,220.5 70.5,220.5C 70.1667,221.167 69.8333,221.833 69.5,222.5C 63.9009,223.008 58.5675,224.342 53.5,226.5C 52.735,225.34 51.735,224.34 50.5,223.5C 49.3887,224.611 48.0554,225.278 46.5,225.5C 43.535,224.588 40.535,224.588 37.5,225.5C 37.7148,227.179 37.0481,228.179 35.5,228.5C 35.1257,226.05 33.6257,225.05 31,225.5C 29.2841,225.748 27.7841,226.415 26.5,227.5C 24.7869,227.121 23.7869,226.121 23.5,224.5C 36.6127,222.952 49.6127,221.619 62.5,220.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7b868e\",\n    d: \"M 148.5,219.5 C 148.733,221.062 149.4,222.395 150.5,223.5C 150.392,228.71 149.725,233.71 148.5,238.5C 148.5,236.833 148.5,235.167 148.5,233.5C 148.67,231.152 149.003,228.818 149.5,226.5C 149.38,224.412 148.38,223.078 146.5,222.5C 146.285,220.821 146.952,219.821 148.5,219.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#464f57\",\n    d: \"M 69.5,222.5 C 73.0419,222.187 76.3752,222.521 79.5,223.5C 75.1018,223.294 70.7685,223.627 66.5,224.5C 64.9519,224.821 64.2852,225.821 64.5,227.5C 60.3893,229.576 56.056,231.243 51.5,232.5C 51.6036,230.297 52.2702,228.297 53.5,226.5C 58.5675,224.342 63.9009,223.008 69.5,222.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#272b2d\",\n    d: \"M 223.5,222.5 C 224.167,222.5 224.833,222.5 225.5,222.5C 226.5,222.5 227.5,222.5 228.5,222.5C 228.5,224.167 228.5,225.833 228.5,227.5C 224.563,227.207 220.73,227.54 217,228.5C 216.833,228.833 216.667,229.167 216.5,229.5C 217.333,229.833 218.167,230.167 219,230.5C 221.929,230.751 224.763,231.251 227.5,232C 222.44,234.158 217.44,233.991 212.5,231.5C 211.558,231.608 210.725,231.941 210,232.5C 209.328,236.03 207.162,237.363 203.5,236.5C 203.719,235.325 203.386,234.325 202.5,233.5C 200.161,234.724 197.828,234.724 195.5,233.5C 196.025,232.808 196.692,232.308 197.5,232C 195.527,231.505 193.527,231.338 191.5,231.5C 191.5,233.5 191.5,235.5 191.5,237.5C 190.5,237.5 189.5,237.5 188.5,237.5C 188.5,236.5 188.5,235.5 188.5,234.5C 187.5,234.5 186.5,234.5 185.5,234.5C 186.058,233.21 187.058,232.377 188.5,232C 186.416,231.222 184.583,230.055 183,228.5C 183.409,230.225 183.242,231.892 182.5,233.5C 180.244,232.579 179.244,230.912 179.5,228.5C 177.173,228.247 175.173,228.914 173.5,230.5C 174.5,231.167 175.5,231.833 176.5,232.5C 176.333,232.833 176.167,233.167 176,233.5C 170.267,232.526 164.767,230.86 159.5,228.5C 159.167,227.167 158.833,225.833 158.5,224.5C 159.15,224.196 159.817,223.863 160.5,223.5C 169.467,224.257 178.467,224.923 187.5,225.5C 199.557,223.97 211.557,222.97 223.5,222.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#24272c\",\n    d: \"M 244.5,220.5 C 243.167,221.833 241.833,223.167 240.5,224.5C 241.493,227.531 240.493,229.864 237.5,231.5C 235.396,231.201 233.396,231.534 231.5,232.5C 231.931,233.293 232.265,234.127 232.5,235C 231.456,236.174 230.456,237.341 229.5,238.5C 216.87,237.558 204.204,237.225 191.5,237.5C 191.5,235.5 191.5,233.5 191.5,231.5C 193.527,231.338 195.527,231.505 197.5,232C 196.692,232.308 196.025,232.808 195.5,233.5C 197.828,234.724 200.161,234.724 202.5,233.5C 203.386,234.325 203.719,235.325 203.5,236.5C 207.162,237.363 209.328,236.03 210,232.5C 210.725,231.941 211.558,231.608 212.5,231.5C 217.44,233.991 222.44,234.158 227.5,232C 224.763,231.251 221.929,230.751 219,230.5C 218.167,230.167 217.333,229.833 216.5,229.5C 216.667,229.167 216.833,228.833 217,228.5C 220.73,227.54 224.563,227.207 228.5,227.5C 228.5,225.833 228.5,224.167 228.5,222.5C 227.5,222.5 226.5,222.5 225.5,222.5C 228.17,221.752 230.837,220.752 233.5,219.5C 236.249,219.726 238.916,219.393 241.5,218.5C 242.265,219.612 243.265,220.279 244.5,220.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5b6970\",\n    d: \"M 66.5,224.5 C 66.3893,225.117 66.056,225.617 65.5,226C 66.8333,226.333 68.1667,226.667 69.5,227C 67.3813,229.218 67.048,231.718 68.5,234.5C 69.1667,233.167 69.8333,231.833 70.5,230.5C 71.259,232.262 72.259,234.262 73.5,236.5C 70.1501,236.665 66.8168,236.498 63.5,236C 64.2524,235.329 64.5858,234.496 64.5,233.5C 64.3893,232.883 64.056,232.383 63.5,232C 64.624,231.751 65.624,231.251 66.5,230.5C 61.6117,228.422 59.945,229.755 61.5,234.5C 58.4682,234.505 55.4682,234.838 52.5,235.5C 49.7614,235.453 49.0947,234.453 50.5,232.5C 50.8333,232.5 51.1667,232.5 51.5,232.5C 56.056,231.243 60.3893,229.576 64.5,227.5C 64.2852,225.821 64.9519,224.821 66.5,224.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3c474b\",\n    d: \"M 240.5,224.5 C 241.5,224.5 242.5,224.5 243.5,224.5C 243.5,226.167 243.5,227.833 243.5,229.5C 240.436,230.975 238.436,233.308 237.5,236.5C 237.5,234.833 237.5,233.167 237.5,231.5C 240.493,229.864 241.493,227.531 240.5,224.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#97a5ad\",\n    d: \"M 367.5,224.5 C 367.842,225.338 368.508,225.672 369.5,225.5C 371.455,226.447 371.789,227.781 370.5,229.5C 372.489,230.615 374.322,230.282 376,228.5C 381.162,228.159 383.328,230.493 382.5,235.5C 377.18,234.761 371.846,234.094 366.5,233.5C 366.5,233.167 366.5,232.833 366.5,232.5C 361.137,232.167 355.637,231.834 350,231.5C 348.355,233.735 349.188,234.735 352.5,234.5C 352.833,235.167 353.167,235.833 353.5,236.5C 349.833,236.5 346.167,236.5 342.5,236.5C 340.727,235.686 340.227,234.352 341,232.5C 342.825,231.897 344.659,231.23 346.5,230.5C 345.143,228.814 343.81,227.148 342.5,225.5C 344.044,225.297 345.378,224.63 346.5,223.5C 348.405,225.058 349.239,224.725 349,222.5C 345.871,221.87 342.704,221.204 339.5,220.5C 345.48,219.587 351.48,219.587 357.5,220.5C 357.67,221.822 357.337,222.989 356.5,224C 360.152,224.499 363.818,224.665 367.5,224.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#84959e\",\n    d: \"M 399.5,223.5 C 399.5,229.167 399.5,234.833 399.5,240.5C 397.716,239.044 395.716,238.044 393.5,237.5C 393.719,236.325 393.386,235.325 392.5,234.5C 390.591,233.652 388.591,233.318 386.5,233.5C 386.986,236.711 387.986,239.711 389.5,242.5C 390.791,242.263 391.791,242.596 392.5,243.5C 390.833,243.5 389.167,243.5 387.5,243.5C 387.715,241.821 387.048,240.821 385.5,240.5C 384.167,240.5 382.833,240.5 381.5,240.5C 381.5,239.5 381.5,238.5 381.5,237.5C 372.327,238.551 363.327,238.218 354.5,236.5C 358.915,236.695 363.249,236.195 367.5,235C 366.944,234.617 366.611,234.117 366.5,233.5C 371.846,234.094 377.18,234.761 382.5,235.5C 383.328,230.493 381.162,228.159 376,228.5C 374.322,230.282 372.489,230.615 370.5,229.5C 371.789,227.781 371.455,226.447 369.5,225.5C 379.573,225.675 389.573,225.008 399.5,223.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b3136\",\n    d: \"M 53.5,226.5 C 52.2702,228.297 51.6036,230.297 51.5,232.5C 51.1667,232.5 50.8333,232.5 50.5,232.5C 47.5049,232.294 44.8383,232.96 42.5,234.5C 41.2794,235.028 40.1127,235.695 39,236.5C 38.6667,234.833 38.3333,233.167 38,231.5C 36.583,230.922 35.7496,229.922 35.5,228.5C 37.0481,228.179 37.7148,227.179 37.5,225.5C 40.535,224.588 43.535,224.588 46.5,225.5C 48.0554,225.278 49.3887,224.611 50.5,223.5C 51.735,224.34 52.735,225.34 53.5,226.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e2223\",\n    d: \"M 159.5,228.5 C 164.767,230.86 170.267,232.526 176,233.5C 176.167,233.167 176.333,232.833 176.5,232.5C 175.5,231.833 174.5,231.167 173.5,230.5C 175.173,228.914 177.173,228.247 179.5,228.5C 179.244,230.912 180.244,232.579 182.5,233.5C 183.242,231.892 183.409,230.225 183,228.5C 184.583,230.055 186.416,231.222 188.5,232C 187.058,232.377 186.058,233.21 185.5,234.5C 184.28,236.05 184.28,237.716 185.5,239.5C 180.481,239.897 175.814,238.897 171.5,236.5C 169.399,236.632 167.899,237.632 167,239.5C 165.152,236.959 162.652,235.959 159.5,236.5C 159.5,233.833 159.5,231.167 159.5,228.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#72818b\",\n    d: \"M 88.5,221.5 C 87.0813,222.451 85.4147,222.784 83.5,222.5C 82.2401,225.011 80.5734,227.344 78.5,229.5C 79.8333,230.167 81.1667,230.833 82.5,231.5C 82.8151,233.736 82.8151,236.069 82.5,238.5C 84.6309,239.169 86.6309,239.835 88.5,240.5C 86.1667,240.5 83.8333,240.5 81.5,240.5C 81.5,238.833 81.5,237.167 81.5,235.5C 79.5853,235.216 77.9187,235.549 76.5,236.5C 75.5,236.5 74.5,236.5 73.5,236.5C 72.259,234.262 71.259,232.262 70.5,230.5C 69.8333,231.833 69.1667,233.167 68.5,234.5C 67.048,231.718 67.3813,229.218 69.5,227C 68.1667,226.667 66.8333,226.333 65.5,226C 66.056,225.617 66.3893,225.117 66.5,224.5C 70.7685,223.627 75.1018,223.294 79.5,223.5C 82.1445,221.758 85.1445,221.091 88.5,221.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cad3d9\",\n    d: \"M 285.5,226.5 C 282.167,226.5 278.833,226.5 275.5,226.5C 275.261,228.467 275.594,230.301 276.5,232C 280.244,232.929 283.744,232.429 287,230.5C 288.617,231.536 288.784,232.703 287.5,234C 289.562,234.564 291.395,234.064 293,232.5C 294.28,232.613 295.113,233.28 295.5,234.5C 293.956,236.247 291.956,237.247 289.5,237.5C 284.245,236.18 278.911,235.513 273.5,235.5C 274.091,230.612 272.091,228.112 267.5,228C 268.823,228.816 269.489,229.983 269.5,231.5C 267.058,229.879 265.725,227.546 265.5,224.5C 267.676,223.552 270.176,222.885 273,222.5C 280.514,223.001 288.014,223.667 295.5,224.5C 292.023,225.167 288.689,225.834 285.5,226.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a3b0b9\",\n    d: \"M 303.5,221.5 C 315.878,221.743 328.211,222.576 340.5,224C 341.056,224.383 341.389,224.883 341.5,225.5C 334.545,224.58 327.545,223.913 320.5,223.5C 316.167,223.833 311.833,224.167 307.5,224.5C 308.418,226.839 310.084,228.339 312.5,229C 311.33,230.755 309.663,231.755 307.5,232C 314.167,232.667 320.833,232.667 327.5,232C 329.116,231.385 330.449,230.385 331.5,229C 333.403,228.226 335.07,228.56 336.5,230C 334.956,230.29 333.623,230.956 332.5,232C 334.421,232.36 336.088,233.194 337.5,234.5C 334.92,235.549 332.254,236.216 329.5,236.5C 325.5,235.167 321.5,235.167 317.5,236.5C 314.5,236.5 311.5,236.5 308.5,236.5C 303.379,234.388 298.046,232.555 292.5,231C 293.905,229.731 295.571,229.231 297.5,229.5C 298.404,228.791 298.737,227.791 298.5,226.5C 299.5,226.5 300.5,226.5 301.5,226.5C 301.831,224.678 302.498,223.011 303.5,221.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#353d45\",\n    d: \"M 152.5,216.5 C 152.196,217.15 151.863,217.817 151.5,218.5C 152.602,219.176 153.602,219.842 154.5,220.5C 153.774,227.049 153.774,233.715 154.5,240.5C 153.117,234.894 152.117,229.228 151.5,223.5C 151.167,223.5 150.833,223.5 150.5,223.5C 149.4,222.395 148.733,221.062 148.5,219.5C 149.492,219.672 150.158,219.338 150.5,218.5C 150.5,217.167 151.167,216.5 152.5,216.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8b959b\",\n    d: \"M 245.5,223.5 C 246.926,226.299 246.592,228.966 244.5,231.5C 244.635,234.417 243.968,237.084 242.5,239.5C 238.357,237.686 238.69,236.686 243.5,236.5C 243.5,234.167 243.5,231.833 243.5,229.5C 244.285,227.626 244.952,225.626 245.5,223.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#23282e\",\n    d: \"M 23.5,224.5 C 23.7869,226.121 24.7869,227.121 26.5,227.5C 27.7841,226.415 29.2841,225.748 31,225.5C 33.6257,225.05 35.1257,226.05 35.5,228.5C 33.4017,227.086 32.4017,227.752 32.5,230.5C 31.5,230.5 30.5,230.5 29.5,230.5C 29.5,232.833 29.5,235.167 29.5,237.5C 28.0695,237.421 26.7362,237.754 25.5,238.5C 23.4729,236.661 21.1396,236.161 18.5,237C 17.6634,238.011 17.33,239.178 17.5,240.5C 11.5164,241.074 5.51644,241.407 -0.5,241.5C -0.5,239.167 -0.5,236.833 -0.5,234.5C 4.15953,235.167 8.8262,235.333 13.5,235C 15.3325,234.252 16.9991,233.252 18.5,232C 14.8235,231.892 11.1568,231.892 7.5,232C 10.8597,229.997 14.193,227.997 17.5,226C 19.4357,225.187 21.4357,224.687 23.5,224.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a5b3bd\",\n    d: \"M 146.5,222.5 C 148.38,223.078 149.38,224.412 149.5,226.5C 149.003,228.818 148.67,231.152 148.5,233.5C 147.698,234.952 147.198,236.618 147,238.5C 146,239.167 145,239.833 144,240.5C 143.693,244.047 142.86,247.38 141.5,250.5C 139.859,248.797 138.859,246.63 138.5,244C 139.141,241.87 140.474,240.37 142.5,239.5C 143.474,237.257 143.808,234.924 143.5,232.5C 144.5,232.5 145.5,232.5 146.5,232.5C 146.229,230.179 146.896,228.179 148.5,226.5C 147.37,225.378 146.703,224.044 146.5,222.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7e8c95\",\n    d: \"M 366.5,232.5 C 361.778,233.881 357.111,234.548 352.5,234.5C 349.188,234.735 348.355,233.735 350,231.5C 355.637,231.834 361.137,232.167 366.5,232.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#586771\",\n    d: \"M 150.5,223.5 C 150.833,223.5 151.167,223.5 151.5,223.5C 151.41,229.011 151.076,234.344 150.5,239.5C 151.077,242.966 152.077,246.299 153.5,249.5C 149.431,251.781 149.764,253.115 154.5,253.5C 154.5,255.5 154.5,257.5 154.5,259.5C 152.845,260.93 150.845,261.764 148.5,262C 147.663,263.011 147.33,264.178 147.5,265.5C 147.167,265.5 146.833,265.5 146.5,265.5C 147.237,262.762 147.237,260.095 146.5,257.5C 147.743,255.309 148.576,252.976 149,250.5C 149.75,249.874 150.584,249.374 151.5,249C 149.75,247.681 147.75,247.181 145.5,247.5C 145.5,246.5 145.5,245.5 145.5,244.5C 147.199,244.66 148.866,244.494 150.5,244C 148.963,242.89 148.297,241.39 148.5,239.5C 148.5,239.167 148.5,238.833 148.5,238.5C 149.725,233.71 150.392,228.71 150.5,223.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7c8992\",\n    d: \"M 308.5,233.5 C 312.226,233.177 315.893,233.511 319.5,234.5C 317.667,234.833 315.833,235.167 314,235.5C 311.705,235.453 309.871,234.787 308.5,233.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#63717c\",\n    d: \"M 366.5,232.5 C 366.5,232.833 366.5,233.167 366.5,233.5C 366.611,234.117 366.944,234.617 367.5,235C 363.249,236.195 358.915,236.695 354.5,236.5C 354.167,236.5 353.833,236.5 353.5,236.5C 353.167,235.833 352.833,235.167 352.5,234.5C 357.111,234.548 361.778,233.881 366.5,232.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d565a\",\n    d: \"M 64.5,233.5 C 63.1411,234.007 62.1411,235.007 61.5,236.5C 60.2638,235.754 58.9305,235.421 57.5,235.5C 57.5,236.5 57.5,237.5 57.5,238.5C 52.1457,239.437 46.8124,239.437 41.5,238.5C 42.2458,237.264 42.5792,235.93 42.5,234.5C 44.8383,232.96 47.5049,232.294 50.5,232.5C 49.0947,234.453 49.7614,235.453 52.5,235.5C 55.4682,234.838 58.4682,234.505 61.5,234.5C 59.945,229.755 61.6117,228.422 66.5,230.5C 65.624,231.251 64.624,231.751 63.5,232C 64.056,232.383 64.3893,232.883 64.5,233.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#98a8b2\",\n    d: \"M 118.5,224.5 C 117.596,225.209 117.263,226.209 117.5,227.5C 114.104,228.198 110.771,228.198 107.5,227.5C 105.392,229.382 104.059,231.715 103.5,234.5C 106.676,235.997 109.342,235.33 111.5,232.5C 111.833,232.833 112.167,233.167 112.5,233.5C 108.535,235.798 105.202,238.798 102.5,242.5C 101.347,245.111 102.014,245.777 104.5,244.5C 104.586,245.496 104.252,246.329 103.5,247C 101.685,247.757 100.019,248.59 98.5,249.5C 96.1377,254.056 92.471,256.223 87.5,256C 91.9954,252.005 96.3287,247.838 100.5,243.5C 96.8973,242.968 93.564,241.968 90.5,240.5C 90.4809,238.94 90.1476,237.44 89.5,236C 92.4986,233.283 95.9986,231.45 100,230.5C 100.495,228.527 100.662,226.527 100.5,224.5C 106.643,223.281 112.643,223.281 118.5,224.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#abb5bc\",\n    d: \"M 244.5,231.5 C 245.581,234.627 246.247,237.96 246.5,241.5C 245.833,241.5 245.5,241.833 245.5,242.5C 245.036,250.181 244.036,257.848 242.5,265.5C 242.167,265.5 241.833,265.5 241.5,265.5C 242.268,261.025 242.934,256.525 243.5,252C 242.789,247.95 242.456,244.116 242.5,240.5C 242.5,240.167 242.5,239.833 242.5,239.5C 243.968,237.084 244.635,234.417 244.5,231.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#657883\",\n    d: \"M 399.5,240.5 C 399.5,241.5 399.5,242.5 399.5,243.5C 397.167,243.5 394.833,243.5 392.5,243.5C 391.791,242.596 390.791,242.263 389.5,242.5C 387.986,239.711 386.986,236.711 386.5,233.5C 388.591,233.318 390.591,233.652 392.5,234.5C 393.386,235.325 393.719,236.325 393.5,237.5C 395.716,238.044 397.716,239.044 399.5,240.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f6d76\",\n    d: \"M 76.5,236.5 C 77.9187,235.549 79.5853,235.216 81.5,235.5C 81.5,237.167 81.5,238.833 81.5,240.5C 83.8333,240.5 86.1667,240.5 88.5,240.5C 85.4395,244.566 81.4395,245.566 76.5,243.5C 75.5713,244.689 75.238,246.022 75.5,247.5C 71.4946,250.064 67.1613,252.064 62.5,253.5C 62.1667,253 61.8333,252.5 61.5,252C 64.0026,246.473 68.336,244.307 74.5,245.5C 74.4518,242.365 72.7852,240.698 69.5,240.5C 70.2427,239.818 70.9094,239.151 71.5,238.5C 74.2469,238.813 76.9135,238.48 79.5,237.5C 78.675,236.614 77.675,236.281 76.5,236.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c0cacf\",\n    d: \"M 285.5,226.5 C 286.694,227.777 288.36,228.444 290.5,228.5C 292.56,228.428 294.56,228.095 296.5,227.5C 297.298,227.957 297.631,228.624 297.5,229.5C 295.571,229.231 293.905,229.731 292.5,231C 298.046,232.555 303.379,234.388 308.5,236.5C 308.083,237.124 307.416,237.457 306.5,237.5C 305.5,236.833 304.5,236.167 303.5,235.5C 301.431,235.824 301.098,236.658 302.5,238C 297.511,238.499 292.511,238.666 287.5,238.5C 287.5,239.5 287.5,240.5 287.5,241.5C 285.088,241.331 282.921,241.997 281,243.5C 278.309,242.619 277.809,243.619 279.5,246.5C 276.67,246.694 274.004,247.361 271.5,248.5C 271.5,247.5 271.5,246.5 271.5,245.5C 269.901,245.232 268.568,245.566 267.5,246.5C 266.957,246.44 266.624,246.107 266.5,245.5C 268.555,244.813 270.221,243.646 271.5,242C 273.256,241.798 274.922,241.298 276.5,240.5C 275.288,238.077 273.288,237.077 270.5,237.5C 270.795,235.265 270.461,233.265 269.5,231.5C 269.489,229.983 268.823,228.816 267.5,228C 272.091,228.112 274.091,230.612 273.5,235.5C 278.911,235.513 284.245,236.18 289.5,237.5C 291.956,237.247 293.956,236.247 295.5,234.5C 295.113,233.28 294.28,232.613 293,232.5C 291.395,234.064 289.562,234.564 287.5,234C 288.784,232.703 288.617,231.536 287,230.5C 283.744,232.429 280.244,232.929 276.5,232C 275.594,230.301 275.261,228.467 275.5,226.5C 278.833,226.5 282.167,226.5 285.5,226.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9eafb8\",\n    d: \"M 342.5,236.5 C 346.167,236.5 349.833,236.5 353.5,236.5C 353.833,236.5 354.167,236.5 354.5,236.5C 363.327,238.218 372.327,238.551 381.5,237.5C 381.5,238.5 381.5,239.5 381.5,240.5C 382.833,240.5 384.167,240.5 385.5,240.5C 385.423,241.75 384.756,242.583 383.5,243C 384.5,243.333 385.5,243.667 386.5,244C 387.184,245.693 388.184,247.193 389.5,248.5C 386.843,249.259 384.177,249.926 381.5,250.5C 379.512,249.711 379.179,248.545 380.5,247C 378.942,246.79 377.609,246.29 376.5,245.5C 377.043,245.44 377.376,245.107 377.5,244.5C 374.346,241.907 370.679,240.907 366.5,241.5C 362.167,241.5 357.833,241.5 353.5,241.5C 351.883,240.962 350.216,240.629 348.5,240.5C 348.5,241.5 348.5,242.5 348.5,243.5C 350.099,243.232 351.432,243.566 352.5,244.5C 344.601,243.028 336.601,242.195 328.5,242C 328.167,241.667 327.833,241.333 327.5,241C 328.623,239.956 329.956,239.29 331.5,239C 336.5,238.667 341.5,238.333 346.5,238C 344.942,237.79 343.609,237.29 342.5,236.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#343c41\",\n    d: \"M 35.5,228.5 C 35.7496,229.922 36.583,230.922 38,231.5C 38.3333,233.167 38.6667,234.833 39,236.5C 40.1127,235.695 41.2794,235.028 42.5,234.5C 42.5792,235.93 42.2458,237.264 41.5,238.5C 46.8124,239.437 52.1457,239.437 57.5,238.5C 57.5,237.5 57.5,236.5 57.5,235.5C 58.9305,235.421 60.2638,235.754 61.5,236.5C 62.1411,235.007 63.1411,234.007 64.5,233.5C 64.5858,234.496 64.2524,235.329 63.5,236C 66.8168,236.498 70.1501,236.665 73.5,236.5C 74.5,236.5 75.5,236.5 76.5,236.5C 77.675,236.281 78.675,236.614 79.5,237.5C 76.9135,238.48 74.2469,238.813 71.5,238.5C 68.5,238.5 65.5,238.5 62.5,238.5C 62.5,239.5 62.5,240.5 62.5,241.5C 59.7111,241.239 56.8778,240.906 54,240.5C 51.8155,240.698 50.3155,241.698 49.5,243.5C 47.901,243.232 46.5676,243.566 45.5,244.5C 44.8333,244.5 44.1667,244.5 43.5,244.5C 44.2299,243.288 45.2299,242.288 46.5,241.5C 42.7613,240.782 39.0946,240.448 35.5,240.5C 34.9747,239.808 34.3081,239.308 33.5,239C 35.2909,238.585 36.6243,237.585 37.5,236C 36.0435,234.303 34.3768,232.803 32.5,231.5C 33.1532,237.192 30.4866,240.192 24.5,240.5C 24.5,241.5 24.5,242.5 24.5,243.5C 16.1667,243.5 7.83333,243.5 -0.5,243.5C -0.5,242.833 -0.5,242.167 -0.5,241.5C 5.51644,241.407 11.5164,241.074 17.5,240.5C 17.33,239.178 17.6634,238.011 18.5,237C 21.1396,236.161 23.4729,236.661 25.5,238.5C 26.7362,237.754 28.0695,237.421 29.5,237.5C 29.5,235.167 29.5,232.833 29.5,230.5C 30.5,230.5 31.5,230.5 32.5,230.5C 32.4017,227.752 33.4017,227.086 35.5,228.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#262c34\",\n    d: \"M 154.5,220.5 C 155.014,221.625 155.347,222.791 155.5,224C 156.448,224.483 157.448,224.649 158.5,224.5C 158.833,225.833 159.167,227.167 159.5,228.5C 159.5,231.167 159.5,233.833 159.5,236.5C 159.5,237.833 159.5,239.167 159.5,240.5C 162.407,240.575 165.073,241.409 167.5,243C 169.558,244.808 169.892,246.975 168.5,249.5C 165.784,249.678 163.117,250.178 160.5,251C 160.833,251.333 161.167,251.667 161.5,252C 167.912,252.901 174.246,253.068 180.5,252.5C 179.426,254.216 177.759,255.216 175.5,255.5C 172.724,253.87 169.724,253.203 166.5,253.5C 162.393,253.482 158.393,252.815 154.5,251.5C 155.313,250.186 156.313,249.019 157.5,248C 156.437,246.812 155.103,246.312 153.5,246.5C 153.833,244.5 154.167,242.5 154.5,240.5C 153.774,233.715 153.774,227.049 154.5,220.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#323a40\",\n    d: \"M 237.5,231.5 C 237.5,233.167 237.5,234.833 237.5,236.5C 237.672,238.492 237.005,240.158 235.5,241.5C 236.757,243.679 238.257,245.679 240,247.5C 240.801,250.367 240.634,253.034 239.5,255.5C 237.511,256.481 235.511,257.481 233.5,258.5C 231.065,256.721 230.065,257.387 230.5,260.5C 229.209,260.737 228.209,260.404 227.5,259.5C 229,258.412 230.333,257.079 231.5,255.5C 232.167,256.167 232.833,256.833 233.5,257.5C 234.976,255.429 236.976,254.429 239.5,254.5C 239.895,248.756 237.228,245.756 231.5,245.5C 230.791,244.596 229.791,244.263 228.5,244.5C 228.833,242.5 229.167,240.5 229.5,238.5C 230.456,237.341 231.456,236.174 232.5,235C 232.265,234.127 231.931,233.293 231.5,232.5C 233.396,231.534 235.396,231.201 237.5,231.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#232f34\",\n    d: \"M 62.5,241.5 C 65.6074,241.351 68.6074,241.851 71.5,243C 65.8284,243.445 60.1617,243.945 54.5,244.5C 52.6307,244.493 50.964,244.16 49.5,243.5C 50.3155,241.698 51.8155,240.698 54,240.5C 56.8778,240.906 59.7111,241.239 62.5,241.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#667178\",\n    d: \"M 243.5,229.5 C 243.5,231.833 243.5,234.167 243.5,236.5C 238.69,236.686 238.357,237.686 242.5,239.5C 242.5,239.833 242.5,240.167 242.5,240.5C 242.863,242.911 241.863,244.411 239.5,245C 240,245.5 240.5,246 241,246.5C 241.667,250.833 241.667,255.167 241,259.5C 240.617,260.056 240.117,260.389 239.5,260.5C 239.5,258.833 239.5,257.167 239.5,255.5C 240.634,253.034 240.801,250.367 240,247.5C 238.257,245.679 236.757,243.679 235.5,241.5C 237.005,240.158 237.672,238.492 237.5,236.5C 238.436,233.308 240.436,230.975 243.5,229.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aab8c0\",\n    d: \"M 139.5,222.5 C 141.111,224.095 143.111,225.261 145.5,226C 143.189,226.236 141.189,227.069 139.5,228.5C 138.486,227.235 136.986,226.569 135,226.5C 133.014,226.569 131.514,227.235 130.5,228.5C 126.875,226.26 122.875,225.26 118.5,225.5C 118.112,227.685 117.112,229.518 115.5,231C 115.833,231.5 116.167,232 116.5,232.5C 120.111,233.262 123.778,233.762 127.5,234C 131.769,236.791 131.436,238.791 126.5,240C 127.787,243.125 127.787,246.291 126.5,249.5C 124.241,249.784 122.574,250.784 121.5,252.5C 119.718,251.28 117.718,250.614 115.5,250.5C 115.528,248.418 114.861,246.584 113.5,245C 116.977,243.268 117.31,241.101 114.5,238.5C 116.095,236.626 115.761,235.793 113.5,236C 109.959,238.405 106.959,241.239 104.5,244.5C 102.014,245.777 101.347,245.111 102.5,242.5C 105.202,238.798 108.535,235.798 112.5,233.5C 112.167,233.167 111.833,232.833 111.5,232.5C 109.342,235.33 106.676,235.997 103.5,234.5C 104.059,231.715 105.392,229.382 107.5,227.5C 110.771,228.198 114.104,228.198 117.5,227.5C 117.263,226.209 117.596,225.209 118.5,224.5C 122.46,223.213 126.127,223.213 129.5,224.5C 131.379,224.607 131.712,224.107 130.5,223C 133.482,222.502 136.482,222.335 139.5,222.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#21242a\",\n    d: \"M 159.5,236.5 C 162.652,235.959 165.152,236.959 167,239.5C 167.899,237.632 169.399,236.632 171.5,236.5C 175.814,238.897 180.481,239.897 185.5,239.5C 185.833,239.5 186.167,239.5 186.5,239.5C 184.491,243.838 182.491,248.171 180.5,252.5C 174.246,253.068 167.912,252.901 161.5,252C 161.167,251.667 160.833,251.333 160.5,251C 163.117,250.178 165.784,249.678 168.5,249.5C 169.892,246.975 169.558,244.808 167.5,243C 165.073,241.409 162.407,240.575 159.5,240.5C 159.5,239.167 159.5,237.833 159.5,236.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#22272c\",\n    d: \"M 231.5,245.5 C 237.228,245.756 239.895,248.756 239.5,254.5C 236.976,254.429 234.976,255.429 233.5,257.5C 232.833,256.833 232.167,256.167 231.5,255.5C 230.333,257.079 229,258.412 227.5,259.5C 226.833,259.5 226.167,259.5 225.5,259.5C 224.766,258.292 224.433,256.959 224.5,255.5C 225.833,255.5 227.167,255.5 228.5,255.5C 228.912,253.027 227.912,251.694 225.5,251.5C 223.567,249.281 221.067,247.948 218,247.5C 216.831,248.009 215.998,248.842 215.5,250C 211.833,250.667 208.167,250.667 204.5,250C 206.439,249.092 207.439,247.592 207.5,245.5C 211.551,245.923 215.384,245.256 219,243.5C 220.921,245.003 223.088,245.669 225.5,245.5C 226.167,249.5 226.833,249.5 227.5,245.5C 228.833,245.5 230.167,245.5 231.5,245.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#262b30\",\n    d: \"M 43.5,244.5 C 36.8386,244.836 30.1719,245.17 23.5,245.5C 23.5,246.833 23.5,248.167 23.5,249.5C 19.9572,251.808 15.9572,252.975 11.5,253C 10.5,254 9.5,255 8.5,256C 5.63852,255.97 3.30519,256.803 1.5,258.5C 0.833333,258.5 0.166667,258.5 -0.5,258.5C -0.5,253.5 -0.5,248.5 -0.5,243.5C 7.83333,243.5 16.1667,243.5 24.5,243.5C 24.5,242.5 24.5,241.5 24.5,240.5C 30.4866,240.192 33.1532,237.192 32.5,231.5C 34.3768,232.803 36.0435,234.303 37.5,236C 36.6243,237.585 35.2909,238.585 33.5,239C 34.3081,239.308 34.9747,239.808 35.5,240.5C 39.0946,240.448 42.7613,240.782 46.5,241.5C 45.2299,242.288 44.2299,243.288 43.5,244.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#cfd8dd\",\n    d: \"M 308.5,236.5 C 311.5,236.5 314.5,236.5 317.5,236.5C 319.075,238.114 319.741,240.114 319.5,242.5C 314.418,242.666 309.751,241.666 305.5,239.5C 305.5,241.167 305.5,242.833 305.5,244.5C 303.473,244.338 301.473,244.505 299.5,245C 299.043,245.414 298.709,245.914 298.5,246.5C 301.086,247.48 303.753,247.813 306.5,247.5C 306.5,248.833 306.5,250.167 306.5,251.5C 302.958,251.187 299.625,251.521 296.5,252.5C 290.105,252.427 283.772,251.761 277.5,250.5C 278.853,249.476 279.52,248.143 279.5,246.5C 277.809,243.619 278.309,242.619 281,243.5C 282.921,241.997 285.088,241.331 287.5,241.5C 287.5,240.5 287.5,239.5 287.5,238.5C 292.511,238.666 297.511,238.499 302.5,238C 301.098,236.658 301.431,235.824 303.5,235.5C 304.5,236.167 305.5,236.833 306.5,237.5C 307.416,237.457 308.083,237.124 308.5,236.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9cadb5\",\n    d: \"M 114.5,238.5 C 117.31,241.101 116.977,243.268 113.5,245C 114.861,246.584 115.528,248.418 115.5,250.5C 117.718,250.614 119.718,251.28 121.5,252.5C 121.852,254.705 122.852,256.538 124.5,258C 120.929,260.311 118.262,259.477 116.5,255.5C 115.5,257.167 114.167,258.5 112.5,259.5C 114.396,260.466 116.396,260.799 118.5,260.5C 118.629,262.216 118.962,263.883 119.5,265.5C 116.5,265.5 113.5,265.5 110.5,265.5C 110.586,264.504 110.252,263.671 109.5,263C 107.19,262.503 104.857,262.337 102.5,262.5C 102.5,261.5 102.5,260.5 102.5,259.5C 100.058,259.646 99.3909,258.813 100.5,257C 104.006,258.113 107.672,258.446 111.5,258C 112.973,257.29 113.64,256.124 113.5,254.5C 111.516,254.383 109.85,255.05 108.5,256.5C 108.598,255.384 108.098,254.384 107,253.5C 101.498,254.593 101.165,253.593 106,250.5C 106.333,248.833 106.667,247.167 107,245.5C 109.946,243.569 112.446,241.236 114.5,238.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d7dee2\",\n    d: \"M 265.5,224.5 C 265.725,227.546 267.058,229.879 269.5,231.5C 270.461,233.265 270.795,235.265 270.5,237.5C 273.288,237.077 275.288,238.077 276.5,240.5C 274.922,241.298 273.256,241.798 271.5,242C 270.221,243.646 268.555,244.813 266.5,245.5C 266.624,246.107 266.957,246.44 267.5,246.5C 267.573,248.027 266.906,249.027 265.5,249.5C 262.881,249.232 260.381,249.565 258,250.5C 255.677,254.362 256.844,256.028 261.5,255.5C 263.087,260.077 261.587,261.41 257,259.5C 254.034,261.025 250.867,261.525 247.5,261C 247,260.5 246.5,260 246,259.5C 245.501,253.843 245.334,248.176 245.5,242.5C 245.5,241.833 245.833,241.5 246.5,241.5C 247.468,239.393 247.802,237.059 247.5,234.5C 249.5,234.5 251.5,234.5 253.5,234.5C 253.5,233.167 253.5,231.833 253.5,230.5C 251.5,230.5 249.5,230.5 247.5,230.5C 247.5,229.5 247.5,228.5 247.5,227.5C 253.206,225.059 259.206,224.059 265.5,224.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#becace\",\n    d: \"M 329.5,236.5 C 329.611,237.117 329.944,237.617 330.5,238C 324.379,239.75 322.712,243.584 325.5,249.5C 326.675,249.281 327.675,249.614 328.5,250.5C 327.209,251.527 327.209,252.527 328.5,253.5C 323.307,253.44 318.307,254.107 313.5,255.5C 311.956,255.297 310.622,254.63 309.5,253.5C 308.548,255.045 308.215,256.712 308.5,258.5C 310.564,258.687 312.564,259.187 314.5,260C 313.207,260.49 311.873,260.657 310.5,260.5C 310.5,262.167 310.5,263.833 310.5,265.5C 310.167,265.5 309.833,265.5 309.5,265.5C 308.653,261.201 307.987,256.867 307.5,252.5C 303.833,252.5 300.167,252.5 296.5,252.5C 299.625,251.521 302.958,251.187 306.5,251.5C 306.5,250.167 306.5,248.833 306.5,247.5C 303.753,247.813 301.086,247.48 298.5,246.5C 298.709,245.914 299.043,245.414 299.5,245C 301.473,244.505 303.473,244.338 305.5,244.5C 305.5,242.833 305.5,241.167 305.5,239.5C 309.751,241.666 314.418,242.666 319.5,242.5C 319.741,240.114 319.075,238.114 317.5,236.5C 321.5,235.167 325.5,235.167 329.5,236.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b4c2c9\",\n    d: \"M 341.5,225.5 C 341.833,225.5 342.167,225.5 342.5,225.5C 343.81,227.148 345.143,228.814 346.5,230.5C 344.659,231.23 342.825,231.897 341,232.5C 340.227,234.352 340.727,235.686 342.5,236.5C 343.609,237.29 344.942,237.79 346.5,238C 341.5,238.333 336.5,238.667 331.5,239C 329.956,239.29 328.623,239.956 327.5,241C 327.833,241.333 328.167,241.667 328.5,242C 336.601,242.195 344.601,243.028 352.5,244.5C 353.708,245.234 355.041,245.567 356.5,245.5C 356.286,247.144 356.62,248.644 357.5,250C 353.814,252.007 349.814,253.007 345.5,253C 350.827,253.415 355.827,254.915 360.5,257.5C 359.705,260.144 359.038,262.811 358.5,265.5C 356.167,265.5 353.833,265.5 351.5,265.5C 352.03,261.603 351.03,258.27 348.5,255.5C 341.812,254.759 335.146,254.093 328.5,253.5C 327.209,252.527 327.209,251.527 328.5,250.5C 327.675,249.614 326.675,249.281 325.5,249.5C 322.712,243.584 324.379,239.75 330.5,238C 329.944,237.617 329.611,237.117 329.5,236.5C 332.254,236.216 334.92,235.549 337.5,234.5C 336.088,233.194 334.421,232.36 332.5,232C 333.623,230.956 334.956,230.29 336.5,230C 335.07,228.56 333.403,228.226 331.5,229C 330.449,230.385 329.116,231.385 327.5,232C 320.833,232.667 314.167,232.667 307.5,232C 309.663,231.755 311.33,230.755 312.5,229C 310.084,228.339 308.418,226.839 307.5,224.5C 311.833,224.167 316.167,223.833 320.5,223.5C 327.545,223.913 334.545,224.58 341.5,225.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7e8f99\",\n    d: \"M 353.5,241.5 C 356.891,243.125 360.558,244.125 364.5,244.5C 366.604,244.799 368.604,244.466 370.5,243.5C 369.051,242.828 367.718,242.161 366.5,241.5C 370.679,240.907 374.346,241.907 377.5,244.5C 377.376,245.107 377.043,245.44 376.5,245.5C 375.127,245.343 373.793,245.51 372.5,246C 373.809,247.751 373.475,249.251 371.5,250.5C 372.243,251.182 372.909,251.849 373.5,252.5C 371.5,252.5 369.5,252.5 367.5,252.5C 367.5,253.5 367.5,254.5 367.5,255.5C 366.127,255.657 364.793,255.49 363.5,255C 364.687,253.981 365.687,252.814 366.5,251.5C 364.11,251.642 361.777,251.142 359.5,250C 358.601,248.348 357.601,246.848 356.5,245.5C 355.041,245.567 353.708,245.234 352.5,244.5C 351.432,243.566 350.099,243.232 348.5,243.5C 348.5,242.5 348.5,241.5 348.5,240.5C 350.216,240.629 351.883,240.962 353.5,241.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#98a9b3\",\n    d: \"M 364.5,244.5 C 365.952,245.302 367.618,245.802 369.5,246C 370.902,247.342 370.569,248.176 368.5,248.5C 366.462,247.366 364.462,247.366 362.5,248.5C 361.571,247.311 361.238,245.978 361.5,244.5C 362.5,244.5 363.5,244.5 364.5,244.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4f606a\",\n    d: \"M 353.5,241.5 C 357.833,241.5 362.167,241.5 366.5,241.5C 367.718,242.161 369.051,242.828 370.5,243.5C 368.604,244.466 366.604,244.799 364.5,244.5C 360.558,244.125 356.891,243.125 353.5,241.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3c4146\",\n    d: \"M 43.5,244.5 C 44.1667,244.5 44.8333,244.5 45.5,244.5C 48.0131,246.013 47.6798,247.346 44.5,248.5C 43.2888,247.726 43.2888,246.893 44.5,246C 42.5273,245.505 40.5273,245.338 38.5,245.5C 38.5,246.833 38.5,248.167 38.5,249.5C 41.8116,249.149 44.145,250.482 45.5,253.5C 38.7325,251.455 31.7325,250.955 24.5,252C 23.9535,252.925 23.2868,253.758 22.5,254.5C 15.9379,257.967 8.93789,259.3 1.5,258.5C 3.30519,256.803 5.63852,255.97 8.5,256C 9.5,255 10.5,254 11.5,253C 15.9572,252.975 19.9572,251.808 23.5,249.5C 23.5,248.167 23.5,246.833 23.5,245.5C 30.1719,245.17 36.8386,244.836 43.5,244.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b7c0c5\",\n    d: \"M 279.5,246.5 C 279.52,248.143 278.853,249.476 277.5,250.5C 283.772,251.761 290.105,252.427 296.5,252.5C 300.167,252.5 303.833,252.5 307.5,252.5C 307.987,256.867 308.653,261.201 309.5,265.5C 308.167,265.5 306.833,265.5 305.5,265.5C 304.278,261.777 303.611,258.11 303.5,254.5C 300.22,255.128 296.887,255.461 293.5,255.5C 289.972,255.411 286.638,254.744 283.5,253.5C 277.572,253.845 271.572,253.845 265.5,253.5C 265.5,252.167 265.5,250.833 265.5,249.5C 266.906,249.027 267.573,248.027 267.5,246.5C 268.568,245.566 269.901,245.232 271.5,245.5C 271.5,246.5 271.5,247.5 271.5,248.5C 274.004,247.361 276.67,246.694 279.5,246.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#393d44\",\n    d: \"M 155.5,259.5 C 155.5,258.167 155.5,256.833 155.5,255.5C 159.507,256.613 163.507,256.613 167.5,255.5C 167.137,254.817 166.804,254.15 166.5,253.5C 169.724,253.203 172.724,253.87 175.5,255.5C 177.759,255.216 179.426,254.216 180.5,252.5C 182.491,248.171 184.491,243.838 186.5,239.5C 188.344,240.16 190.01,241.16 191.5,242.5C 194.539,242.147 197.205,240.98 199.5,239C 208.186,238.168 216.853,238.335 225.5,239.5C 225.291,240.086 224.957,240.586 224.5,241C 215.787,243.178 206.787,244.845 197.5,246C 197.146,247.626 197.146,249.459 197.5,251.5C 200.833,251.5 204.167,251.5 207.5,251.5C 207.5,252.5 207.5,253.5 207.5,254.5C 199.829,253.401 192.162,253.401 184.5,254.5C 183.092,255.243 181.759,256.077 180.5,257C 178.443,257.305 176.443,257.305 174.5,257C 174.167,257.333 173.833,257.667 173.5,258C 174.973,258.71 175.64,259.876 175.5,261.5C 172.351,261.789 169.351,261.289 166.5,260C 167.672,259.581 168.672,258.915 169.5,258C 164.609,257.097 159.942,257.597 155.5,259.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#21262c\",\n    d: \"M 45.5,253.5 C 46.0906,254.151 46.7573,254.818 47.5,255.5C 46.0758,257.291 44.7424,259.125 43.5,261C 44.7839,261.684 45.9505,261.517 47,260.5C 48.3252,262.338 50.1585,263.338 52.5,263.5C 56.3261,261.635 60.3261,261.135 64.5,262C 63.6634,263.011 63.33,264.178 63.5,265.5C 49.5,265.5 35.5,265.5 21.5,265.5C 21.2882,263.616 20.2882,262.283 18.5,261.5C 19.5774,256.702 18.244,256.202 14.5,260C 11.5184,260.498 8.51838,260.665 5.5,260.5C 5.5,261.5 5.5,262.5 5.5,263.5C 4.16667,263.5 2.83333,263.5 1.5,263.5C 1.5,261.833 1.5,260.167 1.5,258.5C 8.93789,259.3 15.9379,257.967 22.5,254.5C 23.2868,253.758 23.9535,252.925 24.5,252C 31.7325,250.955 38.7325,251.455 45.5,253.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#758791\",\n    d: \"M 88.5,240.5 C 89.1667,240.5 89.8333,240.5 90.5,240.5C 93.564,241.968 96.8973,242.968 100.5,243.5C 96.3287,247.838 91.9954,252.005 87.5,256C 92.471,256.223 96.1377,254.056 98.5,249.5C 99.3764,249.369 100.043,249.702 100.5,250.5C 99.4586,252.585 97.9586,254.252 96,255.5C 94.9914,257.025 94.4914,258.692 94.5,260.5C 98.487,260.011 100.82,261.678 101.5,265.5C 100.5,265.5 99.5,265.5 98.5,265.5C 96.9261,262.292 94.2594,260.958 90.5,261.5C 90.5,260.167 90.5,258.833 90.5,257.5C 89.325,257.281 88.325,257.614 87.5,258.5C 87.0576,259.739 86.3909,260.739 85.5,261.5C 85.7373,260.209 85.404,259.209 84.5,258.5C 84.9234,257.735 85.2568,256.902 85.5,256C 84.4193,253.163 83.086,250.663 81.5,248.5C 79.3792,248.675 77.3792,248.341 75.5,247.5C 75.238,246.022 75.5713,244.689 76.5,243.5C 81.4395,245.566 85.4395,244.566 88.5,240.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8d9fa8\",\n    d: \"M 148.5,233.5 C 148.5,235.167 148.5,236.833 148.5,238.5C 148.5,238.833 148.5,239.167 148.5,239.5C 145.439,241.83 143.772,244.997 143.5,249C 144.022,249.95 144.689,250.784 145.5,251.5C 144.16,252.688 143.493,254.188 143.5,256C 144.979,259.007 145.646,262.174 145.5,265.5C 144.5,265.5 143.5,265.5 142.5,265.5C 142.509,263.692 142.009,262.025 141,260.5C 135.115,257.513 135.282,255.846 141.5,255.5C 141.5,253.833 141.5,252.167 141.5,250.5C 142.86,247.38 143.693,244.047 144,240.5C 145,239.833 146,239.167 147,238.5C 147.198,236.618 147.698,234.952 148.5,233.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6f828e\",\n    d: \"M 148.5,239.5 C 148.297,241.39 148.963,242.89 150.5,244C 148.866,244.494 147.199,244.66 145.5,244.5C 145.5,245.5 145.5,246.5 145.5,247.5C 147.75,247.181 149.75,247.681 151.5,249C 150.584,249.374 149.75,249.874 149,250.5C 148.576,252.976 147.743,255.309 146.5,257.5C 147.237,260.095 147.237,262.762 146.5,265.5C 146.167,265.5 145.833,265.5 145.5,265.5C 145.646,262.174 144.979,259.007 143.5,256C 143.493,254.188 144.16,252.688 145.5,251.5C 144.689,250.784 144.022,249.95 143.5,249C 143.772,244.997 145.439,241.83 148.5,239.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#46525b\",\n    d: \"M 151.5,223.5 C 152.117,229.228 153.117,234.894 154.5,240.5C 154.167,242.5 153.833,244.5 153.5,246.5C 155.103,246.312 156.437,246.812 157.5,248C 156.313,249.019 155.313,250.186 154.5,251.5C 158.393,252.815 162.393,253.482 166.5,253.5C 166.804,254.15 167.137,254.817 167.5,255.5C 163.507,256.613 159.507,256.613 155.5,255.5C 155.5,256.833 155.5,258.167 155.5,259.5C 155.167,259.5 154.833,259.5 154.5,259.5C 154.5,257.5 154.5,255.5 154.5,253.5C 149.764,253.115 149.431,251.781 153.5,249.5C 152.077,246.299 151.077,242.966 150.5,239.5C 151.076,234.344 151.41,229.011 151.5,223.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c3137\",\n    d: \"M 185.5,234.5 C 186.5,234.5 187.5,234.5 188.5,234.5C 188.5,235.5 188.5,236.5 188.5,237.5C 189.5,237.5 190.5,237.5 191.5,237.5C 204.204,237.225 216.87,237.558 229.5,238.5C 229.167,240.5 228.833,242.5 228.5,244.5C 229.791,244.263 230.791,244.596 231.5,245.5C 230.167,245.5 228.833,245.5 227.5,245.5C 226.833,249.5 226.167,249.5 225.5,245.5C 223.088,245.669 220.921,245.003 219,243.5C 215.384,245.256 211.551,245.923 207.5,245.5C 207.439,247.592 206.439,249.092 204.5,250C 208.167,250.667 211.833,250.667 215.5,250C 215.998,248.842 216.831,248.009 218,247.5C 221.067,247.948 223.567,249.281 225.5,251.5C 223.409,251.318 221.409,251.652 219.5,252.5C 218.614,253.325 218.281,254.325 218.5,255.5C 210.654,254.769 202.821,255.436 195,257.5C 190.917,256.952 186.75,256.952 182.5,257.5C 182.5,258.833 182.5,260.167 182.5,261.5C 173.52,262.181 164.52,262.681 155.5,263C 154.748,263.671 154.414,264.504 154.5,265.5C 152.167,265.5 149.833,265.5 147.5,265.5C 147.33,264.178 147.663,263.011 148.5,262C 150.845,261.764 152.845,260.93 154.5,259.5C 154.833,259.5 155.167,259.5 155.5,259.5C 159.942,257.597 164.609,257.097 169.5,258C 168.672,258.915 167.672,259.581 166.5,260C 169.351,261.289 172.351,261.789 175.5,261.5C 175.64,259.876 174.973,258.71 173.5,258C 173.833,257.667 174.167,257.333 174.5,257C 176.443,257.305 178.443,257.305 180.5,257C 181.759,256.077 183.092,255.243 184.5,254.5C 192.162,253.401 199.829,253.401 207.5,254.5C 207.5,253.5 207.5,252.5 207.5,251.5C 204.167,251.5 200.833,251.5 197.5,251.5C 197.146,249.459 197.146,247.626 197.5,246C 206.787,244.845 215.787,243.178 224.5,241C 224.957,240.586 225.291,240.086 225.5,239.5C 216.853,238.335 208.186,238.168 199.5,239C 197.205,240.98 194.539,242.147 191.5,242.5C 190.01,241.16 188.344,240.16 186.5,239.5C 186.167,239.5 185.833,239.5 185.5,239.5C 184.28,237.716 184.28,236.05 185.5,234.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#94a6b0\",\n    d: \"M 385.5,240.5 C 387.048,240.821 387.715,241.821 387.5,243.5C 389.167,243.5 390.833,243.5 392.5,243.5C 394.833,243.5 397.167,243.5 399.5,243.5C 399.5,248.833 399.5,254.167 399.5,259.5C 398.178,259.33 397.011,259.663 396,260.5C 392.946,257.819 391.113,258.652 390.5,263C 387.755,263.218 385.088,262.718 382.5,261.5C 383.348,259.591 383.682,257.591 383.5,255.5C 380.873,254.908 378.206,254.575 375.5,254.5C 374.833,253.833 374.167,253.167 373.5,252.5C 372.909,251.849 372.243,251.182 371.5,250.5C 373.475,249.251 373.809,247.751 372.5,246C 373.793,245.51 375.127,245.343 376.5,245.5C 377.609,246.29 378.942,246.79 380.5,247C 379.179,248.545 379.512,249.711 381.5,250.5C 384.177,249.926 386.843,249.259 389.5,248.5C 388.184,247.193 387.184,245.693 386.5,244C 385.5,243.667 384.5,243.333 383.5,243C 384.756,242.583 385.423,241.75 385.5,240.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bdc9cf\",\n    d: \"M 139.5,222.5 C 141.833,222.5 144.167,222.5 146.5,222.5C 146.703,224.044 147.37,225.378 148.5,226.5C 146.896,228.179 146.229,230.179 146.5,232.5C 145.5,232.5 144.5,232.5 143.5,232.5C 143.808,234.924 143.474,237.257 142.5,239.5C 140.474,240.37 139.141,241.87 138.5,244C 138.859,246.63 139.859,248.797 141.5,250.5C 141.5,252.167 141.5,253.833 141.5,255.5C 135.282,255.846 135.115,257.513 141,260.5C 142.009,262.025 142.509,263.692 142.5,265.5C 134.833,265.5 127.167,265.5 119.5,265.5C 118.962,263.883 118.629,262.216 118.5,260.5C 116.396,260.799 114.396,260.466 112.5,259.5C 114.167,258.5 115.5,257.167 116.5,255.5C 118.262,259.477 120.929,260.311 124.5,258C 122.852,256.538 121.852,254.705 121.5,252.5C 122.574,250.784 124.241,249.784 126.5,249.5C 127.787,246.291 127.787,243.125 126.5,240C 131.436,238.791 131.769,236.791 127.5,234C 123.778,233.762 120.111,233.262 116.5,232.5C 116.167,232 115.833,231.5 115.5,231C 117.112,229.518 118.112,227.685 118.5,225.5C 122.875,225.26 126.875,226.26 130.5,228.5C 133.5,228.5 136.5,228.5 139.5,228.5C 141.189,227.069 143.189,226.236 145.5,226C 143.111,225.261 141.111,224.095 139.5,222.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#788189\",\n    d: \"M 139.5,228.5 C 136.5,228.5 133.5,228.5 130.5,228.5C 131.514,227.235 133.014,226.569 135,226.5C 136.986,226.569 138.486,227.235 139.5,228.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e2329\",\n    d: \"M 218.5,255.5 C 220.104,256.287 220.771,257.62 220.5,259.5C 217.9,260.365 215.233,261.032 212.5,261.5C 207.534,260.669 202.534,260.336 197.5,260.5C 197.5,261.5 197.5,262.5 197.5,263.5C 200.388,262.99 202.721,263.656 204.5,265.5C 187.833,265.5 171.167,265.5 154.5,265.5C 154.414,264.504 154.748,263.671 155.5,263C 164.52,262.681 173.52,262.181 182.5,261.5C 182.5,260.167 182.5,258.833 182.5,257.5C 186.75,256.952 190.917,256.952 195,257.5C 202.821,255.436 210.654,254.769 218.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6b7d87\",\n    d: \"M 373.5,252.5 C 374.167,253.167 374.833,253.833 375.5,254.5C 376.209,255.404 377.209,255.737 378.5,255.5C 378.5,256.5 378.5,257.5 378.5,258.5C 375.5,258.5 372.5,258.5 369.5,258.5C 367.952,258.179 367.285,257.179 367.5,255.5C 367.5,254.5 367.5,253.5 367.5,252.5C 369.5,252.5 371.5,252.5 373.5,252.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b3439\",\n    d: \"M 51.5,253.5 C 52.5,253.5 53.5,253.5 54.5,253.5C 55.5832,253.461 56.5832,253.127 57.5,252.5C 58.7841,255.282 60.6175,257.615 63,259.5C 64.0113,258.663 65.1779,258.33 66.5,258.5C 66.5,260.833 66.5,263.167 66.5,265.5C 65.5,265.5 64.5,265.5 63.5,265.5C 63.33,264.178 63.6634,263.011 64.5,262C 60.3261,261.135 56.3261,261.635 52.5,263.5C 50.1585,263.338 48.3252,262.338 47,260.5C 45.9505,261.517 44.7839,261.684 43.5,261C 44.7424,259.125 46.0758,257.291 47.5,255.5C 46.7573,254.818 46.0906,254.151 45.5,253.5C 47.5487,252.359 49.5487,252.359 51.5,253.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a0b2b9\",\n    d: \"M 356.5,245.5 C 357.601,246.848 358.601,248.348 359.5,250C 361.777,251.142 364.11,251.642 366.5,251.5C 365.687,252.814 364.687,253.981 363.5,255C 364.793,255.49 366.127,255.657 367.5,255.5C 367.285,257.179 367.952,258.179 369.5,258.5C 372.505,260.189 374.838,262.522 376.5,265.5C 370.5,265.5 364.5,265.5 358.5,265.5C 359.038,262.811 359.705,260.144 360.5,257.5C 355.827,254.915 350.827,253.415 345.5,253C 349.814,253.007 353.814,252.007 357.5,250C 356.62,248.644 356.286,247.144 356.5,245.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f7179\",\n    d: \"M 81.5,248.5 C 83.086,250.663 84.4193,253.163 85.5,256C 85.2568,256.902 84.9234,257.735 84.5,258.5C 84.1667,258.5 83.8333,258.5 83.5,258.5C 83.5,257.5 83.5,256.5 83.5,255.5C 78.3841,257.717 73.0508,259.384 67.5,260.5C 67.5792,259.07 67.2458,257.736 66.5,256.5C 69.4541,255.853 72.4541,255.686 75.5,256C 76.6917,252.808 79.025,250.975 82.5,250.5C 82.1373,249.817 81.8039,249.15 81.5,248.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#81939d\",\n    d: \"M 114.5,238.5 C 112.446,241.236 109.946,243.569 107,245.5C 106.667,247.167 106.333,248.833 106,250.5C 101.165,253.593 101.498,254.593 107,253.5C 108.098,254.384 108.598,255.384 108.5,256.5C 109.85,255.05 111.516,254.383 113.5,254.5C 113.64,256.124 112.973,257.29 111.5,258C 107.672,258.446 104.006,258.113 100.5,257C 99.3909,258.813 100.058,259.646 102.5,259.5C 102.5,260.5 102.5,261.5 102.5,262.5C 104.857,262.337 107.19,262.503 109.5,263C 110.252,263.671 110.586,264.504 110.5,265.5C 107.5,265.5 104.5,265.5 101.5,265.5C 100.82,261.678 98.487,260.011 94.5,260.5C 94.4914,258.692 94.9914,257.025 96,255.5C 97.9586,254.252 99.4586,252.585 100.5,250.5C 100.043,249.702 99.3764,249.369 98.5,249.5C 100.019,248.59 101.685,247.757 103.5,247C 104.252,246.329 104.586,245.496 104.5,244.5C 106.959,241.239 109.959,238.405 113.5,236C 115.761,235.793 116.095,236.626 114.5,238.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#141b22\",\n    d: \"M 21.5,265.5 C 14.1667,265.5 6.83333,265.5 -0.5,265.5C -0.5,263.167 -0.5,260.833 -0.5,258.5C 0.166667,258.5 0.833333,258.5 1.5,258.5C 1.5,260.167 1.5,261.833 1.5,263.5C 2.83333,263.5 4.16667,263.5 5.5,263.5C 5.5,262.5 5.5,261.5 5.5,260.5C 8.51838,260.665 11.5184,260.498 14.5,260C 18.244,256.202 19.5774,256.702 18.5,261.5C 20.2882,262.283 21.2882,263.616 21.5,265.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#46555c\",\n    d: \"M 71.5,238.5 C 70.9094,239.151 70.2427,239.818 69.5,240.5C 72.7852,240.698 74.4518,242.365 74.5,245.5C 68.336,244.307 64.0026,246.473 61.5,252C 61.8333,252.5 62.1667,253 62.5,253.5C 67.1613,252.064 71.4946,250.064 75.5,247.5C 77.3792,248.341 79.3792,248.675 81.5,248.5C 81.8039,249.15 82.1373,249.817 82.5,250.5C 79.025,250.975 76.6917,252.808 75.5,256C 72.4541,255.686 69.4541,255.853 66.5,256.5C 67.2458,257.736 67.5792,259.07 67.5,260.5C 73.0508,259.384 78.3841,257.717 83.5,255.5C 83.5,256.5 83.5,257.5 83.5,258.5C 82.5,259.167 81.5,259.833 80.5,260.5C 77.6061,261.256 75.6061,262.923 74.5,265.5C 71.8333,265.5 69.1667,265.5 66.5,265.5C 66.5,263.167 66.5,260.833 66.5,258.5C 65.1779,258.33 64.0113,258.663 63,259.5C 60.6175,257.615 58.7841,255.282 57.5,252.5C 56.5832,253.127 55.5832,253.461 54.5,253.5C 55.9997,251.821 57.833,250.488 60,249.5C 61.5426,247.911 61.5426,246.577 60,245.5C 56.6148,247.722 53.7815,250.389 51.5,253.5C 49.5487,252.359 47.5487,252.359 45.5,253.5C 44.145,250.482 41.8116,249.149 38.5,249.5C 38.5,248.167 38.5,246.833 38.5,245.5C 40.5273,245.338 42.5273,245.505 44.5,246C 43.2888,246.893 43.2888,247.726 44.5,248.5C 47.6798,247.346 48.0131,246.013 45.5,244.5C 46.5676,243.566 47.901,243.232 49.5,243.5C 50.964,244.16 52.6307,244.493 54.5,244.5C 60.1617,243.945 65.8284,243.445 71.5,243C 68.6074,241.851 65.6074,241.351 62.5,241.5C 62.5,240.5 62.5,239.5 62.5,238.5C 65.5,238.5 68.5,238.5 71.5,238.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#657075\",\n    d: \"M 54.5,253.5 C 53.5,253.5 52.5,253.5 51.5,253.5C 53.7815,250.389 56.6148,247.722 60,245.5C 61.5426,246.577 61.5426,247.911 60,249.5C 57.833,250.488 55.9997,251.821 54.5,253.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f353c\",\n    d: \"M 220.5,259.5 C 219.64,261.614 217.973,262.78 215.5,263C 214.748,263.671 214.414,264.504 214.5,265.5C 211.167,265.5 207.833,265.5 204.5,265.5C 202.721,263.656 200.388,262.99 197.5,263.5C 197.5,262.5 197.5,261.5 197.5,260.5C 202.534,260.336 207.534,260.669 212.5,261.5C 215.233,261.032 217.9,260.365 220.5,259.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#d1dbdf\",\n    d: \"M 313.5,255.5 C 313.918,256.222 314.584,256.722 315.5,257C 321.068,257.497 326.402,257.33 331.5,256.5C 333.729,257.577 336.063,258.244 338.5,258.5C 338.5,259.5 338.5,260.5 338.5,261.5C 333.489,261.334 328.489,261.501 323.5,262C 323.167,262.333 322.833,262.667 322.5,263C 324.32,263.2 325.653,264.034 326.5,265.5C 321.167,265.5 315.833,265.5 310.5,265.5C 310.5,263.833 310.5,262.167 310.5,260.5C 311.873,260.657 313.207,260.49 314.5,260C 312.564,259.187 310.564,258.687 308.5,258.5C 308.215,256.712 308.548,255.045 309.5,253.5C 310.622,254.63 311.956,255.297 313.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#899ba5\",\n    d: \"M 375.5,254.5 C 378.206,254.575 380.873,254.908 383.5,255.5C 383.682,257.591 383.348,259.591 382.5,261.5C 385.088,262.718 387.755,263.218 390.5,263C 391.113,258.652 392.946,257.819 396,260.5C 397.011,259.663 398.178,259.33 399.5,259.5C 399.5,261.5 399.5,263.5 399.5,265.5C 391.833,265.5 384.167,265.5 376.5,265.5C 374.838,262.522 372.505,260.189 369.5,258.5C 372.5,258.5 375.5,258.5 378.5,258.5C 378.5,257.5 378.5,256.5 378.5,255.5C 377.209,255.737 376.209,255.404 375.5,254.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#91a3ad\",\n    d: \"M 83.5,258.5 C 83.8333,258.5 84.1667,258.5 84.5,258.5C 85.404,259.209 85.7373,260.209 85.5,261.5C 84.8333,261.5 84.5,261.833 84.5,262.5C 83.8333,262.833 83.1667,263.167 82.5,263.5C 80.9519,263.179 80.2852,262.179 80.5,260.5C 81.5,259.833 82.5,259.167 83.5,258.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#52646e\",\n    d: \"M 98.5,265.5 C 97.5,265.5 96.5,265.5 95.5,265.5C 94.8163,263.815 93.483,262.815 91.5,262.5C 89.2143,263.42 86.8809,263.42 84.5,262.5C 84.5,261.833 84.8333,261.5 85.5,261.5C 86.3909,260.739 87.0576,259.739 87.5,258.5C 88.325,257.614 89.325,257.281 90.5,257.5C 90.5,258.833 90.5,260.167 90.5,261.5C 94.2594,260.958 96.9261,262.292 98.5,265.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#414950\",\n    d: \"M 225.5,251.5 C 227.912,251.694 228.912,253.027 228.5,255.5C 227.167,255.5 225.833,255.5 224.5,255.5C 224.433,256.959 224.766,258.292 225.5,259.5C 224.624,259.369 223.957,259.702 223.5,260.5C 224.952,261.94 225.952,263.606 226.5,265.5C 222.5,265.5 218.5,265.5 214.5,265.5C 214.414,264.504 214.748,263.671 215.5,263C 217.973,262.78 219.64,261.614 220.5,259.5C 220.771,257.62 220.104,256.287 218.5,255.5C 218.281,254.325 218.614,253.325 219.5,252.5C 221.409,251.652 223.409,251.318 225.5,251.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c9d2d7\",\n    d: \"M 328.5,253.5 C 335.146,254.093 341.812,254.759 348.5,255.5C 351.03,258.27 352.03,261.603 351.5,265.5C 343.167,265.5 334.833,265.5 326.5,265.5C 325.653,264.034 324.32,263.2 322.5,263C 322.833,262.667 323.167,262.333 323.5,262C 328.489,261.501 333.489,261.334 338.5,261.5C 338.5,260.5 338.5,259.5 338.5,258.5C 336.063,258.244 333.729,257.577 331.5,256.5C 326.402,257.33 321.068,257.497 315.5,257C 314.584,256.722 313.918,256.222 313.5,255.5C 318.307,254.107 323.307,253.44 328.5,253.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#72858e\",\n    d: \"M 80.5,260.5 C 80.2852,262.179 80.9519,263.179 82.5,263.5C 82.5,264.167 82.5,264.833 82.5,265.5C 79.8333,265.5 77.1667,265.5 74.5,265.5C 75.6061,262.923 77.6061,261.256 80.5,260.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#505c65\",\n    d: \"M 239.5,255.5 C 239.5,257.167 239.5,258.833 239.5,260.5C 238.909,261.151 238.243,261.818 237.5,262.5C 238.193,263.518 238.859,264.518 239.5,265.5C 235.167,265.5 230.833,265.5 226.5,265.5C 225.952,263.606 224.952,261.94 223.5,260.5C 223.957,259.702 224.624,259.369 225.5,259.5C 226.167,259.5 226.833,259.5 227.5,259.5C 228.209,260.404 229.209,260.737 230.5,260.5C 230.065,257.387 231.065,256.721 233.5,258.5C 235.511,257.481 237.511,256.481 239.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#89939d\",\n    d: \"M 242.5,240.5 C 242.456,244.116 242.789,247.95 243.5,252C 242.934,256.525 242.268,261.025 241.5,265.5C 240.833,265.5 240.167,265.5 239.5,265.5C 238.859,264.518 238.193,263.518 237.5,262.5C 238.243,261.818 238.909,261.151 239.5,260.5C 240.117,260.389 240.617,260.056 241,259.5C 241.667,255.167 241.667,250.833 241,246.5C 240.5,246 240,245.5 239.5,245C 241.863,244.411 242.863,242.911 242.5,240.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c9d3d8\",\n    d: \"M 245.5,242.5 C 245.334,248.176 245.501,253.843 246,259.5C 246.5,260 247,260.5 247.5,261C 250.867,261.525 254.034,261.025 257,259.5C 261.587,261.41 263.087,260.077 261.5,255.5C 256.844,256.028 255.677,254.362 258,250.5C 260.381,249.565 262.881,249.232 265.5,249.5C 265.5,250.833 265.5,252.167 265.5,253.5C 271.572,253.845 277.572,253.845 283.5,253.5C 286.638,254.744 289.972,255.411 293.5,255.5C 296.887,255.461 300.22,255.128 303.5,254.5C 303.611,258.11 304.278,261.777 305.5,265.5C 304.833,265.5 304.167,265.5 303.5,265.5C 302.564,262.862 300.897,262.195 298.5,263.5C 290.557,263.065 282.724,262.065 275,260.5C 273.175,260.943 271.342,261.277 269.5,261.5C 269.5,262.833 269.5,264.167 269.5,265.5C 260.5,265.5 251.5,265.5 242.5,265.5C 244.036,257.848 245.036,250.181 245.5,242.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bbc7cc\",\n    d: \"M 303.5,265.5 C 292.167,265.5 280.833,265.5 269.5,265.5C 269.5,264.167 269.5,262.833 269.5,261.5C 271.342,261.277 273.175,260.943 275,260.5C 282.724,262.065 290.557,263.065 298.5,263.5C 300.897,262.195 302.564,262.862 303.5,265.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2e404a\",\n    d: \"M 84.5,262.5 C 86.8809,263.42 89.2143,263.42 91.5,262.5C 93.483,262.815 94.8163,263.815 95.5,265.5C 91.1667,265.5 86.8333,265.5 82.5,265.5C 82.5,264.833 82.5,264.167 82.5,263.5C 83.1667,263.167 83.8333,262.833 84.5,262.5 Z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgSadImage2);\nexport default __webpack_public_path__ + \"static/media/sad-image2.b6ecabaaf2ad345ce727e88dfc91b080.svg\";\nexport { ForwardRef as ReactComponent };","import sadImage1 from \"../assets/images/sad-image1.svg\";\r\nimport sadImage2 from \"../assets/images/sad-image2.svg\";\r\n\r\n\r\nexport default function Motivation () {\r\n    return (\r\n        <div className=\"container p-5\">\r\n            <div className=\"row d-flex align-items-center justify-content-center\">\r\n                <div className=\"col-12 text-center\">\r\n                    <img src={sadImage1} alt=\"gambar sad 1\" className=\"mb-lg-5 me-4 me-lg-0 img-fluid\"/>\r\n                    <img src={sadImage2} alt=\"gambar sad 2\" className=\"ms-5 ms-lg-2 img-fluid mt-lg-5 mt-3\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row mt-5 pt-5\">\r\n                <div className=\"col-12\">\r\n                    <p className=\"text-center\" style={{ fontFamily: \"Playwrite GB S\", fontWeight : \"500\", fontSize : \"1.3rem\"}}>\r\n                        ‘ If you’re feeling <span className=\"text-danger\">down</span>, look around and <span className=\"text-primary\">start moving forward!</span> ’\r\n                    </p>\r\n                    <p className=\"mt-5 text-center\">\r\n                        — Ahmad Bagas Adiputra\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import followImage1 from \"../assets/images/follow-image1.jpg\";\r\nimport followImage2 from \"../assets/images/follow-image2.jpg\";\r\nimport followImage3 from \"../assets/images/follow-image3.jpg\";\r\nimport followImage4 from \"../assets/images/follow-image4.jpg\";\r\n\r\nexport default function Follow () {\r\n    return (\r\n        <div className=\"container p-5\">\r\n            <div className=\"row\">\r\n                <p className=\" p-4 text-title-follow text-center text-dark fs-2\">\r\n                    Follow ☁️\r\n                </p>\r\n                <div className=\"col-3\">\r\n                    <a href=\"https://instagram.com/\">\r\n                        <img src={ followImage1 } alt=\"gambar\" className=\"img-fluid\" />\r\n                    </a>\r\n                </div>\r\n                <div className=\"col-3\">\r\n                    <a href=\"https://instagram.com/\">\r\n                        <img src={ followImage2 } alt=\"gambar\" className=\"img-fluid\" />\r\n                    </a>\r\n                </div>\r\n                <div className=\"col-3\">\r\n                    <a href=\"https://instagram.com/\">\r\n                        <img src={ followImage3 } alt=\"gambar\" className=\"img-fluid\" />\r\n                    </a>\r\n                </div>\r\n                <div className=\"col-3\">\r\n                    <a href=\"https://instagram.com/\">\r\n                        <img src={ followImage4 } alt=\"gambar\" className=\"img-fluid\" />\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useEffect, useRef } from \"react\"\r\nimport ScrollReveal from \"scrollreveal\"\r\n\r\nexport default function Footer () {\r\n\r\n    const revealRef = useRef(null);\r\n\r\n    useEffect( () => {\r\n        ScrollReveal().reveal( revealRef.current, {\r\n            origin: 'bottom',\r\n            distance: '100px',\r\n            duration: 1500,\r\n            delay: 200,\r\n            easing: 'ease-in-out',\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div className=\"row py-5 my-5\" id=\"follow-up-link\">\r\n                <ul className=\"mt-5 d-flex align-items-center justify-content-center gap-3\" ref={revealRef}>\r\n                    <li>\r\n                        <a href=\"#\">\r\n                            <i className=\"bx bxl-youtube\"></i>\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#\">\r\n                            <i className=\"bx bxl-instagram\"></i>\r\n                        </a>\r\n                    </li>\r\n                    <li>\r\n                        <a href=\"#\">\r\n                            <i className=\"bx bxl-github\"></i>\r\n                        </a>\r\n                    </li>\r\n                </ul>\r\n                <div className=\"text-center\">\r\n                    <p style={{fontSize : \".9rem\", fontFamily : \"Edu VIC WA NT Beginner\"}}>&copy;Ahmad Adptr, 2024. Allright Reversed</p>\r\n                </div>\r\n            </div>\r\n    )\r\n}","import projectImage from \"../../assets/images/project.svg\";\r\nimport Navbar from \"../navbar\";\r\nimport { useEffect, useRef } from \"react\"\r\nimport ScrollReveal from \"scrollreveal\"\r\n\r\nexport default function MainShop() {\r\n    const revealRef1 = useRef(null);\r\n    const revealRef2 = useRef(null);\r\n    const revealRef3 = useRef(null);\r\n\r\n    useEffect( () => {\r\n        ScrollReveal().reveal( revealRef1.current, {\r\n            origin: 'top',\r\n            distance: '100px',\r\n            duration: 1500,\r\n            delay: 200,\r\n            easing: 'ease-in-out',\r\n        })\r\n        ScrollReveal().reveal( revealRef2.current, {\r\n            origin: 'left',\r\n            distance: '100px',\r\n            duration: 1500,\r\n            delay: 200,\r\n            easing: 'ease-in-out',\r\n        })\r\n        ScrollReveal().reveal( revealRef3.current, {\r\n            origin: 'bottom',\r\n            distance: '100px',\r\n            duration: 1500,\r\n            delay: 200,\r\n            easing: 'ease-in-out',\r\n        })\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Navbar shopMain=\"active\" />\r\n            <div className=\"container p-5 text-center\">\r\n                <div className=\"row p-5 border-bottom\">\r\n                    <div className=\"col-12\">\r\n                        <p className=\"display-5 text-success\" ref={revealRef1}>Shop</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"container p-5 pt-2 pt-sm-5\">\r\n                <img src={ projectImage } alt=\"\" className=\"img-fluid\"style={{width : \"auto\", height: \"450px\"}} ref={revealRef2}/>\r\n                <div ref={revealRef3}>\r\n                    <p className=\"m-0 mt-2 p-0\" style={{fontFamily : \"advent pro\"}}>\r\n                        A Year in Tōkyō: An Illustrated Guide and Memoir eBook</p>\r\n                    <p className=\"p-0 m-0\" style={{fontFamily : \"advent pro\"}}>$15.00</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import projectImage from \"../../assets/images/project.svg\";\r\nimport Navbar from \"../navbar\";\r\nimport { useEffect, useRef } from \"react\"\r\nimport ScrollReveal from \"scrollreveal\"\r\n\r\n\r\nexport default function A_Year_Main() {\r\n    const revealRef1 = useRef(null);\r\n    const revealRef2 = useRef(null);\r\n    const revealRef3 = useRef(null);\r\n    const revealRef4 = useRef(null);\r\n    const revealRef5 = useRef(null);\r\n\r\n    useEffect( () => {\r\n        ScrollReveal().reveal( revealRef1.current, {\r\n            origin: 'left',\r\n            distance: '100px',\r\n            duration: 1200,\r\n            delay: 200,\r\n            easing: 'ease-in-out',\r\n        })\r\n        ScrollReveal().reveal( revealRef2.current, {\r\n            origin: 'top',\r\n            distance: '100px',\r\n            duration: 1200,\r\n            delay: 350,\r\n            easing: 'ease-in-out',\r\n        })\r\n        ScrollReveal().reveal( revealRef3.current, {\r\n            origin: 'left',\r\n            distance: '100px',\r\n            duration: 1200,\r\n            delay: 400,\r\n            easing: 'ease-in-out',\r\n        })\r\n        ScrollReveal().reveal( revealRef4.current, {\r\n            origin: 'left',\r\n            distance: '100px',\r\n            duration: 1200,\r\n            delay: 600,\r\n            easing: 'ease-in-out',\r\n        })\r\n        ScrollReveal().reveal( revealRef5.current, {\r\n            origin: 'bottom',\r\n            distance: '100px',\r\n            duration: 1200,\r\n            delay: 800,\r\n            easing: 'ease-in-out',\r\n        })\r\n    })\r\n    return (\r\n        <>\r\n        <Navbar a_year=\"active\" />\r\n        <div className=\"container p-5\">\r\n            <div className=\"row\">\r\n                <div className=\"card border-0 col-12 col-md-6 text-center\">\r\n                    <div className=\"card-header border-bottom-0 bg-transparent\">\r\n                        <h1 className=\"card-title\" style={{fontFamily : \"Playwrite GB S\"}} ref={revealRef1}>\r\n                            A Year In Indonesian\r\n                        </h1>\r\n                        <h3 className=\"card-semi-title mt-4\" style={{fontWeight : \"100\", fontSize : \"1.4rem\"}} ref={revealRef3}>\r\n                            An Illustrated Guide and Memoir\r\n                        </h3>\r\n                    </div>\r\n                    <div className=\"card-body mt-5\">\r\n                        <p style={{fontSize : \".8rem\"}} ref={revealRef4}>\r\n                            The summer after I turned 21, I moved to Indonesian. A Year in Indonesian follows\r\n                            the thirteen magical months I spent in the city of ginkgo leaves. From becoming a\r\n                            travel writer and English teacher to navigating cultural nuances, financial adversity\r\n                            and the abomination known as peanut cream, this book is a candid exploration of what\r\n                            it was really like to live and work in the world’s greatest megacity.\r\n                        </p>\r\n\r\n                        <div className=\"p-5\" ref={revealRef5}>\r\n                            <p>\r\n                                eBook :\r\n                            </p>\r\n                            <button className=\"btn btn-success px-5 py-3\">\r\n                                <span className=\"fst-italic\" style={{fontFamily : \"advent pro\"}}>Buy Now</span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12 col-md-6 text-end overflow-hidden text-center\">\r\n                    <img src={ projectImage } alt=\"jual buku\" className=\"img-fluid\" ref={revealRef2}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}","function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nimport * as React from \"react\";\nfunction SvgAbout(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"564px\",\n    height: \"564px\",\n    style: {\n      shapeRendering: \"geometricPrecision\",\n      textRendering: \"geometricPrecision\",\n      imageRendering: \"optimizeQuality\",\n      fillRule: \"evenodd\",\n      clipRule: \"evenodd\"\n    },\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#736168\",\n    d: \"M 35.5,-0.5 C 59.8333,-0.5 84.1667,-0.5 108.5,-0.5C 108.802,2.0593 108.468,4.39263 107.5,6.5C 84.6632,5.17138 61.6632,5.17138 38.5,6.5C 38.1373,7.18346 37.8039,7.85013 37.5,8.5C 36.596,9.20895 36.2627,10.209 36.5,11.5C 36.5,13.8333 36.5,16.1667 36.5,18.5C 36.6666,31.8375 36.4999,45.1708 36,58.5C 35.6667,59.1667 35.3333,59.8333 35,60.5C 34.043,50.8547 33.543,41.188 33.5,31.5C 33.181,20.9636 33.8477,10.297 35.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#362827\",\n    d: \"M 335.5,-0.5 C 340.833,-0.5 346.167,-0.5 351.5,-0.5C 351.665,2.8499 351.498,6.18323 351,9.5C 348.632,10.3686 347.132,12.0353 346.5,14.5C 345.758,15.2868 344.925,15.9535 344,16.5C 341.239,14.9828 339.406,15.8162 338.5,19C 333.723,18.7218 330.056,20.5551 327.5,24.5C 325.138,25.2715 322.804,26.1048 320.5,27C 329.518,28.8872 329.184,30.3872 319.5,31.5C 319.5,32.8333 319.5,34.1667 319.5,35.5C 318.167,35.5 316.833,35.5 315.5,35.5C 313.322,34.3434 311.322,33.0101 309.5,31.5C 310.583,31.5394 311.583,31.8728 312.5,32.5C 313.167,30.1667 313.833,27.8333 314.5,25.5C 316.234,23.766 317.568,21.766 318.5,19.5C 323.641,17.3455 328.474,14.6789 333,11.5C 331.874,9.0503 332.541,7.0503 335,5.5C 335.495,3.5273 335.662,1.5273 335.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d2122\",\n    d: \"M 351.5,-0.5 C 356.833,-0.5 362.167,-0.5 367.5,-0.5C 366.833,4.83333 366.167,10.1667 365.5,15.5C 364.5,15.5 363.5,15.5 362.5,15.5C 362.716,17.6807 361.883,19.3474 360,20.5C 359.667,20.1667 359.333,19.8333 359,19.5C 358.5,20.5 358,21.5 357.5,22.5C 352.74,23.715 348.407,25.715 344.5,28.5C 343.692,30.4233 343.192,32.4233 343,34.5C 341.028,35.3052 339.528,36.6385 338.5,38.5C 341.167,39.5 341.167,40.5 338.5,41.5C 337.833,40.8333 337.167,40.1667 336.5,39.5C 335.526,41.7427 335.192,44.076 335.5,46.5C 334.448,46.6495 333.448,46.4828 332.5,46C 326.992,41.9289 321.325,38.4289 315.5,35.5C 316.833,35.5 318.167,35.5 319.5,35.5C 319.5,34.1667 319.5,32.8333 319.5,31.5C 329.184,30.3872 329.518,28.8872 320.5,27C 322.804,26.1048 325.138,25.2715 327.5,24.5C 330.056,20.5551 333.723,18.7218 338.5,19C 339.406,15.8162 341.239,14.9828 344,16.5C 344.925,15.9535 345.758,15.2868 346.5,14.5C 347.132,12.0353 348.632,10.3686 351,9.5C 351.498,6.18323 351.665,2.8499 351.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#281d23\",\n    d: \"M 367.5,-0.5 C 373.5,-0.5 379.5,-0.5 385.5,-0.5C 385.813,2.24688 385.48,4.91355 384.5,7.5C 383.158,9.00488 381.492,9.67154 379.5,9.5C 379.5,11.5 379.5,13.5 379.5,15.5C 378.167,15.5 376.833,15.5 375.5,15.5C 375.5,17.1667 375.5,18.8333 375.5,20.5C 373.641,20.4609 372.308,21.2942 371.5,23C 374.943,23.2213 375.276,24.2213 372.5,26C 374.886,26.2835 375.552,27.2835 374.5,29C 370.284,30.5487 365.95,31.7154 361.5,32.5C 358.759,37.1318 357.426,42.1318 357.5,47.5C 355.5,47.5 353.5,47.5 351.5,47.5C 351.5,48.5 351.5,49.5 351.5,50.5C 348.813,50.3359 346.146,50.5026 343.5,51C 341.396,51.7908 340.063,53.2908 339.5,55.5C 338.614,54.675 338.281,53.675 338.5,52.5C 336.784,52.3713 335.117,52.038 333.5,51.5C 332.5,50.1667 331.5,48.8333 330.5,47.5C 332.415,47.7845 334.081,47.4511 335.5,46.5C 335.192,44.076 335.526,41.7427 336.5,39.5C 337.167,40.1667 337.833,40.8333 338.5,41.5C 341.167,40.5 341.167,39.5 338.5,38.5C 339.528,36.6385 341.028,35.3052 343,34.5C 343.192,32.4233 343.692,30.4233 344.5,28.5C 348.407,25.715 352.74,23.715 357.5,22.5C 358,21.5 358.5,20.5 359,19.5C 359.333,19.8333 359.667,20.1667 360,20.5C 361.883,19.3474 362.716,17.6807 362.5,15.5C 363.5,15.5 364.5,15.5 365.5,15.5C 366.167,10.1667 366.833,4.83333 367.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#221b24\",\n    d: \"M 385.5,-0.5 C 402.167,-0.5 418.833,-0.5 435.5,-0.5C 435.5,16.5 435.5,33.5 435.5,50.5C 435.167,50.5 434.833,50.5 434.5,50.5C 434.783,37.351 433.783,24.351 431.5,11.5C 429.833,11.5 428.167,11.5 426.5,11.5C 426.65,19.5275 426.65,27.5275 426.5,35.5C 425.965,39.5184 425.298,43.5184 424.5,47.5C 423.956,41.5894 421.956,41.2561 418.5,46.5C 412.202,47.4963 405.868,47.8297 399.5,47.5C 399.5,51.1667 399.5,54.8333 399.5,58.5C 396.833,58.5 394.167,58.5 391.5,58.5C 391.5,60.1667 391.5,61.8333 391.5,63.5C 388.833,63.5 386.167,63.5 383.5,63.5C 383.5,60.8333 383.5,58.1667 383.5,55.5C 378.167,55.5 372.833,55.5 367.5,55.5C 367.5,57.5 367.5,59.5 367.5,61.5C 360.07,61.3461 352.737,62.0128 345.5,63.5C 344.833,63.5 344.167,63.5 343.5,63.5C 343.5,62.5 343.5,61.5 343.5,60.5C 342.07,60.5792 340.736,60.2458 339.5,59.5C 338.582,57.1614 336.916,55.6614 334.5,55C 335.167,54.6667 335.833,54.3333 336.5,54C 335.058,53.6232 334.058,52.7899 333.5,51.5C 335.117,52.038 336.784,52.3713 338.5,52.5C 338.281,53.675 338.614,54.675 339.5,55.5C 340.063,53.2908 341.396,51.7908 343.5,51C 346.146,50.5026 348.813,50.3359 351.5,50.5C 351.5,49.5 351.5,48.5 351.5,47.5C 353.5,47.5 355.5,47.5 357.5,47.5C 357.426,42.1318 358.759,37.1318 361.5,32.5C 365.95,31.7154 370.284,30.5487 374.5,29C 375.552,27.2835 374.886,26.2835 372.5,26C 375.276,24.2213 374.943,23.2213 371.5,23C 372.308,21.2942 373.641,20.4609 375.5,20.5C 375.5,18.8333 375.5,17.1667 375.5,15.5C 376.833,15.5 378.167,15.5 379.5,15.5C 379.5,13.5 379.5,11.5 379.5,9.5C 381.492,9.67154 383.158,9.00488 384.5,7.5C 385.48,4.91355 385.813,2.24688 385.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#745e64\",\n    d: \"M 463.5,-0.5 C 468.833,-0.5 474.167,-0.5 479.5,-0.5C 479.817,2.57186 479.484,5.57186 478.5,8.5C 475.5,9.5 473.5,11.5 472.5,14.5C 474.17,18.2581 475.003,22.2581 475,26.5C 476.972,27.3052 478.472,28.6385 479.5,30.5C 478.675,31.3857 477.675,31.719 476.5,31.5C 476.5,36.8333 476.5,42.1667 476.5,47.5C 475.167,47.5 473.833,47.5 472.5,47.5C 471.167,63.5 471.167,79.5 472.5,95.5C 468.5,95.5 464.5,95.5 460.5,95.5C 460.512,83.4095 461.512,71.4095 463.5,59.5C 463.167,55.5 462.833,51.5 462.5,47.5C 461.682,50.1071 461.182,52.7737 461,55.5C 460.5,47.5069 460.334,39.5069 460.5,31.5C 461.5,31.5 462.5,31.5 463.5,31.5C 463.478,27.4068 462.811,23.4068 461.5,19.5C 463.154,12.9337 463.821,6.26707 463.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a5e64\",\n    d: \"M 491.5,-0.5 C 501.167,-0.5 510.833,-0.5 520.5,-0.5C 520.927,2.37606 521.594,5.20939 522.5,8C 522.265,8.87318 521.931,9.70651 521.5,10.5C 523.576,12.9367 523.909,15.6034 522.5,18.5C 520.401,20.5342 518.068,20.8676 515.5,19.5C 514.289,18.2798 514.289,17.1131 515.5,16C 514.207,15.51 512.873,15.3433 511.5,15.5C 511.813,18.2469 511.48,20.9135 510.5,23.5C 509.264,24.2458 507.93,24.5792 506.5,24.5C 505.49,21.7784 505.823,19.1117 507.5,16.5C 503.555,15.5091 499.555,15.1758 495.5,15.5C 495.5,17.8333 495.5,20.1667 495.5,22.5C 494.5,22.5 493.5,22.5 492.5,22.5C 492.737,21.209 492.404,20.209 491.5,19.5C 491.5,12.8333 491.5,6.16667 491.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c3836\",\n    d: \"M 196.5,-0.5 C 230.833,-0.5 265.167,-0.5 299.5,-0.5C 299.157,6.56826 298.99,13.5683 299,20.5C 296.872,20.927 294.705,20.427 292.5,19C 291.663,17.9887 291.33,16.8221 291.5,15.5C 276.134,15.1403 264.134,15.4737 255.5,16.5C 255.5,18.1667 255.5,19.8333 255.5,21.5C 248.276,20.9993 241.276,21.666 234.5,23.5C 233.485,20.5641 231.318,19.2307 228,19.5C 225.245,20.4053 222.412,21.0719 219.5,21.5C 212.849,20.4961 206.182,20.4961 199.5,21.5C 193.113,21.3134 186.78,20.6467 180.5,19.5C 180.291,18.914 179.957,18.414 179.5,18C 183.615,19.355 187.281,18.5216 190.5,15.5C 191.607,16.0219 192.774,16.3552 194,16.5C 200.476,15.766 206.976,15.266 213.5,15C 219.899,14.0521 220.566,12.0521 215.5,9C 203.527,9.20231 191.527,8.86898 179.5,8C 184.833,7.66667 190.167,7.33333 195.5,7C 197.837,4.80634 198.17,2.30634 196.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#634d49\",\n    d: \"M 107.5,6.5 C 106.833,6.5 106.5,6.83333 106.5,7.5C 83.5452,8.47941 60.5452,8.81274 37.5,8.5C 37.8039,7.85013 38.1373,7.18346 38.5,6.5C 61.6632,5.17138 84.6632,5.17138 107.5,6.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#764843\",\n    d: \"M 159.5,1.5 C 159.5,2.5 159.5,3.5 159.5,4.5C 158.5,4.5 157.5,4.5 156.5,4.5C 157.231,8.60345 156.231,12.1034 153.5,15C 144.84,15.4998 136.173,15.6664 127.5,15.5C 134.454,13.7619 141.787,12.7619 149.5,12.5C 153.949,10.9335 154.282,8.43347 150.5,5C 153.072,2.71319 156.072,1.54652 159.5,1.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f2621\",\n    d: \"M 106.5,7.5 C 107.586,7.61998 108.253,8.28665 108.5,9.5C 108.058,10.7387 107.391,11.7387 106.5,12.5C 83.1551,12.6952 59.8218,12.3619 36.5,11.5C 36.2627,10.209 36.596,9.20895 37.5,8.5C 60.5452,8.81274 83.5452,8.47941 106.5,7.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#864948\",\n    d: \"M 108.5,-0.5 C 125.5,-0.5 142.5,-0.5 159.5,-0.5C 159.5,0.166667 159.5,0.833333 159.5,1.5C 156.072,1.54652 153.072,2.71319 150.5,5C 154.282,8.43347 153.949,10.9335 149.5,12.5C 141.787,12.7619 134.454,13.7619 127.5,15.5C 120.833,15.5 114.167,15.5 107.5,15.5C 107.737,14.209 107.404,13.209 106.5,12.5C 107.391,11.7387 108.058,10.7387 108.5,9.5C 108.253,8.28665 107.586,7.61998 106.5,7.5C 106.5,6.83333 106.833,6.5 107.5,6.5C 108.468,4.39263 108.802,2.0593 108.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c1723\",\n    d: \"M 434.5,50.5 C 433.506,59.9856 433.173,69.6522 433.5,79.5C 431.516,94.7977 430.849,110.464 431.5,126.5C 428.163,122.114 427.83,117.447 430.5,112.5C 429.675,111.614 428.675,111.281 427.5,111.5C 427.5,115.167 427.5,118.833 427.5,122.5C 425.876,122.64 424.71,121.973 424,120.5C 421.205,121.783 418.372,121.783 415.5,120.5C 416.833,119.833 418.167,119.167 419.5,118.5C 417.605,116.712 415.938,114.712 414.5,112.5C 413.167,113.5 411.833,114.5 410.5,115.5C 409.571,114.311 409.238,112.978 409.5,111.5C 408.325,111.281 407.325,111.614 406.5,112.5C 407.59,113.609 407.59,114.609 406.5,115.5C 404.942,110.306 403.942,110.306 403.5,115.5C 402.5,115.5 401.5,115.5 400.5,115.5C 400.643,117.262 400.309,118.929 399.5,120.5C 388.913,122.136 388.913,123.136 399.5,123.5C 399.5,124.5 399.5,125.5 399.5,126.5C 394.167,126.833 388.833,127.167 383.5,127.5C 383.5,130.167 383.5,132.833 383.5,135.5C 379.713,135.22 376.047,135.22 372.5,135.5C 371.679,138.447 371.179,141.447 371,144.5C 365.259,143.525 359.425,143.192 353.5,143.5C 353.833,138.167 354.167,132.833 354.5,127.5C 355.833,127.5 357.167,127.5 358.5,127.5C 358.5,130.167 358.5,132.833 358.5,135.5C 359.5,135.5 360.5,135.5 361.5,135.5C 360.833,130.167 360.167,124.833 359.5,119.5C 356.833,119.5 354.167,119.5 351.5,119.5C 351.5,116.833 351.5,114.167 351.5,111.5C 350.022,111.762 348.689,111.429 347.5,110.5C 348.792,105.944 350.125,101.444 351.5,97C 349.042,85.882 347.042,74.7153 345.5,63.5C 352.737,62.0128 360.07,61.3461 367.5,61.5C 367.5,59.5 367.5,57.5 367.5,55.5C 372.833,55.5 378.167,55.5 383.5,55.5C 383.5,58.1667 383.5,60.8333 383.5,63.5C 386.167,63.5 388.833,63.5 391.5,63.5C 391.5,61.8333 391.5,60.1667 391.5,58.5C 394.167,58.5 396.833,58.5 399.5,58.5C 399.5,54.8333 399.5,51.1667 399.5,47.5C 405.868,47.8297 412.202,47.4963 418.5,46.5C 421.956,41.2561 423.956,41.5894 424.5,47.5C 425.298,43.5184 425.965,39.5184 426.5,35.5C 426.65,27.5275 426.65,19.5275 426.5,11.5C 428.167,11.5 429.833,11.5 431.5,11.5C 433.783,24.351 434.783,37.351 434.5,50.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5a4340\",\n    d: \"M 36.5,11.5 C 59.8218,12.3619 83.1551,12.6952 106.5,12.5C 107.404,13.209 107.737,14.209 107.5,15.5C 107.5,16.5 107.5,17.5 107.5,18.5C 114.167,18.5 120.833,18.5 127.5,18.5C 120.833,19.1667 114.167,19.8333 107.5,20.5C 105.299,20.1416 103.965,18.8083 103.5,16.5C 82.1771,15.5003 60.8437,15.167 39.5,15.5C 38.5655,16.5676 38.2322,17.901 38.5,19.5C 37.8333,19.1667 37.1667,18.8333 36.5,18.5C 36.5,16.1667 36.5,13.8333 36.5,11.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#816060\",\n    d: \"M 161.5,7.5 C 168.225,7.20441 169.891,9.87107 166.5,15.5C 164.591,16.3482 162.591,16.6816 160.5,16.5C 159.833,16.5 159.5,16.1667 159.5,15.5C 157.69,12.07 158.357,9.40337 161.5,7.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aea3a4\",\n    d: \"M 7.5,-0.5 C 8.5,-0.5 9.5,-0.5 10.5,-0.5C 12.6659,41.2382 10.9992,82.9048 5.5,124.5C 5.60816,125.442 5.94149,126.275 6.5,127C 4.69399,139.086 4.36066,151.252 5.5,163.5C 4.71129,184.82 4.21129,206.153 4,227.5C 3.86153,240.961 2.86153,254.294 1,267.5C 0.721579,268.416 0.221579,269.082 -0.5,269.5C -0.5,226.5 -0.5,183.5 -0.5,140.5C 0.947266,139.378 1.94727,137.878 2.5,136C 1.76909,132.049 1.10243,128.049 0.5,124C 1.97199,118.284 3.13866,112.451 4,106.5C 4.79483,99.7823 4.62816,93.1157 3.5,86.5C 4.97794,75.374 6.31127,64.2074 7.5,53C 7.50663,51.1878 6.83997,49.6878 5.5,48.5C 6.61702,47.0506 7.28369,45.3839 7.5,43.5C 6.50695,28.7497 6.50695,14.083 7.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#362b34\",\n    d: \"M 484.5,-0.5 C 486.833,-0.5 489.167,-0.5 491.5,-0.5C 491.5,6.16667 491.5,12.8333 491.5,19.5C 491.5,19.8333 491.5,20.1667 491.5,20.5C 490.778,20.9175 490.278,21.5842 490,22.5C 488.004,22.0037 486.337,21.0037 485,19.5C 484.5,12.8417 484.334,6.17499 484.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#664842\",\n    d: \"M 159.5,-0.5 C 164.833,-0.5 170.167,-0.5 175.5,-0.5C 175.618,3.69524 174.785,7.69524 173,11.5C 172.667,10.8333 172.333,10.1667 172,9.5C 171.667,10.8333 171.333,12.1667 171,13.5C 170.404,7.28969 167.237,5.28969 161.5,7.5C 158.357,9.40337 157.69,12.07 159.5,15.5C 148.998,17.8184 138.332,18.8184 127.5,18.5C 120.833,18.5 114.167,18.5 107.5,18.5C 107.5,17.5 107.5,16.5 107.5,15.5C 114.167,15.5 120.833,15.5 127.5,15.5C 136.173,15.6664 144.84,15.4998 153.5,15C 156.231,12.1034 157.231,8.60345 156.5,4.5C 157.5,4.5 158.5,4.5 159.5,4.5C 159.5,3.5 159.5,2.5 159.5,1.5C 159.5,0.833333 159.5,0.166667 159.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#464256\",\n    d: \"M 537.5,4.5 C 538.348,6.09307 539.681,7.25974 541.5,8C 539.27,10.0627 536.603,11.396 533.5,12C 534.761,15.0185 536.095,14.8518 537.5,11.5C 538.739,13.0072 538.405,14.1739 536.5,15C 537.563,16.1882 538.897,16.6882 540.5,16.5C 541.254,18.5053 542.421,19.172 544,18.5C 544.333,19.1667 544.667,19.8333 545,20.5C 545.718,19.5494 546.551,19.3828 547.5,20C 544.238,21.5673 543.572,23.9006 545.5,27C 545.046,28.9386 544.379,30.772 543.5,32.5C 542.817,34.1765 541.483,34.8432 539.5,34.5C 540.953,33.1751 540.619,32.3418 538.5,32C 539.167,31.3333 539.833,30.6667 540.5,30C 538.963,28.8904 538.297,27.3904 538.5,25.5C 535.543,24.2069 532.543,22.8736 529.5,21.5C 528.14,22.1799 526.807,22.8466 525.5,23.5C 525.44,22.9569 525.107,22.6236 524.5,22.5C 523.14,23.1799 521.807,23.8466 520.5,24.5C 520.389,23.8826 520.056,23.3826 519.5,23C 521.732,21.4099 524.066,19.9099 526.5,18.5C 527.228,15.7875 528.061,13.1209 529,10.5C 532.474,11.9277 532.974,11.4277 530.5,9C 533.585,8.46975 535.918,6.96975 537.5,4.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6e5b60\",\n    d: \"M 520.5,-0.5 C 526.833,-0.5 533.167,-0.5 539.5,-0.5C 537.625,0.950792 536.958,2.61746 537.5,4.5C 535.918,6.96975 533.585,8.46975 530.5,9C 532.974,11.4277 532.474,11.9277 529,10.5C 528.061,13.1209 527.228,15.7875 526.5,18.5C 524.066,19.9099 521.732,21.4099 519.5,23C 520.056,23.3826 520.389,23.8826 520.5,24.5C 518.726,25.881 517.226,25.5477 516,23.5C 512.613,23.7611 509.446,25.0945 506.5,27.5C 505.375,26.6522 505.375,25.6522 506.5,24.5C 507.93,24.5792 509.264,24.2458 510.5,23.5C 511.48,20.9135 511.813,18.2469 511.5,15.5C 512.873,15.3433 514.207,15.51 515.5,16C 514.289,17.1131 514.289,18.2798 515.5,19.5C 518.068,20.8676 520.401,20.5342 522.5,18.5C 523.909,15.6034 523.576,12.9367 521.5,10.5C 521.931,9.70651 522.265,8.87318 522.5,8C 521.594,5.20939 520.927,2.37606 520.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#473132\",\n    d: \"M 159.5,15.5 C 159.5,16.1667 159.833,16.5 160.5,16.5C 162.631,17.3138 164.964,17.8138 167.5,18C 167.786,19.3877 167.452,20.8877 166.5,22.5C 166.5,22.8333 166.5,23.1667 166.5,23.5C 165.991,34.1466 165.158,34.1466 164,23.5C 163.583,22.244 162.75,21.5774 161.5,21.5C 158.833,21.5 156.167,21.5 153.5,21.5C 137.991,21.8295 122.658,21.4962 107.5,20.5C 114.167,19.8333 120.833,19.1667 127.5,18.5C 138.332,18.8184 148.998,17.8184 159.5,15.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#553c3a\",\n    d: \"M 175.5,-0.5 C 182.5,-0.5 189.5,-0.5 196.5,-0.5C 198.17,2.30634 197.837,4.80634 195.5,7C 190.167,7.33333 184.833,7.66667 179.5,8C 191.527,8.86898 203.527,9.20231 215.5,9C 220.566,12.0521 219.899,14.0521 213.5,15C 206.976,15.266 200.476,15.766 194,16.5C 192.774,16.3552 191.607,16.0219 190.5,15.5C 187.281,18.5216 183.615,19.355 179.5,18C 179.957,18.414 180.291,18.914 180.5,19.5C 186.78,20.6467 193.113,21.3134 199.5,21.5C 206.182,20.4961 212.849,20.4961 219.5,21.5C 222.412,21.0719 225.245,20.4053 228,19.5C 231.318,19.2307 233.485,20.5641 234.5,23.5C 234.167,23.5 233.833,23.5 233.5,23.5C 211.218,23.7186 188.885,23.3852 166.5,22.5C 167.452,20.8877 167.786,19.3877 167.5,18C 164.964,17.8138 162.631,17.3138 160.5,16.5C 162.591,16.6816 164.591,16.3482 166.5,15.5C 169.891,9.87107 168.225,7.20441 161.5,7.5C 167.237,5.28969 170.404,7.28969 171,13.5C 171.333,12.1667 171.667,10.8333 172,9.5C 172.333,10.1667 172.667,10.8333 173,11.5C 174.785,7.69524 175.618,3.69524 175.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c6174\",\n    d: \"M 119.5,22.5 C 124.177,22.8345 128.844,23.3345 133.5,24C 134.672,24.4186 135.672,25.0853 136.5,26C 134.981,27.3513 133.648,28.8513 132.5,30.5C 136.107,31.4892 139.774,31.8226 143.5,31.5C 143.799,33.604 143.466,35.604 142.5,37.5C 140.075,38.3076 137.742,39.3076 135.5,40.5C 135.931,41.2935 136.265,42.1268 136.5,43C 135.521,45.4333 134.855,47.9333 134.5,50.5C 132.833,50.5 131.167,50.5 129.5,50.5C 129.62,52.7345 129.287,54.9011 128.5,57C 126.042,58.5584 124.042,60.5584 122.5,63C 123.742,65.2723 125.408,67.1056 127.5,68.5C 125.386,69.784 124.386,71.784 124.5,74.5C 121.972,75.0114 119.472,75.6781 117,76.5C 116.24,74.9283 114.406,74.2616 111.5,74.5C 111.11,77.4658 111.777,80.1324 113.5,82.5C 111.771,84.8511 111.104,87.5178 111.5,90.5C 115.133,90.443 115.3,91.443 112,93.5C 108.712,92.2389 105.379,92.2389 102,93.5C 94.4084,90.0462 90.7418,92.7129 91,101.5C 88.7661,103.53 86.9327,105.863 85.5,108.5C 86.4095,110.814 88.0762,112.48 90.5,113.5C 92.0754,112.544 93.742,111.877 95.5,111.5C 94.9908,120.137 94.8241,128.804 95,137.5C 93.5576,139.391 92.3909,141.391 91.5,143.5C 91.1667,143.5 90.8333,143.5 90.5,143.5C 88.8333,143.5 87.1667,143.5 85.5,143.5C 85.6495,142.448 85.4828,141.448 85,140.5C 81.1954,138.027 77.6954,135.194 74.5,132C 73.1667,131.333 71.8333,131.333 70.5,132C 68.9242,134.077 66.9242,135.577 64.5,136.5C 62.7367,136.694 60.9033,136.694 59,136.5C 60.1851,141.248 61.6851,145.914 63.5,150.5C 63.5,150.833 63.5,151.167 63.5,151.5C 64.9807,153.247 66.9807,154.414 69.5,155C 73.1516,155.499 76.8183,155.665 80.5,155.5C 80.6823,160.489 78.349,163.655 73.5,165C 69.7401,166.071 66.7401,165.071 64.5,162C 61.5184,161.502 58.5184,161.335 55.5,161.5C 54.5614,164.803 53.5614,168.136 52.5,171.5C 50.5992,171.567 48.7659,171.233 47,170.5C 44.5972,172.983 42.2638,172.983 40,170.5C 39.4412,166.814 38.7745,163.147 38,159.5C 37.5001,143.503 37.3334,127.503 37.5,111.5C 38.2287,125.683 39.062,140.016 40,154.5C 40.2022,156.256 40.7022,157.922 41.5,159.5C 42.487,156.232 42.8204,152.898 42.5,149.5C 43.4916,142.352 43.825,135.019 43.5,127.5C 44.8333,127.5 46.1667,127.5 47.5,127.5C 50.4043,117.089 52.071,106.422 52.5,95.5C 54.8333,96.8333 57.1667,96.8333 59.5,95.5C 59.5,87.5 59.5,79.5 59.5,71.5C 60.675,71.719 61.675,71.3857 62.5,70.5C 63.3742,68.2534 63.7076,65.9201 63.5,63.5C 64.8333,63.5 66.1667,63.5 67.5,63.5C 67.5,60.8333 67.5,58.1667 67.5,55.5C 68.8333,55.5 70.1667,55.5 71.5,55.5C 71.5,52.8333 71.5,50.1667 71.5,47.5C 79.5,47.5 87.5,47.5 95.5,47.5C 95.5,44.8333 95.5,42.1667 95.5,39.5C 98.1667,39.5 100.833,39.5 103.5,39.5C 103.5,38.1667 103.5,36.8333 103.5,35.5C 106.167,35.5 108.833,35.5 111.5,35.5C 111.5,34.1667 111.5,32.8333 111.5,31.5C 116.875,31.8282 122.208,31.4948 127.5,30.5C 119.343,29.6092 111.343,28.2759 103.5,26.5C 103.5,25.5 103.5,24.5 103.5,23.5C 109.026,23.8214 114.36,23.4881 119.5,22.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#302e41\",\n    d: \"M 539.5,-0.5 C 547.5,-0.5 555.5,-0.5 563.5,-0.5C 563.5,4.83333 563.5,10.1667 563.5,15.5C 562.07,15.5792 560.736,15.2458 559.5,14.5C 558.673,16.162 557.507,17.4954 556,18.5C 555.567,20.6635 556.067,22.6635 557.5,24.5C 557.315,25.5837 556.982,26.5837 556.5,27.5C 555.215,25.5484 553.549,23.8818 551.5,22.5C 550.167,25.2882 549.334,28.6215 549,32.5C 547.229,32.9198 545.396,32.9198 543.5,32.5C 544.379,30.772 545.046,28.9386 545.5,27C 543.572,23.9006 544.238,21.5673 547.5,20C 546.551,19.3828 545.718,19.5494 545,20.5C 544.667,19.8333 544.333,19.1667 544,18.5C 542.421,19.172 541.254,18.5053 540.5,16.5C 538.897,16.6882 537.563,16.1882 536.5,15C 538.405,14.1739 538.739,13.0072 537.5,11.5C 536.095,14.8518 534.761,15.0185 533.5,12C 536.603,11.396 539.27,10.0627 541.5,8C 539.681,7.25974 538.348,6.09307 537.5,4.5C 536.958,2.61746 537.625,0.950792 539.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#434155\",\n    d: \"M 540.5,16.5 C 541.071,15.0267 541.071,13.36 540.5,11.5C 541.5,11.5 542.5,11.5 543.5,11.5C 543.343,10.1266 543.51,8.79323 544,7.5C 544.667,8.83333 545.333,8.83333 546,7.5C 546.483,6.55198 546.649,5.55198 546.5,4.5C 545.448,4.64945 544.448,4.48278 543.5,4C 545.235,3.34862 546.902,3.51529 548.5,4.5C 548.833,4.16667 549.167,3.83333 549.5,3.5C 548.189,2.74247 547.689,1.74247 548,0.5C 549.011,1.33663 550.178,1.66997 551.5,1.5C 552.014,3.51162 552.18,5.51162 552,7.5C 550.73,5.16388 549.23,5.16388 547.5,7.5C 549.185,9.01748 550.685,10.6841 552,12.5C 552.388,11.572 553.055,10.9054 554,10.5C 555.92,10.938 557.754,11.6047 559.5,12.5C 559.062,13.5063 558.396,13.5063 557.5,12.5C 556.571,13.6888 556.238,15.0222 556.5,16.5C 553.951,16.4411 551.951,17.4411 550.5,19.5C 549.494,19.0623 549.494,18.3957 550.5,17.5C 549.24,16.6184 548.074,15.6184 547,14.5C 545.286,18.277 544.619,18.277 545,14.5C 545.465,13.0692 546.299,11.9025 547.5,11C 546.552,10.5172 545.552,10.3505 544.5,10.5C 544.162,12.854 543.662,15.1873 543,17.5C 542.329,16.7476 541.496,16.4142 540.5,16.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3f2f2e\",\n    d: \"M 299.5,-0.5 C 311.5,-0.5 323.5,-0.5 335.5,-0.5C 335.662,1.5273 335.495,3.5273 335,5.5C 332.541,7.0503 331.874,9.0503 333,11.5C 328.474,14.6789 323.641,17.3455 318.5,19.5C 317.568,21.766 316.234,23.766 314.5,25.5C 313.833,27.8333 313.167,30.1667 312.5,32.5C 311.583,31.8728 310.583,31.5394 309.5,31.5C 307.804,31.3146 306.471,30.4813 305.5,29C 301.627,28.7297 297.794,28.2297 294,27.5C 291.2,29.0476 291.033,30.7143 293.5,32.5C 292.975,33.1924 292.308,33.6924 291.5,34C 292.973,34.7096 293.64,35.8762 293.5,37.5C 288.835,37.3568 284.835,38.8568 281.5,42C 278.593,42.8545 276.26,42.0212 274.5,39.5C 280.719,39.9937 285.386,37.6604 288.5,32.5C 288.167,31.8333 287.833,31.1667 287.5,30.5C 284.553,29.6786 281.553,29.1786 278.5,29C 281.553,28.8214 284.553,28.3214 287.5,27.5C 283.331,26.258 279.164,26.258 275,27.5C 272.813,26.9811 271.313,25.6477 270.5,23.5C 269.476,24.8532 268.143,25.5198 266.5,25.5C 266.5,24.5 266.5,23.5 266.5,22.5C 262.629,22.815 258.962,22.4816 255.5,21.5C 255.5,19.8333 255.5,18.1667 255.5,16.5C 264.134,15.4737 276.134,15.1403 291.5,15.5C 291.33,16.8221 291.663,17.9887 292.5,19C 294.705,20.427 296.872,20.927 299,20.5C 298.99,13.5683 299.157,6.56826 299.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#614f4e\",\n    d: \"M 166.5,23.5 C 166.5,23.1667 166.5,22.8333 166.5,22.5C 188.885,23.3852 211.218,23.7186 233.5,23.5C 234.739,29.9728 237.405,30.8061 241.5,26C 247.868,22.6717 253.534,23.6717 258.5,29C 257.627,30.045 256.627,30.8783 255.5,31.5C 250.966,34.0207 246.466,36.6873 242,39.5C 240.078,37.2112 238.745,34.5445 238,31.5C 236.942,36.8662 235.775,42.1995 234.5,47.5C 232.5,47.5 230.5,47.5 228.5,47.5C 229.641,46.661 230.974,45.9943 232.5,45.5C 233.988,39.5112 233.655,33.6779 231.5,28C 228.854,27.5026 226.187,27.3359 223.5,27.5C 222.864,36.5645 223.53,45.2312 225.5,53.5C 221.115,59.8649 216.448,65.8649 211.5,71.5C 209.304,71.5652 207.304,72.2319 205.5,73.5C 208.695,74.8287 209.028,76.4954 206.5,78.5C 207.689,79.4287 209.022,79.762 210.5,79.5C 210.666,84.8437 210.499,90.1771 210,95.5C 209.623,96.9423 208.79,97.9423 207.5,98.5C 207.631,97.6236 207.298,96.9569 206.5,96.5C 205.575,97.6405 204.741,97.6405 204,96.5C 203.501,90.8431 203.334,85.1764 203.5,79.5C 202.448,79.6495 201.448,79.4828 200.5,79C 203.841,76.5281 203.841,74.5281 200.5,73C 201.833,72.6667 203.167,72.3333 204.5,72C 202.679,69.544 202.012,66.7107 202.5,63.5C 203.5,63.5 204.5,63.5 205.5,63.5C 205.777,60.5525 205.444,57.7191 204.5,55C 206.953,53.1521 207.953,50.6521 207.5,47.5C 206.167,47.5 204.833,47.5 203.5,47.5C 203.5,42.1667 203.5,36.8333 203.5,31.5C 199.5,31.5 195.5,31.5 191.5,31.5C 191.5,29.8333 191.5,28.1667 191.5,26.5C 185.748,27.1116 180.082,27.445 174.5,27.5C 171.591,26.5762 168.924,25.2428 166.5,23.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#736475\",\n    d: \"M 95.5,16.5 C 96.8333,16.5 98.1667,16.5 99.5,16.5C 100.289,19.4343 102.289,21.2676 105.5,22C 110.155,22.4992 114.821,22.6658 119.5,22.5C 114.36,23.4881 109.026,23.8214 103.5,23.5C 103.5,24.5 103.5,25.5 103.5,26.5C 111.343,28.2759 119.343,29.6092 127.5,30.5C 122.208,31.4948 116.875,31.8282 111.5,31.5C 111.5,32.8333 111.5,34.1667 111.5,35.5C 108.833,35.5 106.167,35.5 103.5,35.5C 103.5,36.8333 103.5,38.1667 103.5,39.5C 100.833,39.5 98.1667,39.5 95.5,39.5C 95.5,42.1667 95.5,44.8333 95.5,47.5C 87.5,47.5 79.5,47.5 71.5,47.5C 71.5,50.1667 71.5,52.8333 71.5,55.5C 70.1667,55.5 68.8333,55.5 67.5,55.5C 67.5,58.1667 67.5,60.8333 67.5,63.5C 66.1667,63.5 64.8333,63.5 63.5,63.5C 63.7076,65.9201 63.3742,68.2534 62.5,70.5C 61.675,71.3857 60.675,71.719 59.5,71.5C 59.5,79.5 59.5,87.5 59.5,95.5C 57.1667,96.8333 54.8333,96.8333 52.5,95.5C 52.071,106.422 50.4043,117.089 47.5,127.5C 46.1667,127.5 44.8333,127.5 43.5,127.5C 43.825,135.019 43.4916,142.352 42.5,149.5C 40.2792,126.354 39.2792,103.021 39.5,79.5C 40.8333,79.5 42.1667,79.5 43.5,79.5C 42.979,75.2811 44.1457,71.6145 47,68.5C 47.4998,59.1726 47.6665,49.8393 47.5,40.5C 50.8499,40.665 54.1832,40.4983 57.5,40C 56.3159,38.8197 55.6493,37.3197 55.5,35.5C 55.837,32.8236 56.1703,30.157 56.5,27.5C 53.2136,27.9288 50.0469,27.9288 47,27.5C 45.8118,28.5634 45.3118,29.8967 45.5,31.5C 44.1779,31.67 43.0113,31.3366 42,30.5C 41.5,28.5 41,26.5 40.5,24.5C 41.1984,23.1374 41.1984,21.9707 40.5,21C 43.9249,18.7582 45.9249,19.2582 46.5,22.5C 50.2378,20.6925 54.2378,19.6925 58.5,19.5C 70.7391,19.6101 83.0724,19.6101 95.5,19.5C 95.5,18.5 95.5,17.5 95.5,16.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#786572\",\n    d: \"M 39.5,15.5 C 57.9925,16.4969 76.6592,16.8302 95.5,16.5C 95.5,17.5 95.5,18.5 95.5,19.5C 83.0724,19.6101 70.7391,19.6101 58.5,19.5C 54.2378,19.6925 50.2378,20.6925 46.5,22.5C 45.9249,19.2582 43.9249,18.7582 40.5,21C 41.1984,21.9707 41.1984,23.1374 40.5,24.5C 41,26.5 41.5,28.5 42,30.5C 43.0113,31.3366 44.1779,31.67 45.5,31.5C 45.3118,29.8967 45.8118,28.5634 47,27.5C 50.0469,27.9288 53.2136,27.9288 56.5,27.5C 56.1703,30.157 55.837,32.8236 55.5,35.5C 55.6493,37.3197 56.3159,38.8197 57.5,40C 54.1832,40.4983 50.8499,40.665 47.5,40.5C 47.6665,49.8393 47.4998,59.1726 47,68.5C 44.1457,71.6145 42.979,75.2811 43.5,79.5C 42.1667,79.5 40.8333,79.5 39.5,79.5C 38.5029,59.6736 38.1695,39.6736 38.5,19.5C 38.2322,17.901 38.5655,16.5676 39.5,15.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#675a65\",\n    d: \"M 506.5,24.5 C 505.375,25.6522 505.375,26.6522 506.5,27.5C 506.5,28.5 506.5,29.5 506.5,30.5C 505.5,30.5 504.5,30.5 503.5,30.5C 503.5,31.5 503.5,32.5 503.5,33.5C 500.193,32.9492 496.86,32.6159 493.5,32.5C 492.172,31.4928 491.172,30.1595 490.5,28.5C 491.393,25.9159 491.726,23.2492 491.5,20.5C 491.5,20.1667 491.5,19.8333 491.5,19.5C 492.404,20.209 492.737,21.209 492.5,22.5C 493.5,22.5 494.5,22.5 495.5,22.5C 495.5,20.1667 495.5,17.8333 495.5,15.5C 499.555,15.1758 503.555,15.5091 507.5,16.5C 505.823,19.1117 505.49,21.7784 506.5,24.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4a424f\",\n    d: \"M 483.5,-0.5 C 483.833,-0.5 484.167,-0.5 484.5,-0.5C 484.334,6.17499 484.5,12.8417 485,19.5C 486.337,21.0037 488.004,22.0037 490,22.5C 490.278,21.5842 490.778,20.9175 491.5,20.5C 491.726,23.2492 491.393,25.9159 490.5,28.5C 491.172,30.1595 492.172,31.4928 493.5,32.5C 491.173,32.3354 489.007,31.6687 487,30.5C 485.989,31.3366 484.822,31.67 483.5,31.5C 483.5,29.8333 483.5,28.1667 483.5,26.5C 483.5,17.5 483.5,8.5 483.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f2937\",\n    d: \"M 525.5,23.5 C 524.983,26.3678 524.65,29.0345 524.5,31.5C 523.228,30.954 521.894,30.6207 520.5,30.5C 517.27,32.0318 514.103,33.6985 511,35.5C 509.419,33.153 508.086,33.153 507,35.5C 505.49,33.1247 503.99,33.2914 502.5,36C 503.291,37.101 503.291,37.9344 502.5,38.5C 499.86,34.1052 496.526,33.4385 492.5,36.5C 490.482,35.9528 488.649,34.9528 487,33.5C 486.241,35.0629 485.074,36.0629 483.5,36.5C 483.5,34.8333 483.5,33.1667 483.5,31.5C 484.822,31.67 485.989,31.3366 487,30.5C 489.007,31.6687 491.173,32.3354 493.5,32.5C 496.86,32.6159 500.193,32.9492 503.5,33.5C 503.5,32.5 503.5,31.5 503.5,30.5C 504.5,30.5 505.5,30.5 506.5,30.5C 506.5,29.5 506.5,28.5 506.5,27.5C 509.446,25.0945 512.613,23.7611 516,23.5C 517.226,25.5477 518.726,25.881 520.5,24.5C 521.807,23.8466 523.14,23.1799 524.5,22.5C 525.107,22.6236 525.44,22.9569 525.5,23.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8e808c\",\n    d: \"M 16.5,-0.5 C 18.8333,-0.5 21.1667,-0.5 23.5,-0.5C 23.8207,6.26707 23.1541,12.9337 21.5,19.5C 21.5826,23.748 21.9159,28.0813 22.5,32.5C 21.6818,48.1223 21.1818,63.789 21,79.5C 18.1881,106.506 16.0214,133.172 14.5,159.5C 13.8324,156.694 13.1657,154.028 12.5,151.5C 12.2505,148.998 11.9172,146.498 11.5,144C 12.6388,128.501 13.8054,113.001 15,97.5C 15.3829,64.8297 15.8829,32.163 16.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6b697f\",\n    d: \"M 556.5,27.5 C 556.117,31.0742 556.117,34.4075 556.5,37.5C 557.36,39.9307 559.027,41.264 561.5,41.5C 561.545,44.0772 560.545,46.0772 558.5,47.5C 557.194,46.0322 555.694,44.6988 554,43.5C 553.798,41.7444 553.298,40.0777 552.5,38.5C 550.985,40.0822 549.319,41.4155 547.5,42.5C 546.178,42.67 545.011,42.3366 544,41.5C 543.667,42.1667 543.333,42.8333 543,43.5C 542,42.5 541,41.5 540,40.5C 539.292,41.3805 538.458,42.0472 537.5,42.5C 537.062,42.5654 536.728,42.3988 536.5,42C 538.377,39.874 539.377,37.374 539.5,34.5C 541.483,34.8432 542.817,34.1765 543.5,32.5C 545.396,32.9198 547.229,32.9198 549,32.5C 549.334,28.6215 550.167,25.2882 551.5,22.5C 553.549,23.8818 555.215,25.5484 556.5,27.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#53403c\",\n    d: \"M 211.5,71.5 C 216.448,65.8649 221.115,59.8649 225.5,53.5C 227.405,51.951 227.739,50.1176 226.5,48C 227.094,47.5357 227.761,47.369 228.5,47.5C 230.5,47.5 232.5,47.5 234.5,47.5C 235.775,42.1995 236.942,36.8662 238,31.5C 238.745,34.5445 240.078,37.2112 242,39.5C 246.466,36.6873 250.966,34.0207 255.5,31.5C 254.697,32.4232 254.53,33.4232 255,34.5C 258.496,31.5018 262.329,30.5018 266.5,31.5C 266.48,33.143 267.147,34.4763 268.5,35.5C 267.167,36.8333 265.833,36.8333 264.5,35.5C 265.855,34.3247 265.688,33.3247 264,32.5C 263.654,34.2182 263.154,35.8849 262.5,37.5C 263.529,37.2964 264.529,37.7964 265.5,39C 264.833,39.3333 264.167,39.6667 263.5,40C 265.783,40.2912 267.95,39.7912 270,38.5C 271.059,38.6301 271.892,39.1301 272.5,40C 268.104,43.4731 263.104,45.8064 257.5,47C 256.253,51.5939 253.753,55.4273 250,58.5C 249.424,60.3774 249.591,62.2108 250.5,64C 249.095,70.1192 247.928,76.2859 247,82.5C 246.667,81.5 246.333,80.5 246,79.5C 241.045,79.6016 235.878,79.6016 230.5,79.5C 230.338,81.5273 230.505,83.5273 231,85.5C 231.595,81.9178 232.929,81.5845 235,84.5C 235.483,85.448 235.649,86.448 235.5,87.5C 233.092,88.0613 230.759,88.5613 228.5,89C 226.005,86.0837 224.838,82.5837 225,78.5C 224.586,78.9574 224.086,79.2907 223.5,79.5C 219.757,76.5178 216.757,77.1845 214.5,81.5C 213.702,83.0777 213.202,84.7444 213,86.5C 212.367,81.3224 211.867,76.3224 211.5,71.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#261a1b\",\n    d: \"M 309.5,31.5 C 311.322,33.0101 313.322,34.3434 315.5,35.5C 321.325,38.4289 326.992,41.9289 332.5,46C 333.448,46.4828 334.448,46.6495 335.5,46.5C 334.081,47.4511 332.415,47.7845 330.5,47.5C 326.5,47.5 322.5,47.5 318.5,47.5C 318.66,49.1992 318.494,50.8659 318,52.5C 317.111,51.1118 316.611,51.2785 316.5,53C 319.39,54.8918 319.056,55.7251 315.5,55.5C 315.142,58.8981 315.808,62.0647 317.5,65C 316.783,66.531 315.783,67.8643 314.5,69C 315.429,72.4843 315.762,75.8177 315.5,79C 314.552,79.4828 313.552,79.6495 312.5,79.5C 311.829,68.9786 309.496,58.8119 305.5,49C 305.57,48.2352 305.903,47.7352 306.5,47.5C 307.815,48.4756 309.148,49.4756 310.5,50.5C 311.725,48.1567 311.059,46.3234 308.5,45C 304.825,42.1401 300.825,39.9734 296.5,38.5C 295.609,37.8902 294.609,37.5569 293.5,37.5C 293.64,35.8762 292.973,34.7096 291.5,34C 292.308,33.6924 292.975,33.1924 293.5,32.5C 291.033,30.7143 291.2,29.0476 294,27.5C 297.794,28.2297 301.627,28.7297 305.5,29C 306.471,30.4813 307.804,31.3146 309.5,31.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d3c39\",\n    d: \"M 255.5,21.5 C 258.962,22.4816 262.629,22.815 266.5,22.5C 266.5,23.5 266.5,24.5 266.5,25.5C 268.143,25.5198 269.476,24.8532 270.5,23.5C 271.313,25.6477 272.813,26.9811 275,27.5C 279.164,26.258 283.331,26.258 287.5,27.5C 284.553,28.3214 281.553,28.8214 278.5,29C 281.553,29.1786 284.553,29.6786 287.5,30.5C 287.833,31.1667 288.167,31.8333 288.5,32.5C 285.386,37.6604 280.719,39.9937 274.5,39.5C 276.26,42.0212 278.593,42.8545 281.5,42C 284.835,38.8568 288.835,37.3568 293.5,37.5C 294.609,37.5569 295.609,37.8902 296.5,38.5C 295.766,39.7079 295.433,41.0413 295.5,42.5C 293.833,42.5 292.167,42.5 290.5,42.5C 290.649,41.448 290.483,40.448 290,39.5C 285.664,40.8076 284.831,43.1409 287.5,46.5C 286.963,47.7412 286.296,48.9079 285.5,50C 287.542,56.6654 288.042,63.4988 287,70.5C 284.833,72.8302 283.166,75.4968 282,78.5C 280.795,79.0712 279.628,79.7379 278.5,80.5C 277.965,82.6608 277.132,84.6608 276,86.5C 275.703,83.086 275.036,79.7527 274,76.5C 273.086,80.1418 272.252,83.8085 271.5,87.5C 270.914,87.2907 270.414,86.9574 270,86.5C 269.503,84.1902 269.337,81.8568 269.5,79.5C 268.5,79.5 267.5,79.5 266.5,79.5C 266.342,76.4545 267.009,73.6212 268.5,71C 267.451,70.5078 266.451,70.6744 265.5,71.5C 264.727,73.813 264.06,76.1463 263.5,78.5C 262.5,79.1667 261.5,79.8333 260.5,80.5C 261.167,81.5 261.833,82.5 262.5,83.5C 260.955,85.5434 259.621,87.71 258.5,90C 258.851,93.104 259.351,92.9374 260,89.5C 260.513,90.5266 261.013,91.5266 261.5,92.5C 261.5,93.5 261.5,94.5 261.5,95.5C 260.326,96.5137 259.66,97.847 259.5,99.5C 258.542,99.9528 257.708,100.619 257,101.5C 256.667,101.167 256.333,100.833 256,100.5C 255.517,101.448 255.351,102.448 255.5,103.5C 252.482,103.335 249.482,103.502 246.5,104C 247.604,105.131 247.271,105.965 245.5,106.5C 243.073,104.041 240.073,103.041 236.5,103.5C 236.5,100.833 236.5,98.1667 236.5,95.5C 234.857,95.4802 233.524,96.1468 232.5,97.5C 231.589,100.576 229.756,102.909 227,104.5C 225.99,107.661 224.657,110.661 223,113.5C 221.743,115.746 219.91,117.079 217.5,117.5C 217.221,120.118 216.554,122.618 215.5,125C 216.737,125.232 217.737,125.732 218.5,126.5C 216.567,127.642 215.067,129.308 214,131.5C 213.693,122.428 212.859,113.428 211.5,104.5C 208.813,104.664 206.146,104.497 203.5,104C 205.838,102.838 207.172,101.004 207.5,98.5C 208.79,97.9423 209.623,96.9423 210,95.5C 210.499,90.1771 210.666,84.8437 210.5,79.5C 209.022,79.762 207.689,79.4287 206.5,78.5C 209.028,76.4954 208.695,74.8287 205.5,73.5C 207.304,72.2319 209.304,71.5652 211.5,71.5C 211.867,76.3224 212.367,81.3224 213,86.5C 213.202,84.7444 213.702,83.0777 214.5,81.5C 216.757,77.1845 219.757,76.5178 223.5,79.5C 224.086,79.2907 224.586,78.9574 225,78.5C 224.838,82.5837 226.005,86.0837 228.5,89C 230.759,88.5613 233.092,88.0613 235.5,87.5C 235.649,86.448 235.483,85.448 235,84.5C 232.929,81.5845 231.595,81.9178 231,85.5C 230.505,83.5273 230.338,81.5273 230.5,79.5C 235.878,79.6016 241.045,79.6016 246,79.5C 246.333,80.5 246.667,81.5 247,82.5C 247.928,76.2859 249.095,70.1192 250.5,64C 249.591,62.2108 249.424,60.3774 250,58.5C 253.753,55.4273 256.253,51.5939 257.5,47C 263.104,45.8064 268.104,43.4731 272.5,40C 271.892,39.1301 271.059,38.6301 270,38.5C 267.95,39.7912 265.783,40.2912 263.5,40C 264.167,39.6667 264.833,39.3333 265.5,39C 264.529,37.7964 263.529,37.2964 262.5,37.5C 263.154,35.8849 263.654,34.2182 264,32.5C 265.688,33.3247 265.855,34.3247 264.5,35.5C 265.833,36.8333 267.167,36.8333 268.5,35.5C 267.147,34.4763 266.48,33.143 266.5,31.5C 262.329,30.5018 258.496,31.5018 255,34.5C 254.53,33.4232 254.697,32.4232 255.5,31.5C 256.627,30.8783 257.627,30.045 258.5,29C 253.534,23.6717 247.868,22.6717 241.5,26C 237.405,30.8061 234.739,29.9728 233.5,23.5C 233.833,23.5 234.167,23.5 234.5,23.5C 241.276,21.666 248.276,20.9993 255.5,21.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#39384b\",\n    d: \"M 558.5,47.5 C 556.326,47.0798 554.326,47.0798 552.5,47.5C 551.176,45.5535 549.51,45.5535 547.5,47.5C 546.957,47.44 546.624,47.1067 546.5,46.5C 547.376,45.7492 548.376,45.2492 549.5,45C 548.244,44.5831 547.577,43.7498 547.5,42.5C 549.319,41.4155 550.985,40.0822 552.5,38.5C 553.298,40.0777 553.798,41.7444 554,43.5C 555.694,44.6988 557.194,46.0322 558.5,47.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#75606c\",\n    d: \"M 228.5,47.5 C 227.761,47.369 227.094,47.5357 226.5,48C 227.739,50.1176 227.405,51.951 225.5,53.5C 223.53,45.2312 222.864,36.5645 223.5,27.5C 226.187,27.3359 228.854,27.5026 231.5,28C 233.655,33.6779 233.988,39.5112 232.5,45.5C 230.974,45.9943 229.641,46.661 228.5,47.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#635052\",\n    d: \"M 161.5,21.5 C 162.75,21.5774 163.583,22.244 164,23.5C 165.158,34.1466 165.991,34.1466 166.5,23.5C 168.924,25.2428 171.591,26.5762 174.5,27.5C 180.082,27.445 185.748,27.1116 191.5,26.5C 191.5,28.1667 191.5,29.8333 191.5,31.5C 195.5,31.5 199.5,31.5 203.5,31.5C 203.5,36.8333 203.5,42.1667 203.5,47.5C 204.833,47.5 206.167,47.5 207.5,47.5C 207.953,50.6521 206.953,53.1521 204.5,55C 205.444,57.7191 205.777,60.5525 205.5,63.5C 204.5,63.5 203.5,63.5 202.5,63.5C 202.012,66.7107 202.679,69.544 204.5,72C 203.167,72.3333 201.833,72.6667 200.5,73C 203.841,74.5281 203.841,76.5281 200.5,79C 201.448,79.4828 202.448,79.6495 203.5,79.5C 203.334,85.1764 203.501,90.8431 204,96.5C 204.741,97.6405 205.575,97.6405 206.5,96.5C 207.298,96.9569 207.631,97.6236 207.5,98.5C 207.172,101.004 205.838,102.838 203.5,104C 206.146,104.497 208.813,104.664 211.5,104.5C 212.859,113.428 213.693,122.428 214,131.5C 215.067,129.308 216.567,127.642 218.5,126.5C 218.328,127.492 218.662,128.158 219.5,128.5C 221.037,131.918 223.204,134.918 226,137.5C 226.711,139.899 226.544,142.232 225.5,144.5C 227.259,145.754 228.759,145.421 230,143.5C 230.464,144.094 230.631,144.761 230.5,145.5C 228.337,146.418 226.171,147.418 224,148.5C 223.83,159.674 223.33,170.674 222.5,181.5C 223.152,177.44 221.485,175.44 217.5,175.5C 212.695,174.513 207.695,174.179 202.5,174.5C 203.452,172.888 203.786,171.388 203.5,170C 198.206,169.182 198.206,168.682 203.5,168.5C 202.876,160.181 202.543,151.848 202.5,143.5C 204.167,143.5 205.833,143.5 207.5,143.5C 207.5,148.833 207.5,154.167 207.5,159.5C 208.833,159.5 210.167,159.5 211.5,159.5C 211.406,153.753 210.74,148.086 209.5,142.5C 209.833,142.167 210.167,141.833 210.5,141.5C 211.258,142.811 212.258,143.311 213.5,143C 211.623,140.749 210.123,138.249 209,135.5C 208.667,136.5 208.333,137.5 208,138.5C 206.758,137.128 205.258,136.128 203.5,135.5C 202.52,132.914 202.187,130.247 202.5,127.5C 204.167,127.5 205.833,127.5 207.5,127.5C 207.5,122.167 207.5,116.833 207.5,111.5C 206.178,111.67 205.011,111.337 204,110.5C 202.971,116.117 202.138,116.45 201.5,111.5C 200.5,111.5 199.5,111.5 198.5,111.5C 198.433,90.1615 198.1,68.8282 197.5,47.5C 189.833,47.5 182.167,47.5 174.5,47.5C 174.5,42.1667 174.5,36.8333 174.5,31.5C 170.488,30.8874 168.488,32.5541 168.5,36.5C 167.522,68.4688 167.189,100.469 167.5,132.5C 167.358,148.69 168.025,164.69 169.5,180.5C 168.4,181.605 167.733,182.938 167.5,184.5C 167.083,187.159 166.083,189.492 164.5,191.5C 163.596,141 162.929,90.3334 162.5,39.5C 162.789,33.4093 162.455,27.4093 161.5,21.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#67535c\",\n    d: \"M 198.5,111.5 C 197.355,115.311 197.188,119.311 198,123.5C 198.333,123.833 198.667,124.167 199,124.5C 199.202,122.744 199.702,121.078 200.5,119.5C 201.48,122.086 201.813,124.753 201.5,127.5C 199.833,127.5 198.167,127.5 196.5,127.5C 195.516,132.658 194.683,132.658 194,127.5C 193.623,128.942 192.79,129.942 191.5,130.5C 191.5,123.167 191.5,115.833 191.5,108.5C 185.309,106.878 184.976,104.211 190.5,100.5C 190.023,99.5224 189.357,98.6891 188.5,98C 184.615,96.4616 180.282,95.6282 175.5,95.5C 175.666,90.1563 175.499,84.8229 175,79.5C 174.667,81.1667 174.333,82.8333 174,84.5C 173.29,83.0267 172.124,82.3601 170.5,82.5C 170.657,83.8734 170.49,85.2068 170,86.5C 169.689,84.444 169.189,82.444 168.5,80.5C 169.824,65.7057 169.824,51.039 168.5,36.5C 168.488,32.5541 170.488,30.8874 174.5,31.5C 174.5,36.8333 174.5,42.1667 174.5,47.5C 182.167,47.5 189.833,47.5 197.5,47.5C 198.1,68.8282 198.433,90.1615 198.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5d4c50\",\n    d: \"M 435.5,-0.5 C 435.833,-0.5 436.167,-0.5 436.5,-0.5C 436.333,10.1719 436.5,20.8385 437,31.5C 437.333,26.1667 437.667,20.8333 438,15.5C 438.177,19.3563 438.677,23.023 439.5,26.5C 440.018,32.9586 439.685,39.4586 438.5,46C 440.435,59.7324 442.102,73.5658 443.5,87.5C 443.16,91.5577 442.493,95.5577 441.5,99.5C 442.388,108.811 442.721,118.144 442.5,127.5C 440.863,117.034 439.863,106.368 439.5,95.5C 438.5,95.5 437.5,95.5 436.5,95.5C 436.167,95.5 435.833,95.5 435.5,95.5C 435.5,80.5 435.5,65.5 435.5,50.5C 435.5,33.5 435.5,16.5 435.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c5c65\",\n    d: \"M 444.5,-0.5 C 450.833,-0.5 457.167,-0.5 463.5,-0.5C 463.821,6.26707 463.154,12.9337 461.5,19.5C 462.811,23.4068 463.478,27.4068 463.5,31.5C 462.5,31.5 461.5,31.5 460.5,31.5C 460.334,39.5069 460.5,47.5069 461,55.5C 461.182,52.7737 461.682,50.1071 462.5,47.5C 462.833,51.5 463.167,55.5 463.5,59.5C 461.512,71.4095 460.512,83.4095 460.5,95.5C 459.833,106.167 459.167,116.833 458.5,127.5C 457.046,113.725 455.046,99.8918 452.5,86C 453.846,81.5564 453.18,77.3897 450.5,73.5C 449.592,61.8614 449.592,50.1947 450.5,38.5C 449.667,36.8333 448.833,35.1667 448,33.5C 447.307,22.0996 446.141,10.7663 444.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6a5a65\",\n    d: \"M 36.5,18.5 C 37.1667,18.8333 37.8333,19.1667 38.5,19.5C 38.1695,39.6736 38.5029,59.6736 39.5,79.5C 39.2792,103.021 40.2792,126.354 42.5,149.5C 42.8204,152.898 42.487,156.232 41.5,159.5C 40.7022,157.922 40.2022,156.256 40,154.5C 39.062,140.016 38.2287,125.683 37.5,111.5C 37.5,106.167 37.5,100.833 37.5,95.5C 36.5,95.5 35.5,95.5 34.5,95.5C 34.5,90.1667 34.5,84.8333 34.5,79.5C 33.5,79.5 32.5,79.5 31.5,79.5C 31.5,76.8333 31.5,74.1667 31.5,71.5C 30.8519,57.7914 31.5186,44.4581 33.5,31.5C 33.543,41.188 34.043,50.8547 35,60.5C 35.3333,59.8333 35.6667,59.1667 36,58.5C 36.4999,45.1708 36.6666,31.8375 36.5,18.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#695c69\",\n    d: \"M 39.5,15.5 C 60.8437,15.167 82.1771,15.5003 103.5,16.5C 103.965,18.8083 105.299,20.1416 107.5,20.5C 122.658,21.4962 137.991,21.8295 153.5,21.5C 153.5,27.5 153.5,33.5 153.5,39.5C 149.569,40.1322 146.235,41.7989 143.5,44.5C 141.574,45.2423 139.741,46.2423 138,47.5C 137.667,53.8333 137.333,60.1667 137,66.5C 134.174,68.3398 131.007,69.0065 127.5,68.5C 125.408,67.1056 123.742,65.2723 122.5,63C 124.042,60.5584 126.042,58.5584 128.5,57C 129.287,54.9011 129.62,52.7345 129.5,50.5C 131.167,50.5 132.833,50.5 134.5,50.5C 134.855,47.9333 135.521,45.4333 136.5,43C 136.265,42.1268 135.931,41.2935 135.5,40.5C 137.742,39.3076 140.075,38.3076 142.5,37.5C 143.466,35.604 143.799,33.604 143.5,31.5C 139.774,31.8226 136.107,31.4892 132.5,30.5C 133.648,28.8513 134.981,27.3513 136.5,26C 135.672,25.0853 134.672,24.4186 133.5,24C 128.844,23.3345 124.177,22.8345 119.5,22.5C 114.821,22.6658 110.155,22.4992 105.5,22C 102.289,21.2676 100.289,19.4343 99.5,16.5C 98.1667,16.5 96.8333,16.5 95.5,16.5C 76.6592,16.8302 57.9925,16.4969 39.5,15.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#816e7a\",\n    d: \"M 153.5,21.5 C 156.167,21.5 158.833,21.5 161.5,21.5C 162.455,27.4093 162.789,33.4093 162.5,39.5C 161.504,55.3246 161.17,71.3246 161.5,87.5C 160.834,90.0277 160.168,92.6944 159.5,95.5C 157.799,94.198 156.632,92.5313 156,90.5C 155.667,90.8333 155.333,91.1667 155,91.5C 154.79,89.9419 154.29,88.6085 153.5,87.5C 153.5,79.5 153.5,71.5 153.5,63.5C 153.5,55.5 153.5,47.5 153.5,39.5C 153.5,33.5 153.5,27.5 153.5,21.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0b17\",\n    d: \"M 563.5,15.5 C 563.5,34.8333 563.5,54.1667 563.5,73.5C 562.549,72.0813 562.216,70.4147 562.5,68.5C 560.738,68.3573 559.071,68.6906 557.5,69.5C 556.249,72.8741 556.249,76.2074 557.5,79.5C 555.833,79.5 554.167,79.5 552.5,79.5C 552.912,77.0274 551.912,75.6941 549.5,75.5C 549.082,74.7784 548.416,74.2784 547.5,74C 548.777,71.1947 547.777,68.6947 544.5,66.5C 543.877,68.9661 543.043,71.2994 542,73.5C 541.612,72.572 540.945,71.9054 540,71.5C 537.172,73.0722 536.172,75.4056 537,78.5C 537.554,75.4923 539.054,74.4923 541.5,75.5C 542.123,77.6945 542.457,79.8611 542.5,82C 540.557,81.6948 538.557,81.6948 536.5,82C 537.328,82.9147 538.328,83.5814 539.5,84C 539.043,84.414 538.709,84.914 538.5,85.5C 539.441,85.4895 540.108,85.9895 540.5,87C 539.765,90.4584 538.765,93.2917 537.5,95.5C 535.347,94.4271 533.347,94.4271 531.5,95.5C 528.022,95.8158 524.688,95.3158 521.5,94C 520.167,93.3333 520.167,92.6667 521.5,92C 520.672,91.0853 519.672,90.4186 518.5,90C 520.002,89.4169 521.335,88.5836 522.5,87.5C 519.748,85.6639 516.748,84.6639 513.5,84.5C 513.5,82.8333 513.5,81.1667 513.5,79.5C 515.471,77.4066 517.804,75.74 520.5,74.5C 522.367,77.2291 523.367,76.8957 523.5,73.5C 525.39,73.7035 526.89,73.0368 528,71.5C 532.305,77.1493 533.971,76.816 533,70.5C 531.054,69.253 529.22,67.9197 527.5,66.5C 528.262,66.0894 529.262,65.9227 530.5,66C 529.135,64.3181 527.635,64.1514 526,65.5C 525.544,64.2559 526.044,63.4226 527.5,63C 524.62,63.3651 521.787,63.1984 519,62.5C 515.813,63.9368 513.48,66.2702 512,69.5C 511.737,63.0093 510.903,56.676 509.5,50.5C 509.5,48.5 509.5,46.5 509.5,44.5C 513.001,46.1925 515.001,45.0258 515.5,41C 517.218,40.654 518.885,40.154 520.5,39.5C 522.109,40.8883 523.942,41.8883 526,42.5C 527.912,42.3236 529.745,42.3236 531.5,42.5C 531.586,43.4959 531.252,44.3292 530.5,45C 531.793,45.49 533.127,45.6567 534.5,45.5C 534.943,49.2456 535.943,51.2456 537.5,51.5C 539.143,51.4802 540.476,52.1468 541.5,53.5C 543.432,52.8545 544.599,51.5212 545,49.5C 545.383,50.056 545.883,50.3893 546.5,50.5C 547.404,49.791 547.737,48.791 547.5,47.5C 549.51,45.5535 551.176,45.5535 552.5,47.5C 554.326,47.0798 556.326,47.0798 558.5,47.5C 560.545,46.0772 561.545,44.0772 561.5,41.5C 559.027,41.264 557.36,39.9307 556.5,37.5C 556.117,34.4075 556.117,31.0742 556.5,27.5C 556.982,26.5837 557.315,25.5837 557.5,24.5C 556.067,22.6635 555.567,20.6635 556,18.5C 557.507,17.4954 558.673,16.162 559.5,14.5C 560.736,15.2458 562.07,15.5792 563.5,15.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#504d62\",\n    d: \"M 536.5,43.5 C 536.67,44.8221 536.337,45.9887 535.5,47C 538.779,46.5896 542.112,46.9229 545.5,48C 546.252,48.6708 546.586,49.5041 546.5,50.5C 545.883,50.3893 545.383,50.056 545,49.5C 544.599,51.5212 543.432,52.8545 541.5,53.5C 540.476,52.1468 539.143,51.4802 537.5,51.5C 535.943,51.2456 534.943,49.2456 534.5,45.5C 533.127,45.6567 531.793,45.49 530.5,45C 531.252,44.3292 531.586,43.4959 531.5,42.5C 532.15,42.1961 532.817,41.8627 533.5,41.5C 534.265,42.6119 535.265,43.2786 536.5,43.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e1f32\",\n    d: \"M 547.5,42.5 C 547.577,43.7498 548.244,44.5831 549.5,45C 548.376,45.2492 547.376,45.7492 546.5,46.5C 546.624,47.1067 546.957,47.44 547.5,47.5C 547.737,48.791 547.404,49.791 546.5,50.5C 546.586,49.5041 546.252,48.6708 545.5,48C 542.112,46.9229 538.779,46.5896 535.5,47C 536.337,45.9887 536.67,44.8221 536.5,43.5C 537.167,43.5 537.5,43.1667 537.5,42.5C 538.458,42.0472 539.292,41.3805 540,40.5C 541,41.5 542,42.5 543,43.5C 543.333,42.8333 543.667,42.1667 544,41.5C 545.011,42.3366 546.178,42.67 547.5,42.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d3f48\",\n    d: \"M 491.5,38.5 C 491.171,51.3443 491.505,64.011 492.5,76.5C 492.44,77.0431 492.107,77.3764 491.5,77.5C 490.175,64.3394 490.175,51.3394 491.5,38.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#77626c\",\n    d: \"M 491.5,38.5 C 493.415,38.2155 495.081,38.5489 496.5,39.5C 496.334,48.8393 496.5,58.1726 497,67.5C 498.084,69.7823 499.584,70.1157 501.5,68.5C 501.5,69.5 501.5,70.5 501.5,71.5C 500.209,71.2627 499.209,71.596 498.5,72.5C 496.205,73.4746 494.205,74.8079 492.5,76.5C 491.505,64.011 491.171,51.3443 491.5,38.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#614f52\",\n    d: \"M 496.5,39.5 C 500.814,40.2745 505.147,40.9412 509.5,41.5C 509.5,42.5 509.5,43.5 509.5,44.5C 509.5,46.5 509.5,48.5 509.5,50.5C 511.698,58.9726 509.032,64.9726 501.5,68.5C 499.584,70.1157 498.084,69.7823 497,67.5C 496.5,58.1726 496.334,48.8393 496.5,39.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c4040\",\n    d: \"M 153.5,39.5 C 153.5,47.5 153.5,55.5 153.5,63.5C 152.512,68.6405 152.179,73.9738 152.5,79.5C 151.022,79.762 149.689,79.4287 148.5,78.5C 148.099,76.5658 147.099,75.0658 145.5,74C 141.463,73.3933 137.463,73.56 133.5,74.5C 135.107,70.6868 137.441,67.1868 140.5,64C 139.527,58.5934 139.193,53.0934 139.5,47.5C 140.833,47.5 142.167,47.5 143.5,47.5C 143.5,46.5 143.5,45.5 143.5,44.5C 146.235,41.7989 149.569,40.1322 153.5,39.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#634f56\",\n    d: \"M 449.5,207.5 C 447.686,217.786 446.852,228.453 447,239.5C 446.501,234.177 446.334,228.844 446.5,223.5C 444.592,194.042 443.259,164.708 442.5,135.5C 442.5,132.833 442.5,130.167 442.5,127.5C 442.721,118.144 442.388,108.811 441.5,99.5C 442.493,95.5577 443.16,91.5577 443.5,87.5C 442.102,73.5658 440.435,59.7324 438.5,46C 439.685,39.4586 440.018,32.9586 439.5,26.5C 439.435,26.0618 439.601,25.7284 440,25.5C 440.941,27.7721 442.274,29.7721 444,31.5C 444.499,36.8229 444.666,42.1563 444.5,47.5C 445.5,47.5 446.5,47.5 447.5,47.5C 446.536,80.3939 447.536,113.227 450.5,146C 449.011,166.374 448.678,186.874 449.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#755a61\",\n    d: \"M 479.5,-0.5 C 480.833,-0.5 482.167,-0.5 483.5,-0.5C 483.5,8.5 483.5,17.5 483.5,26.5C 482.668,50.9966 482.168,75.6633 482,100.5C 481.774,105.327 480.94,109.994 479.5,114.5C 477.5,114.5 475.5,114.5 473.5,114.5C 473.286,116.144 473.62,117.644 474.5,119C 473.328,119.419 472.328,120.085 471.5,121C 472.825,120.852 473.992,121.018 475,121.5C 476.11,119.963 477.61,119.297 479.5,119.5C 479.522,123.593 480.189,127.593 481.5,131.5C 480.982,134.701 480.315,137.868 479.5,141C 480.797,146.17 480.797,151.336 479.5,156.5C 480.068,158.369 480.734,160.203 481.5,162C 479.572,179.072 478.905,196.239 479.5,213.5C 476.975,214.892 474.808,214.558 473,212.5C 471.333,213.167 469.667,213.833 468,214.5C 468.431,217.324 467.931,220.158 466.5,223C 467.793,223.49 469.127,223.657 470.5,223.5C 470.23,227.85 470.897,232.017 472.5,236C 470.266,242.697 472.433,247.197 479,249.5C 479.824,252.882 479.657,256.216 478.5,259.5C 477.575,258.359 476.741,258.359 476,259.5C 475.044,258.421 474.211,257.255 473.5,256C 470.183,255.502 466.85,255.335 463.5,255.5C 463.5,250.167 463.5,244.833 463.5,239.5C 465.5,239.5 467.5,239.5 469.5,239.5C 468.994,235.317 467.828,231.317 466,227.5C 465.667,228.833 465.333,230.167 465,231.5C 464.667,230.833 464.333,230.167 464,229.5C 463.667,231.5 463.333,233.5 463,235.5C 461.394,228.235 460.227,220.902 459.5,213.5C 458.562,205.632 458.229,197.799 458.5,190C 459.268,187.864 459.934,185.697 460.5,183.5C 458.833,164.843 458.167,146.176 458.5,127.5C 459.167,116.833 459.833,106.167 460.5,95.5C 464.5,95.5 468.5,95.5 472.5,95.5C 471.167,79.5 471.167,63.5 472.5,47.5C 473.833,47.5 475.167,47.5 476.5,47.5C 476.5,42.1667 476.5,36.8333 476.5,31.5C 477.675,31.719 478.675,31.3857 479.5,30.5C 478.472,28.6385 476.972,27.3052 475,26.5C 475.003,22.2581 474.17,18.2581 472.5,14.5C 473.5,11.5 475.5,9.5 478.5,8.5C 479.484,5.57186 479.817,2.57186 479.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#353241\",\n    d: \"M 509.5,50.5 C 510.903,56.676 511.737,63.0093 512,69.5C 513.48,66.2702 515.813,63.9368 519,62.5C 521.787,63.1984 524.62,63.3651 527.5,63C 526.044,63.4226 525.544,64.2559 526,65.5C 527.635,64.1514 529.135,64.3181 530.5,66C 529.262,65.9227 528.262,66.0894 527.5,66.5C 529.22,67.9197 531.054,69.253 533,70.5C 533.971,76.816 532.305,77.1493 528,71.5C 526.89,73.0368 525.39,73.7035 523.5,73.5C 523.367,76.8957 522.367,77.2291 520.5,74.5C 517.804,75.74 515.471,77.4066 513.5,79.5C 513.452,76.7081 514.785,74.8747 517.5,74C 513.333,73.503 510.5,71.3363 509,67.5C 506.722,69.2384 504.722,71.2384 503,73.5C 501.56,72.8524 500.06,72.5191 498.5,72.5C 499.209,71.596 500.209,71.2627 501.5,71.5C 501.5,70.5 501.5,69.5 501.5,68.5C 509.032,64.9726 511.698,58.9726 509.5,50.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#463836\",\n    d: \"M 296.5,38.5 C 300.825,39.9734 304.825,42.1401 308.5,45C 311.059,46.3234 311.725,48.1567 310.5,50.5C 309.148,49.4756 307.815,48.4756 306.5,47.5C 304.846,43.7703 302.18,42.7703 298.5,44.5C 298.987,45.4461 299.32,46.4461 299.5,47.5C 298.079,50.5354 296.079,53.0354 293.5,55C 295.378,56.9928 295.712,59.1595 294.5,61.5C 293.205,59.6721 292.205,57.6721 291.5,55.5C 289.946,68.7864 289.28,82.1197 289.5,95.5C 288.167,95.5 286.833,95.5 285.5,95.5C 285.674,100.021 285.007,100.355 283.5,96.5C 281.955,95.5481 280.288,95.2148 278.5,95.5C 278.5,96.8333 278.5,98.1667 278.5,99.5C 275.813,99.6641 273.146,99.4974 270.5,99C 269.827,96.1413 268.993,93.308 268,90.5C 266.594,91.6682 265.428,91.3348 264.5,89.5C 263.712,90.7701 262.712,91.7701 261.5,92.5C 261.013,91.5266 260.513,90.5266 260,89.5C 259.351,92.9374 258.851,93.104 258.5,90C 259.621,87.71 260.955,85.5434 262.5,83.5C 261.833,82.5 261.167,81.5 260.5,80.5C 261.5,79.8333 262.5,79.1667 263.5,78.5C 264.06,76.1463 264.727,73.813 265.5,71.5C 266.451,70.6744 267.451,70.5078 268.5,71C 267.009,73.6212 266.342,76.4545 266.5,79.5C 267.5,79.5 268.5,79.5 269.5,79.5C 269.337,81.8568 269.503,84.1902 270,86.5C 270.414,86.9574 270.914,87.2907 271.5,87.5C 272.252,83.8085 273.086,80.1418 274,76.5C 275.036,79.7527 275.703,83.086 276,86.5C 277.132,84.6608 277.965,82.6608 278.5,80.5C 279.628,79.7379 280.795,79.0712 282,78.5C 283.166,75.4968 284.833,72.8302 287,70.5C 288.042,63.4988 287.542,56.6654 285.5,50C 286.296,48.9079 286.963,47.7412 287.5,46.5C 284.831,43.1409 285.664,40.8076 290,39.5C 290.483,40.448 290.649,41.448 290.5,42.5C 292.167,42.5 293.833,42.5 295.5,42.5C 295.433,41.0413 295.766,39.7079 296.5,38.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#574c54\",\n    d: \"M 143.5,44.5 C 143.5,45.5 143.5,46.5 143.5,47.5C 142.167,47.5 140.833,47.5 139.5,47.5C 139.193,53.0934 139.527,58.5934 140.5,64C 137.441,67.1868 135.107,70.6868 133.5,74.5C 137.463,73.56 141.463,73.3933 145.5,74C 147.099,75.0658 148.099,76.5658 148.5,78.5C 149.689,79.4287 151.022,79.762 152.5,79.5C 152.5,82.1667 152.5,84.8333 152.5,87.5C 150.143,87.6633 147.81,87.4966 145.5,87C 144.915,85.6976 144.249,84.531 143.5,83.5C 143.5,80.8333 143.5,78.1667 143.5,75.5C 136.565,76.9816 129.565,78.3149 122.5,79.5C 122.384,76.0897 124.05,74.7564 127.5,75.5C 127.5,73.1667 127.5,70.8333 127.5,68.5C 131.007,69.0065 134.174,68.3398 137,66.5C 137.333,60.1667 137.667,53.8333 138,47.5C 139.741,46.2423 141.574,45.2423 143.5,44.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#555366\",\n    d: \"M 549.5,75.5 C 549.217,76.2891 548.717,76.9558 548,77.5C 546.887,76.2889 545.72,76.2889 544.5,77.5C 543.735,76.3881 542.735,75.7214 541.5,75.5C 539.054,74.4923 537.554,75.4923 537,78.5C 536.172,75.4056 537.172,73.0722 540,71.5C 540.945,71.9054 541.612,72.572 542,73.5C 543.043,71.2994 543.877,68.9661 544.5,66.5C 547.777,68.6947 548.777,71.1947 547.5,74C 548.416,74.2784 549.082,74.7784 549.5,75.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#605e73\",\n    d: \"M 563.5,73.5 C 563.5,77.8333 563.5,82.1667 563.5,86.5C 562.185,85.5244 560.852,84.5244 559.5,83.5C 560.025,82.8076 560.692,82.3076 561.5,82C 559.343,81.9219 557.343,81.7552 555.5,81.5C 556.243,80.8182 556.909,80.1515 557.5,79.5C 556.249,76.2074 556.249,72.8741 557.5,69.5C 559.071,68.6906 560.738,68.3573 562.5,68.5C 562.216,70.4147 562.549,72.0813 563.5,73.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#665a6e\",\n    d: \"M 127.5,68.5 C 127.5,70.8333 127.5,73.1667 127.5,75.5C 124.05,74.7564 122.384,76.0897 122.5,79.5C 129.565,78.3149 136.565,76.9816 143.5,75.5C 143.5,78.1667 143.5,80.8333 143.5,83.5C 143.799,85.604 143.466,87.604 142.5,89.5C 137.299,91.277 132.299,93.277 127.5,95.5C 124.333,95.4001 121.333,96.0668 118.5,97.5C 113.164,95.9315 107.997,96.2649 103,98.5C 102.517,97.552 102.351,96.552 102.5,95.5C 100.167,95.5 97.8333,95.5 95.5,95.5C 95.5,96.8333 95.5,98.1667 95.5,99.5C 102.495,101.129 102.995,103.795 97,107.5C 96.2086,108.745 95.7086,110.078 95.5,111.5C 93.742,111.877 92.0754,112.544 90.5,113.5C 88.0762,112.48 86.4095,110.814 85.5,108.5C 86.9327,105.863 88.7661,103.53 91,101.5C 90.7418,92.7129 94.4084,90.0462 102,93.5C 105.379,92.2389 108.712,92.2389 112,93.5C 115.3,91.443 115.133,90.443 111.5,90.5C 111.104,87.5178 111.771,84.8511 113.5,82.5C 111.777,80.1324 111.11,77.4658 111.5,74.5C 114.406,74.2616 116.24,74.9283 117,76.5C 119.472,75.6781 121.972,75.0114 124.5,74.5C 124.386,71.784 125.386,69.784 127.5,68.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b5aba9\",\n    d: \"M -0.5,-0.5 C 2.16667,-0.5 4.83333,-0.5 7.5,-0.5C 6.50695,14.083 6.50695,28.7497 7.5,43.5C 7.28369,45.3839 6.61702,47.0506 5.5,48.5C 6.83997,49.6878 7.50663,51.1878 7.5,53C 6.31127,64.2074 4.97794,75.374 3.5,86.5C 4.62816,93.1157 4.79483,99.7823 4,106.5C 3.13866,112.451 1.97199,118.284 0.5,124C 1.10243,128.049 1.76909,132.049 2.5,136C 1.94727,137.878 0.947266,139.378 -0.5,140.5C -0.5,93.5 -0.5,46.5 -0.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#14101d\",\n    d: \"M 539.5,34.5 C 539.377,37.374 538.377,39.874 536.5,42C 536.728,42.3988 537.062,42.5654 537.5,42.5C 537.5,43.1667 537.167,43.5 536.5,43.5C 535.265,43.2786 534.265,42.6119 533.5,41.5C 532.817,41.8627 532.15,42.1961 531.5,42.5C 529.745,42.3236 527.912,42.3236 526,42.5C 523.942,41.8883 522.109,40.8883 520.5,39.5C 518.885,40.154 517.218,40.654 515.5,41C 515.001,45.0258 513.001,46.1925 509.5,44.5C 509.5,43.5 509.5,42.5 509.5,41.5C 505.147,40.9412 500.814,40.2745 496.5,39.5C 495.081,38.5489 493.415,38.2155 491.5,38.5C 490.175,51.3394 490.175,64.3394 491.5,77.5C 492.107,77.3764 492.44,77.0431 492.5,76.5C 494.205,74.8079 496.205,73.4746 498.5,72.5C 500.06,72.5191 501.56,72.8524 503,73.5C 504.722,71.2384 506.722,69.2384 509,67.5C 510.5,71.3363 513.333,73.503 517.5,74C 514.785,74.8747 513.452,76.7081 513.5,79.5C 513.5,81.1667 513.5,82.8333 513.5,84.5C 516.748,84.6639 519.748,85.6639 522.5,87.5C 521.335,88.5836 520.002,89.4169 518.5,90C 519.672,90.4186 520.672,91.0853 521.5,92C 520.167,92.6667 520.167,93.3333 521.5,94C 524.688,95.3158 528.022,95.8158 531.5,95.5C 531.34,97.1992 531.506,98.8659 532,100.5C 533,101.833 534,101.833 535,100.5C 535.492,101.549 535.326,102.549 534.5,103.5C 535.257,104.773 535.923,104.773 536.5,103.5C 537.774,104.189 537.774,105.023 536.5,106C 534.765,106.651 533.098,106.485 531.5,105.5C 528.34,106.725 528.006,108.225 530.5,110C 530.354,111.727 529.687,111.894 528.5,110.5C 527.213,113.709 527.213,116.875 528.5,120C 525.162,122.4 521.495,124.067 517.5,125C 518.126,125.75 518.626,126.584 519,127.5C 520.113,126.289 521.28,126.289 522.5,127.5C 524.476,129.397 526.31,131.397 528,133.5C 528.333,133.167 528.667,132.833 529,132.5C 529.273,134.101 529.773,135.601 530.5,137C 528.26,137.977 525.927,138.477 523.5,138.5C 523.674,140.861 524.007,143.194 524.5,145.5C 523.448,145.351 522.448,145.517 521.5,146C 522.833,146.333 524.167,146.667 525.5,147C 524.328,147.419 523.328,148.085 522.5,149C 524.764,149.236 526.931,149.736 529,150.5C 529.456,149.256 528.956,148.423 527.5,148C 527.728,147.601 528.062,147.435 528.5,147.5C 530,149.184 531.667,150.851 533.5,152.5C 534.309,154.071 534.643,155.738 534.5,157.5C 534.025,159.784 533.025,161.784 531.5,163.5C 529.775,159.413 527.775,155.246 525.5,151C 522.522,150.167 520.189,151 518.5,153.5C 516.643,156.018 514.81,156.018 513,153.5C 511.259,149.906 511.092,146.239 512.5,142.5C 509.677,141.367 509.01,139.533 510.5,137C 509.465,135.726 508.298,134.56 507,133.5C 506.1,130.282 504.933,127.282 503.5,124.5C 500.316,123.677 496.983,123.01 493.5,122.5C 493.527,120.801 494.194,119.467 495.5,118.5C 497.706,114.622 500.873,112.955 505,113.5C 505.333,112.5 505.667,111.5 506,110.5C 506.278,111.416 506.778,112.082 507.5,112.5C 509.481,116.703 512.314,117.37 516,114.5C 516.692,113.563 516.525,112.897 515.5,112.5C 517.1,111.318 517.433,109.985 516.5,108.5C 517.77,107.712 518.77,106.712 519.5,105.5C 521.143,105.52 522.476,104.853 523.5,103.5C 524.451,104.326 525.451,104.492 526.5,104C 525.308,102.088 524.308,100.088 523.5,98C 522.251,97.2599 521.251,97.4265 520.5,98.5C 520.023,97.2544 518.69,96.0877 516.5,95C 518.569,94.6758 518.902,93.8425 517.5,92.5C 514.566,90.6401 511.566,88.9734 508.5,87.5C 507.317,85.1543 507.65,82.8209 509.5,80.5C 508.667,80.1667 507.833,79.8333 507,79.5C 501.629,81.1099 496.129,82.1099 490.5,82.5C 490.5,83.8333 490.5,85.1667 490.5,86.5C 488.345,87.5524 488.012,86.8857 489.5,84.5C 488.559,84.5105 487.892,84.0105 487.5,83C 486.881,80.5041 487.548,78.1708 489.5,76C 489.333,75.1667 489.167,74.3333 489,73.5C 486.967,74.0164 486.967,73.3497 489,71.5C 489.82,60.59 489.653,49.7567 488.5,39C 489.471,37.5187 490.804,36.6854 492.5,36.5C 496.526,33.4385 499.86,34.1052 502.5,38.5C 503.291,37.9344 503.291,37.101 502.5,36C 503.99,33.2914 505.49,33.1247 507,35.5C 508.086,33.153 509.419,33.153 511,35.5C 514.103,33.6985 517.27,32.0318 520.5,30.5C 521.894,30.6207 523.228,30.954 524.5,31.5C 524.65,29.0345 524.983,26.3678 525.5,23.5C 526.807,22.8466 528.14,22.1799 529.5,21.5C 532.543,22.8736 535.543,24.2069 538.5,25.5C 538.297,27.3904 538.963,28.8904 540.5,30C 539.833,30.6667 539.167,31.3333 538.5,32C 540.619,32.3418 540.953,33.1751 539.5,34.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2c2a38\",\n    d: \"M 522.5,80.5 C 524.584,81.2483 526.584,81.2483 528.5,80.5C 529.5,80.8333 530.167,81.5 530.5,82.5C 529.5,83.5 528.5,84.5 527.5,85.5C 525.253,84.6258 522.92,84.2924 520.5,84.5C 520.527,82.8007 521.194,81.4674 522.5,80.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b293e\",\n    d: \"M 541.5,75.5 C 542.735,75.7214 543.735,76.3881 544.5,77.5C 545.72,76.2889 546.887,76.2889 548,77.5C 548.717,76.9558 549.217,76.2891 549.5,75.5C 551.912,75.6941 552.912,77.0274 552.5,79.5C 554.167,79.5 555.833,79.5 557.5,79.5C 556.909,80.1515 556.243,80.8182 555.5,81.5C 557.343,81.7552 559.343,81.9219 561.5,82C 560.692,82.3076 560.025,82.8076 559.5,83.5C 560.852,84.5244 562.185,85.5244 563.5,86.5C 563.5,90.8333 563.5,95.1667 563.5,99.5C 562.391,99.4431 561.391,99.1098 560.5,98.5C 558.506,96.1778 556.173,94.1778 553.5,92.5C 551.204,93.3683 550.537,94.7016 551.5,96.5C 549.952,96.1788 549.285,95.1788 549.5,93.5C 547.833,93.5 546.167,93.5 544.5,93.5C 544.271,91.567 543.438,89.9003 542,88.5C 541.163,90.8212 540.83,93.1546 541,95.5C 541.308,94.6919 541.808,94.0253 542.5,93.5C 543.354,94.5217 544.354,95.3551 545.5,96C 543.593,97.122 541.593,97.9553 539.5,98.5C 536.313,99.8367 535.646,98.8367 537.5,95.5C 538.765,93.2917 539.765,90.4584 540.5,87C 540.108,85.9895 539.441,85.4895 538.5,85.5C 538.709,84.914 539.043,84.414 539.5,84C 538.328,83.5814 537.328,82.9147 536.5,82C 538.557,81.6948 540.557,81.6948 542.5,82C 542.457,79.8611 542.123,77.6945 541.5,75.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#57556e\",\n    d: \"M 550.5,81.5 C 553.797,81.3287 554.131,81.9954 551.5,83.5C 553.422,84.711 555.255,86.0443 557,87.5C 557.667,86.8333 558.333,86.1667 559,85.5C 559.236,87.2998 558.736,88.9665 557.5,90.5C 555.833,89.1667 554.167,87.8333 552.5,86.5C 550.271,87.5771 547.937,88.2437 545.5,88.5C 545.343,87.1266 545.51,85.7932 546,84.5C 547.878,83.9473 549.378,82.9473 550.5,81.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5c515f\",\n    d: \"M 153.5,63.5 C 153.5,71.5 153.5,79.5 153.5,87.5C 154.322,125.494 154.655,163.494 154.5,201.5C 154.587,204.598 154.087,204.932 153,202.5C 152.722,203.416 152.222,204.082 151.5,204.5C 151.5,203.833 151.5,203.167 151.5,202.5C 151.5,202.167 151.5,201.833 151.5,201.5C 152.497,180.34 152.831,159.007 152.5,137.5C 152.5,123.5 152.5,109.5 152.5,95.5C 148.648,95.4887 146.815,97.4887 147,101.5C 146.667,101.167 146.333,100.833 146,100.5C 143.854,105.655 140.188,107.322 135,105.5C 133.873,102.623 133.206,99.6229 133,96.5C 131.301,95.5939 129.467,95.2606 127.5,95.5C 132.299,93.277 137.299,91.277 142.5,89.5C 143.466,87.604 143.799,85.604 143.5,83.5C 144.249,84.531 144.915,85.6976 145.5,87C 147.81,87.4966 150.143,87.6633 152.5,87.5C 152.5,84.8333 152.5,82.1667 152.5,79.5C 152.179,73.9738 152.512,68.6405 153.5,63.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#271e27\",\n    d: \"M 492.5,36.5 C 490.804,36.6854 489.471,37.5187 488.5,39C 489.653,49.7567 489.82,60.59 489,71.5C 486.967,73.3497 486.967,74.0164 489,73.5C 489.167,74.3333 489.333,75.1667 489.5,76C 487.548,78.1708 486.881,80.5041 487.5,83C 487.892,84.0105 488.559,84.5105 489.5,84.5C 488.012,86.8857 488.345,87.5524 490.5,86.5C 490.5,90.8333 490.5,95.1667 490.5,99.5C 490.66,101.199 490.494,102.866 490,104.5C 488.814,102.323 486.981,101.323 484.5,101.5C 484.825,94.3134 484.491,87.3134 483.5,80.5C 483.5,65.8333 483.5,51.1667 483.5,36.5C 485.074,36.0629 486.241,35.0629 487,33.5C 488.649,34.9528 490.482,35.9528 492.5,36.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#695861\",\n    d: \"M 168.5,36.5 C 169.824,51.039 169.824,65.7057 168.5,80.5C 169.189,82.444 169.689,84.444 170,86.5C 170.49,85.2068 170.657,83.8734 170.5,82.5C 172.124,82.3601 173.29,83.0267 174,84.5C 174.333,82.8333 174.667,81.1667 175,79.5C 175.499,84.8229 175.666,90.1563 175.5,95.5C 180.282,95.6282 184.615,96.4616 188.5,98C 189.357,98.6891 190.023,99.5224 190.5,100.5C 184.976,104.211 185.309,106.878 191.5,108.5C 191.5,115.833 191.5,123.167 191.5,130.5C 192.422,134.482 190.922,136.816 187,137.5C 186.29,136.027 185.124,135.36 183.5,135.5C 182.908,132.873 182.575,130.206 182.5,127.5C 180.167,127.5 177.833,127.5 175.5,127.5C 175.665,124.482 175.498,121.482 175,118.5C 174.758,124.129 173.924,129.795 172.5,135.5C 171.167,135.5 169.833,135.5 168.5,135.5C 168.737,134.209 168.404,133.209 167.5,132.5C 167.189,100.469 167.522,68.4688 168.5,36.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3a2d2d\",\n    d: \"M 306.5,47.5 C 305.903,47.7352 305.57,48.2352 305.5,49C 309.496,58.8119 311.829,68.9786 312.5,79.5C 310.807,78.5251 309.307,77.1918 308,75.5C 306.416,71.997 304.583,68.6637 302.5,65.5C 301.476,64.1468 300.143,63.4802 298.5,63.5C 298.657,74.2414 297.824,84.908 296,95.5C 295.609,90.1456 295.109,84.8123 294.5,79.5C 293.5,79.5 292.5,79.5 291.5,79.5C 290.846,85.8097 290.346,92.143 290,98.5C 288.187,102.986 287.02,107.653 286.5,112.5C 285.883,112.611 285.383,112.944 285,113.5C 284.02,110.092 282.853,106.758 281.5,103.5C 278.909,108.179 277.076,113.179 276,118.5C 273.119,113.19 271.452,107.523 271,101.5C 270.147,99.8753 269.147,99.5419 268,100.5C 267.808,102.577 267.308,104.577 266.5,106.5C 264.862,102.03 264.029,97.3631 264,92.5C 263.148,93.5707 262.315,94.5707 261.5,95.5C 261.5,94.5 261.5,93.5 261.5,92.5C 262.712,91.7701 263.712,90.7701 264.5,89.5C 265.428,91.3348 266.594,91.6682 268,90.5C 268.993,93.308 269.827,96.1413 270.5,99C 273.146,99.4974 275.813,99.6641 278.5,99.5C 278.5,98.1667 278.5,96.8333 278.5,95.5C 280.288,95.2148 281.955,95.5481 283.5,96.5C 285.007,100.355 285.674,100.021 285.5,95.5C 286.833,95.5 288.167,95.5 289.5,95.5C 289.28,82.1197 289.946,68.7864 291.5,55.5C 292.205,57.6721 293.205,59.6721 294.5,61.5C 295.712,59.1595 295.378,56.9928 293.5,55C 296.079,53.0354 298.079,50.5354 299.5,47.5C 299.32,46.4461 298.987,45.4461 298.5,44.5C 302.18,42.7703 304.846,43.7703 306.5,47.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#656277\",\n    d: \"M 560.5,98.5 C 558.714,97.446 556.381,97.446 553.5,98.5C 552.167,98.5 551.5,97.8333 551.5,96.5C 550.537,94.7016 551.204,93.3683 553.5,92.5C 556.173,94.1778 558.506,96.1778 560.5,98.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#67565e\",\n    d: \"M 508.5,87.5 C 510.252,90.348 511.918,93.348 513.5,96.5C 511.244,97.4209 510.244,99.0876 510.5,101.5C 508.266,102.704 505.933,103.87 503.5,105C 506.227,105.818 508.894,105.652 511.5,104.5C 510.167,103.5 510.167,102.5 511.5,101.5C 513.074,100.369 514.741,100.202 516.5,101C 516.043,101.414 515.709,101.914 515.5,102.5C 517.289,103.623 517.622,104.956 516.5,106.5C 516.167,105.833 515.833,105.167 515.5,104.5C 512.167,105.167 510.833,107.167 511.5,110.5C 513.199,110.527 514.533,111.194 515.5,112.5C 516.525,112.897 516.692,113.563 516,114.5C 512.314,117.37 509.481,116.703 507.5,112.5C 507.5,111.5 507.5,110.5 507.5,109.5C 504.859,108.737 502.192,108.57 499.5,109C 498.289,110.113 498.289,111.28 499.5,112.5C 498.833,112.833 498.167,113.167 497.5,113.5C 495.354,112.106 493.021,111.44 490.5,111.5C 491.405,107.333 491.405,103.333 490.5,99.5C 490.5,95.1667 490.5,90.8333 490.5,86.5C 490.5,85.1667 490.5,83.8333 490.5,82.5C 496.129,82.1099 501.629,81.1099 507,79.5C 507.833,79.8333 508.667,80.1667 509.5,80.5C 507.65,82.8209 507.317,85.1543 508.5,87.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#494960\",\n    d: \"M 537.5,95.5 C 535.646,98.8367 536.313,99.8367 539.5,98.5C 539.279,100.664 538.279,102.33 536.5,103.5C 535.923,104.773 535.257,104.773 534.5,103.5C 535.326,102.549 535.492,101.549 535,100.5C 534,101.833 533,101.833 532,100.5C 531.506,98.8659 531.34,97.1992 531.5,95.5C 533.347,94.4271 535.347,94.4271 537.5,95.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b4248\",\n    d: \"M 508.5,87.5 C 511.566,88.9734 514.566,90.6401 517.5,92.5C 518.902,93.8425 518.569,94.6758 516.5,95C 518.69,96.0877 520.023,97.2544 520.5,98.5C 520.953,99.4584 521.619,100.292 522.5,101C 520.624,101.918 519.624,103.418 519.5,105.5C 518.77,106.712 517.77,107.712 516.5,108.5C 517.433,109.985 517.1,111.318 515.5,112.5C 514.533,111.194 513.199,110.527 511.5,110.5C 510.833,107.167 512.167,105.167 515.5,104.5C 515.833,105.167 516.167,105.833 516.5,106.5C 517.622,104.956 517.289,103.623 515.5,102.5C 515.709,101.914 516.043,101.414 516.5,101C 514.741,100.202 513.074,100.369 511.5,101.5C 510.167,102.5 510.167,103.5 511.5,104.5C 508.894,105.652 506.227,105.818 503.5,105C 505.933,103.87 508.266,102.704 510.5,101.5C 510.244,99.0876 511.244,97.4209 513.5,96.5C 511.918,93.348 510.252,90.348 508.5,87.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d2b35\",\n    d: \"M 519.5,105.5 C 519.624,103.418 520.624,101.918 522.5,101C 521.619,100.292 520.953,99.4584 520.5,98.5C 521.251,97.4265 522.251,97.2599 523.5,98C 524.308,100.088 525.308,102.088 526.5,104C 525.451,104.492 524.451,104.326 523.5,103.5C 522.476,104.853 521.143,105.52 519.5,105.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d434a\",\n    d: \"M 127.5,95.5 C 129.467,95.2606 131.301,95.5939 133,96.5C 133.206,99.6229 133.873,102.623 135,105.5C 140.188,107.322 143.854,105.655 146,100.5C 146.333,100.833 146.667,101.167 147,101.5C 146.815,97.4887 148.648,95.4887 152.5,95.5C 152.5,109.5 152.5,123.5 152.5,137.5C 152.167,137.5 151.833,137.5 151.5,137.5C 151.5,136.5 151.5,135.5 151.5,134.5C 151.817,131.428 151.484,128.428 150.5,125.5C 149.478,125.855 148.811,126.522 148.5,127.5C 143.343,127.742 138.51,128.408 134,129.5C 133.173,128.338 132.34,127.171 131.5,126C 132.439,124.056 133.773,122.389 135.5,121C 134.359,120.259 134.359,119.425 135.5,118.5C 135.167,118.167 134.833,117.833 134.5,117.5C 129.227,120.961 124.06,120.627 119,116.5C 118.517,115.552 118.351,114.552 118.5,113.5C 116.856,113.286 115.356,113.62 114,114.5C 111.573,116.972 110.073,119.972 109.5,123.5C 110.829,126.068 112.662,126.734 115,125.5C 117.135,126.928 119.302,128.262 121.5,129.5C 121.992,133.82 123.325,137.82 125.5,141.5C 124.954,143.135 124.62,144.801 124.5,146.5C 127.85,146.335 131.183,146.502 134.5,147C 135.743,148.154 136.743,149.488 137.5,151C 136.331,153.007 135.665,155.173 135.5,157.5C 134.833,157.167 134.167,156.833 133.5,156.5C 133.539,154.776 133.206,154.443 132.5,155.5C 131.399,154.152 130.399,152.652 129.5,151C 126.898,150.117 124.731,148.617 123,146.5C 121.63,141.601 120.13,136.768 118.5,132C 117.584,131.626 116.75,131.126 116,130.5C 114.493,132.008 112.827,133.341 111,134.5C 107.544,133.019 104.211,131.352 101,129.5C 95.6424,118.309 99.4757,113.642 112.5,115.5C 112.167,112.833 111.833,110.167 111.5,107.5C 106.193,106.009 106.193,104.009 111.5,101.5C 113.584,104.146 115.251,103.979 116.5,101C 120.014,99.4383 123.681,98.605 127.5,98.5C 127.5,97.5 127.5,96.5 127.5,95.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#403131\",\n    d: \"M 259.5,99.5 C 257.204,106.285 254.538,112.952 251.5,119.5C 249.771,117.149 249.104,114.482 249.5,111.5C 247.833,111.5 246.167,111.5 244.5,111.5C 243.921,117.072 242.421,122.406 240,127.5C 239.499,132.508 238.999,137.508 238.5,142.5C 235.165,141.539 233.499,139.206 233.5,135.5C 231.508,135.328 229.842,135.995 228.5,137.5C 228.167,135.833 227.833,134.167 227.5,132.5C 228.089,125.29 229.422,118.29 231.5,111.5C 229.167,111.5 226.833,111.5 224.5,111.5C 223.671,117.47 222.004,123.137 219.5,128.5C 218.662,128.158 218.328,127.492 218.5,126.5C 217.737,125.732 216.737,125.232 215.5,125C 216.554,122.618 217.221,120.118 217.5,117.5C 219.91,117.079 221.743,115.746 223,113.5C 224.657,110.661 225.99,107.661 227,104.5C 229.756,102.909 231.589,100.576 232.5,97.5C 233.524,96.1468 234.857,95.4802 236.5,95.5C 236.5,98.1667 236.5,100.833 236.5,103.5C 240.073,103.041 243.073,104.041 245.5,106.5C 247.271,105.965 247.604,105.131 246.5,104C 249.482,103.502 252.482,103.335 255.5,103.5C 255.351,102.448 255.517,101.448 256,100.5C 256.333,100.833 256.667,101.167 257,101.5C 257.708,100.619 258.542,99.9528 259.5,99.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#433941\",\n    d: \"M 483.5,80.5 C 484.491,87.3134 484.825,94.3134 484.5,101.5C 486.981,101.323 488.814,102.323 490,104.5C 490.494,102.866 490.66,101.199 490.5,99.5C 491.405,103.333 491.405,107.333 490.5,111.5C 489.089,109.461 487.089,108.461 484.5,108.5C 484.737,109.791 484.404,110.791 483.5,111.5C 483.5,101.167 483.5,90.8333 483.5,80.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#595060\",\n    d: \"M 127.5,95.5 C 127.5,96.5 127.5,97.5 127.5,98.5C 123.681,98.605 120.014,99.4383 116.5,101C 115.251,103.979 113.584,104.146 111.5,101.5C 106.193,104.009 106.193,106.009 111.5,107.5C 111.833,110.167 112.167,112.833 112.5,115.5C 99.4757,113.642 95.6424,118.309 101,129.5C 104.211,131.352 107.544,133.019 111,134.5C 112.827,133.341 114.493,132.008 116,130.5C 116.75,131.126 117.584,131.626 118.5,132C 120.13,136.768 121.63,141.601 123,146.5C 124.731,148.617 126.898,150.117 129.5,151C 130.399,152.652 131.399,154.152 132.5,155.5C 132.665,158.518 132.498,161.518 132,164.5C 131.167,165.333 130.333,166.167 129.5,167C 125.527,167.28 121.694,168.114 118,169.5C 114.861,168.574 111.694,168.408 108.5,169C 106.368,172.465 103.535,175.299 100,177.5C 99.3076,176.975 98.8076,176.308 98.5,175.5C 99.7468,173.958 99.7468,172.458 98.5,171C 94.2695,169.71 89.9362,169.21 85.5,169.5C 88.4851,168.818 91.4851,167.818 94.5,166.5C 94.8333,167.167 95.1667,167.833 95.5,168.5C 97.5077,167.314 99.3411,165.98 101,164.5C 102.659,165.98 104.492,167.314 106.5,168.5C 107.833,167.5 109.167,166.5 110.5,165.5C 112.62,166.891 114.953,167.558 117.5,167.5C 121.373,166.892 125.039,165.726 128.5,164C 129.617,160.927 129.784,157.76 129,154.5C 126.656,151.989 124.156,149.656 121.5,147.5C 119.886,145.925 117.886,145.259 115.5,145.5C 113.071,145.116 110.737,144.449 108.5,143.5C 108.799,141.396 108.466,139.396 107.5,137.5C 104.585,136.024 101.585,135.19 98.5,135C 99.4305,137.907 100.431,140.74 101.5,143.5C 99.0876,143.756 97.4209,142.756 96.5,140.5C 94.9713,141.763 93.3046,142.763 91.5,143.5C 92.3909,141.391 93.5576,139.391 95,137.5C 94.8241,128.804 94.9908,120.137 95.5,111.5C 95.7086,110.078 96.2086,108.745 97,107.5C 102.995,103.795 102.495,101.129 95.5,99.5C 95.5,98.1667 95.5,96.8333 95.5,95.5C 97.8333,95.5 100.167,95.5 102.5,95.5C 102.351,96.552 102.517,97.552 103,98.5C 107.997,96.2649 113.164,95.9315 118.5,97.5C 121.333,96.0668 124.333,95.4001 127.5,95.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c0a16\",\n    d: \"M 551.5,96.5 C 551.5,97.8333 552.167,98.5 553.5,98.5C 555.291,99.3913 557.124,100.391 559,101.5C 560.342,100.098 561.176,100.431 561.5,102.5C 560.72,103.949 560.054,105.449 559.5,107C 560.502,109.168 561.502,111.335 562.5,113.5C 561.5,114.5 560.5,115.5 559.5,116.5C 558.914,116.291 558.414,115.957 558,115.5C 557.52,117.133 556.687,118.466 555.5,119.5C 554.624,119.369 553.957,119.702 553.5,120.5C 552.833,122.167 552.167,123.833 551.5,125.5C 553.475,126.788 553.475,128.455 551.5,130.5C 553.629,130.636 555.962,131.303 558.5,132.5C 558.593,131.528 558.926,130.528 559.5,129.5C 560.404,128.791 560.737,127.791 560.5,126.5C 561.5,126.5 562.5,126.5 563.5,126.5C 563.5,135.5 563.5,144.5 563.5,153.5C 562.2,154.108 560.867,154.775 559.5,155.5C 557.95,154.268 556.283,153.768 554.5,154C 550.856,157.523 548.523,161.357 547.5,165.5C 545.082,162.97 543.415,159.97 542.5,156.5C 541.5,155.833 540.5,155.167 539.5,154.5C 537.642,150.473 536.975,146.14 537.5,141.5C 532.848,141.169 529.848,143.169 528.5,147.5C 528.062,147.435 527.728,147.601 527.5,148C 528.956,148.423 529.456,149.256 529,150.5C 526.931,149.736 524.764,149.236 522.5,149C 523.328,148.085 524.328,147.419 525.5,147C 524.167,146.667 522.833,146.333 521.5,146C 522.448,145.517 523.448,145.351 524.5,145.5C 524.007,143.194 523.674,140.861 523.5,138.5C 525.927,138.477 528.26,137.977 530.5,137C 529.773,135.601 529.273,134.101 529,132.5C 528.667,132.833 528.333,133.167 528,133.5C 526.31,131.397 524.476,129.397 522.5,127.5C 521.28,126.289 520.113,126.289 519,127.5C 518.626,126.584 518.126,125.75 517.5,125C 521.495,124.067 525.162,122.4 528.5,120C 527.213,116.875 527.213,113.709 528.5,110.5C 529.687,111.894 530.354,111.727 530.5,110C 528.006,108.225 528.34,106.725 531.5,105.5C 533.098,106.485 534.765,106.651 536.5,106C 537.774,105.023 537.774,104.189 536.5,103.5C 538.279,102.33 539.279,100.664 539.5,98.5C 541.593,97.9553 543.593,97.122 545.5,96C 544.354,95.3551 543.354,94.5217 542.5,93.5C 541.808,94.0253 541.308,94.6919 541,95.5C 540.83,93.1546 541.163,90.8212 542,88.5C 543.438,89.9003 544.271,91.567 544.5,93.5C 546.167,93.5 547.833,93.5 549.5,93.5C 549.285,95.1788 549.952,96.1788 551.5,96.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#685055\",\n    d: \"M 202.5,174.5 C 201.391,175.29 200.058,175.79 198.5,176C 190.5,176.333 182.5,176.667 174.5,177C 173.619,177.708 172.953,178.542 172.5,179.5C 171.833,179.5 171.167,179.5 170.5,179.5C 171.234,178.292 171.567,176.959 171.5,175.5C 172.833,175.5 174.167,175.5 175.5,175.5C 175.786,172.07 177.62,169.736 181,168.5C 181.339,165.964 181.839,163.464 182.5,161C 181.718,153.87 181.218,146.703 181,139.5C 180.749,137.567 180.249,135.734 179.5,134C 178.004,133.493 176.837,133.993 176,135.5C 175.832,143.521 175.332,151.521 174.5,159.5C 173.323,152.507 173.323,145.507 174.5,138.5C 174.333,137.167 174.167,135.833 174,134.5C 173.617,135.056 173.117,135.389 172.5,135.5C 173.924,129.795 174.758,124.129 175,118.5C 175.498,121.482 175.665,124.482 175.5,127.5C 177.833,127.5 180.167,127.5 182.5,127.5C 182.575,130.206 182.908,132.873 183.5,135.5C 185.124,135.36 186.29,136.027 187,137.5C 190.922,136.816 192.422,134.482 191.5,130.5C 192.79,129.942 193.623,128.942 194,127.5C 194.683,132.658 195.516,132.658 196.5,127.5C 198.167,127.5 199.833,127.5 201.5,127.5C 201.813,124.753 201.48,122.086 200.5,119.5C 199.702,121.078 199.202,122.744 199,124.5C 198.667,124.167 198.333,123.833 198,123.5C 197.188,119.311 197.355,115.311 198.5,111.5C 199.5,111.5 200.5,111.5 201.5,111.5C 202.138,116.45 202.971,116.117 204,110.5C 205.011,111.337 206.178,111.67 207.5,111.5C 207.5,116.833 207.5,122.167 207.5,127.5C 205.833,127.5 204.167,127.5 202.5,127.5C 202.187,130.247 202.52,132.914 203.5,135.5C 205.258,136.128 206.758,137.128 208,138.5C 208.333,137.5 208.667,136.5 209,135.5C 210.123,138.249 211.623,140.749 213.5,143C 212.258,143.311 211.258,142.811 210.5,141.5C 210.167,141.833 209.833,142.167 209.5,142.5C 210.74,148.086 211.406,153.753 211.5,159.5C 210.167,159.5 208.833,159.5 207.5,159.5C 207.5,154.167 207.5,148.833 207.5,143.5C 205.833,143.5 204.167,143.5 202.5,143.5C 202.543,151.848 202.876,160.181 203.5,168.5C 198.206,168.682 198.206,169.182 203.5,170C 203.786,171.388 203.452,172.888 202.5,174.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c141c\",\n    d: \"M 330.5,47.5 C 331.5,48.8333 332.5,50.1667 333.5,51.5C 334.058,52.7899 335.058,53.6232 336.5,54C 335.833,54.3333 335.167,54.6667 334.5,55C 336.916,55.6614 338.582,57.1614 339.5,59.5C 340.736,60.2458 342.07,60.5792 343.5,60.5C 343.5,61.5 343.5,62.5 343.5,63.5C 340.833,63.5 338.167,63.5 335.5,63.5C 336.387,69.2697 335.054,74.2697 331.5,78.5C 332.689,79.4287 334.022,79.762 335.5,79.5C 335.5,80.8333 335.5,82.1667 335.5,83.5C 333.143,83.3367 330.81,83.5034 328.5,84C 329.973,84.7096 330.64,85.8762 330.5,87.5C 326.774,87.8226 323.107,87.4892 319.5,86.5C 322.086,85.52 324.753,85.1866 327.5,85.5C 327.5,84.5 327.5,83.5 327.5,82.5C 324.223,82.7839 321.057,82.4505 318,81.5C 315.561,83.0268 313.561,85.0268 312,87.5C 311.444,90.8353 310.944,93.8353 310.5,96.5C 309.686,94.2338 309.186,91.9005 309,89.5C 308.667,90.1667 308.333,90.8333 308,91.5C 307.667,90.1667 307.333,88.8333 307,87.5C 306.867,90.5251 305.867,93.1918 304,95.5C 303.667,94.1667 303.333,92.8333 303,91.5C 302.566,94.1792 302.732,96.8459 303.5,99.5C 302.978,101.926 301.645,103.76 299.5,105C 300.695,106.533 300.695,108.033 299.5,109.5C 298.609,110.59 297.609,110.59 296.5,109.5C 295.52,110.981 294.353,112.315 293,113.5C 291.759,111.579 290.259,111.246 288.5,112.5C 287.167,114.5 287.167,116.5 288.5,118.5C 286,120.167 283.5,121.833 281,123.5C 280.228,123.355 279.561,123.022 279,122.5C 278.803,124.861 277.636,126.528 275.5,127.5C 274.177,132.752 273.51,138.085 273.5,143.5C 276.788,143.073 279.788,143.74 282.5,145.5C 283.696,145.154 283.696,144.654 282.5,144C 286.833,143.333 291.167,143.333 295.5,144C 296.574,146.456 297.574,148.956 298.5,151.5C 299.293,151.931 300.127,152.265 301,152.5C 306.532,150.489 312.032,149.489 317.5,149.5C 317.5,150.5 317.5,151.5 317.5,152.5C 318.791,152.737 319.791,152.404 320.5,151.5C 323.079,151.865 325.412,151.865 327.5,151.5C 330.167,151.5 332.833,151.5 335.5,151.5C 335.5,154.167 335.5,156.833 335.5,159.5C 329.618,159.768 323.785,159.434 318,158.5C 316.125,160.178 313.958,161.178 311.5,161.5C 313.266,158.913 313.933,156.247 313.5,153.5C 311.883,154.642 310.05,155.309 308,155.5C 304.51,155.001 301.01,154.668 297.5,154.5C 292.666,154.767 287.666,154.434 282.5,153.5C 280.852,152.19 279.186,150.857 277.5,149.5C 275.527,150.64 273.693,151.973 272,153.5C 271.209,152.255 270.709,150.922 270.5,149.5C 270.5,148.5 270.5,147.5 270.5,146.5C 261.762,146.254 253.095,146.921 244.5,148.5C 243.106,148.379 241.772,148.046 240.5,147.5C 238.823,142.097 239.657,137.097 243,132.5C 243.311,130.444 243.811,128.444 244.5,126.5C 244.167,125.833 243.833,125.167 243.5,124.5C 245.177,122.46 246.844,120.46 248.5,118.5C 249.386,119.325 249.719,120.325 249.5,121.5C 251.911,121.863 253.411,120.863 254,118.5C 254.333,118.833 254.667,119.167 255,119.5C 255.333,118.167 255.667,116.833 256,115.5C 257.049,116.517 258.216,116.684 259.5,116C 261.036,111.367 263.369,110.701 266.5,114C 268.112,114.72 269.612,114.554 271,113.5C 271.511,115.878 272.178,118.212 273,120.5C 276.645,121.839 278.978,120.505 280,116.5C 281.716,117.552 282.716,116.886 283,114.5C 283.368,115.91 284.201,116.91 285.5,117.5C 286.452,115.955 286.785,114.288 286.5,112.5C 287.02,107.653 288.187,102.986 290,98.5C 290.346,92.143 290.846,85.8097 291.5,79.5C 292.5,79.5 293.5,79.5 294.5,79.5C 295.109,84.8123 295.609,90.1456 296,95.5C 297.824,84.908 298.657,74.2414 298.5,63.5C 300.143,63.4802 301.476,64.1468 302.5,65.5C 304.583,68.6637 306.416,71.997 308,75.5C 309.307,77.1918 310.807,78.5251 312.5,79.5C 313.552,79.6495 314.552,79.4828 315.5,79C 315.762,75.8177 315.429,72.4843 314.5,69C 315.783,67.8643 316.783,66.531 317.5,65C 315.808,62.0647 315.142,58.8981 315.5,55.5C 319.056,55.7251 319.39,54.8918 316.5,53C 316.611,51.2785 317.111,51.1118 318,52.5C 318.494,50.8659 318.66,49.1992 318.5,47.5C 322.5,47.5 326.5,47.5 330.5,47.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6a565d\",\n    d: \"M 436.5,-0.5 C 439.167,-0.5 441.833,-0.5 444.5,-0.5C 446.141,10.7663 447.307,22.0996 448,33.5C 448.833,35.1667 449.667,36.8333 450.5,38.5C 449.592,50.1947 449.592,61.8614 450.5,73.5C 453.18,77.3897 453.846,81.5564 452.5,86C 455.046,99.8918 457.046,113.725 458.5,127.5C 458.167,146.176 458.833,164.843 460.5,183.5C 459.934,185.697 459.268,187.864 458.5,190C 458.229,197.799 458.562,205.632 459.5,213.5C 460.227,220.902 461.394,228.235 463,235.5C 463.333,233.5 463.667,231.5 464,229.5C 464.333,230.167 464.667,230.833 465,231.5C 465.333,230.167 465.667,228.833 466,227.5C 467.828,231.317 468.994,235.317 469.5,239.5C 467.5,239.5 465.5,239.5 463.5,239.5C 463.5,244.833 463.5,250.167 463.5,255.5C 466.85,255.335 470.183,255.502 473.5,256C 474.211,257.255 475.044,258.421 476,259.5C 476.741,258.359 477.575,258.359 478.5,259.5C 479.657,256.216 479.824,252.882 479,249.5C 472.433,247.197 470.266,242.697 472.5,236C 470.897,232.017 470.23,227.85 470.5,223.5C 469.127,223.657 467.793,223.49 466.5,223C 467.931,220.158 468.431,217.324 468,214.5C 469.667,213.833 471.333,213.167 473,212.5C 474.808,214.558 476.975,214.892 479.5,213.5C 479.5,215.167 479.5,216.833 479.5,218.5C 478.207,219.842 477.374,221.509 477,223.5C 476.241,229.502 475.908,235.502 476,241.5C 481.783,248.41 482.95,256.077 479.5,264.5C 476.437,262.949 473.771,260.782 471.5,258C 470.5,257.333 469.5,257.333 468.5,258C 466.201,260.798 466.201,263.465 468.5,266C 468.457,268.5 468.123,271 467.5,273.5C 464.266,272.424 460.932,271.757 457.5,271.5C 458.24,276.76 458.24,282.093 457.5,287.5C 460.289,285.986 463.289,284.986 466.5,284.5C 467.876,285.465 469.209,286.465 470.5,287.5C 468.167,287.5 465.833,287.5 463.5,287.5C 462.414,287.62 461.747,288.287 461.5,289.5C 458.812,294.488 459.145,299.154 462.5,303.5C 463.474,305.743 463.808,308.076 463.5,310.5C 461.54,309.862 459.707,309.862 458,310.5C 456.221,307.724 455.221,308.057 455,311.5C 454.061,308.879 453.228,306.212 452.5,303.5C 451.666,284.825 450.666,266.158 449.5,247.5C 450.501,234.172 450.501,220.839 449.5,207.5C 448.678,186.874 449.011,166.374 450.5,146C 447.536,113.227 446.536,80.3939 447.5,47.5C 446.5,47.5 445.5,47.5 444.5,47.5C 444.666,42.1563 444.499,36.8229 444,31.5C 442.274,29.7721 440.941,27.7721 440,25.5C 439.601,25.7284 439.435,26.0618 439.5,26.5C 438.677,23.023 438.177,19.3563 438,15.5C 437.667,20.8333 437.333,26.1667 437,31.5C 436.5,20.8385 436.333,10.1719 436.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#403a49\",\n    d: \"M 507.5,112.5 C 506.778,112.082 506.278,111.416 506,110.5C 505.667,111.5 505.333,112.5 505,113.5C 500.873,112.955 497.706,114.622 495.5,118.5C 493.516,118.383 491.85,119.05 490.5,120.5C 490.124,117.627 490.124,114.627 490.5,111.5C 493.021,111.44 495.354,112.106 497.5,113.5C 498.167,113.167 498.833,112.833 499.5,112.5C 498.289,111.28 498.289,110.113 499.5,109C 502.192,108.57 504.859,108.737 507.5,109.5C 507.5,110.5 507.5,111.5 507.5,112.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#424155\",\n    d: \"M 560.5,98.5 C 561.391,99.1098 562.391,99.4431 563.5,99.5C 563.5,105.833 563.5,112.167 563.5,118.5C 561.529,119.823 559.529,121.156 557.5,122.5C 556.289,121.726 556.289,120.893 557.5,120C 556.906,119.536 556.239,119.369 555.5,119.5C 556.687,118.466 557.52,117.133 558,115.5C 558.414,115.957 558.914,116.291 559.5,116.5C 560.5,115.5 561.5,114.5 562.5,113.5C 561.502,111.335 560.502,109.168 559.5,107C 560.054,105.449 560.72,103.949 561.5,102.5C 561.176,100.431 560.342,100.098 559,101.5C 557.124,100.391 555.291,99.3913 553.5,98.5C 556.381,97.446 558.714,97.446 560.5,98.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3d3337\",\n    d: \"M 148.5,127.5 C 148.712,132.443 147.712,133.11 145.5,129.5C 143.556,130.189 141.556,130.689 139.5,131C 138.631,133.368 136.965,134.868 134.5,135.5C 133.808,138.145 132.808,140.645 131.5,143C 134.423,145.045 137.257,147.212 140,149.5C 139.516,152.839 138.683,156.173 137.5,159.5C 136.442,160.6 135.608,161.934 135,163.5C 134.51,161.455 134.677,159.455 135.5,157.5C 135.665,155.173 136.331,153.007 137.5,151C 136.743,149.488 135.743,148.154 134.5,147C 131.183,146.502 127.85,146.335 124.5,146.5C 124.62,144.801 124.954,143.135 125.5,141.5C 123.325,137.82 121.992,133.82 121.5,129.5C 119.302,128.262 117.135,126.928 115,125.5C 112.662,126.734 110.829,126.068 109.5,123.5C 110.073,119.972 111.573,116.972 114,114.5C 115.356,113.62 116.856,113.286 118.5,113.5C 118.351,114.552 118.517,115.552 119,116.5C 124.06,120.627 129.227,120.961 134.5,117.5C 134.833,117.833 135.167,118.167 135.5,118.5C 134.359,119.425 134.359,120.259 135.5,121C 133.773,122.389 132.439,124.056 131.5,126C 132.34,127.171 133.173,128.338 134,129.5C 138.51,128.408 143.343,127.742 148.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#28202d\",\n    d: \"M 490.5,111.5 C 490.124,114.627 490.124,117.627 490.5,120.5C 491.85,119.05 493.516,118.383 495.5,118.5C 494.194,119.467 493.527,120.801 493.5,122.5C 492.167,122.5 490.833,122.5 489.5,122.5C 488.549,123.919 488.216,125.585 488.5,127.5C 487.167,127.5 485.833,127.5 484.5,127.5C 484.806,124.615 484.473,121.948 483.5,119.5C 483.5,118.833 483.167,118.5 482.5,118.5C 482.674,116.139 483.007,113.806 483.5,111.5C 484.404,110.791 484.737,109.791 484.5,108.5C 487.089,108.461 489.089,109.461 490.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#393950\",\n    d: \"M 563.5,121.5 C 563.5,123.167 563.5,124.833 563.5,126.5C 562.5,126.5 561.5,126.5 560.5,126.5C 560.737,127.791 560.404,128.791 559.5,129.5C 558.571,128.685 557.571,127.852 556.5,127C 557.167,126.667 557.833,126.333 558.5,126C 557.167,125.333 557.167,124.667 558.5,124C 559.9,122.562 561.567,121.729 563.5,121.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#17101b\",\n    d: \"M 343.5,63.5 C 344.167,63.5 344.833,63.5 345.5,63.5C 347.042,74.7153 349.042,85.882 351.5,97C 350.125,101.444 348.792,105.944 347.5,110.5C 348.689,111.429 350.022,111.762 351.5,111.5C 351.5,114.167 351.5,116.833 351.5,119.5C 354.167,119.5 356.833,119.5 359.5,119.5C 360.167,124.833 360.833,130.167 361.5,135.5C 360.5,135.5 359.5,135.5 358.5,135.5C 358.5,132.833 358.5,130.167 358.5,127.5C 357.167,127.5 355.833,127.5 354.5,127.5C 354.167,132.833 353.833,138.167 353.5,143.5C 359.425,143.192 365.259,143.525 371,144.5C 371.179,141.447 371.679,138.447 372.5,135.5C 376.047,135.22 379.713,135.22 383.5,135.5C 383.5,132.833 383.5,130.167 383.5,127.5C 388.833,127.167 394.167,126.833 399.5,126.5C 399.5,125.5 399.5,124.5 399.5,123.5C 388.913,123.136 388.913,122.136 399.5,120.5C 400.309,118.929 400.643,117.262 400.5,115.5C 401.5,115.5 402.5,115.5 403.5,115.5C 403.942,110.306 404.942,110.306 406.5,115.5C 407.59,114.609 407.59,113.609 406.5,112.5C 407.325,111.614 408.325,111.281 409.5,111.5C 409.238,112.978 409.571,114.311 410.5,115.5C 411.833,114.5 413.167,113.5 414.5,112.5C 415.938,114.712 417.605,116.712 419.5,118.5C 418.167,119.167 416.833,119.833 415.5,120.5C 418.372,121.783 421.205,121.783 424,120.5C 424.71,121.973 425.876,122.64 427.5,122.5C 427.5,118.833 427.5,115.167 427.5,111.5C 428.675,111.281 429.675,111.614 430.5,112.5C 427.83,117.447 428.163,122.114 431.5,126.5C 431.5,126.833 431.5,127.167 431.5,127.5C 430.833,138.008 430.167,148.674 429.5,159.5C 428.729,161.862 427.895,164.196 427,166.5C 426,165.5 425,164.5 424,163.5C 423.667,164.167 423.333,164.833 423,165.5C 420.667,160.167 418.333,160.167 416,165.5C 415.505,163.527 415.338,161.527 415.5,159.5C 412.833,159.5 410.167,159.5 407.5,159.5C 407.5,162.167 407.5,164.833 407.5,167.5C 402.125,167.172 396.792,167.505 391.5,168.5C 400.148,169.332 408.814,169.832 417.5,170C 419.641,171.308 421.641,172.808 423.5,174.5C 422.675,175.386 421.675,175.719 420.5,175.5C 420.5,178.167 420.5,180.833 420.5,183.5C 419.167,183.5 417.833,183.5 416.5,183.5C 416.664,180.813 416.497,178.146 416,175.5C 415.501,180.823 415.334,186.156 415.5,191.5C 417.451,191.227 418.951,191.893 420,193.5C 421.11,191.963 422.61,191.297 424.5,191.5C 424.334,200.173 424.5,208.84 425,217.5C 425.667,218.833 426.667,219.833 428,220.5C 427.541,233.503 428.041,246.503 429.5,259.5C 429.145,273.283 428.811,287.116 428.5,301C 429.081,343.339 430.081,385.506 431.5,427.5C 431.334,436.506 431.5,445.506 432,454.5C 432.833,455.333 433.667,456.167 434.5,457C 449.45,458.416 464.45,458.916 479.5,458.5C 469.03,459.901 458.364,460.567 447.5,460.5C 447.5,461.5 447.5,462.5 447.5,463.5C 444.666,462.497 441.833,461.497 439,460.5C 437.833,460.667 436.667,460.833 435.5,461C 435.116,461.951 434.783,462.784 434.5,463.5C 433.5,463.5 432.5,463.5 431.5,463.5C 431.5,462.167 431.5,460.833 431.5,459.5C 431.217,458.711 430.717,458.044 430,457.5C 428.852,438.2 428.686,418.867 429.5,399.5C 428.167,399.5 426.833,399.5 425.5,399.5C 425.478,395.407 424.811,391.407 423.5,387.5C 424.742,380.802 424.742,374.136 423.5,367.5C 425.22,365.342 426.053,362.675 426,359.5C 426.721,350.15 426.555,340.816 425.5,331.5C 425.716,329.616 426.383,327.949 427.5,326.5C 424.453,325.125 423.12,322.792 423.5,319.5C 424.5,319.5 425.5,319.5 426.5,319.5C 426.775,306.775 426.109,294.108 424.5,281.5C 425.228,279.845 425.395,278.179 425,276.5C 424.092,278.439 422.592,279.439 420.5,279.5C 419.833,274.167 419.167,268.833 418.5,263.5C 419.833,263.5 421.167,263.5 422.5,263.5C 422.336,266.187 422.503,268.854 423,271.5C 423.333,266.167 423.667,260.833 424,255.5C 424.333,258.167 424.667,260.833 425,263.5C 425.667,257.167 425.667,250.833 425,244.5C 424.667,244.167 424.333,243.833 424,243.5C 421,244.833 418,246.167 415,247.5C 414.5,239.495 414,231.495 413.5,223.5C 410.856,223.84 408.523,223.173 406.5,221.5C 405.15,222.95 403.484,223.617 401.5,223.5C 401.768,227.426 400.935,231.093 399,234.5C 398.667,232.833 398.333,231.167 398,229.5C 397.666,235.349 397.166,241.183 396.5,247C 397.534,251.951 398.2,256.784 398.5,261.5C 397.757,262.182 397.091,262.849 396.5,263.5C 395.778,263.082 395.278,262.416 395,261.5C 394.828,255.319 394.328,249.319 393.5,243.5C 393.5,242.167 393.5,240.833 393.5,239.5C 393.139,231.265 391.639,223.265 389,215.5C 381.515,210.508 373.681,206.175 365.5,202.5C 348.464,193.141 331.464,183.475 314.5,173.5C 313.702,173.957 313.369,174.624 313.5,175.5C 312.519,173.604 311.519,171.604 310.5,169.5C 310.043,168.702 309.376,168.369 308.5,168.5C 308.688,165.794 309.688,163.461 311.5,161.5C 313.958,161.178 316.125,160.178 318,158.5C 323.785,159.434 329.618,159.768 335.5,159.5C 335.5,156.833 335.5,154.167 335.5,151.5C 332.833,151.5 330.167,151.5 327.5,151.5C 327.5,150.5 327.5,149.5 327.5,148.5C 331.717,148.785 333.883,146.785 334,142.5C 338.834,136.819 343.168,130.819 347,124.5C 346.664,119.472 345.831,114.472 344.5,109.5C 343.074,112.458 341.24,115.125 339,117.5C 338.612,116.572 337.945,115.905 337,115.5C 333.259,117.165 329.759,116.831 326.5,114.5C 323.906,115.592 321.739,117.259 320,119.5C 319.751,118.376 319.251,117.376 318.5,116.5C 311.533,120.449 306.867,126.116 304.5,133.5C 303.34,137.459 303.173,141.459 304,145.5C 305.316,142.312 305.816,138.978 305.5,135.5C 306.5,135.5 307.5,135.5 308.5,135.5C 308.336,138.187 308.503,140.854 309,143.5C 311.969,143.519 315.135,143.686 318.5,144C 319.167,145 319.833,146 320.5,147C 320.21,148.478 320.21,149.978 320.5,151.5C 319.791,152.404 318.791,152.737 317.5,152.5C 317.5,151.5 317.5,150.5 317.5,149.5C 312.032,149.489 306.532,150.489 301,152.5C 300.127,152.265 299.293,151.931 298.5,151.5C 297.574,148.956 296.574,146.456 295.5,144C 291.167,143.333 286.833,143.333 282.5,144C 283.696,144.654 283.696,145.154 282.5,145.5C 279.788,143.74 276.788,143.073 273.5,143.5C 273.51,138.085 274.177,132.752 275.5,127.5C 277.636,126.528 278.803,124.861 279,122.5C 279.561,123.022 280.228,123.355 281,123.5C 283.5,121.833 286,120.167 288.5,118.5C 287.167,116.5 287.167,114.5 288.5,112.5C 290.259,111.246 291.759,111.579 293,113.5C 294.353,112.315 295.52,110.981 296.5,109.5C 297.609,110.59 298.609,110.59 299.5,109.5C 300.695,108.033 300.695,106.533 299.5,105C 301.645,103.76 302.978,101.926 303.5,99.5C 302.732,96.8459 302.566,94.1792 303,91.5C 303.333,92.8333 303.667,94.1667 304,95.5C 305.867,93.1918 306.867,90.5251 307,87.5C 307.333,88.8333 307.667,90.1667 308,91.5C 308.333,90.8333 308.667,90.1667 309,89.5C 309.186,91.9005 309.686,94.2338 310.5,96.5C 310.944,93.8353 311.444,90.8353 312,87.5C 313.561,85.0268 315.561,83.0268 318,81.5C 321.057,82.4505 324.223,82.7839 327.5,82.5C 327.5,83.5 327.5,84.5 327.5,85.5C 324.753,85.1866 322.086,85.52 319.5,86.5C 323.107,87.4892 326.774,87.8226 330.5,87.5C 330.64,85.8762 329.973,84.7096 328.5,84C 330.81,83.5034 333.143,83.3367 335.5,83.5C 335.5,82.1667 335.5,80.8333 335.5,79.5C 334.022,79.762 332.689,79.4287 331.5,78.5C 335.054,74.2697 336.387,69.2697 335.5,63.5C 338.167,63.5 340.833,63.5 343.5,63.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#130a15\",\n    d: \"M 327.5,151.5 C 325.412,151.865 323.079,151.865 320.5,151.5C 320.21,149.978 320.21,148.478 320.5,147C 319.833,146 319.167,145 318.5,144C 315.135,143.686 311.969,143.519 309,143.5C 308.503,140.854 308.336,138.187 308.5,135.5C 307.5,135.5 306.5,135.5 305.5,135.5C 305.816,138.978 305.316,142.312 304,145.5C 303.173,141.459 303.34,137.459 304.5,133.5C 306.867,126.116 311.533,120.449 318.5,116.5C 319.251,117.376 319.751,118.376 320,119.5C 321.739,117.259 323.906,115.592 326.5,114.5C 329.759,116.831 333.259,117.165 337,115.5C 337.945,115.905 338.612,116.572 339,117.5C 341.24,115.125 343.074,112.458 344.5,109.5C 345.831,114.472 346.664,119.472 347,124.5C 343.168,130.819 338.834,136.819 334,142.5C 333.883,146.785 331.717,148.785 327.5,148.5C 327.5,149.5 327.5,150.5 327.5,151.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c5b64\",\n    d: \"M 162.5,39.5 C 162.929,90.3334 163.596,141 164.5,191.5C 164.678,195.122 164.011,198.456 162.5,201.5C 161.544,163.515 161.21,125.515 161.5,87.5C 161.17,71.3246 161.504,55.3246 162.5,39.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#807284\",\n    d: \"M 26.5,-0.5 C 27.5,-0.5 28.5,-0.5 29.5,-0.5C 29.6665,9.50555 29.4998,19.5056 29,29.5C 26.4759,67.7186 23.3092,105.885 19.5,144C 19.8333,147 20.1667,150 20.5,153C 19.7648,168.499 19.0981,183.999 18.5,199.5C 17.337,176.67 17.1703,153.67 18,130.5C 19.0547,124.185 20.0547,117.852 21,111.5C 22.4435,74.1371 24.2768,36.8037 26.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f4e4f\",\n    d: \"M 489.5,122.5 C 490.833,122.5 492.167,122.5 493.5,122.5C 496.983,123.01 500.316,123.677 503.5,124.5C 503.682,129.521 505.016,134.188 507.5,138.5C 505.695,140.86 506.195,142.527 509,143.5C 509.499,147.152 509.665,150.818 509.5,154.5C 509.167,154.5 508.833,154.5 508.5,154.5C 507.527,154.013 506.527,153.513 505.5,153C 506.774,152.023 506.774,151.189 505.5,150.5C 508.74,146.477 507.74,144.311 502.5,144C 505.506,141.365 505.172,139.365 501.5,138C 495.581,135.055 491.914,136.889 490.5,143.5C 490.167,143.5 489.833,143.5 489.5,143.5C 489.5,136.5 489.5,129.5 489.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#615e75\",\n    d: \"M 563.5,118.5 C 563.5,119.5 563.5,120.5 563.5,121.5C 561.567,121.729 559.9,122.562 558.5,124C 557.167,124.667 557.167,125.333 558.5,126C 557.833,126.333 557.167,126.667 556.5,127C 557.571,127.852 558.571,128.685 559.5,129.5C 558.926,130.528 558.593,131.528 558.5,132.5C 555.962,131.303 553.629,130.636 551.5,130.5C 553.475,128.455 553.475,126.788 551.5,125.5C 552.167,123.833 552.833,122.167 553.5,120.5C 553.957,119.702 554.624,119.369 555.5,119.5C 556.239,119.369 556.906,119.536 557.5,120C 556.289,120.893 556.289,121.726 557.5,122.5C 559.529,121.156 561.529,119.823 563.5,118.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#776577\",\n    d: \"M 153.5,87.5 C 154.29,88.6085 154.79,89.9419 155,91.5C 155.333,91.1667 155.667,90.8333 156,90.5C 156.632,92.5313 157.799,94.198 159.5,95.5C 160.168,92.6944 160.834,90.0277 161.5,87.5C 161.21,125.515 161.544,163.515 162.5,201.5C 162.5,203.5 162.5,205.5 162.5,207.5C 161.5,207.5 160.5,207.5 159.5,207.5C 159.824,204.306 158.658,203.306 156,204.5C 155.768,203.263 155.268,202.263 154.5,201.5C 154.655,163.494 154.322,125.494 153.5,87.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#353343\",\n    d: \"M 536.5,120.5 C 539.733,120.36 542.399,121.527 544.5,124C 543.55,126.91 541.55,128.077 538.5,127.5C 538.5,128.833 538.5,130.167 538.5,131.5C 533.449,131.6 531.282,129.267 532,124.5C 533.667,123.267 535.167,121.933 536.5,120.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#736680\",\n    d: \"M 31.5,-0.5 C 32.8333,-0.5 34.1667,-0.5 35.5,-0.5C 33.8477,10.297 33.181,20.9636 33.5,31.5C 31.5186,44.4581 30.8519,57.7914 31.5,71.5C 29.9776,82.468 28.9776,93.6347 28.5,105C 28.3722,107.707 27.7055,110.207 26.5,112.5C 26.2286,116.114 26.562,119.781 27.5,123.5C 26.2673,134.213 24.9339,144.879 23.5,155.5C 23.9186,156.672 24.5853,157.672 25.5,158.5C 24.2681,161.3 23.6015,164.3 23.5,167.5C 22.7279,200.569 21.0612,233.569 18.5,266.5C 18.5939,268.689 19.2606,270.689 20.5,272.5C 19.4229,274.729 18.7563,277.063 18.5,279.5C 17.1521,263.762 17.6521,247.762 20,231.5C 20.6167,205.832 21.2834,180.165 22,154.5C 23.785,129.607 25.6183,104.773 27.5,80C 26.2177,74.7405 26.7177,69.5738 29,64.5C 30.3543,42.8532 31.1877,21.1865 31.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#664f5a\",\n    d: \"M 167.5,132.5 C 168.404,133.209 168.737,134.209 168.5,135.5C 169.833,135.5 171.167,135.5 172.5,135.5C 173.117,135.389 173.617,135.056 174,134.5C 174.167,135.833 174.333,137.167 174.5,138.5C 173.323,145.507 173.323,152.507 174.5,159.5C 175.332,151.521 175.832,143.521 176,135.5C 176.837,133.993 178.004,133.493 179.5,134C 180.249,135.734 180.749,137.567 181,139.5C 181.218,146.703 181.718,153.87 182.5,161C 181.839,163.464 181.339,165.964 181,168.5C 177.62,169.736 175.786,172.07 175.5,175.5C 174.167,175.5 172.833,175.5 171.5,175.5C 171.567,176.959 171.234,178.292 170.5,179.5C 170.5,180.167 170.167,180.5 169.5,180.5C 168.025,164.69 167.358,148.69 167.5,132.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#604d50\",\n    d: \"M 442.5,135.5 C 443.259,164.708 444.592,194.042 446.5,223.5C 445.5,223.5 444.5,223.5 443.5,223.5C 445.166,255.465 445.833,287.465 445.5,319.5C 444.5,319.5 443.5,319.5 442.5,319.5C 443.833,338.161 443.833,356.828 442.5,375.5C 443.168,383.505 443.834,391.505 444.5,399.5C 446.857,399.337 449.19,399.503 451.5,400C 449.309,402.448 447.976,405.282 447.5,408.5C 449.734,408.38 451.901,408.713 454,409.5C 454.945,409.095 455.612,408.428 456,407.5C 456.7,409.032 457.866,410.032 459.5,410.5C 463.366,408.267 467.533,406.934 472,406.5C 474.175,406.834 476.008,407.834 477.5,409.5C 478.183,409.137 478.85,408.804 479.5,408.5C 479.5,409.5 479.5,410.5 479.5,411.5C 474.175,410.239 468.842,410.239 463.5,411.5C 463.565,411.062 463.399,410.728 463,410.5C 461.562,411.718 459.895,412.385 458,412.5C 452.349,411.592 447.016,409.925 442,407.5C 441.667,404.833 441.333,402.167 441,399.5C 441.53,346.165 441.364,292.832 440.5,239.5C 441.25,204.834 441.917,170.167 442.5,135.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6d5356\",\n    d: \"M 483.5,26.5 C 483.5,28.1667 483.5,29.8333 483.5,31.5C 483.5,33.1667 483.5,34.8333 483.5,36.5C 483.5,51.1667 483.5,65.8333 483.5,80.5C 483.5,90.8333 483.5,101.167 483.5,111.5C 483.007,113.806 482.674,116.139 482.5,118.5C 482.209,149.012 482.543,179.512 483.5,210C 483.247,214.607 482.58,219.107 481.5,223.5C 479.744,222.448 479.077,220.781 479.5,218.5C 479.5,216.833 479.5,215.167 479.5,213.5C 478.905,196.239 479.572,179.072 481.5,162C 480.734,160.203 480.068,158.369 479.5,156.5C 480.797,151.336 480.797,146.17 479.5,141C 480.315,137.868 480.982,134.701 481.5,131.5C 480.189,127.593 479.522,123.593 479.5,119.5C 477.61,119.297 476.11,119.963 475,121.5C 473.992,121.018 472.825,120.852 471.5,121C 472.328,120.085 473.328,119.419 474.5,119C 473.62,117.644 473.286,116.144 473.5,114.5C 475.5,114.5 477.5,114.5 479.5,114.5C 480.94,109.994 481.774,105.327 482,100.5C 482.168,75.6633 482.668,50.9966 483.5,26.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#362828\",\n    d: \"M 489.5,122.5 C 489.5,129.5 489.5,136.5 489.5,143.5C 490.304,147.911 490.304,152.244 489.5,156.5C 488.292,157.234 486.959,157.567 485.5,157.5C 484.787,147.516 484.453,137.516 484.5,127.5C 485.833,127.5 487.167,127.5 488.5,127.5C 488.216,125.585 488.549,123.919 489.5,122.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5b5160\",\n    d: \"M 90.5,143.5 C 90.4717,146.342 89.1383,147.509 86.5,147C 85.0563,145.237 84.0563,143.237 83.5,141C 80.0464,138.686 76.3797,136.852 72.5,135.5C 68.8344,136.817 67.1677,139.483 67.5,143.5C 66.1667,143.5 64.8333,143.5 63.5,143.5C 63.5,145.833 63.5,148.167 63.5,150.5C 61.6851,145.914 60.1851,141.248 59,136.5C 60.9033,136.694 62.7367,136.694 64.5,136.5C 66.9242,135.577 68.9242,134.077 70.5,132C 71.8333,131.333 73.1667,131.333 74.5,132C 77.6954,135.194 81.1954,138.027 85,140.5C 85.4828,141.448 85.6495,142.448 85.5,143.5C 87.1667,143.5 88.8333,143.5 90.5,143.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9c8e9a\",\n    d: \"M 13.5,-0.5 C 14.5,-0.5 15.5,-0.5 16.5,-0.5C 15.8829,32.163 15.3829,64.8297 15,97.5C 13.8054,113.001 12.6388,128.501 11.5,144C 11.9172,146.498 12.2505,148.998 12.5,151.5C 11.0164,197.072 9.34971,242.072 7.5,286.5C 5.5,286.5 3.5,286.5 1.5,286.5C 2.20895,285.596 3.20895,285.263 4.5,285.5C 4.78449,283.123 4.78449,280.956 4.5,279C 6.49583,275.739 6.82917,272.239 5.5,268.5C 7.14949,226.857 7.98282,185.19 8,143.5C 9.25214,120.132 10.9188,96.7984 13,73.5C 12.9914,48.8202 13.158,24.1535 13.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1a1420\",\n    d: \"M 431.5,127.5 C 431.186,227.495 431.186,327.495 431.5,427.5C 430.081,385.506 429.081,343.339 428.5,301C 428.811,287.116 429.145,273.283 429.5,259.5C 428.041,246.503 427.541,233.503 428,220.5C 426.667,219.833 425.667,218.833 425,217.5C 424.5,208.84 424.334,200.173 424.5,191.5C 422.61,191.297 421.11,191.963 420,193.5C 418.951,191.893 417.451,191.227 415.5,191.5C 415.334,186.156 415.501,180.823 416,175.5C 416.497,178.146 416.664,180.813 416.5,183.5C 417.833,183.5 419.167,183.5 420.5,183.5C 420.5,180.833 420.5,178.167 420.5,175.5C 421.675,175.719 422.675,175.386 423.5,174.5C 421.641,172.808 419.641,171.308 417.5,170C 408.814,169.832 400.148,169.332 391.5,168.5C 396.792,167.505 402.125,167.172 407.5,167.5C 407.5,164.833 407.5,162.167 407.5,159.5C 410.167,159.5 412.833,159.5 415.5,159.5C 415.338,161.527 415.505,163.527 416,165.5C 418.333,160.167 420.667,160.167 423,165.5C 423.333,164.833 423.667,164.167 424,163.5C 425,164.5 426,165.5 427,166.5C 427.895,164.196 428.729,161.862 429.5,159.5C 430.167,148.674 430.833,138.008 431.5,127.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d2735\",\n    d: \"M 151.5,134.5 C 150.698,135.952 150.198,137.618 150,139.5C 149.5,148.827 149.334,158.161 149.5,167.5C 146.405,167.374 144.572,165.707 144,162.5C 142.23,163.276 140.397,163.11 138.5,162C 137.748,161.329 137.414,160.496 137.5,159.5C 138.683,156.173 139.516,152.839 140,149.5C 137.257,147.212 134.423,145.045 131.5,143C 132.808,140.645 133.808,138.145 134.5,135.5C 136.965,134.868 138.631,133.368 139.5,131C 141.556,130.689 143.556,130.189 145.5,129.5C 147.712,133.11 148.712,132.443 148.5,127.5C 148.811,126.522 149.478,125.855 150.5,125.5C 151.484,128.428 151.817,131.428 151.5,134.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#695960\",\n    d: \"M 505.5,150.5 C 503.453,150.489 501.453,150.156 499.5,149.5C 497.399,149.632 495.899,150.632 495,152.5C 494.583,151.244 493.75,150.577 492.5,150.5C 490.832,148.521 490.166,146.188 490.5,143.5C 491.914,136.889 495.581,135.055 501.5,138C 505.172,139.365 505.506,141.365 502.5,144C 507.74,144.311 508.74,146.477 505.5,150.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c657e\",\n    d: \"M 115.5,145.5 C 117.886,145.259 119.886,145.925 121.5,147.5C 123.384,150.901 123.884,154.567 123,158.5C 120.307,158.953 118.473,160.453 117.5,163C 111.123,164.521 105.623,163.021 101,158.5C 100.333,157.167 100.333,155.833 101,154.5C 104.026,151.974 107.193,149.64 110.5,147.5C 111.258,148.811 112.258,149.311 113.5,149C 114.328,148.085 115.328,147.419 116.5,147C 115.944,146.617 115.611,146.117 115.5,145.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e434c\",\n    d: \"M 90.5,143.5 C 90.8333,143.5 91.1667,143.5 91.5,143.5C 93.3046,142.763 94.9713,141.763 96.5,140.5C 97.4209,142.756 99.0876,143.756 101.5,143.5C 102.659,146.253 102.159,148.919 100,151.5C 96.3769,154.535 92.2102,156.535 87.5,157.5C 85.9795,154.946 84.6461,152.279 83.5,149.5C 80.127,151.534 76.627,153.201 73,154.5C 69.865,153.346 66.6983,152.346 63.5,151.5C 63.5,151.167 63.5,150.833 63.5,150.5C 63.5,148.167 63.5,145.833 63.5,143.5C 64.8333,143.5 66.1667,143.5 67.5,143.5C 67.1677,139.483 68.8344,136.817 72.5,135.5C 76.3797,136.852 80.0464,138.686 83.5,141C 84.0563,143.237 85.0563,145.237 86.5,147C 89.1383,147.509 90.4717,146.342 90.5,143.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#251b20\",\n    d: \"M 286.5,112.5 C 286.785,114.288 286.452,115.955 285.5,117.5C 284.201,116.91 283.368,115.91 283,114.5C 282.716,116.886 281.716,117.552 280,116.5C 278.978,120.505 276.645,121.839 273,120.5C 272.178,118.212 271.511,115.878 271,113.5C 269.612,114.554 268.112,114.72 266.5,114C 263.369,110.701 261.036,111.367 259.5,116C 258.216,116.684 257.049,116.517 256,115.5C 255.667,116.833 255.333,118.167 255,119.5C 254.667,119.167 254.333,118.833 254,118.5C 253.411,120.863 251.911,121.863 249.5,121.5C 249.719,120.325 249.386,119.325 248.5,118.5C 246.844,120.46 245.177,122.46 243.5,124.5C 243.833,125.167 244.167,125.833 244.5,126.5C 243.811,128.444 243.311,130.444 243,132.5C 239.657,137.097 238.823,142.097 240.5,147.5C 241.772,148.046 243.106,148.379 244.5,148.5C 253.095,146.921 261.762,146.254 270.5,146.5C 270.5,147.5 270.5,148.5 270.5,149.5C 263.869,149.493 257.202,149.493 250.5,149.5C 247.462,150.275 245.129,151.941 243.5,154.5C 243.565,154.938 243.399,155.272 243,155.5C 241.188,153.7 239.355,152.033 237.5,150.5C 235.946,149.086 234.612,147.419 233.5,145.5C 232.817,145.863 232.15,146.196 231.5,146.5C 231.5,145.833 231.167,145.5 230.5,145.5C 230.631,144.761 230.464,144.094 230,143.5C 228.759,145.421 227.259,145.754 225.5,144.5C 226.544,142.232 226.711,139.899 226,137.5C 223.204,134.918 221.037,131.918 219.5,128.5C 222.004,123.137 223.671,117.47 224.5,111.5C 226.833,111.5 229.167,111.5 231.5,111.5C 229.422,118.29 228.089,125.29 227.5,132.5C 227.833,134.167 228.167,135.833 228.5,137.5C 229.842,135.995 231.508,135.328 233.5,135.5C 233.499,139.206 235.165,141.539 238.5,142.5C 238.999,137.508 239.499,132.508 240,127.5C 242.421,122.406 243.921,117.072 244.5,111.5C 246.167,111.5 247.833,111.5 249.5,111.5C 249.104,114.482 249.771,117.149 251.5,119.5C 254.538,112.952 257.204,106.285 259.5,99.5C 259.66,97.847 260.326,96.5137 261.5,95.5C 262.315,94.5707 263.148,93.5707 264,92.5C 264.029,97.3631 264.862,102.03 266.5,106.5C 267.308,104.577 267.808,102.577 268,100.5C 269.147,99.5419 270.147,99.8753 271,101.5C 271.452,107.523 273.119,113.19 276,118.5C 277.076,113.179 278.909,108.179 281.5,103.5C 282.853,106.758 284.02,110.092 285,113.5C 285.383,112.944 285.883,112.611 286.5,112.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e4f50\",\n    d: \"M 270.5,149.5 C 270.709,150.922 271.209,152.255 272,153.5C 273.693,151.973 275.527,150.64 277.5,149.5C 279.186,150.857 280.852,152.19 282.5,153.5C 278.575,153.43 274.909,154.097 271.5,155.5C 270.596,154.791 270.263,153.791 270.5,152.5C 262.032,152.892 253.865,152.892 246,152.5C 245.583,153.756 244.75,154.423 243.5,154.5C 245.129,151.941 247.462,150.275 250.5,149.5C 257.202,149.493 263.869,149.493 270.5,149.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7b676d\",\n    d: \"M 237.5,150.5 C 239.355,152.033 241.188,153.7 243,155.5C 243.399,155.272 243.565,154.938 243.5,154.5C 244.75,154.423 245.583,153.756 246,152.5C 253.865,152.892 262.032,152.892 270.5,152.5C 270.263,153.791 270.596,154.791 271.5,155.5C 271.189,156.478 270.522,157.145 269.5,157.5C 265.856,156.242 262.023,155.575 258,155.5C 254.5,155.667 251,155.833 247.5,156C 246.584,156.278 245.918,156.778 245.5,157.5C 242.017,156.303 238.684,154.136 235.5,151C 236.094,150.536 236.761,150.369 237.5,150.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#514045\",\n    d: \"M 282.5,153.5 C 287.666,154.434 292.666,154.767 297.5,154.5C 296.2,155.108 294.867,155.775 293.5,156.5C 290.842,154.905 288.508,155.238 286.5,157.5C 284.812,156.479 283.479,155.145 282.5,153.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b2837\",\n    d: \"M 539.5,154.5 C 537.999,155.752 536.332,156.752 534.5,157.5C 534.643,155.738 534.309,154.071 533.5,152.5C 531.667,150.851 530,149.184 528.5,147.5C 529.848,143.169 532.848,141.169 537.5,141.5C 536.975,146.14 537.642,150.473 539.5,154.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#483737\",\n    d: \"M 237.5,150.5 C 236.761,150.369 236.094,150.536 235.5,151C 238.684,154.136 242.017,156.303 245.5,157.5C 245.5,157.833 245.5,158.167 245.5,158.5C 243.735,159.461 241.735,159.795 239.5,159.5C 240.751,163.34 240.751,166.84 239.5,170C 240.167,170.333 240.833,170.667 241.5,171C 239.783,172.559 237.783,173.392 235.5,173.5C 235.346,167.031 235.679,160.865 236.5,155C 235.364,153.855 234.364,152.688 233.5,151.5C 232.833,149.833 232.167,148.167 231.5,146.5C 232.15,146.196 232.817,145.863 233.5,145.5C 234.612,147.419 235.946,149.086 237.5,150.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#564e5f\",\n    d: \"M 505.5,150.5 C 506.774,151.189 506.774,152.023 505.5,153C 506.527,153.513 507.527,154.013 508.5,154.5C 503.807,161.48 499.807,161.147 496.5,153.5C 495.534,155.396 495.201,157.396 495.5,159.5C 494.167,159.5 492.833,159.5 491.5,159.5C 491.704,156.482 492.037,153.482 492.5,150.5C 493.75,150.577 494.583,151.244 495,152.5C 495.899,150.632 497.399,149.632 499.5,149.5C 501.453,150.156 503.453,150.489 505.5,150.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#777388\",\n    d: \"M 563.5,153.5 C 563.5,154.5 563.5,155.5 563.5,156.5C 562.589,158.751 561.256,160.751 559.5,162.5C 558.178,162.67 557.011,162.337 556,161.5C 554.795,162.071 553.628,162.738 552.5,163.5C 553.325,164.386 554.325,164.719 555.5,164.5C 555.634,166.292 555.301,167.958 554.5,169.5C 552.956,169.703 551.622,170.37 550.5,171.5C 548.837,170.125 547.503,170.458 546.5,172.5C 545.893,172.376 545.56,172.043 545.5,171.5C 547.074,169.898 547.741,167.898 547.5,165.5C 548.523,161.357 550.856,157.523 554.5,154C 556.283,153.768 557.95,154.268 559.5,155.5C 560.867,154.775 562.2,154.108 563.5,153.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9e8488\",\n    d: \"M 282.5,153.5 C 283.479,155.145 284.812,156.479 286.5,157.5C 288.508,155.238 290.842,154.905 293.5,156.5C 294.867,155.775 296.2,155.108 297.5,154.5C 297.842,155.338 298.508,155.672 299.5,155.5C 299.795,157.735 299.461,159.735 298.5,161.5C 296.952,160.206 294.952,159.539 292.5,159.5C 289.111,159.688 286.111,160.022 283.5,160.5C 281.952,160.821 281.285,161.821 281.5,163.5C 280.732,162.737 280.232,161.737 280,160.5C 277.086,161.145 274.086,161.478 271,161.5C 264.304,159.779 256.138,159.112 246.5,159.5C 246.5,158.833 246.167,158.5 245.5,158.5C 245.5,158.167 245.5,157.833 245.5,157.5C 245.918,156.778 246.584,156.278 247.5,156C 251,155.833 254.5,155.667 258,155.5C 262.023,155.575 265.856,156.242 269.5,157.5C 270.522,157.145 271.189,156.478 271.5,155.5C 274.909,154.097 278.575,153.43 282.5,153.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#897c8e\",\n    d: \"M 23.5,-0.5 C 24.5,-0.5 25.5,-0.5 26.5,-0.5C 24.2768,36.8037 22.4435,74.1371 21,111.5C 20.0547,117.852 19.0547,124.185 18,130.5C 17.1703,153.67 17.337,176.67 18.5,199.5C 17.7355,218.015 16.7355,236.515 15.5,255C 15.4371,264.39 16.1038,273.724 17.5,283C 17.1382,284.434 16.4715,285.601 15.5,286.5C 10.187,287.098 4.85368,287.431 -0.5,287.5C -0.5,287.167 -0.5,286.833 -0.5,286.5C 0.166667,286.5 0.833333,286.5 1.5,286.5C 3.5,286.5 5.5,286.5 7.5,286.5C 9.34971,242.072 11.0164,197.072 12.5,151.5C 13.1657,154.028 13.8324,156.694 14.5,159.5C 16.0214,133.172 18.1881,106.506 21,79.5C 21.1818,63.789 21.6818,48.1223 22.5,32.5C 21.9159,28.0813 21.5826,23.748 21.5,19.5C 23.1541,12.9337 23.8207,6.26707 23.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e566b\",\n    d: \"M 115.5,145.5 C 115.611,146.117 115.944,146.617 116.5,147C 115.328,147.419 114.328,148.085 113.5,149C 112.258,149.311 111.258,148.811 110.5,147.5C 107.193,149.64 104.026,151.974 101,154.5C 100.333,155.833 100.333,157.167 101,158.5C 105.623,163.021 111.123,164.521 117.5,163C 118.473,160.453 120.307,158.953 123,158.5C 123.884,154.567 123.384,150.901 121.5,147.5C 124.156,149.656 126.656,151.989 129,154.5C 129.784,157.76 129.617,160.927 128.5,164C 125.039,165.726 121.373,166.892 117.5,167.5C 114.953,167.558 112.62,166.891 110.5,165.5C 109.167,166.5 107.833,167.5 106.5,168.5C 104.492,167.314 102.659,165.98 101,164.5C 99.3411,165.98 97.5077,167.314 95.5,168.5C 95.1667,167.833 94.8333,167.167 94.5,166.5C 91.4851,167.818 88.4851,168.818 85.5,169.5C 82.4041,170.093 80.0708,169.093 78.5,166.5C 74.3173,167.754 70.6506,169.754 67.5,172.5C 65.1208,171.558 62.9541,170.225 61,168.5C 59,169.833 57,169.833 55,168.5C 54.6232,169.942 53.7899,170.942 52.5,171.5C 53.5614,168.136 54.5614,164.803 55.5,161.5C 58.5184,161.335 61.5184,161.502 64.5,162C 66.7401,165.071 69.7401,166.071 73.5,165C 78.349,163.655 80.6823,160.489 80.5,155.5C 76.8183,155.665 73.1516,155.499 69.5,155C 66.9807,154.414 64.9807,153.247 63.5,151.5C 66.6983,152.346 69.865,153.346 73,154.5C 76.627,153.201 80.127,151.534 83.5,149.5C 84.6461,152.279 85.9795,154.946 87.5,157.5C 92.2102,156.535 96.3769,154.535 100,151.5C 102.159,148.919 102.659,146.253 101.5,143.5C 100.431,140.74 99.4305,137.907 98.5,135C 101.585,135.19 104.585,136.024 107.5,137.5C 108.466,139.396 108.799,141.396 108.5,143.5C 110.737,144.449 113.071,145.116 115.5,145.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#352f39\",\n    d: \"M 503.5,124.5 C 504.933,127.282 506.1,130.282 507,133.5C 508.298,134.56 509.465,135.726 510.5,137C 509.01,139.533 509.677,141.367 512.5,142.5C 511.092,146.239 511.259,149.906 513,153.5C 514.81,156.018 516.643,156.018 518.5,153.5C 518.682,155.591 518.348,157.591 517.5,159.5C 518.325,160.386 519.325,160.719 520.5,160.5C 520.34,162.153 519.674,163.486 518.5,164.5C 517.5,164.5 516.5,164.5 515.5,164.5C 515.785,162.712 515.452,161.045 514.5,159.5C 511.287,163.32 509.621,167.82 509.5,173C 506.696,173.387 504.696,172.221 503.5,169.5C 508.675,170.493 510.509,168.493 509,163.5C 507.294,162.692 506.461,161.359 506.5,159.5C 508.167,159.5 509.833,159.5 511.5,159.5C 511.635,157.446 510.968,155.779 509.5,154.5C 509.665,150.818 509.499,147.152 509,143.5C 506.195,142.527 505.695,140.86 507.5,138.5C 505.016,134.188 503.682,129.521 503.5,124.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c4657\",\n    d: \"M 525.5,161.5 C 524.081,160.549 522.415,160.216 520.5,160.5C 519.325,160.719 518.325,160.386 517.5,159.5C 518.348,157.591 518.682,155.591 518.5,153.5C 520.806,153.007 523.139,152.674 525.5,152.5C 525.726,155.882 526.726,158.882 528.5,161.5C 527.5,161.5 526.5,161.5 525.5,161.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c697e\",\n    d: \"M 539.5,154.5 C 540.5,155.167 541.5,155.833 542.5,156.5C 541.964,158.841 541.631,161.174 541.5,163.5C 540.833,162.833 540.167,162.167 539.5,161.5C 537.815,163.017 536.315,164.684 535,166.5C 533.271,166.026 532.105,165.026 531.5,163.5C 533.025,161.784 534.025,159.784 534.5,157.5C 536.332,156.752 537.999,155.752 539.5,154.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#48414e\",\n    d: \"M 489.5,143.5 C 489.833,143.5 490.167,143.5 490.5,143.5C 490.166,146.188 490.832,148.521 492.5,150.5C 492.037,153.482 491.704,156.482 491.5,159.5C 492.833,159.5 494.167,159.5 495.5,159.5C 495.201,157.396 495.534,155.396 496.5,153.5C 499.807,161.147 503.807,161.48 508.5,154.5C 508.833,154.5 509.167,154.5 509.5,154.5C 510.968,155.779 511.635,157.446 511.5,159.5C 509.833,159.5 508.167,159.5 506.5,159.5C 506.461,161.359 507.294,162.692 509,163.5C 510.509,168.493 508.675,170.493 503.5,169.5C 501.721,168.33 500.721,166.664 500.5,164.5C 496.434,164.307 492.434,164.64 488.5,165.5C 488.368,162.43 488.701,159.43 489.5,156.5C 490.304,152.244 490.304,147.911 489.5,143.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c495f\",\n    d: \"M 559.5,162.5 C 558.817,164.176 557.483,164.843 555.5,164.5C 554.325,164.719 553.325,164.386 552.5,163.5C 553.628,162.738 554.795,162.071 556,161.5C 557.011,162.337 558.178,162.67 559.5,162.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5b556d\",\n    d: \"M 31.5,111.5 C 31.6677,132.823 32.1677,132.823 33,111.5C 34.4152,129.476 35.2486,147.476 35.5,165.5C 34.8752,169.326 34.2086,173.159 33.5,177C 34.9944,179.639 35.6611,182.472 35.5,185.5C 34.0337,184.653 33.2004,183.32 33,181.5C 32.6667,181.833 32.3333,182.167 32,182.5C 31.882,191.56 31.2154,200.56 30,209.5C 29.6667,200.833 29.3333,192.167 29,183.5C 29.1353,190.905 28.3019,197.905 26.5,204.5C 26.6439,185.492 27.1439,166.492 28,147.5C 28.4986,135.133 29.6653,123.133 31.5,111.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e5263\",\n    d: \"M 31.5,79.5 C 32.5,79.5 33.5,79.5 34.5,79.5C 34.5,84.8333 34.5,90.1667 34.5,95.5C 35.5,95.5 36.5,95.5 37.5,95.5C 37.5,100.833 37.5,106.167 37.5,111.5C 37.3334,127.503 37.5001,143.503 38,159.5C 38.7745,163.147 39.4412,166.814 40,170.5C 42.2638,172.983 44.5972,172.983 47,170.5C 48.7659,171.233 50.5992,171.567 52.5,171.5C 53.0508,174.807 53.3841,178.14 53.5,181.5C 48.5702,182.922 43.5702,184.089 38.5,185C 37.0398,178.474 36.0398,171.974 35.5,165.5C 35.2486,147.476 34.4152,129.476 33,111.5C 32.1677,132.823 31.6677,132.823 31.5,111.5C 31.5,100.833 31.5,90.1667 31.5,79.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#493c3f\",\n    d: \"M 311.5,161.5 C 309.688,163.461 308.688,165.794 308.5,168.5C 307.134,170.271 305.634,171.938 304,173.5C 303.501,179.491 303.334,185.491 303.5,191.5C 301.612,189.012 300.945,186.012 301.5,182.5C 298.214,183.207 294.881,183.54 291.5,183.5C 291.281,182.325 291.614,181.325 292.5,180.5C 294.753,179.747 296.587,178.414 298,176.5C 298.346,173.424 299.012,170.424 300,167.5C 300.92,167.07 301.753,166.736 302.5,166.5C 302.227,162.405 301.227,158.738 299.5,155.5C 298.508,155.672 297.842,155.338 297.5,154.5C 301.01,154.668 304.51,155.001 308,155.5C 310.05,155.309 311.883,154.642 313.5,153.5C 313.933,156.247 313.266,158.913 311.5,161.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b29993\",\n    d: \"M 246.5,159.5 C 256.138,159.112 264.304,159.779 271,161.5C 274.086,161.478 277.086,161.145 280,160.5C 280.232,161.737 280.732,162.737 281.5,163.5C 281.5,164.833 281.5,166.167 281.5,167.5C 282.5,167.5 283.5,167.5 284.5,167.5C 284.702,165.05 284.369,162.717 283.5,160.5C 286.111,160.022 289.111,159.688 292.5,159.5C 294.952,159.539 296.952,160.206 298.5,161.5C 295.226,172.098 289.226,180.765 280.5,187.5C 271.681,182.587 263.348,176.92 255.5,170.5C 254.167,168.5 252.5,166.833 250.5,165.5C 248.774,163.772 247.441,161.772 246.5,159.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#745753\",\n    d: \"M 283.5,160.5 C 284.369,162.717 284.702,165.05 284.5,167.5C 283.5,167.5 282.5,167.5 281.5,167.5C 281.5,166.167 281.5,164.833 281.5,163.5C 281.285,161.821 281.952,160.821 283.5,160.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6a617d\",\n    d: \"M 31.5,71.5 C 31.5,74.1667 31.5,76.8333 31.5,79.5C 31.5,90.1667 31.5,100.833 31.5,111.5C 29.6653,123.133 28.4986,135.133 28,147.5C 27.1439,166.492 26.6439,185.492 26.5,204.5C 26.8978,226.764 25.8978,248.93 23.5,271C 23.5489,275.038 23.8823,279.038 24.5,283C 24.1127,285.261 22.7794,286.594 20.5,287C 13.5631,288.288 6.56306,288.788 -0.5,288.5C -0.5,288.167 -0.5,287.833 -0.5,287.5C 4.85368,287.431 10.187,287.098 15.5,286.5C 19.548,285.738 20.548,283.404 18.5,279.5C 18.7563,277.063 19.4229,274.729 20.5,272.5C 19.2606,270.689 18.5939,268.689 18.5,266.5C 21.0612,233.569 22.7279,200.569 23.5,167.5C 23.6015,164.3 24.2681,161.3 25.5,158.5C 24.5853,157.672 23.9186,156.672 23.5,155.5C 24.9339,144.879 26.2673,134.213 27.5,123.5C 26.562,119.781 26.2286,116.114 26.5,112.5C 27.7055,110.207 28.3722,107.707 28.5,105C 28.9776,93.6347 29.9776,82.468 31.5,71.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#584744\",\n    d: \"M 233.5,151.5 C 234.364,152.688 235.364,153.855 236.5,155C 235.679,160.865 235.346,167.031 235.5,173.5C 237.783,173.392 239.783,172.559 241.5,171C 240.833,170.667 240.167,170.333 239.5,170C 240.751,166.84 240.751,163.34 239.5,159.5C 241.735,159.795 243.735,159.461 245.5,158.5C 246.167,158.5 246.5,158.833 246.5,159.5C 247.441,161.772 248.774,163.772 250.5,165.5C 249.5,167.167 248.167,168.5 246.5,169.5C 245.833,168.167 245.167,168.167 244.5,169.5C 243.833,171.167 243.167,172.833 242.5,174.5C 241.041,174.433 239.708,174.766 238.5,175.5C 236.833,175.5 235.167,175.5 233.5,175.5C 233.852,167.35 233.852,159.35 233.5,151.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#514859\",\n    d: \"M 133.5,156.5 C 135.284,164.875 131.95,169.375 123.5,170C 120.369,175.755 117.369,175.755 114.5,170C 112.433,169.464 110.599,169.964 109,171.5C 107.565,179.447 103.065,182.114 95.5,179.5C 95.5,177.5 95.5,175.5 95.5,173.5C 91.8694,172.588 88.2027,172.421 84.5,173C 83.8333,173.667 83.1667,174.333 82.5,175C 78.8333,175.167 75.1667,175.333 71.5,175.5C 67.1887,175.4 63.022,174.733 59,173.5C 56.194,175.278 55.694,177.611 57.5,180.5C 57.5629,182.481 56.8962,184.148 55.5,185.5C 52.2317,186.487 48.8984,186.82 45.5,186.5C 45.5,188.167 45.5,189.833 45.5,191.5C 46.826,194.481 46.826,197.481 45.5,200.5C 50.4022,208.718 48.4022,211.051 39.5,207.5C 39.5,206.167 39.5,204.833 39.5,203.5C 38.5,203.5 37.5,203.5 36.5,203.5C 36.8229,197.31 36.4896,191.31 35.5,185.5C 35.6611,182.472 34.9944,179.639 33.5,177C 34.2086,173.159 34.8752,169.326 35.5,165.5C 36.0398,171.974 37.0398,178.474 38.5,185C 43.5702,184.089 48.5702,182.922 53.5,181.5C 53.3841,178.14 53.0508,174.807 52.5,171.5C 53.7899,170.942 54.6232,169.942 55,168.5C 57,169.833 59,169.833 61,168.5C 62.9541,170.225 65.1208,171.558 67.5,172.5C 70.6506,169.754 74.3173,167.754 78.5,166.5C 80.0708,169.093 82.4041,170.093 85.5,169.5C 89.9362,169.21 94.2695,169.71 98.5,171C 99.7468,172.458 99.7468,173.958 98.5,175.5C 98.8076,176.308 99.3076,176.975 100,177.5C 103.535,175.299 106.368,172.465 108.5,169C 111.694,168.408 114.861,168.574 118,169.5C 121.694,168.114 125.527,167.28 129.5,167C 130.333,166.167 131.167,165.333 132,164.5C 132.498,161.518 132.665,158.518 132.5,155.5C 133.206,154.443 133.539,154.776 133.5,156.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e5b70\",\n    d: \"M 554.5,169.5 C 555.234,170.708 555.567,172.041 555.5,173.5C 553.565,175.38 551.899,177.38 550.5,179.5C 547.821,179.475 546.488,178.142 546.5,175.5C 544.833,175.5 543.167,175.5 541.5,175.5C 541.238,174.022 541.571,172.689 542.5,171.5C 543.527,172.791 544.527,172.791 545.5,171.5C 545.56,172.043 545.893,172.376 546.5,172.5C 547.503,170.458 548.837,170.125 550.5,171.5C 551.622,170.37 552.956,169.703 554.5,169.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#373445\",\n    d: \"M 531.5,163.5 C 532.105,165.026 533.271,166.026 535,166.5C 536.315,164.684 537.815,163.017 539.5,161.5C 540.167,162.167 540.833,162.833 541.5,163.5C 541.631,161.174 541.964,158.841 542.5,156.5C 543.415,159.97 545.082,162.97 547.5,165.5C 547.741,167.898 547.074,169.898 545.5,171.5C 544.527,172.791 543.527,172.791 542.5,171.5C 541.571,172.689 541.238,174.022 541.5,175.5C 543.167,175.5 544.833,175.5 546.5,175.5C 546.488,178.142 547.821,179.475 550.5,179.5C 549.548,180.452 548.548,181.452 547.5,182.5C 545.735,183.026 544.068,183.359 542.5,183.5C 540.654,181.545 538.321,180.545 535.5,180.5C 534.747,178.12 533.413,176.12 531.5,174.5C 530.749,172.287 529.582,170.287 528,168.5C 527.257,166.559 527.424,164.726 528.5,163C 527.263,162.768 526.263,162.268 525.5,161.5C 526.5,161.5 527.5,161.5 528.5,161.5C 526.726,158.882 525.726,155.882 525.5,152.5C 523.139,152.674 520.806,153.007 518.5,153.5C 520.189,151 522.522,150.167 525.5,151C 527.775,155.246 529.775,159.413 531.5,163.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#726171\",\n    d: \"M 250.5,165.5 C 252.5,166.833 254.167,168.5 255.5,170.5C 254.574,179.519 254.907,188.519 256.5,197.5C 248.657,189.983 245.323,180.65 246.5,169.5C 248.167,168.5 249.5,167.167 250.5,165.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#383240\",\n    d: \"M 151.5,134.5 C 151.5,135.5 151.5,136.5 151.5,137.5C 151.667,149.838 151.5,162.171 151,174.5C 149.731,175.905 149.231,177.571 149.5,179.5C 147.533,179.739 145.699,179.406 144,178.5C 142.895,180.601 141.729,182.601 140.5,184.5C 140.608,185.442 140.941,186.275 141.5,187C 144.14,187.839 146.473,187.339 148.5,185.5C 149.478,185.977 150.311,186.643 151,187.5C 151.499,192.155 151.666,196.821 151.5,201.5C 151.5,201.833 151.5,202.167 151.5,202.5C 150.739,203.391 149.739,204.058 148.5,204.5C 128.387,203.316 108.387,203.316 88.5,204.5C 88.484,202.516 89.484,201.516 91.5,201.5C 110.809,202.642 130.142,202.809 149.5,202C 150.466,198.565 150.466,195.065 149.5,191.5C 144.103,192.034 139.603,190.367 136,186.5C 135.075,180.082 137.908,176.582 144.5,176C 143.577,173.959 143.244,171.792 143.5,169.5C 140.639,169.513 139.639,170.679 140.5,173C 137.174,173.172 133.841,173.005 130.5,172.5C 130.405,175.358 129.238,177.691 127,179.5C 126.275,178.941 125.442,178.608 124.5,178.5C 122.65,180.572 120.317,181.905 117.5,182.5C 116.833,180.833 116.167,179.167 115.5,177.5C 114.867,180.495 113.867,183.328 112.5,186C 108.179,186.499 103.846,186.666 99.5,186.5C 99.8678,189.056 99.0345,191.056 97,192.5C 93.829,193.222 90.6623,193.889 87.5,194.5C 89.6353,192.94 89.802,191.273 88,189.5C 86.8717,185.422 88.205,182.422 92,180.5C 92.4935,178.866 92.6602,177.199 92.5,175.5C 85.0125,176.97 77.3458,177.804 69.5,178C 71.5598,179.493 71.8932,181.326 70.5,183.5C 69.6143,182.675 69.281,181.675 69.5,180.5C 66.7623,180.149 64.0956,179.482 61.5,178.5C 60.6922,180.423 60.1922,182.423 60,184.5C 58.8419,184.998 58.0085,185.831 57.5,187C 60.0863,189.42 62.0863,192.253 63.5,195.5C 60.9039,194.735 58.2372,194.401 55.5,194.5C 54.1841,200.992 53.0174,200.992 52,194.5C 50.1575,192.829 47.9908,191.829 45.5,191.5C 45.5,189.833 45.5,188.167 45.5,186.5C 48.8984,186.82 52.2317,186.487 55.5,185.5C 56.8962,184.148 57.5629,182.481 57.5,180.5C 55.694,177.611 56.194,175.278 59,173.5C 63.022,174.733 67.1887,175.4 71.5,175.5C 75.1667,175.333 78.8333,175.167 82.5,175C 83.1667,174.333 83.8333,173.667 84.5,173C 88.2027,172.421 91.8694,172.588 95.5,173.5C 95.5,175.5 95.5,177.5 95.5,179.5C 103.065,182.114 107.565,179.447 109,171.5C 110.599,169.964 112.433,169.464 114.5,170C 117.369,175.755 120.369,175.755 123.5,170C 131.95,169.375 135.284,164.875 133.5,156.5C 134.167,156.833 134.833,157.167 135.5,157.5C 134.677,159.455 134.51,161.455 135,163.5C 135.608,161.934 136.442,160.6 137.5,159.5C 137.414,160.496 137.748,161.329 138.5,162C 140.397,163.11 142.23,163.276 144,162.5C 144.572,165.707 146.405,167.374 149.5,167.5C 149.334,158.161 149.5,148.827 150,139.5C 150.198,137.618 150.698,135.952 151.5,134.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#14101e\",\n    d: \"M 520.5,160.5 C 522.415,160.216 524.081,160.549 525.5,161.5C 526.263,162.268 527.263,162.768 528.5,163C 527.424,164.726 527.257,166.559 528,168.5C 529.582,170.287 530.749,172.287 531.5,174.5C 528.258,176.03 526.758,178.696 527,182.5C 523.582,183.908 521.749,186.408 521.5,190C 522.842,195.073 523.675,200.24 524,205.5C 524.985,206.814 526.152,207.814 527.5,208.5C 524.813,208.664 522.146,208.497 519.5,208C 520.48,205.275 521.146,202.442 521.5,199.5C 519.413,196.063 517.746,192.396 516.5,188.5C 520.426,187.587 521.759,185.254 520.5,181.5C 519.549,180.674 518.549,180.508 517.5,181C 515.754,183.456 513.754,185.622 511.5,187.5C 510.357,185.041 510.69,182.707 512.5,180.5C 507.95,179.018 507.45,176.685 511,173.5C 511.176,170.118 511.676,166.785 512.5,163.5C 514.214,162.391 514.881,163.058 514.5,165.5C 516.099,165.768 517.432,165.434 518.5,164.5C 519.674,163.486 520.34,162.153 520.5,160.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2e2c3b\",\n    d: \"M 563.5,174.5 C 563.5,177.167 563.5,179.833 563.5,182.5C 561.833,182.5 560.167,182.5 558.5,182.5C 557.957,182.44 557.624,182.107 557.5,181.5C 558.853,180.476 559.52,179.143 559.5,177.5C 563.5,176.833 563.5,176.167 559.5,175.5C 559.5,173.833 559.5,172.167 559.5,170.5C 562.205,170.38 562.872,171.38 561.5,173.5C 561.957,174.298 562.624,174.631 563.5,174.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#22151a\",\n    d: \"M 217.5,175.5 C 221.485,175.44 223.152,177.44 222.5,181.5C 222.586,182.496 222.252,183.329 221.5,184C 215.863,186.071 210.529,188.571 205.5,191.5C 202.903,192.584 200.403,193.918 198,195.5C 197.79,193.942 197.29,192.609 196.5,191.5C 196.5,186.833 196.5,182.167 196.5,177.5C 203.357,175.842 210.357,175.176 217.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#474151\",\n    d: \"M 151.5,137.5 C 151.833,137.5 152.167,137.5 152.5,137.5C 152.831,159.007 152.497,180.34 151.5,201.5C 151.666,196.821 151.499,192.155 151,187.5C 150.311,186.643 149.478,185.977 148.5,185.5C 146.473,187.339 144.14,187.839 141.5,187C 140.941,186.275 140.608,185.442 140.5,184.5C 141.729,182.601 142.895,180.601 144,178.5C 145.699,179.406 147.533,179.739 149.5,179.5C 149.231,177.571 149.731,175.905 151,174.5C 151.5,162.171 151.667,149.838 151.5,137.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3a2d33\",\n    d: \"M 170.5,179.5 C 171.167,179.5 171.833,179.5 172.5,179.5C 173.637,185.832 174.637,192.332 175.5,199C 175.432,201.95 174.766,204.617 173.5,207C 174.056,207.383 174.389,207.883 174.5,208.5C 173.833,208.833 173.167,209.167 172.5,209.5C 172.611,207.352 171.944,207.019 170.5,208.5C 169.889,200.422 168.889,192.422 167.5,184.5C 167.733,182.938 168.4,181.605 169.5,180.5C 170.167,180.5 170.5,180.167 170.5,179.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a5979f\",\n    d: \"M 10.5,-0.5 C 11.5,-0.5 12.5,-0.5 13.5,-0.5C 13.158,24.1535 12.9914,48.8202 13,73.5C 10.9188,96.7984 9.25214,120.132 8,143.5C 7.98282,185.19 7.14949,226.857 5.5,268.5C 6.82917,272.239 6.49583,275.739 4.5,279C 4.78449,280.956 4.78449,283.123 4.5,285.5C 3.20895,285.263 2.20895,285.596 1.5,286.5C 0.833333,286.5 0.166667,286.5 -0.5,286.5C -0.5,280.833 -0.5,275.167 -0.5,269.5C 0.221579,269.082 0.721579,268.416 1,267.5C 2.86153,254.294 3.86153,240.961 4,227.5C 4.21129,206.153 4.71129,184.82 5.5,163.5C 4.36066,151.252 4.69399,139.086 6.5,127C 5.94149,126.275 5.60816,125.442 5.5,124.5C 10.9992,82.9048 12.6659,41.2382 10.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a6d84\",\n    d: \"M 29.5,-0.5 C 30.1667,-0.5 30.8333,-0.5 31.5,-0.5C 31.1877,21.1865 30.3543,42.8532 29,64.5C 26.7177,69.5738 26.2177,74.7405 27.5,80C 25.6183,104.773 23.785,129.607 22,154.5C 21.2834,180.165 20.6167,205.832 20,231.5C 17.6521,247.762 17.1521,263.762 18.5,279.5C 20.548,283.404 19.548,285.738 15.5,286.5C 16.4715,285.601 17.1382,284.434 17.5,283C 16.1038,273.724 15.4371,264.39 15.5,255C 16.7355,236.515 17.7355,218.015 18.5,199.5C 19.0981,183.999 19.7648,168.499 20.5,153C 20.1667,150 19.8333,147 19.5,144C 23.3092,105.885 26.4759,67.7186 29,29.5C 29.4998,19.5056 29.6665,9.50555 29.5,-0.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#342c36\",\n    d: \"M 87.5,194.5 C 87.8808,196.942 87.2141,197.609 85.5,196.5C 83.4537,198.281 83.1204,200.281 84.5,202.5C 83.3509,202.209 82.6842,201.376 82.5,200C 84.6134,194.068 83.6134,188.902 79.5,184.5C 78.5,183.167 77.5,183.167 76.5,184.5C 75.1111,186.868 73.7778,189.201 72.5,191.5C 72.1667,191.5 71.8333,191.5 71.5,191.5C 69.2591,192.3 68.2591,193.966 68.5,196.5C 66.7839,196.371 65.1172,196.038 63.5,195.5C 62.0863,192.253 60.0863,189.42 57.5,187C 58.0085,185.831 58.8419,184.998 60,184.5C 60.1922,182.423 60.6922,180.423 61.5,178.5C 64.0956,179.482 66.7623,180.149 69.5,180.5C 69.281,181.675 69.6143,182.675 70.5,183.5C 71.8932,181.326 71.5598,179.493 69.5,178C 77.3458,177.804 85.0125,176.97 92.5,175.5C 92.6602,177.199 92.4935,178.866 92,180.5C 88.205,182.422 86.8717,185.422 88,189.5C 89.802,191.273 89.6353,192.94 87.5,194.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5b4748\",\n    d: \"M 299.5,155.5 C 301.227,158.738 302.227,162.405 302.5,166.5C 301.753,166.736 300.92,167.07 300,167.5C 299.012,170.424 298.346,173.424 298,176.5C 296.587,178.414 294.753,179.747 292.5,180.5C 291.614,181.325 291.281,182.325 291.5,183.5C 294.881,183.54 298.214,183.207 301.5,182.5C 300.945,186.012 301.612,189.012 303.5,191.5C 302.908,194.127 302.575,196.794 302.5,199.5C 300.139,202.228 298.139,205.228 296.5,208.5C 294.958,207.837 293.291,207.17 291.5,206.5C 292.025,205.808 292.692,205.308 293.5,205C 292.22,202.868 292.22,200.702 293.5,198.5C 292.365,196.201 291.032,194.034 289.5,192C 290.793,191.51 292.127,191.343 293.5,191.5C 293.5,190.5 293.5,189.5 293.5,188.5C 289.327,189.537 285.161,190.537 281,191.5C 278.625,191.596 276.459,191.096 274.5,190C 276.029,187.264 277.529,187.098 279,189.5C 279.717,188.956 280.217,188.289 280.5,187.5C 289.226,180.765 295.226,172.098 298.5,161.5C 299.461,159.735 299.795,157.735 299.5,155.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f5c6d\",\n    d: \"M 558.5,182.5 C 560.167,182.5 561.833,182.5 563.5,182.5C 563.5,183.833 563.5,185.167 563.5,186.5C 562.504,186.586 561.671,186.252 561,185.5C 560.667,186.167 560.333,186.833 560,187.5C 559.648,185.753 559.148,184.086 558.5,182.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b1a26\",\n    d: \"M 555.5,173.5 C 555.953,174.458 556.619,175.292 557.5,176C 556.062,176.219 554.729,176.719 553.5,177.5C 553.969,180.764 552.969,183.764 550.5,186.5C 551.711,187.72 551.711,188.887 550.5,190C 551.5,190.333 552.5,190.667 553.5,191C 549.482,191.863 547.482,194.363 547.5,198.5C 544.518,198.037 541.518,197.704 538.5,197.5C 538.149,193.841 539.149,190.841 541.5,188.5C 542.301,186.958 542.634,185.292 542.5,183.5C 544.068,183.359 545.735,183.026 547.5,182.5C 548.548,181.452 549.548,180.452 550.5,179.5C 551.899,177.38 553.565,175.38 555.5,173.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#675e76\",\n    d: \"M 308.5,168.5 C 309.376,168.369 310.043,168.702 310.5,169.5C 311.519,171.604 312.519,173.604 313.5,175.5C 313.369,174.624 313.702,173.957 314.5,173.5C 331.464,183.475 348.464,193.141 365.5,202.5C 366.502,204.011 367.169,205.678 367.5,207.5C 365.876,207.64 364.71,206.973 364,205.5C 363.667,206.167 363.333,206.833 363,207.5C 359.379,207.358 355.545,207.358 351.5,207.5C 351.5,205.167 351.5,202.833 351.5,200.5C 342.628,200.401 342.961,199.568 352.5,198C 347.681,198.707 343.014,198.374 338.5,197C 339.456,200.394 339.789,203.894 339.5,207.5C 341.655,207.372 343.655,207.872 345.5,209C 346.826,211.158 348.493,212.992 350.5,214.5C 352.979,218.746 352.979,222.912 350.5,227C 350.67,228.57 351.003,230.403 351.5,232.5C 350.5,232.5 349.5,232.5 348.5,232.5C 348.714,230.856 348.38,229.356 347.5,228C 341.678,226.725 336.012,225.058 330.5,223C 327.952,220.558 324.952,218.892 321.5,218C 322.167,217.667 322.833,217.333 323.5,217C 320.238,217.524 317.405,216.357 315,213.5C 313.351,214.953 311.518,215.953 309.5,216.5C 307.926,218.102 307.259,220.102 307.5,222.5C 306.849,221.909 306.182,221.243 305.5,220.5C 304.914,220.709 304.414,221.043 304,221.5C 303.501,217.514 303.334,213.514 303.5,209.5C 307.652,209.369 308.318,207.869 305.5,205C 306.527,204.487 307.527,203.987 308.5,203.5C 309.712,204.23 310.712,205.23 311.5,206.5C 311.484,203.271 310.484,200.104 308.5,197C 307.5,196.333 306.5,196.333 305.5,197C 304.627,198.045 303.627,198.878 302.5,199.5C 302.575,196.794 302.908,194.127 303.5,191.5C 303.334,185.491 303.501,179.491 304,173.5C 305.634,171.938 307.134,170.271 308.5,168.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#39314a\",\n    d: \"M 313.5,175.5 C 314.222,175.918 314.722,176.584 315,177.5C 315.665,182.156 316.165,186.823 316.5,191.5C 314.656,186.449 313.656,181.116 313.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c434c\",\n    d: \"M 84.5,202.5 C 84.5,202.833 84.5,203.167 84.5,203.5C 82.1432,203.337 79.8098,203.503 77.5,204C 76.1772,204.816 75.5106,205.983 75.5,207.5C 75.1667,207.5 74.8333,207.5 74.5,207.5C 74.2792,204.903 73.7792,204.903 73,207.5C 72.8333,207 72.6667,206.5 72.5,206C 74.2387,203.622 76.2387,201.455 78.5,199.5C 79.48,196.914 79.8134,194.247 79.5,191.5C 77.1667,191.5 74.8333,191.5 72.5,191.5C 73.7778,189.201 75.1111,186.868 76.5,184.5C 77.5,183.167 78.5,183.167 79.5,184.5C 83.6134,188.902 84.6134,194.068 82.5,200C 82.6842,201.376 83.3509,202.209 84.5,202.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#634f4e\",\n    d: \"M 255.5,170.5 C 263.348,176.92 271.681,182.587 280.5,187.5C 280.217,188.289 279.717,188.956 279,189.5C 277.529,187.098 276.029,187.264 274.5,190C 276.459,191.096 278.625,191.596 281,191.5C 285.161,190.537 289.327,189.537 293.5,188.5C 293.5,189.5 293.5,190.5 293.5,191.5C 292.127,191.343 290.793,191.51 289.5,192C 291.032,194.034 292.365,196.201 293.5,198.5C 292.22,200.702 292.22,202.868 293.5,205C 292.692,205.308 292.025,205.808 291.5,206.5C 293.291,207.17 294.958,207.837 296.5,208.5C 296.567,209.959 296.234,211.292 295.5,212.5C 292.663,211.384 289.996,211.884 287.5,214C 284.833,214.667 282.167,214.667 279.5,214C 274.964,211.998 270.297,210.165 265.5,208.5C 265.5,208.167 265.5,207.833 265.5,207.5C 265.938,207.565 266.272,207.399 266.5,207C 264.34,205.668 262.34,204.168 260.5,202.5C 259.778,202.918 259.278,203.584 259,204.5C 258.536,203.906 258.369,203.239 258.5,202.5C 258.598,200.447 257.931,198.78 256.5,197.5C 254.907,188.519 254.574,179.519 255.5,170.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b3c3d\",\n    d: \"M 202.5,174.5 C 207.695,174.179 212.695,174.513 217.5,175.5C 210.357,175.176 203.357,175.842 196.5,177.5C 196.5,182.167 196.5,186.833 196.5,191.5C 195.549,192.919 195.216,194.585 195.5,196.5C 194.209,196.263 193.209,196.596 192.5,197.5C 190.355,198.978 188.021,200.312 185.5,201.5C 184.832,203.969 184.165,206.302 183.5,208.5C 183.5,207.5 183.5,206.5 183.5,205.5C 180.285,205.905 177.285,206.905 174.5,208.5C 174.389,207.883 174.056,207.383 173.5,207C 174.766,204.617 175.432,201.95 175.5,199C 174.637,192.332 173.637,185.832 172.5,179.5C 172.953,178.542 173.619,177.708 174.5,177C 182.5,176.667 190.5,176.333 198.5,176C 200.058,175.79 201.391,175.29 202.5,174.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#27191c\",\n    d: \"M 183.5,178.5 C 186.962,177.518 190.629,177.185 194.5,177.5C 195.553,180.852 195.553,184.185 194.5,187.5C 190.77,184.423 187.104,181.423 183.5,178.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#60535b\",\n    d: \"M 499.5,175.5 C 500.659,181.848 502.659,187.848 505.5,193.5C 506.675,193.281 507.675,193.614 508.5,194.5C 507.311,195.429 505.978,195.762 504.5,195.5C 504.5,196.833 504.5,198.167 504.5,199.5C 500.775,200.895 498.442,203.562 497.5,207.5C 496.5,207.5 495.5,207.5 494.5,207.5C 493.202,211.09 491.535,214.424 489.5,217.5C 489.112,203.455 489.612,189.455 491,175.5C 492.009,174.342 493.342,173.675 495,173.5C 497.008,173.307 498.508,173.974 499.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0b18\",\n    d: \"M 563.5,156.5 C 563.5,162.5 563.5,168.5 563.5,174.5C 562.624,174.631 561.957,174.298 561.5,173.5C 562.872,171.38 562.205,170.38 559.5,170.5C 559.5,172.167 559.5,173.833 559.5,175.5C 563.5,176.167 563.5,176.833 559.5,177.5C 559.52,179.143 558.853,180.476 557.5,181.5C 557.624,182.107 557.957,182.44 558.5,182.5C 559.148,184.086 559.648,185.753 560,187.5C 560.333,186.833 560.667,186.167 561,185.5C 561.671,186.252 562.504,186.586 563.5,186.5C 563.5,193.5 563.5,200.5 563.5,207.5C 561.677,210.016 560.677,213.016 560.5,216.5C 559.292,217.234 557.959,217.567 556.5,217.5C 554.878,216.878 553.545,215.878 552.5,214.5C 552.372,212.91 551.705,211.577 550.5,210.5C 548.027,212.41 545.194,213.41 542,213.5C 537.673,210.979 532.84,209.312 527.5,208.5C 526.152,207.814 524.985,206.814 524,205.5C 523.675,200.24 522.842,195.073 521.5,190C 521.749,186.408 523.582,183.908 527,182.5C 526.758,178.696 528.258,176.03 531.5,174.5C 533.413,176.12 534.747,178.12 535.5,180.5C 538.321,180.545 540.654,181.545 542.5,183.5C 542.634,185.292 542.301,186.958 541.5,188.5C 539.149,190.841 538.149,193.841 538.5,197.5C 541.518,197.704 544.518,198.037 547.5,198.5C 547.482,194.363 549.482,191.863 553.5,191C 552.5,190.667 551.5,190.333 550.5,190C 551.711,188.887 551.711,187.72 550.5,186.5C 552.969,183.764 553.969,180.764 553.5,177.5C 554.729,176.719 556.062,176.219 557.5,176C 556.619,175.292 555.953,174.458 555.5,173.5C 555.567,172.041 555.234,170.708 554.5,169.5C 555.301,167.958 555.634,166.292 555.5,164.5C 557.483,164.843 558.817,164.176 559.5,162.5C 561.256,160.751 562.589,158.751 563.5,156.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#42404a\",\n    d: \"M 541.5,188.5 C 542.75,188.423 543.583,187.756 544,186.5C 545.11,188.037 546.61,188.703 548.5,188.5C 548.673,193.323 546.339,195.323 541.5,194.5C 541.5,192.5 541.5,190.5 541.5,188.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6f5c68\",\n    d: \"M 230.5,145.5 C 231.167,145.5 231.5,145.833 231.5,146.5C 232.167,148.167 232.833,149.833 233.5,151.5C 233.852,159.35 233.852,167.35 233.5,175.5C 235.167,175.5 236.833,175.5 238.5,175.5C 232.135,179.836 225.468,183.836 218.5,187.5C 215.181,204.334 213.181,221.334 212.5,238.5C 211.375,239.348 211.375,240.348 212.5,241.5C 210.599,244.343 209.433,247.676 209,251.5C 208.667,250.833 208.333,250.167 208,249.5C 207.505,251.473 207.338,253.473 207.5,255.5C 205.712,255.785 204.045,255.452 202.5,254.5C 200.168,253.18 198.168,251.513 196.5,249.5C 196.92,231.453 197.92,213.453 199.5,195.5C 202.036,194.963 204.036,193.63 205.5,191.5C 210.529,188.571 215.863,186.071 221.5,184C 222.252,183.329 222.586,182.496 222.5,181.5C 223.33,170.674 223.83,159.674 224,148.5C 226.171,147.418 228.337,146.418 230.5,145.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c0b3b3\",\n    d: \"M 246.5,169.5 C 245.323,180.65 248.657,189.983 256.5,197.5C 257.931,198.78 258.598,200.447 258.5,202.5C 256.218,201.61 253.885,201.444 251.5,202C 247.584,205.41 244.251,209.243 241.5,213.5C 240.637,214.463 239.97,214.463 239.5,213.5C 242.656,199.018 244.323,184.351 244.5,169.5C 245.167,168.167 245.833,168.167 246.5,169.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#272331\",\n    d: \"M 518.5,164.5 C 517.432,165.434 516.099,165.768 514.5,165.5C 514.881,163.058 514.214,162.391 512.5,163.5C 511.676,166.785 511.176,170.118 511,173.5C 507.45,176.685 507.95,179.018 512.5,180.5C 510.69,182.707 510.357,185.041 511.5,187.5C 513.754,185.622 515.754,183.456 517.5,181C 518.549,180.508 519.549,180.674 520.5,181.5C 521.759,185.254 520.426,187.587 516.5,188.5C 517.746,192.396 519.413,196.063 521.5,199.5C 521.146,202.442 520.48,205.275 519.5,208C 522.146,208.497 524.813,208.664 527.5,208.5C 532.84,209.312 537.673,210.979 542,213.5C 545.194,213.41 548.027,212.41 550.5,210.5C 551.705,211.577 552.372,212.91 552.5,214.5C 550.345,214.372 548.345,214.872 546.5,216C 547.406,217.699 547.739,219.533 547.5,221.5C 546.5,221.5 545.5,221.5 544.5,221.5C 544.5,223.167 544.5,224.833 544.5,226.5C 537.318,226.23 534.318,229.563 535.5,236.5C 533.219,238.428 530.553,239.428 527.5,239.5C 527.5,238.5 527.5,237.5 527.5,236.5C 529.199,236.66 530.866,236.494 532.5,236C 533.274,233.595 533.774,231.095 534,228.5C 536.436,226.533 538.936,224.866 541.5,223.5C 542.284,218.537 540.284,215.703 535.5,215C 531.931,210.452 527.931,209.785 523.5,213C 519.745,213.755 516.078,213.589 512.5,212.5C 512.31,208.643 510.31,206.976 506.5,207.5C 506.343,206.127 506.51,204.793 507,203.5C 510.718,201.058 513.218,197.725 514.5,193.5C 514.253,192.287 513.586,191.62 512.5,191.5C 509.34,190.683 506.673,189.016 504.5,186.5C 504.563,183.867 504.229,181.201 503.5,178.5C 500.288,168.05 495.288,167.05 488.5,175.5C 487.546,171.825 487.546,168.492 488.5,165.5C 492.434,164.64 496.434,164.307 500.5,164.5C 500.721,166.664 501.721,168.33 503.5,169.5C 504.696,172.221 506.696,173.387 509.5,173C 509.621,167.82 511.287,163.32 514.5,159.5C 515.452,161.045 515.785,162.712 515.5,164.5C 516.5,164.5 517.5,164.5 518.5,164.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#443635\",\n    d: \"M 483.5,119.5 C 484.473,121.948 484.806,124.615 484.5,127.5C 484.453,137.516 484.787,147.516 485.5,157.5C 486.959,157.567 488.292,157.234 489.5,156.5C 488.701,159.43 488.368,162.43 488.5,165.5C 487.546,168.492 487.546,171.825 488.5,175.5C 495.288,167.05 500.288,168.05 503.5,178.5C 501.57,178.229 500.236,177.229 499.5,175.5C 498.508,173.974 497.008,173.307 495,173.5C 493.342,173.675 492.009,174.342 491,175.5C 489.612,189.455 489.112,203.455 489.5,217.5C 490.5,222.5 488.5,224.5 483.5,223.5C 483.341,220.813 484.175,218.48 486,216.5C 486.167,205.172 486.001,193.838 485.5,182.5C 485.285,174.714 485.952,167.048 487.5,159.5C 486.167,159.5 484.833,159.5 483.5,159.5C 483.5,146.167 483.5,132.833 483.5,119.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#282332\",\n    d: \"M 88.5,204.5 C 87.1667,204.167 85.8333,203.833 84.5,203.5C 84.5,203.167 84.5,202.833 84.5,202.5C 83.1204,200.281 83.4537,198.281 85.5,196.5C 87.2141,197.609 87.8808,196.942 87.5,194.5C 90.6623,193.889 93.829,193.222 97,192.5C 99.0345,191.056 99.8678,189.056 99.5,186.5C 103.846,186.666 108.179,186.499 112.5,186C 113.867,183.328 114.867,180.495 115.5,177.5C 116.167,179.167 116.833,180.833 117.5,182.5C 120.317,181.905 122.65,180.572 124.5,178.5C 125.442,178.608 126.275,178.941 127,179.5C 129.238,177.691 130.405,175.358 130.5,172.5C 133.841,173.005 137.174,173.172 140.5,173C 139.639,170.679 140.639,169.513 143.5,169.5C 143.244,171.792 143.577,173.959 144.5,176C 137.908,176.582 135.075,180.082 136,186.5C 139.603,190.367 144.103,192.034 149.5,191.5C 150.466,195.065 150.466,198.565 149.5,202C 130.142,202.809 110.809,202.642 91.5,201.5C 89.484,201.516 88.484,202.516 88.5,204.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#48414e\",\n    d: \"M 45.5,191.5 C 47.9908,191.829 50.1575,192.829 52,194.5C 53.0174,200.992 54.1841,200.992 55.5,194.5C 58.2372,194.401 60.9039,194.735 63.5,195.5C 65.1172,196.038 66.7839,196.371 68.5,196.5C 68.2591,193.966 69.2591,192.3 71.5,191.5C 71.317,193.936 71.9837,196.103 73.5,198C 70.635,200.286 67.3017,201.12 63.5,200.5C 63.5,200.167 63.5,199.833 63.5,199.5C 63.5,198.5 63.5,197.5 63.5,196.5C 61.2478,195.667 59.0811,195.667 57,196.5C 56.3333,200.167 56.3333,203.833 57,207.5C 57.2784,208.416 57.7784,209.082 58.5,209.5C 57.2524,211.649 55.7524,213.649 54,215.5C 53.6667,215.167 53.3333,214.833 53,214.5C 51.5993,216.192 49.7659,216.859 47.5,216.5C 47.2714,214.567 46.4381,212.9 45,211.5C 43.9887,210.663 42.8221,210.33 41.5,210.5C 40.7695,213.508 39.4362,216.175 37.5,218.5C 37.5,216.833 37.5,215.167 37.5,213.5C 37.0254,210.918 37.6921,208.918 39.5,207.5C 48.4022,211.051 50.4022,208.718 45.5,200.5C 46.826,197.481 46.826,194.481 45.5,191.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#614e59\",\n    d: \"M 196.5,191.5 C 197.29,192.609 197.79,193.942 198,195.5C 200.403,193.918 202.903,192.584 205.5,191.5C 204.036,193.63 202.036,194.963 199.5,195.5C 197.92,213.453 196.92,231.453 196.5,249.5C 196.649,250.552 196.483,251.552 196,252.5C 195.262,250.047 194.762,247.547 194.5,245C 195.624,229.189 196.291,213.355 196.5,197.5C 195.167,197.5 193.833,197.5 192.5,197.5C 193.209,196.596 194.209,196.263 195.5,196.5C 195.216,194.585 195.549,192.919 196.5,191.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6b5b66\",\n    d: \"M 258.5,202.5 C 258.369,203.239 258.536,203.906 259,204.5C 259.278,203.584 259.778,202.918 260.5,202.5C 260.57,205.659 262.237,207.326 265.5,207.5C 265.5,207.833 265.5,208.167 265.5,208.5C 264.624,208.369 263.957,208.702 263.5,209.5C 264.456,211.075 265.123,212.742 265.5,214.5C 264.883,214.389 264.383,214.056 264,213.5C 263.187,215.436 262.687,217.436 262.5,219.5C 261.542,217.698 260.875,215.698 260.5,213.5C 261.613,212.054 261.78,210.387 261,208.5C 258.901,207.534 257.068,206.2 255.5,204.5C 254.402,205.615 253.235,205.615 252,204.5C 251.5,204.833 251,205.167 250.5,205.5C 251.131,209.034 251.798,212.534 252.5,216C 252.272,216.399 251.938,216.565 251.5,216.5C 251.167,216.5 250.833,216.5 250.5,216.5C 250.496,209.486 248.663,208.819 245,214.5C 244.309,212.109 243.309,212.109 242,214.5C 241.601,214.272 241.435,213.938 241.5,213.5C 244.251,209.243 247.584,205.41 251.5,202C 253.885,201.444 256.218,201.61 258.5,202.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#433950\",\n    d: \"M 316.5,191.5 C 318.819,199.229 319.985,207.229 320,215.5C 317.205,213.707 314.705,211.54 312.5,209C 314.456,209.222 316.29,210.055 318,211.5C 317.055,204.927 316.555,198.26 316.5,191.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#584441\",\n    d: \"M 482.5,118.5 C 483.167,118.5 483.5,118.833 483.5,119.5C 483.5,132.833 483.5,146.167 483.5,159.5C 484.833,159.5 486.167,159.5 487.5,159.5C 485.952,167.048 485.285,174.714 485.5,182.5C 486.001,193.838 486.167,205.172 486,216.5C 484.175,218.48 483.341,220.813 483.5,223.5C 482.833,223.5 482.167,223.5 481.5,223.5C 482.58,219.107 483.247,214.607 483.5,210C 482.543,179.512 482.209,149.012 482.5,118.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#444054\",\n    d: \"M 151.5,202.5 C 151.5,203.167 151.5,203.833 151.5,204.5C 133.823,205.213 115.989,205.88 98,206.5C 95.9843,206.26 93.9843,205.926 92,205.5C 90.0614,205.954 88.228,206.621 86.5,207.5C 86.2671,205.938 85.6005,204.605 84.5,203.5C 85.8333,203.833 87.1667,204.167 88.5,204.5C 108.387,203.316 128.387,203.316 148.5,204.5C 149.739,204.058 150.739,203.391 151.5,202.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bcabab\",\n    d: \"M 260.5,202.5 C 262.34,204.168 264.34,205.668 266.5,207C 266.272,207.399 265.938,207.565 265.5,207.5C 262.237,207.326 260.57,205.659 260.5,202.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#534649\",\n    d: \"M 435.5,95.5 C 435.833,95.5 436.167,95.5 436.5,95.5C 436.796,111.236 437.796,126.902 439.5,142.5C 438.795,217.376 438.128,292.376 437.5,367.5C 436.698,276.999 436.031,186.332 435.5,95.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a6977\",\n    d: \"M 260.5,213.5 C 260.167,213.5 259.833,213.5 259.5,213.5C 257.833,213.5 256.167,213.5 254.5,213.5C 254.453,220.267 254.953,226.934 256,233.5C 253.929,227.979 252.429,222.312 251.5,216.5C 251.938,216.565 252.272,216.399 252.5,216C 251.798,212.534 251.131,209.034 250.5,205.5C 251,205.167 251.5,204.833 252,204.5C 253.235,205.615 254.402,205.615 255.5,204.5C 257.068,206.2 258.901,207.534 261,208.5C 261.78,210.387 261.613,212.054 260.5,213.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#58536b\",\n    d: \"M 154.5,201.5 C 155.268,202.263 155.768,203.263 156,204.5C 158.658,203.306 159.824,204.306 159.5,207.5C 159.5,210.833 159.5,214.167 159.5,217.5C 156.582,218.454 153.582,219.121 150.5,219.5C 147.845,219.56 145.511,218.893 143.5,217.5C 137.472,214.066 132.306,215.066 128,220.5C 125.993,219.331 123.827,218.665 121.5,218.5C 120.874,215.362 119.54,212.529 117.5,210C 111.478,208.892 105.812,209.726 100.5,212.5C 98.7758,215.95 98.1091,219.617 98.5,223.5C 96.8333,223.5 95.1667,223.5 93.5,223.5C 93.2475,226.32 93.7475,228.986 95,231.5C 96.0113,232.337 97.1779,232.67 98.5,232.5C 98.2902,236.858 99.2902,240.858 101.5,244.5C 99.8877,243.548 98.3877,243.214 97,243.5C 95.6842,246.688 95.1842,250.022 95.5,253.5C 92.4824,253.296 89.4824,252.963 86.5,252.5C 86.5,237.5 86.5,222.5 86.5,207.5C 88.228,206.621 90.0614,205.954 92,205.5C 93.9843,205.926 95.9843,206.26 98,206.5C 115.989,205.88 133.823,205.213 151.5,204.5C 152.222,204.082 152.722,203.416 153,202.5C 154.087,204.932 154.587,204.598 154.5,201.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#524042\",\n    d: \"M 167.5,184.5 C 168.889,192.422 169.889,200.422 170.5,208.5C 171.944,207.019 172.611,207.352 172.5,209.5C 170.527,212.907 169.027,216.574 168,220.5C 166.34,229.115 165.006,237.782 164,246.5C 163.505,244.527 163.338,242.527 163.5,240.5C 163.768,238.901 163.434,237.568 162.5,236.5C 161.711,230.014 160.711,223.68 159.5,217.5C 159.5,214.167 159.5,210.833 159.5,207.5C 160.5,207.5 161.5,207.5 162.5,207.5C 162.5,205.5 162.5,203.5 162.5,201.5C 164.011,198.456 164.678,195.122 164.5,191.5C 166.083,189.492 167.083,187.159 167.5,184.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#77666e\",\n    d: \"M 308.5,203.5 C 307.527,203.987 306.527,204.487 305.5,205C 308.318,207.869 307.652,209.369 303.5,209.5C 303.334,213.514 303.501,217.514 304,221.5C 304.414,221.043 304.914,220.709 305.5,220.5C 306.182,221.243 306.849,221.909 307.5,222.5C 305.942,228.449 304.442,234.449 303,240.5C 302.311,241.357 301.478,242.023 300.5,242.5C 299.672,237.868 299.172,233.202 299,228.5C 294.679,235.133 290.346,241.8 286,248.5C 285.187,250.436 284.687,252.436 284.5,254.5C 283.833,254.5 283.5,254.167 283.5,253.5C 283.719,252.325 283.386,251.325 282.5,250.5C 280.677,251.747 278.677,252.414 276.5,252.5C 276.567,251.041 276.234,249.708 275.5,248.5C 276.118,244.862 275.785,241.195 274.5,237.5C 274.833,237.5 275.167,237.5 275.5,237.5C 276.575,238.562 277.575,238.562 278.5,237.5C 275.637,233.768 273.303,229.768 271.5,225.5C 277.204,226.942 282.87,226.775 288.5,225C 289.399,223.348 290.399,221.848 291.5,220.5C 288.708,228.591 284.708,235.924 279.5,242.5C 278.634,244.144 278.134,245.811 278,247.5C 285,239.167 292.667,231.5 301,224.5C 299.719,220.93 298.719,217.263 298,213.5C 299.412,208.891 301.745,204.891 305,201.5C 306.459,201.808 307.626,202.475 308.5,203.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#524c5e\",\n    d: \"M 71.5,191.5 C 71.8333,191.5 72.1667,191.5 72.5,191.5C 74.8333,191.5 77.1667,191.5 79.5,191.5C 79.8134,194.247 79.48,196.914 78.5,199.5C 76.2387,201.455 74.2387,203.622 72.5,206C 72.6667,206.5 72.8333,207 73,207.5C 73.7792,204.903 74.2792,204.903 74.5,207.5C 74.3689,212.071 72.5356,215.738 69,218.5C 68.5172,217.552 68.3505,216.552 68.5,215.5C 66.4727,215.662 64.4727,215.495 62.5,215C 61.0229,213.188 59.6896,211.355 58.5,209.5C 57.7784,209.082 57.2784,208.416 57,207.5C 56.3333,203.833 56.3333,200.167 57,196.5C 59.0811,195.667 61.2478,195.667 63.5,196.5C 63.5,197.5 63.5,198.5 63.5,199.5C 61.8333,199.5 60.1667,199.5 58.5,199.5C 58.5,202.167 58.5,204.833 58.5,207.5C 59.675,207.281 60.675,207.614 61.5,208.5C 63.1583,216.002 65.6583,216.335 69,209.5C 69.4955,207.527 69.6621,205.527 69.5,203.5C 66.784,203.614 64.784,202.614 63.5,200.5C 67.3017,201.12 70.635,200.286 73.5,198C 71.9837,196.103 71.317,193.936 71.5,191.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#625d75\",\n    d: \"M 63.5,199.5 C 63.5,199.833 63.5,200.167 63.5,200.5C 64.784,202.614 66.784,203.614 69.5,203.5C 69.6621,205.527 69.4955,207.527 69,209.5C 65.6583,216.335 63.1583,216.002 61.5,208.5C 60.675,207.614 59.675,207.281 58.5,207.5C 58.5,204.833 58.5,202.167 58.5,199.5C 60.1667,199.5 61.8333,199.5 63.5,199.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#807179\",\n    d: \"M 244.5,169.5 C 244.323,184.351 242.656,199.018 239.5,213.5C 239.97,214.463 240.637,214.463 241.5,213.5C 241.435,213.938 241.601,214.272 242,214.5C 243.309,212.109 244.309,212.109 245,214.5C 248.663,208.819 250.496,209.486 250.5,216.5C 248.372,218.403 246.039,220.069 243.5,221.5C 242.833,219.5 242.167,217.5 241.5,215.5C 240.833,215.833 240.167,216.167 239.5,216.5C 239.415,208.161 240.248,199.828 242,191.5C 242.499,185.843 242.666,180.176 242.5,174.5C 243.167,172.833 243.833,171.167 244.5,169.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b49f98\",\n    d: \"M 265.5,208.5 C 270.297,210.165 274.964,211.998 279.5,214C 282.167,214.667 284.833,214.667 287.5,214C 289.996,211.884 292.663,211.384 295.5,212.5C 294.674,215.485 293.341,218.151 291.5,220.5C 290.399,221.848 289.399,223.348 288.5,225C 282.87,226.775 277.204,226.942 271.5,225.5C 269.25,222.001 267.25,218.335 265.5,214.5C 265.123,212.742 264.456,211.075 263.5,209.5C 263.957,208.702 264.624,208.369 265.5,208.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#625d74\",\n    d: \"M 365.5,202.5 C 373.681,206.175 381.515,210.508 389,215.5C 391.639,223.265 393.139,231.265 393.5,239.5C 391.5,239.5 389.5,239.5 387.5,239.5C 387.282,234.789 387.615,230.122 388.5,225.5C 387.355,222.366 385.521,219.699 383,217.5C 377.78,218.79 376.28,221.957 378.5,227C 378.259,228.984 377.592,230.817 376.5,232.5C 377.631,233.604 378.465,233.271 379,231.5C 379.182,228.774 379.682,226.107 380.5,223.5C 380.833,224.333 381.167,225.167 381.5,226C 380.073,231.528 378.907,237.028 378,242.5C 380.204,238.078 381.871,233.411 383,228.5C 384.346,242.87 385.846,257.204 387.5,271.5C 385.833,271.5 384.167,271.5 382.5,271.5C 382.719,270.325 382.386,269.325 381.5,268.5C 380.729,270.862 379.895,273.196 379,275.5C 378.549,273.071 377.715,272.904 376.5,275C 377.381,275.708 378.047,276.542 378.5,277.5C 374.208,290.734 368.874,303.401 362.5,315.5C 360.058,317.121 358.725,319.454 358.5,322.5C 357.861,321.903 357.528,321.07 357.5,320C 358.437,313.191 359.104,306.357 359.5,299.5C 359.701,295.426 360.368,291.426 361.5,287.5C 363.557,284.394 365.39,281.061 367,277.5C 369.821,269.214 372.488,260.881 375,252.5C 375.667,250.833 375.667,249.167 375,247.5C 371.371,260.558 366.871,273.224 361.5,285.5C 360.719,284.271 360.219,282.938 360,281.5C 358.838,287.445 358.338,293.445 358.5,299.5C 357.228,313.286 355.228,326.952 352.5,340.5C 351.341,345.468 350.341,350.468 349.5,355.5C 345.833,370.174 342.166,384.841 338.5,399.5C 336.876,399.64 335.71,398.973 335,397.5C 332.665,400.166 330.831,403.166 329.5,406.5C 329.709,407.086 330.043,407.586 330.5,408C 329.069,408.465 327.903,409.299 327,410.5C 326.292,407.732 324.792,406.899 322.5,408C 322.833,407.667 323.167,407.333 323.5,407C 322.833,405.333 322.167,403.667 321.5,402C 320.258,401.689 319.258,402.189 318.5,403.5C 317.571,402.311 317.238,400.978 317.5,399.5C 321.648,399.469 324.648,398.469 326.5,396.5C 329.012,392.626 330.345,388.292 330.5,383.5C 328.833,383.5 327.167,383.5 325.5,383.5C 326.408,389.371 324.075,393.037 318.5,394.5C 315.207,400.642 311.207,406.308 306.5,411.5C 305.304,411.154 305.304,410.654 306.5,410C 305.906,409.536 305.239,409.369 304.5,409.5C 315.01,396.483 324.01,382.483 331.5,367.5C 332.833,367.5 334.167,367.5 335.5,367.5C 335.549,361.742 337.049,356.408 340,351.5C 340.333,346.167 340.667,340.833 341,335.5C 341.692,334.975 342.192,334.308 342.5,333.5C 340.534,329.52 338.534,325.52 336.5,321.5C 340.8,311.137 345.133,300.47 349.5,289.5C 351.978,282.711 354.312,275.878 356.5,269C 355.633,256.905 352.633,245.405 347.5,234.5C 347.833,233.833 348.167,233.167 348.5,232.5C 349.5,232.5 350.5,232.5 351.5,232.5C 351.003,230.403 350.67,228.57 350.5,227C 352.979,222.912 352.979,218.746 350.5,214.5C 348.493,212.992 346.826,211.158 345.5,209C 343.655,207.872 341.655,207.372 339.5,207.5C 339.789,203.894 339.456,200.394 338.5,197C 343.014,198.374 347.681,198.707 352.5,198C 342.961,199.568 342.628,200.401 351.5,200.5C 351.5,202.833 351.5,205.167 351.5,207.5C 355.545,207.358 359.379,207.358 363,207.5C 363.333,206.833 363.667,206.167 364,205.5C 364.71,206.973 365.876,207.64 367.5,207.5C 367.169,205.678 366.502,204.011 365.5,202.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#534d5e\",\n    d: \"M 512.5,212.5 C 512.5,213.167 512.5,213.833 512.5,214.5C 512.577,215.75 513.244,216.583 514.5,217C 517.226,217.182 519.893,217.682 522.5,218.5C 520.587,219.051 518.587,219.218 516.5,219C 514.158,219.836 512.158,221.17 510.5,223C 505.167,224.333 501.833,222.333 500.5,217C 503.528,213.102 507.528,211.602 512.5,212.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2e2c3f\",\n    d: \"M 563.5,207.5 C 563.5,210.5 563.5,213.5 563.5,216.5C 562.069,216.881 561.236,217.881 561,219.5C 560.517,218.552 560.351,217.552 560.5,216.5C 560.677,213.016 561.677,210.016 563.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7a6f7c\",\n    d: \"M 348.5,232.5 C 348.167,233.167 347.833,233.833 347.5,234.5C 344.485,230.474 340.485,227.64 335.5,226C 326.896,222.522 318.229,219.356 309.5,216.5C 311.518,215.953 313.351,214.953 315,213.5C 317.405,216.357 320.238,217.524 323.5,217C 322.833,217.333 322.167,217.667 321.5,218C 324.952,218.892 327.952,220.558 330.5,223C 336.012,225.058 341.678,226.725 347.5,228C 348.38,229.356 348.714,230.856 348.5,232.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#74687f\",\n    d: \"M 143.5,217.5 C 145.511,218.893 147.845,219.56 150.5,219.5C 153.582,219.121 156.582,218.454 159.5,217.5C 160.711,223.68 161.711,230.014 162.5,236.5C 162.5,237.5 162.5,238.5 162.5,239.5C 159.927,238.507 157.26,237.674 154.5,237C 150.629,230.839 147.296,231.005 144.5,237.5C 142.608,238.473 140.608,239.14 138.5,239.5C 136.354,238.106 134.021,237.44 131.5,237.5C 131.833,234.5 130.5,233.167 127.5,233.5C 127.5,229.5 127.5,225.5 127.5,221.5C 132.508,218.967 137.841,217.634 143.5,217.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#484157\",\n    d: \"M 352.5,215.5 C 353.748,216.334 354.415,217.667 354.5,219.5C 356.33,232.117 357.163,244.783 357,257.5C 355.829,243.461 354.329,229.461 352.5,215.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5c596f\",\n    d: \"M 560.5,216.5 C 560.351,217.552 560.517,218.552 561,219.5C 561.236,217.881 562.069,216.881 563.5,216.5C 563.5,220.5 563.5,224.5 563.5,228.5C 562.199,227.36 561.032,226.027 560,224.5C 559.333,228.5 558.667,228.5 558,224.5C 555.827,227.277 555.327,227.11 556.5,224C 554.064,221.646 554.064,219.479 556.5,217.5C 557.959,217.567 559.292,217.234 560.5,216.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#453f4d\",\n    d: \"M 512.5,191.5 C 513.586,191.62 514.253,192.287 514.5,193.5C 513.218,197.725 510.718,201.058 507,203.5C 506.51,204.793 506.343,206.127 506.5,207.5C 510.31,206.976 512.31,208.643 512.5,212.5C 507.528,211.602 503.528,213.102 500.5,217C 501.833,222.333 505.167,224.333 510.5,223C 512.158,221.17 514.158,219.836 516.5,219C 518.587,219.218 520.587,219.051 522.5,218.5C 519.893,217.682 517.226,217.182 514.5,217C 513.244,216.583 512.577,215.75 512.5,214.5C 515.92,216.222 519.586,216.889 523.5,216.5C 523.714,218.144 523.38,219.644 522.5,221C 519.396,223.854 515.73,225.021 511.5,224.5C 511.743,227.883 511.076,231.049 509.5,234C 507.765,234.651 506.098,234.485 504.5,233.5C 503.526,231.257 503.192,228.924 503.5,226.5C 500.873,225.908 498.206,225.575 495.5,225.5C 495.5,227.5 495.5,229.5 495.5,231.5C 491.301,232.966 486.967,233.966 482.5,234.5C 484.645,233.022 486.979,231.688 489.5,230.5C 490.427,227.287 491.427,224.12 492.5,221C 492.043,220.586 491.709,220.086 491.5,219.5C 492.803,215.088 495.47,212.088 499.5,210.5C 501.027,203.474 505.193,198.807 512,196.5C 512.494,194.866 512.66,193.199 512.5,191.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6d575f\",\n    d: \"M 192.5,197.5 C 193.833,197.5 195.167,197.5 196.5,197.5C 196.291,213.355 195.624,229.189 194.5,245C 194.762,247.547 195.262,250.047 196,252.5C 196.483,251.552 196.649,250.552 196.5,249.5C 198.168,251.513 200.168,253.18 202.5,254.5C 204.045,255.452 205.712,255.785 207.5,255.5C 207.338,253.473 207.505,251.473 208,249.5C 208.333,250.167 208.667,250.833 209,251.5C 209.433,247.676 210.599,244.343 212.5,241.5C 212.03,246.537 211.363,251.537 210.5,256.5C 210.863,257.183 211.196,257.85 211.5,258.5C 211.204,260.403 210.537,262.07 209.5,263.5C 208.466,264.687 207.133,265.52 205.5,266C 204.748,266.671 204.414,267.504 204.5,268.5C 203.647,270.893 201.981,272.226 199.5,272.5C 199.382,269.312 198.549,266.312 197,263.5C 194.788,272.348 193.954,281.348 194.5,290.5C 193.992,285.4 192.992,280.4 191.5,275.5C 191.167,274.167 190.833,272.833 190.5,271.5C 191.397,272.598 192.23,272.598 193,271.5C 194.09,267.384 194.923,263.218 195.5,259C 190.963,242.35 186.963,225.516 183.5,208.5C 184.165,206.302 184.832,203.969 185.5,201.5C 188.021,200.312 190.355,198.978 192.5,197.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c3b6b9\",\n    d: \"M 308.5,203.5 C 307.626,202.475 306.459,201.808 305,201.5C 301.745,204.891 299.412,208.891 298,213.5C 298.719,217.263 299.719,220.93 301,224.5C 292.667,231.5 285,239.167 278,247.5C 278.134,245.811 278.634,244.144 279.5,242.5C 284.708,235.924 288.708,228.591 291.5,220.5C 293.341,218.151 294.674,215.485 295.5,212.5C 296.234,211.292 296.567,209.959 296.5,208.5C 298.139,205.228 300.139,202.228 302.5,199.5C 303.627,198.878 304.627,198.045 305.5,197C 306.5,196.333 307.5,196.333 308.5,197C 310.484,200.104 311.484,203.271 311.5,206.5C 310.712,205.23 309.712,204.23 308.5,203.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#684f54\",\n    d: \"M 449.5,207.5 C 450.501,220.839 450.501,234.172 449.5,247.5C 450.666,266.158 451.666,284.825 452.5,303.5C 453.228,306.212 454.061,308.879 455,311.5C 455.221,308.057 456.221,307.724 458,310.5C 459.707,309.862 461.54,309.862 463.5,310.5C 463.808,308.076 463.474,305.743 462.5,303.5C 459.145,299.154 458.812,294.488 461.5,289.5C 461.747,288.287 462.414,287.62 463.5,287.5C 463.146,291.637 463.646,295.637 465,299.5C 466.874,301.786 469.041,302.12 471.5,300.5C 473.615,301.079 475.615,301.912 477.5,303C 476.978,303.561 476.645,304.228 476.5,305C 477.268,307.136 477.934,309.303 478.5,311.5C 476.144,316.118 476.144,320.785 478.5,325.5C 473.723,329.297 468.723,332.63 463.5,335.5C 462.031,339.749 461.198,344.082 461,348.5C 462.848,351.041 465.348,352.041 468.5,351.5C 468.31,354.877 466.81,357.544 464,359.5C 463.51,360.793 463.343,362.127 463.5,363.5C 468.833,363.5 474.167,363.5 479.5,363.5C 479.5,362.167 479.5,360.833 479.5,359.5C 480.167,359.5 480.833,359.5 481.5,359.5C 481.575,362.206 481.908,364.873 482.5,367.5C 481.5,367.5 480.5,367.5 479.5,367.5C 479.5,381.167 479.5,394.833 479.5,408.5C 478.85,408.804 478.183,409.137 477.5,409.5C 476.008,407.834 474.175,406.834 472,406.5C 467.533,406.934 463.366,408.267 459.5,410.5C 457.866,410.032 456.7,409.032 456,407.5C 455.612,408.428 454.945,409.095 454,409.5C 451.901,408.713 449.734,408.38 447.5,408.5C 447.976,405.282 449.309,402.448 451.5,400C 449.19,399.503 446.857,399.337 444.5,399.5C 443.834,391.505 443.168,383.505 442.5,375.5C 443.833,356.828 443.833,338.161 442.5,319.5C 443.5,319.5 444.5,319.5 445.5,319.5C 445.833,287.465 445.166,255.465 443.5,223.5C 444.5,223.5 445.5,223.5 446.5,223.5C 446.334,228.844 446.501,234.177 447,239.5C 446.852,228.453 447.686,217.786 449.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c4b7b7\",\n    d: \"M 265.5,214.5 C 267.25,218.335 269.25,222.001 271.5,225.5C 273.303,229.768 275.637,233.768 278.5,237.5C 277.575,238.562 276.575,238.562 275.5,237.5C 271.184,233.247 266.351,229.58 261,226.5C 260.761,224.041 261.261,221.707 262.5,219.5C 262.687,217.436 263.187,215.436 264,213.5C 264.383,214.056 264.883,214.389 265.5,214.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#171524\",\n    d: \"M 552.5,214.5 C 553.545,215.878 554.878,216.878 556.5,217.5C 554.064,219.479 554.064,221.646 556.5,224C 555.327,227.11 555.827,227.277 558,224.5C 558.667,228.5 559.333,228.5 560,224.5C 561.032,226.027 562.199,227.36 563.5,228.5C 563.5,230.167 563.5,231.833 563.5,233.5C 561.352,233.611 561.019,232.944 562.5,231.5C 562.043,230.702 561.376,230.369 560.5,230.5C 559.06,231.363 557.726,231.363 556.5,230.5C 555.784,231.311 554.95,231.978 554,232.5C 551.566,231.678 549.066,231.344 546.5,231.5C 546.708,233.92 546.374,236.253 545.5,238.5C 545.855,239.522 546.522,240.189 547.5,240.5C 547.013,241.473 546.513,242.473 546,243.5C 545.333,242.167 544.667,242.167 544,243.5C 543.043,240.621 543.543,238.121 545.5,236C 544.224,234.788 542.724,233.955 541,233.5C 539.159,234.562 537.326,235.562 535.5,236.5C 534.318,229.563 537.318,226.23 544.5,226.5C 544.5,224.833 544.5,223.167 544.5,221.5C 545.5,221.5 546.5,221.5 547.5,221.5C 547.739,219.533 547.406,217.699 546.5,216C 548.345,214.872 550.345,214.372 552.5,214.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3c394c\",\n    d: \"M 74.5,207.5 C 74.8333,207.5 75.1667,207.5 75.5,207.5C 75.8333,207.5 76.1667,207.5 76.5,207.5C 76.8254,215.352 76.492,223.018 75.5,230.5C 76.188,225.758 75.188,224.925 72.5,228C 71.2068,228.49 69.8734,228.657 68.5,228.5C 68.5,229.5 68.5,230.5 68.5,231.5C 62.6078,230.436 56.9411,228.769 51.5,226.5C 51.1179,229.646 51.1179,232.646 51.5,235.5C 49.7376,235.357 48.0709,235.691 46.5,236.5C 45.5713,235.311 45.238,233.978 45.5,232.5C 46.8333,232.5 48.1667,232.5 49.5,232.5C 49.627,229.184 50.627,226.184 52.5,223.5C 48.2569,223.347 43.9236,223.18 39.5,223C 37.8934,221.951 37.2267,220.451 37.5,218.5C 39.4362,216.175 40.7695,213.508 41.5,210.5C 42.8221,210.33 43.9887,210.663 45,211.5C 46.4381,212.9 47.2714,214.567 47.5,216.5C 49.7659,216.859 51.5993,216.192 53,214.5C 53.3333,214.833 53.6667,215.167 54,215.5C 55.7524,213.649 57.2524,211.649 58.5,209.5C 59.6896,211.355 61.0229,213.188 62.5,215C 64.4727,215.495 66.4727,215.662 68.5,215.5C 68.3505,216.552 68.5172,217.552 69,218.5C 72.5356,215.738 74.3689,212.071 74.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3b3643\",\n    d: \"M 527.5,236.5 C 526.508,236.672 525.842,236.338 525.5,235.5C 525.389,234.883 525.056,234.383 524.5,234C 518.485,232.892 512.818,233.725 507.5,236.5C 505.218,235.777 502.884,235.443 500.5,235.5C 502.506,231.863 501.84,228.863 498.5,226.5C 497.928,228.917 496.928,231.084 495.5,233C 491.271,233.722 487.271,235.055 483.5,237C 481.771,238.789 481.104,240.956 481.5,243.5C 480.171,241.941 478.838,240.275 477.5,238.5C 478.853,237.476 479.52,236.143 479.5,234.5C 480.5,234.5 481.5,234.5 482.5,234.5C 486.967,233.966 491.301,232.966 495.5,231.5C 495.5,229.5 495.5,227.5 495.5,225.5C 498.206,225.575 500.873,225.908 503.5,226.5C 503.192,228.924 503.526,231.257 504.5,233.5C 506.098,234.485 507.765,234.651 509.5,234C 511.076,231.049 511.743,227.883 511.5,224.5C 515.73,225.021 519.396,223.854 522.5,221C 523.38,219.644 523.714,218.144 523.5,216.5C 519.586,216.889 515.92,216.222 512.5,214.5C 512.5,213.833 512.5,213.167 512.5,212.5C 516.078,213.589 519.745,213.755 523.5,213C 527.931,209.785 531.931,210.452 535.5,215C 540.284,215.703 542.284,218.537 541.5,223.5C 538.936,224.866 536.436,226.533 534,228.5C 533.774,231.095 533.274,233.595 532.5,236C 530.866,236.494 529.199,236.66 527.5,236.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#958a8a\",\n    d: \"M 259.5,213.5 C 259.833,213.5 260.167,213.5 260.5,213.5C 260.875,215.698 261.542,217.698 262.5,219.5C 261.261,221.707 260.761,224.041 261,226.5C 266.351,229.58 271.184,233.247 275.5,237.5C 275.167,237.5 274.833,237.5 274.5,237.5C 269.275,233.966 264.108,230.299 259,226.5C 259.251,224.045 259.751,221.545 260.5,219C 260.057,217.175 259.723,215.342 259.5,213.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#48465d\",\n    d: \"M 37.5,213.5 C 37.5,215.167 37.5,216.833 37.5,218.5C 36.0069,219.312 35.3402,220.645 35.5,222.5C 35.9663,226.969 36.9663,231.303 38.5,235.5C 39.325,236.386 40.325,236.719 41.5,236.5C 41.933,239.166 42.433,241.832 43,244.5C 43.4169,245.756 44.2502,246.423 45.5,246.5C 45.6054,250.548 45.2721,254.548 44.5,258.5C 42.0672,258.273 40.4006,259.273 39.5,261.5C 37.8333,261.5 36.1667,261.5 34.5,261.5C 34.5503,269.23 33.8836,276.896 32.5,284.5C 30.677,285.747 28.677,286.414 26.5,286.5C 31.6459,283.255 32.9793,278.588 30.5,272.5C 31.0607,255.498 31.7274,238.498 32.5,221.5C 34.5428,218.989 36.2094,216.322 37.5,213.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a2735\",\n    d: \"M 560.5,230.5 C 559.745,234.19 557.412,236.024 553.5,236C 551.649,237.752 549.649,239.252 547.5,240.5C 546.522,240.189 545.855,239.522 545.5,238.5C 546.374,236.253 546.708,233.92 546.5,231.5C 549.066,231.344 551.566,231.678 554,232.5C 554.95,231.978 555.784,231.311 556.5,230.5C 557.726,231.363 559.06,231.363 560.5,230.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5f525f\",\n    d: \"M 155.5,242.5 C 157.5,242.5 159.5,242.5 161.5,242.5C 161.5,244.167 161.5,245.833 161.5,247.5C 158.401,249.145 155.068,250.312 151.5,251C 144.65,251.305 137.816,251.805 131,252.5C 129.14,252.306 127.307,251.972 125.5,251.5C 117.95,253.143 110.283,253.977 102.5,254C 103.056,254.383 103.389,254.883 103.5,255.5C 100.975,254.36 98.3085,253.693 95.5,253.5C 95.1842,250.022 95.6842,246.688 97,243.5C 98.3877,243.214 99.8877,243.548 101.5,244.5C 105.236,246.79 109.236,248.124 113.5,248.5C 123.026,249.012 132.692,248.512 142.5,247C 142.167,246.667 141.833,246.333 141.5,246C 145.167,245.667 148.833,245.333 152.5,245C 153.373,243.955 154.373,243.122 155.5,242.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bcafb5\",\n    d: \"M 279.5,242.5 C 277.24,243.886 276.406,243.219 277,240.5C 278.016,241.634 278.683,241.301 279,239.5C 279.483,240.448 279.649,241.448 279.5,242.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#473c3f\",\n    d: \"M 434.5,50.5 C 434.833,50.5 435.167,50.5 435.5,50.5C 435.5,65.5 435.5,80.5 435.5,95.5C 436.031,186.332 436.698,276.999 437.5,367.5C 437.667,386.17 438,404.837 438.5,423.5C 440.167,423.5 441.833,423.5 443.5,423.5C 444.043,423.56 444.376,423.893 444.5,424.5C 443.687,425.814 442.687,426.981 441.5,428C 442.973,428.71 443.64,429.876 443.5,431.5C 443.414,432.496 443.748,433.329 444.5,434C 447.333,434.167 450.167,434.333 453,434.5C 458.919,433.708 464.752,432.708 470.5,431.5C 472.833,431.833 475.167,432.167 477.5,432.5C 478.63,433.622 479.297,434.956 479.5,436.5C 475.775,435.009 471.942,433.676 468,432.5C 466.374,433.289 464.874,434.289 463.5,435.5C 457.948,436.188 452.448,436.854 447,437.5C 444.667,436.833 442.333,436.167 440,435.5C 439.586,435.957 439.086,436.291 438.5,436.5C 437.803,440.377 437.136,444.21 436.5,448C 437.102,450.036 438.102,451.87 439.5,453.5C 452.817,454.499 466.15,454.833 479.5,454.5C 479.5,448.833 479.5,443.167 479.5,437.5C 480.492,437.328 481.158,437.662 481.5,438.5C 482.075,444.086 482.075,449.586 481.5,455C 472.942,456.441 464.276,456.941 455.5,456.5C 450.015,455.673 444.348,455.173 438.5,455C 437.667,454.167 436.833,453.333 436,452.5C 435.333,446.833 435.333,441.167 436,435.5C 436.956,434.421 437.789,433.255 438.5,432C 437.257,429.884 436.091,427.718 435,425.5C 434.5,300.5 434.333,175.5 434.5,50.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7c696d\",\n    d: \"M 211.5,258.5 C 211.196,257.85 210.863,257.183 210.5,256.5C 211.363,251.537 212.03,246.537 212.5,241.5C 211.375,240.348 211.375,239.348 212.5,238.5C 212.435,238.938 212.601,239.272 213,239.5C 218.25,233.101 221.584,225.768 223,217.5C 223.763,214.937 224.263,214.937 224.5,217.5C 220.919,231.516 216.586,245.182 211.5,258.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6a6077\",\n    d: \"M 143.5,217.5 C 137.841,217.634 132.508,218.967 127.5,221.5C 127.5,225.5 127.5,229.5 127.5,233.5C 130.5,233.167 131.833,234.5 131.5,237.5C 134.021,237.44 136.354,238.106 138.5,239.5C 140.608,239.14 142.608,238.473 144.5,237.5C 147.296,231.005 150.629,230.839 154.5,237C 157.26,237.674 159.927,238.507 162.5,239.5C 162.5,238.5 162.5,237.5 162.5,236.5C 163.434,237.568 163.768,238.901 163.5,240.5C 162.833,241.167 162.167,241.833 161.5,242.5C 159.5,242.5 157.5,242.5 155.5,242.5C 154.659,240.488 153.159,239.155 151,238.5C 146.948,239.229 143.115,240.562 139.5,242.5C 135.655,240.872 131.655,239.872 127.5,239.5C 127.216,236.746 126.549,234.08 125.5,231.5C 123.921,234.426 122.921,237.593 122.5,241C 119.786,242.867 118.119,245.367 117.5,248.5C 116.167,248.5 114.833,248.5 113.5,248.5C 109.236,248.124 105.236,246.79 101.5,244.5C 99.2902,240.858 98.2902,236.858 98.5,232.5C 97.1779,232.67 96.0113,232.337 95,231.5C 93.7475,228.986 93.2475,226.32 93.5,223.5C 95.1667,223.5 96.8333,223.5 98.5,223.5C 98.1091,219.617 98.7758,215.95 100.5,212.5C 105.812,209.726 111.478,208.892 117.5,210C 119.54,212.529 120.874,215.362 121.5,218.5C 123.827,218.665 125.993,219.331 128,220.5C 132.306,215.066 137.472,214.066 143.5,217.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#807280\",\n    d: \"M 106.5,213.5 C 110.201,214.118 113.867,214.951 117.5,216C 118.618,217.074 119.618,218.24 120.5,219.5C 120.8,226.428 120.966,233.428 121,240.5C 116.734,241.824 112.401,242.824 108,243.5C 106.309,240.641 103.809,239.308 100.5,239.5C 99.1466,232.106 99.3133,224.773 101,217.5C 103.167,216.512 105,215.179 106.5,213.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#60556b\",\n    d: \"M 155.5,242.5 C 154.373,243.122 153.373,243.955 152.5,245C 148.833,245.333 145.167,245.667 141.5,246C 141.833,246.333 142.167,246.667 142.5,247C 132.692,248.512 123.026,249.012 113.5,248.5C 114.833,248.5 116.167,248.5 117.5,248.5C 118.119,245.367 119.786,242.867 122.5,241C 122.921,237.593 123.921,234.426 125.5,231.5C 126.549,234.08 127.216,236.746 127.5,239.5C 131.655,239.872 135.655,240.872 139.5,242.5C 143.115,240.562 146.948,239.229 151,238.5C 153.159,239.155 154.659,240.488 155.5,242.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bdb1b4\",\n    d: \"M 309.5,216.5 C 318.229,219.356 326.896,222.522 335.5,226C 340.485,227.64 344.485,230.474 347.5,234.5C 352.633,245.405 355.633,256.905 356.5,269C 354.312,275.878 351.978,282.711 349.5,289.5C 347.071,293.222 344.904,297.222 343,301.5C 342.506,299.866 342.34,298.199 342.5,296.5C 343.388,284.86 343.721,273.193 343.5,261.5C 339.316,261.851 335.316,262.518 331.5,263.5C 327.5,263.5 323.5,263.5 319.5,263.5C 314.5,263.5 309.5,263.5 304.5,263.5C 304.333,274.838 304.5,286.172 305,297.5C 304.88,289.068 305.713,280.901 307.5,273C 305.679,270.544 305.012,267.711 305.5,264.5C 310.167,264.5 314.833,264.5 319.5,264.5C 320.376,264.369 321.043,264.702 321.5,265.5C 320.48,267.432 320.313,269.432 321,271.5C 321.333,270.167 321.667,268.833 322,267.5C 323,266.167 324,266.167 325,267.5C 325.617,266.551 325.451,265.718 324.5,265C 326.81,264.503 329.143,264.337 331.5,264.5C 334.807,263.949 338.14,263.616 341.5,263.5C 342.96,268.992 340.96,272.158 335.5,273C 326.525,274.666 317.525,274.999 308.5,274C 319.659,276.302 330.659,275.802 341.5,272.5C 341.663,275.94 339.996,277.94 336.5,278.5C 335.571,279.689 335.238,281.022 335.5,282.5C 332.833,282.5 330.167,282.5 327.5,282.5C 327.5,286.833 327.5,291.167 327.5,295.5C 324.833,295.5 322.167,295.5 319.5,295.5C 319.888,300.628 319.388,305.628 318,310.5C 317.5,310 317,309.5 316.5,309C 319.15,305.793 318.984,305.293 316,307.5C 314.84,305.203 313.84,305.536 313,308.5C 311.26,306.046 309.093,304.546 306.5,304C 310.735,308.404 315.068,312.571 319.5,316.5C 319.333,316.833 319.167,317.167 319,317.5C 315.793,314.85 315.293,315.016 317.5,318C 315.636,319.406 313.803,319.906 312,319.5C 311.501,324.823 311.334,330.156 311.5,335.5C 302.833,335.5 294.167,335.5 285.5,335.5C 284.834,331.012 284.501,326.346 284.5,321.5C 284.973,309.323 285.64,297.156 286.5,285C 286.484,276.536 285.484,268.202 283.5,260C 283.696,258.122 284.029,256.288 284.5,254.5C 284.687,252.436 285.187,250.436 286,248.5C 290.346,241.8 294.679,235.133 299,228.5C 299.172,233.202 299.672,237.868 300.5,242.5C 301.478,242.023 302.311,241.357 303,240.5C 304.442,234.449 305.942,228.449 307.5,222.5C 307.259,220.102 307.926,218.102 309.5,216.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#504a60\",\n    d: \"M 76.5,207.5 C 77.6609,221.994 77.8276,236.661 77,251.5C 74.2478,256.029 74.2478,260.695 77,265.5C 77.0947,288.831 76.9281,312.164 76.5,335.5C 75.8333,343.5 75.1667,351.5 74.5,359.5C 74.2622,338.151 74.5955,316.817 75.5,295.5C 76.6576,286.343 76.8243,277.009 76,267.5C 71.9518,265.181 67.6184,264.848 63,266.5C 58.4729,264.266 53.6395,262.933 48.5,262.5C 48.1667,261.833 47.8333,261.167 47.5,260.5C 50.7335,259.959 53.5669,258.626 56,256.5C 56.1805,254.512 56.0138,252.512 55.5,250.5C 51.5,251.167 49.8333,249.5 50.5,245.5C 48.7839,245.629 47.1172,245.962 45.5,246.5C 44.2502,246.423 43.4169,245.756 43,244.5C 42.433,241.832 41.933,239.166 41.5,236.5C 40.325,236.719 39.325,236.386 38.5,235.5C 36.9663,231.303 35.9663,226.969 35.5,222.5C 35.3402,220.645 36.0069,219.312 37.5,218.5C 37.2267,220.451 37.8934,221.951 39.5,223C 43.9236,223.18 48.2569,223.347 52.5,223.5C 50.627,226.184 49.627,229.184 49.5,232.5C 48.1667,232.5 46.8333,232.5 45.5,232.5C 45.238,233.978 45.5713,235.311 46.5,236.5C 48.0709,235.691 49.7376,235.357 51.5,235.5C 51.7352,239.803 54.0685,241.47 58.5,240.5C 58.4701,241.497 58.9701,242.164 60,242.5C 62.1956,241.91 64.3622,241.243 66.5,240.5C 67.3699,242.407 68.3699,244.24 69.5,246C 69.0496,247.285 68.3829,248.452 67.5,249.5C 68.8333,250.833 70.1667,250.833 71.5,249.5C 72.3279,248.585 73.3279,247.919 74.5,247.5C 75.4954,241.872 75.8288,236.206 75.5,230.5C 76.492,223.018 76.8254,215.352 76.5,207.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#423d54\",\n    d: \"M 75.5,230.5 C 75.8288,236.206 75.4954,241.872 74.5,247.5C 73.3279,247.919 72.3279,248.585 71.5,249.5C 70.1667,250.833 68.8333,250.833 67.5,249.5C 68.3829,248.452 69.0496,247.285 69.5,246C 68.3699,244.24 67.3699,242.407 66.5,240.5C 64.3622,241.243 62.1956,241.91 60,242.5C 58.9701,242.164 58.4701,241.497 58.5,240.5C 60.5914,240.682 62.5914,240.348 64.5,239.5C 68.2231,236.431 71.8898,233.431 75.5,230.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2d2b3e\",\n    d: \"M 75.5,230.5 C 71.8898,233.431 68.2231,236.431 64.5,239.5C 62.5914,240.348 60.5914,240.682 58.5,240.5C 54.0685,241.47 51.7352,239.803 51.5,235.5C 51.1179,232.646 51.1179,229.646 51.5,226.5C 56.9411,228.769 62.6078,230.436 68.5,231.5C 68.5,230.5 68.5,229.5 68.5,228.5C 69.8734,228.657 71.2068,228.49 72.5,228C 75.188,224.925 76.188,225.758 75.5,230.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0d0b18\",\n    d: \"M 560.5,230.5 C 561.376,230.369 562.043,230.702 562.5,231.5C 561.019,232.944 561.352,233.611 563.5,233.5C 563.5,238.5 563.5,243.5 563.5,248.5C 560.192,247.974 558.026,249.307 557,252.5C 556.667,252.167 556.333,251.833 556,251.5C 555.51,252.793 555.343,254.127 555.5,255.5C 551.683,254.695 549.016,252.362 547.5,248.5C 544.587,247.817 542.087,246.483 540,244.5C 538.238,246.936 536.904,249.602 536,252.5C 535.667,252.167 535.333,251.833 535,251.5C 534.077,252.759 533.243,254.092 532.5,255.5C 530.323,254.496 529.989,255.162 531.5,257.5C 530.711,259.488 529.545,259.821 528,258.5C 527.517,259.448 527.351,260.448 527.5,261.5C 529.5,261.5 531.5,261.5 533.5,261.5C 533.244,259.088 534.244,257.421 536.5,256.5C 539.246,258.49 541.746,260.824 544,263.5C 544.333,263.167 544.667,262.833 545,262.5C 546.734,263.249 548.567,263.749 550.5,264C 550.167,264.333 549.833,264.667 549.5,265C 553.03,265.672 554.363,267.838 553.5,271.5C 552.833,271.5 552.167,271.5 551.5,271.5C 551.5,270.5 551.5,269.5 551.5,268.5C 547.049,268.219 543.049,266.719 539.5,264C 535.887,263.933 533.554,265.766 532.5,269.5C 534.646,274.445 533.312,278.111 528.5,280.5C 527.978,276.965 526.978,273.632 525.5,270.5C 522.565,269.102 519.898,269.435 517.5,271.5C 514.266,270.424 510.932,269.757 507.5,269.5C 507.5,268.5 507.5,267.5 507.5,266.5C 512.451,268.444 513.784,266.777 511.5,261.5C 508.788,260.933 506.121,260.599 503.5,260.5C 504.381,259.029 505.714,258.196 507.5,258C 508.296,254.93 510.296,253.263 513.5,253C 516.129,249.801 515.796,246.801 512.5,244C 510.248,244.612 507.915,244.945 505.5,245C 509.285,237.621 514.118,236.787 520,242.5C 520.158,245.553 519.658,248.553 518.5,251.5C 514.719,253.954 514.552,256.621 518,259.5C 522.044,255.79 526.377,252.456 531,249.5C 531.093,246.993 531.926,244.826 533.5,243C 529.279,242.625 525.279,241.625 521.5,240C 523.337,236.898 525.337,236.731 527.5,239.5C 530.553,239.428 533.219,238.428 535.5,236.5C 537.326,235.562 539.159,234.562 541,233.5C 542.724,233.955 544.224,234.788 545.5,236C 543.543,238.121 543.043,240.621 544,243.5C 544.667,242.167 545.333,242.167 546,243.5C 546.513,242.473 547.013,241.473 547.5,240.5C 549.649,239.252 551.649,237.752 553.5,236C 557.412,236.024 559.745,234.19 560.5,230.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#c0b5b6\",\n    d: \"M 242.5,174.5 C 242.666,180.176 242.499,185.843 242,191.5C 240.248,199.828 239.415,208.161 239.5,216.5C 240.167,216.167 240.833,215.833 241.5,215.5C 242.167,217.5 242.833,219.5 243.5,221.5C 246.039,220.069 248.372,218.403 250.5,216.5C 250.833,216.5 251.167,216.5 251.5,216.5C 252.429,222.312 253.929,227.979 256,233.5C 254.953,226.934 254.453,220.267 254.5,213.5C 256.167,213.5 257.833,213.5 259.5,213.5C 259.723,215.342 260.057,217.175 260.5,219C 259.751,221.545 259.251,224.045 259,226.5C 264.108,230.299 269.275,233.966 274.5,237.5C 275.785,241.195 276.118,244.862 275.5,248.5C 274.442,249.6 273.608,250.934 273,252.5C 272.667,273.167 272.333,293.833 272,314.5C 267.985,311.484 264.652,307.817 262,303.5C 262.559,306.637 263.726,309.637 265.5,312.5C 264.761,312.369 264.094,312.536 263.5,313C 264.669,315.007 265.335,317.173 265.5,319.5C 262.833,319.5 260.167,319.5 257.5,319.5C 257.785,323.025 257.119,326.358 255.5,329.5C 255.667,330.167 255.833,330.833 256,331.5C 257.353,330.315 258.52,328.981 259.5,327.5C 259.499,329.886 258.499,332.22 256.5,334.5C 257.311,335.216 257.978,336.05 258.5,337C 256.834,342.174 253.501,346.007 248.5,348.5C 247.614,349.325 247.281,350.325 247.5,351.5C 243.833,351.5 240.167,351.5 236.5,351.5C 236.799,353.973 237.799,356.14 239.5,358C 238.978,358.95 238.311,359.784 237.5,360.5C 239.682,364.186 239.849,367.852 238,371.5C 235.408,367.807 233.408,363.807 232,359.5C 231.667,359.833 231.333,360.167 231,360.5C 230.667,358.833 230.333,357.167 230,355.5C 229.346,356.696 228.846,356.696 228.5,355.5C 229.326,354.549 229.492,353.549 229,352.5C 227.667,351.833 226.667,350.833 226,349.5C 225.517,350.448 225.351,351.448 225.5,352.5C 218.928,340.125 212.928,327.458 207.5,314.5C 205.876,309.626 204.876,304.626 204.5,299.5C 207.286,287.666 208.952,275.666 209.5,263.5C 210.537,262.07 211.204,260.403 211.5,258.5C 216.586,245.182 220.919,231.516 224.5,217.5C 224.263,214.937 223.763,214.937 223,217.5C 221.584,225.768 218.25,233.101 213,239.5C 212.601,239.272 212.435,238.938 212.5,238.5C 213.181,221.334 215.181,204.334 218.5,187.5C 225.468,183.836 232.135,179.836 238.5,175.5C 239.708,174.766 241.041,174.433 242.5,174.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#594b4b\",\n    d: \"M 436.5,95.5 C 437.5,95.5 438.5,95.5 439.5,95.5C 439.863,106.368 440.863,117.034 442.5,127.5C 442.5,130.167 442.5,132.833 442.5,135.5C 441.917,170.167 441.25,204.834 440.5,239.5C 441.364,292.832 441.53,346.165 441,399.5C 441.333,402.167 441.667,404.833 442,407.5C 447.016,409.925 452.349,411.592 458,412.5C 459.895,412.385 461.562,411.718 463,410.5C 463.399,410.728 463.565,411.062 463.5,411.5C 463.5,412.833 463.5,414.167 463.5,415.5C 456.833,415.5 450.167,415.5 443.5,415.5C 443.5,418.167 443.5,420.833 443.5,423.5C 441.833,423.5 440.167,423.5 438.5,423.5C 438,404.837 437.667,386.17 437.5,367.5C 438.128,292.376 438.795,217.376 439.5,142.5C 437.796,126.902 436.796,111.236 436.5,95.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c1a29\",\n    d: \"M 525.5,235.5 C 525.842,236.338 526.508,236.672 527.5,236.5C 527.5,237.5 527.5,238.5 527.5,239.5C 525.337,236.731 523.337,236.898 521.5,240C 525.279,241.625 529.279,242.625 533.5,243C 531.926,244.826 531.093,246.993 531,249.5C 526.377,252.456 522.044,255.79 518,259.5C 514.552,256.621 514.719,253.954 518.5,251.5C 519.658,248.553 520.158,245.553 520,242.5C 514.118,236.787 509.285,237.621 505.5,245C 507.915,244.945 510.248,244.612 512.5,244C 515.796,246.801 516.129,249.801 513.5,253C 510.296,253.263 508.296,254.93 507.5,258C 505.714,258.196 504.381,259.029 503.5,260.5C 506.121,260.599 508.788,260.933 511.5,261.5C 513.784,266.777 512.451,268.444 507.5,266.5C 507.5,267.5 507.5,268.5 507.5,269.5C 510.932,269.757 514.266,270.424 517.5,271.5C 516.69,274.646 514.69,276.313 511.5,276.5C 510.082,274.692 508.082,274.025 505.5,274.5C 505.5,273.167 505.5,271.833 505.5,270.5C 498.979,270.934 493.145,269.267 488,265.5C 487.417,263.998 486.584,262.665 485.5,261.5C 484.61,254.142 483.61,246.809 482.5,239.5C 484.2,239.374 485.7,238.707 487,237.5C 490.557,239.06 493.223,238.06 495,234.5C 495.711,236.367 495.211,237.867 493.5,239C 496.233,239.758 498.733,239.258 501,237.5C 502.12,239.075 503.62,240.075 505.5,240.5C 507.606,239.57 509.606,238.404 511.5,237C 514.035,236.383 516.368,236.883 518.5,238.5C 520.662,236.98 522.995,235.98 525.5,235.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6f647a\",\n    d: \"M 84.5,203.5 C 85.6005,204.605 86.2671,205.938 86.5,207.5C 86.5,222.5 86.5,237.5 86.5,252.5C 86.5,256.167 86.5,259.833 86.5,263.5C 86.5,274.167 86.5,284.833 86.5,295.5C 86.5,297.167 86.5,298.833 86.5,300.5C 89.5,300.5 92.5,300.5 95.5,300.5C 90.5791,301.516 85.7458,301.516 81,300.5C 80.1779,302.788 79.5112,305.122 79,307.5C 79.1446,317.22 78.3112,326.554 76.5,335.5C 76.9281,312.164 77.0947,288.831 77,265.5C 74.2478,260.695 74.2478,256.029 77,251.5C 77.8276,236.661 77.6609,221.994 76.5,207.5C 76.1667,207.5 75.8333,207.5 75.5,207.5C 75.5106,205.983 76.1772,204.816 77.5,204C 79.8098,203.503 82.1432,203.337 84.5,203.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#584746\",\n    d: \"M 161.5,247.5 C 161.717,252.23 161.383,256.897 160.5,261.5C 155.821,261.334 151.155,261.501 146.5,262C 145.584,262.374 144.75,262.874 144,263.5C 138.803,261.58 133.303,260.913 127.5,261.5C 122.833,261.5 118.167,261.5 113.5,261.5C 112.667,259.171 111,257.671 108.5,257C 109.5,256.667 110.5,256.333 111.5,256C 108.854,255.503 106.187,255.336 103.5,255.5C 103.389,254.883 103.056,254.383 102.5,254C 110.283,253.977 117.95,253.143 125.5,251.5C 127.307,251.972 129.14,252.306 131,252.5C 137.816,251.805 144.65,251.305 151.5,251C 155.068,250.312 158.401,249.145 161.5,247.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#443b49\",\n    d: \"M 86.5,252.5 C 89.4824,252.963 92.4824,253.296 95.5,253.5C 98.3085,253.693 100.975,254.36 103.5,255.5C 106.187,255.336 108.854,255.503 111.5,256C 110.5,256.333 109.5,256.667 108.5,257C 111,257.671 112.667,259.171 113.5,261.5C 111.5,261.5 109.5,261.5 107.5,261.5C 100.443,261.621 93.4432,262.288 86.5,263.5C 86.5,259.833 86.5,256.167 86.5,252.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#645660\",\n    d: \"M 479.5,264.5 C 479.082,265.222 478.416,265.722 477.5,266C 475.005,266.157 472.672,266.324 470.5,266.5C 470.013,267.446 469.68,268.446 469.5,269.5C 470.819,273.078 471.819,276.744 472.5,280.5C 470.922,281.298 469.256,281.798 467.5,282C 466.748,282.671 466.414,283.504 466.5,284.5C 463.289,284.986 460.289,285.986 457.5,287.5C 458.24,282.093 458.24,276.76 457.5,271.5C 460.932,271.757 464.266,272.424 467.5,273.5C 468.123,271 468.457,268.5 468.5,266C 466.201,263.465 466.201,260.798 468.5,258C 469.5,257.333 470.5,257.333 471.5,258C 473.771,260.782 476.437,262.949 479.5,264.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#544b5d\",\n    d: \"M 107.5,261.5 C 107.586,262.496 107.252,263.329 106.5,264C 105.167,264.333 103.833,264.667 102.5,265C 97.8399,270.221 95.0066,276.387 94,283.5C 93.6667,281.167 93.3333,278.833 93,276.5C 92.2743,283.869 92.4409,291.202 93.5,298.5C 91.8333,298.5 90.1667,298.5 88.5,298.5C 88.7148,296.821 88.0481,295.821 86.5,295.5C 86.5,284.833 86.5,274.167 86.5,263.5C 93.4432,262.288 100.443,261.621 107.5,261.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#71606a\",\n    d: \"M 124.5,263.5 C 129.026,267.501 134.026,271.001 139.5,274C 136.764,275.362 134.431,277.196 132.5,279.5C 133.648,281.149 134.981,282.649 136.5,284C 139.361,283.97 141.695,284.803 143.5,286.5C 143.631,287.239 143.464,287.906 143,288.5C 140.281,287.556 137.448,287.223 134.5,287.5C 135.651,293.685 133.317,296.018 127.5,294.5C 128.219,292.236 128.552,289.903 128.5,287.5C 129.552,287.649 130.552,287.483 131.5,287C 130.692,285.294 129.359,284.461 127.5,284.5C 127.5,283.5 127.5,282.5 127.5,281.5C 121.936,283.11 116.603,285.11 111.5,287.5C 110.664,282.038 108.497,281.038 105,284.5C 102.846,281.589 100.68,281.256 98.5,283.5C 97.826,273.672 102.159,267.172 111.5,264C 115.821,263.501 120.154,263.334 124.5,263.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#373448\",\n    d: \"M 75.5,295.5 C 75.5,286.833 75.5,278.167 75.5,269.5C 73.4305,269.551 71.5971,268.885 70,267.5C 66.2694,269.879 62.4361,271.212 58.5,271.5C 55.9147,270.927 54.9147,269.261 55.5,266.5C 53.0607,267.053 50.7273,267.053 48.5,266.5C 45.9514,265.25 44.618,263.25 44.5,260.5C 42.7839,260.629 41.1172,260.962 39.5,261.5C 40.4006,259.273 42.0672,258.273 44.5,258.5C 45.2721,254.548 45.6054,250.548 45.5,246.5C 47.1172,245.962 48.7839,245.629 50.5,245.5C 49.8333,249.5 51.5,251.167 55.5,250.5C 56.0138,252.512 56.1805,254.512 56,256.5C 53.5669,258.626 50.7335,259.959 47.5,260.5C 47.8333,261.167 48.1667,261.833 48.5,262.5C 53.6395,262.933 58.4729,264.266 63,266.5C 67.6184,264.848 71.9518,265.181 76,267.5C 76.8243,277.009 76.6576,286.343 75.5,295.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#464258\",\n    d: \"M 359.5,299.5 C 359.167,299.5 358.833,299.5 358.5,299.5C 358.338,293.445 358.838,287.445 360,281.5C 360.219,282.938 360.719,284.271 361.5,285.5C 366.871,273.224 371.371,260.558 375,247.5C 375.667,249.167 375.667,250.833 375,252.5C 372.488,260.881 369.821,269.214 367,277.5C 365.39,281.061 363.557,284.394 361.5,287.5C 360.368,291.426 359.701,295.426 359.5,299.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#544a54\",\n    d: \"M 499.5,175.5 C 500.236,177.229 501.57,178.229 503.5,178.5C 504.229,181.201 504.563,183.867 504.5,186.5C 506.673,189.016 509.34,190.683 512.5,191.5C 512.66,193.199 512.494,194.866 512,196.5C 505.193,198.807 501.027,203.474 499.5,210.5C 495.47,212.088 492.803,215.088 491.5,219.5C 491.709,220.086 492.043,220.586 492.5,221C 491.427,224.12 490.427,227.287 489.5,230.5C 486.979,231.688 484.645,233.022 482.5,234.5C 481.5,234.5 480.5,234.5 479.5,234.5C 479.52,236.143 478.853,237.476 477.5,238.5C 478.838,240.275 480.171,241.941 481.5,243.5C 482.83,250.425 483.83,257.425 484.5,264.5C 487.559,269.39 491.892,272.557 497.5,274C 498.944,275.126 499.61,276.626 499.5,278.5C 497.443,283.733 497.11,289.067 498.5,294.5C 497.372,295.262 496.205,295.929 495,296.5C 492.581,294.415 489.747,293.415 486.5,293.5C 486.405,291.214 485.738,289.214 484.5,287.5C 483.5,287.5 482.5,287.5 481.5,287.5C 481.688,285.897 481.188,284.563 480,283.5C 479.878,285.437 479.045,286.77 477.5,287.5C 475.167,287.5 472.833,287.5 470.5,287.5C 469.209,286.465 467.876,285.465 466.5,284.5C 466.414,283.504 466.748,282.671 467.5,282C 469.256,281.798 470.922,281.298 472.5,280.5C 471.819,276.744 470.819,273.078 469.5,269.5C 469.68,268.446 470.013,267.446 470.5,266.5C 472.672,266.324 475.005,266.157 477.5,266C 478.416,265.722 479.082,265.222 479.5,264.5C 482.95,256.077 481.783,248.41 476,241.5C 475.908,235.502 476.241,229.502 477,223.5C 477.374,221.509 478.207,219.842 479.5,218.5C 479.077,220.781 479.744,222.448 481.5,223.5C 482.167,223.5 482.833,223.5 483.5,223.5C 488.5,224.5 490.5,222.5 489.5,217.5C 491.535,214.424 493.202,211.09 494.5,207.5C 495.5,207.5 496.5,207.5 497.5,207.5C 498.442,203.562 500.775,200.895 504.5,199.5C 504.5,198.167 504.5,196.833 504.5,195.5C 505.978,195.762 507.311,195.429 508.5,194.5C 507.675,193.614 506.675,193.281 505.5,193.5C 502.659,187.848 500.659,181.848 499.5,175.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#07060e\",\n    d: \"M 563.5,248.5 C 563.5,263.5 563.5,278.5 563.5,293.5C 558.814,294.016 556.481,292.016 556.5,287.5C 557.5,287.5 558.5,287.5 559.5,287.5C 559.5,286.5 559.5,285.5 559.5,284.5C 560.556,279.872 558.556,277.538 553.5,277.5C 553.5,275.5 553.5,273.5 553.5,271.5C 554.363,267.838 553.03,265.672 549.5,265C 549.833,264.667 550.167,264.333 550.5,264C 548.567,263.749 546.734,263.249 545,262.5C 544.667,262.833 544.333,263.167 544,263.5C 541.746,260.824 539.246,258.49 536.5,256.5C 534.244,257.421 533.244,259.088 533.5,261.5C 531.5,261.5 529.5,261.5 527.5,261.5C 527.351,260.448 527.517,259.448 528,258.5C 529.545,259.821 530.711,259.488 531.5,257.5C 529.989,255.162 530.323,254.496 532.5,255.5C 533.243,254.092 534.077,252.759 535,251.5C 535.333,251.833 535.667,252.167 536,252.5C 536.904,249.602 538.238,246.936 540,244.5C 542.087,246.483 544.587,247.817 547.5,248.5C 549.016,252.362 551.683,254.695 555.5,255.5C 555.343,254.127 555.51,252.793 556,251.5C 556.333,251.833 556.667,252.167 557,252.5C 558.026,249.307 560.192,247.974 563.5,248.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#755b61\",\n    d: \"M 127.5,261.5 C 133.303,260.913 138.803,261.58 144,263.5C 144.75,262.874 145.584,262.374 146.5,262C 151.155,261.501 155.821,261.334 160.5,261.5C 155.8,274.768 151.8,288.268 148.5,302C 149.65,303.981 150.984,305.814 152.5,307.5C 150.956,307.297 149.622,306.63 148.5,305.5C 147.534,307.396 147.201,309.396 147.5,311.5C 146.732,312.263 146.232,313.263 146,314.5C 145.721,310.83 145.888,307.163 146.5,303.5C 147.329,297.496 148.663,291.662 150.5,286C 150,284.5 149.5,283 149,281.5C 147.296,283.373 145.463,285.04 143.5,286.5C 141.695,284.803 139.361,283.97 136.5,284C 134.981,282.649 133.648,281.149 132.5,279.5C 134.431,277.196 136.764,275.362 139.5,274C 134.026,271.001 129.026,267.501 124.5,263.5C 125.5,262.833 126.5,262.167 127.5,261.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6a5859\",\n    d: \"M 319.5,264.5 C 319.5,264.167 319.5,263.833 319.5,263.5C 323.5,263.5 327.5,263.5 331.5,263.5C 331.5,263.833 331.5,264.167 331.5,264.5C 329.143,264.337 326.81,264.503 324.5,265C 325.451,265.718 325.617,266.551 325,267.5C 324,266.167 323,266.167 322,267.5C 321.667,268.833 321.333,270.167 321,271.5C 320.313,269.432 320.48,267.432 321.5,265.5C 321.043,264.702 320.376,264.369 319.5,264.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5c5770\",\n    d: \"M 393.5,239.5 C 393.5,240.833 393.5,242.167 393.5,243.5C 393.663,245.857 393.497,248.19 393,250.5C 392.301,245.719 391.801,245.553 391.5,250C 393.598,258.436 393.931,266.936 392.5,275.5C 392.833,276.833 393.167,278.167 393.5,279.5C 394.327,277.838 395.493,276.505 397,275.5C 397.497,279.524 397.331,283.524 396.5,287.5C 397.5,287.5 398.5,287.5 399.5,287.5C 399.17,294.2 399.503,300.866 400.5,307.5C 401.72,307.887 402.387,308.72 402.5,310C 401.305,311.533 401.305,313.033 402.5,314.5C 401.619,315.971 400.286,316.804 398.5,317C 399.833,317.333 401.167,317.667 402.5,318C 391.116,321.568 380.116,325.901 369.5,331C 367.833,331.667 366.167,331.667 364.5,331C 362.257,329.864 359.924,329.03 357.5,328.5C 356.903,328.265 356.57,327.765 356.5,327C 357.414,325.594 358.08,324.094 358.5,322.5C 358.725,319.454 360.058,317.121 362.5,315.5C 364.093,314.652 365.26,313.319 366,311.5C 370.884,301.733 375.217,291.733 379,281.5C 379.765,279.934 379.598,278.601 378.5,277.5C 378.047,276.542 377.381,275.708 376.5,275C 377.715,272.904 378.549,273.071 379,275.5C 379.895,273.196 380.729,270.862 381.5,268.5C 382.386,269.325 382.719,270.325 382.5,271.5C 384.167,271.5 385.833,271.5 387.5,271.5C 385.846,257.204 384.346,242.87 383,228.5C 381.871,233.411 380.204,238.078 378,242.5C 378.907,237.028 380.073,231.528 381.5,226C 381.167,225.167 380.833,224.333 380.5,223.5C 379.682,226.107 379.182,228.774 379,231.5C 378.465,233.271 377.631,233.604 376.5,232.5C 377.592,230.817 378.259,228.984 378.5,227C 376.28,221.957 377.78,218.79 383,217.5C 385.521,219.699 387.355,222.366 388.5,225.5C 387.615,230.122 387.282,234.789 387.5,239.5C 389.5,239.5 391.5,239.5 393.5,239.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#615564\",\n    d: \"M 107.5,261.5 C 109.5,261.5 111.5,261.5 113.5,261.5C 118.167,261.5 122.833,261.5 127.5,261.5C 126.5,262.167 125.5,262.833 124.5,263.5C 120.154,263.334 115.821,263.501 111.5,264C 102.159,267.172 97.826,273.672 98.5,283.5C 98.6659,288.511 98.4993,293.511 98,298.5C 97.0053,299.066 96.172,299.733 95.5,300.5C 92.5,300.5 89.5,300.5 86.5,300.5C 86.5,298.833 86.5,297.167 86.5,295.5C 88.0481,295.821 88.7148,296.821 88.5,298.5C 90.1667,298.5 91.8333,298.5 93.5,298.5C 92.4409,291.202 92.2743,283.869 93,276.5C 93.3333,278.833 93.6667,281.167 94,283.5C 95.0066,276.387 97.8399,270.221 102.5,265C 103.833,264.667 105.167,264.333 106.5,264C 107.252,263.329 107.586,262.496 107.5,261.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#382528\",\n    d: \"M 199.5,272.5 C 199.66,274.199 199.494,275.866 199,277.5C 197.989,276.663 196.822,276.33 195.5,276.5C 195.5,281.167 195.5,285.833 195.5,290.5C 195.167,290.5 194.833,290.5 194.5,290.5C 193.954,281.348 194.788,272.348 197,263.5C 198.549,266.312 199.382,269.312 199.5,272.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2e2a38\",\n    d: \"M 525.5,235.5 C 522.995,235.98 520.662,236.98 518.5,238.5C 516.368,236.883 514.035,236.383 511.5,237C 509.606,238.404 507.606,239.57 505.5,240.5C 503.62,240.075 502.12,239.075 501,237.5C 498.733,239.258 496.233,239.758 493.5,239C 495.211,237.867 495.711,236.367 495,234.5C 493.223,238.06 490.557,239.06 487,237.5C 485.7,238.707 484.2,239.374 482.5,239.5C 483.61,246.809 484.61,254.142 485.5,261.5C 486.584,262.665 487.417,263.998 488,265.5C 493.145,269.267 498.979,270.934 505.5,270.5C 505.5,271.833 505.5,273.167 505.5,274.5C 508.082,274.025 510.082,274.692 511.5,276.5C 510.5,276.5 509.5,276.5 508.5,276.5C 509.234,281.302 511.068,285.635 514,289.5C 514.499,294.489 514.666,299.489 514.5,304.5C 513.504,304.586 512.671,304.252 512,303.5C 512.242,295.538 510.742,288.038 507.5,281C 503.829,280.832 501.829,282.665 501.5,286.5C 502.061,288.725 503.061,290.725 504.5,292.5C 504.062,293.506 503.396,293.506 502.5,292.5C 501.232,294.304 500.565,296.304 500.5,298.5C 498.167,298.5 495.833,298.5 493.5,298.5C 493.5,299.5 493.5,300.5 493.5,301.5C 490.587,300.442 487.754,299.109 485,297.5C 483.818,299.509 483.318,301.509 483.5,303.5C 482.833,303.5 482.167,303.5 481.5,303.5C 479.778,299.384 479.278,295.05 480,290.5C 481.878,289.947 483.378,288.947 484.5,287.5C 485.738,289.214 486.405,291.214 486.5,293.5C 489.747,293.415 492.581,294.415 495,296.5C 496.205,295.929 497.372,295.262 498.5,294.5C 497.11,289.067 497.443,283.733 499.5,278.5C 499.61,276.626 498.944,275.126 497.5,274C 491.892,272.557 487.559,269.39 484.5,264.5C 483.83,257.425 482.83,250.425 481.5,243.5C 481.104,240.956 481.771,238.789 483.5,237C 487.271,235.055 491.271,233.722 495.5,233C 496.928,231.084 497.928,228.917 498.5,226.5C 501.84,228.863 502.506,231.863 500.5,235.5C 502.884,235.443 505.218,235.777 507.5,236.5C 512.818,233.725 518.485,232.892 524.5,234C 525.056,234.383 525.389,234.883 525.5,235.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8d8083\",\n    d: \"M 319.5,263.5 C 319.5,263.833 319.5,264.167 319.5,264.5C 314.833,264.5 310.167,264.5 305.5,264.5C 305.012,267.711 305.679,270.544 307.5,273C 305.713,280.901 304.88,289.068 305,297.5C 304.5,286.172 304.333,274.838 304.5,263.5C 309.5,263.5 314.5,263.5 319.5,263.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bfb3b4\",\n    d: \"M 183.5,208.5 C 186.963,225.516 190.963,242.35 195.5,259C 194.923,263.218 194.09,267.384 193,271.5C 192.23,272.598 191.397,272.598 190.5,271.5C 190.833,272.833 191.167,274.167 191.5,275.5C 191.5,280.833 191.5,286.167 191.5,291.5C 189.053,291.385 187.053,290.385 185.5,288.5C 180.894,283.721 176.394,278.721 172,273.5C 171.833,274.167 171.667,274.833 171.5,275.5C 176.921,288.005 182.588,300.338 188.5,312.5C 189.383,317.103 189.717,321.77 189.5,326.5C 186.126,326.326 182.793,325.826 179.5,325C 175.359,323.25 171.359,321.584 167.5,320C 174.186,325.395 181.853,327.895 190.5,327.5C 190.964,331.502 190.298,335.169 188.5,338.5C 184.395,338.766 180.395,338.266 176.5,337C 169.675,332.335 163.009,327.502 156.5,322.5C 154.235,320.358 151.568,318.691 148.5,317.5C 147.534,315.604 147.201,313.604 147.5,311.5C 147.201,309.396 147.534,307.396 148.5,305.5C 149.622,306.63 150.956,307.297 152.5,307.5C 150.984,305.814 149.65,303.981 148.5,302C 151.8,288.268 155.8,274.768 160.5,261.5C 161.383,256.897 161.717,252.23 161.5,247.5C 161.5,245.833 161.5,244.167 161.5,242.5C 162.167,241.833 162.833,241.167 163.5,240.5C 163.338,242.527 163.505,244.527 164,246.5C 165.006,237.782 166.34,229.115 168,220.5C 169.027,216.574 170.527,212.907 172.5,209.5C 173.167,209.167 173.833,208.833 174.5,208.5C 177.285,206.905 180.285,205.905 183.5,205.5C 183.5,206.5 183.5,207.5 183.5,208.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8a7c7b\",\n    d: \"M 162.5,257.5 C 163.139,258.097 163.472,258.93 163.5,260C 162.982,268.553 162.148,277.053 161,285.5C 160.505,276.115 161.005,266.782 162.5,257.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8e8283\",\n    d: \"M 182.5,255.5 C 185.674,260.516 188.341,265.849 190.5,271.5C 186.769,266.705 184.102,261.372 182.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#998d90\",\n    d: \"M 182.5,255.5 C 179.746,249.43 177.246,243.097 175,236.5C 174.333,234.833 174.333,233.167 175,231.5C 177.816,239.444 180.316,247.444 182.5,255.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#574443\",\n    d: \"M 209.5,263.5 C 208.952,275.666 207.286,287.666 204.5,299.5C 203.833,302.167 203.167,304.833 202.5,307.5C 203.054,296.399 204.387,285.399 206.5,274.5C 206.333,272.167 206.167,269.833 206,267.5C 205.617,268.056 205.117,268.389 204.5,268.5C 204.414,267.504 204.748,266.671 205.5,266C 207.133,265.52 208.466,264.687 209.5,263.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8e7f83\",\n    d: \"M 342.5,296.5 C 342.167,296.5 341.833,296.5 341.5,296.5C 342.629,288.344 342.629,280.344 341.5,272.5C 330.659,275.802 319.659,276.302 308.5,274C 317.525,274.999 326.525,274.666 335.5,273C 340.96,272.158 342.96,268.992 341.5,263.5C 338.14,263.616 334.807,263.949 331.5,264.5C 331.5,264.167 331.5,263.833 331.5,263.5C 335.316,262.518 339.316,261.851 343.5,261.5C 343.721,273.193 343.388,284.86 342.5,296.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#282535\",\n    d: \"M 551.5,271.5 C 548.887,270.565 546.221,270.398 543.5,271C 541.845,272.444 541.178,274.278 541.5,276.5C 536.771,276.067 533.104,277.734 530.5,281.5C 526.719,280.789 523.719,281.955 521.5,285C 520.207,285.49 518.873,285.657 517.5,285.5C 517.297,283.61 517.963,282.11 519.5,281C 516.581,279.713 513.914,278.213 511.5,276.5C 514.69,276.313 516.69,274.646 517.5,271.5C 519.898,269.435 522.565,269.102 525.5,270.5C 526.978,273.632 527.978,276.965 528.5,280.5C 533.312,278.111 534.646,274.445 532.5,269.5C 533.554,265.766 535.887,263.933 539.5,264C 543.049,266.719 547.049,268.219 551.5,268.5C 551.5,269.5 551.5,270.5 551.5,271.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2e2c3f\",\n    d: \"M 61.5,283.5 C 62.1667,283.5 62.8333,283.5 63.5,283.5C 62.8592,284.482 62.1925,285.482 61.5,286.5C 58.1667,288.833 54.8333,291.167 51.5,293.5C 50.7542,294.736 50.4208,296.07 50.5,297.5C 48.4176,297.472 46.5843,298.139 45,299.5C 44.8525,302.589 44.0192,305.422 42.5,308C 43.3441,310.007 44.6774,311.507 46.5,312.5C 40.8643,312.188 38.531,309.188 39.5,303.5C 40.5,303.5 41.5,303.5 42.5,303.5C 43.6605,298.825 41.9939,296.159 37.5,295.5C 37.1667,294.167 36.8333,292.833 36.5,291.5C 37.667,292.815 39.167,293.481 41,293.5C 44.0121,292.131 47.1788,291.464 50.5,291.5C 50.5,288.5 50.5,285.5 50.5,282.5C 47.5,282.5 44.5,282.5 41.5,282.5C 41.1667,279.5 42.5,278.167 45.5,278.5C 45.5,279.5 45.5,280.5 45.5,281.5C 46.5,281.5 47.5,281.5 48.5,281.5C 48.5,279.167 48.5,276.833 48.5,274.5C 53.3234,274.327 55.3234,276.661 54.5,281.5C 53.325,281.281 52.325,281.614 51.5,282.5C 53.5101,283.349 55.1767,282.682 56.5,280.5C 57.4287,281.689 57.762,283.022 57.5,284.5C 59.099,284.768 60.4324,284.434 61.5,283.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#211218\",\n    d: \"M 202.5,307.5 C 201.735,310.096 201.401,312.763 201.5,315.5C 200.833,316.833 200.167,318.167 199.5,319.5C 199.253,316.843 198.253,314.51 196.5,312.5C 197.077,310.894 197.41,309.228 197.5,307.5C 196.505,301.865 195.838,296.198 195.5,290.5C 195.5,285.833 195.5,281.167 195.5,276.5C 196.822,276.33 197.989,276.663 199,277.5C 199.494,275.866 199.66,274.199 199.5,272.5C 201.981,272.226 203.647,270.893 204.5,268.5C 205.117,268.389 205.617,268.056 206,267.5C 206.167,269.833 206.333,272.167 206.5,274.5C 204.387,285.399 203.054,296.399 202.5,307.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#534d5f\",\n    d: \"M 551.5,271.5 C 551.666,275.514 551.499,279.514 551,283.5C 546.616,285.178 543.616,288.178 542,292.5C 541.421,296.203 541.588,299.869 542.5,303.5C 540.633,303.045 538.8,302.378 537,301.5C 535.566,301.862 534.399,302.528 533.5,303.5C 532.5,303.5 531.5,303.5 530.5,303.5C 529.913,298.087 529.913,292.753 530.5,287.5C 528.833,287.5 527.167,287.5 525.5,287.5C 525.351,286.448 525.517,285.448 526,284.5C 528.026,284.085 529.526,283.085 530.5,281.5C 533.104,277.734 536.771,276.067 541.5,276.5C 541.178,274.278 541.845,272.444 543.5,271C 546.221,270.398 548.887,270.565 551.5,271.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#38384d\",\n    d: \"M 39.5,261.5 C 38.4092,264.349 38.4092,267.182 39.5,270C 37.4227,273.701 37.0893,277.534 38.5,281.5C 39.325,282.386 40.325,282.719 41.5,282.5C 44.5,282.5 47.5,282.5 50.5,282.5C 50.5,285.5 50.5,288.5 50.5,291.5C 47.1788,291.464 44.0121,292.131 41,293.5C 39.167,293.481 37.667,292.815 36.5,291.5C 36.5,290.167 36.5,288.833 36.5,287.5C 31.9414,287.276 27.6081,287.942 23.5,289.5C 24.1667,288.833 24.8333,288.167 25.5,287.5C 25.5,286.833 25.8333,286.5 26.5,286.5C 28.677,286.414 30.677,285.747 32.5,284.5C 33.8836,276.896 34.5503,269.23 34.5,261.5C 36.1667,261.5 37.8333,261.5 39.5,261.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d4040\",\n    d: \"M 484.5,287.5 C 483.378,288.947 481.878,289.947 480,290.5C 479.278,295.05 479.778,299.384 481.5,303.5C 483.167,313.483 483.5,323.483 482.5,333.5C 479.316,335.414 475.649,336.08 471.5,335.5C 473.948,334.527 476.615,334.194 479.5,334.5C 479.772,322.462 479.438,310.462 478.5,298.5C 475.15,298.665 471.817,298.498 468.5,298C 468.043,297.586 467.709,297.086 467.5,296.5C 468.782,294.821 469.782,292.987 470.5,291C 473.281,290.478 475.615,289.311 477.5,287.5C 479.045,286.77 479.878,285.437 480,283.5C 481.188,284.563 481.688,285.897 481.5,287.5C 482.5,287.5 483.5,287.5 484.5,287.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#766570\",\n    d: \"M 185.5,288.5 C 185.586,289.496 185.252,290.329 184.5,291C 187.167,291.667 187.167,292.333 184.5,293C 185.256,296.273 186.59,299.273 188.5,302C 187.833,302.333 187.167,302.667 186.5,303C 188,304.5 189.5,306 191,307.5C 191.5,317.494 191.666,327.494 191.5,337.5C 190.791,338.404 189.791,338.737 188.5,338.5C 190.298,335.169 190.964,331.502 190.5,327.5C 190.666,322.821 190.499,318.155 190,313.5C 189.617,312.944 189.117,312.611 188.5,312.5C 182.588,300.338 176.921,288.005 171.5,275.5C 171.667,274.833 171.833,274.167 172,273.5C 176.394,278.721 180.894,283.721 185.5,288.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#120b18\",\n    d: \"M 423.5,367.5 C 420.833,367.5 418.167,367.5 415.5,367.5C 415.167,356.833 414.833,356.833 414.5,367.5C 411.833,367.5 409.167,367.5 406.5,367.5C 405.546,364.582 404.879,361.582 404.5,358.5C 404.471,349.932 404.805,341.432 405.5,333C 404.099,332.59 402.766,332.09 401.5,331.5C 401.5,330.833 401.5,330.167 401.5,329.5C 402.641,328.661 403.974,327.994 405.5,327.5C 404.565,305.956 401.565,284.623 396.5,263.5C 397.091,262.849 397.757,262.182 398.5,261.5C 398.2,256.784 397.534,251.951 396.5,247C 397.166,241.183 397.666,235.349 398,229.5C 398.333,231.167 398.667,232.833 399,234.5C 400.935,231.093 401.768,227.426 401.5,223.5C 403.484,223.617 405.15,222.95 406.5,221.5C 408.523,223.173 410.856,223.84 413.5,223.5C 414,231.495 414.5,239.495 415,247.5C 418,246.167 421,244.833 424,243.5C 424.333,243.833 424.667,244.167 425,244.5C 425.667,250.833 425.667,257.167 425,263.5C 424.667,260.833 424.333,258.167 424,255.5C 423.667,260.833 423.333,266.167 423,271.5C 422.503,268.854 422.336,266.187 422.5,263.5C 421.167,263.5 419.833,263.5 418.5,263.5C 419.167,268.833 419.833,274.167 420.5,279.5C 422.592,279.439 424.092,278.439 425,276.5C 425.395,278.179 425.228,279.845 424.5,281.5C 426.109,294.108 426.775,306.775 426.5,319.5C 425.5,319.5 424.5,319.5 423.5,319.5C 423.12,322.792 424.453,325.125 427.5,326.5C 426.383,327.949 425.716,329.616 425.5,331.5C 426.555,340.816 426.721,350.15 426,359.5C 426.053,362.675 425.22,365.342 423.5,367.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#856a79\",\n    d: \"M 146.5,303.5 C 139.167,303.5 131.833,303.5 124.5,303.5C 115.736,303.771 107.403,303.105 99.5,301.5C 99.9175,300.778 100.584,300.278 101.5,300C 109.669,300.504 117.669,299.171 125.5,296C 125.167,295.667 124.833,295.333 124.5,295C 125.448,294.517 126.448,294.351 127.5,294.5C 133.317,296.018 135.651,293.685 134.5,287.5C 137.448,287.223 140.281,287.556 143,288.5C 143.464,287.906 143.631,287.239 143.5,286.5C 145.463,285.04 147.296,283.373 149,281.5C 149.5,283 150,284.5 150.5,286C 148.663,291.662 147.329,297.496 146.5,303.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#352b33\",\n    d: \"M 434.5,50.5 C 434.333,175.5 434.5,300.5 435,425.5C 436.091,427.718 437.257,429.884 438.5,432C 437.789,433.255 436.956,434.421 436,435.5C 435.333,441.167 435.333,446.833 436,452.5C 436.833,453.333 437.667,454.167 438.5,455C 444.348,455.173 450.015,455.673 455.5,456.5C 449.491,456.666 443.491,456.499 437.5,456C 436.069,455.535 434.903,454.701 434,453.5C 433.273,446.144 433.44,438.811 434.5,431.5C 433.686,428.703 433.019,425.87 432.5,423C 432.185,308.513 432.519,194.013 433.5,79.5C 433.173,69.6522 433.506,59.9856 434.5,50.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2e2937\",\n    d: \"M 36.5,291.5 C 34.9902,290.272 33.4902,290.272 32,291.5C 31.5756,287.81 30.7423,287.643 29.5,291C 23.8705,290.477 21.5372,292.977 22.5,298.5C 25.3903,298.278 28.057,298.945 30.5,300.5C 31.4948,305.792 31.8282,311.125 31.5,316.5C 30.8333,320.167 30.1667,323.833 29.5,327.5C 29.825,319.981 29.4916,312.648 28.5,305.5C 28.4894,303.983 27.8228,302.816 26.5,302C 17.1318,299.649 16.1318,295.482 23.5,289.5C 27.6081,287.942 31.9414,287.276 36.5,287.5C 36.5,288.833 36.5,290.167 36.5,291.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#212031\",\n    d: \"M 75.5,295.5 C 74.5955,316.817 74.2622,338.151 74.5,359.5C 73.7767,361.213 72.4433,362.213 70.5,362.5C 68.0909,362.085 65.7576,361.418 63.5,360.5C 62.3881,359.735 61.7214,358.735 61.5,357.5C 65.3008,358.715 68.9674,358.715 72.5,357.5C 73.4954,345.011 73.8287,332.344 73.5,319.5C 72.5,319.5 71.5,319.5 70.5,319.5C 70.2003,311.886 68.5336,311.552 65.5,318.5C 62.3272,321.155 58.8272,323.155 55,324.5C 50.977,323.096 46.977,321.429 43,319.5C 41.7387,319.759 40.7387,320.426 40,321.5C 37.9253,312.991 37.0919,304.325 37.5,295.5C 41.9939,296.159 43.6605,298.825 42.5,303.5C 41.5,303.5 40.5,303.5 39.5,303.5C 38.531,309.188 40.8643,312.188 46.5,312.5C 48.2007,318.017 51.8674,319.851 57.5,318C 60.6476,313.21 62.8143,308.043 64,302.5C 65.353,301.315 66.5197,299.981 67.5,298.5C 64.5509,295.02 65.2175,292.686 69.5,291.5C 69.8802,286.89 67.8802,284.224 63.5,283.5C 63.484,281.516 64.484,280.516 66.5,280.5C 68.9017,282.049 71.5683,282.716 74.5,282.5C 73.2801,279.309 72.4468,275.975 72,272.5C 70.9887,271.663 69.8221,271.33 68.5,271.5C 68.5,272.5 68.5,273.5 68.5,274.5C 65.1667,274.5 61.8333,274.5 58.5,274.5C 58.1494,278.159 59.1494,281.159 61.5,283.5C 60.4324,284.434 59.099,284.768 57.5,284.5C 57.762,283.022 57.4287,281.689 56.5,280.5C 55.1767,282.682 53.5101,283.349 51.5,282.5C 52.325,281.614 53.325,281.281 54.5,281.5C 55.3234,276.661 53.3234,274.327 48.5,274.5C 48.5,276.833 48.5,279.167 48.5,281.5C 47.5,281.5 46.5,281.5 45.5,281.5C 45.5,280.5 45.5,279.5 45.5,278.5C 42.5,278.167 41.1667,279.5 41.5,282.5C 40.325,282.719 39.325,282.386 38.5,281.5C 37.0893,277.534 37.4227,273.701 39.5,270C 38.4092,267.182 38.4092,264.349 39.5,261.5C 41.1172,260.962 42.7839,260.629 44.5,260.5C 44.618,263.25 45.9514,265.25 48.5,266.5C 50.7273,267.053 53.0607,267.053 55.5,266.5C 54.9147,269.261 55.9147,270.927 58.5,271.5C 62.4361,271.212 66.2694,269.879 70,267.5C 71.5971,268.885 73.4305,269.551 75.5,269.5C 75.5,278.167 75.5,286.833 75.5,295.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161524\",\n    d: \"M 63.5,283.5 C 62.8333,283.5 62.1667,283.5 61.5,283.5C 59.1494,281.159 58.1494,278.159 58.5,274.5C 61.8333,274.5 65.1667,274.5 68.5,274.5C 68.5,273.5 68.5,272.5 68.5,271.5C 69.8221,271.33 70.9887,271.663 72,272.5C 72.4468,275.975 73.2801,279.309 74.5,282.5C 71.5683,282.716 68.9017,282.049 66.5,280.5C 64.484,280.516 63.484,281.516 63.5,283.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#232032\",\n    d: \"M 514.5,304.5 C 515.048,307.084 516.715,308.084 519.5,307.5C 520.639,310.004 521.306,312.67 521.5,315.5C 520.127,315.657 518.793,315.49 517.5,315C 516.161,312.984 514.328,311.817 512,311.5C 509.729,312.271 507.562,313.271 505.5,314.5C 504.558,314.392 503.725,314.059 503,313.5C 500.37,314.962 497.87,316.629 495.5,318.5C 493.579,319.641 491.579,319.808 489.5,319C 488.271,317.471 486.771,316.304 485,315.5C 484.814,312.964 484.314,310.631 483.5,308.5C 483.5,306.833 483.5,305.167 483.5,303.5C 483.318,301.509 483.818,299.509 485,297.5C 487.754,299.109 490.587,300.442 493.5,301.5C 493.5,300.5 493.5,299.5 493.5,298.5C 495.833,298.5 498.167,298.5 500.5,298.5C 500.565,296.304 501.232,294.304 502.5,292.5C 503.396,293.506 504.062,293.506 504.5,292.5C 503.061,290.725 502.061,288.725 501.5,286.5C 501.829,282.665 503.829,280.832 507.5,281C 510.742,288.038 512.242,295.538 512,303.5C 512.671,304.252 513.504,304.586 514.5,304.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8a7a85\",\n    d: \"M 99.5,301.5 C 107.403,303.105 115.736,303.771 124.5,303.5C 123.048,304.302 121.382,304.802 119.5,305C 121.686,305.604 121.852,306.77 120,308.5C 118.625,310.977 116.791,311.811 114.5,311C 116.017,313.761 115.184,315.594 112,316.5C 108.655,314.014 105.155,313.847 101.5,316C 103.314,318.481 103.98,321.315 103.5,324.5C 106.005,324.98 108.338,325.98 110.5,327.5C 111.5,326.167 112.5,324.833 113.5,323.5C 114.165,326.838 115.832,329.505 118.5,331.5C 121.449,330.553 123.449,331.72 124.5,335C 134.494,335.5 144.494,335.666 154.5,335.5C 154.5,336.167 154.5,336.833 154.5,337.5C 132.143,336.762 109.81,336.762 87.5,337.5C 87.748,331.555 87.748,325.722 87.5,320C 88.1285,317.182 89.1285,314.515 90.5,312C 89.0758,309.598 88.4091,307.265 88.5,305C 92.2212,303.97 95.8879,302.803 99.5,301.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1b1929\",\n    d: \"M 559.5,284.5 C 559.5,285.5 559.5,286.5 559.5,287.5C 558.5,287.5 557.5,287.5 556.5,287.5C 556.481,292.016 558.814,294.016 563.5,293.5C 563.5,296.167 563.5,298.833 563.5,301.5C 561.473,301.662 559.473,301.495 557.5,301C 556.663,299.989 556.33,298.822 556.5,297.5C 552.952,296.298 549.285,295.631 545.5,295.5C 544.846,299.831 545.846,303.665 548.5,307C 547.188,309.151 545.355,310.651 543,311.5C 542.51,312.793 542.343,314.127 542.5,315.5C 544.582,315.472 546.416,316.139 548,317.5C 548.144,320.025 548.31,322.358 548.5,324.5C 546.859,322.797 545.859,320.63 545.5,318C 542.054,317.218 538.554,316.718 535,316.5C 534.612,313.151 534.779,309.817 535.5,306.5C 538.167,306.5 540.833,306.5 543.5,306.5C 543.176,302.445 543.509,298.445 544.5,294.5C 547.421,293.593 550.421,293.26 553.5,293.5C 554.493,290.927 555.326,288.26 556,285.5C 557.011,284.663 558.178,284.33 559.5,284.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#37374d\",\n    d: \"M 63.5,283.5 C 67.8802,284.224 69.8802,286.89 69.5,291.5C 65.2175,292.686 64.5509,295.02 67.5,298.5C 66.5197,299.981 65.353,301.315 64,302.5C 62.8143,308.043 60.6476,313.21 57.5,318C 51.8674,319.851 48.2007,318.017 46.5,312.5C 44.6774,311.507 43.3441,310.007 42.5,308C 44.0192,305.422 44.8525,302.589 45,299.5C 46.5843,298.139 48.4176,297.472 50.5,297.5C 50.4208,296.07 50.7542,294.736 51.5,293.5C 54.8333,291.167 58.1667,288.833 61.5,286.5C 62.1925,285.482 62.8592,284.482 63.5,283.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#464259\",\n    d: \"M 378.5,277.5 C 379.598,278.601 379.765,279.934 379,281.5C 375.217,291.733 370.884,301.733 366,311.5C 365.26,313.319 364.093,314.652 362.5,315.5C 368.874,303.401 374.208,290.734 378.5,277.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#77687a\",\n    d: \"M 127.5,294.5 C 126.448,294.351 125.448,294.517 124.5,295C 124.833,295.333 125.167,295.667 125.5,296C 117.669,299.171 109.669,300.504 101.5,300C 100.584,300.278 99.9175,300.778 99.5,301.5C 95.8879,302.803 92.2212,303.97 88.5,305C 88.4091,307.265 89.0758,309.598 90.5,312C 89.1285,314.515 88.1285,317.182 87.5,320C 87.748,325.722 87.748,331.555 87.5,337.5C 109.81,336.762 132.143,336.762 154.5,337.5C 154.196,338.15 153.863,338.817 153.5,339.5C 143.908,341.145 134.241,341.812 124.5,341.5C 111.833,341.5 99.1667,341.5 86.5,341.5C 86.1667,341.5 85.8333,341.5 85.5,341.5C 85.1667,341.5 84.8333,341.5 84.5,341.5C 84.5,339.5 84.5,337.5 84.5,335.5C 82.8333,335.5 81.1667,335.5 79.5,335.5C 78.3763,379.571 78.8763,423.571 81,467.5C 80.0164,465.205 79.1831,465.539 78.5,468.5C 78.8627,469.183 79.1961,469.85 79.5,470.5C 79.5,471.833 79.5,473.167 79.5,474.5C 79.5,476.167 79.5,477.833 79.5,479.5C 78.1001,478.9 77.1001,477.9 76.5,476.5C 77.0906,475.849 77.7573,475.182 78.5,474.5C 76.5118,428.317 75.8452,381.983 76.5,335.5C 78.3112,326.554 79.1446,317.22 79,307.5C 79.5112,305.122 80.1779,302.788 81,300.5C 85.7458,301.516 90.5791,301.516 95.5,300.5C 96.172,299.733 97.0053,299.066 98,298.5C 98.4993,293.511 98.6659,288.511 98.5,283.5C 100.68,281.256 102.846,281.589 105,284.5C 108.497,281.038 110.664,282.038 111.5,287.5C 116.603,285.11 121.936,283.11 127.5,281.5C 127.5,282.5 127.5,283.5 127.5,284.5C 129.359,284.461 130.692,285.294 131.5,287C 130.552,287.483 129.552,287.649 128.5,287.5C 128.552,289.903 128.219,292.236 127.5,294.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#927d82\",\n    d: \"M 124.5,303.5 C 131.833,303.5 139.167,303.5 146.5,303.5C 145.888,307.163 145.721,310.83 146,314.5C 146.232,313.263 146.732,312.263 147.5,311.5C 147.201,313.604 147.534,315.604 148.5,317.5C 151.568,318.691 154.235,320.358 156.5,322.5C 155.167,326.167 155.167,329.833 156.5,333.5C 156.5,334.167 156.167,334.5 155.5,334.5C 154.833,334.5 154.5,334.833 154.5,335.5C 144.494,335.666 134.494,335.5 124.5,335C 123.449,331.72 121.449,330.553 118.5,331.5C 115.832,329.505 114.165,326.838 113.5,323.5C 112.5,324.833 111.5,326.167 110.5,327.5C 108.338,325.98 106.005,324.98 103.5,324.5C 103.98,321.315 103.314,318.481 101.5,316C 105.155,313.847 108.655,314.014 112,316.5C 115.184,315.594 116.017,313.761 114.5,311C 116.791,311.811 118.625,310.977 120,308.5C 121.852,306.77 121.686,305.604 119.5,305C 121.382,304.802 123.048,304.302 124.5,303.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#807674\",\n    d: \"M 152.5,307.5 C 154.886,308.373 156.886,309.873 158.5,312C 155.879,311.573 153.879,310.073 152.5,307.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#332f3e\",\n    d: \"M 551.5,271.5 C 552.167,271.5 552.833,271.5 553.5,271.5C 553.5,273.5 553.5,275.5 553.5,277.5C 558.556,277.538 560.556,279.872 559.5,284.5C 558.178,284.33 557.011,284.663 556,285.5C 555.326,288.26 554.493,290.927 553.5,293.5C 550.421,293.26 547.421,293.593 544.5,294.5C 543.509,298.445 543.176,302.445 543.5,306.5C 540.833,306.5 538.167,306.5 535.5,306.5C 534.779,309.817 534.612,313.151 535,316.5C 538.554,316.718 542.054,317.218 545.5,318C 545.859,320.63 546.859,322.797 548.5,324.5C 553.304,323.856 558.304,323.856 563.5,324.5C 563.5,326.167 563.5,327.833 563.5,329.5C 561.861,327.361 559.861,327.027 557.5,328.5C 553.869,327.648 550.202,326.981 546.5,326.5C 546.843,328.483 546.176,329.817 544.5,330.5C 544.585,329.005 543.919,328.005 542.5,327.5C 539.174,328.877 536.174,330.71 533.5,333C 529.375,334.107 525.709,333.44 522.5,331C 520.5,330.667 518.5,330.333 516.5,330C 515.736,327.931 515.236,325.764 515,323.5C 513.214,320.638 510.881,319.972 508,321.5C 507.887,323.974 506.887,325.974 505,327.5C 504.58,331.191 504.08,334.858 503.5,338.5C 498.77,338.717 494.103,338.383 489.5,337.5C 489.189,336.522 488.522,335.855 487.5,335.5C 485.336,336.414 483.336,337.581 481.5,339C 478.46,339.32 475.46,339.32 472.5,339C 470.549,340.734 469.549,342.901 469.5,345.5C 472.394,345.556 475.061,346.39 477.5,348C 479.155,349.444 479.822,351.278 479.5,353.5C 477.623,351.637 475.623,349.803 473.5,348C 470.518,347.502 467.518,347.335 464.5,347.5C 464.238,346.022 464.571,344.689 465.5,343.5C 467.931,341.007 469.931,338.34 471.5,335.5C 475.649,336.08 479.316,335.414 482.5,333.5C 483.807,332.847 485.14,332.18 486.5,331.5C 489.22,332.481 491.553,333.981 493.5,336C 495.899,336.711 498.232,336.544 500.5,335.5C 501.08,330.259 502.747,325.425 505.5,321C 504.237,318.368 502.237,317.368 499.5,318C 496.934,320.96 493.934,323.46 490.5,325.5C 488.797,323.427 487.63,321.094 487,318.5C 486,317.833 485,317.167 484,316.5C 483.503,313.854 483.336,311.187 483.5,308.5C 484.314,310.631 484.814,312.964 485,315.5C 486.771,316.304 488.271,317.471 489.5,319C 491.579,319.808 493.579,319.641 495.5,318.5C 497.87,316.629 500.37,314.962 503,313.5C 503.725,314.059 504.558,314.392 505.5,314.5C 507.562,313.271 509.729,312.271 512,311.5C 514.328,311.817 516.161,312.984 517.5,315C 518.793,315.49 520.127,315.657 521.5,315.5C 521.306,312.67 520.639,310.004 519.5,307.5C 516.715,308.084 515.048,307.084 514.5,304.5C 517.054,305.388 519.721,305.721 522.5,305.5C 523.446,310.199 523.446,314.866 522.5,319.5C 520.5,319.5 518.5,319.5 516.5,319.5C 516.335,322.518 516.502,325.518 517,328.5C 519.401,329.602 521.901,329.769 524.5,329C 524.167,328.667 523.833,328.333 523.5,328C 525.211,326.565 526.378,324.731 527,322.5C 527.308,323.308 527.808,323.975 528.5,324.5C 529.547,317.243 531.214,310.243 533.5,303.5C 534.399,302.528 535.566,301.862 537,301.5C 538.8,302.378 540.633,303.045 542.5,303.5C 541.588,299.869 541.421,296.203 542,292.5C 543.616,288.178 546.616,285.178 551,283.5C 551.499,279.514 551.666,275.514 551.5,271.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#413a45\",\n    d: \"M 511.5,276.5 C 513.914,278.213 516.581,279.713 519.5,281C 517.963,282.11 517.297,283.61 517.5,285.5C 518.873,285.657 520.207,285.49 521.5,285C 523.719,281.955 526.719,280.789 530.5,281.5C 529.526,283.085 528.026,284.085 526,284.5C 525.517,285.448 525.351,286.448 525.5,287.5C 527.167,287.5 528.833,287.5 530.5,287.5C 529.913,292.753 529.913,298.087 530.5,303.5C 531.5,303.5 532.5,303.5 533.5,303.5C 531.214,310.243 529.547,317.243 528.5,324.5C 527.808,323.975 527.308,323.308 527,322.5C 526.378,324.731 525.211,326.565 523.5,328C 523.833,328.333 524.167,328.667 524.5,329C 521.901,329.769 519.401,329.602 517,328.5C 516.502,325.518 516.335,322.518 516.5,319.5C 518.5,319.5 520.5,319.5 522.5,319.5C 523.446,314.866 523.446,310.199 522.5,305.5C 519.721,305.721 517.054,305.388 514.5,304.5C 514.666,299.489 514.499,294.489 514,289.5C 511.068,285.635 509.234,281.302 508.5,276.5C 509.5,276.5 510.5,276.5 511.5,276.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#080712\",\n    d: \"M 563.5,301.5 C 563.5,309.167 563.5,316.833 563.5,324.5C 558.304,323.856 553.304,323.856 548.5,324.5C 548.31,322.358 548.144,320.025 548,317.5C 546.416,316.139 544.582,315.472 542.5,315.5C 542.343,314.127 542.51,312.793 543,311.5C 545.355,310.651 547.188,309.151 548.5,307C 545.846,303.665 544.846,299.831 545.5,295.5C 549.285,295.631 552.952,296.298 556.5,297.5C 556.33,298.822 556.663,299.989 557.5,301C 559.473,301.495 561.473,301.662 563.5,301.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#47465e\",\n    d: \"M 25.5,287.5 C 24.8333,288.167 24.1667,288.833 23.5,289.5C 16.1318,295.482 17.1318,299.649 26.5,302C 27.8228,302.816 28.4894,303.983 28.5,305.5C 28.1667,305.5 27.8333,305.5 27.5,305.5C 27.1667,305.5 26.8333,305.5 26.5,305.5C 22.2853,303.564 17.6186,302.897 12.5,303.5C 12.5,330.167 12.5,356.833 12.5,383.5C 12.1667,383.5 11.8333,383.5 11.5,383.5C 11.3888,356.83 11.0555,330.163 10.5,303.5C 9.5,303.5 8.5,303.5 7.5,303.5C 6.28431,361.461 6.28431,419.461 7.5,477.5C 5.41579,479.275 4.24912,481.608 4,484.5C 2.89037,486.037 1.39037,486.703 -0.5,486.5C -0.5,485.5 -0.5,484.5 -0.5,483.5C 0.833333,483.5 2.16667,483.5 3.5,483.5C 2.72066,480.925 2.88733,478.592 4,476.5C 4.30754,458.327 4.80754,440.16 5.5,422C 4.39151,382.506 4.22484,343.006 5,303.5C 5.50785,301.096 6.67452,300.429 8.5,301.5C 14.1327,299.191 14.1327,296.025 8.5,292C 13.7396,289.443 19.4063,287.943 25.5,287.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#887880\",\n    d: \"M 23.5,305.5 C 24.9985,307.258 25.3319,309.091 24.5,311C 26.2638,324.386 26.9305,337.886 26.5,351.5C 25.5,351.5 24.5,351.5 23.5,351.5C 23.5,348.833 23.5,346.167 23.5,343.5C 22.5,343.5 21.5,343.5 20.5,343.5C 19.8345,335.517 19.5012,327.517 19.5,319.5C 18.1667,319.5 16.8333,319.5 15.5,319.5C 15.6666,336.837 15.4999,354.17 15,371.5C 14.6174,372.056 14.1174,372.389 13.5,372.5C 13.167,350.157 13.5003,327.823 14.5,305.5C 17.6346,304.217 20.6346,304.217 23.5,305.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6e6075\",\n    d: \"M 191.5,275.5 C 192.992,280.4 193.992,285.4 194.5,290.5C 194.833,290.5 195.167,290.5 195.5,290.5C 195.838,296.198 196.505,301.865 197.5,307.5C 197.41,309.228 197.077,310.894 196.5,312.5C 198.253,314.51 199.253,316.843 199.5,319.5C 200.369,321.717 200.702,324.05 200.5,326.5C 191.167,326.833 191.167,327.167 200.5,327.5C 200.194,330.385 200.527,333.052 201.5,335.5C 200.817,337.176 199.483,337.843 197.5,337.5C 195.5,337.5 193.5,337.5 191.5,337.5C 191.666,327.494 191.5,317.494 191,307.5C 189.5,306 188,304.5 186.5,303C 187.167,302.667 187.833,302.333 188.5,302C 186.59,299.273 185.256,296.273 184.5,293C 187.167,292.333 187.167,291.667 184.5,291C 185.252,290.329 185.586,289.496 185.5,288.5C 187.053,290.385 189.053,291.385 191.5,291.5C 191.5,286.167 191.5,280.833 191.5,275.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#70627b\",\n    d: \"M 204.5,299.5 C 204.876,304.626 205.876,309.626 207.5,314.5C 207.5,318.167 207.5,321.833 207.5,325.5C 208.675,325.281 209.675,325.614 210.5,326.5C 211.932,329.33 212.265,332.164 211.5,335C 206.437,336.328 206.771,337.328 212.5,338C 215.522,340.541 217.022,343.707 217,347.5C 215.667,346.833 214.667,345.833 214,344.5C 212.934,346.099 211.434,347.099 209.5,347.5C 208.311,345.637 206.978,343.97 205.5,342.5C 204.264,340.351 203.264,338.018 202.5,335.5C 201.788,328.857 201.454,322.191 201.5,315.5C 201.401,312.763 201.735,310.096 202.5,307.5C 203.167,304.833 203.833,302.167 204.5,299.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#161322\",\n    d: \"M 36.5,291.5 C 36.8333,292.833 37.1667,294.167 37.5,295.5C 37.0919,304.325 37.9253,312.991 40,321.5C 40.7387,320.426 41.7387,319.759 43,319.5C 46.977,321.429 50.977,323.096 55,324.5C 58.8272,323.155 62.3272,321.155 65.5,318.5C 68.5336,311.552 70.2003,311.886 70.5,319.5C 71.5,319.5 72.5,319.5 73.5,319.5C 73.8287,332.344 73.4954,345.011 72.5,357.5C 68.9674,358.715 65.3008,358.715 61.5,357.5C 53.953,357.406 46.6197,358.072 39.5,359.5C 37.1119,360.219 35.6119,361.885 35,364.5C 34.2904,363.027 33.1238,362.36 31.5,362.5C 31.5,347.167 31.5,331.833 31.5,316.5C 31.8282,311.125 31.4948,305.792 30.5,300.5C 28.057,298.945 25.3903,298.278 22.5,298.5C 21.5372,292.977 23.8705,290.477 29.5,291C 30.7423,287.643 31.5756,287.81 32,291.5C 33.4902,290.272 34.9902,290.272 36.5,291.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#908185\",\n    d: \"M 275.5,248.5 C 276.234,249.708 276.567,251.041 276.5,252.5C 275.883,252.389 275.383,252.056 275,251.5C 274.667,252.833 274.333,254.167 274,255.5C 273.914,283.671 274.414,311.837 275.5,340C 275.542,352.361 274.876,364.528 273.5,376.5C 273.5,375.833 273.167,375.5 272.5,375.5C 273.734,357.506 273.734,339.506 272.5,321.5C 270.388,318.25 268.055,315.25 265.5,312.5C 263.726,309.637 262.559,306.637 262,303.5C 264.652,307.817 267.985,311.484 272,314.5C 272.333,293.833 272.667,273.167 273,252.5C 273.608,250.934 274.442,249.6 275.5,248.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#342f46\",\n    d: \"M 358.5,299.5 C 358.833,299.5 359.167,299.5 359.5,299.5C 359.104,306.357 358.437,313.191 357.5,320C 357.528,321.07 357.861,321.903 358.5,322.5C 358.08,324.094 357.414,325.594 356.5,327C 356.57,327.765 356.903,328.265 357.5,328.5C 355.622,331.869 354.622,335.536 354.5,339.5C 355.791,339.263 356.791,339.596 357.5,340.5C 355.833,340.5 354.167,340.5 352.5,340.5C 355.228,326.952 357.228,313.286 358.5,299.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0b1a\",\n    d: \"M 72.5,357.5 C 68.3814,357.512 64.5481,356.512 61,354.5C 60.8024,352.089 59.6357,350.423 57.5,349.5C 56.3527,349.818 55.5194,350.484 55,351.5C 53.5038,348.998 51.3371,347.331 48.5,346.5C 47.5481,348.045 47.2148,349.712 47.5,351.5C 46.1667,351.5 44.8333,351.5 43.5,351.5C 42.583,343.174 42.083,334.84 42,326.5C 44.7086,325.294 46.3753,326.294 47,329.5C 49.1309,326.548 51.9642,325.381 55.5,326C 54.565,328.381 54.2317,330.881 54.5,333.5C 55.675,333.719 56.675,333.386 57.5,332.5C 57.1677,324.832 60.8343,321.166 68.5,321.5C 68.8704,327.317 70.0371,332.984 72,338.5C 72.4995,344.825 72.6662,351.158 72.5,357.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#604c4c\",\n    d: \"M 463.5,287.5 C 465.833,287.5 468.167,287.5 470.5,287.5C 472.833,287.5 475.167,287.5 477.5,287.5C 475.615,289.311 473.281,290.478 470.5,291C 469.782,292.987 468.782,294.821 467.5,296.5C 467.709,297.086 468.043,297.586 468.5,298C 471.817,298.498 475.15,298.665 478.5,298.5C 479.438,310.462 479.772,322.462 479.5,334.5C 476.615,334.194 473.948,334.527 471.5,335.5C 469.931,338.34 467.931,341.007 465.5,343.5C 464.571,344.689 464.238,346.022 464.5,347.5C 467.518,347.335 470.518,347.502 473.5,348C 475.623,349.803 477.623,351.637 479.5,353.5C 479.5,354.167 479.5,354.833 479.5,355.5C 479.5,356.833 479.5,358.167 479.5,359.5C 479.5,360.833 479.5,362.167 479.5,363.5C 474.167,363.5 468.833,363.5 463.5,363.5C 463.343,362.127 463.51,360.793 464,359.5C 466.81,357.544 468.31,354.877 468.5,351.5C 465.348,352.041 462.848,351.041 461,348.5C 461.198,344.082 462.031,339.749 463.5,335.5C 468.723,332.63 473.723,329.297 478.5,325.5C 476.144,320.785 476.144,316.118 478.5,311.5C 477.934,309.303 477.268,307.136 476.5,305C 476.645,304.228 476.978,303.561 477.5,303C 475.615,301.912 473.615,301.079 471.5,300.5C 469.041,302.12 466.874,301.786 465,299.5C 463.646,295.637 463.146,291.637 463.5,287.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#958788\",\n    d: \"M 188.5,312.5 C 189.117,312.611 189.617,312.944 190,313.5C 190.499,318.155 190.666,322.821 190.5,327.5C 181.853,327.895 174.186,325.395 167.5,320C 171.359,321.584 175.359,323.25 179.5,325C 182.793,325.826 186.126,326.326 189.5,326.5C 189.717,321.77 189.383,317.103 188.5,312.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#585067\",\n    d: \"M 393.5,243.5 C 394.328,249.319 394.828,255.319 395,261.5C 395.278,262.416 395.778,263.082 396.5,263.5C 401.565,284.623 404.565,305.956 405.5,327.5C 403.974,327.994 402.641,328.661 401.5,329.5C 392.707,333.064 384.04,336.897 375.5,341C 371.605,342.266 367.605,342.766 363.5,342.5C 361.302,342.125 359.302,341.458 357.5,340.5C 356.791,339.596 355.791,339.263 354.5,339.5C 354.622,335.536 355.622,331.869 357.5,328.5C 359.924,329.03 362.257,329.864 364.5,331C 366.167,331.667 367.833,331.667 369.5,331C 380.116,325.901 391.116,321.568 402.5,318C 401.167,317.667 399.833,317.333 398.5,317C 400.286,316.804 401.619,315.971 402.5,314.5C 401.305,313.033 401.305,311.533 402.5,310C 402.387,308.72 401.72,307.887 400.5,307.5C 399.503,300.866 399.17,294.2 399.5,287.5C 398.5,287.5 397.5,287.5 396.5,287.5C 397.331,283.524 397.497,279.524 397,275.5C 395.493,276.505 394.327,277.838 393.5,279.5C 393.167,278.167 392.833,276.833 392.5,275.5C 393.931,266.936 393.598,258.436 391.5,250C 391.801,245.553 392.301,245.719 393,250.5C 393.497,248.19 393.663,245.857 393.5,243.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#474659\",\n    d: \"M 563.5,329.5 C 563.5,332.833 563.5,336.167 563.5,339.5C 562.178,339.67 561.011,339.337 560,338.5C 559.578,335.764 559.578,333.098 560,330.5C 559.667,330.167 559.333,329.833 559,329.5C 558.517,330.448 558.351,331.448 558.5,332.5C 556.473,332.338 554.473,332.505 552.5,333C 553.668,334.406 553.335,335.572 551.5,336.5C 549.257,337.474 546.924,337.808 544.5,337.5C 544.5,336.833 544.5,336.167 544.5,335.5C 544.5,333.833 544.5,332.167 544.5,330.5C 546.176,329.817 546.843,328.483 546.5,326.5C 550.202,326.981 553.869,327.648 557.5,328.5C 559.861,327.027 561.861,327.361 563.5,329.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e4b4c\",\n    d: \"M 156.5,322.5 C 163.009,327.502 169.675,332.335 176.5,337C 180.395,338.266 184.395,338.766 188.5,338.5C 189.791,338.737 190.791,338.404 191.5,337.5C 193.5,337.5 195.5,337.5 197.5,337.5C 196.755,342.228 195.755,346.894 194.5,351.5C 189.327,350.376 184.16,349.376 179,348.5C 177.271,348.974 176.105,349.974 175.5,351.5C 169.733,345.502 164.067,339.335 158.5,333C 157.563,332.308 156.897,332.475 156.5,333.5C 155.167,329.833 155.167,326.167 156.5,322.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#46384f\",\n    d: \"M 201.5,315.5 C 201.454,322.191 201.788,328.857 202.5,335.5C 202.167,335.5 201.833,335.5 201.5,335.5C 200.527,333.052 200.194,330.385 200.5,327.5C 191.167,327.167 191.167,326.833 200.5,326.5C 200.702,324.05 200.369,321.717 199.5,319.5C 200.167,318.167 200.833,316.833 201.5,315.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#bbb1b5\",\n    d: \"M 265.5,312.5 C 268.055,315.25 270.388,318.25 272.5,321.5C 273.734,339.506 273.734,357.506 272.5,375.5C 272.599,387.715 273.266,399.882 274.5,412C 274.476,417.246 274.143,422.412 273.5,427.5C 261.84,425.794 250.674,422.46 240,417.5C 239.383,418.449 239.549,419.282 240.5,420C 245.38,423.72 250.38,427.22 255.5,430.5C 259.715,434.195 264.382,437.361 269.5,440C 268.692,440.308 268.025,440.808 267.5,441.5C 269.743,442.474 272.076,442.808 274.5,442.5C 275.43,449.777 275.764,457.11 275.5,464.5C 274.442,465.6 273.608,466.934 273,468.5C 272.31,469.738 271.81,469.738 271.5,468.5C 273.328,466.061 273.328,463.894 271.5,462C 271.966,460.701 271.966,459.201 271.5,457.5C 267.818,457.335 264.152,457.501 260.5,458C 259.347,459.883 257.681,460.716 255.5,460.5C 253.551,457.15 252.051,453.817 251,450.5C 250.583,451.756 249.75,452.423 248.5,452.5C 241.833,445.167 234.833,438.167 227.5,431.5C 222.097,418.825 217.263,405.492 213,391.5C 209.283,377.644 208.616,363.644 211,349.5C 211.893,348.289 212.726,348.289 213.5,349.5C 221.485,365.048 232.152,377.715 245.5,387.5C 237.545,376.593 230.878,364.926 225.5,352.5C 225.351,351.448 225.517,350.448 226,349.5C 226.667,350.833 227.667,351.833 229,352.5C 229.492,353.549 229.326,354.549 228.5,355.5C 228.846,356.696 229.346,356.696 230,355.5C 230.333,357.167 230.667,358.833 231,360.5C 231.333,360.167 231.667,359.833 232,359.5C 233.408,363.807 235.408,367.807 238,371.5C 239.849,367.852 239.682,364.186 237.5,360.5C 238.311,359.784 238.978,358.95 239.5,358C 237.799,356.14 236.799,353.973 236.5,351.5C 240.167,351.5 243.833,351.5 247.5,351.5C 247.281,350.325 247.614,349.325 248.5,348.5C 253.501,346.007 256.834,342.174 258.5,337C 257.978,336.05 257.311,335.216 256.5,334.5C 258.499,332.22 259.499,329.886 259.5,327.5C 258.52,328.981 257.353,330.315 256,331.5C 255.833,330.833 255.667,330.167 255.5,329.5C 257.119,326.358 257.785,323.025 257.5,319.5C 260.167,319.5 262.833,319.5 265.5,319.5C 265.335,317.173 264.669,315.007 263.5,313C 264.094,312.536 264.761,312.369 265.5,312.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#403b49\",\n    d: \"M 481.5,303.5 C 482.167,303.5 482.833,303.5 483.5,303.5C 483.5,305.167 483.5,306.833 483.5,308.5C 483.336,311.187 483.503,313.854 484,316.5C 485,317.167 486,317.833 487,318.5C 487.63,321.094 488.797,323.427 490.5,325.5C 493.934,323.46 496.934,320.96 499.5,318C 502.237,317.368 504.237,318.368 505.5,321C 502.747,325.425 501.08,330.259 500.5,335.5C 498.232,336.544 495.899,336.711 493.5,336C 491.553,333.981 489.22,332.481 486.5,331.5C 485.14,332.18 483.807,332.847 482.5,333.5C 483.5,323.483 483.167,313.483 481.5,303.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6e6373\",\n    d: \"M 207.5,314.5 C 212.928,327.458 218.928,340.125 225.5,352.5C 230.878,364.926 237.545,376.593 245.5,387.5C 232.152,377.715 221.485,365.048 213.5,349.5C 212.726,348.289 211.893,348.289 211,349.5C 208.616,363.644 209.283,377.644 213,391.5C 217.263,405.492 222.097,418.825 227.5,431.5C 223.487,427.485 219.821,423.152 216.5,418.5C 217.043,418.44 217.376,418.107 217.5,417.5C 214.142,411.446 210.809,405.446 207.5,399.5C 209.288,399.785 210.955,399.452 212.5,398.5C 211.296,393.272 209.963,388.105 208.5,383C 209.059,382.275 209.392,381.442 209.5,380.5C 208.472,371.504 207.139,362.837 205.5,354.5C 206.53,353.448 207.197,352.114 207.5,350.5C 206.825,347.822 206.158,345.156 205.5,342.5C 206.978,343.97 208.311,345.637 209.5,347.5C 211.434,347.099 212.934,346.099 214,344.5C 214.667,345.833 215.667,346.833 217,347.5C 217.022,343.707 215.522,340.541 212.5,338C 206.771,337.328 206.437,336.328 211.5,335C 212.265,332.164 211.932,329.33 210.5,326.5C 209.675,325.614 208.675,325.281 207.5,325.5C 207.5,321.833 207.5,318.167 207.5,314.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1e1c2c\",\n    d: \"M 544.5,330.5 C 544.5,332.167 544.5,333.833 544.5,335.5C 543.549,334.081 543.216,332.415 543.5,330.5C 538.675,331.327 535.341,333.994 533.5,338.5C 535.948,338.01 537.615,338.843 538.5,341C 537.539,343.082 536.206,344.915 534.5,346.5C 535.246,347.736 535.579,349.07 535.5,350.5C 537.792,350.244 539.959,350.577 542,351.5C 542.287,353.891 542.787,356.224 543.5,358.5C 541.832,364.834 542.499,370.834 545.5,376.5C 544.417,376.461 543.417,376.127 542.5,375.5C 541.657,369.175 540.99,362.842 540.5,356.5C 542.344,353.004 541.177,351.337 537,351.5C 530.943,354.473 524.443,356.14 517.5,356.5C 517.229,354.179 517.896,352.179 519.5,350.5C 523.927,350.033 527.761,348.366 531,345.5C 531.72,343.888 531.554,342.388 530.5,341C 527.518,340.502 524.518,340.335 521.5,340.5C 525.482,338.191 525.482,335.691 521.5,333C 519.19,332.503 516.857,332.337 514.5,332.5C 514.808,330.076 514.474,327.743 513.5,325.5C 506.884,328.206 504.551,333.206 506.5,340.5C 509.631,339.908 511.964,340.908 513.5,343.5C 510.975,342.36 508.308,341.693 505.5,341.5C 505.374,343.2 504.707,344.7 503.5,346C 504.233,347.766 504.567,349.599 504.5,351.5C 503.102,350.223 502.436,348.557 502.5,346.5C 503.389,344.483 503.889,342.483 504,340.5C 499.882,341.798 495.715,341.798 491.5,340.5C 490.807,339.482 490.141,338.482 489.5,337.5C 494.103,338.383 498.77,338.717 503.5,338.5C 504.08,334.858 504.58,331.191 505,327.5C 506.887,325.974 507.887,323.974 508,321.5C 510.881,319.972 513.214,320.638 515,323.5C 515.236,325.764 515.736,327.931 516.5,330C 518.5,330.333 520.5,330.667 522.5,331C 525.709,333.44 529.375,334.107 533.5,333C 536.174,330.71 539.174,328.877 542.5,327.5C 543.919,328.005 544.585,329.005 544.5,330.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0e0d1b\",\n    d: \"M 521.5,340.5 C 519.308,342.59 516.641,343.59 513.5,343.5C 511.964,340.908 509.631,339.908 506.5,340.5C 504.551,333.206 506.884,328.206 513.5,325.5C 514.474,327.743 514.808,330.076 514.5,332.5C 516.857,332.337 519.19,332.503 521.5,333C 525.482,335.691 525.482,338.191 521.5,340.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#918488\",\n    d: \"M 283.5,253.5 C 283.5,254.167 283.833,254.5 284.5,254.5C 284.029,256.288 283.696,258.122 283.5,260C 285.484,268.202 286.484,276.536 286.5,285C 285.64,297.156 284.973,309.323 284.5,321.5C 284.501,326.346 284.834,331.012 285.5,335.5C 285.302,349.695 284.635,363.862 283.5,378C 286.533,392.833 288.2,407.667 288.5,422.5C 288.5,423.167 288.167,423.5 287.5,423.5C 286.833,423.833 286.167,424.167 285.5,424.5C 286.074,408.053 285.074,391.72 282.5,375.5C 283.594,340.505 284.094,305.505 284,270.5C 283.356,266.779 282.523,263.113 281.5,259.5C 282.05,257.343 282.717,255.343 283.5,253.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#191927\",\n    d: \"M 563.5,339.5 C 563.5,340.5 563.5,341.5 563.5,342.5C 562.167,342.5 560.833,342.5 559.5,342.5C 559.286,344.144 559.62,345.644 560.5,347C 559.223,347.127 558.057,346.627 557,345.5C 554.765,346.896 553.598,348.896 553.5,351.5C 551.833,350.167 550.167,350.167 548.5,351.5C 549.031,349.376 550.365,347.876 552.5,347C 550.833,346.667 549.167,346.333 547.5,346C 551.786,341.396 550.786,338.563 544.5,337.5C 546.924,337.808 549.257,337.474 551.5,336.5C 553.335,335.572 553.668,334.406 552.5,333C 554.473,332.505 556.473,332.338 558.5,332.5C 558.351,331.448 558.517,330.448 559,329.5C 559.333,329.833 559.667,330.167 560,330.5C 559.578,333.098 559.578,335.764 560,338.5C 561.011,339.337 562.178,339.67 563.5,339.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#23202f\",\n    d: \"M 489.5,337.5 C 486.491,337.423 484.324,338.756 483,341.5C 481.543,345.741 481.209,350.074 482,354.5C 485.808,356.223 487.475,359.223 487,363.5C 487.414,363.957 487.914,364.291 488.5,364.5C 489.806,363.088 490.64,361.421 491,359.5C 492.11,357.963 493.61,357.297 495.5,357.5C 495.5,360.167 495.5,362.833 495.5,365.5C 497.5,365.833 499.5,366.167 501.5,366.5C 501.335,363.15 501.502,359.817 502,356.5C 502.383,355.944 502.883,355.611 503.5,355.5C 502.64,359.434 502.307,363.434 502.5,367.5C 500.833,367.5 499.167,367.5 497.5,367.5C 496.228,366.566 494.728,365.899 493,365.5C 490.228,367.802 487.394,369.802 484.5,371.5C 484.665,367.818 484.499,364.152 484,360.5C 482.953,358.292 481.453,356.626 479.5,355.5C 479.5,354.833 479.5,354.167 479.5,353.5C 479.822,351.278 479.155,349.444 477.5,348C 475.061,346.39 472.394,345.556 469.5,345.5C 469.549,342.901 470.549,340.734 472.5,339C 475.46,339.32 478.46,339.32 481.5,339C 483.336,337.581 485.336,336.414 487.5,335.5C 488.522,335.855 489.189,336.522 489.5,337.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#483e4d\",\n    d: \"M 86.5,341.5 C 99.1667,341.5 111.833,341.5 124.5,341.5C 124.082,342.222 123.416,342.722 122.5,343C 118.848,343.499 115.182,343.665 111.5,343.5C 111.5,344.833 111.5,346.167 111.5,347.5C 103.167,347.5 94.8333,347.5 86.5,347.5C 86.5,345.5 86.5,343.5 86.5,341.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#544448\",\n    d: \"M 155.5,334.5 C 155.533,338.869 155.2,343.202 154.5,347.5C 153.778,347.082 153.278,346.416 153,345.5C 152.653,347.18 151.653,348.18 150,348.5C 138.222,346.252 126.388,345.919 114.5,347.5C 113.5,347.5 112.5,347.5 111.5,347.5C 111.5,346.167 111.5,344.833 111.5,343.5C 115.182,343.665 118.848,343.499 122.5,343C 123.416,342.722 124.082,342.222 124.5,341.5C 134.241,341.812 143.908,341.145 153.5,339.5C 153.863,338.817 154.196,338.15 154.5,337.5C 154.5,336.833 154.5,336.167 154.5,335.5C 154.5,334.833 154.833,334.5 155.5,334.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#908083\",\n    d: \"M 26.5,351.5 C 26.4103,392.552 25.4103,433.385 23.5,474C 24.448,474.483 25.448,474.649 26.5,474.5C 26.5,475.833 26.5,477.167 26.5,478.5C 22.1667,478.5 17.8333,478.5 13.5,478.5C 13.5,443.167 13.5,407.833 13.5,372.5C 14.1174,372.389 14.6174,372.056 15,371.5C 15.4999,354.17 15.6666,336.837 15.5,319.5C 16.8333,319.5 18.1667,319.5 19.5,319.5C 19.5012,327.517 19.8345,335.517 20.5,343.5C 21.5,343.5 22.5,343.5 23.5,343.5C 23.5,346.167 23.5,348.833 23.5,351.5C 24.5,351.5 25.5,351.5 26.5,351.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0914\",\n    d: \"M 352.5,340.5 C 354.167,340.5 355.833,340.5 357.5,340.5C 359.302,341.458 361.302,342.125 363.5,342.5C 363.391,347.86 363.724,353.193 364.5,358.5C 362.655,366.878 360.655,375.212 358.5,383.5C 358.672,384.492 358.338,385.158 357.5,385.5C 356.542,385.047 355.708,384.381 355,383.5C 354.566,380.821 354.732,378.154 355.5,375.5C 354.147,370.807 352.814,366.14 351.5,361.5C 350.28,359.718 349.614,357.718 349.5,355.5C 350.341,350.468 351.341,345.468 352.5,340.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#423840\",\n    d: \"M 401.5,329.5 C 401.5,330.167 401.5,330.833 401.5,331.5C 401.667,346.17 401.5,360.837 401,375.5C 394.014,395.316 386.181,414.65 377.5,433.5C 377.021,430.936 376.355,428.436 375.5,426C 376.308,425.692 376.975,425.192 377.5,424.5C 378.106,422.291 378.773,420.124 379.5,418C 378.333,417.5 377.5,416.667 377,415.5C 374.045,415.678 370.879,415.678 367.5,415.5C 367.5,410.167 367.5,404.833 367.5,399.5C 366.167,399.5 364.833,399.5 363.5,399.5C 363.665,396.15 363.498,392.817 363,389.5C 362.376,386.726 360.876,384.726 358.5,383.5C 360.655,375.212 362.655,366.878 364.5,358.5C 363.724,353.193 363.391,347.86 363.5,342.5C 367.605,342.766 371.605,342.266 375.5,341C 384.04,336.897 392.707,333.064 401.5,329.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0c1b\",\n    d: \"M 489.5,337.5 C 490.141,338.482 490.807,339.482 491.5,340.5C 495.715,341.798 499.882,341.798 504,340.5C 503.889,342.483 503.389,344.483 502.5,346.5C 502.436,348.557 503.102,350.223 504.5,351.5C 504.167,352.833 503.833,354.167 503.5,355.5C 502.883,355.611 502.383,355.944 502,356.5C 501.502,359.817 501.335,363.15 501.5,366.5C 499.5,366.167 497.5,365.833 495.5,365.5C 495.5,362.833 495.5,360.167 495.5,357.5C 493.61,357.297 492.11,357.963 491,359.5C 490.64,361.421 489.806,363.088 488.5,364.5C 487.914,364.291 487.414,363.957 487,363.5C 487.475,359.223 485.808,356.223 482,354.5C 481.209,350.074 481.543,345.741 483,341.5C 484.324,338.756 486.491,337.423 489.5,337.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#baafb2\",\n    d: \"M 283.5,253.5 C 282.717,255.343 282.05,257.343 281.5,259.5C 282.523,263.113 283.356,266.779 284,270.5C 284.094,305.505 283.594,340.505 282.5,375.5C 285.074,391.72 286.074,408.053 285.5,424.5C 285.5,424.833 285.5,425.167 285.5,425.5C 284.833,425.5 284.167,425.5 283.5,425.5C 280.904,426.265 278.237,426.599 275.5,426.5C 275.721,409.778 275.054,393.111 273.5,376.5C 274.876,364.528 275.542,352.361 275.5,340C 274.414,311.837 273.914,283.671 274,255.5C 274.333,254.167 274.667,252.833 275,251.5C 275.383,252.056 275.883,252.389 276.5,252.5C 278.677,252.414 280.677,251.747 282.5,250.5C 283.386,251.325 283.719,252.325 283.5,253.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c0a18\",\n    d: \"M 563.5,342.5 C 563.5,347.833 563.5,353.167 563.5,358.5C 561.409,358.318 559.409,358.652 557.5,359.5C 555.688,356.945 554.355,354.278 553.5,351.5C 553.598,348.896 554.765,346.896 557,345.5C 558.057,346.627 559.223,347.127 560.5,347C 559.62,345.644 559.286,344.144 559.5,342.5C 560.833,342.5 562.167,342.5 563.5,342.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#746170\",\n    d: \"M 84.5,341.5 C 84.8333,341.5 85.1667,341.5 85.5,341.5C 85.4595,344.881 85.7929,348.214 86.5,351.5C 88.5,351.5 90.5,351.5 92.5,351.5C 92.3271,360.213 91.6604,368.88 90.5,377.5C 91.5,377.5 92.5,377.5 93.5,377.5C 93.2053,379.735 93.5386,381.735 94.5,383.5C 94.843,387.438 96.843,388.438 100.5,386.5C 101.483,380.189 102.316,373.856 103,367.5C 103.278,366.584 103.778,365.918 104.5,365.5C 105.167,365.5 105.833,365.5 106.5,365.5C 106.995,367.482 107.495,369.482 108,371.5C 109.011,372.337 110.178,372.67 111.5,372.5C 111.5,373.833 111.5,375.167 111.5,376.5C 109.957,377.736 108.957,379.402 108.5,381.5C 107.167,382.5 105.833,383.5 104.5,384.5C 106.203,386.507 106.537,388.507 105.5,390.5C 103.916,391.382 102.249,392.215 100.5,393C 98.6131,393.78 96.9464,393.613 95.5,392.5C 95.7135,390.856 95.3802,389.356 94.5,388C 91.5738,387.782 88.7405,387.282 86,386.5C 85.6889,371.487 85.1889,356.487 84.5,341.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6e5454\",\n    d: \"M 154.5,347.5 C 154.167,348.833 153.833,350.167 153.5,351.5C 152.5,351.5 151.5,351.5 150.5,351.5C 150.5,353.833 150.5,356.167 150.5,358.5C 147.133,358.543 143.799,358.21 140.5,357.5C 137.174,358.047 133.84,358.547 130.5,359C 129.874,359.75 129.374,360.584 129,361.5C 126.241,360.346 123.575,360.679 121,362.5C 116.677,361.271 116.511,362.104 120.5,365C 120.043,365.414 119.709,365.914 119.5,366.5C 124.467,367.329 129.467,367.829 134.5,368C 133.911,369.873 134.578,371.54 136.5,373C 142.435,376.481 146.435,374.981 148.5,368.5C 149.689,367.571 151.022,367.238 152.5,367.5C 152.5,368.167 152.5,368.833 152.5,369.5C 152.637,376.626 151.97,376.959 150.5,370.5C 148.81,373.024 146.643,375.024 144,376.5C 133.436,373.821 122.602,372.154 111.5,371.5C 111.5,370.167 111.5,368.833 111.5,367.5C 110.5,367.5 109.5,367.5 108.5,367.5C 108.737,366.209 108.404,365.209 107.5,364.5C 107.827,361.518 107.827,358.685 107.5,356C 117.402,356.113 127.068,354.78 136.5,352C 133.211,351.118 129.877,350.452 126.5,350C 126.833,349.667 127.167,349.333 127.5,349C 122.981,348.825 118.647,348.325 114.5,347.5C 126.388,345.919 138.222,346.252 150,348.5C 151.653,348.18 152.653,347.18 153,345.5C 153.278,346.416 153.778,347.082 154.5,347.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#73544c\",\n    d: \"M 153.5,351.5 C 153.167,356.833 152.833,362.167 152.5,367.5C 151.022,367.238 149.689,367.571 148.5,368.5C 146.435,374.981 142.435,376.481 136.5,373C 134.578,371.54 133.911,369.873 134.5,368C 129.467,367.829 124.467,367.329 119.5,366.5C 119.709,365.914 120.043,365.414 120.5,365C 116.511,362.104 116.677,361.271 121,362.5C 123.575,360.679 126.241,360.346 129,361.5C 129.374,360.584 129.874,359.75 130.5,359C 133.84,358.547 137.174,358.047 140.5,357.5C 143.799,358.21 147.133,358.543 150.5,358.5C 150.5,356.167 150.5,353.833 150.5,351.5C 151.5,351.5 152.5,351.5 153.5,351.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#685761\",\n    d: \"M 85.5,341.5 C 85.8333,341.5 86.1667,341.5 86.5,341.5C 86.5,343.5 86.5,345.5 86.5,347.5C 94.8333,347.5 103.167,347.5 111.5,347.5C 112.5,347.5 113.5,347.5 114.5,347.5C 118.647,348.325 122.981,348.825 127.5,349C 127.167,349.333 126.833,349.667 126.5,350C 129.877,350.452 133.211,351.118 136.5,352C 127.068,354.78 117.402,356.113 107.5,356C 107.827,358.685 107.827,361.518 107.5,364.5C 107.5,365.167 107.167,365.5 106.5,365.5C 105.833,365.5 105.167,365.5 104.5,365.5C 104.64,363.876 103.973,362.71 102.5,362C 100.19,361.503 97.8568,361.337 95.5,361.5C 95.825,369.019 95.4916,376.352 94.5,383.5C 93.5386,381.735 93.2053,379.735 93.5,377.5C 92.5,377.5 91.5,377.5 90.5,377.5C 91.6604,368.88 92.3271,360.213 92.5,351.5C 90.5,351.5 88.5,351.5 86.5,351.5C 85.7929,348.214 85.4595,344.881 85.5,341.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#120a13\",\n    d: \"M 201.5,335.5 C 201.833,335.5 202.167,335.5 202.5,335.5C 203.264,338.018 204.264,340.351 205.5,342.5C 206.158,345.156 206.825,347.822 207.5,350.5C 207.197,352.114 206.53,353.448 205.5,354.5C 200.355,359.74 199.021,365.74 201.5,372.5C 201.5,373.5 201.5,374.5 201.5,375.5C 199.833,375.5 198.167,375.5 196.5,375.5C 194.801,370.715 193.468,365.715 192.5,360.5C 192.76,357.393 193.426,354.393 194.5,351.5C 195.755,346.894 196.755,342.228 197.5,337.5C 199.483,337.843 200.817,337.176 201.5,335.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#736776\",\n    d: \"M 349.5,289.5 C 345.133,300.47 340.8,311.137 336.5,321.5C 338.534,325.52 340.534,329.52 342.5,333.5C 342.192,334.308 341.692,334.975 341,335.5C 340.667,340.833 340.333,346.167 340,351.5C 337.049,356.408 335.549,361.742 335.5,367.5C 334.167,367.5 332.833,367.5 331.5,367.5C 336.486,354.931 338.486,341.931 337.5,328.5C 333.856,333.312 330.022,337.979 326,342.5C 325.107,343.711 324.274,343.711 323.5,342.5C 330.127,330.588 335.627,318.254 340,305.5C 338.26,307.954 336.093,309.454 333.5,310C 338.532,306.822 341.199,302.322 341.5,296.5C 341.833,296.5 342.167,296.5 342.5,296.5C 342.34,298.199 342.506,299.866 343,301.5C 344.904,297.222 347.071,293.222 349.5,289.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#100815\",\n    d: \"M 401.5,331.5 C 402.766,332.09 404.099,332.59 405.5,333C 404.805,341.432 404.471,349.932 404.5,358.5C 404.879,361.582 405.546,364.582 406.5,367.5C 409.167,367.5 411.833,367.5 414.5,367.5C 414.833,356.833 415.167,356.833 415.5,367.5C 418.167,367.5 420.833,367.5 423.5,367.5C 424.742,374.136 424.742,380.802 423.5,387.5C 424.811,391.407 425.478,395.407 425.5,399.5C 426.833,399.5 428.167,399.5 429.5,399.5C 428.686,418.867 428.852,438.2 430,457.5C 430.717,458.044 431.217,458.711 431.5,459.5C 430.25,459.577 429.417,460.244 429,461.5C 428.576,467.515 428.076,473.515 427.5,479.5C 426.5,479.5 425.5,479.5 424.5,479.5C 424.49,474.085 423.823,468.752 422.5,463.5C 419.358,461.37 417.025,458.703 415.5,455.5C 410.167,455.5 404.833,455.5 399.5,455.5C 399.5,452.833 399.5,450.167 399.5,447.5C 394.833,447.5 390.167,447.5 385.5,447.5C 384.892,453.544 383.892,459.544 382.5,465.5C 380.118,463.929 377.451,463.096 374.5,463C 375.711,461.887 375.711,460.72 374.5,459.5C 372.397,457.05 370.063,455.05 367.5,453.5C 370.82,446.86 374.153,440.193 377.5,433.5C 386.181,414.65 394.014,395.316 401,375.5C 401.5,360.837 401.667,346.17 401.5,331.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f2f41\",\n    d: \"M 553.5,351.5 C 554.355,354.278 555.688,356.945 557.5,359.5C 559.409,358.652 561.409,358.318 563.5,358.5C 563.5,362.833 563.5,367.167 563.5,371.5C 561.603,370.35 559.603,369.35 557.5,368.5C 556.791,367.596 555.791,367.263 554.5,367.5C 553.029,363.505 550.863,359.838 548,356.5C 547.616,354.803 547.782,353.137 548.5,351.5C 550.167,350.167 551.833,350.167 553.5,351.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6d5553\",\n    d: \"M 175.5,351.5 C 176.5,351.5 177.5,351.5 178.5,351.5C 176.932,375.54 180.932,398.54 190.5,420.5C 190.376,421.107 190.043,421.44 189.5,421.5C 178.882,400.227 174.715,377.561 177,353.5C 176.283,352.956 175.783,352.289 175.5,351.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2e2a39\",\n    d: \"M 521.5,340.5 C 524.518,340.335 527.518,340.502 530.5,341C 531.554,342.388 531.72,343.888 531,345.5C 527.761,348.366 523.927,350.033 519.5,350.5C 517.896,352.179 517.229,354.179 517.5,356.5C 524.443,356.14 530.943,354.473 537,351.5C 541.177,351.337 542.344,353.004 540.5,356.5C 540.99,362.842 541.657,369.175 542.5,375.5C 543.417,376.127 544.417,376.461 545.5,376.5C 545.5,378.167 545.5,379.833 545.5,381.5C 542.142,380.45 538.809,379.45 535.5,378.5C 532.911,378.442 530.577,379.108 528.5,380.5C 524.184,375.543 518.684,372.543 512,371.5C 507.341,371.995 504.841,374.662 504.5,379.5C 502.838,380.327 501.505,381.493 500.5,383C 494.843,383.499 489.176,383.666 483.5,383.5C 483.334,390.175 483.5,396.842 484,403.5C 486.382,404.866 488.548,404.533 490.5,402.5C 491.421,404.756 493.088,405.756 495.5,405.5C 495.657,406.873 495.49,408.207 495,409.5C 494.261,411.889 493.095,413.889 491.5,415.5C 492.779,412.998 492.779,410.498 491.5,408C 488.731,408.957 485.897,410.123 483,411.5C 482.601,411.272 482.435,410.938 482.5,410.5C 482.334,400.494 482.5,390.494 483,380.5C 483.383,379.944 483.883,379.611 484.5,379.5C 484.369,380.376 484.702,381.043 485.5,381.5C 489.43,379.982 493.43,378.982 497.5,378.5C 499.076,377.857 500.41,376.857 501.5,375.5C 504.128,374.375 504.961,372.375 504,369.5C 501.723,368.883 499.556,368.216 497.5,367.5C 499.167,367.5 500.833,367.5 502.5,367.5C 502.307,363.434 502.64,359.434 503.5,355.5C 503.833,354.167 504.167,352.833 504.5,351.5C 504.567,349.599 504.233,347.766 503.5,346C 504.707,344.7 505.374,343.2 505.5,341.5C 508.308,341.693 510.975,342.36 513.5,343.5C 516.641,343.59 519.308,342.59 521.5,340.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3d3a48\",\n    d: \"M 540.5,356.5 C 539.883,356.611 539.383,356.944 539,357.5C 536.937,362.832 537.104,367.999 539.5,373C 539.167,373.833 538.833,374.667 538.5,375.5C 533.954,375.296 529.288,375.296 524.5,375.5C 524.6,368.678 521.434,366.678 515,369.5C 513.014,369.431 511.514,368.765 510.5,367.5C 514.899,368.102 519.066,367.102 523,364.5C 523.45,367.106 524.95,368.439 527.5,368.5C 527.5,365.167 527.5,361.833 527.5,358.5C 530.815,358.028 533.149,356.195 534.5,353C 538.22,351.608 540.22,352.775 540.5,356.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#473f4a\",\n    d: \"M 527.5,358.5 C 527.5,361.833 527.5,365.167 527.5,368.5C 524.95,368.439 523.45,367.106 523,364.5C 519.066,367.102 514.899,368.102 510.5,367.5C 509.221,366.032 507.554,365.365 505.5,365.5C 505.896,359.751 506.896,354.085 508.5,348.5C 509.478,348.023 510.311,347.357 511,346.5C 512.699,347.406 514.533,347.739 516.5,347.5C 516.616,350.91 514.95,352.244 511.5,351.5C 511.5,353.167 511.5,354.833 511.5,356.5C 514.005,356.98 516.338,357.98 518.5,359.5C 521.421,358.593 524.421,358.26 527.5,358.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4f4346\",\n    d: \"M 481.5,359.5 C 482.222,359.918 482.722,360.584 483,361.5C 483.439,367.724 483.939,373.724 484.5,379.5C 483.883,379.611 483.383,379.944 483,380.5C 482.5,390.494 482.334,400.494 482.5,410.5C 481.391,410.557 480.391,410.89 479.5,411.5C 479.5,410.5 479.5,409.5 479.5,408.5C 479.5,394.833 479.5,381.167 479.5,367.5C 480.5,367.5 481.5,367.5 482.5,367.5C 481.908,364.873 481.575,362.206 481.5,359.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e5266\",\n    d: \"M 104.5,365.5 C 103.778,365.918 103.278,366.584 103,367.5C 102.316,373.856 101.483,380.189 100.5,386.5C 96.843,388.438 94.843,387.438 94.5,383.5C 95.4916,376.352 95.825,369.019 95.5,361.5C 97.8568,361.337 100.19,361.503 102.5,362C 103.973,362.71 104.64,363.876 104.5,365.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3d3641\",\n    d: \"M 479.5,355.5 C 481.453,356.626 482.953,358.292 484,360.5C 484.499,364.152 484.665,367.818 484.5,371.5C 487.394,369.802 490.228,367.802 493,365.5C 494.728,365.899 496.228,366.566 497.5,367.5C 499.556,368.216 501.723,368.883 504,369.5C 504.961,372.375 504.128,374.375 501.5,375.5C 502.052,373.669 502.052,372.003 501.5,370.5C 498.402,369.479 495.402,368.646 492.5,368C 487.308,374.94 488.974,378.44 497.5,378.5C 493.43,378.982 489.43,379.982 485.5,381.5C 484.702,381.043 484.369,380.376 484.5,379.5C 483.939,373.724 483.439,367.724 483,361.5C 482.722,360.584 482.222,359.918 481.5,359.5C 480.833,359.5 480.167,359.5 479.5,359.5C 479.5,358.167 479.5,356.833 479.5,355.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d4243\",\n    d: \"M 501.5,375.5 C 500.41,376.857 499.076,377.857 497.5,378.5C 488.974,378.44 487.308,374.94 492.5,368C 495.402,368.646 498.402,369.479 501.5,370.5C 502.052,372.003 502.052,373.669 501.5,375.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#756069\",\n    d: \"M 107.5,364.5 C 108.404,365.209 108.737,366.209 108.5,367.5C 109.5,367.5 110.5,367.5 111.5,367.5C 111.5,368.833 111.5,370.167 111.5,371.5C 122.602,372.154 133.436,373.821 144,376.5C 146.643,375.024 148.81,373.024 150.5,370.5C 151.97,376.959 152.637,376.626 152.5,369.5C 154.144,376.751 155.811,384.085 157.5,391.5C 156.207,390.158 155.374,388.491 155,386.5C 154.333,390.5 153.667,390.5 153,386.5C 152.667,387.167 152.333,387.833 152,388.5C 146.677,386.763 141.177,386.096 135.5,386.5C 135.5,385.5 135.5,384.5 135.5,383.5C 130.524,383.589 125.857,382.423 121.5,380C 118.183,379.502 114.85,379.335 111.5,379.5C 111.5,378.5 111.5,377.5 111.5,376.5C 111.5,375.167 111.5,373.833 111.5,372.5C 110.178,372.67 109.011,372.337 108,371.5C 107.495,369.482 106.995,367.482 106.5,365.5C 107.167,365.5 107.5,365.167 107.5,364.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6f5a63\",\n    d: \"M 57.5,391.5 C 56.2318,393.905 55.5651,396.572 55.5,399.5C 54.1667,399.5 52.8333,399.5 51.5,399.5C 50.7457,402.378 50.4124,405.211 50.5,408C 52.2273,409.389 53.5606,411.056 54.5,413C 53.5202,422.8 52.8536,432.633 52.5,442.5C 51.8186,444.158 50.9853,445.825 50,447.5C 49.6667,446.5 49.3333,445.5 49,444.5C 48.7679,445.737 48.2679,446.737 47.5,447.5C 47.5,428.5 47.5,409.5 47.5,390.5C 47.5,381.5 47.5,372.5 47.5,363.5C 49.4893,362.519 51.4893,361.519 53.5,360.5C 55.601,360.632 57.101,361.632 58,363.5C 58.8243,373.009 58.6576,382.343 57.5,391.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3c3547\",\n    d: \"M 201.5,372.5 C 202.755,376.478 203.755,380.645 204.5,385C 204.167,385.5 203.833,386 203.5,386.5C 201.801,385.185 200.135,385.185 198.5,386.5C 198.415,385.005 199.081,384.005 200.5,383.5C 201.48,380.914 201.813,378.247 201.5,375.5C 201.5,374.5 201.5,373.5 201.5,372.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#443f52\",\n    d: \"M 61.5,357.5 C 61.7214,358.735 62.3881,359.735 63.5,360.5C 65.7576,361.418 68.0909,362.085 70.5,362.5C 72.4433,362.213 73.7767,361.213 74.5,359.5C 74.8271,397.876 74.4938,436.21 73.5,474.5C 74.2427,475.182 74.9094,475.849 75.5,476.5C 74.8333,476.5 74.1667,476.5 73.5,476.5C 72.8485,475.909 72.1818,475.243 71.5,474.5C 69.6183,475.093 67.7849,475.76 66,476.5C 65.3333,473.167 65.3333,469.833 66,466.5C 66.6667,465.167 67.3333,465.167 68,466.5C 68.6667,465.5 68.6667,464.5 68,463.5C 67.6667,463.833 67.3333,464.167 67,464.5C 65.4877,462.043 64.1544,462.043 63,464.5C 60.2675,461.252 59.7675,457.586 61.5,453.5C 63.316,451.183 65.316,449.016 67.5,447C 65.0366,445.079 63.0366,442.746 61.5,440C 60.9056,439.536 60.2389,439.369 59.5,439.5C 60.0838,413.513 59.9172,387.513 59,361.5C 57.5267,359.993 55.6934,359.326 53.5,359.5C 48.9753,360.983 44.3086,361.649 39.5,361.5C 39.1667,361.5 38.8333,361.5 38.5,361.5C 38.8333,360.833 39.1667,360.167 39.5,359.5C 46.6197,358.072 53.953,357.406 61.5,357.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#48435c\",\n    d: \"M 349.5,355.5 C 349.614,357.718 350.28,359.718 351.5,361.5C 350.25,361.577 349.417,362.244 349,363.5C 346.711,369.382 346.211,375.382 347.5,381.5C 348.192,380.975 348.692,380.308 349,379.5C 349.49,380.793 349.657,382.127 349.5,383.5C 347.712,383.215 346.045,383.548 344.5,384.5C 343.225,391.491 341.058,398.157 338,404.5C 337.616,402.803 337.782,401.137 338.5,399.5C 342.166,384.841 345.833,370.174 349.5,355.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#564e56\",\n    d: \"M 196.5,375.5 C 198.167,375.5 199.833,375.5 201.5,375.5C 201.813,378.247 201.48,380.914 200.5,383.5C 199.081,384.005 198.415,385.005 198.5,386.5C 198.5,387.167 198.167,387.5 197.5,387.5C 196.57,383.6 196.237,379.6 196.5,375.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c1a2a\",\n    d: \"M 545.5,376.5 C 546.924,378.515 547.59,380.848 547.5,383.5C 542.806,382.88 538.306,381.547 534,379.5C 529.157,381.709 524.157,382.042 519,380.5C 518.336,384.852 515.836,386.852 511.5,386.5C 511.467,382.131 511.8,377.798 512.5,373.5C 510.61,373.297 509.11,373.963 508,375.5C 506.409,377.927 505.575,380.593 505.5,383.5C 499.205,384.459 492.872,385.125 486.5,385.5C 486.334,390.179 486.501,394.845 487,399.5C 489.303,401.835 491.803,401.835 494.5,399.5C 496.044,402.356 497.044,405.356 497.5,408.5C 498.833,408.5 500.167,408.5 501.5,408.5C 501.147,406.365 501.98,405.032 504,404.5C 507.105,405.367 510.272,405.701 513.5,405.5C 513.354,400.299 515.02,395.799 518.5,392C 520.81,391.503 523.143,391.337 525.5,391.5C 524,393.179 522.167,394.512 520,395.5C 519.293,397.081 518.46,398.581 517.5,400C 518.308,400.308 518.975,400.808 519.5,401.5C 518.066,403.22 517.233,405.22 517,407.5C 514.584,407.629 512.084,407.296 509.5,406.5C 506.378,407.561 503.378,408.894 500.5,410.5C 504.103,415.605 508.77,416.772 514.5,414C 516.251,409.085 518.584,408.585 521.5,412.5C 517.561,414.052 513.561,415.718 509.5,417.5C 506.137,416.985 503.137,415.652 500.5,413.5C 498.43,414.903 496.763,416.57 495.5,418.5C 492.833,418.5 490.167,418.5 487.5,418.5C 487.782,417.222 488.449,416.222 489.5,415.5C 490.167,415.5 490.833,415.5 491.5,415.5C 493.095,413.889 494.261,411.889 495,409.5C 495.49,408.207 495.657,406.873 495.5,405.5C 493.088,405.756 491.421,404.756 490.5,402.5C 488.548,404.533 486.382,404.866 484,403.5C 483.5,396.842 483.334,390.175 483.5,383.5C 489.176,383.666 494.843,383.499 500.5,383C 501.505,381.493 502.838,380.327 504.5,379.5C 504.841,374.662 507.341,371.995 512,371.5C 518.684,372.543 524.184,375.543 528.5,380.5C 530.577,379.108 532.911,378.442 535.5,378.5C 538.809,379.45 542.142,380.45 545.5,381.5C 545.5,379.833 545.5,378.167 545.5,376.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b8adb2\",\n    d: \"M 341.5,272.5 C 342.629,280.344 342.629,288.344 341.5,296.5C 341.199,302.322 338.532,306.822 333.5,310C 336.093,309.454 338.26,307.954 340,305.5C 335.627,318.254 330.127,330.588 323.5,342.5C 324.274,343.711 325.107,343.711 326,342.5C 330.022,337.979 333.856,333.312 337.5,328.5C 338.486,341.931 336.486,354.931 331.5,367.5C 324.01,382.483 315.01,396.483 304.5,409.5C 299.533,414.312 294.2,418.646 288.5,422.5C 288.2,407.667 286.533,392.833 283.5,378C 284.635,363.862 285.302,349.695 285.5,335.5C 294.167,335.5 302.833,335.5 311.5,335.5C 311.334,330.156 311.501,324.823 312,319.5C 313.803,319.906 315.636,319.406 317.5,318C 315.293,315.016 315.793,314.85 319,317.5C 319.167,317.167 319.333,316.833 319.5,316.5C 315.068,312.571 310.735,308.404 306.5,304C 309.093,304.546 311.26,306.046 313,308.5C 313.84,305.536 314.84,305.203 316,307.5C 318.984,305.293 319.15,305.793 316.5,309C 317,309.5 317.5,310 318,310.5C 319.388,305.628 319.888,300.628 319.5,295.5C 322.167,295.5 324.833,295.5 327.5,295.5C 327.5,291.167 327.5,286.833 327.5,282.5C 330.167,282.5 332.833,282.5 335.5,282.5C 335.238,281.022 335.571,279.689 336.5,278.5C 339.996,277.94 341.663,275.94 341.5,272.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8a7e82\",\n    d: \"M 302.5,368.5 C 303.525,368.897 303.692,369.563 303,370.5C 299.072,373.883 295.239,377.383 291.5,381C 290.833,381.667 290.167,381.667 289.5,381C 293.908,376.818 298.241,372.651 302.5,368.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#61505d\",\n    d: \"M 47.5,363.5 C 47.5,372.5 47.5,381.5 47.5,390.5C 45.704,391.794 43.704,392.794 41.5,393.5C 40.7049,396.144 40.0382,398.811 39.5,401.5C 38.8143,389.671 38.8143,377.671 39.5,365.5C 41.8002,363.798 44.4669,363.132 47.5,363.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1d121b\",\n    d: \"M 31.5,316.5 C 31.5,331.833 31.5,347.167 31.5,362.5C 31.5,390.833 31.5,419.167 31.5,447.5C 30.8333,447.5 30.1667,447.5 29.5,447.5C 29.5,407.5 29.5,367.5 29.5,327.5C 30.1667,323.833 30.8333,320.167 31.5,316.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b49e96\",\n    d: \"M 175.5,351.5 C 175.783,352.289 176.283,352.956 177,353.5C 174.715,377.561 178.882,400.227 189.5,421.5C 191.841,431.19 195.174,440.524 199.5,449.5C 198.167,449.5 196.833,449.5 195.5,449.5C 195.5,448.5 195.5,447.5 195.5,446.5C 194.167,446.5 192.833,446.5 191.5,446.5C 191.297,442.1 189.463,438.433 186,435.5C 185.489,433.122 184.822,430.788 184,428.5C 183.667,429.5 183.333,430.5 183,431.5C 182.839,426.742 180.673,423.409 176.5,421.5C 175.833,414.167 175.167,406.833 174.5,399.5C 173.682,402.107 173.182,404.774 173,407.5C 170.986,409.183 169.32,411.183 168,413.5C 167.245,409.004 165.078,405.004 161.5,401.5C 160.167,398.167 158.833,394.833 157.5,391.5C 155.811,384.085 154.144,376.751 152.5,369.5C 152.5,368.833 152.5,368.167 152.5,367.5C 152.833,362.167 153.167,356.833 153.5,351.5C 153.833,350.167 154.167,348.833 154.5,347.5C 155.2,343.202 155.533,338.869 155.5,334.5C 156.167,334.5 156.5,334.167 156.5,333.5C 156.897,332.475 157.563,332.308 158.5,333C 164.067,339.335 169.733,345.502 175.5,351.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#56526c\",\n    d: \"M 35.5,185.5 C 36.4896,191.31 36.8229,197.31 36.5,203.5C 37.5,203.5 38.5,203.5 39.5,203.5C 39.5,204.833 39.5,206.167 39.5,207.5C 37.6921,208.918 37.0254,210.918 37.5,213.5C 36.2094,216.322 34.5428,218.989 32.5,221.5C 31.7274,238.498 31.0607,255.498 30.5,272.5C 32.9793,278.588 31.6459,283.255 26.5,286.5C 25.8333,286.5 25.5,286.833 25.5,287.5C 19.4063,287.943 13.7396,289.443 8.5,292C 14.1327,296.025 14.1327,299.191 8.5,301.5C 6.67452,300.429 5.50785,301.096 5,303.5C 4.22484,343.006 4.39151,382.506 5.5,422C 4.80754,440.16 4.30754,458.327 4,476.5C 2.88733,478.592 2.72066,480.925 3.5,483.5C 2.16667,483.5 0.833333,483.5 -0.5,483.5C -0.5,418.5 -0.5,353.5 -0.5,288.5C 6.56306,288.788 13.5631,288.288 20.5,287C 22.7794,286.594 24.1127,285.261 24.5,283C 23.8823,279.038 23.5489,275.038 23.5,271C 25.8978,248.93 26.8978,226.764 26.5,204.5C 28.3019,197.905 29.1353,190.905 29,183.5C 29.3333,192.167 29.6667,200.833 30,209.5C 31.2154,200.56 31.882,191.56 32,182.5C 32.3333,182.167 32.6667,181.833 33,181.5C 33.2004,183.32 34.0337,184.653 35.5,185.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3c405b\",\n    d: \"M 11.5,383.5 C 12.0526,400.904 11.3859,418.237 9.5,435.5C 10.8322,450.198 10.4988,464.864 8.5,479.5C 7.70245,479.043 7.36912,478.376 7.5,477.5C 6.28431,419.461 6.28431,361.461 7.5,303.5C 8.5,303.5 9.5,303.5 10.5,303.5C 11.0555,330.163 11.3888,356.83 11.5,383.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#665257\",\n    d: \"M 47.5,390.5 C 47.5,409.5 47.5,428.5 47.5,447.5C 47.7172,458.548 47.7172,469.548 47.5,480.5C 47.1667,481.5 46.8333,482.5 46.5,483.5C 44.0476,481.607 41.3809,480.274 38.5,479.5C 38.6658,495.017 38.6658,510.684 38.5,526.5C 36.523,515.884 35.8564,504.884 36.5,493.5C 36.5,488.167 36.5,482.833 36.5,477.5C 37.3314,462.339 37.8314,447.005 38,431.5C 38.2542,422.754 39.0875,414.087 40.5,405.5C 39.7542,404.264 39.4208,402.93 39.5,401.5C 40.0382,398.811 40.7049,396.144 41.5,393.5C 43.704,392.794 45.704,391.794 47.5,390.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c627a\",\n    d: \"M 205.5,354.5 C 207.139,362.837 208.472,371.504 209.5,380.5C 209.392,381.442 209.059,382.275 208.5,383C 209.963,388.105 211.296,393.272 212.5,398.5C 210.955,399.452 209.288,399.785 207.5,399.5C 206.849,398.909 206.182,398.243 205.5,397.5C 205.167,397.833 204.833,398.167 204.5,398.5C 207.79,405.106 211.457,411.44 215.5,417.5C 210.044,412.58 205.044,407.247 200.5,401.5C 199.808,402.025 199.308,402.692 199,403.5C 198.503,406.146 198.336,408.813 198.5,411.5C 197.566,410.432 197.232,409.099 197.5,407.5C 197.5,400.833 197.5,394.167 197.5,387.5C 198.167,387.5 198.5,387.167 198.5,386.5C 200.135,385.185 201.801,385.185 203.5,386.5C 203.833,386 204.167,385.5 204.5,385C 203.755,380.645 202.755,376.478 201.5,372.5C 199.021,365.74 200.355,359.74 205.5,354.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#746a79\",\n    d: \"M 26.5,305.5 C 25.5,305.5 24.5,305.5 23.5,305.5C 20.6346,304.217 17.6346,304.217 14.5,305.5C 13.5003,327.823 13.167,350.157 13.5,372.5C 13.5,407.833 13.5,443.167 13.5,478.5C 12.5018,447.004 12.1685,415.338 12.5,383.5C 12.5,356.833 12.5,330.167 12.5,303.5C 17.6186,302.897 22.2853,303.564 26.5,305.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#55464c\",\n    d: \"M 194.5,351.5 C 193.426,354.393 192.76,357.393 192.5,360.5C 193.468,365.715 194.801,370.715 196.5,375.5C 196.237,379.6 196.57,383.6 197.5,387.5C 197.5,394.167 197.5,400.833 197.5,407.5C 196.842,406.602 196.176,405.602 195.5,404.5C 194.483,407.028 193.316,407.028 192,404.5C 191.667,407.167 191.333,409.833 191,412.5C 189.066,408.669 187.566,404.669 186.5,400.5C 187.325,399.614 188.325,399.281 189.5,399.5C 189.313,397.436 188.813,395.436 188,393.5C 187.667,394.5 187.333,395.5 187,396.5C 186.501,392.179 186.334,387.846 186.5,383.5C 185.167,383.5 183.833,383.5 182.5,383.5C 182.643,381.738 182.309,380.071 181.5,378.5C 182.441,378.511 183.108,378.011 183.5,377C 182.053,368.57 181.386,360.07 181.5,351.5C 180.5,351.5 179.5,351.5 178.5,351.5C 177.5,351.5 176.5,351.5 175.5,351.5C 176.105,349.974 177.271,348.974 179,348.5C 184.16,349.376 189.327,350.376 194.5,351.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0a0915\",\n    d: \"M 544.5,335.5 C 544.5,336.167 544.5,336.833 544.5,337.5C 550.786,338.563 551.786,341.396 547.5,346C 549.167,346.333 550.833,346.667 552.5,347C 550.365,347.876 549.031,349.376 548.5,351.5C 547.782,353.137 547.616,354.803 548,356.5C 550.863,359.838 553.029,363.505 554.5,367.5C 555.791,367.263 556.791,367.596 557.5,368.5C 555.771,369.117 554.271,370.117 553,371.5C 552.667,371.167 552.333,370.833 552,370.5C 551.028,372.305 549.861,373.972 548.5,375.5C 549.981,379.285 551.647,382.952 553.5,386.5C 553.136,388.693 552.136,390.527 550.5,392C 550.5,393.667 550.5,395.333 550.5,397C 545.825,399.935 544.825,403.602 547.5,408C 549.708,408.191 551.708,408.691 553.5,409.5C 551.473,409.338 549.473,409.505 547.5,410C 546.351,411.604 546.351,413.27 547.5,415C 547.095,415.945 546.428,416.612 545.5,417C 542.821,416.842 540.154,416.342 537.5,415.5C 537.007,413.194 536.674,410.861 536.5,408.5C 539.25,408.382 541.25,407.049 542.5,404.5C 541.609,403.41 540.609,403.41 539.5,404.5C 538.784,402.518 537.617,400.851 536,399.5C 536.939,396.972 537.605,394.306 538,391.5C 536.04,389.349 533.706,387.683 531,386.5C 529.358,386.978 528.191,387.978 527.5,389.5C 527.167,390.5 526.5,391.167 525.5,391.5C 523.143,391.337 520.81,391.503 518.5,392C 515.02,395.799 513.354,400.299 513.5,405.5C 510.272,405.701 507.105,405.367 504,404.5C 501.98,405.032 501.147,406.365 501.5,408.5C 500.167,408.5 498.833,408.5 497.5,408.5C 497.044,405.356 496.044,402.356 494.5,399.5C 491.803,401.835 489.303,401.835 487,399.5C 486.501,394.845 486.334,390.179 486.5,385.5C 492.872,385.125 499.205,384.459 505.5,383.5C 505.575,380.593 506.409,377.927 508,375.5C 509.11,373.963 510.61,373.297 512.5,373.5C 511.8,377.798 511.467,382.131 511.5,386.5C 515.836,386.852 518.336,384.852 519,380.5C 524.157,382.042 529.157,381.709 534,379.5C 538.306,381.547 542.806,382.88 547.5,383.5C 547.59,380.848 546.924,378.515 545.5,376.5C 542.499,370.834 541.832,364.834 543.5,358.5C 542.787,356.224 542.287,353.891 542,351.5C 539.959,350.577 537.792,350.244 535.5,350.5C 535.579,349.07 535.246,347.736 534.5,346.5C 536.206,344.915 537.539,343.082 538.5,341C 537.615,338.843 535.948,338.01 533.5,338.5C 535.341,333.994 538.675,331.327 543.5,330.5C 543.216,332.415 543.549,334.081 544.5,335.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#302e3d\",\n    d: \"M 523.5,413.5 C 522.508,413.672 521.842,413.338 521.5,412.5C 518.584,408.585 516.251,409.085 514.5,414C 508.77,416.772 504.103,415.605 500.5,410.5C 503.378,408.894 506.378,407.561 509.5,406.5C 512.084,407.296 514.584,407.629 517,407.5C 517.233,405.22 518.066,403.22 519.5,401.5C 518.975,400.808 518.308,400.308 517.5,400C 518.46,398.581 519.293,397.081 520,395.5C 522.167,394.512 524,393.179 525.5,391.5C 526.5,391.167 527.167,390.5 527.5,389.5C 528.695,389.322 529.862,388.989 531,388.5C 532.567,389.856 534.4,390.523 536.5,390.5C 536.5,391.5 536.5,392.5 536.5,393.5C 535.5,393.5 534.5,393.5 533.5,393.5C 533.808,395.924 533.474,398.257 532.5,400.5C 530.802,399.319 529.135,399.319 527.5,400.5C 528.183,403.678 529.85,406.178 532.5,408C 530.473,411.824 531.473,413.99 535.5,414.5C 535.95,418.224 534.283,420.391 530.5,421C 529.024,422.713 527.69,424.547 526.5,426.5C 525.914,426.291 525.414,425.957 525,425.5C 524.824,421.312 524.324,417.312 523.5,413.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#060507\",\n    d: \"M 557.5,368.5 C 559.603,369.35 561.603,370.35 563.5,371.5C 563.5,405.833 563.5,440.167 563.5,474.5C 562.833,468.5 562.167,462.5 561.5,456.5C 560.508,456.328 559.842,456.662 559.5,457.5C 558.672,463.319 558.172,469.319 558,475.5C 557.5,468.842 557.334,462.175 557.5,455.5C 555.585,455.216 553.919,455.549 552.5,456.5C 551.833,456.5 551.5,456.833 551.5,457.5C 550.833,457.167 550.167,456.833 549.5,456.5C 547.5,456.5 545.5,456.5 543.5,456.5C 542.833,456.5 542.167,456.5 541.5,456.5C 540.652,455.375 539.652,455.375 538.5,456.5C 537.5,456.5 536.5,456.5 535.5,456.5C 535.158,455.662 534.492,455.328 533.5,455.5C 529.232,455.131 525.232,454.131 521.5,452.5C 520.583,449.289 519.25,446.789 517.5,445C 518.57,442.258 520.07,439.758 522,437.5C 523.626,437.854 525.459,437.854 527.5,437.5C 527.97,438.693 528.97,439.36 530.5,439.5C 532.867,439.158 535.2,438.658 537.5,438C 539.817,433.835 542.15,429.669 544.5,425.5C 545.46,423.539 546.793,421.873 548.5,420.5C 549.496,420.414 550.329,420.748 551,421.5C 551.576,419.623 551.409,417.789 550.5,416C 551.789,413.965 552.789,411.799 553.5,409.5C 551.708,408.691 549.708,408.191 547.5,408C 544.825,403.602 545.825,399.935 550.5,397C 550.5,395.333 550.5,393.667 550.5,392C 552.136,390.527 553.136,388.693 553.5,386.5C 551.647,382.952 549.981,379.285 548.5,375.5C 549.861,373.972 551.028,372.305 552,370.5C 552.333,370.833 552.667,371.167 553,371.5C 554.271,370.117 555.771,369.117 557.5,368.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c1b2a\",\n    d: \"M 553.5,409.5 C 552.789,411.799 551.789,413.965 550.5,416C 551.409,417.789 551.576,419.623 551,421.5C 550.329,420.748 549.496,420.414 548.5,420.5C 547.848,419.275 546.681,418.608 545,418.5C 543.045,418.641 541.545,419.474 540.5,421C 538.866,421.494 537.199,421.66 535.5,421.5C 535.5,423.167 535.5,424.833 535.5,426.5C 537.06,426.519 538.56,426.852 540,427.5C 541.406,426.586 542.906,425.92 544.5,425.5C 542.15,429.669 539.817,433.835 537.5,438C 535.2,438.658 532.867,439.158 530.5,439.5C 528.97,439.36 527.97,438.693 527.5,437.5C 526.054,435.42 525.054,433.087 524.5,430.5C 523.675,429.614 522.675,429.281 521.5,429.5C 522.037,424.149 522.704,418.816 523.5,413.5C 524.324,417.312 524.824,421.312 525,425.5C 525.414,425.957 525.914,426.291 526.5,426.5C 527.69,424.547 529.024,422.713 530.5,421C 534.283,420.391 535.95,418.224 535.5,414.5C 531.473,413.99 530.473,411.824 532.5,408C 529.85,406.178 528.183,403.678 527.5,400.5C 529.135,399.319 530.802,399.319 532.5,400.5C 533.474,398.257 533.808,395.924 533.5,393.5C 534.5,393.5 535.5,393.5 536.5,393.5C 536.5,392.5 536.5,391.5 536.5,390.5C 534.4,390.523 532.567,389.856 531,388.5C 529.862,388.989 528.695,389.322 527.5,389.5C 528.191,387.978 529.358,386.978 531,386.5C 533.706,387.683 536.04,389.349 538,391.5C 537.605,394.306 536.939,396.972 536,399.5C 537.617,400.851 538.784,402.518 539.5,404.5C 540.609,403.41 541.609,403.41 542.5,404.5C 541.25,407.049 539.25,408.382 536.5,408.5C 536.674,410.861 537.007,413.194 537.5,415.5C 540.154,416.342 542.821,416.842 545.5,417C 546.428,416.612 547.095,415.945 547.5,415C 546.351,413.27 546.351,411.604 547.5,410C 549.473,409.505 551.473,409.338 553.5,409.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#72666a\",\n    d: \"M 272.5,375.5 C 273.167,375.5 273.5,375.833 273.5,376.5C 275.054,393.111 275.721,409.778 275.5,426.5C 278.237,426.599 280.904,426.265 283.5,425.5C 283.092,426.643 282.425,427.643 281.5,428.5C 278.916,427.607 276.249,427.274 273.5,427.5C 274.143,422.412 274.476,417.246 274.5,412C 273.266,399.882 272.599,387.715 272.5,375.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#605872\",\n    d: \"M 351.5,361.5 C 352.814,366.14 354.147,370.807 355.5,375.5C 354.732,378.154 354.566,380.821 355,383.5C 355.708,384.381 356.542,385.047 357.5,385.5C 359.183,386.853 360.516,388.52 361.5,390.5C 361.666,396.176 361.499,401.843 361,407.5C 360.48,399.579 359.647,399.579 358.5,407.5C 357.575,408.641 356.741,408.641 356,407.5C 356.402,409.874 356.236,412.207 355.5,414.5C 354.311,415.429 352.978,415.762 351.5,415.5C 349.857,415.48 348.524,416.147 347.5,417.5C 346.476,416.147 345.143,415.48 343.5,415.5C 340.788,415.737 338.288,415.737 336,415.5C 335.387,419.318 333.387,420.318 330,418.5C 327.847,420.444 325.347,420.944 322.5,420C 322.554,418.649 322.054,417.482 321,416.5C 315.332,420.735 309.832,425.068 304.5,429.5C 298.925,431.882 293.425,434.549 288,437.5C 287.501,432.845 287.334,428.179 287.5,423.5C 288.167,423.5 288.5,423.167 288.5,422.5C 294.2,418.646 299.533,414.312 304.5,409.5C 305.239,409.369 305.906,409.536 306.5,410C 305.304,410.654 305.304,411.154 306.5,411.5C 311.207,406.308 315.207,400.642 318.5,394.5C 324.075,393.037 326.408,389.371 325.5,383.5C 327.167,383.5 328.833,383.5 330.5,383.5C 330.345,388.292 329.012,392.626 326.5,396.5C 324.648,398.469 321.648,399.469 317.5,399.5C 317.238,400.978 317.571,402.311 318.5,403.5C 319.258,402.189 320.258,401.689 321.5,402C 322.167,403.667 322.833,405.333 323.5,407C 323.167,407.333 322.833,407.667 322.5,408C 324.792,406.899 326.292,407.732 327,410.5C 327.903,409.299 329.069,408.465 330.5,408C 330.043,407.586 329.709,407.086 329.5,406.5C 330.831,403.166 332.665,400.166 335,397.5C 335.71,398.973 336.876,399.64 338.5,399.5C 337.782,401.137 337.616,402.803 338,404.5C 341.058,398.157 343.225,391.491 344.5,384.5C 346.045,383.548 347.712,383.215 349.5,383.5C 349.657,382.127 349.49,380.793 349,379.5C 348.692,380.308 348.192,380.975 347.5,381.5C 346.211,375.382 346.711,369.382 349,363.5C 349.417,362.244 350.25,361.577 351.5,361.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#463d53\",\n    d: \"M 207.5,399.5 C 210.809,405.446 214.142,411.446 217.5,417.5C 217.376,418.107 217.043,418.44 216.5,418.5C 216.5,417.833 216.167,417.5 215.5,417.5C 211.457,411.44 207.79,405.106 204.5,398.5C 204.833,398.167 205.167,397.833 205.5,397.5C 206.182,398.243 206.849,398.909 207.5,399.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#17192c\",\n    d: \"M 39.5,359.5 C 39.1667,360.167 38.8333,360.833 38.5,361.5C 37.2616,363.214 36.595,365.214 36.5,367.5C 35.0564,373.942 34.3897,380.608 34.5,387.5C 35.3888,415.492 35.7221,443.492 35.5,471.5C 35.5,472.167 35.5,472.833 35.5,473.5C 34.2921,474.234 32.9587,474.567 31.5,474.5C 31.5,465.5 31.5,456.5 31.5,447.5C 31.5,419.167 31.5,390.833 31.5,362.5C 33.1238,362.36 34.2904,363.027 35,364.5C 35.6119,361.885 37.1119,360.219 39.5,359.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#322e3e\",\n    d: \"M 36.5,367.5 C 36.8317,402.337 36.4984,437.004 35.5,471.5C 35.7221,443.492 35.3888,415.492 34.5,387.5C 34.3897,380.608 35.0564,373.942 36.5,367.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5b4e56\",\n    d: \"M 27.5,305.5 C 27.8333,305.5 28.1667,305.5 28.5,305.5C 29.4916,312.648 29.825,319.981 29.5,327.5C 29.5,367.5 29.5,407.5 29.5,447.5C 28.7974,456.149 28.464,464.815 28.5,473.5C 27.501,417.669 27.1677,361.669 27.5,305.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#594849\",\n    d: \"M 178.5,351.5 C 179.5,351.5 180.5,351.5 181.5,351.5C 181.386,360.07 182.053,368.57 183.5,377C 183.108,378.011 182.441,378.511 181.5,378.5C 182.309,380.071 182.643,381.738 182.5,383.5C 183.833,383.5 185.167,383.5 186.5,383.5C 186.334,387.846 186.501,392.179 187,396.5C 187.333,395.5 187.667,394.5 188,393.5C 188.813,395.436 189.313,397.436 189.5,399.5C 188.325,399.281 187.325,399.614 186.5,400.5C 187.566,404.669 189.066,408.669 191,412.5C 191.333,409.833 191.667,407.167 192,404.5C 193.316,407.028 194.483,407.028 195.5,404.5C 196.176,405.602 196.842,406.602 197.5,407.5C 197.232,409.099 197.566,410.432 198.5,411.5C 198.685,426.607 201.019,441.274 205.5,455.5C 205.167,455.5 204.833,455.5 204.5,455.5C 202.11,454.109 200.443,452.109 199.5,449.5C 195.174,440.524 191.841,431.19 189.5,421.5C 190.043,421.44 190.376,421.107 190.5,420.5C 180.932,398.54 176.932,375.54 178.5,351.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#423d4a\",\n    d: \"M 491.5,415.5 C 490.833,415.5 490.167,415.5 489.5,415.5C 487.857,415.52 486.524,414.853 485.5,413.5C 481.699,415.434 477.699,416.767 473.5,417.5C 473.038,419.291 471.871,420.291 470,420.5C 467.667,419.5 465.333,418.5 463,417.5C 457.405,418.759 453.238,421.925 450.5,427C 447.743,427.938 445.41,429.438 443.5,431.5C 443.64,429.876 442.973,428.71 441.5,428C 442.687,426.981 443.687,425.814 444.5,424.5C 444.376,423.893 444.043,423.56 443.5,423.5C 443.5,420.833 443.5,418.167 443.5,415.5C 450.167,415.5 456.833,415.5 463.5,415.5C 463.5,414.167 463.5,412.833 463.5,411.5C 468.842,410.239 474.175,410.239 479.5,411.5C 480.391,410.89 481.391,410.557 482.5,410.5C 482.435,410.938 482.601,411.272 483,411.5C 485.897,410.123 488.731,408.957 491.5,408C 492.779,410.498 492.779,412.998 491.5,415.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#595069\",\n    d: \"M 343.5,415.5 C 338.995,426.839 333.162,437.505 326,447.5C 323.613,449.17 321.279,450.837 319,452.5C 316.935,451.372 316.268,449.706 317,447.5C 319.279,442.65 322.279,438.317 326,434.5C 327.128,431.915 327.961,429.248 328.5,426.5C 328.592,424.657 328.259,423.991 327.5,424.5C 325.579,425.363 323.579,426.029 321.5,426.5C 322.463,425.637 322.463,424.97 321.5,424.5C 314.666,429.25 307.333,432.917 299.5,435.5C 300.838,433.304 302.505,431.304 304.5,429.5C 309.832,425.068 315.332,420.735 321,416.5C 322.054,417.482 322.554,418.649 322.5,420C 325.347,420.944 327.847,420.444 330,418.5C 333.387,420.318 335.387,419.318 336,415.5C 338.288,415.737 340.788,415.737 343.5,415.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2f2e3d\",\n    d: \"M 548.5,420.5 C 546.793,421.873 545.46,423.539 544.5,425.5C 542.906,425.92 541.406,426.586 540,427.5C 538.56,426.852 537.06,426.519 535.5,426.5C 535.5,424.833 535.5,423.167 535.5,421.5C 537.199,421.66 538.866,421.494 540.5,421C 541.545,419.474 543.045,418.641 545,418.5C 546.681,418.608 547.848,419.275 548.5,420.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2b2837\",\n    d: \"M 489.5,415.5 C 488.449,416.222 487.782,417.222 487.5,418.5C 485.22,420.223 482.553,420.889 479.5,420.5C 480.5,426.5 481.5,432.5 482.5,438.5C 482.167,438.5 481.833,438.5 481.5,438.5C 481.158,437.662 480.492,437.328 479.5,437.5C 479.5,437.167 479.5,436.833 479.5,436.5C 479.297,434.956 478.63,433.622 477.5,432.5C 475.167,432.167 472.833,431.833 470.5,431.5C 464.752,432.708 458.919,433.708 453,434.5C 450.167,434.333 447.333,434.167 444.5,434C 443.748,433.329 443.414,432.496 443.5,431.5C 445.41,429.438 447.743,427.938 450.5,427C 453.238,421.925 457.405,418.759 463,417.5C 465.333,418.5 467.667,419.5 470,420.5C 471.871,420.291 473.038,419.291 473.5,417.5C 477.699,416.767 481.699,415.434 485.5,413.5C 486.524,414.853 487.857,415.52 489.5,415.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#665867\",\n    d: \"M 166.5,420.5 C 167.345,421.671 168.011,423.005 168.5,424.5C 165.513,424.998 162.513,425.498 159.5,426C 135.169,426.5 110.836,426.667 86.5,426.5C 85.596,427.209 85.2627,428.209 85.5,429.5C 85.1667,429.5 84.8333,429.5 84.5,429.5C 84.5,427.833 84.5,426.167 84.5,424.5C 111.169,424.667 137.835,424.5 164.5,424C 165.085,422.698 165.751,421.531 166.5,420.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#746a7c\",\n    d: \"M 273.5,427.5 C 273.631,428.376 273.298,429.043 272.5,429.5C 266.886,428.505 261.22,427.838 255.5,427.5C 255.5,428.5 255.5,429.5 255.5,430.5C 250.38,427.22 245.38,423.72 240.5,420C 239.549,419.282 239.383,418.449 240,417.5C 250.674,422.46 261.84,425.794 273.5,427.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e5569\",\n    d: \"M 343.5,415.5 C 345.143,415.48 346.476,416.147 347.5,417.5C 348.524,416.147 349.857,415.48 351.5,415.5C 351.211,418.412 349.711,420.412 347,421.5C 346.667,423.833 346.333,426.167 346,428.5C 345.075,429.047 344.242,429.713 343.5,430.5C 344.434,434.37 344.434,438.037 343.5,441.5C 343.333,441.833 343.167,442.167 343,442.5C 342.163,440.993 340.996,440.493 339.5,441C 339.185,442.902 339.185,444.902 339.5,447C 338.207,447.49 336.873,447.657 335.5,447.5C 334.998,452.759 334.998,457.926 335.5,463C 333.846,463.608 332.179,464.108 330.5,464.5C 332.354,456.424 334.187,448.424 336,440.5C 323.601,449.893 312.101,460.393 301.5,472C 299.527,472.495 297.527,472.662 295.5,472.5C 301.146,467.012 306.313,461.012 311,454.5C 314.162,447.336 318.162,440.67 323,434.5C 324.61,431.152 326.11,427.819 327.5,424.5C 328.259,423.991 328.592,424.657 328.5,426.5C 327.961,429.248 327.128,431.915 326,434.5C 322.279,438.317 319.279,442.65 317,447.5C 316.268,449.706 316.935,451.372 319,452.5C 321.279,450.837 323.613,449.17 326,447.5C 333.162,437.505 338.995,426.839 343.5,415.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#463c48\",\n    d: \"M 168.5,424.5 C 168.833,425.833 169.167,427.167 169.5,428.5C 169.5,429.5 169.5,430.5 169.5,431.5C 147.5,431.5 125.5,431.5 103.5,431.5C 98.1667,431.5 92.8333,431.5 87.5,431.5C 86.5489,430.081 86.2155,428.415 86.5,426.5C 110.836,426.667 135.169,426.5 159.5,426C 162.513,425.498 165.513,424.998 168.5,424.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b19996\",\n    d: \"M 199.5,449.5 C 200.443,452.109 202.11,454.109 204.5,455.5C 200.25,461.665 196.25,467.998 192.5,474.5C 192.167,474.5 191.833,474.5 191.5,474.5C 188.326,466.818 184.659,459.485 180.5,452.5C 178.017,445.538 175.017,438.872 171.5,432.5C 171.34,430.847 170.674,429.514 169.5,428.5C 169.167,427.167 168.833,425.833 168.5,424.5C 168.011,423.005 167.345,421.671 166.5,420.5C 164.677,414.209 163.011,407.876 161.5,401.5C 165.078,405.004 167.245,409.004 168,413.5C 169.32,411.183 170.986,409.183 173,407.5C 173.182,404.774 173.682,402.107 174.5,399.5C 175.167,406.833 175.833,414.167 176.5,421.5C 180.673,423.409 182.839,426.742 183,431.5C 183.333,430.5 183.667,429.5 184,428.5C 184.822,430.788 185.489,433.122 186,435.5C 189.463,438.433 191.297,442.1 191.5,446.5C 192.833,446.5 194.167,446.5 195.5,446.5C 195.5,447.5 195.5,448.5 195.5,449.5C 196.833,449.5 198.167,449.5 199.5,449.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b9aeb3\",\n    d: \"M 215.5,417.5 C 216.167,417.5 216.5,417.833 216.5,418.5C 219.821,423.152 223.487,427.485 227.5,431.5C 227.369,432.239 227.536,432.906 228,433.5C 234.423,440.428 241.256,446.762 248.5,452.5C 249.29,453.794 250.29,454.961 251.5,456C 251.167,456.333 250.833,456.667 250.5,457C 247.052,457.205 243.385,457.372 239.5,457.5C 239.5,456.167 239.5,454.833 239.5,453.5C 235.154,453.666 230.821,453.499 226.5,453C 224.757,451.89 223.424,450.39 222.5,448.5C 220.929,447.691 219.262,447.357 217.5,447.5C 217.5,450.5 217.5,453.5 217.5,456.5C 216.637,455.537 215.97,455.537 215.5,456.5C 217.406,459.64 218.74,462.973 219.5,466.5C 214.254,463.589 209.587,459.922 205.5,455.5C 201.019,441.274 198.685,426.607 198.5,411.5C 198.336,408.813 198.503,406.146 199,403.5C 199.308,402.692 199.808,402.025 200.5,401.5C 205.044,407.247 210.044,412.58 215.5,417.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#635971\",\n    d: \"M 283.5,425.5 C 284.167,425.5 284.833,425.5 285.5,425.5C 285.5,429.5 285.5,433.5 285.5,437.5C 279.735,434.549 276.068,436.216 274.5,442.5C 272.076,442.808 269.743,442.474 267.5,441.5C 268.025,440.808 268.692,440.308 269.5,440C 264.382,437.361 259.715,434.195 255.5,430.5C 255.5,429.5 255.5,428.5 255.5,427.5C 261.22,427.838 266.886,428.505 272.5,429.5C 273.298,429.043 273.631,428.376 273.5,427.5C 276.249,427.274 278.916,427.607 281.5,428.5C 282.425,427.643 283.092,426.643 283.5,425.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#826d79\",\n    d: \"M 84.5,341.5 C 85.1889,356.487 85.6889,371.487 86,386.5C 88.7405,387.282 91.5738,387.782 94.5,388C 95.3802,389.356 95.7135,390.856 95.5,392.5C 92.8333,392.5 90.1667,392.5 87.5,392.5C 87.9153,394.747 88.5819,396.914 89.5,399C 88.8568,405.172 88.1902,411.339 87.5,417.5C 87.5288,419.029 88.1955,420.196 89.5,421C 100.848,421.256 112.182,421.756 123.5,422.5C 129.644,422.155 135.644,421.155 141.5,419.5C 147.459,420.414 153.459,420.747 159.5,420.5C 160.231,414.518 158.398,409.518 154,405.5C 153.505,403.527 153.338,401.527 153.5,399.5C 151.076,399.808 148.743,399.474 146.5,398.5C 149.16,395.93 148.494,394.43 144.5,394C 147.028,393.331 147.028,392.498 144.5,391.5C 143.571,392.689 143.238,394.022 143.5,395.5C 140.353,395.263 137.353,394.43 134.5,393C 130.681,392.931 127.014,392.764 123.5,392.5C 123.5,390.833 123.5,389.167 123.5,387.5C 127.893,387.543 128.226,387.043 124.5,386C 124.957,385.586 125.291,385.086 125.5,384.5C 119.537,383.504 113.537,383.171 107.5,383.5C 107.421,384.93 107.754,386.264 108.5,387.5C 110.413,388.051 112.413,388.218 114.5,388C 115.337,389.011 115.67,390.178 115.5,391.5C 114.849,392.999 111.516,392.666 105.5,390.5C 106.537,388.507 106.203,386.507 104.5,384.5C 105.833,383.5 107.167,382.5 108.5,381.5C 108.957,379.402 109.957,377.736 111.5,376.5C 111.5,377.5 111.5,378.5 111.5,379.5C 114.85,379.335 118.183,379.502 121.5,380C 125.857,382.423 130.524,383.589 135.5,383.5C 135.5,384.5 135.5,385.5 135.5,386.5C 141.177,386.096 146.677,386.763 152,388.5C 152.333,387.833 152.667,387.167 153,386.5C 153.667,390.5 154.333,390.5 155,386.5C 155.374,388.491 156.207,390.158 157.5,391.5C 158.833,394.833 160.167,398.167 161.5,401.5C 163.011,407.876 164.677,414.209 166.5,420.5C 165.751,421.531 165.085,422.698 164.5,424C 137.835,424.5 111.169,424.667 84.5,424.5C 84.5,426.167 84.5,427.833 84.5,429.5C 84.92,442.228 84.42,454.894 83,467.5C 81.9609,468.71 80.7942,469.71 79.5,470.5C 79.1961,469.85 78.8627,469.183 78.5,468.5C 79.1831,465.539 80.0164,465.205 81,467.5C 78.8763,423.571 78.3763,379.571 79.5,335.5C 81.1667,335.5 82.8333,335.5 84.5,335.5C 84.5,337.5 84.5,339.5 84.5,341.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f797f\",\n    d: \"M 95.5,392.5 C 96.9464,393.613 98.6131,393.78 100.5,393C 102.249,392.215 103.916,391.382 105.5,390.5C 111.516,392.666 114.849,392.999 115.5,391.5C 115.67,390.178 115.337,389.011 114.5,388C 112.413,388.218 110.413,388.051 108.5,387.5C 107.754,386.264 107.421,384.93 107.5,383.5C 113.537,383.171 119.537,383.504 125.5,384.5C 125.291,385.086 124.957,385.586 124.5,386C 128.226,387.043 127.893,387.543 123.5,387.5C 123.5,389.167 123.5,390.833 123.5,392.5C 127.014,392.764 130.681,392.931 134.5,393C 137.353,394.43 140.353,395.263 143.5,395.5C 143.238,394.022 143.571,392.689 144.5,391.5C 147.028,392.498 147.028,393.331 144.5,394C 148.494,394.43 149.16,395.93 146.5,398.5C 148.743,399.474 151.076,399.808 153.5,399.5C 153.338,401.527 153.505,403.527 154,405.5C 158.398,409.518 160.231,414.518 159.5,420.5C 153.459,420.747 147.459,420.414 141.5,419.5C 135.644,421.155 129.644,422.155 123.5,422.5C 112.182,421.756 100.848,421.256 89.5,421C 88.1955,420.196 87.5288,419.029 87.5,417.5C 88.1902,411.339 88.8568,405.172 89.5,399C 88.5819,396.914 87.9153,394.747 87.5,392.5C 90.1667,392.5 92.8333,392.5 95.5,392.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#373340\",\n    d: \"M 358.5,383.5 C 360.876,384.726 362.376,386.726 363,389.5C 363.498,392.817 363.665,396.15 363.5,399.5C 364.833,399.5 366.167,399.5 367.5,399.5C 367.5,404.833 367.5,410.167 367.5,415.5C 370.879,415.678 374.045,415.678 377,415.5C 377.5,416.667 378.333,417.5 379.5,418C 378.773,420.124 378.106,422.291 377.5,424.5C 376.975,425.192 376.308,425.692 375.5,426C 376.355,428.436 377.021,430.936 377.5,433.5C 374.153,440.193 370.82,446.86 367.5,453.5C 365.666,456.083 363.999,458.75 362.5,461.5C 361.542,461.953 360.708,462.619 360,463.5C 356.658,457.997 352.492,453.331 347.5,449.5C 350.101,440.277 352.601,430.944 355,421.5C 355.253,424.2 355.253,426.867 355,429.5C 358.595,426.238 360.928,422.238 362,417.5C 362.824,408.324 362.657,399.324 361.5,390.5C 360.516,388.52 359.183,386.853 357.5,385.5C 358.338,385.158 358.672,384.492 358.5,383.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#433b47\",\n    d: \"M 38.5,361.5 C 38.8333,361.5 39.1667,361.5 39.5,361.5C 39.5,362.833 39.5,364.167 39.5,365.5C 38.8143,377.671 38.8143,389.671 39.5,401.5C 39.4208,402.93 39.7542,404.264 40.5,405.5C 39.0875,414.087 38.2542,422.754 38,431.5C 37.8314,447.005 37.3314,462.339 36.5,477.5C 36.1667,476.167 35.8333,474.833 35.5,473.5C 35.5,472.833 35.5,472.167 35.5,471.5C 36.4984,437.004 36.8317,402.337 36.5,367.5C 36.595,365.214 37.2616,363.214 38.5,361.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6d5356\",\n    d: \"M 87.5,431.5 C 92.8333,431.5 98.1667,431.5 103.5,431.5C 121.051,432.097 138.718,433.263 156.5,435C 158.39,436.078 159.39,437.745 159.5,440C 158.569,444.47 158.569,448.97 159.5,453.5C 159.339,457.248 158.339,460.582 156.5,463.5C 157.5,463.5 158.5,463.5 159.5,463.5C 159.5,467.167 159.5,470.833 159.5,474.5C 157.634,473.986 155.8,473.32 154,472.5C 151.213,473.517 148.38,473.684 145.5,473C 147.5,472.667 149.5,472.333 151.5,472C 148.854,471.503 146.187,471.336 143.5,471.5C 143.5,469.167 143.5,466.833 143.5,464.5C 144.5,464.5 145.5,464.5 146.5,464.5C 147.12,455.399 146.454,446.566 144.5,438C 144.833,437.667 145.167,437.333 145.5,437C 143.552,436.817 142.052,437.317 141,438.5C 139.016,438.074 137.016,437.74 135,437.5C 127.263,439.182 119.43,439.848 111.5,439.5C 111.5,438.167 111.5,436.833 111.5,435.5C 105.355,434.725 99.1885,434.058 93,433.5C 90.7047,433.453 88.8714,432.787 87.5,431.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5a4f55\",\n    d: \"M 227.5,431.5 C 234.833,438.167 241.833,445.167 248.5,452.5C 241.256,446.762 234.423,440.428 228,433.5C 227.536,432.906 227.369,432.239 227.5,431.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#433d55\",\n    d: \"M 287.5,423.5 C 287.334,428.179 287.501,432.845 288,437.5C 293.425,434.549 298.925,431.882 304.5,429.5C 302.505,431.304 300.838,433.304 299.5,435.5C 294.78,436.143 290.28,437.476 286,439.5C 285.536,438.906 285.369,438.239 285.5,437.5C 285.5,433.5 285.5,429.5 285.5,425.5C 285.5,425.167 285.5,424.833 285.5,424.5C 286.167,424.167 286.833,423.833 287.5,423.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#72555d\",\n    d: \"M 86.5,426.5 C 86.2155,428.415 86.5489,430.081 87.5,431.5C 88.8714,432.787 90.7047,433.453 93,433.5C 99.1885,434.058 105.355,434.725 111.5,435.5C 111.5,436.833 111.5,438.167 111.5,439.5C 119.43,439.848 127.263,439.182 135,437.5C 137.016,437.74 139.016,438.074 141,438.5C 142.052,437.317 143.552,436.817 145.5,437C 145.167,437.333 144.833,437.667 144.5,438C 146.454,446.566 147.12,455.399 146.5,464.5C 145.5,464.5 144.5,464.5 143.5,464.5C 143.5,466.833 143.5,469.167 143.5,471.5C 146.187,471.336 148.854,471.503 151.5,472C 149.5,472.333 147.5,472.667 145.5,473C 148.38,473.684 151.213,473.517 154,472.5C 155.8,473.32 157.634,473.986 159.5,474.5C 159.5,475.5 159.5,476.5 159.5,477.5C 146.156,477.333 132.823,476.833 119.5,476C 129.617,474.959 129.784,474.125 120,473.5C 112.479,474.321 104.979,474.654 97.5,474.5C 95.9996,474.547 94.9996,473.881 94.5,472.5C 91.5535,471.679 88.5535,471.179 85.5,471C 86.435,468.619 86.7683,466.119 86.5,463.5C 89.5,463.5 92.5,463.5 95.5,463.5C 95.7951,456.774 95.4617,450.108 94.5,443.5C 97.0485,440.371 96.3819,437.871 92.5,436C 87.6965,436.361 85.3632,434.194 85.5,429.5C 85.2627,428.209 85.596,427.209 86.5,426.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#635b6a\",\n    d: \"M 321.5,426.5 C 316.187,430.16 310.52,433.327 304.5,436C 298.729,438.02 293.062,440.187 287.5,442.5C 288.159,450.268 288.992,457.934 290,465.5C 289.085,464.672 288.419,463.672 288,462.5C 287.665,455.809 287.165,449.143 286.5,442.5C 285.5,442.5 284.5,442.5 283.5,442.5C 283.541,446.243 282.874,446.41 281.5,443C 280.668,442.312 280.002,442.479 279.5,443.5C 279.968,445.134 280.968,446.3 282.5,447C 282,447.167 281.5,447.333 281,447.5C 278.974,446.48 277.641,444.813 277,442.5C 276.567,450.509 276.734,458.509 277.5,466.5C 276.5,466.167 275.833,465.5 275.5,464.5C 275.764,457.11 275.43,449.777 274.5,442.5C 276.068,436.216 279.735,434.549 285.5,437.5C 285.369,438.239 285.536,438.906 286,439.5C 290.28,437.476 294.78,436.143 299.5,435.5C 307.333,432.917 314.666,429.25 321.5,424.5C 322.463,424.97 322.463,425.637 321.5,426.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#544650\",\n    d: \"M 59.5,439.5 C 59.5,451.5 59.5,463.5 59.5,475.5C 59.1667,475.5 58.8333,475.5 58.5,475.5C 58.1667,475.5 57.8333,475.5 57.5,475.5C 57.5,447.5 57.5,419.5 57.5,391.5C 58.6576,382.343 58.8243,373.009 58,363.5C 57.101,361.632 55.601,360.632 53.5,360.5C 51.4893,361.519 49.4893,362.519 47.5,363.5C 44.4669,363.132 41.8002,363.798 39.5,365.5C 39.5,364.167 39.5,362.833 39.5,361.5C 44.3086,361.649 48.9753,360.983 53.5,359.5C 55.6934,359.326 57.5267,359.993 59,361.5C 59.9172,387.513 60.0838,413.513 59.5,439.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#624d48\",\n    d: \"M 169.5,428.5 C 170.674,429.514 171.34,430.847 171.5,432.5C 170.356,434.1 169.189,435.767 168,437.5C 167.887,442.067 166.887,446.4 165,450.5C 164.343,458.567 164.51,466.4 165.5,474C 163.527,474.495 161.527,474.662 159.5,474.5C 159.5,470.833 159.5,467.167 159.5,463.5C 158.5,463.5 157.5,463.5 156.5,463.5C 158.339,460.582 159.339,457.248 159.5,453.5C 158.569,448.97 158.569,444.47 159.5,440C 159.39,437.745 158.39,436.078 156.5,435C 138.718,433.263 121.051,432.097 103.5,431.5C 125.5,431.5 147.5,431.5 169.5,431.5C 169.5,430.5 169.5,429.5 169.5,428.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5b4946\",\n    d: \"M 479.5,436.5 C 479.5,436.833 479.5,437.167 479.5,437.5C 479.5,443.167 479.5,448.833 479.5,454.5C 466.15,454.833 452.817,454.499 439.5,453.5C 438.102,451.87 437.102,450.036 436.5,448C 437.136,444.21 437.803,440.377 438.5,436.5C 439.086,436.291 439.586,435.957 440,435.5C 442.333,436.167 444.667,436.833 447,437.5C 452.448,436.854 457.948,436.188 463.5,435.5C 464.874,434.289 466.374,433.289 468,432.5C 471.942,433.676 475.775,435.009 479.5,436.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2a2129\",\n    d: \"M 513.5,447.5 C 510.243,447.361 507.076,446.694 504,445.5C 500.852,447.959 498.018,447.792 495.5,445C 493.866,444.506 492.199,444.34 490.5,444.5C 490.323,448.234 490.656,451.901 491.5,455.5C 490.206,453.952 489.539,451.952 489.5,449.5C 489.669,446.467 490.002,443.467 490.5,440.5C 493.805,441.15 497.139,441.816 500.5,442.5C 502.56,442.428 504.56,442.095 506.5,441.5C 509.218,443.23 511.551,445.23 513.5,447.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#544d64\",\n    d: \"M 361.5,390.5 C 362.657,399.324 362.824,408.324 362,417.5C 360.928,422.238 358.595,426.238 355,429.5C 355.253,426.867 355.253,424.2 355,421.5C 352.601,430.944 350.101,440.277 347.5,449.5C 345.974,459.446 341.307,467.446 333.5,473.5C 329.545,472.863 326.878,474.363 325.5,478C 324.552,478.483 323.552,478.649 322.5,478.5C 326.192,474.453 328.859,469.786 330.5,464.5C 332.179,464.108 333.846,463.608 335.5,463C 334.998,457.926 334.998,452.759 335.5,447.5C 336.873,447.657 338.207,447.49 339.5,447C 339.185,444.902 339.185,442.902 339.5,441C 340.996,440.493 342.163,440.993 343,442.5C 343.167,442.167 343.333,441.833 343.5,441.5C 344.434,438.037 344.434,434.37 343.5,430.5C 344.242,429.713 345.075,429.047 346,428.5C 346.333,426.167 346.667,423.833 347,421.5C 349.711,420.412 351.211,418.412 351.5,415.5C 352.978,415.762 354.311,415.429 355.5,414.5C 356.236,412.207 356.402,409.874 356,407.5C 356.741,408.641 357.575,408.641 358.5,407.5C 359.647,399.579 360.48,399.579 361,407.5C 361.499,401.843 361.666,396.176 361.5,390.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#7d6f75\",\n    d: \"M 23.5,305.5 C 24.5,305.5 25.5,305.5 26.5,305.5C 26.8333,305.5 27.1667,305.5 27.5,305.5C 27.1677,361.669 27.501,417.669 28.5,473.5C 28.2041,475.403 27.5375,477.07 26.5,478.5C 26.5,477.167 26.5,475.833 26.5,474.5C 25.448,474.649 24.448,474.483 23.5,474C 25.4103,433.385 26.4103,392.552 26.5,351.5C 26.9305,337.886 26.2638,324.386 24.5,311C 25.3319,309.091 24.9985,307.258 23.5,305.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#664e53\",\n    d: \"M 57.5,391.5 C 57.5,419.5 57.5,447.5 57.5,475.5C 57.6666,492.837 57.4999,510.17 57,527.5C 56.8784,529.437 56.045,530.77 54.5,531.5C 55.3412,507.801 55.6745,484.134 55.5,460.5C 55.3333,456.167 55.1667,451.833 55,447.5C 53.9055,445.922 53.0722,444.255 52.5,442.5C 52.8536,432.633 53.5202,422.8 54.5,413C 53.5606,411.056 52.2273,409.389 50.5,408C 50.4124,405.211 50.7457,402.378 51.5,399.5C 52.8333,399.5 54.1667,399.5 55.5,399.5C 55.5651,396.572 56.2318,393.905 57.5,391.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#615567\",\n    d: \"M 76.5,335.5 C 75.8452,381.983 76.5118,428.317 78.5,474.5C 77.7573,475.182 77.0906,475.849 76.5,476.5C 76.5,493.833 76.5,511.167 76.5,528.5C 75.5033,511.341 75.17,494.008 75.5,476.5C 74.9094,475.849 74.2427,475.182 73.5,474.5C 74.4938,436.21 74.8271,397.876 74.5,359.5C 75.1667,351.5 75.8333,343.5 76.5,335.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b0a6ab\",\n    d: \"M 327.5,424.5 C 326.11,427.819 324.61,431.152 323,434.5C 318.162,440.67 314.162,447.336 311,454.5C 306.313,461.012 301.146,467.012 295.5,472.5C 294.442,471.4 293.608,470.066 293,468.5C 292.346,467.304 291.846,467.304 291.5,468.5C 292.788,470.739 293.788,473.072 294.5,475.5C 294.657,476.873 294.49,478.207 294,479.5C 293.612,478.572 292.945,477.905 292,477.5C 290.403,478.885 288.57,479.551 286.5,479.5C 285.662,479.158 285.328,478.492 285.5,477.5C 285.34,475.801 285.506,474.134 286,472.5C 286.249,473.624 286.749,474.624 287.5,475.5C 288.396,476.506 289.062,476.506 289.5,475.5C 288.82,473.111 287.986,470.778 287,468.5C 285.934,470.099 284.434,471.099 282.5,471.5C 280.451,470.118 278.785,468.452 277.5,466.5C 276.734,458.509 276.567,450.509 277,442.5C 277.641,444.813 278.974,446.48 281,447.5C 281.5,447.333 282,447.167 282.5,447C 280.968,446.3 279.968,445.134 279.5,443.5C 280.002,442.479 280.668,442.312 281.5,443C 282.874,446.41 283.541,446.243 283.5,442.5C 284.5,442.5 285.5,442.5 286.5,442.5C 287.165,449.143 287.665,455.809 288,462.5C 288.419,463.672 289.085,464.672 290,465.5C 288.992,457.934 288.159,450.268 287.5,442.5C 293.062,440.187 298.729,438.02 304.5,436C 310.52,433.327 316.187,430.16 321.5,426.5C 323.579,426.029 325.579,425.363 327.5,424.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4d3d3e\",\n    d: \"M 513.5,447.5 C 516.681,448.349 519.348,450.015 521.5,452.5C 525.232,454.131 529.232,455.131 533.5,455.5C 531.5,455.5 529.5,455.5 527.5,455.5C 524.482,455.704 521.482,456.037 518.5,456.5C 518.5,456.167 518.5,455.833 518.5,455.5C 517.298,453.608 515.965,451.774 514.5,450C 509.798,449.172 505.131,449.338 500.5,450.5C 499.53,458.778 499.197,467.111 499.5,475.5C 498.51,469.69 498.177,463.69 498.5,457.5C 496.5,457.5 494.5,457.5 492.5,457.5C 492.167,456.833 491.833,456.167 491.5,455.5C 490.656,451.901 490.323,448.234 490.5,444.5C 492.199,444.34 493.866,444.506 495.5,445C 498.018,447.792 500.852,447.959 504,445.5C 507.076,446.694 510.243,447.361 513.5,447.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#110d19\",\n    d: \"M 521.5,412.5 C 521.842,413.338 522.508,413.672 523.5,413.5C 522.704,418.816 522.037,424.149 521.5,429.5C 522.675,429.281 523.675,429.614 524.5,430.5C 525.054,433.087 526.054,435.42 527.5,437.5C 525.459,437.854 523.626,437.854 522,437.5C 520.07,439.758 518.57,442.258 517.5,445C 519.25,446.789 520.583,449.289 521.5,452.5C 519.348,450.015 516.681,448.349 513.5,447.5C 511.551,445.23 509.218,443.23 506.5,441.5C 504.56,442.095 502.56,442.428 500.5,442.5C 497.139,441.816 493.805,441.15 490.5,440.5C 490.002,443.467 489.669,446.467 489.5,449.5C 489.539,451.952 490.206,453.952 491.5,455.5C 491.833,456.167 492.167,456.833 492.5,457.5C 489.124,456.742 486.124,456.075 483.5,455.5C 483.938,453.874 484.272,452.207 484.5,450.5C 483.201,446.604 482.534,442.604 482.5,438.5C 481.5,432.5 480.5,426.5 479.5,420.5C 482.553,420.889 485.22,420.223 487.5,418.5C 490.167,418.5 492.833,418.5 495.5,418.5C 496.763,416.57 498.43,414.903 500.5,413.5C 503.137,415.652 506.137,416.985 509.5,417.5C 513.561,415.718 517.561,414.052 521.5,412.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#05040a\",\n    d: \"M 495.5,418.5 C 500.813,419.098 506.146,419.431 511.5,419.5C 511.5,421.167 511.5,422.833 511.5,424.5C 515.493,424 517.16,425.5 516.5,429C 517.308,429.308 517.975,429.808 518.5,430.5C 512.991,431.765 507.491,431.765 502,430.5C 499.763,433.806 496.597,435.306 492.5,435C 491.335,436.084 490.002,436.917 488.5,437.5C 487.231,439.695 487.231,441.861 488.5,444C 487.646,445.022 486.646,445.855 485.5,446.5C 483.706,441.352 483.373,436.185 484.5,431C 481.986,428.904 481.319,426.404 482.5,423.5C 486.89,421.676 491.224,420.009 495.5,418.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#251d27\",\n    d: \"M 433.5,79.5 C 432.519,194.013 432.185,308.513 432.5,423C 433.019,425.87 433.686,428.703 434.5,431.5C 433.44,438.811 433.273,446.144 434,453.5C 434.903,454.701 436.069,455.535 437.5,456C 443.491,456.499 449.491,456.666 455.5,456.5C 464.276,456.941 472.942,456.441 481.5,455C 482.075,449.586 482.075,444.086 481.5,438.5C 481.833,438.5 482.167,438.5 482.5,438.5C 482.534,442.604 483.201,446.604 484.5,450.5C 484.272,452.207 483.938,453.874 483.5,455.5C 481.77,456.026 480.436,457.026 479.5,458.5C 464.45,458.916 449.45,458.416 434.5,457C 433.667,456.167 432.833,455.333 432,454.5C 431.5,445.506 431.334,436.506 431.5,427.5C 431.186,327.495 431.186,227.495 431.5,127.5C 431.5,127.167 431.5,126.833 431.5,126.5C 430.849,110.464 431.516,94.7977 433.5,79.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b3a9aa\",\n    d: \"M 248.5,452.5 C 249.75,452.423 250.583,451.756 251,450.5C 252.051,453.817 253.551,457.15 255.5,460.5C 257.681,460.716 259.347,459.883 260.5,458C 264.152,457.501 267.818,457.335 271.5,457.5C 271.966,459.201 271.966,460.701 271.5,462C 273.328,463.894 273.328,466.061 271.5,468.5C 270.566,469.568 270.232,470.901 270.5,472.5C 267.833,477.167 265.167,481.833 262.5,486.5C 261.624,486.631 260.957,486.298 260.5,485.5C 262.256,483.809 262.756,481.809 262,479.5C 260.838,481.824 259.671,484.158 258.5,486.5C 258.167,486 257.833,485.5 257.5,485C 258.504,483.202 259.004,481.368 259,479.5C 256.954,481.7 255.954,484.367 256,487.5C 255.612,486.572 254.945,485.905 254,485.5C 252.469,486.217 251.136,487.217 250,488.5C 249.05,487.978 248.216,487.311 247.5,486.5C 246.329,488.691 246.663,490.858 248.5,493C 247.956,493.717 247.289,494.217 246.5,494.5C 235.705,487.708 227.372,478.708 221.5,467.5C 220.452,463.736 219.119,460.069 217.5,456.5C 217.5,453.5 217.5,450.5 217.5,447.5C 219.262,447.357 220.929,447.691 222.5,448.5C 223.424,450.39 224.757,451.89 226.5,453C 230.821,453.499 235.154,453.666 239.5,453.5C 239.5,454.833 239.5,456.167 239.5,457.5C 243.385,457.372 247.052,457.205 250.5,457C 250.833,456.667 251.167,456.333 251.5,456C 250.29,454.961 249.29,453.794 248.5,452.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#685353\",\n    d: \"M 171.5,432.5 C 175.017,438.872 178.017,445.538 180.5,452.5C 179.603,451.402 178.77,451.402 178,452.5C 177.641,449.456 176.974,449.122 176,451.5C 175.282,450.549 174.449,450.383 173.5,451C 171.981,452.351 170.648,453.851 169.5,455.5C 168.319,460.825 168.319,466.158 169.5,471.5C 168.818,473.841 168.151,476.174 167.5,478.5C 166.5,478.5 165.5,478.5 164.5,478.5C 162.833,478.5 161.167,478.5 159.5,478.5C 159.5,478.167 159.5,477.833 159.5,477.5C 159.5,476.5 159.5,475.5 159.5,474.5C 161.527,474.662 163.527,474.495 165.5,474C 164.51,466.4 164.343,458.567 165,450.5C 166.887,446.4 167.887,442.067 168,437.5C 169.189,435.767 170.356,434.1 171.5,432.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#040405\",\n    d: \"M 347.5,449.5 C 352.492,453.331 356.658,457.997 360,463.5C 360.708,462.619 361.542,461.953 362.5,461.5C 363.825,460.047 364.658,460.381 365,462.5C 365.667,461.167 366.333,459.833 367,458.5C 367.5,465.492 367.666,472.492 367.5,479.5C 366.5,479.5 365.5,479.5 364.5,479.5C 362.715,507.566 360.048,535.566 356.5,563.5C 328.167,563.5 299.833,563.5 271.5,563.5C 270.686,557.888 269.353,552.388 267.5,547C 267.735,546.127 268.069,545.293 268.5,544.5C 266.257,543.526 263.924,543.192 261.5,543.5C 261.195,538.238 261.529,533.072 262.5,528C 260.197,526.05 259.864,523.717 261.5,521C 257.921,517.292 257.087,513.125 259,508.5C 259.833,509.333 260.667,510.167 261.5,511C 270.16,511.5 278.827,511.666 287.5,511.5C 287.5,507.833 287.5,504.167 287.5,500.5C 282.125,500.828 276.792,500.495 271.5,499.5C 270.398,498.824 269.398,498.158 268.5,497.5C 272.873,490.437 276.873,483.103 280.5,475.5C 282.708,476.894 284.208,478.894 285,481.5C 287.667,488.167 290.333,494.833 293,501.5C 293.708,502.381 294.542,503.047 295.5,503.5C 296.234,504.708 296.567,506.041 296.5,507.5C 300.674,507.341 304.008,505.675 306.5,502.5C 307.401,501.71 308.068,500.71 308.5,499.5C 309.913,496.339 311.58,493.339 313.5,490.5C 314.117,490.611 314.617,490.944 315,491.5C 320.373,484.626 326.54,478.626 333.5,473.5C 341.307,467.446 345.974,459.446 347.5,449.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#090608\",\n    d: \"M 483.5,455.5 C 486.124,456.075 489.124,456.742 492.5,457.5C 494.5,457.5 496.5,457.5 498.5,457.5C 498.177,463.69 498.51,469.69 499.5,475.5C 499.5,476.167 499.833,476.5 500.5,476.5C 500.5,480.167 500.5,483.833 500.5,487.5C 502.167,487.5 503.833,487.5 505.5,487.5C 512.982,488.492 520.648,488.825 528.5,488.5C 533.5,488.5 538.5,488.5 543.5,488.5C 549.979,489.491 556.646,489.824 563.5,489.5C 563.5,491.5 563.5,493.5 563.5,495.5C 558.952,496.18 554.452,497.18 550,498.5C 548.699,498.04 547.366,497.706 546,497.5C 539.862,498.664 533.695,499.164 527.5,499C 528.833,498.667 530.167,498.333 531.5,498C 527.136,496.918 522.803,496.751 518.5,497.5C 513.959,497.026 509.625,496.026 505.5,494.5C 504.596,493.791 504.263,492.791 504.5,491.5C 499.482,491.387 494.482,491.053 489.5,490.5C 489.5,514.833 489.5,539.167 489.5,563.5C 488.833,563.5 488.167,563.5 487.5,563.5C 487.5,540.833 487.5,518.167 487.5,495.5C 485.833,495.5 484.167,495.5 482.5,495.5C 482.5,518.167 482.5,540.833 482.5,563.5C 481.833,563.5 481.167,563.5 480.5,563.5C 480.5,540.833 480.5,518.167 480.5,495.5C 480.5,493.833 480.5,492.167 480.5,490.5C 465.676,489.504 450.676,489.171 435.5,489.5C 436.473,487.932 436.64,486.265 436,484.5C 434.5,483 433,481.5 431.5,480C 432.793,479.51 434.127,479.343 435.5,479.5C 435.167,474.167 434.833,468.833 434.5,463.5C 434.783,462.784 435.116,461.951 435.5,461C 436.667,460.833 437.833,460.667 439,460.5C 441.833,461.497 444.666,462.497 447.5,463.5C 447.5,462.5 447.5,461.5 447.5,460.5C 458.364,460.567 469.03,459.901 479.5,458.5C 480.436,457.026 481.77,456.026 483.5,455.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0b050f\",\n    d: \"M 431.5,459.5 C 431.5,460.833 431.5,462.167 431.5,463.5C 432.5,463.5 433.5,463.5 434.5,463.5C 434.833,468.833 435.167,474.167 435.5,479.5C 434.127,479.343 432.793,479.51 431.5,480C 433,481.5 434.5,483 436,484.5C 436.64,486.265 436.473,487.932 435.5,489.5C 434.542,489.953 433.708,490.619 433,491.5C 432.5,515.498 432.333,539.498 432.5,563.5C 432.167,563.5 431.833,563.5 431.5,563.5C 431.832,551.482 431.499,539.482 430.5,527.5C 429.851,529.624 429.017,531.624 428,533.5C 425.985,531.522 426.152,529.688 428.5,528C 428,527.833 427.5,527.667 427,527.5C 425.332,529.762 423.498,531.095 421.5,531.5C 422.728,534.071 424.728,535.405 427.5,535.5C 427.5,536.833 427.5,538.167 427.5,539.5C 426.167,539.5 424.833,539.5 423.5,539.5C 423.5,540.833 423.5,542.167 423.5,543.5C 420.833,543.5 418.167,543.5 415.5,543.5C 415.012,540.289 415.679,537.456 417.5,535C 414.833,532.667 414.833,530.333 417.5,528C 412.845,527.501 408.179,527.334 403.5,527.5C 403.5,522.167 403.5,516.833 403.5,511.5C 406.898,511.82 410.232,511.487 413.5,510.5C 410.572,509.516 407.572,509.183 404.5,509.5C 404.437,506.092 402.77,503.759 399.5,502.5C 396.215,501.676 392.882,501.176 389.5,501C 386.025,498.692 382.692,496.192 379.5,493.5C 378.571,492.311 378.238,490.978 378.5,489.5C 384.597,489.725 385.097,488.059 380,484.5C 379.667,484.833 379.333,485.167 379,485.5C 378.526,480.373 377.526,480.373 376,485.5C 375.505,483.527 375.338,481.527 375.5,479.5C 372.833,479.5 370.167,479.5 367.5,479.5C 367.666,472.492 367.5,465.492 367,458.5C 366.333,459.833 365.667,461.167 365,462.5C 364.658,460.381 363.825,460.047 362.5,461.5C 363.999,458.75 365.666,456.083 367.5,453.5C 370.063,455.05 372.397,457.05 374.5,459.5C 375.711,460.72 375.711,461.887 374.5,463C 377.451,463.096 380.118,463.929 382.5,465.5C 383.892,459.544 384.892,453.544 385.5,447.5C 390.167,447.5 394.833,447.5 399.5,447.5C 399.5,450.167 399.5,452.833 399.5,455.5C 404.833,455.5 410.167,455.5 415.5,455.5C 417.025,458.703 419.358,461.37 422.5,463.5C 423.823,468.752 424.49,474.085 424.5,479.5C 425.5,479.5 426.5,479.5 427.5,479.5C 428.076,473.515 428.576,467.515 429,461.5C 429.417,460.244 430.25,459.577 431.5,459.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3d3745\",\n    d: \"M 59.5,439.5 C 60.2389,439.369 60.9056,439.536 61.5,440C 63.0366,442.746 65.0366,445.079 67.5,447C 65.316,449.016 63.316,451.183 61.5,453.5C 59.7675,457.586 60.2675,461.252 63,464.5C 64.1544,462.043 65.4877,462.043 67,464.5C 67.3333,464.167 67.6667,463.833 68,463.5C 68.6667,464.5 68.6667,465.5 68,466.5C 67.3333,465.167 66.6667,465.167 66,466.5C 65.3333,469.833 65.3333,473.167 66,476.5C 67.7849,475.76 69.6183,475.093 71.5,474.5C 72.1818,475.243 72.8485,475.909 73.5,476.5C 73.4142,477.496 73.7476,478.329 74.5,479C 73.552,479.483 72.552,479.649 71.5,479.5C 71.1538,486.034 71.8205,492.368 73.5,498.5C 72.9828,510.993 71.9828,523.326 70.5,535.5C 71.7645,543.429 72.5978,551.429 73,559.5C 73.3333,554.167 73.6667,548.833 74,543.5C 74.4996,550.158 74.6663,556.825 74.5,563.5C 70.8333,563.5 67.1667,563.5 63.5,563.5C 63.1626,533.965 61.8292,504.631 59.5,475.5C 59.5,463.5 59.5,451.5 59.5,439.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a89ea6\",\n    d: \"M 330.5,464.5 C 328.859,469.786 326.192,474.453 322.5,478.5C 319.025,482.104 316.025,486.104 313.5,490.5C 311.58,493.339 309.913,496.339 308.5,499.5C 305.395,493.29 302.228,486.956 299,480.5C 301.72,487.64 304.22,494.973 306.5,502.5C 304.008,505.675 300.674,507.341 296.5,507.5C 296.567,506.041 296.234,504.708 295.5,503.5C 292.883,495.311 289.883,487.311 286.5,479.5C 288.57,479.551 290.403,478.885 292,477.5C 292.945,477.905 293.612,478.572 294,479.5C 294.49,478.207 294.657,476.873 294.5,475.5C 295.363,476.463 296.03,476.463 296.5,475.5C 295.873,474.583 295.539,473.583 295.5,472.5C 297.527,472.662 299.527,472.495 301.5,472C 312.101,460.393 323.601,449.893 336,440.5C 334.187,448.424 332.354,456.424 330.5,464.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#746b6f\",\n    d: \"M 217.5,456.5 C 219.119,460.069 220.452,463.736 221.5,467.5C 220.508,467.672 219.842,467.338 219.5,466.5C 218.74,462.973 217.406,459.64 215.5,456.5C 215.97,455.537 216.637,455.537 217.5,456.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#73545a\",\n    d: \"M 52.5,442.5 C 53.0722,444.255 53.9055,445.922 55,447.5C 55.1667,451.833 55.3333,456.167 55.5,460.5C 55.6745,484.134 55.3412,507.801 54.5,531.5C 54.9867,532.473 55.4867,533.473 56,534.5C 56.4998,544.161 56.6665,553.828 56.5,563.5C 53.5,563.5 50.5,563.5 47.5,563.5C 47.5604,552.957 47.5604,542.624 47.5,532.5C 48.807,530.777 48.807,528.943 47.5,527C 44.5184,526.502 41.5184,526.335 38.5,526.5C 38.6658,510.684 38.6658,495.017 38.5,479.5C 41.3809,480.274 44.0476,481.607 46.5,483.5C 46.8333,482.5 47.1667,481.5 47.5,480.5C 47.7172,469.548 47.7172,458.548 47.5,447.5C 48.2679,446.737 48.7679,445.737 49,444.5C 49.3333,445.5 49.6667,446.5 50,447.5C 50.9853,445.825 51.8186,444.158 52.5,442.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#72606a\",\n    d: \"M 180.5,452.5 C 184.659,459.485 188.326,466.818 191.5,474.5C 190.833,476.167 190.167,477.833 189.5,479.5C 189.265,478.903 188.765,478.57 188,478.5C 183.619,479.108 179.285,479.775 175,480.5C 172.699,479.133 170.199,478.466 167.5,478.5C 168.151,476.174 168.818,473.841 169.5,471.5C 168.319,466.158 168.319,460.825 169.5,455.5C 170.648,453.851 171.981,452.351 173.5,451C 174.449,450.383 175.282,450.549 176,451.5C 176.974,449.122 177.641,449.456 178,452.5C 178.77,451.402 179.603,451.402 180.5,452.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#79626c\",\n    d: \"M 84.5,429.5 C 84.8333,429.5 85.1667,429.5 85.5,429.5C 85.3632,434.194 87.6965,436.361 92.5,436C 96.3819,437.871 97.0485,440.371 94.5,443.5C 95.4617,450.108 95.7951,456.774 95.5,463.5C 92.5,463.5 89.5,463.5 86.5,463.5C 86.7683,466.119 86.435,468.619 85.5,471C 88.5535,471.179 91.5535,471.679 94.5,472.5C 94.9996,473.881 95.9996,474.547 97.5,474.5C 104.979,474.654 112.479,474.321 120,473.5C 129.784,474.125 129.617,474.959 119.5,476C 132.823,476.833 146.156,477.333 159.5,477.5C 159.5,477.833 159.5,478.167 159.5,478.5C 132.755,478.164 106.089,476.83 79.5,474.5C 79.5,473.167 79.5,471.833 79.5,470.5C 80.7942,469.71 81.9609,468.71 83,467.5C 84.42,454.894 84.92,442.228 84.5,429.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#564c53\",\n    d: \"M 295.5,472.5 C 295.539,473.583 295.873,474.583 296.5,475.5C 296.03,476.463 295.363,476.463 294.5,475.5C 293.788,473.072 292.788,470.739 291.5,468.5C 291.846,467.304 292.346,467.304 293,468.5C 293.608,470.066 294.442,471.4 295.5,472.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#74585c\",\n    d: \"M 518.5,455.5 C 517.167,455.5 515.833,455.5 514.5,455.5C 514.61,466.185 514.277,476.852 513.5,487.5C 515.833,487.5 518.167,487.5 520.5,487.5C 520.46,477.232 519.793,466.899 518.5,456.5C 521.482,456.037 524.482,455.704 527.5,455.5C 526.432,456.434 525.099,456.768 523.5,456.5C 523.819,466.749 523.486,476.916 522.5,487C 523.793,487.49 525.127,487.657 526.5,487.5C 525.7,478.402 525.867,469.402 527,460.5C 527.414,460.043 527.914,459.709 528.5,459.5C 529.364,469.152 529.364,478.819 528.5,488.5C 520.648,488.825 512.982,488.492 505.5,487.5C 507.5,487.5 509.5,487.5 511.5,487.5C 511.763,476.795 511.43,466.128 510.5,455.5C 508.395,456.991 506.228,457.658 504,457.5C 502.751,463.829 501.584,470.163 500.5,476.5C 499.833,476.5 499.5,476.167 499.5,475.5C 499.197,467.111 499.53,458.778 500.5,450.5C 505.131,449.338 509.798,449.172 514.5,450C 515.965,451.774 517.298,453.608 518.5,455.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#48434d\",\n    d: \"M 333.5,473.5 C 326.54,478.626 320.373,484.626 315,491.5C 314.617,490.944 314.117,490.611 313.5,490.5C 316.025,486.104 319.025,482.104 322.5,478.5C 323.552,478.649 324.552,478.483 325.5,478C 326.878,474.363 329.545,472.863 333.5,473.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#3a394f\",\n    d: \"M 11.5,383.5 C 11.8333,383.5 12.1667,383.5 12.5,383.5C 12.1685,415.338 12.5018,447.004 13.5,478.5C 17.8333,478.5 22.1667,478.5 26.5,478.5C 24.3926,479.468 22.0593,479.802 19.5,479.5C 18.1266,479.343 16.7932,479.51 15.5,480C 16.3081,480.308 16.9747,480.808 17.5,481.5C 16.1468,482.524 15.4802,483.857 15.5,485.5C 12.8906,485.83 11.2239,487.33 10.5,490C 11.4158,490.278 12.0825,490.778 12.5,491.5C 12.1667,491.5 11.8333,491.5 11.5,491.5C 10.1667,491.5 8.83333,491.5 7.5,491.5C 4.83333,491.5 2.16667,491.5 -0.5,491.5C -0.5,489.833 -0.5,488.167 -0.5,486.5C 1.39037,486.703 2.89037,486.037 4,484.5C 4.24912,481.608 5.41579,479.275 7.5,477.5C 7.36912,478.376 7.70245,479.043 8.5,479.5C 10.4988,464.864 10.8322,450.198 9.5,435.5C 11.3859,418.237 12.0526,400.904 11.5,383.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#947777\",\n    d: \"M 527.5,455.5 C 529.5,455.5 531.5,455.5 533.5,455.5C 534.492,455.328 535.158,455.662 535.5,456.5C 537.158,497.782 538.158,497.782 538.5,456.5C 539.652,455.375 540.652,455.375 541.5,456.5C 541.334,466.839 541.5,477.172 542,487.5C 543.474,477.331 543.974,466.998 543.5,456.5C 545.5,456.5 547.5,456.5 549.5,456.5C 549.544,467.262 550.21,477.262 551.5,486.5C 553.792,486.244 555.959,486.577 558,487.5C 559.331,477.55 559.831,467.55 559.5,457.5C 559.842,456.662 560.508,456.328 561.5,456.5C 561.5,467.167 561.5,477.833 561.5,488.5C 555.5,488.5 549.5,488.5 543.5,488.5C 538.5,488.5 533.5,488.5 528.5,488.5C 529.364,478.819 529.364,469.152 528.5,459.5C 527.914,459.709 527.414,460.043 527,460.5C 525.867,469.402 525.7,478.402 526.5,487.5C 525.127,487.657 523.793,487.49 522.5,487C 523.486,476.916 523.819,466.749 523.5,456.5C 525.099,456.768 526.432,456.434 527.5,455.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#664849\",\n    d: \"M 549.5,456.5 C 550.167,456.833 550.833,457.167 551.5,457.5C 551.5,467.167 551.5,476.833 551.5,486.5C 550.21,477.262 549.544,467.262 549.5,456.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6b4d4c\",\n    d: \"M 535.5,456.5 C 536.5,456.5 537.5,456.5 538.5,456.5C 538.158,497.782 537.158,497.782 535.5,456.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#917b7d\",\n    d: \"M 93.5,477.5 C 99.106,480.065 105.106,482.065 111.5,483.5C 111.5,482.5 111.5,481.5 111.5,480.5C 119.507,480.334 127.507,480.5 135.5,481C 136.469,485.737 136.803,490.57 136.5,495.5C 138.833,495.5 141.167,495.5 143.5,495.5C 143.5,496.5 143.5,497.5 143.5,498.5C 137.107,498.464 130.773,498.631 124.5,499C 124.833,498.667 125.167,498.333 125.5,498C 123.074,498.048 120.741,497.881 118.5,497.5C 117.304,497.846 117.304,498.346 118.5,499C 116.567,499.783 115.067,499.283 114,497.5C 113.692,498.308 113.192,498.975 112.5,499.5C 111.719,498.271 111.219,496.938 111,495.5C 110.261,496.574 109.261,497.241 108,497.5C 103.661,495.362 99.1606,495.029 94.5,496.5C 95.3094,498.071 95.6427,499.738 95.5,501.5C 97.604,501.201 99.604,501.534 101.5,502.5C 97.401,504.533 93.0677,505.533 88.5,505.5C 88.5,507.167 88.5,508.833 88.5,510.5C 88.1667,510.5 87.8333,510.5 87.5,510.5C 87.5,501.167 87.5,491.833 87.5,482.5C 89.1667,482.5 90.8333,482.5 92.5,482.5C 92.2155,480.585 92.5489,478.919 93.5,477.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#836a77\",\n    d: \"M 164.5,478.5 C 165.5,478.5 166.5,478.5 167.5,478.5C 170.199,478.466 172.699,479.133 175,480.5C 179.285,479.775 183.619,479.108 188,478.5C 188.765,478.57 189.265,478.903 189.5,479.5C 189.396,488.74 190.729,497.74 193.5,506.5C 193.631,507.239 193.464,507.906 193,508.5C 191.957,504.774 191.457,505.107 191.5,509.5C 185.242,509.81 179.076,509.476 173,508.5C 172.29,509.973 171.124,510.64 169.5,510.5C 164.556,509.674 159.556,508.507 154.5,507C 155.833,506.333 155.833,505.667 154.5,505C 150.931,504.884 149.264,503.051 149.5,499.5C 150.886,495.266 151.553,490.932 151.5,486.5C 149.897,486.688 148.563,486.188 147.5,485C 148.77,484.1 149.77,482.934 150.5,481.5C 156.783,480.706 163.116,480.206 169.5,480C 167.618,479.802 165.952,479.302 164.5,478.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#110d1b\",\n    d: \"M 255.5,521.5 C 256.269,526.644 256.935,531.811 257.5,537C 256.88,541.201 256.213,545.368 255.5,549.5C 253.167,549.5 250.833,549.5 248.5,549.5C 248.5,547.5 248.5,545.5 248.5,543.5C 247.5,543.5 246.5,543.5 245.5,543.5C 244.908,540.873 244.575,538.206 244.5,535.5C 243.5,535.5 242.5,535.5 241.5,535.5C 241.688,533.897 241.188,532.563 240,531.5C 239.5,542.161 239.333,552.828 239.5,563.5C 226.833,563.5 214.167,563.5 201.5,563.5C 200.915,558.485 200.248,553.485 199.5,548.5C 200.302,547.048 200.802,545.382 201,543.5C 201.333,546.167 201.667,548.833 202,551.5C 203.011,552.337 204.178,552.67 205.5,552.5C 205.5,553.5 205.5,554.5 205.5,555.5C 208.276,555.089 208.943,555.922 207.5,558C 208.698,560.032 210.365,561.532 212.5,562.5C 213.991,561.652 214.658,560.319 214.5,558.5C 209.757,548.453 205.757,538.12 202.5,527.5C 201.5,527.5 200.5,527.5 199.5,527.5C 199.737,526.209 199.404,525.209 198.5,524.5C 198.598,522.447 197.931,520.78 196.5,519.5C 196.451,515.922 195.785,512.589 194.5,509.5C 194.737,508.209 194.404,507.209 193.5,506.5C 190.729,497.74 189.396,488.74 189.5,479.5C 190.167,477.833 190.833,476.167 191.5,474.5C 191.833,474.5 192.167,474.5 192.5,474.5C 194.61,474.376 196.61,473.209 198.5,471C 198.167,470.667 197.833,470.333 197.5,470C 199.435,464.369 203.435,462.203 209.5,463.5C 209.297,465.39 209.963,466.89 211.5,468C 210.692,468.308 210.025,468.808 209.5,469.5C 211.767,472.578 212.1,475.911 210.5,479.5C 214.833,479.5 219.167,479.5 223.5,479.5C 224,484.868 226.5,489.201 231,492.5C 231.483,493.448 231.649,494.448 231.5,495.5C 234.167,495.5 236.833,495.5 239.5,495.5C 238.487,501.507 240.987,505.507 247,507.5C 247.49,508.793 247.657,510.127 247.5,511.5C 250.167,511.5 252.833,511.5 255.5,511.5C 255.5,514.833 255.5,518.167 255.5,521.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c0713\",\n    d: \"M 367.5,479.5 C 370.167,479.5 372.833,479.5 375.5,479.5C 375.338,481.527 375.505,483.527 376,485.5C 377.526,480.373 378.526,480.373 379,485.5C 379.333,485.167 379.667,484.833 380,484.5C 385.097,488.059 384.597,489.725 378.5,489.5C 378.238,490.978 378.571,492.311 379.5,493.5C 382.692,496.192 386.025,498.692 389.5,501C 392.882,501.176 396.215,501.676 399.5,502.5C 402.77,503.759 404.437,506.092 404.5,509.5C 407.572,509.183 410.572,509.516 413.5,510.5C 410.232,511.487 406.898,511.82 403.5,511.5C 403.5,516.833 403.5,522.167 403.5,527.5C 408.179,527.334 412.845,527.501 417.5,528C 414.833,530.333 414.833,532.667 417.5,535C 415.679,537.456 415.012,540.289 415.5,543.5C 418.167,543.5 420.833,543.5 423.5,543.5C 423.5,542.167 423.5,540.833 423.5,539.5C 424.833,539.5 426.167,539.5 427.5,539.5C 427.5,538.167 427.5,536.833 427.5,535.5C 424.728,535.405 422.728,534.071 421.5,531.5C 423.498,531.095 425.332,529.762 427,527.5C 427.5,527.667 428,527.833 428.5,528C 426.152,529.688 425.985,531.522 428,533.5C 429.017,531.624 429.851,529.624 430.5,527.5C 431.499,539.482 431.832,551.482 431.5,563.5C 406.5,563.5 381.5,563.5 356.5,563.5C 360.048,535.566 362.715,507.566 364.5,479.5C 365.5,479.5 366.5,479.5 367.5,479.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f7375\",\n    d: \"M 518.5,455.5 C 518.5,455.833 518.5,456.167 518.5,456.5C 519.793,466.899 520.46,477.232 520.5,487.5C 518.167,487.5 515.833,487.5 513.5,487.5C 514.277,476.852 514.61,466.185 514.5,455.5C 515.833,455.5 517.167,455.5 518.5,455.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#886e6c\",\n    d: \"M 559.5,457.5 C 559.831,467.55 559.331,477.55 558,487.5C 555.959,486.577 553.792,486.244 551.5,486.5C 551.5,476.833 551.5,467.167 551.5,457.5C 551.5,456.833 551.833,456.5 552.5,456.5C 553.919,455.549 555.585,455.216 557.5,455.5C 557.334,462.175 557.5,468.842 558,475.5C 558.172,469.319 558.672,463.319 559.5,457.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a18887\",\n    d: \"M 552.5,456.5 C 553.833,456.5 555.167,456.5 556.5,456.5C 556.666,462.176 556.499,467.843 556,473.5C 555.29,474.973 554.124,475.64 552.5,475.5C 552.5,469.167 552.5,462.833 552.5,456.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#665050\",\n    d: \"M 561.5,456.5 C 562.167,462.5 562.833,468.5 563.5,474.5C 563.5,479.5 563.5,484.5 563.5,489.5C 556.646,489.824 549.979,489.491 543.5,488.5C 549.5,488.5 555.5,488.5 561.5,488.5C 561.5,477.833 561.5,467.167 561.5,456.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#08070f\",\n    d: \"M 29.5,447.5 C 30.1667,447.5 30.8333,447.5 31.5,447.5C 31.5,456.5 31.5,465.5 31.5,474.5C 32.9587,474.567 34.2921,474.234 35.5,473.5C 35.8333,474.833 36.1667,476.167 36.5,477.5C 36.5,482.833 36.5,488.167 36.5,493.5C 33.5,493.5 30.5,493.5 27.5,493.5C 26.609,492.89 25.609,492.557 24.5,492.5C 22.7354,491.539 20.7354,491.205 18.5,491.5C 17.7375,490.732 16.7375,490.232 15.5,490C 18.6331,490.046 21.2998,489.046 23.5,487C 26.146,486.503 28.8127,486.336 31.5,486.5C 31.5,485.167 31.5,483.833 31.5,482.5C 27.0184,482.966 23.0184,481.966 19.5,479.5C 22.0593,479.802 24.3926,479.468 26.5,478.5C 27.5375,477.07 28.2041,475.403 28.5,473.5C 28.464,464.815 28.7974,456.149 29.5,447.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#84666d\",\n    d: \"M 505.5,487.5 C 503.833,487.5 502.167,487.5 500.5,487.5C 500.5,483.833 500.5,480.167 500.5,476.5C 501.584,470.163 502.751,463.829 504,457.5C 506.228,457.658 508.395,456.991 510.5,455.5C 511.43,466.128 511.763,476.795 511.5,487.5C 509.5,487.5 507.5,487.5 505.5,487.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#483130\",\n    d: \"M 541.5,456.5 C 542.167,456.5 542.833,456.5 543.5,456.5C 543.974,466.998 543.474,477.331 542,487.5C 541.5,477.172 541.334,466.839 541.5,456.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#121121\",\n    d: \"M 19.5,479.5 C 23.0184,481.966 27.0184,482.966 31.5,482.5C 31.5,483.833 31.5,485.167 31.5,486.5C 28.8127,486.336 26.146,486.503 23.5,487C 21.2998,489.046 18.6331,490.046 15.5,490C 16.7375,490.232 17.7375,490.732 18.5,491.5C 16.5,491.5 14.5,491.5 12.5,491.5C 12.0825,490.778 11.4158,490.278 10.5,490C 11.2239,487.33 12.8906,485.83 15.5,485.5C 15.4802,483.857 16.1468,482.524 17.5,481.5C 16.9747,480.808 16.3081,480.308 15.5,480C 16.7932,479.51 18.1266,479.343 19.5,479.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#776b70\",\n    d: \"M 270.5,472.5 C 271.465,473.721 271.298,475.054 270,476.5C 266.081,482.67 262.414,489.003 259,495.5C 258.346,496.696 257.846,496.696 257.5,495.5C 258.925,492.312 260.592,489.312 262.5,486.5C 265.167,481.833 267.833,477.167 270.5,472.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5e4649\",\n    d: \"M 87.5,482.5 C 87.5,491.833 87.5,501.167 87.5,510.5C 86.5,510.5 85.5,510.5 84.5,510.5C 84.8333,509.833 85.1667,509.167 85.5,508.5C 84.8636,499.435 85.5302,490.769 87.5,482.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#a99fa5\",\n    d: \"M 275.5,464.5 C 275.833,465.5 276.5,466.167 277.5,466.5C 278.785,468.452 280.451,470.118 282.5,471.5C 284.434,471.099 285.934,470.099 287,468.5C 287.986,470.778 288.82,473.111 289.5,475.5C 289.062,476.506 288.396,476.506 287.5,475.5C 286.749,474.624 286.249,473.624 286,472.5C 285.506,474.134 285.34,475.801 285.5,477.5C 284.196,476.013 283.03,474.346 282,472.5C 281.487,473.527 280.987,474.527 280.5,475.5C 276.873,483.103 272.873,490.437 268.5,497.5C 266.076,500.656 263.409,503.656 260.5,506.5C 255.802,502.492 251.135,498.492 246.5,494.5C 247.289,494.217 247.956,493.717 248.5,493C 246.663,490.858 246.329,488.691 247.5,486.5C 248.216,487.311 249.05,487.978 250,488.5C 251.136,487.217 252.469,486.217 254,485.5C 254.945,485.905 255.612,486.572 256,487.5C 255.954,484.367 256.954,481.7 259,479.5C 259.004,481.368 258.504,483.202 257.5,485C 257.833,485.5 258.167,486 258.5,486.5C 259.671,484.158 260.838,481.824 262,479.5C 262.756,481.809 262.256,483.809 260.5,485.5C 260.957,486.298 261.624,486.631 262.5,486.5C 260.592,489.312 258.925,492.312 257.5,495.5C 257.846,496.696 258.346,496.696 259,495.5C 262.414,489.003 266.081,482.67 270,476.5C 271.298,475.054 271.465,473.721 270.5,472.5C 270.232,470.901 270.566,469.568 271.5,468.5C 271.81,469.738 272.31,469.738 273,468.5C 273.608,466.934 274.442,465.6 275.5,464.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5d5159\",\n    d: \"M 308.5,499.5 C 308.068,500.71 307.401,501.71 306.5,502.5C 304.22,494.973 301.72,487.64 299,480.5C 302.228,486.956 305.395,493.29 308.5,499.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#684d47\",\n    d: \"M 480.5,495.5 C 480.5,518.167 480.5,540.833 480.5,563.5C 472.833,563.5 465.167,563.5 457.5,563.5C 456.828,560.657 455.495,558.157 453.5,556C 455.741,554.478 458.074,553.145 460.5,552C 459.207,551.51 457.873,551.343 456.5,551.5C 456.33,549.152 455.997,546.818 455.5,544.5C 457.087,533.471 458.753,522.471 460.5,511.5C 461.5,511.5 462.5,511.5 463.5,511.5C 463.5,506.167 463.5,500.833 463.5,495.5C 453.016,494.518 453.016,493.685 463.5,493C 462.167,492.667 460.833,492.333 459.5,492C 466.158,491.5 472.825,491.334 479.5,491.5C 479.232,493.099 479.566,494.432 480.5,495.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f787f\",\n    d: \"M 79.5,474.5 C 106.089,476.83 132.755,478.164 159.5,478.5C 161.167,478.5 162.833,478.5 164.5,478.5C 165.952,479.302 167.618,479.802 169.5,480C 163.116,480.206 156.783,480.706 150.5,481.5C 149.77,482.934 148.77,484.1 147.5,485C 148.563,486.188 149.897,486.688 151.5,486.5C 151.553,490.932 150.886,495.266 149.5,499.5C 149.264,503.051 150.931,504.884 154.5,505C 155.833,505.667 155.833,506.333 154.5,507C 159.556,508.507 164.556,509.674 169.5,510.5C 147.5,510.5 125.5,510.5 103.5,510.5C 98.5,510.5 93.5,510.5 88.5,510.5C 88.5,508.833 88.5,507.167 88.5,505.5C 93.0677,505.533 97.401,504.533 101.5,502.5C 99.604,501.534 97.604,501.201 95.5,501.5C 95.6427,499.738 95.3094,498.071 94.5,496.5C 99.1606,495.029 103.661,495.362 108,497.5C 109.261,497.241 110.261,496.574 111,495.5C 111.219,496.938 111.719,498.271 112.5,499.5C 113.192,498.975 113.692,498.308 114,497.5C 115.067,499.283 116.567,499.783 118.5,499C 117.304,498.346 117.304,497.846 118.5,497.5C 120.741,497.881 123.074,498.048 125.5,498C 125.167,498.333 124.833,498.667 124.5,499C 130.773,498.631 137.107,498.464 143.5,498.5C 143.5,497.5 143.5,496.5 143.5,495.5C 141.167,495.5 138.833,495.5 136.5,495.5C 136.803,490.57 136.469,485.737 135.5,481C 127.507,480.5 119.507,480.334 111.5,480.5C 111.5,481.5 111.5,482.5 111.5,483.5C 105.106,482.065 99.106,480.065 93.5,477.5C 91.7354,476.539 89.7354,476.205 87.5,476.5C 87.5,478.5 87.5,480.5 87.5,482.5C 85.5302,490.769 84.8636,499.435 85.5,508.5C 83.1916,504.953 82.0249,500.953 82,496.5C 81.586,496.957 81.086,497.291 80.5,497.5C 79.5041,491.537 79.1707,485.537 79.5,479.5C 79.5,477.833 79.5,476.167 79.5,474.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#b59fa2\",\n    d: \"M 93.5,477.5 C 92.5489,478.919 92.2155,480.585 92.5,482.5C 90.8333,482.5 89.1667,482.5 87.5,482.5C 87.5,480.5 87.5,478.5 87.5,476.5C 89.7354,476.205 91.7354,476.539 93.5,477.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5b4642\",\n    d: \"M 455.5,490.5 C 463.833,490.5 472.167,490.5 480.5,490.5C 480.5,492.167 480.5,493.833 480.5,495.5C 479.566,494.432 479.232,493.099 479.5,491.5C 472.825,491.334 466.158,491.5 459.5,492C 460.833,492.333 462.167,492.667 463.5,493C 453.016,493.685 453.016,494.518 463.5,495.5C 463.5,500.833 463.5,506.167 463.5,511.5C 462.5,511.5 461.5,511.5 460.5,511.5C 458.753,522.471 457.087,533.471 455.5,544.5C 455.997,546.818 456.33,549.152 456.5,551.5C 457.873,551.343 459.207,551.51 460.5,552C 458.074,553.145 455.741,554.478 453.5,556C 455.495,558.157 456.828,560.657 457.5,563.5C 450.5,563.5 443.5,563.5 436.5,563.5C 436.333,548.83 436.5,534.163 437,519.5C 438.762,516.424 438.929,513.258 437.5,510C 439.11,505.349 440.277,500.516 441,495.5C 441.5,493.667 442.667,492.5 444.5,492C 448.356,491.823 452.023,491.323 455.5,490.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#464763\",\n    d: \"M 24.5,492.5 C 25.609,492.557 26.609,492.89 27.5,493.5C 29.5994,494.612 31.9327,495.279 34.5,495.5C 34.6119,518.185 35.2786,540.852 36.5,563.5C 33.1667,563.5 29.8333,563.5 26.5,563.5C 26.3339,557.824 26.5006,552.157 27,546.5C 27.6667,547.833 28.3333,549.167 29,550.5C 29.6667,545.833 29.6667,541.167 29,536.5C 28.0853,537.328 27.4186,538.328 27,539.5C 26.5012,535.514 26.3345,531.514 26.5,527.5C 25.5,527.5 24.5,527.5 23.5,527.5C 23.7581,517.793 23.0914,508.293 21.5,499C 22.6039,496.755 23.6039,494.589 24.5,492.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#1c141b\",\n    d: \"M 505.5,494.5 C 509.625,496.026 513.959,497.026 518.5,497.5C 522.803,496.751 527.136,496.918 531.5,498C 530.167,498.333 528.833,498.667 527.5,499C 533.695,499.164 539.862,498.664 546,497.5C 547.366,497.706 548.699,498.04 550,498.5C 554.452,497.18 558.952,496.18 563.5,495.5C 563.5,497.5 563.5,499.5 563.5,501.5C 560.833,501.5 558.167,501.5 555.5,501.5C 540.519,500.623 525.519,500.29 510.5,500.5C 510.5,500.167 510.5,499.833 510.5,499.5C 509.599,497.273 507.933,496.273 505.5,496.5C 505.5,495.833 505.5,495.167 505.5,494.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#28242e\",\n    d: \"M 285.5,477.5 C 285.328,478.492 285.662,479.158 286.5,479.5C 289.883,487.311 292.883,495.311 295.5,503.5C 294.542,503.047 293.708,502.381 293,501.5C 290.333,494.833 287.667,488.167 285,481.5C 284.208,478.894 282.708,476.894 280.5,475.5C 280.987,474.527 281.487,473.527 282,472.5C 283.03,474.346 284.196,476.013 285.5,477.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#936e72\",\n    d: \"M 555.5,501.5 C 558.167,501.5 560.833,501.5 563.5,501.5C 563.5,522.167 563.5,542.833 563.5,563.5C 560.833,563.5 558.167,563.5 555.5,563.5C 555.5,542.833 555.5,522.167 555.5,501.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8a7e91\",\n    d: \"M 11.5,491.5 C 11.8333,491.5 12.1667,491.5 12.5,491.5C 14.5,491.5 16.5,491.5 18.5,491.5C 18.5,515.5 18.5,539.5 18.5,563.5C 16.5,563.5 14.5,563.5 12.5,563.5C 10.4777,539.503 10.1443,515.503 11.5,491.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#271d1f\",\n    d: \"M 435.5,489.5 C 450.676,489.171 465.676,489.504 480.5,490.5C 472.167,490.5 463.833,490.5 455.5,490.5C 448.825,490.334 442.158,490.5 435.5,491C 435,491.5 434.5,492 434,492.5C 433.5,516.164 433.333,539.831 433.5,563.5C 433.167,563.5 432.833,563.5 432.5,563.5C 432.333,539.498 432.5,515.498 433,491.5C 433.708,490.619 434.542,489.953 435.5,489.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6c4f4a\",\n    d: \"M 505.5,494.5 C 505.5,495.167 505.5,495.833 505.5,496.5C 505.5,501.5 505.5,506.5 505.5,511.5C 504.167,511.5 502.833,511.5 501.5,511.5C 501.85,517.004 501.183,522.337 499.5,527.5C 498.167,527.5 496.833,527.5 495.5,527.5C 495.5,539.5 495.5,551.5 495.5,563.5C 493.5,563.5 491.5,563.5 489.5,563.5C 489.5,539.167 489.5,514.833 489.5,490.5C 494.482,491.053 499.482,491.387 504.5,491.5C 504.263,492.791 504.596,493.791 505.5,494.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#09070f\",\n    d: \"M 204.5,455.5 C 204.833,455.5 205.167,455.5 205.5,455.5C 209.587,459.922 214.254,463.589 219.5,466.5C 219.842,467.338 220.508,467.672 221.5,467.5C 227.372,478.708 235.705,487.708 246.5,494.5C 251.135,498.492 255.802,502.492 260.5,506.5C 263.409,503.656 266.076,500.656 268.5,497.5C 269.398,498.158 270.398,498.824 271.5,499.5C 276.792,500.495 282.125,500.828 287.5,500.5C 287.5,504.167 287.5,507.833 287.5,511.5C 278.827,511.666 270.16,511.5 261.5,511C 260.667,510.167 259.833,509.333 259,508.5C 257.087,513.125 257.921,517.292 261.5,521C 259.864,523.717 260.197,526.05 262.5,528C 261.529,533.072 261.195,538.238 261.5,543.5C 263.924,543.192 266.257,543.526 268.5,544.5C 268.069,545.293 267.735,546.127 267.5,547C 269.353,552.388 270.686,557.888 271.5,563.5C 269.833,563.5 268.167,563.5 266.5,563.5C 265.992,558.457 265.158,553.457 264,548.5C 262.418,547.04 261.085,545.373 260,543.5C 259.399,537.16 258.733,530.826 258,524.5C 257.623,523.058 256.79,522.058 255.5,521.5C 255.5,518.167 255.5,514.833 255.5,511.5C 252.833,511.5 250.167,511.5 247.5,511.5C 247.657,510.127 247.49,508.793 247,507.5C 240.987,505.507 238.487,501.507 239.5,495.5C 236.833,495.5 234.167,495.5 231.5,495.5C 231.649,494.448 231.483,493.448 231,492.5C 226.5,489.201 224,484.868 223.5,479.5C 219.167,479.5 214.833,479.5 210.5,479.5C 212.1,475.911 211.767,472.578 209.5,469.5C 210.025,468.808 210.692,468.308 211.5,468C 209.963,466.89 209.297,465.39 209.5,463.5C 203.435,462.203 199.435,464.369 197.5,470C 197.833,470.333 198.167,470.667 198.5,471C 196.61,473.209 194.61,474.376 192.5,474.5C 196.25,467.998 200.25,461.665 204.5,455.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#574952\",\n    d: \"M 193.5,506.5 C 194.404,507.209 194.737,508.209 194.5,509.5C 194.5,510.833 194.5,512.167 194.5,513.5C 186.799,513.309 179.132,513.642 171.5,514.5C 171.5,513.5 171.5,512.5 171.5,511.5C 143.503,512.277 115.503,512.443 87.5,512C 93.0158,511.827 98.3491,511.327 103.5,510.5C 125.5,510.5 147.5,510.5 169.5,510.5C 171.124,510.64 172.29,509.973 173,508.5C 179.076,509.476 185.242,509.81 191.5,509.5C 191.457,505.107 191.957,504.774 193,508.5C 193.464,507.906 193.631,507.239 193.5,506.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9b8d99\",\n    d: \"M 7.5,491.5 C 8.83333,491.5 10.1667,491.5 11.5,491.5C 10.1443,515.503 10.4777,539.503 12.5,563.5C 10.5,563.5 8.5,563.5 6.5,563.5C 5.51823,540.014 5.1849,516.681 5.5,493.5C 6.24269,492.818 6.90935,492.151 7.5,491.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4c4356\",\n    d: \"M 27.5,493.5 C 30.5,493.5 33.5,493.5 36.5,493.5C 35.8564,504.884 36.523,515.884 38.5,526.5C 38.4828,528.565 38.1495,530.565 37.5,532.5C 37.5,542.833 37.5,553.167 37.5,563.5C 37.1667,563.5 36.8333,563.5 36.5,563.5C 35.2786,540.852 34.6119,518.185 34.5,495.5C 31.9327,495.279 29.5994,494.612 27.5,493.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#070611\",\n    d: \"M 487.5,563.5 C 485.833,563.5 484.167,563.5 482.5,563.5C 482.5,540.833 482.5,518.167 482.5,495.5C 484.167,495.5 485.833,495.5 487.5,495.5C 487.5,518.167 487.5,540.833 487.5,563.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#2e2c39\",\n    d: \"M 73.5,476.5 C 74.1667,476.5 74.8333,476.5 75.5,476.5C 75.17,494.008 75.5033,511.341 76.5,528.5C 76.5,540.167 76.5,551.833 76.5,563.5C 75.8333,563.5 75.1667,563.5 74.5,563.5C 74.6663,556.825 74.4996,550.158 74,543.5C 73.6667,548.833 73.3333,554.167 73,559.5C 72.5978,551.429 71.7645,543.429 70.5,535.5C 71.9828,523.326 72.9828,510.993 73.5,498.5C 71.8205,492.368 71.1538,486.034 71.5,479.5C 72.552,479.649 73.552,479.483 74.5,479C 73.7476,478.329 73.4142,477.496 73.5,476.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0f0910\",\n    d: \"M 84.5,510.5 C 85.5,510.5 86.5,510.5 87.5,510.5C 87.8333,510.5 88.1667,510.5 88.5,510.5C 93.5,510.5 98.5,510.5 103.5,510.5C 98.3491,511.327 93.0158,511.827 87.5,512C 115.503,512.443 143.503,512.277 171.5,511.5C 171.5,512.5 171.5,513.5 171.5,514.5C 171.5,515.833 171.5,517.167 171.5,518.5C 163.833,518.5 156.167,518.5 148.5,518.5C 128.167,518.5 107.833,518.5 87.5,518.5C 87.1667,518.5 86.8333,518.5 86.5,518.5C 86.1667,518.5 85.8333,518.5 85.5,518.5C 84.612,515.946 84.2786,513.279 84.5,510.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#483a3e\",\n    d: \"M 194.5,509.5 C 195.785,512.589 196.451,515.922 196.5,519.5C 195.292,520.234 193.959,520.567 192.5,520.5C 185.5,519.833 178.5,519.167 171.5,518.5C 171.5,517.167 171.5,515.833 171.5,514.5C 179.132,513.642 186.799,513.309 194.5,513.5C 194.5,512.167 194.5,510.833 194.5,509.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6d5b63\",\n    d: \"M 87.5,518.5 C 107.833,518.5 128.167,518.5 148.5,518.5C 148.5,518.833 148.5,519.167 148.5,519.5C 141.833,519.833 141.833,520.167 148.5,520.5C 149.255,529.307 149.588,538.307 149.5,547.5C 147.142,547.253 145.142,547.919 143.5,549.5C 143.665,546.15 143.498,542.817 143,539.5C 141.915,538.264 141.082,536.931 140.5,535.5C 140.142,532.102 140.808,528.935 142.5,526C 141.746,522.912 140.58,522.746 139,525.5C 137.03,524.877 135.03,523.877 133,522.5C 123.748,522.905 114.415,522.238 105,520.5C 102.047,522.851 99.2136,522.851 96.5,520.5C 95.5713,521.689 95.238,523.022 95.5,524.5C 94.5,524.5 93.5,524.5 92.5,524.5C 92.5,530.833 92.5,537.167 92.5,543.5C 91.6787,540.359 91.1787,537.025 91,533.5C 90.6667,534.167 90.3333,534.833 90,535.5C 89.0011,529.814 88.1678,524.147 87.5,518.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#74534d\",\n    d: \"M 505.5,496.5 C 507.933,496.273 509.599,497.273 510.5,499.5C 508.501,500.857 507.335,500.19 507,497.5C 506.5,519.497 506.333,541.497 506.5,563.5C 502.833,563.5 499.167,563.5 495.5,563.5C 495.5,551.5 495.5,539.5 495.5,527.5C 496.833,527.5 498.167,527.5 499.5,527.5C 501.183,522.337 501.85,517.004 501.5,511.5C 502.833,511.5 504.167,511.5 505.5,511.5C 505.5,506.5 505.5,501.5 505.5,496.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#aa9b9e\",\n    d: \"M -0.5,491.5 C 2.16667,491.5 4.83333,491.5 7.5,491.5C 6.90935,492.151 6.24269,492.818 5.5,493.5C 5.1849,516.681 5.51823,540.014 6.5,563.5C 4.16667,563.5 1.83333,563.5 -0.5,563.5C -0.5,539.5 -0.5,515.5 -0.5,491.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b4a63\",\n    d: \"M 18.5,491.5 C 20.7354,491.205 22.7354,491.539 24.5,492.5C 23.6039,494.589 22.6039,496.755 21.5,499C 23.0914,508.293 23.7581,517.793 23.5,527.5C 24.5,527.5 25.5,527.5 26.5,527.5C 26.3345,531.514 26.5012,535.514 27,539.5C 27.4186,538.328 28.0853,537.328 29,536.5C 29.6667,541.167 29.6667,545.833 29,550.5C 28.3333,549.167 27.6667,547.833 27,546.5C 26.5006,552.157 26.3339,557.824 26.5,563.5C 23.8333,563.5 21.1667,563.5 18.5,563.5C 18.5,539.5 18.5,515.5 18.5,491.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#322935\",\n    d: \"M 58.5,475.5 C 58.8333,475.5 59.1667,475.5 59.5,475.5C 61.8292,504.631 63.1626,533.965 63.5,563.5C 61.8333,563.5 60.1667,563.5 58.5,563.5C 58.5,534.167 58.5,504.833 58.5,475.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6b5155\",\n    d: \"M 86.5,518.5 C 86.8333,518.5 87.1667,518.5 87.5,518.5C 88.1678,524.147 89.0011,529.814 90,535.5C 90.3333,534.833 90.6667,534.167 91,533.5C 91.1787,537.025 91.6787,540.359 92.5,543.5C 92.6602,545.199 92.4935,546.866 92,548.5C 90.3539,549.779 89.1872,551.445 88.5,553.5C 88.1667,552.667 87.8333,551.833 87.5,551C 86.5565,540.195 86.2232,529.362 86.5,518.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#726271\",\n    d: \"M 140.5,535.5 C 138.511,536.481 136.511,537.481 134.5,538.5C 130.541,536.853 126.875,534.686 123.5,532C 112.701,528.153 108.367,531.986 110.5,543.5C 107.505,545.243 104.171,546.243 100.5,546.5C 99.5,546.5 98.5,546.5 97.5,546.5C 98.1299,538.757 97.4633,531.424 95.5,524.5C 95.238,523.022 95.5713,521.689 96.5,520.5C 99.2136,522.851 102.047,522.851 105,520.5C 114.415,522.238 123.748,522.905 133,522.5C 135.03,523.877 137.03,524.877 139,525.5C 140.58,522.746 141.746,522.912 142.5,526C 140.808,528.935 140.142,532.102 140.5,535.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#685150\",\n    d: \"M 148.5,519.5 C 153.695,519.179 158.695,519.513 163.5,520.5C 163.5,530.833 163.5,541.167 163.5,551.5C 161.836,552.743 160.669,554.41 160,556.5C 159.517,555.552 159.351,554.552 159.5,553.5C 154.572,554.854 149.572,555.354 144.5,555C 142.598,553.606 142.265,551.773 143.5,549.5C 145.142,547.919 147.142,547.253 149.5,547.5C 149.588,538.307 149.255,529.307 148.5,520.5C 141.833,520.167 141.833,519.833 148.5,519.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#8f686d\",\n    d: \"M 510.5,500.5 C 525.519,500.29 540.519,500.623 555.5,501.5C 555.5,522.167 555.5,542.833 555.5,563.5C 540.833,563.5 526.167,563.5 511.5,563.5C 511.333,542.497 511,521.497 510.5,500.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#533e40\",\n    d: \"M 38.5,526.5 C 41.5184,526.335 44.5184,526.502 47.5,527C 48.807,528.943 48.807,530.777 47.5,532.5C 44.1667,532.5 40.8333,532.5 37.5,532.5C 38.1495,530.565 38.4828,528.565 38.5,526.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#665660\",\n    d: \"M 196.5,519.5 C 197.931,520.78 198.598,522.447 198.5,524.5C 197.577,528.064 197.244,531.731 197.5,535.5C 196.732,536.263 196.232,537.263 196,538.5C 195.957,535.783 194.957,535.116 193,536.5C 187.872,535.741 182.705,535.241 177.5,535C 175.709,532.894 175.042,530.394 175.5,527.5C 180.833,527.5 186.167,527.5 191.5,527.5C 191.67,526.178 191.337,525.011 190.5,524C 185.115,523.786 179.781,523.286 174.5,522.5C 173.914,522.709 173.414,523.043 173,523.5C 173.489,527.412 173.989,531.412 174.5,535.5C 174.399,538.7 173.732,541.7 172.5,544.5C 173.986,546.302 174.986,548.302 175.5,550.5C 179.5,550.833 179.5,551.167 175.5,551.5C 175.5,553.5 175.5,555.5 175.5,557.5C 181.271,556.887 186.604,557.554 191.5,559.5C 184.125,560.142 176.791,559.808 169.5,558.5C 171.317,546.875 172.15,534.875 172,522.5C 178.932,521.85 185.766,521.183 192.5,520.5C 193.959,520.567 195.292,520.234 196.5,519.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4e3a3d\",\n    d: \"M 57.5,475.5 C 57.8333,475.5 58.1667,475.5 58.5,475.5C 58.5,504.833 58.5,534.167 58.5,563.5C 57.8333,563.5 57.1667,563.5 56.5,563.5C 56.6665,553.828 56.4998,544.161 56,534.5C 55.4867,533.473 54.9867,532.473 54.5,531.5C 56.045,530.77 56.8784,529.437 57,527.5C 57.4999,510.17 57.6666,492.837 57.5,475.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#584447\",\n    d: \"M 85.5,518.5 C 85.8333,518.5 86.1667,518.5 86.5,518.5C 86.2232,529.362 86.5565,540.195 87.5,551C 87.8333,551.833 88.1667,552.667 88.5,553.5C 89.1872,551.445 90.3539,549.779 92,548.5C 92.4935,546.866 92.6602,545.199 92.5,543.5C 92.5,537.167 92.5,530.833 92.5,524.5C 93.5,524.5 94.5,524.5 95.5,524.5C 97.4633,531.424 98.1299,538.757 97.5,546.5C 98.5,546.5 99.5,546.5 100.5,546.5C 100.5,547.5 100.5,548.5 100.5,549.5C 98.1843,550.16 95.851,550.827 93.5,551.5C 91.8247,551.868 90.8247,552.868 90.5,554.5C 88.8333,554.5 87.1667,554.5 85.5,554.5C 85.5,542.5 85.5,530.5 85.5,518.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4f3d3e\",\n    d: \"M 455.5,490.5 C 452.023,491.323 448.356,491.823 444.5,492C 442.667,492.5 441.5,493.667 441,495.5C 440.277,500.516 439.11,505.349 437.5,510C 438.929,513.258 438.762,516.424 437,519.5C 436.5,534.163 436.333,548.83 436.5,563.5C 435.5,563.5 434.5,563.5 433.5,563.5C 433.333,539.831 433.5,516.164 434,492.5C 434.5,492 435,491.5 435.5,491C 442.158,490.5 448.825,490.334 455.5,490.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0a0712\",\n    d: \"M 198.5,524.5 C 199.404,525.209 199.737,526.209 199.5,527.5C 200.5,527.5 201.5,527.5 202.5,527.5C 205.757,538.12 209.757,548.453 214.5,558.5C 214.658,560.319 213.991,561.652 212.5,562.5C 210.365,561.532 208.698,560.032 207.5,558C 208.943,555.922 208.276,555.089 205.5,555.5C 205.5,554.5 205.5,553.5 205.5,552.5C 204.178,552.67 203.011,552.337 202,551.5C 201.667,548.833 201.333,546.167 201,543.5C 200.802,545.382 200.302,547.048 199.5,548.5C 198.752,544.188 198.086,539.854 197.5,535.5C 197.244,531.731 197.577,528.064 198.5,524.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#9f7977\",\n    d: \"M 510.5,499.5 C 510.5,499.833 510.5,500.167 510.5,500.5C 511,521.497 511.333,542.497 511.5,563.5C 509.833,563.5 508.167,563.5 506.5,563.5C 506.333,541.497 506.5,519.497 507,497.5C 507.335,500.19 508.501,500.857 510.5,499.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#0c0815\",\n    d: \"M 255.5,521.5 C 256.79,522.058 257.623,523.058 258,524.5C 258.733,530.826 259.399,537.16 260,543.5C 261.085,545.373 262.418,547.04 264,548.5C 265.158,553.457 265.992,558.457 266.5,563.5C 257.5,563.5 248.5,563.5 239.5,563.5C 239.333,552.828 239.5,542.161 240,531.5C 241.188,532.563 241.688,533.897 241.5,535.5C 242.5,535.5 243.5,535.5 244.5,535.5C 244.575,538.206 244.908,540.873 245.5,543.5C 246.5,543.5 247.5,543.5 248.5,543.5C 248.5,545.5 248.5,547.5 248.5,549.5C 250.833,549.5 253.167,549.5 255.5,549.5C 256.213,545.368 256.88,541.201 257.5,537C 256.935,531.811 256.269,526.644 255.5,521.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#23161b\",\n    d: \"M 121.5,547.5 C 120.127,547.657 118.793,547.49 117.5,547C 118.416,546.722 119.082,546.222 119.5,545.5C 126.38,544.157 132.88,541.824 139,538.5C 141.176,539.516 142.343,541.182 142.5,543.5C 135.462,544.574 128.462,545.907 121.5,547.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#67514e\",\n    d: \"M 37.5,532.5 C 40.8333,532.5 44.1667,532.5 47.5,532.5C 47.5604,542.624 47.5604,552.957 47.5,563.5C 44.1667,563.5 40.8333,563.5 37.5,563.5C 37.5,553.167 37.5,542.833 37.5,532.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#6b5d6c\",\n    d: \"M 197.5,535.5 C 198.086,539.854 198.752,544.188 199.5,548.5C 200.248,553.485 200.915,558.485 201.5,563.5C 200.5,563.5 199.5,563.5 198.5,563.5C 197.145,560.482 194.812,559.149 191.5,559.5C 186.604,557.554 181.271,556.887 175.5,557.5C 175.5,555.5 175.5,553.5 175.5,551.5C 179.5,551.167 179.5,550.833 175.5,550.5C 174.986,548.302 173.986,546.302 172.5,544.5C 173.732,541.7 174.399,538.7 174.5,535.5C 173.989,531.412 173.489,527.412 173,523.5C 173.414,523.043 173.914,522.709 174.5,522.5C 179.781,523.286 185.115,523.786 190.5,524C 191.337,525.011 191.67,526.178 191.5,527.5C 186.167,527.5 180.833,527.5 175.5,527.5C 175.042,530.394 175.709,532.894 177.5,535C 182.705,535.241 187.872,535.741 193,536.5C 194.957,535.116 195.957,535.783 196,538.5C 196.232,537.263 196.732,536.263 197.5,535.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#816976\",\n    d: \"M 76.5,476.5 C 77.1001,477.9 78.1001,478.9 79.5,479.5C 79.1707,485.537 79.5041,491.537 80.5,497.5C 81.086,497.291 81.586,496.957 82,496.5C 82.0249,500.953 83.1916,504.953 85.5,508.5C 85.1667,509.167 84.8333,509.833 84.5,510.5C 84.2786,513.279 84.612,515.946 85.5,518.5C 85.5,530.5 85.5,542.5 85.5,554.5C 87.1667,554.5 88.8333,554.5 90.5,554.5C 91.8333,554.5 93.1667,554.5 94.5,554.5C 108.672,555.167 123.006,555.833 137.5,556.5C 131.528,557.33 125.528,557.83 119.5,558C 136.163,558.5 152.83,558.667 169.5,558.5C 176.791,559.808 184.125,560.142 191.5,559.5C 194.812,559.149 197.145,560.482 198.5,563.5C 157.833,563.5 117.167,563.5 76.5,563.5C 76.5,551.833 76.5,540.167 76.5,528.5C 76.5,511.167 76.5,493.833 76.5,476.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#47383d\",\n    d: \"M 110.5,543.5 C 113.145,545.242 116.145,545.909 119.5,545.5C 119.082,546.222 118.416,546.722 117.5,547C 118.793,547.49 120.127,547.657 121.5,547.5C 120.192,548.232 118.858,549.066 117.5,550C 118.833,550.667 118.833,551.333 117.5,552C 118.167,552.333 118.833,552.667 119.5,553C 126.856,553.169 134.189,553.669 141.5,554.5C 141,554.833 140.5,555.167 140,555.5C 130.207,554.537 120.374,554.204 110.5,554.5C 110.658,552.179 111.658,550.346 113.5,549C 110.812,548.608 108.145,548.108 105.5,547.5C 103.944,548.547 102.277,549.214 100.5,549.5C 100.5,548.5 100.5,547.5 100.5,546.5C 104.171,546.243 107.505,545.243 110.5,543.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#180f1a\",\n    d: \"M 110.5,554.5 C 105.167,554.5 99.8333,554.5 94.5,554.5C 93.1667,554.5 91.8333,554.5 90.5,554.5C 90.8247,552.868 91.8247,551.868 93.5,551.5C 95.851,550.827 98.1843,550.16 100.5,549.5C 102.277,549.214 103.944,548.547 105.5,547.5C 108.145,548.108 110.812,548.608 113.5,549C 111.658,550.346 110.658,552.179 110.5,554.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#4b3838\",\n    d: \"M 163.5,520.5 C 165.344,522.279 166.01,524.612 165.5,527.5C 166.5,527.5 167.5,527.5 168.5,527.5C 168.175,537.594 168.842,547.594 170.5,557.5C 167.482,557.665 164.482,557.498 161.5,557C 163.192,555.599 163.859,553.766 163.5,551.5C 163.5,541.167 163.5,530.833 163.5,520.5 Z\"\n  })), /*#__PURE__*/React.createElement(\"g\", null, /*#__PURE__*/React.createElement(\"path\", {\n    style: {\n      opacity: 1\n    },\n    fill: \"#5c4a4c\",\n    d: \"M 148.5,519.5 C 148.5,519.167 148.5,518.833 148.5,518.5C 156.167,518.5 163.833,518.5 171.5,518.5C 178.5,519.167 185.5,519.833 192.5,520.5C 185.766,521.183 178.932,521.85 172,522.5C 172.15,534.875 171.317,546.875 169.5,558.5C 152.83,558.667 136.163,558.5 119.5,558C 125.528,557.83 131.528,557.33 137.5,556.5C 123.006,555.833 108.672,555.167 94.5,554.5C 99.8333,554.5 105.167,554.5 110.5,554.5C 120.374,554.204 130.207,554.537 140,555.5C 140.5,555.167 141,554.833 141.5,554.5C 134.189,553.669 126.856,553.169 119.5,553C 118.833,552.667 118.167,552.333 117.5,552C 118.833,551.333 118.833,550.667 117.5,550C 118.858,549.066 120.192,548.232 121.5,547.5C 128.462,545.907 135.462,544.574 142.5,543.5C 142.343,541.182 141.176,539.516 139,538.5C 132.88,541.824 126.38,544.157 119.5,545.5C 116.145,545.909 113.145,545.242 110.5,543.5C 108.367,531.986 112.701,528.153 123.5,532C 126.875,534.686 130.541,536.853 134.5,538.5C 136.511,537.481 138.511,536.481 140.5,535.5C 141.082,536.931 141.915,538.264 143,539.5C 143.498,542.817 143.665,546.15 143.5,549.5C 142.265,551.773 142.598,553.606 144.5,555C 149.572,555.354 154.572,554.854 159.5,553.5C 159.351,554.552 159.517,555.552 160,556.5C 160.669,554.41 161.836,552.743 163.5,551.5C 163.859,553.766 163.192,555.599 161.5,557C 164.482,557.498 167.482,557.665 170.5,557.5C 168.842,547.594 168.175,537.594 168.5,527.5C 167.5,527.5 166.5,527.5 165.5,527.5C 166.01,524.612 165.344,522.279 163.5,520.5C 158.695,519.513 153.695,519.179 148.5,519.5 Z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgAbout);\nexport default __webpack_public_path__ + \"static/media/about.8762d0d518c6e9bc6926c967e0a2ed0d.svg\";\nexport { ForwardRef as ReactComponent };","import { useEffect, useRef } from \"react\"\r\nimport ScrollReveal from \"scrollreveal\"\r\nimport Navbar from \"../navbar\";\r\nimport aboutImage from \"../../assets/images/about.svg\";\r\n\r\nexport default function AboutMain() {\r\n\r\n    const revealRef1 = useRef(null);\r\n    const revealRef2 = useRef(null);\r\n\r\n    useEffect( () => {\r\n        ScrollReveal().reveal( revealRef1.current, {\r\n            origin: 'left',\r\n            distance: '100px',\r\n            duration: 1500,\r\n            delay: 200,\r\n            easing: 'ease-in-out',\r\n        })\r\n        ScrollReveal().reveal( revealRef2.current, {\r\n            origin: 'right',\r\n            distance: '100px',\r\n            duration: 1500,\r\n            delay: 200,\r\n            easing: 'ease-in-out',\r\n        })\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Navbar about=\"active\" />\r\n            <div className=\"container p-5\">\r\n                <div className=\"row \">\r\n                    <div className=\"col-12 col-md-6\" ref={revealRef1}>\r\n                        <h1 className=\"display-1 text-center border-bottom p-5 m-5\" style={{ fontWeight: \"550\", fontFamily: \"Playwrite GB S\" }}>About</h1>\r\n                        <p className=\"mt-5\" style={{fontSize : \".8rem\", fontFamily : \"Edu VIC WA NT Beginner\", lineHeight : \"1.3rem\"}}>\r\n                            Ahmad Bagas Adiputra is a writer, illustrator and content creator from South Sulawesi, Indonesian / Kendari. In 2024, she released her first book,\r\n                            A Year in Indonesian: An Illustrated Guide and Memoir, which follows her time as an English teacher and travel writer living in Japan. Her other writing work has been published in Japan Today, SavvyTokyo, GaijinPot and Voiceworks.\r\n                            She is an avid lover of fantasy and speculative literature, as well as gothic fiction, contemporary lit and Japanese fiction. While studying her post-grad with Deakin University, her research specialised in fantasy, folklore, mythology and the works of Studio Ghibli.\r\n                            When she was in high school, she uploaded a time-lapse painting video to YouTube on a whim. Her self-titled channel now has over 230,000 subscribers and 13 million total views. She posts book reviews, video essays and vlogs about her daily life.\r\n                            She is represented by Bailey Tamayo at Sanford J. Greenburger Associates.\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"col-12 col-md-6 d-flex align-items-center\" ref={revealRef2}>\r\n                        <img className=\"img-fluid h-auto\" src={aboutImage} alt=\"image profile\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import Navbar from \"../navbar\"\r\n\r\nexport default function ContactMain() {\r\n    return (\r\n        <>\r\n            <Navbar contact=\"active\" />\r\n\r\n            <div className=\"container p-5 container-contact\">\r\n                <div className=\"row p-5\">\r\n                    <div className=\"card col-12 col-lg-4 col-sm-6 offset-sm-0 border-0 offset-lg-1\">\r\n                        <div className=\"card-header border-0 bg-transparent\">\r\n                            <div className=\"card-title p-2\">\r\n                                <h1>Contact</h1>\r\n                            </div>\r\n                            <div className=\"card-body p-2\">\r\n                                <p>\r\n                                    Hello there! Thank you so much for wanting to contact me :-)\r\n                                    Please have a read of my Frequently Asked Questions before sending through an email.\r\n                                    <br /><br />\r\n                                    Take care,\r\n                                    <hr />\r\n                                    Ahmad\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card col-12 col-lg-5 col-sm-6 border-0\">\r\n                        <div className=\"card-header border-0 bg-transparent p-2\">\r\n                            <ul className=\"d-flex gap-2 fs-3 justify-content-start p-0\">\r\n                                <li className=\"nav-item\">\r\n                                    <a href=\"#\" className=\"nav-link\">\r\n                                        <i className=\"bx bxl-youtube\"></i>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"#\" className=\"nav-link\">\r\n                                        <i className=\"bx bxl-instagram\"></i>\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a href=\"#\" className=\"nav-link\">\r\n                                        <i className=\"bx bxl-github\"></i>\r\n                                    </a>\r\n                                </li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"card-body p-2\">\r\n                            <form method=\"post\">\r\n                                <p>Name (required) </p>\r\n                                <div className=\"d-flex gap-3\">\r\n                                    <div>\r\n                                        <label htmlFor=\"first_name\">First Name</label>\r\n                                        <input className=\"w-100\" type=\"text\" name=\"first_name\" id=\"first_name\"required focus/>\r\n                                    </div>\r\n                                    <div>\r\n                                        <label htmlFor=\"last_name\">Last Name</label>\r\n                                        <input className=\"w-100\" type=\"text\" name=\"last_name\" id=\"last_name\"/>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"mt-5\">\r\n                                    <label htmlFor=\"email\">Email (required)</label>\r\n                                    <div className=\"mt-2\">\r\n                                        <input className=\"w-100\" type=\"email\" name=\"email\" id=\"email\" required/>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"mt-5\">\r\n                                    <label htmlFor=\"message\">Message (required)</label>\r\n                                    <div className=\"mt-2\">\r\n                                        <textarea className=\"w-100\" name=\"message\" id=\"message\" cols=\"30\" rows=\"5\"></textarea>\r\n                                    </div>\r\n                                </div>\r\n                                <button className=\"btn btn-primary py-2 px-4 mt-2\">Send</button>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useState } from \"react\"\r\n\r\nexport default function Navigation( { onSearchChange }) {\r\n\r\n    const [searchInput, setSearchInput] = useState('');\r\n\r\n    const handleInputChange = (event) => {\r\n        const value = event.target.value;\r\n        setSearchInput(value);\r\n        onSearchChange(value);\r\n    }\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg\">\r\n            <div className=\"container d-flex align-items-center\">\r\n                <a href=\"/\" className=\"navbar-brand text-danger fs-4\">Ahmad Adptr</a>\r\n                <button className=\"navbar-toggler\" data-bs-toggle=\"collapse\" data-bs-target=\".nav-shop\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"navbar-collapse collapse nav-shop\">\r\n                    <ul className=\"navbar-nav me-auto align-items-center gap-3\">\r\n                        <li className=\"nav-item dropdown mt-2 mt-lg-0 justify-content-center ms-4\">\r\n                            <button className=\"m-auto gap-2 d-flex align-items-center btn btn-secondary dropdown-toggle justify-content-center\"\r\n                                        data-bs-toggle=\"dropdown\" style={{fontSize : \".9rem\"}}>\r\n                                <i className=\"bx bx-category m-0 p-0\" style={{fontSize : \"1rem\"}}></i>\r\n                                <p className=\"m-0\">\r\n                                    Category\r\n                                </p>\r\n                            </button>\r\n                            <ul className=\"dropdown-menu text-center\">\r\n                                <li>\r\n                                    <a className=\"dropdown-item\" href=\"/shop-more\">All Category</a>\r\n                                </li>\r\n                                <li>\r\n                                    <a className=\"dropdown-item\" href=\"/shop-more/electronics\">Electronics</a>\r\n                                </li>\r\n                                <li>\r\n                                    <a className=\"dropdown-item\" href=\"/shop-more/jewelery\">Jewelery</a>\r\n                                </li>\r\n                                <li>\r\n                                    <a className=\"dropdown-item\" href=\"/shop-more/men's\">Men's Clothing</a>\r\n                                </li>\r\n                                <li>\r\n                                    <a className=\"dropdown-item\" href=\"/shop-more/women's\">Women's Clothing</a>\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <p className=\"m-0 fw-semibold text-success text-decoration-underline\" style={{fontFamily : \"cursive\", fontSize : \".8rem\"}}>\r\n                                Shop at the lowest prices!\r\n                            </p>\r\n                        </li>\r\n                    </ul>\r\n                    <div>\r\n                        <ul className=\"gap-2 d-flex align-items-center justify-content-center mt-4 mt-lg-0 p-0\">\r\n                            <li className=\"nav-item\">\r\n                                <form action=\"/shop-more/searching\" className=\"d-flex align-items-center justify-content-center gap-2\">\r\n                                    <input\r\n                                        type=\"search\"\r\n                                        value={searchInput}\r\n                                        onChange={handleInputChange}\r\n                                        className=\"px-3 rounded-pill py-1 fw-semibold border text-secondary\"\r\n                                        placeholder=\"Search product\"/>\r\n                                    <button className=\"btn btn-success py-0 px-2\">\r\n                                        <i className=\"bx bx-search m-0 p-0\"></i>\r\n                                    </button>\r\n                                </form>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a href=\"#\">\r\n                                    <i className=\"bx bxs-user\"></i>\r\n                                </a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a href=\"#\">\r\n                                    <i className=\"bx bxs-cart\"></i>\r\n                                </a>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import { useEffect, useState } from \"react\";\r\n\r\nexport default function MainContent() {\r\n    const url = \"https://fakestoreapi.com/products\";\r\n    const [products, setProducts] = useState([]);\r\n\r\n    const getDataProducts = async () => {\r\n        const response = await fetch(url);\r\n        const dataProducts = await response.json();\r\n        setProducts(dataProducts);\r\n    }\r\n\r\n    useEffect( () => {\r\n        getDataProducts();\r\n    })\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                { products.map( (product) => {\r\n                    return (\r\n                        <div className=\"col-lg-3 col-12 col-sm-6\">\r\n                            <BasicBodyCard\r\n                                urlImage={product.image}\r\n                                title={product.title}\r\n                                description={product.description}\r\n                                category={product.category}\r\n                                price={product.price} />\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction BasicBodyCard(props) {\r\n    return (\r\n        <div className=\"card text-center border-0 m-2\">\r\n            <div className=\"card-header bg-transparent\">\r\n                <img src={ props.urlImage } alt=\"product\" className=\"card-img img-fluid\"  style={{width : \"100px\"}}/>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <h6 className=\"card-title\">{ props.title }</h6>\r\n                <button className=\"btn btn-warning rounded-pill p-1 px-2 m-2 text-white\" style={ {fontSize : \".5rem\"} }>{ props.category }</button>\r\n                <p className=\"card-text\" style={{fontSize : \".6rem\"}}>\r\n                    { props.description }\r\n                </p>\r\n                <button className=\"btn btn-primary py-2 px-4\"> ${props.price}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default function HeroSection(props) {\r\n    return (\r\n\r\n        <div className=\"container p-5\">\r\n            <div className=\"row p-5\">\r\n                <div className=\"col-12 p-1 p-md-5\">\r\n                    <h1 className=\"display-6 text-center\" style={{ fontFamily: \"Edu VIC WA NT Beginner\", fontWeight: \"200\" }}>\r\n                        Get the cheapest <span className=\"text-danger\">discount</span> of up to <span className=\"text-danger\">50%</span> by subscribing to the <span className=\"text-primary text-decoration-underline ahmad-text\">Ahmad Adptr</span> shop\r\n                    </h1>\r\n                    <p className=\"text-center mt-4\" style={{fontSize : \".8rem\", fontFamily : \"cursive\"}}>\r\n                        <mark className=\"py-1 px-3 rounded-pill\">Category : {props.category}</mark>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import Navigation from \"./navigation\";\r\nimport HeroSection from \"./HeroSection\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function Electronics () {\r\n    const url = \"https://fakestoreapi.com/products\";\r\n    const [products, setProducts] = useState([]);\r\n\r\n    const getDataProducts = async () => {\r\n        const response = await fetch(url);\r\n        const dataProducts = await response.json();\r\n        setProducts(dataProducts);\r\n    }\r\n\r\n    useEffect( () => {\r\n        getDataProducts();\r\n    })\r\n\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n\r\n    const handleInputChange = (term) => {\r\n        setSearchTerm(term)\r\n    }\r\n    return (\r\n        <>\r\n            <Navigation onSearchChange={handleInputChange} />\r\n            <HeroSection category={\"electronics\"} />\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    { products\r\n                        .filter( (product) => product.category === \"electronics\")\r\n                        .map( (product) => {\r\n                            return (\r\n                                <div className=\"col-lg-3 col-12 col-sm-6\">\r\n                                    <BasicBodyCard\r\n                                        urlImage={product.image}\r\n                                        title={product.title}\r\n                                        description={product.description}\r\n                                        category={product.category}\r\n                                        price={product.price} />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction BasicBodyCard(props) {\r\n    return (\r\n        <div className=\"card text-center border-0 m-2\">\r\n            <div className=\"card-header bg-transparent\">\r\n                <img src={ props.urlImage } alt=\"product\" className=\"card-img img-fluid\"  style={{width : \"100px\"}}/>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <h6 className=\"card-title\">{ props.title }</h6>\r\n                <button className=\"btn btn-warning rounded-pill p-1 px-2 m-2 text-white\" style={ {fontSize : \".5rem\"} }>{ props.category }</button>\r\n                <p className=\"card-text\" style={{fontSize : \".6rem\"}}>\r\n                    { props.description }\r\n                </p>\r\n                <button className=\"btn btn-primary py-2 px-4\"> ${props.price}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import Navigation from \"./navigation\";\r\nimport HeroSection from \"./HeroSection\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function Jewelery () {\r\n    const url = \"https://fakestoreapi.com/products\";\r\n    const [products, setProducts] = useState([]);\r\n\r\n    const getDataProducts = async () => {\r\n        const response = await fetch(url);\r\n        const dataProducts = await response.json();\r\n        setProducts(dataProducts);\r\n    }\r\n\r\n    useEffect( () => {\r\n        getDataProducts();\r\n    })\r\n\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n\r\n    const handleInputChange = (term) => {\r\n        setSearchTerm(term)\r\n  }\r\n\r\n    return (\r\n        <>\r\n            <Navigation onSearchChange={handleInputChange} />\r\n            <HeroSection category={\"jewelery\"} />\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    { products\r\n                        .filter( (product) => product.category === \"jewelery\")\r\n                        .map( (product) => {\r\n                            return (\r\n                                <div className=\"col-lg-3 col-12 col-sm-6\">\r\n                                    <BasicBodyCard\r\n                                        urlImage={product.image}\r\n                                        title={product.title}\r\n                                        description={product.description}\r\n                                        category={product.category}\r\n                                        price={product.price} />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction BasicBodyCard(props) {\r\n    return (\r\n        <div className=\"card text-center border-0 m-2\">\r\n            <div className=\"card-header bg-transparent\">\r\n                <img src={ props.urlImage } alt=\"product\" className=\"card-img img-fluid\"  style={{width : \"100px\"}}/>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <h6 className=\"card-title\">{ props.title }</h6>\r\n                <button className=\"btn btn-warning rounded-pill p-1 px-2 m-2 text-white\" style={ {fontSize : \".5rem\"} }>{ props.category }</button>\r\n                <p className=\"card-text\" style={{fontSize : \".6rem\"}}>\r\n                    { props.description }\r\n                </p>\r\n                <button className=\"btn btn-primary py-2 px-4\"> ${props.price}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import Navigation from \"./navigation\";\r\nimport HeroSection from \"./HeroSection\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function Mens () {\r\n    const url = \"https://fakestoreapi.com/products\";\r\n    const [products, setProducts] = useState([]);\r\n\r\n    const getDataProducts = async () => {\r\n        const response = await fetch(url);\r\n        const dataProducts = await response.json();\r\n        setProducts(dataProducts);\r\n    }\r\n\r\n    useEffect( () => {\r\n        getDataProducts();\r\n    })\r\n\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n\r\n    const handleInputChange = (term) => {\r\n        setSearchTerm(term)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navigation onSearchChange={handleInputChange} />\r\n            <HeroSection category={\"men's clothing\"} />\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    { products\r\n                        .filter( (product) => product.category === \"men's clothing\")\r\n                        .map( (product) => {\r\n                            return (\r\n                                <div className=\"col-lg-3 col-12 col-sm-6\">\r\n                                    <BasicBodyCard\r\n                                        urlImage={product.image}\r\n                                        title={product.title}\r\n                                        description={product.description}\r\n                                        category={product.category}\r\n                                        price={product.price} />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction BasicBodyCard(props) {\r\n    return (\r\n        <div className=\"card text-center border-0 m-2\">\r\n            <div className=\"card-header bg-transparent\">\r\n                <img src={ props.urlImage } alt=\"product\" className=\"card-img img-fluid\"  style={{width : \"100px\"}}/>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <h6 className=\"card-title\">{ props.title }</h6>\r\n                <button className=\"btn btn-warning rounded-pill p-1 px-2 m-2 text-white\" style={ {fontSize : \".5rem\"} }>{ props.category }</button>\r\n                <p className=\"card-text\" style={{fontSize : \".6rem\"}}>\r\n                    { props.description }\r\n                </p>\r\n                <button className=\"btn btn-primary py-2 px-4\"> ${props.price}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import Navigation from \"./navigation\";\r\nimport HeroSection from \"./HeroSection\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function Womens () {\r\n    const url = \"https://fakestoreapi.com/products\";\r\n    const [products, setProducts] = useState([]);\r\n\r\n    const getDataProducts = async () => {\r\n        const response = await fetch(url);\r\n        const dataProducts = await response.json();\r\n        setProducts(dataProducts);\r\n    }\r\n\r\n    useEffect( () => {\r\n        getDataProducts();\r\n    })\r\n\r\n    const [searchTerm, setSearchTerm] = useState('')\r\n\r\n    const handleInputChange = (term) => {\r\n        setSearchTerm(term)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navigation onSearchChange={handleInputChange} />\r\n            <HeroSection category={\"women's clothing\"} />\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    { products\r\n                        .filter( (product) => product.category === \"women's clothing\")\r\n                        .map( (product) => {\r\n                            return (\r\n                                <div className=\"col-lg-3 col-12 col-sm-6\">\r\n                                    <BasicBodyCard\r\n                                        urlImage={product.image}\r\n                                        title={product.title}\r\n                                        description={product.description}\r\n                                        category={product.category}\r\n                                        price={product.price} />\r\n                                </div>\r\n                            )\r\n                        })}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction BasicBodyCard(props) {\r\n    return (\r\n        <div className=\"card text-center border-0 m-2\">\r\n            <div className=\"card-header bg-transparent\">\r\n                <img src={ props.urlImage } alt=\"product\" className=\"card-img img-fluid\"  style={{width : \"100px\"}}/>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <h6 className=\"card-title\">{ props.title }</h6>\r\n                <button className=\"btn btn-warning rounded-pill p-1 px-2 m-2 text-white\" style={ {fontSize : \".5rem\"} }>{ props.category }</button>\r\n                <p className=\"card-text\" style={{fontSize : \".6rem\"}}>\r\n                    { props.description }\r\n                </p>\r\n                <button className=\"btn btn-primary py-2 px-4\"> ${props.price}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","export default function HeroSectionSearch(props) {\r\n    return (\r\n\r\n        <div className=\"container p-4\">\r\n            <div className=\"row p-4\">\r\n                <div className=\"col-12 p-1 p-md-5\">\r\n                    <h1 className=\"display-6 text-center\" style={{ fontFamily: \"Edu VIC WA NT Beginner\", fontWeight: \"200\" }}>\r\n                        Get the cheapest <span className=\"text-danger\">discount</span> of up to <span className=\"text-danger\">50%</span> by subscribing to the <span className=\"text-primary text-decoration-underline ahmad-text\">Ahmad Adptr</span> shop\r\n                    </h1>\r\n                    <p className=\"text-center mt-4\" style={{fontSize : \".8rem\", fontFamily : \"cursive\"}}>\r\n                        <mark className=\"py-1 px-3 rounded-pill\">Searching : {props.search}</mark>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import Navigation from \"./navigation\";\r\nimport HeroSectionSearch from \"./heroSectionSearch\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport default function Searching() {\r\n\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n\r\n    const handleInputChange = (term) => {\r\n        setSearchTerm(term)\r\n    }\r\n\r\n    const url = \"https://fakestoreapi.com/products\";\r\n    const [products, setProducts] = useState([])\r\n\r\n    const getDataProducts = async () => {\r\n        const response = await fetch(url);\r\n        const dataProducts = await response.json();\r\n        setProducts(dataProducts);\r\n    }\r\n\r\n    useEffect( () => {\r\n        getDataProducts()\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Navigation onSearchChange={handleInputChange}/>\r\n            <HeroSectionSearch search={searchTerm} />\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    {\r\n                        products\r\n                        .filter( (product) => product.title.includes(searchTerm))\r\n                        .map( (product) => {\r\n                            return (\r\n                                <div className=\"col-lg-3 col-12 col-sm-6\">\r\n                                            <BasicBodyCard\r\n                                                urlImage={product.image}\r\n                                                title={product.title}\r\n                                                description={product.description}\r\n                                                category={product.category}\r\n                                                price={product.price} />\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction BasicBodyCard(props) {\r\n    return (\r\n        <div className=\"card text-center border-0 m-2\">\r\n            <div className=\"card-header bg-transparent\">\r\n                <img src={ props.urlImage } alt=\"product\" className=\"card-img img-fluid\"  style={{width : \"100px\"}}/>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <h6 className=\"card-title\">{ props.title }</h6>\r\n                <button className=\"btn btn-warning rounded-pill p-1 px-2 m-2 text-white\" style={ {fontSize : \".5rem\"} }>{ props.category }</button>\r\n                <p className=\"card-text\" style={{fontSize : \".6rem\"}}>\r\n                    { props.description }\r\n                </p>\r\n                <button className=\"btn btn-primary py-2 px-4\"> ${props.price}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"bootstrap/dist/js/bootstrap.bundle.min.js\"\r\nimport \"boxicons/css/boxicons.min.css\";\r\n\r\nimport './App.css';\r\nimport { useState } from \"react\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\n\r\nimport Navbar from \"./components/navbar\";\r\nimport Hero from \"./components/hero\";\r\nimport A_year from \"./components/a_year\";\r\nimport NotepadPage from \"./components/notepadPage\";\r\nimport Motivation from \"./components/motivation\";\r\nimport Follow from \"./components/follow\";\r\nimport Footer from \"./components/footer\";\r\n\r\n// untuk berpindah halaman\r\nimport MainShop from \"./components/ShopPage/mainShop\";\r\nimport A_Year_Main from \"./components/mainPage/a_year_main\";\r\nimport AboutMain from \"./components/About/aboutMain\";\r\nimport ContactMain from \"./components/Contact/ContactMain\";\r\n\r\n//  khusus untuk shope more\r\nimport Navigation from \"./components-shop/navigation\";\r\nimport MainContent from \"./components-shop/mainContent\";\r\nimport HeroSection from \"./components-shop/HeroSection\";\r\nimport Electronics from \"./components-shop/electronics\";\r\nimport Jewelery from \"./components-shop/jewelery\";\r\nimport Mens from \"./components-shop/men's clothing\";\r\nimport Womens from \"./components-shop/women's clothing\";\r\nimport Searching from \"./components-shop/searching\";\r\n\r\nfunction App() {\r\n  \r\n  const [searchTerm, setSearchTerm] = useState('')\r\n\r\n  const handleInputChange = (term) => {\r\n      setSearchTerm(term)\r\n  }\r\n\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Routes>\r\n\r\n        <Route\r\n          path=\"/\"\r\n          element={\r\n            <div>\r\n              <h1> Test! </h1>\r\n              <Navbar />\r\n              <Hero />\r\n              <A_year />\r\n              <NotepadPage />\r\n              <Motivation />\r\n              <Follow />\r\n              <Footer />\r\n            </div>\r\n          } />\r\n\r\n        <Route path=\"/shop\" element={<MainShop />} />\r\n        <Route path=\"/a_year_in_indonesia\" element={<A_Year_Main />}></Route>\r\n        <Route path=\"/about\" element={<AboutMain />}></Route>\r\n        <Route path=\"/contact\" element={<ContactMain />}></Route>\r\n\r\n\r\n        <Route\r\n          path=\"/shop-more\"\r\n          element={\r\n            <>\r\n              <Navigation onSearchChange={handleInputChange} />\r\n              <HeroSection category={\"all category\"} />\r\n              <MainContent />\r\n            </>\r\n          } />\r\n\r\n          <Route path=\"/shop-more/electronics\" element={<Electronics />} />\r\n          <Route path=\"/shop-more/jewelery\" element={<Jewelery />} />\r\n          <Route path=\"/shop-more/men's\" element={<Mens />} />\r\n          <Route path=\"/shop-more/women's\" element={<Womens />} />\r\n          <Route path=\"/shop-more/searching\" element={<Searching />} />\r\n\r\n      </Routes>\r\n\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"names":["t","Map","e","set","i","n","has","s","get","size","console","error","Array","from","keys","remove","delete","window","CSS","escape","replace","dispatchEvent","Event","o","jquery","nodeType","r","length","document","querySelector","a","getClientRects","getComputedStyle","getPropertyValue","closest","parentNode","l","Node","ELEMENT_NODE","classList","contains","disabled","hasAttribute","getAttribute","c","documentElement","attachShadow","getRootNode","ShadowRoot","h","d","offsetHeight","u","jQuery","body","f","p","dir","m","callback","NAME","fn","jQueryInterface","Constructor","noConflict","readyState","addEventListener","push","g","arguments","undefined","_","transitionDuration","transitionDelay","Number","parseFloat","split","_ref","target","removeEventListener","setTimeout","b","indexOf","Math","max","min","v","y","w","A","E","T","mouseenter","mouseleave","C","Set","O","uidEvent","x","k","Object","values","find","callable","delegationSelector","L","I","S","relatedTarget","delegateTarget","call","this","oneOff","querySelectorAll","P","N","off","type","apply","D","Boolean","$","entries","includes","on","one","startsWith","slice","trigger","isPropagationStopped","isImmediatePropagationStopped","isDefaultPrevented","bubbles","cancelable","preventDefault","defaultPrevented","defineProperty","configurable","j","toString","JSON","parse","decodeURIComponent","M","toLowerCase","F","setDataAttribute","setAttribute","removeDataAttribute","removeAttribute","getDataAttributes","dataset","filter","charAt","getDataAttribute","H","Default","DefaultType","Error","_getConfig","_mergeConfigObj","_configAfterMerge","_typeCheckConfig","constructor","prototype","match","RegExp","test","TypeError","toUpperCase","W","super","_element","_config","DATA_KEY","dispose","EVENT_KEY","getOwnPropertyNames","_queueCallback","getInstance","getOrCreateInstance","VERSION","eventName","B","trim","map","join","z","concat","Element","findOne","children","matches","parents","prev","previousElementSibling","next","nextElementSibling","focusableChildren","getSelectorFromElement","getElementFromSelector","getMultipleElementsFromSelector","R","tagName","q","V","K","Q","close","_destroyElement","each","X","Y","toggle","U","G","J","Z","tt","et","it","endCallback","leftCallback","rightCallback","nt","st","isSupported","_deltaX","_supportPointerEvents","PointerEvent","_initEvents","_start","_eventIsPointerPenTouch","clientX","touches","_end","_handleSwipe","_move","abs","add","pointerType","navigator","maxTouchPoints","ot","rt","at","lt","ct","ht","dt","ut","ft","pt","mt","gt","_t","bt","vt","yt","wt","At","Et","Tt","ArrowLeft","ArrowRight","Ct","interval","keyboard","pause","ride","touch","wrap","Ot","xt","_interval","_activeElement","_isSliding","touchTimeout","_swipeHelper","_indicatorsElement","_addEventListeners","cycle","_slide","nextWhenVisible","hidden","_clearInterval","_updateInterval","setInterval","_maybeEnableCycle","to","_getItems","_getItemIndex","_getActive","defaultInterval","_keydown","_addTouchEventListeners","_directionToOrder","clearTimeout","key","_setActiveIndicatorElement","parseInt","direction","_orderToDirection","_isAnimated","clearInterval","kt","Lt","St","Dt","$t","It","Nt","Pt","jt","Mt","Ft","Ht","parent","Wt","Bt","_isTransitioning","_triggerArray","_initializeChildren","_addAriaAndCollapsedClass","_isShown","hide","show","_getFirstLevelChildren","_getDimension","style","getBoundingClientRect","zt","Rt","qt","Vt","Kt","Qt","Xt","Yt","Ut","Gt","Jt","Zt","te","reduce","ee","ie","ne","se","oe","re","ae","le","ce","he","de","ue","nodeName","fe","ownerDocument","defaultView","pe","me","HTMLElement","ge","_e","name","enabled","phase","state","elements","forEach","styles","attributes","assign","effect","popper","position","options","strategy","left","top","margin","arrow","reference","hasOwnProperty","requires","be","ve","ye","we","round","Ae","userAgentData","brands","isArray","brand","version","userAgent","Ee","Te","offsetWidth","width","height","visualViewport","offsetLeft","offsetTop","right","bottom","Ce","Oe","isSameNode","host","xe","ke","Le","Se","assignedSlot","De","offsetParent","$e","transform","perspective","contain","willChange","Ie","Ne","Pe","je","Me","modifiersData","popperOffsets","placement","rects","padding","clientHeight","clientWidth","centerOffset","element","requiresIfExists","Fe","He","We","popperRect","variation","offsets","gpuAcceleration","adaptive","roundOffsets","isFixed","devicePixelRatio","Be","data","ze","passive","Re","instance","scroll","resize","scrollParents","update","qe","Ve","Ke","start","end","Qe","Xe","scrollLeft","pageXOffset","scrollTop","pageYOffset","Ye","Ue","overflow","overflowX","overflowY","Ge","Je","Ze","ti","clientTop","clientLeft","scrollWidth","scrollHeight","ei","ii","boundary","rootBoundary","elementContext","altBoundary","contextElement","offset","ni","flipVariations","allowedAutoPlacements","sort","si","_skip","mainAxis","altAxis","fallbackPlacements","every","reset","oi","ri","some","ai","preventOverflow","referenceClippingOffsets","popperEscapeOffsets","isReferenceHidden","hasPopperEscaped","li","ci","hi","tether","tetherOffset","di","ui","fi","modifiers","pi","mi","defaultModifiers","defaultOptions","orderedModifiers","setOptions","forceUpdate","Promise","resolve","then","destroy","onFirstUpdate","gi","_i","bi","yi","wi","Ai","Ei","Ti","Ci","Oi","xi","ki","Li","Si","Di","$i","Ii","Ni","Pi","ji","Mi","Fi","Hi","Wi","Bi","zi","autoClose","display","popperConfig","Ri","qi","_popper","_parent","_menu","_inNavbar","_detectNavbar","_createPopper","focus","_completeHide","vi","_getPopperConfig","_getPlacement","_getOffset","_selectMenuItem","_ref2","clearMenus","button","composedPath","clickEvent","dataApiKeydownHandler","stopPropagation","Vi","Ki","Qi","Xi","className","clickCallback","isAnimated","isVisible","rootElement","Yi","Ui","_isAppended","_append","_getElement","_emulateAnimation","createElement","append","Gi","Ji","Zi","tn","en","autofocus","trapElement","nn","sn","_isActive","_lastTabNavDirection","activate","_handleFocusin","_handleKeydown","deactivate","shiftKey","rn","an","ln","cn","getWidth","innerWidth","_disableOverFlow","_setElementAttributes","_resetElementAttributes","isOverflowing","_saveInitialAttribute","_applyManipulationCallback","setProperty","removeProperty","hn","dn","un","pn","mn","gn","_n","bn","vn","yn","wn","An","En","Tn","backdrop","Cn","On","_dialog","_backdrop","_initializeBackDrop","_focustrap","_initializeFocusTrap","_scrollBar","_adjustDialog","_showElement","_hideModal","handleUpdate","_triggerBackdropTransition","_resetAdjustments","paddingLeft","paddingRight","xn","kn","Ln","Sn","Dn","$n","In","Nn","Pn","jn","Mn","Fn","Hn","Wn","Bn","zn","Rn","qn","blur","Vn","area","br","col","code","dd","div","dl","em","hr","h1","h2","h3","h4","h5","h6","img","ol","pre","small","span","sub","sup","strong","ul","Kn","Qn","Xn","nodeValue","Yn","allowList","content","extraClass","html","sanitize","sanitizeFn","template","Un","Gn","entry","selector","Jn","getContent","_resolvePossibleFunction","hasContent","changeContent","_checkContent","toHtml","innerHTML","_maybeSanitize","_setContent","_putElementInTemplate","textContent","DOMParser","parseFromString","Zn","ts","es","is","ns","ss","os","rs","AUTO","TOP","RIGHT","BOTTOM","LEFT","as","animation","container","customClass","delay","title","ls","cs","_isEnabled","_timeout","_isHovered","_activeTrigger","_templateFactory","_newContent","tip","_setListeners","_fixTitle","enable","disable","toggleEnabled","click","_leave","_enter","_hideModalHandler","_disposePopper","_isWithContent","_getTipElement","_isWithActiveTrigger","_getTitle","_createTipElement","_getContentForTemplate","_getTemplateFactory","floor","random","getElementById","setContent","_initializeOnDelegatedTarget","_getDelegateConfig","_setTimeout","hs","ds","us","_getContent","fs","ps","ms","gs","_s","bs","vs","ys","ws","rootMargin","smoothScroll","threshold","As","Es","_targetLinks","_observableSections","_rootElement","_activeTarget","_observer","_previousScrollData","visibleEntryTop","parentScrollTop","refresh","_initializeTargetsAndObservables","_maybeEnableSmoothScroll","disconnect","_getNewObserver","observe","hash","scrollTo","behavior","root","IntersectionObserver","_observerCallback","id","_process","isIntersecting","_clearActiveClass","decodeURI","_activateParents","Ts","Cs","Os","xs","ks","Ls","Ss","Ds","$s","Is","Ns","Ps","js","Ms","Fs","Hs","Ws","Bs","zs","Rs","qs","Vs","Ks","_setInitialAttributes","_getChildren","_elemIsActive","_getActiveElem","_deactivate","_activate","_toggleDropDown","preventScroll","_setAttributeIfNotExists","_setInitialAttributesOnChild","_getInnerElement","_getOuterElement","_setInitialAttributesOnTargetPanel","Qs","Xs","Ys","Us","Gs","Js","Zs","eo","io","no","so","oo","autohide","ro","ao","_hasMouseInteraction","_hasKeyboardInteraction","_clearTimeout","_maybeScheduleHide","isShown","_onInteraction","Alert","Button","Carousel","Collapse","Dropdown","Modal","Offcanvas","Popover","ScrollSpy","Tab","Toast","Tooltip","aa","require","ca","encodeURIComponent","da","ea","fa","ha","ia","ja","ka","la","ma","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","propertyName","sanitizeURL","removeEmptyString","ra","sa","ta","pa","isNaN","qa","oa","setAttributeNS","xlinkHref","ua","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","va","Symbol","for","wa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","iterator","Ka","La","Ma","stack","Na","Oa","prepareStackTrace","Reflect","construct","displayName","Pa","tag","render","Qa","$$typeof","_context","_payload","_init","Ra","Sa","Ta","Va","_valueTracker","getOwnPropertyDescriptor","enumerable","getValue","setValue","stopTracking","Ua","Wa","checked","value","Xa","activeElement","Ya","defaultChecked","defaultValue","_wrapperState","initialChecked","Za","initialValue","controlled","ab","bb","cb","db","eb","fb","selected","defaultSelected","gb","dangerouslySetInnerHTML","hb","ib","jb","kb","lb","mb","nb","namespaceURI","valueOf","firstChild","removeChild","appendChild","MSApp","execUnsafeLocalFunction","ob","lastChild","pb","animationIterationCount","aspectRatio","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","qb","rb","sb","substring","tb","menuitem","base","embed","input","keygen","link","meta","param","source","track","wbr","ub","vb","wb","xb","srcElement","correspondingUseElement","yb","zb","Ab","Bb","Cb","stateNode","Db","Eb","Fb","Gb","Hb","Ib","Jb","Kb","Lb","Mb","Nb","onError","Ob","Pb","Qb","Rb","Sb","Tb","Vb","alternate","return","flags","Wb","memoizedState","dehydrated","Xb","Zb","child","sibling","current","Yb","$b","ac","unstable_scheduleCallback","bc","unstable_cancelCallback","cc","unstable_shouldYield","dc","unstable_requestPaint","unstable_now","ec","unstable_getCurrentPriorityLevel","fc","unstable_ImmediatePriority","gc","unstable_UserBlockingPriority","hc","unstable_NormalPriority","ic","unstable_LowPriority","jc","unstable_IdlePriority","kc","lc","oc","clz32","pc","qc","log","LN2","rc","sc","tc","uc","pendingLanes","suspendedLanes","pingedLanes","entangledLanes","entanglements","vc","xc","yc","zc","Ac","eventTimes","Cc","Dc","Ec","Fc","Gc","Hc","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Pc","Qc","Rc","Sc","pointerId","Tc","nativeEvent","blockedOn","domEventName","eventSystemFlags","targetContainers","Vc","Wc","priority","isDehydrated","containerInfo","Xc","Yc","shift","Zc","$c","ad","bd","cd","ReactCurrentBatchConfig","ed","transition","fd","gd","hd","Uc","jd","kd","ld","md","nd","od","keyCode","charCode","pd","qd","rd","_reactName","_targetInst","currentTarget","returnValue","cancelBubble","persist","isPersistent","wd","xd","yd","sd","eventPhase","timeStamp","Date","now","isTrusted","td","ud","view","detail","vd","Ad","screenX","screenY","clientY","pageX","pageY","ctrlKey","altKey","metaKey","getModifierState","zd","buttons","fromElement","toElement","movementX","movementY","Bd","Dd","dataTransfer","Fd","Hd","animationName","elapsedTime","pseudoElement","Id","clipboardData","Jd","Ld","Md","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Nd","Od","Alt","Control","Meta","Shift","Pd","Qd","String","fromCharCode","location","repeat","locale","which","Rd","Td","pressure","tangentialPressure","tiltX","tiltY","twist","isPrimary","Vd","targetTouches","changedTouches","Xd","Yd","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","Zd","$d","documentMode","color","date","datetime","email","month","number","password","range","search","tel","text","time","url","week","event","listeners","oninput","detachEvent","attachEvent","node","nextSibling","compareDocumentPosition","HTMLIFrameElement","contentWindow","href","contentEditable","focusedElem","selectionRange","selectionStart","selectionEnd","getSelection","extend","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","createRange","setStart","removeAllRanges","addRange","setEnd","animationend","animationiteration","animationstart","transitionend","af","bf","cf","df","ef","ff","gf","hf","lf","mf","nf","Ub","listener","of","pf","qf","rf","sf","bind","capture","tf","uf","parentWindow","vf","wf","na","xa","$a","ba","char","unshift","xf","yf","zf","Af","Bf","Cf","Df","Ef","__html","Ff","Gf","Hf","Jf","queueMicrotask","catch","If","Kf","Lf","Mf","previousSibling","Nf","Of","Pf","Qf","Rf","Sf","Tf","Uf","Vf","Wf","Xf","Yf","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Zf","childContextTypes","$f","ag","bg","getChildContext","cg","__reactInternalMemoizedMergedChildContext","dg","eg","fg","gg","hg","jg","kg","lg","mg","ng","og","pg","qg","rg","sg","tg","ug","vg","wg","xg","yg","zg","Ag","Bg","elementType","deletions","Cg","pendingProps","treeContext","retryLane","Dg","mode","Eg","Fg","Gg","memoizedProps","Hg","Ig","Jg","Kg","Lg","ref","_owner","_stringRef","refs","Mg","Ng","Og","index","Pg","Qg","props","Rg","implementation","Sg","Tg","done","Ug","Vg","Wg","Xg","Yg","Zg","$g","ah","_currentValue","bh","childLanes","ch","dependencies","firstContext","lanes","dh","eh","context","memoizedValue","fh","gh","hh","interleaved","ih","jh","kh","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","lh","mh","eventTime","lane","payload","nh","oh","ph","qh","rh","sh","th","uh","vh","wh","xh","yh","zh","Ah","Bh","Ch","revealOrder","Dh","Eh","_workInProgressVersionPrimary","Fh","ReactCurrentDispatcher","Gh","Hh","Ih","Jh","Kh","Lh","Mh","Nh","Oh","Ph","Qh","Rh","Sh","Th","baseQueue","queue","Uh","Vh","Wh","lastRenderedReducer","action","hasEagerState","eagerState","lastRenderedState","dispatch","Xh","Yh","Zh","$h","getSnapshot","lastEffect","stores","create","deps","readContext","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","identifierPrefix","defaultProps","isMounted","_reactInternals","enqueueSetState","enqueueReplaceState","enqueueForceUpdate","shouldComponentUpdate","isPureReactComponent","contextType","updater","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","message","digest","WeakMap","getDerivedStateFromError","componentDidCatch","componentStack","pingCache","ReactCurrentOwner","aj","compare","bj","cj","dj","baseLanes","cachePool","transitions","ej","fj","gj","hj","ij","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","jj","kj","pendingContext","lj","zj","Aj","Bj","Cj","mj","nj","oj","fallback","pj","qj","sj","dgst","tj","uj","_reactRetry","rj","subtreeFlags","vj","wj","isBackwards","rendering","renderingStartTime","last","tail","tailMode","xj","Dj","Ej","Fj","wasMultiple","multiple","suppressHydrationWarning","onClick","onclick","createElementNS","autoFocus","createTextNode","Gj","Hj","Ij","Jj","Kj","WeakSet","Lj","Mj","Nj","Pj","Qj","Rj","Sj","Tj","Uj","Vj","insertBefore","_reactRootContainer","Wj","Xj","Yj","Zj","onCommitFiberUnmount","componentWillUnmount","ak","bk","ck","dk","ek","isHidden","fk","gk","hk","ik","jk","kk","__reactInternalSnapshotBeforeUpdate","src","Vk","lk","ceil","mk","nk","ok","pk","qk","rk","sk","tk","Infinity","uk","vk","wk","xk","yk","zk","Ak","Bk","Ck","Dk","callbackNode","expirationTimes","expiredLanes","wc","callbackPriority","ig","Ek","Fk","Gk","Hk","Ik","Jk","Kk","Lk","Mk","Nk","Ok","finishedWork","finishedLanes","Pk","timeoutHandle","Qk","Rk","Sk","Tk","Uk","mutableReadLanes","Bc","Oj","onCommitFiberRoot","mc","onRecoverableError","Wk","onPostCommitFiberRoot","Xk","Yk","$k","isReactComponent","pendingChildren","al","mutableSourceEagerHydrationData","bl","cache","pendingSuspenseBoundaries","el","fl","gl","hl","il","yj","Zk","kl","reportError","ll","_internalRoot","ml","nl","pl","rl","ql","unmount","unstable_scheduleHydration","splice","stringify","form","sl","usingClientEntryPoint","Events","tl","findFiberByHostInstance","bundleType","rendererPackageName","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setErrorHandler","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","__REACT_DEVTOOLS_GLOBAL_HOOK__","vl","isDisabled","supportsFiber","inject","exports","createPortal","cl","createRoot","unstable_strictMode","findDOMNode","flushSync","hydrate","hydrateRoot","hydratedSources","_getVersion","_source","unmountComponentAtNode","unstable_batchedUpdates","unstable_renderSubtreeIntoContainer","checkDCE","err","module","__self","__source","Fragment","jsx","jsxs","setState","_status","_result","default","Children","count","toArray","only","Component","Profiler","PureComponent","StrictMode","Suspense","act","cloneElement","createContext","_currentValue2","_threadCount","Provider","Consumer","_defaultValue","_globalName","createFactory","createRef","forwardRef","isValidElement","lazy","memo","startTransition","unstable_act","pop","sortIndex","performance","setImmediate","startTime","expirationTime","priorityLevel","scheduling","isInputPending","MessageChannel","port2","port1","onmessage","postMessage","unstable_Profiling","unstable_continueExecution","unstable_forceFrameRate","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_runWithPriority","unstable_wrapCallback","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","leafPrototypes","getProto","getPrototypeOf","obj","__esModule","def","definition","prop","toStringTag","Action","PopStateEventType","invariant","warning","cond","warn","getHistoryState","usr","idx","createLocation","_extends","pathname","parsePath","substr","createPath","path","parsedPath","hashIndex","searchIndex","getUrlBasedHistory","getLocation","createHref","validateLocation","v5Compat","globalHistory","history","Pop","getIndex","handlePop","nextIndex","delta","createURL","origin","URL","replaceState","listen","encodeLocation","Push","historyState","pushState","DOMException","Replace","go","ResultType","matchRoutes","routes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","score","siblings","compareIndexes","routesMeta","childrenIndex","rankRouteBranches","decoded","decodePath","matchRouteBranch","parentsMeta","parentPath","flattenRoute","route","relativePath","caseSensitive","joinPaths","computeScore","_route$path","exploded","explodeOptionalSegments","segments","first","rest","isOptional","endsWith","required","restExploded","result","subpath","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","initialScore","segment","branch","matchedParams","matchedPathname","remainingPathname","matchPath","params","pathnameBase","normalizePathname","pattern","matcher","compiledParams","regexpSource","paramName","compilePath","captureGroups","splatValue","startIndex","nextChar","paths","isRouteErrorResponse","status","statusText","internal","validMutationMethodsArr","validRequestMethodsArr","DataRouterContext","React","DataRouterStateContext","NavigationContext","LocationContext","RouteContext","outlet","isDataRoute","RouteErrorContext","useInRouterContext","useLocation","UNSAFE_invariant","useRoutesImpl","dataRouterState","future","parentMatches","routeMatch","parentParams","parentPathnameBase","locationFromContext","_parsedLocationArg$pa","parsedLocationArg","parentSegments","renderedMatches","_renderMatches","navigationType","DefaultErrorComponent","_state$errors","useDataRouterState","DataRouterStateHook","UseRouteError","routeId","useCurrentRouteId","errors","useRouteError","lightgrey","preStyles","backgroundColor","fontStyle","defaultErrorElement","RenderErrorBoundary","revalidation","errorInfo","routeContext","component","RenderedRoute","dataRouterContext","static","staticContext","errorElement","ErrorBoundary","_deepestRenderedBoundaryId","_dataRouterState","_future","v7_partialHydration","initialized","errorIndex","findIndex","renderFallback","fallbackIndex","HydrateFallback","hydrateFallbackElement","loaderData","needsToRunLoader","loader","reduceRight","shouldRenderHydrateFallback","alreadyWarned","getChildren","hookName","useRouteContext","thisRoute","Route","_props","Router","_ref5","basenameProp","locationProp","staticProp","navigationContext","v7_relativeSplatPath","locationContext","trailingPathname","Routes","_ref6","createRoutesFromChildren","treePath","hasErrorBoundary","shouldRevalidate","handle","__reactRouterVersion","startTransitionImpl","ReactDOM","BrowserRouter","_ref4","historyRef","setStateImpl","v7_startTransition","newState","DataRouterHook","Navbar","_jsx","_jsxs","a_year","shopMain","about","contact","class","prototypeToString","NodeList","isDomNode","isDomNodeList","query","format","matrix","identity","RangeError","multiply","fm","fx","product","row","rotateZ","angle","theta","PI","cos","sin","scale","scalar","scalarY","polyfill","clock","currentTime","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","defaults","distance","duration","easing","rotate","cleanup","desktop","mobile","useDelay","viewFactor","viewOffset","afterReset","afterReveal","beforeReset","beforeReveal","mount","success","failure","clean","reveal","sync","noop","isObject","collection","item","logger","details","len","debug","report","rinse","this$1","elementIds","active","stale","sequenceIds","containerIds","store","staleId","containerId","sequence","containers","delegate","sequences","getPrefixedCssProp","properties","getPrefixedCssProperty","clearCache","computed","config","inline","inlineMatch","generated","computedOpacity","configOpacity","transformations","axis","fontSize","translateY","translateX","rotateX","rotateY","property","raw","initial","final","fragments","delayed","instant","composed","composition","fragment","applyStyle","declaration","pair","dirty","callbackTimer","deepAssign","sources","isMobile","agent","nextUniqueId","uid","initialize","visible","revealed","initTimeout","animate","force","pristine","seen","shouldReveal","shouldReset","triggerReveal","triggerReset","registerCallbacks","isDelayed","beforeCallback","afterCallback","elapsed","seq","SequenceModel","models","nextId","members","nextElement","cue","blocked","head","foot","Sequence","syncing","sequence$$1","containerBuffer","nodes","elementBuffer","elementNode","existingId","containerNode","collections","getContainerId","record","mathSign","sign","getGeometry","isContainer","bounds","getScrolled","isElementVisible","elementBounds","geometry","containerBounds","raf","boundDelegate","boundDestroy","boundReveal","boundClean","boundSync","ScrollReveal","buffer","isTransformSupported","isTransitionSupported","Hero","revealRef1","revealRef2","revealRef3","heroImage","alt","A_year","_Fragment","projectImage","fontFamily","letterSpacing","NotepadPage","notebook","Motivation","sadImage1","sadImage2","Follow","followImage1","Footer","revealRef","MainShop","A_Year_Main","revealRef4","revealRef5","AboutMain","aboutImage","ContactMain","method","htmlFor","cols","rows","Navigation","onSearchChange","searchInput","setSearchInput","onChange","placeholder","MainContent","products","setProducts","async","response","fetch","dataProducts","json","getDataProducts","BasicBodyCard","urlImage","image","description","category","price","HeroSection","Electronics","searchTerm","setSearchTerm","term","Jewelery","Mens","Womens","HeroSectionSearch","Searching","process","App"],"sourceRoot":""}